/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Provider
{
    #region MediaStore
    public partial class MediaStore
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#AUTHORITY_URI"/>
        /// </summary>
        public static Android.Net.Uri AUTHORITY_URI { get { if (!_AUTHORITY_URIReady) { _AUTHORITY_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "AUTHORITY_URI"); _AUTHORITY_URIReady = true; } return _AUTHORITY_URIContent; } }
        private static Android.Net.Uri _AUTHORITY_URIContent = default;
        private static bool _AUTHORITY_URIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#MATCH_DEFAULT"/>
        /// </summary>
        public static int MATCH_DEFAULT { get { if (!_MATCH_DEFAULTReady) { _MATCH_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "MATCH_DEFAULT"); _MATCH_DEFAULTReady = true; } return _MATCH_DEFAULTContent; } }
        private static int _MATCH_DEFAULTContent = default;
        private static bool _MATCH_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#MATCH_EXCLUDE"/>
        /// </summary>
        public static int MATCH_EXCLUDE { get { if (!_MATCH_EXCLUDEReady) { _MATCH_EXCLUDEContent = SGetField<int>(LocalBridgeClazz, "MATCH_EXCLUDE"); _MATCH_EXCLUDEReady = true; } return _MATCH_EXCLUDEContent; } }
        private static int _MATCH_EXCLUDEContent = default;
        private static bool _MATCH_EXCLUDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#MATCH_INCLUDE"/>
        /// </summary>
        public static int MATCH_INCLUDE { get { if (!_MATCH_INCLUDEReady) { _MATCH_INCLUDEContent = SGetField<int>(LocalBridgeClazz, "MATCH_INCLUDE"); _MATCH_INCLUDEReady = true; } return _MATCH_INCLUDEContent; } }
        private static int _MATCH_INCLUDEContent = default;
        private static bool _MATCH_INCLUDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#MATCH_ONLY"/>
        /// </summary>
        public static int MATCH_ONLY { get { if (!_MATCH_ONLYReady) { _MATCH_ONLYContent = SGetField<int>(LocalBridgeClazz, "MATCH_ONLY"); _MATCH_ONLYReady = true; } return _MATCH_ONLYContent; } }
        private static int _MATCH_ONLYContent = default;
        private static bool _MATCH_ONLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#ACTION_IMAGE_CAPTURE"/>
        /// </summary>
        public static Java.Lang.String ACTION_IMAGE_CAPTURE { get { if (!_ACTION_IMAGE_CAPTUREReady) { _ACTION_IMAGE_CAPTUREContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_IMAGE_CAPTURE"); _ACTION_IMAGE_CAPTUREReady = true; } return _ACTION_IMAGE_CAPTUREContent; } }
        private static Java.Lang.String _ACTION_IMAGE_CAPTUREContent = default;
        private static bool _ACTION_IMAGE_CAPTUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#ACTION_IMAGE_CAPTURE_SECURE"/>
        /// </summary>
        public static Java.Lang.String ACTION_IMAGE_CAPTURE_SECURE { get { if (!_ACTION_IMAGE_CAPTURE_SECUREReady) { _ACTION_IMAGE_CAPTURE_SECUREContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_IMAGE_CAPTURE_SECURE"); _ACTION_IMAGE_CAPTURE_SECUREReady = true; } return _ACTION_IMAGE_CAPTURE_SECUREContent; } }
        private static Java.Lang.String _ACTION_IMAGE_CAPTURE_SECUREContent = default;
        private static bool _ACTION_IMAGE_CAPTURE_SECUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#ACTION_PICK_IMAGES"/>
        /// </summary>
        public static Java.Lang.String ACTION_PICK_IMAGES { get { if (!_ACTION_PICK_IMAGESReady) { _ACTION_PICK_IMAGESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_PICK_IMAGES"); _ACTION_PICK_IMAGESReady = true; } return _ACTION_PICK_IMAGESContent; } }
        private static Java.Lang.String _ACTION_PICK_IMAGESContent = default;
        private static bool _ACTION_PICK_IMAGESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#ACTION_PICK_IMAGES_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_PICK_IMAGES_SETTINGS { get { if (!_ACTION_PICK_IMAGES_SETTINGSReady) { _ACTION_PICK_IMAGES_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_PICK_IMAGES_SETTINGS"); _ACTION_PICK_IMAGES_SETTINGSReady = true; } return _ACTION_PICK_IMAGES_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_PICK_IMAGES_SETTINGSContent = default;
        private static bool _ACTION_PICK_IMAGES_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#ACTION_REVIEW"/>
        /// </summary>
        public static Java.Lang.String ACTION_REVIEW { get { if (!_ACTION_REVIEWReady) { _ACTION_REVIEWContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_REVIEW"); _ACTION_REVIEWReady = true; } return _ACTION_REVIEWContent; } }
        private static Java.Lang.String _ACTION_REVIEWContent = default;
        private static bool _ACTION_REVIEWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#ACTION_REVIEW_SECURE"/>
        /// </summary>
        public static Java.Lang.String ACTION_REVIEW_SECURE { get { if (!_ACTION_REVIEW_SECUREReady) { _ACTION_REVIEW_SECUREContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_REVIEW_SECURE"); _ACTION_REVIEW_SECUREReady = true; } return _ACTION_REVIEW_SECUREContent; } }
        private static Java.Lang.String _ACTION_REVIEW_SECUREContent = default;
        private static bool _ACTION_REVIEW_SECUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#ACTION_VIDEO_CAPTURE"/>
        /// </summary>
        public static Java.Lang.String ACTION_VIDEO_CAPTURE { get { if (!_ACTION_VIDEO_CAPTUREReady) { _ACTION_VIDEO_CAPTUREContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_VIDEO_CAPTURE"); _ACTION_VIDEO_CAPTUREReady = true; } return _ACTION_VIDEO_CAPTUREContent; } }
        private static Java.Lang.String _ACTION_VIDEO_CAPTUREContent = default;
        private static bool _ACTION_VIDEO_CAPTUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#AUTHORITY"/>
        /// </summary>
        public static Java.Lang.String AUTHORITY { get { if (!_AUTHORITYReady) { _AUTHORITYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "AUTHORITY"); _AUTHORITYReady = true; } return _AUTHORITYContent; } }
        private static Java.Lang.String _AUTHORITYContent = default;
        private static bool _AUTHORITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#EXTRA_ACCEPT_ORIGINAL_MEDIA_FORMAT"/>
        /// </summary>
        public static Java.Lang.String EXTRA_ACCEPT_ORIGINAL_MEDIA_FORMAT { get { if (!_EXTRA_ACCEPT_ORIGINAL_MEDIA_FORMATReady) { _EXTRA_ACCEPT_ORIGINAL_MEDIA_FORMATContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ACCEPT_ORIGINAL_MEDIA_FORMAT"); _EXTRA_ACCEPT_ORIGINAL_MEDIA_FORMATReady = true; } return _EXTRA_ACCEPT_ORIGINAL_MEDIA_FORMATContent; } }
        private static Java.Lang.String _EXTRA_ACCEPT_ORIGINAL_MEDIA_FORMATContent = default;
        private static bool _EXTRA_ACCEPT_ORIGINAL_MEDIA_FORMATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#EXTRA_BRIGHTNESS"/>
        /// </summary>
        public static Java.Lang.String EXTRA_BRIGHTNESS { get { if (!_EXTRA_BRIGHTNESSReady) { _EXTRA_BRIGHTNESSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_BRIGHTNESS"); _EXTRA_BRIGHTNESSReady = true; } return _EXTRA_BRIGHTNESSContent; } }
        private static Java.Lang.String _EXTRA_BRIGHTNESSContent = default;
        private static bool _EXTRA_BRIGHTNESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#EXTRA_DURATION_LIMIT"/>
        /// </summary>
        public static Java.Lang.String EXTRA_DURATION_LIMIT { get { if (!_EXTRA_DURATION_LIMITReady) { _EXTRA_DURATION_LIMITContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_DURATION_LIMIT"); _EXTRA_DURATION_LIMITReady = true; } return _EXTRA_DURATION_LIMITContent; } }
        private static Java.Lang.String _EXTRA_DURATION_LIMITContent = default;
        private static bool _EXTRA_DURATION_LIMITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#EXTRA_FINISH_ON_COMPLETION"/>
        /// </summary>
        public static Java.Lang.String EXTRA_FINISH_ON_COMPLETION { get { if (!_EXTRA_FINISH_ON_COMPLETIONReady) { _EXTRA_FINISH_ON_COMPLETIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_FINISH_ON_COMPLETION"); _EXTRA_FINISH_ON_COMPLETIONReady = true; } return _EXTRA_FINISH_ON_COMPLETIONContent; } }
        private static Java.Lang.String _EXTRA_FINISH_ON_COMPLETIONContent = default;
        private static bool _EXTRA_FINISH_ON_COMPLETIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#EXTRA_FULL_SCREEN"/>
        /// </summary>
        public static Java.Lang.String EXTRA_FULL_SCREEN { get { if (!_EXTRA_FULL_SCREENReady) { _EXTRA_FULL_SCREENContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_FULL_SCREEN"); _EXTRA_FULL_SCREENReady = true; } return _EXTRA_FULL_SCREENContent; } }
        private static Java.Lang.String _EXTRA_FULL_SCREENContent = default;
        private static bool _EXTRA_FULL_SCREENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#EXTRA_MEDIA_ALBUM"/>
        /// </summary>
        public static Java.Lang.String EXTRA_MEDIA_ALBUM { get { if (!_EXTRA_MEDIA_ALBUMReady) { _EXTRA_MEDIA_ALBUMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_MEDIA_ALBUM"); _EXTRA_MEDIA_ALBUMReady = true; } return _EXTRA_MEDIA_ALBUMContent; } }
        private static Java.Lang.String _EXTRA_MEDIA_ALBUMContent = default;
        private static bool _EXTRA_MEDIA_ALBUMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#EXTRA_MEDIA_ARTIST"/>
        /// </summary>
        public static Java.Lang.String EXTRA_MEDIA_ARTIST { get { if (!_EXTRA_MEDIA_ARTISTReady) { _EXTRA_MEDIA_ARTISTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_MEDIA_ARTIST"); _EXTRA_MEDIA_ARTISTReady = true; } return _EXTRA_MEDIA_ARTISTContent; } }
        private static Java.Lang.String _EXTRA_MEDIA_ARTISTContent = default;
        private static bool _EXTRA_MEDIA_ARTISTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#EXTRA_MEDIA_CAPABILITIES"/>
        /// </summary>
        public static Java.Lang.String EXTRA_MEDIA_CAPABILITIES { get { if (!_EXTRA_MEDIA_CAPABILITIESReady) { _EXTRA_MEDIA_CAPABILITIESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_MEDIA_CAPABILITIES"); _EXTRA_MEDIA_CAPABILITIESReady = true; } return _EXTRA_MEDIA_CAPABILITIESContent; } }
        private static Java.Lang.String _EXTRA_MEDIA_CAPABILITIESContent = default;
        private static bool _EXTRA_MEDIA_CAPABILITIESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#EXTRA_MEDIA_CAPABILITIES_UID"/>
        /// </summary>
        public static Java.Lang.String EXTRA_MEDIA_CAPABILITIES_UID { get { if (!_EXTRA_MEDIA_CAPABILITIES_UIDReady) { _EXTRA_MEDIA_CAPABILITIES_UIDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_MEDIA_CAPABILITIES_UID"); _EXTRA_MEDIA_CAPABILITIES_UIDReady = true; } return _EXTRA_MEDIA_CAPABILITIES_UIDContent; } }
        private static Java.Lang.String _EXTRA_MEDIA_CAPABILITIES_UIDContent = default;
        private static bool _EXTRA_MEDIA_CAPABILITIES_UIDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#EXTRA_MEDIA_FOCUS"/>
        /// </summary>
        public static Java.Lang.String EXTRA_MEDIA_FOCUS { get { if (!_EXTRA_MEDIA_FOCUSReady) { _EXTRA_MEDIA_FOCUSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_MEDIA_FOCUS"); _EXTRA_MEDIA_FOCUSReady = true; } return _EXTRA_MEDIA_FOCUSContent; } }
        private static Java.Lang.String _EXTRA_MEDIA_FOCUSContent = default;
        private static bool _EXTRA_MEDIA_FOCUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#EXTRA_MEDIA_GENRE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_MEDIA_GENRE { get { if (!_EXTRA_MEDIA_GENREReady) { _EXTRA_MEDIA_GENREContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_MEDIA_GENRE"); _EXTRA_MEDIA_GENREReady = true; } return _EXTRA_MEDIA_GENREContent; } }
        private static Java.Lang.String _EXTRA_MEDIA_GENREContent = default;
        private static bool _EXTRA_MEDIA_GENREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#EXTRA_MEDIA_PLAYLIST"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String EXTRA_MEDIA_PLAYLIST { get { if (!_EXTRA_MEDIA_PLAYLISTReady) { _EXTRA_MEDIA_PLAYLISTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_MEDIA_PLAYLIST"); _EXTRA_MEDIA_PLAYLISTReady = true; } return _EXTRA_MEDIA_PLAYLISTContent; } }
        private static Java.Lang.String _EXTRA_MEDIA_PLAYLISTContent = default;
        private static bool _EXTRA_MEDIA_PLAYLISTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#EXTRA_MEDIA_RADIO_CHANNEL"/>
        /// </summary>
        public static Java.Lang.String EXTRA_MEDIA_RADIO_CHANNEL { get { if (!_EXTRA_MEDIA_RADIO_CHANNELReady) { _EXTRA_MEDIA_RADIO_CHANNELContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_MEDIA_RADIO_CHANNEL"); _EXTRA_MEDIA_RADIO_CHANNELReady = true; } return _EXTRA_MEDIA_RADIO_CHANNELContent; } }
        private static Java.Lang.String _EXTRA_MEDIA_RADIO_CHANNELContent = default;
        private static bool _EXTRA_MEDIA_RADIO_CHANNELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#EXTRA_MEDIA_TITLE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_MEDIA_TITLE { get { if (!_EXTRA_MEDIA_TITLEReady) { _EXTRA_MEDIA_TITLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_MEDIA_TITLE"); _EXTRA_MEDIA_TITLEReady = true; } return _EXTRA_MEDIA_TITLEContent; } }
        private static Java.Lang.String _EXTRA_MEDIA_TITLEContent = default;
        private static bool _EXTRA_MEDIA_TITLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#EXTRA_OUTPUT"/>
        /// </summary>
        public static Java.Lang.String EXTRA_OUTPUT { get { if (!_EXTRA_OUTPUTReady) { _EXTRA_OUTPUTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_OUTPUT"); _EXTRA_OUTPUTReady = true; } return _EXTRA_OUTPUTContent; } }
        private static Java.Lang.String _EXTRA_OUTPUTContent = default;
        private static bool _EXTRA_OUTPUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#EXTRA_PICK_IMAGES_MAX"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PICK_IMAGES_MAX { get { if (!_EXTRA_PICK_IMAGES_MAXReady) { _EXTRA_PICK_IMAGES_MAXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PICK_IMAGES_MAX"); _EXTRA_PICK_IMAGES_MAXReady = true; } return _EXTRA_PICK_IMAGES_MAXContent; } }
        private static Java.Lang.String _EXTRA_PICK_IMAGES_MAXContent = default;
        private static bool _EXTRA_PICK_IMAGES_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#EXTRA_SCREEN_ORIENTATION"/>
        /// </summary>
        public static Java.Lang.String EXTRA_SCREEN_ORIENTATION { get { if (!_EXTRA_SCREEN_ORIENTATIONReady) { _EXTRA_SCREEN_ORIENTATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_SCREEN_ORIENTATION"); _EXTRA_SCREEN_ORIENTATIONReady = true; } return _EXTRA_SCREEN_ORIENTATIONContent; } }
        private static Java.Lang.String _EXTRA_SCREEN_ORIENTATIONContent = default;
        private static bool _EXTRA_SCREEN_ORIENTATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#EXTRA_SHOW_ACTION_ICONS"/>
        /// </summary>
        public static Java.Lang.String EXTRA_SHOW_ACTION_ICONS { get { if (!_EXTRA_SHOW_ACTION_ICONSReady) { _EXTRA_SHOW_ACTION_ICONSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_SHOW_ACTION_ICONS"); _EXTRA_SHOW_ACTION_ICONSReady = true; } return _EXTRA_SHOW_ACTION_ICONSContent; } }
        private static Java.Lang.String _EXTRA_SHOW_ACTION_ICONSContent = default;
        private static bool _EXTRA_SHOW_ACTION_ICONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#EXTRA_SIZE_LIMIT"/>
        /// </summary>
        public static Java.Lang.String EXTRA_SIZE_LIMIT { get { if (!_EXTRA_SIZE_LIMITReady) { _EXTRA_SIZE_LIMITContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_SIZE_LIMIT"); _EXTRA_SIZE_LIMITReady = true; } return _EXTRA_SIZE_LIMITContent; } }
        private static Java.Lang.String _EXTRA_SIZE_LIMITContent = default;
        private static bool _EXTRA_SIZE_LIMITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#EXTRA_VIDEO_QUALITY"/>
        /// </summary>
        public static Java.Lang.String EXTRA_VIDEO_QUALITY { get { if (!_EXTRA_VIDEO_QUALITYReady) { _EXTRA_VIDEO_QUALITYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_VIDEO_QUALITY"); _EXTRA_VIDEO_QUALITYReady = true; } return _EXTRA_VIDEO_QUALITYContent; } }
        private static Java.Lang.String _EXTRA_VIDEO_QUALITYContent = default;
        private static bool _EXTRA_VIDEO_QUALITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#INTENT_ACTION_MEDIA_PLAY_FROM_SEARCH"/>
        /// </summary>
        public static Java.Lang.String INTENT_ACTION_MEDIA_PLAY_FROM_SEARCH { get { if (!_INTENT_ACTION_MEDIA_PLAY_FROM_SEARCHReady) { _INTENT_ACTION_MEDIA_PLAY_FROM_SEARCHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "INTENT_ACTION_MEDIA_PLAY_FROM_SEARCH"); _INTENT_ACTION_MEDIA_PLAY_FROM_SEARCHReady = true; } return _INTENT_ACTION_MEDIA_PLAY_FROM_SEARCHContent; } }
        private static Java.Lang.String _INTENT_ACTION_MEDIA_PLAY_FROM_SEARCHContent = default;
        private static bool _INTENT_ACTION_MEDIA_PLAY_FROM_SEARCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#INTENT_ACTION_MEDIA_SEARCH"/>
        /// </summary>
        public static Java.Lang.String INTENT_ACTION_MEDIA_SEARCH { get { if (!_INTENT_ACTION_MEDIA_SEARCHReady) { _INTENT_ACTION_MEDIA_SEARCHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "INTENT_ACTION_MEDIA_SEARCH"); _INTENT_ACTION_MEDIA_SEARCHReady = true; } return _INTENT_ACTION_MEDIA_SEARCHContent; } }
        private static Java.Lang.String _INTENT_ACTION_MEDIA_SEARCHContent = default;
        private static bool _INTENT_ACTION_MEDIA_SEARCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#INTENT_ACTION_MUSIC_PLAYER"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String INTENT_ACTION_MUSIC_PLAYER { get { if (!_INTENT_ACTION_MUSIC_PLAYERReady) { _INTENT_ACTION_MUSIC_PLAYERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "INTENT_ACTION_MUSIC_PLAYER"); _INTENT_ACTION_MUSIC_PLAYERReady = true; } return _INTENT_ACTION_MUSIC_PLAYERContent; } }
        private static Java.Lang.String _INTENT_ACTION_MUSIC_PLAYERContent = default;
        private static bool _INTENT_ACTION_MUSIC_PLAYERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#INTENT_ACTION_STILL_IMAGE_CAMERA"/>
        /// </summary>
        public static Java.Lang.String INTENT_ACTION_STILL_IMAGE_CAMERA { get { if (!_INTENT_ACTION_STILL_IMAGE_CAMERAReady) { _INTENT_ACTION_STILL_IMAGE_CAMERAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "INTENT_ACTION_STILL_IMAGE_CAMERA"); _INTENT_ACTION_STILL_IMAGE_CAMERAReady = true; } return _INTENT_ACTION_STILL_IMAGE_CAMERAContent; } }
        private static Java.Lang.String _INTENT_ACTION_STILL_IMAGE_CAMERAContent = default;
        private static bool _INTENT_ACTION_STILL_IMAGE_CAMERAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE"/>
        /// </summary>
        public static Java.Lang.String INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE { get { if (!_INTENT_ACTION_STILL_IMAGE_CAMERA_SECUREReady) { _INTENT_ACTION_STILL_IMAGE_CAMERA_SECUREContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE"); _INTENT_ACTION_STILL_IMAGE_CAMERA_SECUREReady = true; } return _INTENT_ACTION_STILL_IMAGE_CAMERA_SECUREContent; } }
        private static Java.Lang.String _INTENT_ACTION_STILL_IMAGE_CAMERA_SECUREContent = default;
        private static bool _INTENT_ACTION_STILL_IMAGE_CAMERA_SECUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#INTENT_ACTION_TEXT_OPEN_FROM_SEARCH"/>
        /// </summary>
        public static Java.Lang.String INTENT_ACTION_TEXT_OPEN_FROM_SEARCH { get { if (!_INTENT_ACTION_TEXT_OPEN_FROM_SEARCHReady) { _INTENT_ACTION_TEXT_OPEN_FROM_SEARCHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "INTENT_ACTION_TEXT_OPEN_FROM_SEARCH"); _INTENT_ACTION_TEXT_OPEN_FROM_SEARCHReady = true; } return _INTENT_ACTION_TEXT_OPEN_FROM_SEARCHContent; } }
        private static Java.Lang.String _INTENT_ACTION_TEXT_OPEN_FROM_SEARCHContent = default;
        private static bool _INTENT_ACTION_TEXT_OPEN_FROM_SEARCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#INTENT_ACTION_VIDEO_CAMERA"/>
        /// </summary>
        public static Java.Lang.String INTENT_ACTION_VIDEO_CAMERA { get { if (!_INTENT_ACTION_VIDEO_CAMERAReady) { _INTENT_ACTION_VIDEO_CAMERAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "INTENT_ACTION_VIDEO_CAMERA"); _INTENT_ACTION_VIDEO_CAMERAReady = true; } return _INTENT_ACTION_VIDEO_CAMERAContent; } }
        private static Java.Lang.String _INTENT_ACTION_VIDEO_CAMERAContent = default;
        private static bool _INTENT_ACTION_VIDEO_CAMERAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#INTENT_ACTION_VIDEO_PLAY_FROM_SEARCH"/>
        /// </summary>
        public static Java.Lang.String INTENT_ACTION_VIDEO_PLAY_FROM_SEARCH { get { if (!_INTENT_ACTION_VIDEO_PLAY_FROM_SEARCHReady) { _INTENT_ACTION_VIDEO_PLAY_FROM_SEARCHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "INTENT_ACTION_VIDEO_PLAY_FROM_SEARCH"); _INTENT_ACTION_VIDEO_PLAY_FROM_SEARCHReady = true; } return _INTENT_ACTION_VIDEO_PLAY_FROM_SEARCHContent; } }
        private static Java.Lang.String _INTENT_ACTION_VIDEO_PLAY_FROM_SEARCHContent = default;
        private static bool _INTENT_ACTION_VIDEO_PLAY_FROM_SEARCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#MEDIA_IGNORE_FILENAME"/>
        /// </summary>
        public static Java.Lang.String MEDIA_IGNORE_FILENAME { get { if (!_MEDIA_IGNORE_FILENAMEReady) { _MEDIA_IGNORE_FILENAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MEDIA_IGNORE_FILENAME"); _MEDIA_IGNORE_FILENAMEReady = true; } return _MEDIA_IGNORE_FILENAMEContent; } }
        private static Java.Lang.String _MEDIA_IGNORE_FILENAMEContent = default;
        private static bool _MEDIA_IGNORE_FILENAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#MEDIA_SCANNER_VOLUME"/>
        /// </summary>
        public static Java.Lang.String MEDIA_SCANNER_VOLUME { get { if (!_MEDIA_SCANNER_VOLUMEReady) { _MEDIA_SCANNER_VOLUMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MEDIA_SCANNER_VOLUME"); _MEDIA_SCANNER_VOLUMEReady = true; } return _MEDIA_SCANNER_VOLUMEContent; } }
        private static Java.Lang.String _MEDIA_SCANNER_VOLUMEContent = default;
        private static bool _MEDIA_SCANNER_VOLUMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#META_DATA_REVIEW_GALLERY_PREWARM_SERVICE"/>
        /// </summary>
        public static Java.Lang.String META_DATA_REVIEW_GALLERY_PREWARM_SERVICE { get { if (!_META_DATA_REVIEW_GALLERY_PREWARM_SERVICEReady) { _META_DATA_REVIEW_GALLERY_PREWARM_SERVICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "META_DATA_REVIEW_GALLERY_PREWARM_SERVICE"); _META_DATA_REVIEW_GALLERY_PREWARM_SERVICEReady = true; } return _META_DATA_REVIEW_GALLERY_PREWARM_SERVICEContent; } }
        private static Java.Lang.String _META_DATA_REVIEW_GALLERY_PREWARM_SERVICEContent = default;
        private static bool _META_DATA_REVIEW_GALLERY_PREWARM_SERVICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#META_DATA_STILL_IMAGE_CAMERA_PREWARM_SERVICE"/>
        /// </summary>
        public static Java.Lang.String META_DATA_STILL_IMAGE_CAMERA_PREWARM_SERVICE { get { if (!_META_DATA_STILL_IMAGE_CAMERA_PREWARM_SERVICEReady) { _META_DATA_STILL_IMAGE_CAMERA_PREWARM_SERVICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "META_DATA_STILL_IMAGE_CAMERA_PREWARM_SERVICE"); _META_DATA_STILL_IMAGE_CAMERA_PREWARM_SERVICEReady = true; } return _META_DATA_STILL_IMAGE_CAMERA_PREWARM_SERVICEContent; } }
        private static Java.Lang.String _META_DATA_STILL_IMAGE_CAMERA_PREWARM_SERVICEContent = default;
        private static bool _META_DATA_STILL_IMAGE_CAMERA_PREWARM_SERVICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#QUERY_ARG_INCLUDE_RECENTLY_UNMOUNTED_VOLUMES"/>
        /// </summary>
        public static Java.Lang.String QUERY_ARG_INCLUDE_RECENTLY_UNMOUNTED_VOLUMES { get { if (!_QUERY_ARG_INCLUDE_RECENTLY_UNMOUNTED_VOLUMESReady) { _QUERY_ARG_INCLUDE_RECENTLY_UNMOUNTED_VOLUMESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "QUERY_ARG_INCLUDE_RECENTLY_UNMOUNTED_VOLUMES"); _QUERY_ARG_INCLUDE_RECENTLY_UNMOUNTED_VOLUMESReady = true; } return _QUERY_ARG_INCLUDE_RECENTLY_UNMOUNTED_VOLUMESContent; } }
        private static Java.Lang.String _QUERY_ARG_INCLUDE_RECENTLY_UNMOUNTED_VOLUMESContent = default;
        private static bool _QUERY_ARG_INCLUDE_RECENTLY_UNMOUNTED_VOLUMESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#QUERY_ARG_MATCH_FAVORITE"/>
        /// </summary>
        public static Java.Lang.String QUERY_ARG_MATCH_FAVORITE { get { if (!_QUERY_ARG_MATCH_FAVORITEReady) { _QUERY_ARG_MATCH_FAVORITEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "QUERY_ARG_MATCH_FAVORITE"); _QUERY_ARG_MATCH_FAVORITEReady = true; } return _QUERY_ARG_MATCH_FAVORITEContent; } }
        private static Java.Lang.String _QUERY_ARG_MATCH_FAVORITEContent = default;
        private static bool _QUERY_ARG_MATCH_FAVORITEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#QUERY_ARG_MATCH_PENDING"/>
        /// </summary>
        public static Java.Lang.String QUERY_ARG_MATCH_PENDING { get { if (!_QUERY_ARG_MATCH_PENDINGReady) { _QUERY_ARG_MATCH_PENDINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "QUERY_ARG_MATCH_PENDING"); _QUERY_ARG_MATCH_PENDINGReady = true; } return _QUERY_ARG_MATCH_PENDINGContent; } }
        private static Java.Lang.String _QUERY_ARG_MATCH_PENDINGContent = default;
        private static bool _QUERY_ARG_MATCH_PENDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#QUERY_ARG_MATCH_TRASHED"/>
        /// </summary>
        public static Java.Lang.String QUERY_ARG_MATCH_TRASHED { get { if (!_QUERY_ARG_MATCH_TRASHEDReady) { _QUERY_ARG_MATCH_TRASHEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "QUERY_ARG_MATCH_TRASHED"); _QUERY_ARG_MATCH_TRASHEDReady = true; } return _QUERY_ARG_MATCH_TRASHEDContent; } }
        private static Java.Lang.String _QUERY_ARG_MATCH_TRASHEDContent = default;
        private static bool _QUERY_ARG_MATCH_TRASHEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#QUERY_ARG_RELATED_URI"/>
        /// </summary>
        public static Java.Lang.String QUERY_ARG_RELATED_URI { get { if (!_QUERY_ARG_RELATED_URIReady) { _QUERY_ARG_RELATED_URIContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "QUERY_ARG_RELATED_URI"); _QUERY_ARG_RELATED_URIReady = true; } return _QUERY_ARG_RELATED_URIContent; } }
        private static Java.Lang.String _QUERY_ARG_RELATED_URIContent = default;
        private static bool _QUERY_ARG_RELATED_URIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#UNKNOWN_STRING"/>
        /// </summary>
        public static Java.Lang.String UNKNOWN_STRING { get { if (!_UNKNOWN_STRINGReady) { _UNKNOWN_STRINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "UNKNOWN_STRING"); _UNKNOWN_STRINGReady = true; } return _UNKNOWN_STRINGContent; } }
        private static Java.Lang.String _UNKNOWN_STRINGContent = default;
        private static bool _UNKNOWN_STRINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#VOLUME_EXTERNAL"/>
        /// </summary>
        public static Java.Lang.String VOLUME_EXTERNAL { get { if (!_VOLUME_EXTERNALReady) { _VOLUME_EXTERNALContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "VOLUME_EXTERNAL"); _VOLUME_EXTERNALReady = true; } return _VOLUME_EXTERNALContent; } }
        private static Java.Lang.String _VOLUME_EXTERNALContent = default;
        private static bool _VOLUME_EXTERNALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#VOLUME_EXTERNAL_PRIMARY"/>
        /// </summary>
        public static Java.Lang.String VOLUME_EXTERNAL_PRIMARY { get { if (!_VOLUME_EXTERNAL_PRIMARYReady) { _VOLUME_EXTERNAL_PRIMARYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "VOLUME_EXTERNAL_PRIMARY"); _VOLUME_EXTERNAL_PRIMARYReady = true; } return _VOLUME_EXTERNAL_PRIMARYContent; } }
        private static Java.Lang.String _VOLUME_EXTERNAL_PRIMARYContent = default;
        private static bool _VOLUME_EXTERNAL_PRIMARYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#VOLUME_INTERNAL"/>
        /// </summary>
        public static Java.Lang.String VOLUME_INTERNAL { get { if (!_VOLUME_INTERNALReady) { _VOLUME_INTERNALContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "VOLUME_INTERNAL"); _VOLUME_INTERNALReady = true; } return _VOLUME_INTERNALContent; } }
        private static Java.Lang.String _VOLUME_INTERNALContent = default;
        private static bool _VOLUME_INTERNALReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#createDeleteRequest(android.content.ContentResolver,java.util.Collection)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
        /// <param name="arg1"><see cref="Java.Util.Collection"/></param>
        /// <returns><see cref="Android.App.PendingIntent"/></returns>
        public static Android.App.PendingIntent CreateDeleteRequest(Android.Content.ContentResolver arg0, Java.Util.Collection<Android.Net.Uri> arg1)
        {
            return SExecute<Android.App.PendingIntent>(LocalBridgeClazz, "createDeleteRequest", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#createFavoriteRequest(android.content.ContentResolver,java.util.Collection,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
        /// <param name="arg1"><see cref="Java.Util.Collection"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <returns><see cref="Android.App.PendingIntent"/></returns>
        public static Android.App.PendingIntent CreateFavoriteRequest(Android.Content.ContentResolver arg0, Java.Util.Collection<Android.Net.Uri> arg1, bool arg2)
        {
            return SExecute<Android.App.PendingIntent>(LocalBridgeClazz, "createFavoriteRequest", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#createTrashRequest(android.content.ContentResolver,java.util.Collection,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
        /// <param name="arg1"><see cref="Java.Util.Collection"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <returns><see cref="Android.App.PendingIntent"/></returns>
        public static Android.App.PendingIntent CreateTrashRequest(Android.Content.ContentResolver arg0, Java.Util.Collection<Android.Net.Uri> arg1, bool arg2)
        {
            return SExecute<Android.App.PendingIntent>(LocalBridgeClazz, "createTrashRequest", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#createWriteRequest(android.content.ContentResolver,java.util.Collection)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
        /// <param name="arg1"><see cref="Java.Util.Collection"/></param>
        /// <returns><see cref="Android.App.PendingIntent"/></returns>
        public static Android.App.PendingIntent CreateWriteRequest(Android.Content.ContentResolver arg0, Java.Util.Collection<Android.Net.Uri> arg1)
        {
            return SExecute<Android.App.PendingIntent>(LocalBridgeClazz, "createWriteRequest", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#getDocumentUri(android.content.Context,android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
        /// <returns><see cref="Android.Net.Uri"/></returns>
        public static Android.Net.Uri GetDocumentUri(Android.Content.Context arg0, Android.Net.Uri arg1)
        {
            return SExecute<Android.Net.Uri>(LocalBridgeClazz, "getDocumentUri", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#getMediaScannerUri()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.Uri"/></returns>
        public static Android.Net.Uri GetMediaScannerUri()
        {
            return SExecuteWithSignature<Android.Net.Uri>(LocalBridgeClazz, "getMediaScannerUri", "()Landroid/net/Uri;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#getMediaUri(android.content.Context,android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
        /// <returns><see cref="Android.Net.Uri"/></returns>
        public static Android.Net.Uri GetMediaUri(Android.Content.Context arg0, Android.Net.Uri arg1)
        {
            return SExecute<Android.Net.Uri>(LocalBridgeClazz, "getMediaUri", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#getRedactedUri(android.content.ContentResolver,android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
        /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
        /// <returns><see cref="Android.Net.Uri"/></returns>
        public static Android.Net.Uri GetRedactedUri(Android.Content.ContentResolver arg0, Android.Net.Uri arg1)
        {
            return SExecute<Android.Net.Uri>(LocalBridgeClazz, "getRedactedUri", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#setIncludePending(android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <returns><see cref="Android.Net.Uri"/></returns>
        [global::System.Obsolete()]
        public static Android.Net.Uri SetIncludePending(Android.Net.Uri arg0)
        {
            return SExecuteWithSignature<Android.Net.Uri>(LocalBridgeClazz, "setIncludePending", "(Landroid/net/Uri;)Landroid/net/Uri;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#setRequireOriginal(android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <returns><see cref="Android.Net.Uri"/></returns>
        public static Android.Net.Uri SetRequireOriginal(Android.Net.Uri arg0)
        {
            return SExecuteWithSignature<Android.Net.Uri>(LocalBridgeClazz, "setRequireOriginal", "(Landroid/net/Uri;)Landroid/net/Uri;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#getOriginalMediaFormatFileDescriptor(android.content.Context,android.os.ParcelFileDescriptor)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Os.ParcelFileDescriptor"/></param>
        /// <returns><see cref="Android.Os.ParcelFileDescriptor"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public static Android.Os.ParcelFileDescriptor GetOriginalMediaFormatFileDescriptor(Android.Content.Context arg0, Android.Os.ParcelFileDescriptor arg1)
        {
            return SExecute<Android.Os.ParcelFileDescriptor>(LocalBridgeClazz, "getOriginalMediaFormatFileDescriptor", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#canManageMedia(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool CanManageMedia(Android.Content.Context arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "canManageMedia", "(Landroid/content/Context;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#getRequireOriginal(android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool GetRequireOriginal(Android.Net.Uri arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "getRequireOriginal", "(Landroid/net/Uri;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#isCurrentCloudMediaProviderAuthority(android.content.ContentResolver,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsCurrentCloudMediaProviderAuthority(Android.Content.ContentResolver arg0, Java.Lang.String arg1)
        {
            return SExecute<bool>(LocalBridgeClazz, "isCurrentCloudMediaProviderAuthority", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#isCurrentSystemGallery(android.content.ContentResolver,int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsCurrentSystemGallery(Android.Content.ContentResolver arg0, int arg1, Java.Lang.String arg2)
        {
            return SExecute<bool>(LocalBridgeClazz, "isCurrentSystemGallery", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#isSupportedCloudMediaProviderAuthority(android.content.ContentResolver,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsSupportedCloudMediaProviderAuthority(Android.Content.ContentResolver arg0, Java.Lang.String arg1)
        {
            return SExecute<bool>(LocalBridgeClazz, "isSupportedCloudMediaProviderAuthority", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#getPickImagesMaxLimit()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public static int GetPickImagesMaxLimit()
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "getPickImagesMaxLimit", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#getVersion(android.content.Context,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String GetVersion(Android.Content.Context arg0, Java.Lang.String arg1)
        {
            return SExecute<Java.Lang.String>(LocalBridgeClazz, "getVersion", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#getVersion(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String GetVersion(Android.Content.Context arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "getVersion", "(Landroid/content/Context;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#getVolumeName(android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String GetVolumeName(Android.Net.Uri arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "getVolumeName", "(Landroid/net/Uri;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#getRedactedUri(android.content.ContentResolver,java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
        /// <param name="arg1"><see cref="Java.Util.List"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public static Java.Util.List<Android.Net.Uri> GetRedactedUri(Android.Content.ContentResolver arg0, Java.Util.List<Android.Net.Uri> arg1)
        {
            return SExecute<Java.Util.List<Android.Net.Uri>>(LocalBridgeClazz, "getRedactedUri", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#getExternalVolumeNames(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <returns><see cref="Java.Util.Set"/></returns>
        public static Java.Util.Set<Java.Lang.String> GetExternalVolumeNames(Android.Content.Context arg0)
        {
            return SExecuteWithSignature<Java.Util.Set<Java.Lang.String>>(LocalBridgeClazz, "getExternalVolumeNames", "(Landroid/content/Context;)Ljava/util/Set;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#getRecentExternalVolumeNames(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <returns><see cref="Java.Util.Set"/></returns>
        public static Java.Util.Set<Java.Lang.String> GetRecentExternalVolumeNames(Android.Content.Context arg0)
        {
            return SExecuteWithSignature<Java.Util.Set<Java.Lang.String>>(LocalBridgeClazz, "getRecentExternalVolumeNames", "(Landroid/content/Context;)Ljava/util/Set;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#getGeneration(android.content.Context,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="long"/></returns>
        public static long GetGeneration(Android.Content.Context arg0, Java.Lang.String arg1)
        {
            return SExecute<long>(LocalBridgeClazz, "getGeneration", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/MediaStore.html#notifyCloudMediaChangedEvent(android.content.ContentResolver,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <exception cref="Java.Lang.SecurityException"/>
        public static void NotifyCloudMediaChangedEvent(Android.Content.ContentResolver arg0, Java.Lang.String arg1, Java.Lang.String arg2)
        {
            SExecute(LocalBridgeClazz, "notifyCloudMediaChangedEvent", arg0, arg1, arg2);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes
        #region Audio
        public partial class Audio
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.html#keyFor(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Java.Lang.String"/></returns>
            [global::System.Obsolete()]
            public static Java.Lang.String KeyFor(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "keyFor", "(Ljava/lang/String;)Ljava/lang/String;", arg0);
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes
            #region Radio
            public partial class Radio
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Radio.html#ENTRY_CONTENT_TYPE"/>
                /// </summary>
                public static Java.Lang.String ENTRY_CONTENT_TYPE { get { if (!_ENTRY_CONTENT_TYPEReady) { _ENTRY_CONTENT_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ENTRY_CONTENT_TYPE"); _ENTRY_CONTENT_TYPEReady = true; } return _ENTRY_CONTENT_TYPEContent; } }
                private static Java.Lang.String _ENTRY_CONTENT_TYPEContent = default;
                private static bool _ENTRY_CONTENT_TYPEReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

            #region PlaylistsColumns
            public partial class PlaylistsColumns
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.PlaylistsColumns.html#DATA"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Java.Lang.String DATA { get { if (!_DATAReady) { _DATAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DATA"); _DATAReady = true; } return _DATAContent; } }
                private static Java.Lang.String _DATAContent = default;
                private static bool _DATAReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.PlaylistsColumns.html#DATE_ADDED"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Java.Lang.String DATE_ADDED { get { if (!_DATE_ADDEDReady) { _DATE_ADDEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DATE_ADDED"); _DATE_ADDEDReady = true; } return _DATE_ADDEDContent; } }
                private static Java.Lang.String _DATE_ADDEDContent = default;
                private static bool _DATE_ADDEDReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.PlaylistsColumns.html#DATE_MODIFIED"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Java.Lang.String DATE_MODIFIED { get { if (!_DATE_MODIFIEDReady) { _DATE_MODIFIEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DATE_MODIFIED"); _DATE_MODIFIEDReady = true; } return _DATE_MODIFIEDContent; } }
                private static Java.Lang.String _DATE_MODIFIEDContent = default;
                private static bool _DATE_MODIFIEDReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.PlaylistsColumns.html#NAME"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Java.Lang.String NAME { get { if (!_NAMEReady) { _NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAME"); _NAMEReady = true; } return _NAMEContent; } }
                private static Java.Lang.String _NAMEContent = default;
                private static bool _NAMEReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

            #region Playlists
            public partial class Playlists : Android.Provider.IBaseColumns
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators
                /// <summary>
                /// Converter from <see cref="Android.Provider.MediaStore.Audio.Playlists"/> to <see cref="Android.Provider.BaseColumns"/>
                /// </summary>
                public static implicit operator Android.Provider.BaseColumns(Android.Provider.MediaStore.Audio.Playlists t) => t.Cast<Android.Provider.BaseColumns>();

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Playlists.html#EXTERNAL_CONTENT_URI"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Android.Net.Uri EXTERNAL_CONTENT_URI { get { if (!_EXTERNAL_CONTENT_URIReady) { _EXTERNAL_CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "EXTERNAL_CONTENT_URI"); _EXTERNAL_CONTENT_URIReady = true; } return _EXTERNAL_CONTENT_URIContent; } }
                private static Android.Net.Uri _EXTERNAL_CONTENT_URIContent = default;
                private static bool _EXTERNAL_CONTENT_URIReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Playlists.html#INTERNAL_CONTENT_URI"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Android.Net.Uri INTERNAL_CONTENT_URI { get { if (!_INTERNAL_CONTENT_URIReady) { _INTERNAL_CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "INTERNAL_CONTENT_URI"); _INTERNAL_CONTENT_URIReady = true; } return _INTERNAL_CONTENT_URIContent; } }
                private static Android.Net.Uri _INTERNAL_CONTENT_URIContent = default;
                private static bool _INTERNAL_CONTENT_URIReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Playlists.html#CONTENT_TYPE"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Java.Lang.String CONTENT_TYPE { get { if (!_CONTENT_TYPEReady) { _CONTENT_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_TYPE"); _CONTENT_TYPEReady = true; } return _CONTENT_TYPEContent; } }
                private static Java.Lang.String _CONTENT_TYPEContent = default;
                private static bool _CONTENT_TYPEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Playlists.html#DEFAULT_SORT_ORDER"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Java.Lang.String DEFAULT_SORT_ORDER { get { if (!_DEFAULT_SORT_ORDERReady) { _DEFAULT_SORT_ORDERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFAULT_SORT_ORDER"); _DEFAULT_SORT_ORDERReady = true; } return _DEFAULT_SORT_ORDERContent; } }
                private static Java.Lang.String _DEFAULT_SORT_ORDERContent = default;
                private static bool _DEFAULT_SORT_ORDERReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Playlists.html#ENTRY_CONTENT_TYPE"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Java.Lang.String ENTRY_CONTENT_TYPE { get { if (!_ENTRY_CONTENT_TYPEReady) { _ENTRY_CONTENT_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ENTRY_CONTENT_TYPE"); _ENTRY_CONTENT_TYPEReady = true; } return _ENTRY_CONTENT_TYPEContent; } }
                private static Java.Lang.String _ENTRY_CONTENT_TYPEContent = default;
                private static bool _ENTRY_CONTENT_TYPEReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Playlists.html#getContentUri(java.lang.String)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Java.Lang.String"/></param>
                /// <returns><see cref="Android.Net.Uri"/></returns>
                [global::System.Obsolete()]
                public static Android.Net.Uri GetContentUri(Java.Lang.String arg0)
                {
                    return SExecuteWithSignature<Android.Net.Uri>(LocalBridgeClazz, "getContentUri", "(Ljava/lang/String;)Landroid/net/Uri;", arg0);
                }

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes
                #region Members
                public partial class Members
                {
                    #region Constructors

                    #endregion

                    #region Class/Interface conversion operators

                    #endregion

                    #region Fields
                    /// <summary>
                    /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Playlists.Members.html#_ID"/>
                    /// </summary>
                    [global::System.Obsolete()]
                    public static Java.Lang.String _ID { get { if (!__IDReady) { __IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "_ID"); __IDReady = true; } return __IDContent; } }
                    private static Java.Lang.String __IDContent = default;
                    private static bool __IDReady = false; // this is used because in case of generics 
                    /// <summary>
                    /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Playlists.Members.html#AUDIO_ID"/>
                    /// </summary>
                    [global::System.Obsolete()]
                    public static Java.Lang.String AUDIO_ID { get { if (!_AUDIO_IDReady) { _AUDIO_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "AUDIO_ID"); _AUDIO_IDReady = true; } return _AUDIO_IDContent; } }
                    private static Java.Lang.String _AUDIO_IDContent = default;
                    private static bool _AUDIO_IDReady = false; // this is used because in case of generics 
                    /// <summary>
                    /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Playlists.Members.html#CONTENT_DIRECTORY"/>
                    /// </summary>
                    [global::System.Obsolete()]
                    public static Java.Lang.String CONTENT_DIRECTORY { get { if (!_CONTENT_DIRECTORYReady) { _CONTENT_DIRECTORYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_DIRECTORY"); _CONTENT_DIRECTORYReady = true; } return _CONTENT_DIRECTORYContent; } }
                    private static Java.Lang.String _CONTENT_DIRECTORYContent = default;
                    private static bool _CONTENT_DIRECTORYReady = false; // this is used because in case of generics 
                    /// <summary>
                    /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Playlists.Members.html#DEFAULT_SORT_ORDER"/>
                    /// </summary>
                    [global::System.Obsolete()]
                    public static Java.Lang.String DEFAULT_SORT_ORDER { get { if (!_DEFAULT_SORT_ORDERReady) { _DEFAULT_SORT_ORDERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFAULT_SORT_ORDER"); _DEFAULT_SORT_ORDERReady = true; } return _DEFAULT_SORT_ORDERContent; } }
                    private static Java.Lang.String _DEFAULT_SORT_ORDERContent = default;
                    private static bool _DEFAULT_SORT_ORDERReady = false; // this is used because in case of generics 
                    /// <summary>
                    /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Playlists.Members.html#PLAY_ORDER"/>
                    /// </summary>
                    [global::System.Obsolete()]
                    public static Java.Lang.String PLAY_ORDER { get { if (!_PLAY_ORDERReady) { _PLAY_ORDERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PLAY_ORDER"); _PLAY_ORDERReady = true; } return _PLAY_ORDERContent; } }
                    private static Java.Lang.String _PLAY_ORDERContent = default;
                    private static bool _PLAY_ORDERReady = false; // this is used because in case of generics 
                    /// <summary>
                    /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Playlists.Members.html#PLAYLIST_ID"/>
                    /// </summary>
                    [global::System.Obsolete()]
                    public static Java.Lang.String PLAYLIST_ID { get { if (!_PLAYLIST_IDReady) { _PLAYLIST_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PLAYLIST_ID"); _PLAYLIST_IDReady = true; } return _PLAYLIST_IDContent; } }
                    private static Java.Lang.String _PLAYLIST_IDContent = default;
                    private static bool _PLAYLIST_IDReady = false; // this is used because in case of generics 

                    #endregion

                    #region Static methods
                    /// <summary>
                    /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Playlists.Members.html#getContentUri(java.lang.String,long)"/>
                    /// </summary>
                    /// <param name="arg0"><see cref="Java.Lang.String"/></param>
                    /// <param name="arg1"><see cref="long"/></param>
                    /// <returns><see cref="Android.Net.Uri"/></returns>
                    [global::System.Obsolete()]
                    public static Android.Net.Uri GetContentUri(Java.Lang.String arg0, long arg1)
                    {
                        return SExecute<Android.Net.Uri>(LocalBridgeClazz, "getContentUri", arg0, arg1);
                    }
                    /// <summary>
                    /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Playlists.Members.html#moveItem(android.content.ContentResolver,long,int,int)"/>
                    /// </summary>
                    /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
                    /// <param name="arg1"><see cref="long"/></param>
                    /// <param name="arg2"><see cref="int"/></param>
                    /// <param name="arg3"><see cref="int"/></param>
                    /// <returns><see cref="bool"/></returns>
                    [global::System.Obsolete()]
                    public static bool MoveItem(Android.Content.ContentResolver arg0, long arg1, int arg2, int arg3)
                    {
                        return SExecute<bool>(LocalBridgeClazz, "moveItem", arg0, arg1, arg2, arg3);
                    }

                    #endregion

                    #region Instance methods

                    #endregion

                    #region Nested classes

                    #endregion

                    // TODO: complete the class
                }
                #endregion

            
                #endregion

                // TODO: complete the class
            }
            #endregion

            #region Media
            public partial class Media
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Media.html#EXTERNAL_CONTENT_URI"/>
                /// </summary>
                public static Android.Net.Uri EXTERNAL_CONTENT_URI { get { if (!_EXTERNAL_CONTENT_URIReady) { _EXTERNAL_CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "EXTERNAL_CONTENT_URI"); _EXTERNAL_CONTENT_URIReady = true; } return _EXTERNAL_CONTENT_URIContent; } }
                private static Android.Net.Uri _EXTERNAL_CONTENT_URIContent = default;
                private static bool _EXTERNAL_CONTENT_URIReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Media.html#INTERNAL_CONTENT_URI"/>
                /// </summary>
                public static Android.Net.Uri INTERNAL_CONTENT_URI { get { if (!_INTERNAL_CONTENT_URIReady) { _INTERNAL_CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "INTERNAL_CONTENT_URI"); _INTERNAL_CONTENT_URIReady = true; } return _INTERNAL_CONTENT_URIContent; } }
                private static Android.Net.Uri _INTERNAL_CONTENT_URIContent = default;
                private static bool _INTERNAL_CONTENT_URIReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Media.html#CONTENT_TYPE"/>
                /// </summary>
                public static Java.Lang.String CONTENT_TYPE { get { if (!_CONTENT_TYPEReady) { _CONTENT_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_TYPE"); _CONTENT_TYPEReady = true; } return _CONTENT_TYPEContent; } }
                private static Java.Lang.String _CONTENT_TYPEContent = default;
                private static bool _CONTENT_TYPEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Media.html#DEFAULT_SORT_ORDER"/>
                /// </summary>
                public static Java.Lang.String DEFAULT_SORT_ORDER { get { if (!_DEFAULT_SORT_ORDERReady) { _DEFAULT_SORT_ORDERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFAULT_SORT_ORDER"); _DEFAULT_SORT_ORDERReady = true; } return _DEFAULT_SORT_ORDERContent; } }
                private static Java.Lang.String _DEFAULT_SORT_ORDERContent = default;
                private static bool _DEFAULT_SORT_ORDERReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Media.html#ENTRY_CONTENT_TYPE"/>
                /// </summary>
                public static Java.Lang.String ENTRY_CONTENT_TYPE { get { if (!_ENTRY_CONTENT_TYPEReady) { _ENTRY_CONTENT_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ENTRY_CONTENT_TYPE"); _ENTRY_CONTENT_TYPEReady = true; } return _ENTRY_CONTENT_TYPEContent; } }
                private static Java.Lang.String _ENTRY_CONTENT_TYPEContent = default;
                private static bool _ENTRY_CONTENT_TYPEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Media.html#EXTRA_MAX_BYTES"/>
                /// </summary>
                public static Java.Lang.String EXTRA_MAX_BYTES { get { if (!_EXTRA_MAX_BYTESReady) { _EXTRA_MAX_BYTESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_MAX_BYTES"); _EXTRA_MAX_BYTESReady = true; } return _EXTRA_MAX_BYTESContent; } }
                private static Java.Lang.String _EXTRA_MAX_BYTESContent = default;
                private static bool _EXTRA_MAX_BYTESReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Media.html#RECORD_SOUND_ACTION"/>
                /// </summary>
                public static Java.Lang.String RECORD_SOUND_ACTION { get { if (!_RECORD_SOUND_ACTIONReady) { _RECORD_SOUND_ACTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RECORD_SOUND_ACTION"); _RECORD_SOUND_ACTIONReady = true; } return _RECORD_SOUND_ACTIONContent; } }
                private static Java.Lang.String _RECORD_SOUND_ACTIONContent = default;
                private static bool _RECORD_SOUND_ACTIONReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Media.html#getContentUri(java.lang.String,long)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Java.Lang.String"/></param>
                /// <param name="arg1"><see cref="long"/></param>
                /// <returns><see cref="Android.Net.Uri"/></returns>
                public static Android.Net.Uri GetContentUri(Java.Lang.String arg0, long arg1)
                {
                    return SExecute<Android.Net.Uri>(LocalBridgeClazz, "getContentUri", arg0, arg1);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Media.html#getContentUri(java.lang.String)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Java.Lang.String"/></param>
                /// <returns><see cref="Android.Net.Uri"/></returns>
                public static Android.Net.Uri GetContentUri(Java.Lang.String arg0)
                {
                    return SExecuteWithSignature<Android.Net.Uri>(LocalBridgeClazz, "getContentUri", "(Ljava/lang/String;)Landroid/net/Uri;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Media.html#getContentUriForPath(java.lang.String)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Java.Lang.String"/></param>
                /// <returns><see cref="Android.Net.Uri"/></returns>
                [global::System.Obsolete()]
                public static Android.Net.Uri GetContentUriForPath(Java.Lang.String arg0)
                {
                    return SExecuteWithSignature<Android.Net.Uri>(LocalBridgeClazz, "getContentUriForPath", "(Ljava/lang/String;)Landroid/net/Uri;", arg0);
                }

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

            #region GenresColumns
            public partial class GenresColumns
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.GenresColumns.html#NAME"/>
                /// </summary>
                public static Java.Lang.String NAME { get { if (!_NAMEReady) { _NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAME"); _NAMEReady = true; } return _NAMEContent; } }
                private static Java.Lang.String _NAMEContent = default;
                private static bool _NAMEReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

            #region Genres
            public partial class Genres : Android.Provider.IBaseColumns
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators
                /// <summary>
                /// Converter from <see cref="Android.Provider.MediaStore.Audio.Genres"/> to <see cref="Android.Provider.BaseColumns"/>
                /// </summary>
                public static implicit operator Android.Provider.BaseColumns(Android.Provider.MediaStore.Audio.Genres t) => t.Cast<Android.Provider.BaseColumns>();

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Genres.html#EXTERNAL_CONTENT_URI"/>
                /// </summary>
                public static Android.Net.Uri EXTERNAL_CONTENT_URI { get { if (!_EXTERNAL_CONTENT_URIReady) { _EXTERNAL_CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "EXTERNAL_CONTENT_URI"); _EXTERNAL_CONTENT_URIReady = true; } return _EXTERNAL_CONTENT_URIContent; } }
                private static Android.Net.Uri _EXTERNAL_CONTENT_URIContent = default;
                private static bool _EXTERNAL_CONTENT_URIReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Genres.html#INTERNAL_CONTENT_URI"/>
                /// </summary>
                public static Android.Net.Uri INTERNAL_CONTENT_URI { get { if (!_INTERNAL_CONTENT_URIReady) { _INTERNAL_CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "INTERNAL_CONTENT_URI"); _INTERNAL_CONTENT_URIReady = true; } return _INTERNAL_CONTENT_URIContent; } }
                private static Android.Net.Uri _INTERNAL_CONTENT_URIContent = default;
                private static bool _INTERNAL_CONTENT_URIReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Genres.html#CONTENT_TYPE"/>
                /// </summary>
                public static Java.Lang.String CONTENT_TYPE { get { if (!_CONTENT_TYPEReady) { _CONTENT_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_TYPE"); _CONTENT_TYPEReady = true; } return _CONTENT_TYPEContent; } }
                private static Java.Lang.String _CONTENT_TYPEContent = default;
                private static bool _CONTENT_TYPEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Genres.html#DEFAULT_SORT_ORDER"/>
                /// </summary>
                public static Java.Lang.String DEFAULT_SORT_ORDER { get { if (!_DEFAULT_SORT_ORDERReady) { _DEFAULT_SORT_ORDERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFAULT_SORT_ORDER"); _DEFAULT_SORT_ORDERReady = true; } return _DEFAULT_SORT_ORDERContent; } }
                private static Java.Lang.String _DEFAULT_SORT_ORDERContent = default;
                private static bool _DEFAULT_SORT_ORDERReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Genres.html#ENTRY_CONTENT_TYPE"/>
                /// </summary>
                public static Java.Lang.String ENTRY_CONTENT_TYPE { get { if (!_ENTRY_CONTENT_TYPEReady) { _ENTRY_CONTENT_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ENTRY_CONTENT_TYPE"); _ENTRY_CONTENT_TYPEReady = true; } return _ENTRY_CONTENT_TYPEContent; } }
                private static Java.Lang.String _ENTRY_CONTENT_TYPEContent = default;
                private static bool _ENTRY_CONTENT_TYPEReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Genres.html#getContentUri(java.lang.String)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Java.Lang.String"/></param>
                /// <returns><see cref="Android.Net.Uri"/></returns>
                public static Android.Net.Uri GetContentUri(Java.Lang.String arg0)
                {
                    return SExecuteWithSignature<Android.Net.Uri>(LocalBridgeClazz, "getContentUri", "(Ljava/lang/String;)Landroid/net/Uri;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Genres.html#getContentUriForAudioId(java.lang.String,int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Java.Lang.String"/></param>
                /// <param name="arg1"><see cref="int"/></param>
                /// <returns><see cref="Android.Net.Uri"/></returns>
                public static Android.Net.Uri GetContentUriForAudioId(Java.Lang.String arg0, int arg1)
                {
                    return SExecute<Android.Net.Uri>(LocalBridgeClazz, "getContentUriForAudioId", arg0, arg1);
                }

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes
                #region Members
                public partial class Members
                {
                    #region Constructors

                    #endregion

                    #region Class/Interface conversion operators

                    #endregion

                    #region Fields
                    /// <summary>
                    /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Genres.Members.html#AUDIO_ID"/>
                    /// </summary>
                    public static Java.Lang.String AUDIO_ID { get { if (!_AUDIO_IDReady) { _AUDIO_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "AUDIO_ID"); _AUDIO_IDReady = true; } return _AUDIO_IDContent; } }
                    private static Java.Lang.String _AUDIO_IDContent = default;
                    private static bool _AUDIO_IDReady = false; // this is used because in case of generics 
                    /// <summary>
                    /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Genres.Members.html#CONTENT_DIRECTORY"/>
                    /// </summary>
                    public static Java.Lang.String CONTENT_DIRECTORY { get { if (!_CONTENT_DIRECTORYReady) { _CONTENT_DIRECTORYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_DIRECTORY"); _CONTENT_DIRECTORYReady = true; } return _CONTENT_DIRECTORYContent; } }
                    private static Java.Lang.String _CONTENT_DIRECTORYContent = default;
                    private static bool _CONTENT_DIRECTORYReady = false; // this is used because in case of generics 
                    /// <summary>
                    /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Genres.Members.html#DEFAULT_SORT_ORDER"/>
                    /// </summary>
                    public static Java.Lang.String DEFAULT_SORT_ORDER { get { if (!_DEFAULT_SORT_ORDERReady) { _DEFAULT_SORT_ORDERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFAULT_SORT_ORDER"); _DEFAULT_SORT_ORDERReady = true; } return _DEFAULT_SORT_ORDERContent; } }
                    private static Java.Lang.String _DEFAULT_SORT_ORDERContent = default;
                    private static bool _DEFAULT_SORT_ORDERReady = false; // this is used because in case of generics 
                    /// <summary>
                    /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Genres.Members.html#GENRE_ID"/>
                    /// </summary>
                    public static Java.Lang.String GENRE_ID { get { if (!_GENRE_IDReady) { _GENRE_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GENRE_ID"); _GENRE_IDReady = true; } return _GENRE_IDContent; } }
                    private static Java.Lang.String _GENRE_IDContent = default;
                    private static bool _GENRE_IDReady = false; // this is used because in case of generics 

                    #endregion

                    #region Static methods
                    /// <summary>
                    /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Genres.Members.html#getContentUri(java.lang.String,long)"/>
                    /// </summary>
                    /// <param name="arg0"><see cref="Java.Lang.String"/></param>
                    /// <param name="arg1"><see cref="long"/></param>
                    /// <returns><see cref="Android.Net.Uri"/></returns>
                    public static Android.Net.Uri GetContentUri(Java.Lang.String arg0, long arg1)
                    {
                        return SExecute<Android.Net.Uri>(LocalBridgeClazz, "getContentUri", arg0, arg1);
                    }

                    #endregion

                    #region Instance methods

                    #endregion

                    #region Nested classes

                    #endregion

                    // TODO: complete the class
                }
                #endregion

            
                #endregion

                // TODO: complete the class
            }
            #endregion

            #region AudioColumns
            public partial class AudioColumns
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.AudioColumns.html#ALBUM_ID"/>
                /// </summary>
                public static Java.Lang.String ALBUM_ID { get { if (!_ALBUM_IDReady) { _ALBUM_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ALBUM_ID"); _ALBUM_IDReady = true; } return _ALBUM_IDContent; } }
                private static Java.Lang.String _ALBUM_IDContent = default;
                private static bool _ALBUM_IDReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.AudioColumns.html#ALBUM_KEY"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Java.Lang.String ALBUM_KEY { get { if (!_ALBUM_KEYReady) { _ALBUM_KEYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ALBUM_KEY"); _ALBUM_KEYReady = true; } return _ALBUM_KEYContent; } }
                private static Java.Lang.String _ALBUM_KEYContent = default;
                private static bool _ALBUM_KEYReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.AudioColumns.html#ARTIST_ID"/>
                /// </summary>
                public static Java.Lang.String ARTIST_ID { get { if (!_ARTIST_IDReady) { _ARTIST_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ARTIST_ID"); _ARTIST_IDReady = true; } return _ARTIST_IDContent; } }
                private static Java.Lang.String _ARTIST_IDContent = default;
                private static bool _ARTIST_IDReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.AudioColumns.html#ARTIST_KEY"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Java.Lang.String ARTIST_KEY { get { if (!_ARTIST_KEYReady) { _ARTIST_KEYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ARTIST_KEY"); _ARTIST_KEYReady = true; } return _ARTIST_KEYContent; } }
                private static Java.Lang.String _ARTIST_KEYContent = default;
                private static bool _ARTIST_KEYReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.AudioColumns.html#BOOKMARK"/>
                /// </summary>
                public static Java.Lang.String BOOKMARK { get { if (!_BOOKMARKReady) { _BOOKMARKContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BOOKMARK"); _BOOKMARKReady = true; } return _BOOKMARKContent; } }
                private static Java.Lang.String _BOOKMARKContent = default;
                private static bool _BOOKMARKReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.AudioColumns.html#GENRE"/>
                /// </summary>
                public static Java.Lang.String GENRE { get { if (!_GENREReady) { _GENREContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GENRE"); _GENREReady = true; } return _GENREContent; } }
                private static Java.Lang.String _GENREContent = default;
                private static bool _GENREReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.AudioColumns.html#GENRE_ID"/>
                /// </summary>
                public static Java.Lang.String GENRE_ID { get { if (!_GENRE_IDReady) { _GENRE_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GENRE_ID"); _GENRE_IDReady = true; } return _GENRE_IDContent; } }
                private static Java.Lang.String _GENRE_IDContent = default;
                private static bool _GENRE_IDReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.AudioColumns.html#GENRE_KEY"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Java.Lang.String GENRE_KEY { get { if (!_GENRE_KEYReady) { _GENRE_KEYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GENRE_KEY"); _GENRE_KEYReady = true; } return _GENRE_KEYContent; } }
                private static Java.Lang.String _GENRE_KEYContent = default;
                private static bool _GENRE_KEYReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.AudioColumns.html#IS_ALARM"/>
                /// </summary>
                public static Java.Lang.String IS_ALARM { get { if (!_IS_ALARMReady) { _IS_ALARMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "IS_ALARM"); _IS_ALARMReady = true; } return _IS_ALARMContent; } }
                private static Java.Lang.String _IS_ALARMContent = default;
                private static bool _IS_ALARMReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.AudioColumns.html#IS_AUDIOBOOK"/>
                /// </summary>
                public static Java.Lang.String IS_AUDIOBOOK { get { if (!_IS_AUDIOBOOKReady) { _IS_AUDIOBOOKContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "IS_AUDIOBOOK"); _IS_AUDIOBOOKReady = true; } return _IS_AUDIOBOOKContent; } }
                private static Java.Lang.String _IS_AUDIOBOOKContent = default;
                private static bool _IS_AUDIOBOOKReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.AudioColumns.html#IS_MUSIC"/>
                /// </summary>
                public static Java.Lang.String IS_MUSIC { get { if (!_IS_MUSICReady) { _IS_MUSICContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "IS_MUSIC"); _IS_MUSICReady = true; } return _IS_MUSICContent; } }
                private static Java.Lang.String _IS_MUSICContent = default;
                private static bool _IS_MUSICReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.AudioColumns.html#IS_NOTIFICATION"/>
                /// </summary>
                public static Java.Lang.String IS_NOTIFICATION { get { if (!_IS_NOTIFICATIONReady) { _IS_NOTIFICATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "IS_NOTIFICATION"); _IS_NOTIFICATIONReady = true; } return _IS_NOTIFICATIONContent; } }
                private static Java.Lang.String _IS_NOTIFICATIONContent = default;
                private static bool _IS_NOTIFICATIONReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.AudioColumns.html#IS_PODCAST"/>
                /// </summary>
                public static Java.Lang.String IS_PODCAST { get { if (!_IS_PODCASTReady) { _IS_PODCASTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "IS_PODCAST"); _IS_PODCASTReady = true; } return _IS_PODCASTContent; } }
                private static Java.Lang.String _IS_PODCASTContent = default;
                private static bool _IS_PODCASTReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.AudioColumns.html#IS_RECORDING"/>
                /// </summary>
                public static Java.Lang.String IS_RECORDING { get { if (!_IS_RECORDINGReady) { _IS_RECORDINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "IS_RECORDING"); _IS_RECORDINGReady = true; } return _IS_RECORDINGContent; } }
                private static Java.Lang.String _IS_RECORDINGContent = default;
                private static bool _IS_RECORDINGReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.AudioColumns.html#IS_RINGTONE"/>
                /// </summary>
                public static Java.Lang.String IS_RINGTONE { get { if (!_IS_RINGTONEReady) { _IS_RINGTONEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "IS_RINGTONE"); _IS_RINGTONEReady = true; } return _IS_RINGTONEContent; } }
                private static Java.Lang.String _IS_RINGTONEContent = default;
                private static bool _IS_RINGTONEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.AudioColumns.html#TITLE_KEY"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Java.Lang.String TITLE_KEY { get { if (!_TITLE_KEYReady) { _TITLE_KEYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TITLE_KEY"); _TITLE_KEYReady = true; } return _TITLE_KEYContent; } }
                private static Java.Lang.String _TITLE_KEYContent = default;
                private static bool _TITLE_KEYReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.AudioColumns.html#TITLE_RESOURCE_URI"/>
                /// </summary>
                public static Java.Lang.String TITLE_RESOURCE_URI { get { if (!_TITLE_RESOURCE_URIReady) { _TITLE_RESOURCE_URIContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TITLE_RESOURCE_URI"); _TITLE_RESOURCE_URIReady = true; } return _TITLE_RESOURCE_URIContent; } }
                private static Java.Lang.String _TITLE_RESOURCE_URIContent = default;
                private static bool _TITLE_RESOURCE_URIReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.AudioColumns.html#TRACK"/>
                /// </summary>
                public static Java.Lang.String TRACK { get { if (!_TRACKReady) { _TRACKContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TRACK"); _TRACKReady = true; } return _TRACKContent; } }
                private static Java.Lang.String _TRACKContent = default;
                private static bool _TRACKReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.AudioColumns.html#YEAR"/>
                /// </summary>
                public static Java.Lang.String YEAR { get { if (!_YEARReady) { _YEARContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "YEAR"); _YEARReady = true; } return _YEARContent; } }
                private static Java.Lang.String _YEARContent = default;
                private static bool _YEARReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

            #region Artists
            public partial class Artists : Android.Provider.IBaseColumns
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators
                /// <summary>
                /// Converter from <see cref="Android.Provider.MediaStore.Audio.Artists"/> to <see cref="Android.Provider.BaseColumns"/>
                /// </summary>
                public static implicit operator Android.Provider.BaseColumns(Android.Provider.MediaStore.Audio.Artists t) => t.Cast<Android.Provider.BaseColumns>();

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Artists.html#EXTERNAL_CONTENT_URI"/>
                /// </summary>
                public static Android.Net.Uri EXTERNAL_CONTENT_URI { get { if (!_EXTERNAL_CONTENT_URIReady) { _EXTERNAL_CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "EXTERNAL_CONTENT_URI"); _EXTERNAL_CONTENT_URIReady = true; } return _EXTERNAL_CONTENT_URIContent; } }
                private static Android.Net.Uri _EXTERNAL_CONTENT_URIContent = default;
                private static bool _EXTERNAL_CONTENT_URIReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Artists.html#INTERNAL_CONTENT_URI"/>
                /// </summary>
                public static Android.Net.Uri INTERNAL_CONTENT_URI { get { if (!_INTERNAL_CONTENT_URIReady) { _INTERNAL_CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "INTERNAL_CONTENT_URI"); _INTERNAL_CONTENT_URIReady = true; } return _INTERNAL_CONTENT_URIContent; } }
                private static Android.Net.Uri _INTERNAL_CONTENT_URIContent = default;
                private static bool _INTERNAL_CONTENT_URIReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Artists.html#CONTENT_TYPE"/>
                /// </summary>
                public static Java.Lang.String CONTENT_TYPE { get { if (!_CONTENT_TYPEReady) { _CONTENT_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_TYPE"); _CONTENT_TYPEReady = true; } return _CONTENT_TYPEContent; } }
                private static Java.Lang.String _CONTENT_TYPEContent = default;
                private static bool _CONTENT_TYPEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Artists.html#DEFAULT_SORT_ORDER"/>
                /// </summary>
                public static Java.Lang.String DEFAULT_SORT_ORDER { get { if (!_DEFAULT_SORT_ORDERReady) { _DEFAULT_SORT_ORDERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFAULT_SORT_ORDER"); _DEFAULT_SORT_ORDERReady = true; } return _DEFAULT_SORT_ORDERContent; } }
                private static Java.Lang.String _DEFAULT_SORT_ORDERContent = default;
                private static bool _DEFAULT_SORT_ORDERReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Artists.html#ENTRY_CONTENT_TYPE"/>
                /// </summary>
                public static Java.Lang.String ENTRY_CONTENT_TYPE { get { if (!_ENTRY_CONTENT_TYPEReady) { _ENTRY_CONTENT_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ENTRY_CONTENT_TYPE"); _ENTRY_CONTENT_TYPEReady = true; } return _ENTRY_CONTENT_TYPEContent; } }
                private static Java.Lang.String _ENTRY_CONTENT_TYPEContent = default;
                private static bool _ENTRY_CONTENT_TYPEReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Artists.html#getContentUri(java.lang.String)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Java.Lang.String"/></param>
                /// <returns><see cref="Android.Net.Uri"/></returns>
                public static Android.Net.Uri GetContentUri(Java.Lang.String arg0)
                {
                    return SExecuteWithSignature<Android.Net.Uri>(LocalBridgeClazz, "getContentUri", "(Ljava/lang/String;)Landroid/net/Uri;", arg0);
                }

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes
                #region Albums
                public partial class Albums : Android.Provider.IBaseColumns
                {
                    #region Constructors

                    #endregion

                    #region Class/Interface conversion operators
                    /// <summary>
                    /// Converter from <see cref="Android.Provider.MediaStore.Audio.Artists.Albums"/> to <see cref="Android.Provider.BaseColumns"/>
                    /// </summary>
                    public static implicit operator Android.Provider.BaseColumns(Android.Provider.MediaStore.Audio.Artists.Albums t) => t.Cast<Android.Provider.BaseColumns>();

                    #endregion

                    #region Fields

                    #endregion

                    #region Static methods
                    /// <summary>
                    /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Artists.Albums.html#getContentUri(java.lang.String,long)"/>
                    /// </summary>
                    /// <param name="arg0"><see cref="Java.Lang.String"/></param>
                    /// <param name="arg1"><see cref="long"/></param>
                    /// <returns><see cref="Android.Net.Uri"/></returns>
                    public static Android.Net.Uri GetContentUri(Java.Lang.String arg0, long arg1)
                    {
                        return SExecute<Android.Net.Uri>(LocalBridgeClazz, "getContentUri", arg0, arg1);
                    }

                    #endregion

                    #region Instance methods

                    #endregion

                    #region Nested classes

                    #endregion

                    // TODO: complete the class
                }
                #endregion

            
                #endregion

                // TODO: complete the class
            }
            #endregion

            #region ArtistColumns
            public partial class ArtistColumns
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.ArtistColumns.html#ARTIST"/>
                /// </summary>
                public static Java.Lang.String ARTIST { get { if (!_ARTISTReady) { _ARTISTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ARTIST"); _ARTISTReady = true; } return _ARTISTContent; } }
                private static Java.Lang.String _ARTISTContent = default;
                private static bool _ARTISTReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.ArtistColumns.html#ARTIST_KEY"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Java.Lang.String ARTIST_KEY { get { if (!_ARTIST_KEYReady) { _ARTIST_KEYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ARTIST_KEY"); _ARTIST_KEYReady = true; } return _ARTIST_KEYContent; } }
                private static Java.Lang.String _ARTIST_KEYContent = default;
                private static bool _ARTIST_KEYReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.ArtistColumns.html#NUMBER_OF_ALBUMS"/>
                /// </summary>
                public static Java.Lang.String NUMBER_OF_ALBUMS { get { if (!_NUMBER_OF_ALBUMSReady) { _NUMBER_OF_ALBUMSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NUMBER_OF_ALBUMS"); _NUMBER_OF_ALBUMSReady = true; } return _NUMBER_OF_ALBUMSContent; } }
                private static Java.Lang.String _NUMBER_OF_ALBUMSContent = default;
                private static bool _NUMBER_OF_ALBUMSReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.ArtistColumns.html#NUMBER_OF_TRACKS"/>
                /// </summary>
                public static Java.Lang.String NUMBER_OF_TRACKS { get { if (!_NUMBER_OF_TRACKSReady) { _NUMBER_OF_TRACKSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NUMBER_OF_TRACKS"); _NUMBER_OF_TRACKSReady = true; } return _NUMBER_OF_TRACKSContent; } }
                private static Java.Lang.String _NUMBER_OF_TRACKSContent = default;
                private static bool _NUMBER_OF_TRACKSReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

            #region Albums
            public partial class Albums : Android.Provider.IBaseColumns
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators
                /// <summary>
                /// Converter from <see cref="Android.Provider.MediaStore.Audio.Albums"/> to <see cref="Android.Provider.BaseColumns"/>
                /// </summary>
                public static implicit operator Android.Provider.BaseColumns(Android.Provider.MediaStore.Audio.Albums t) => t.Cast<Android.Provider.BaseColumns>();

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Albums.html#EXTERNAL_CONTENT_URI"/>
                /// </summary>
                public static Android.Net.Uri EXTERNAL_CONTENT_URI { get { if (!_EXTERNAL_CONTENT_URIReady) { _EXTERNAL_CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "EXTERNAL_CONTENT_URI"); _EXTERNAL_CONTENT_URIReady = true; } return _EXTERNAL_CONTENT_URIContent; } }
                private static Android.Net.Uri _EXTERNAL_CONTENT_URIContent = default;
                private static bool _EXTERNAL_CONTENT_URIReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Albums.html#INTERNAL_CONTENT_URI"/>
                /// </summary>
                public static Android.Net.Uri INTERNAL_CONTENT_URI { get { if (!_INTERNAL_CONTENT_URIReady) { _INTERNAL_CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "INTERNAL_CONTENT_URI"); _INTERNAL_CONTENT_URIReady = true; } return _INTERNAL_CONTENT_URIContent; } }
                private static Android.Net.Uri _INTERNAL_CONTENT_URIContent = default;
                private static bool _INTERNAL_CONTENT_URIReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Albums.html#CONTENT_TYPE"/>
                /// </summary>
                public static Java.Lang.String CONTENT_TYPE { get { if (!_CONTENT_TYPEReady) { _CONTENT_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_TYPE"); _CONTENT_TYPEReady = true; } return _CONTENT_TYPEContent; } }
                private static Java.Lang.String _CONTENT_TYPEContent = default;
                private static bool _CONTENT_TYPEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Albums.html#DEFAULT_SORT_ORDER"/>
                /// </summary>
                public static Java.Lang.String DEFAULT_SORT_ORDER { get { if (!_DEFAULT_SORT_ORDERReady) { _DEFAULT_SORT_ORDERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFAULT_SORT_ORDER"); _DEFAULT_SORT_ORDERReady = true; } return _DEFAULT_SORT_ORDERContent; } }
                private static Java.Lang.String _DEFAULT_SORT_ORDERContent = default;
                private static bool _DEFAULT_SORT_ORDERReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Albums.html#ENTRY_CONTENT_TYPE"/>
                /// </summary>
                public static Java.Lang.String ENTRY_CONTENT_TYPE { get { if (!_ENTRY_CONTENT_TYPEReady) { _ENTRY_CONTENT_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ENTRY_CONTENT_TYPE"); _ENTRY_CONTENT_TYPEReady = true; } return _ENTRY_CONTENT_TYPEContent; } }
                private static Java.Lang.String _ENTRY_CONTENT_TYPEContent = default;
                private static bool _ENTRY_CONTENT_TYPEReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.Albums.html#getContentUri(java.lang.String)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Java.Lang.String"/></param>
                /// <returns><see cref="Android.Net.Uri"/></returns>
                public static Android.Net.Uri GetContentUri(Java.Lang.String arg0)
                {
                    return SExecuteWithSignature<Android.Net.Uri>(LocalBridgeClazz, "getContentUri", "(Ljava/lang/String;)Landroid/net/Uri;", arg0);
                }

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

            #region AlbumColumns
            public partial class AlbumColumns
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.AlbumColumns.html#ALBUM"/>
                /// </summary>
                public static Java.Lang.String ALBUM { get { if (!_ALBUMReady) { _ALBUMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ALBUM"); _ALBUMReady = true; } return _ALBUMContent; } }
                private static Java.Lang.String _ALBUMContent = default;
                private static bool _ALBUMReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.AlbumColumns.html#ALBUM_ART"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Java.Lang.String ALBUM_ART { get { if (!_ALBUM_ARTReady) { _ALBUM_ARTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ALBUM_ART"); _ALBUM_ARTReady = true; } return _ALBUM_ARTContent; } }
                private static Java.Lang.String _ALBUM_ARTContent = default;
                private static bool _ALBUM_ARTReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.AlbumColumns.html#ALBUM_ID"/>
                /// </summary>
                public static Java.Lang.String ALBUM_ID { get { if (!_ALBUM_IDReady) { _ALBUM_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ALBUM_ID"); _ALBUM_IDReady = true; } return _ALBUM_IDContent; } }
                private static Java.Lang.String _ALBUM_IDContent = default;
                private static bool _ALBUM_IDReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.AlbumColumns.html#ALBUM_KEY"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Java.Lang.String ALBUM_KEY { get { if (!_ALBUM_KEYReady) { _ALBUM_KEYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ALBUM_KEY"); _ALBUM_KEYReady = true; } return _ALBUM_KEYContent; } }
                private static Java.Lang.String _ALBUM_KEYContent = default;
                private static bool _ALBUM_KEYReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.AlbumColumns.html#ARTIST"/>
                /// </summary>
                public static Java.Lang.String ARTIST { get { if (!_ARTISTReady) { _ARTISTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ARTIST"); _ARTISTReady = true; } return _ARTISTContent; } }
                private static Java.Lang.String _ARTISTContent = default;
                private static bool _ARTISTReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.AlbumColumns.html#ARTIST_ID"/>
                /// </summary>
                public static Java.Lang.String ARTIST_ID { get { if (!_ARTIST_IDReady) { _ARTIST_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ARTIST_ID"); _ARTIST_IDReady = true; } return _ARTIST_IDContent; } }
                private static Java.Lang.String _ARTIST_IDContent = default;
                private static bool _ARTIST_IDReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.AlbumColumns.html#ARTIST_KEY"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Java.Lang.String ARTIST_KEY { get { if (!_ARTIST_KEYReady) { _ARTIST_KEYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ARTIST_KEY"); _ARTIST_KEYReady = true; } return _ARTIST_KEYContent; } }
                private static Java.Lang.String _ARTIST_KEYContent = default;
                private static bool _ARTIST_KEYReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.AlbumColumns.html#FIRST_YEAR"/>
                /// </summary>
                public static Java.Lang.String FIRST_YEAR { get { if (!_FIRST_YEARReady) { _FIRST_YEARContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FIRST_YEAR"); _FIRST_YEARReady = true; } return _FIRST_YEARContent; } }
                private static Java.Lang.String _FIRST_YEARContent = default;
                private static bool _FIRST_YEARReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.AlbumColumns.html#LAST_YEAR"/>
                /// </summary>
                public static Java.Lang.String LAST_YEAR { get { if (!_LAST_YEARReady) { _LAST_YEARContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LAST_YEAR"); _LAST_YEARReady = true; } return _LAST_YEARContent; } }
                private static Java.Lang.String _LAST_YEARContent = default;
                private static bool _LAST_YEARReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.AlbumColumns.html#NUMBER_OF_SONGS"/>
                /// </summary>
                public static Java.Lang.String NUMBER_OF_SONGS { get { if (!_NUMBER_OF_SONGSReady) { _NUMBER_OF_SONGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NUMBER_OF_SONGS"); _NUMBER_OF_SONGSReady = true; } return _NUMBER_OF_SONGSContent; } }
                private static Java.Lang.String _NUMBER_OF_SONGSContent = default;
                private static bool _NUMBER_OF_SONGSReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Audio.AlbumColumns.html#NUMBER_OF_SONGS_FOR_ARTIST"/>
                /// </summary>
                public static Java.Lang.String NUMBER_OF_SONGS_FOR_ARTIST { get { if (!_NUMBER_OF_SONGS_FOR_ARTISTReady) { _NUMBER_OF_SONGS_FOR_ARTISTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NUMBER_OF_SONGS_FOR_ARTIST"); _NUMBER_OF_SONGS_FOR_ARTISTReady = true; } return _NUMBER_OF_SONGS_FOR_ARTISTContent; } }
                private static Java.Lang.String _NUMBER_OF_SONGS_FOR_ARTISTContent = default;
                private static bool _NUMBER_OF_SONGS_FOR_ARTISTReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

        
            #endregion

            // TODO: complete the class
        }
        #endregion

        #region DownloadColumns
        public partial class DownloadColumns
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.DownloadColumns.html#DOWNLOAD_URI"/>
            /// </summary>
            public static Java.Lang.String DOWNLOAD_URI { get { if (!_DOWNLOAD_URIReady) { _DOWNLOAD_URIContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DOWNLOAD_URI"); _DOWNLOAD_URIReady = true; } return _DOWNLOAD_URIContent; } }
            private static Java.Lang.String _DOWNLOAD_URIContent = default;
            private static bool _DOWNLOAD_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.DownloadColumns.html#REFERER_URI"/>
            /// </summary>
            public static Java.Lang.String REFERER_URI { get { if (!_REFERER_URIReady) { _REFERER_URIContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "REFERER_URI"); _REFERER_URIReady = true; } return _REFERER_URIContent; } }
            private static Java.Lang.String _REFERER_URIContent = default;
            private static bool _REFERER_URIReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Downloads
        public partial class Downloads
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Downloads.html#EXTERNAL_CONTENT_URI"/>
            /// </summary>
            public static Android.Net.Uri EXTERNAL_CONTENT_URI { get { if (!_EXTERNAL_CONTENT_URIReady) { _EXTERNAL_CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "EXTERNAL_CONTENT_URI"); _EXTERNAL_CONTENT_URIReady = true; } return _EXTERNAL_CONTENT_URIContent; } }
            private static Android.Net.Uri _EXTERNAL_CONTENT_URIContent = default;
            private static bool _EXTERNAL_CONTENT_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Downloads.html#INTERNAL_CONTENT_URI"/>
            /// </summary>
            public static Android.Net.Uri INTERNAL_CONTENT_URI { get { if (!_INTERNAL_CONTENT_URIReady) { _INTERNAL_CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "INTERNAL_CONTENT_URI"); _INTERNAL_CONTENT_URIReady = true; } return _INTERNAL_CONTENT_URIContent; } }
            private static Android.Net.Uri _INTERNAL_CONTENT_URIContent = default;
            private static bool _INTERNAL_CONTENT_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Downloads.html#CONTENT_TYPE"/>
            /// </summary>
            public static Java.Lang.String CONTENT_TYPE { get { if (!_CONTENT_TYPEReady) { _CONTENT_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_TYPE"); _CONTENT_TYPEReady = true; } return _CONTENT_TYPEContent; } }
            private static Java.Lang.String _CONTENT_TYPEContent = default;
            private static bool _CONTENT_TYPEReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Downloads.html#getContentUri(java.lang.String,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <returns><see cref="Android.Net.Uri"/></returns>
            public static Android.Net.Uri GetContentUri(Java.Lang.String arg0, long arg1)
            {
                return SExecute<Android.Net.Uri>(LocalBridgeClazz, "getContentUri", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Downloads.html#getContentUri(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Net.Uri"/></returns>
            public static Android.Net.Uri GetContentUri(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Net.Uri>(LocalBridgeClazz, "getContentUri", "(Ljava/lang/String;)Landroid/net/Uri;", arg0);
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Files
        public partial class Files
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Files.html#getContentUri(java.lang.String,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <returns><see cref="Android.Net.Uri"/></returns>
            public static Android.Net.Uri GetContentUri(Java.Lang.String arg0, long arg1)
            {
                return SExecute<Android.Net.Uri>(LocalBridgeClazz, "getContentUri", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Files.html#getContentUri(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Net.Uri"/></returns>
            public static Android.Net.Uri GetContentUri(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Net.Uri>(LocalBridgeClazz, "getContentUri", "(Ljava/lang/String;)Landroid/net/Uri;", arg0);
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes
            #region FileColumns
            public partial class FileColumns
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Files.FileColumns.html#MEDIA_TYPE_AUDIO"/>
                /// </summary>
                public static int MEDIA_TYPE_AUDIO { get { if (!_MEDIA_TYPE_AUDIOReady) { _MEDIA_TYPE_AUDIOContent = SGetField<int>(LocalBridgeClazz, "MEDIA_TYPE_AUDIO"); _MEDIA_TYPE_AUDIOReady = true; } return _MEDIA_TYPE_AUDIOContent; } }
                private static int _MEDIA_TYPE_AUDIOContent = default;
                private static bool _MEDIA_TYPE_AUDIOReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Files.FileColumns.html#MEDIA_TYPE_DOCUMENT"/>
                /// </summary>
                public static int MEDIA_TYPE_DOCUMENT { get { if (!_MEDIA_TYPE_DOCUMENTReady) { _MEDIA_TYPE_DOCUMENTContent = SGetField<int>(LocalBridgeClazz, "MEDIA_TYPE_DOCUMENT"); _MEDIA_TYPE_DOCUMENTReady = true; } return _MEDIA_TYPE_DOCUMENTContent; } }
                private static int _MEDIA_TYPE_DOCUMENTContent = default;
                private static bool _MEDIA_TYPE_DOCUMENTReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Files.FileColumns.html#MEDIA_TYPE_IMAGE"/>
                /// </summary>
                public static int MEDIA_TYPE_IMAGE { get { if (!_MEDIA_TYPE_IMAGEReady) { _MEDIA_TYPE_IMAGEContent = SGetField<int>(LocalBridgeClazz, "MEDIA_TYPE_IMAGE"); _MEDIA_TYPE_IMAGEReady = true; } return _MEDIA_TYPE_IMAGEContent; } }
                private static int _MEDIA_TYPE_IMAGEContent = default;
                private static bool _MEDIA_TYPE_IMAGEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Files.FileColumns.html#MEDIA_TYPE_NONE"/>
                /// </summary>
                public static int MEDIA_TYPE_NONE { get { if (!_MEDIA_TYPE_NONEReady) { _MEDIA_TYPE_NONEContent = SGetField<int>(LocalBridgeClazz, "MEDIA_TYPE_NONE"); _MEDIA_TYPE_NONEReady = true; } return _MEDIA_TYPE_NONEContent; } }
                private static int _MEDIA_TYPE_NONEContent = default;
                private static bool _MEDIA_TYPE_NONEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Files.FileColumns.html#MEDIA_TYPE_PLAYLIST"/>
                /// </summary>
                [global::System.Obsolete()]
                public static int MEDIA_TYPE_PLAYLIST { get { if (!_MEDIA_TYPE_PLAYLISTReady) { _MEDIA_TYPE_PLAYLISTContent = SGetField<int>(LocalBridgeClazz, "MEDIA_TYPE_PLAYLIST"); _MEDIA_TYPE_PLAYLISTReady = true; } return _MEDIA_TYPE_PLAYLISTContent; } }
                private static int _MEDIA_TYPE_PLAYLISTContent = default;
                private static bool _MEDIA_TYPE_PLAYLISTReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Files.FileColumns.html#MEDIA_TYPE_SUBTITLE"/>
                /// </summary>
                public static int MEDIA_TYPE_SUBTITLE { get { if (!_MEDIA_TYPE_SUBTITLEReady) { _MEDIA_TYPE_SUBTITLEContent = SGetField<int>(LocalBridgeClazz, "MEDIA_TYPE_SUBTITLE"); _MEDIA_TYPE_SUBTITLEReady = true; } return _MEDIA_TYPE_SUBTITLEContent; } }
                private static int _MEDIA_TYPE_SUBTITLEContent = default;
                private static bool _MEDIA_TYPE_SUBTITLEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Files.FileColumns.html#MEDIA_TYPE_VIDEO"/>
                /// </summary>
                public static int MEDIA_TYPE_VIDEO { get { if (!_MEDIA_TYPE_VIDEOReady) { _MEDIA_TYPE_VIDEOContent = SGetField<int>(LocalBridgeClazz, "MEDIA_TYPE_VIDEO"); _MEDIA_TYPE_VIDEOReady = true; } return _MEDIA_TYPE_VIDEOContent; } }
                private static int _MEDIA_TYPE_VIDEOContent = default;
                private static bool _MEDIA_TYPE_VIDEOReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Files.FileColumns.html#MEDIA_TYPE"/>
                /// </summary>
                public static Java.Lang.String MEDIA_TYPE { get { if (!_MEDIA_TYPEReady) { _MEDIA_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MEDIA_TYPE"); _MEDIA_TYPEReady = true; } return _MEDIA_TYPEContent; } }
                private static Java.Lang.String _MEDIA_TYPEContent = default;
                private static bool _MEDIA_TYPEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Files.FileColumns.html#MIME_TYPE"/>
                /// </summary>
                public static Java.Lang.String MIME_TYPE { get { if (!_MIME_TYPEReady) { _MIME_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIME_TYPE"); _MIME_TYPEReady = true; } return _MIME_TYPEContent; } }
                private static Java.Lang.String _MIME_TYPEContent = default;
                private static bool _MIME_TYPEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Files.FileColumns.html#PARENT"/>
                /// </summary>
                public static Java.Lang.String PARENT { get { if (!_PARENTReady) { _PARENTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARENT"); _PARENTReady = true; } return _PARENTContent; } }
                private static Java.Lang.String _PARENTContent = default;
                private static bool _PARENTReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

        
            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Images
        public partial class Images
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes
            #region Thumbnails
            public partial class Thumbnails
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.Thumbnails.html#EXTERNAL_CONTENT_URI"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Android.Net.Uri EXTERNAL_CONTENT_URI { get { if (!_EXTERNAL_CONTENT_URIReady) { _EXTERNAL_CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "EXTERNAL_CONTENT_URI"); _EXTERNAL_CONTENT_URIReady = true; } return _EXTERNAL_CONTENT_URIContent; } }
                private static Android.Net.Uri _EXTERNAL_CONTENT_URIContent = default;
                private static bool _EXTERNAL_CONTENT_URIReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.Thumbnails.html#INTERNAL_CONTENT_URI"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Android.Net.Uri INTERNAL_CONTENT_URI { get { if (!_INTERNAL_CONTENT_URIReady) { _INTERNAL_CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "INTERNAL_CONTENT_URI"); _INTERNAL_CONTENT_URIReady = true; } return _INTERNAL_CONTENT_URIContent; } }
                private static Android.Net.Uri _INTERNAL_CONTENT_URIContent = default;
                private static bool _INTERNAL_CONTENT_URIReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.Thumbnails.html#FULL_SCREEN_KIND"/>
                /// </summary>
                [global::System.Obsolete()]
                public static int FULL_SCREEN_KIND { get { if (!_FULL_SCREEN_KINDReady) { _FULL_SCREEN_KINDContent = SGetField<int>(LocalBridgeClazz, "FULL_SCREEN_KIND"); _FULL_SCREEN_KINDReady = true; } return _FULL_SCREEN_KINDContent; } }
                private static int _FULL_SCREEN_KINDContent = default;
                private static bool _FULL_SCREEN_KINDReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.Thumbnails.html#MICRO_KIND"/>
                /// </summary>
                [global::System.Obsolete()]
                public static int MICRO_KIND { get { if (!_MICRO_KINDReady) { _MICRO_KINDContent = SGetField<int>(LocalBridgeClazz, "MICRO_KIND"); _MICRO_KINDReady = true; } return _MICRO_KINDContent; } }
                private static int _MICRO_KINDContent = default;
                private static bool _MICRO_KINDReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.Thumbnails.html#MINI_KIND"/>
                /// </summary>
                [global::System.Obsolete()]
                public static int MINI_KIND { get { if (!_MINI_KINDReady) { _MINI_KINDContent = SGetField<int>(LocalBridgeClazz, "MINI_KIND"); _MINI_KINDReady = true; } return _MINI_KINDContent; } }
                private static int _MINI_KINDContent = default;
                private static bool _MINI_KINDReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.Thumbnails.html#DATA"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Java.Lang.String DATA { get { if (!_DATAReady) { _DATAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DATA"); _DATAReady = true; } return _DATAContent; } }
                private static Java.Lang.String _DATAContent = default;
                private static bool _DATAReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.Thumbnails.html#DEFAULT_SORT_ORDER"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Java.Lang.String DEFAULT_SORT_ORDER { get { if (!_DEFAULT_SORT_ORDERReady) { _DEFAULT_SORT_ORDERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFAULT_SORT_ORDER"); _DEFAULT_SORT_ORDERReady = true; } return _DEFAULT_SORT_ORDERContent; } }
                private static Java.Lang.String _DEFAULT_SORT_ORDERContent = default;
                private static bool _DEFAULT_SORT_ORDERReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.Thumbnails.html#HEIGHT"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Java.Lang.String HEIGHT { get { if (!_HEIGHTReady) { _HEIGHTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "HEIGHT"); _HEIGHTReady = true; } return _HEIGHTContent; } }
                private static Java.Lang.String _HEIGHTContent = default;
                private static bool _HEIGHTReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.Thumbnails.html#IMAGE_ID"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Java.Lang.String IMAGE_ID { get { if (!_IMAGE_IDReady) { _IMAGE_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "IMAGE_ID"); _IMAGE_IDReady = true; } return _IMAGE_IDContent; } }
                private static Java.Lang.String _IMAGE_IDContent = default;
                private static bool _IMAGE_IDReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.Thumbnails.html#KIND"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Java.Lang.String KIND { get { if (!_KINDReady) { _KINDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KIND"); _KINDReady = true; } return _KINDContent; } }
                private static Java.Lang.String _KINDContent = default;
                private static bool _KINDReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.Thumbnails.html#THUMB_DATA"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Java.Lang.String THUMB_DATA { get { if (!_THUMB_DATAReady) { _THUMB_DATAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "THUMB_DATA"); _THUMB_DATAReady = true; } return _THUMB_DATAContent; } }
                private static Java.Lang.String _THUMB_DATAContent = default;
                private static bool _THUMB_DATAReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.Thumbnails.html#WIDTH"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Java.Lang.String WIDTH { get { if (!_WIDTHReady) { _WIDTHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIDTH"); _WIDTHReady = true; } return _WIDTHContent; } }
                private static Java.Lang.String _WIDTHContent = default;
                private static bool _WIDTHReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.Thumbnails.html#getThumbnail(android.content.ContentResolver,long,int,android.graphics.BitmapFactory.Options)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
                /// <param name="arg1"><see cref="long"/></param>
                /// <param name="arg2"><see cref="int"/></param>
                /// <param name="arg3"><see cref="Android.Graphics.BitmapFactory.Options"/></param>
                /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
                [global::System.Obsolete()]
                public static Android.Graphics.Bitmap GetThumbnail(Android.Content.ContentResolver arg0, long arg1, int arg2, Android.Graphics.BitmapFactory.Options arg3)
                {
                    return SExecute<Android.Graphics.Bitmap>(LocalBridgeClazz, "getThumbnail", arg0, arg1, arg2, arg3);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.Thumbnails.html#getThumbnail(android.content.ContentResolver,long,long,int,android.graphics.BitmapFactory.Options)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
                /// <param name="arg1"><see cref="long"/></param>
                /// <param name="arg2"><see cref="long"/></param>
                /// <param name="arg3"><see cref="int"/></param>
                /// <param name="arg4"><see cref="Android.Graphics.BitmapFactory.Options"/></param>
                /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
                [global::System.Obsolete()]
                public static Android.Graphics.Bitmap GetThumbnail(Android.Content.ContentResolver arg0, long arg1, long arg2, int arg3, Android.Graphics.BitmapFactory.Options arg4)
                {
                    return SExecute<Android.Graphics.Bitmap>(LocalBridgeClazz, "getThumbnail", arg0, arg1, arg2, arg3, arg4);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.Thumbnails.html#getContentUri(java.lang.String)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Java.Lang.String"/></param>
                /// <returns><see cref="Android.Net.Uri"/></returns>
                [global::System.Obsolete()]
                public static Android.Net.Uri GetContentUri(Java.Lang.String arg0)
                {
                    return SExecuteWithSignature<Android.Net.Uri>(LocalBridgeClazz, "getContentUri", "(Ljava/lang/String;)Landroid/net/Uri;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.Thumbnails.html#getKindSize(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <returns><see cref="Android.Util.Size"/></returns>
                [global::System.Obsolete()]
                public static Android.Util.Size GetKindSize(int arg0)
                {
                    return SExecuteWithSignature<Android.Util.Size>(LocalBridgeClazz, "getKindSize", "(I)Landroid/util/Size;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.Thumbnails.html#query(android.content.ContentResolver,android.net.Uri,java.lang.String[])"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
                /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
                /// <param name="arg2"><see cref="Java.Lang.String"/></param>
                /// <returns><see cref="Android.Database.Cursor"/></returns>
                [global::System.Obsolete()]
                public static Android.Database.Cursor Query(Android.Content.ContentResolver arg0, Android.Net.Uri arg1, Java.Lang.String[] arg2)
                {
                    return SExecute<Android.Database.Cursor>(LocalBridgeClazz, "query", arg0, arg1, arg2);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.Thumbnails.html#queryMiniThumbnail(android.content.ContentResolver,long,int,java.lang.String[])"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
                /// <param name="arg1"><see cref="long"/></param>
                /// <param name="arg2"><see cref="int"/></param>
                /// <param name="arg3"><see cref="Java.Lang.String"/></param>
                /// <returns><see cref="Android.Database.Cursor"/></returns>
                [global::System.Obsolete()]
                public static Android.Database.Cursor QueryMiniThumbnail(Android.Content.ContentResolver arg0, long arg1, int arg2, Java.Lang.String[] arg3)
                {
                    return SExecute<Android.Database.Cursor>(LocalBridgeClazz, "queryMiniThumbnail", arg0, arg1, arg2, arg3);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.Thumbnails.html#queryMiniThumbnails(android.content.ContentResolver,android.net.Uri,int,java.lang.String[])"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
                /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
                /// <param name="arg2"><see cref="int"/></param>
                /// <param name="arg3"><see cref="Java.Lang.String"/></param>
                /// <returns><see cref="Android.Database.Cursor"/></returns>
                [global::System.Obsolete()]
                public static Android.Database.Cursor QueryMiniThumbnails(Android.Content.ContentResolver arg0, Android.Net.Uri arg1, int arg2, Java.Lang.String[] arg3)
                {
                    return SExecute<Android.Database.Cursor>(LocalBridgeClazz, "queryMiniThumbnails", arg0, arg1, arg2, arg3);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.Thumbnails.html#cancelThumbnailRequest(android.content.ContentResolver,long,long)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
                /// <param name="arg1"><see cref="long"/></param>
                /// <param name="arg2"><see cref="long"/></param>
                [global::System.Obsolete()]
                public static void CancelThumbnailRequest(Android.Content.ContentResolver arg0, long arg1, long arg2)
                {
                    SExecute(LocalBridgeClazz, "cancelThumbnailRequest", arg0, arg1, arg2);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.Thumbnails.html#cancelThumbnailRequest(android.content.ContentResolver,long)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
                /// <param name="arg1"><see cref="long"/></param>
                [global::System.Obsolete()]
                public static void CancelThumbnailRequest(Android.Content.ContentResolver arg0, long arg1)
                {
                    SExecute(LocalBridgeClazz, "cancelThumbnailRequest", arg0, arg1);
                }

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

            #region Media
            public partial class Media
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.Media.html#EXTERNAL_CONTENT_URI"/>
                /// </summary>
                public static Android.Net.Uri EXTERNAL_CONTENT_URI { get { if (!_EXTERNAL_CONTENT_URIReady) { _EXTERNAL_CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "EXTERNAL_CONTENT_URI"); _EXTERNAL_CONTENT_URIReady = true; } return _EXTERNAL_CONTENT_URIContent; } }
                private static Android.Net.Uri _EXTERNAL_CONTENT_URIContent = default;
                private static bool _EXTERNAL_CONTENT_URIReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.Media.html#INTERNAL_CONTENT_URI"/>
                /// </summary>
                public static Android.Net.Uri INTERNAL_CONTENT_URI { get { if (!_INTERNAL_CONTENT_URIReady) { _INTERNAL_CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "INTERNAL_CONTENT_URI"); _INTERNAL_CONTENT_URIReady = true; } return _INTERNAL_CONTENT_URIContent; } }
                private static Android.Net.Uri _INTERNAL_CONTENT_URIContent = default;
                private static bool _INTERNAL_CONTENT_URIReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.Media.html#CONTENT_TYPE"/>
                /// </summary>
                public static Java.Lang.String CONTENT_TYPE { get { if (!_CONTENT_TYPEReady) { _CONTENT_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_TYPE"); _CONTENT_TYPEReady = true; } return _CONTENT_TYPEContent; } }
                private static Java.Lang.String _CONTENT_TYPEContent = default;
                private static bool _CONTENT_TYPEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.Media.html#DEFAULT_SORT_ORDER"/>
                /// </summary>
                public static Java.Lang.String DEFAULT_SORT_ORDER { get { if (!_DEFAULT_SORT_ORDERReady) { _DEFAULT_SORT_ORDERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFAULT_SORT_ORDER"); _DEFAULT_SORT_ORDERReady = true; } return _DEFAULT_SORT_ORDERContent; } }
                private static Java.Lang.String _DEFAULT_SORT_ORDERContent = default;
                private static bool _DEFAULT_SORT_ORDERReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.Media.html#query(android.content.ContentResolver,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
                /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
                /// <param name="arg2"><see cref="Java.Lang.String"/></param>
                /// <param name="arg3"><see cref="Java.Lang.String"/></param>
                /// <param name="arg4"><see cref="Java.Lang.String"/></param>
                /// <returns><see cref="Android.Database.Cursor"/></returns>
                [global::System.Obsolete()]
                public static Android.Database.Cursor Query(Android.Content.ContentResolver arg0, Android.Net.Uri arg1, Java.Lang.String[] arg2, Java.Lang.String arg3, Java.Lang.String arg4)
                {
                    return SExecute<Android.Database.Cursor>(LocalBridgeClazz, "query", arg0, arg1, arg2, arg3, arg4);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.Media.html#query(android.content.ContentResolver,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
                /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
                /// <param name="arg2"><see cref="Java.Lang.String"/></param>
                /// <param name="arg3"><see cref="Java.Lang.String"/></param>
                /// <param name="arg4"><see cref="Java.Lang.String"/></param>
                /// <param name="arg5"><see cref="Java.Lang.String"/></param>
                /// <returns><see cref="Android.Database.Cursor"/></returns>
                [global::System.Obsolete()]
                public static Android.Database.Cursor Query(Android.Content.ContentResolver arg0, Android.Net.Uri arg1, Java.Lang.String[] arg2, Java.Lang.String arg3, Java.Lang.String[] arg4, Java.Lang.String arg5)
                {
                    return SExecute<Android.Database.Cursor>(LocalBridgeClazz, "query", arg0, arg1, arg2, arg3, arg4, arg5);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.Media.html#query(android.content.ContentResolver,android.net.Uri,java.lang.String[])"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
                /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
                /// <param name="arg2"><see cref="Java.Lang.String"/></param>
                /// <returns><see cref="Android.Database.Cursor"/></returns>
                [global::System.Obsolete()]
                public static Android.Database.Cursor Query(Android.Content.ContentResolver arg0, Android.Net.Uri arg1, Java.Lang.String[] arg2)
                {
                    return SExecute<Android.Database.Cursor>(LocalBridgeClazz, "query", arg0, arg1, arg2);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.Media.html#getBitmap(android.content.ContentResolver,android.net.Uri)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
                /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
                /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
                /// <exception cref="Java.Io.FileNotFoundException"/>
                /// <exception cref="Java.Io.IOException"/>
                [global::System.Obsolete()]
                public static Android.Graphics.Bitmap GetBitmap(Android.Content.ContentResolver arg0, Android.Net.Uri arg1)
                {
                    return SExecute<Android.Graphics.Bitmap>(LocalBridgeClazz, "getBitmap", arg0, arg1);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.Media.html#getContentUri(java.lang.String,long)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Java.Lang.String"/></param>
                /// <param name="arg1"><see cref="long"/></param>
                /// <returns><see cref="Android.Net.Uri"/></returns>
                public static Android.Net.Uri GetContentUri(Java.Lang.String arg0, long arg1)
                {
                    return SExecute<Android.Net.Uri>(LocalBridgeClazz, "getContentUri", arg0, arg1);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.Media.html#getContentUri(java.lang.String)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Java.Lang.String"/></param>
                /// <returns><see cref="Android.Net.Uri"/></returns>
                public static Android.Net.Uri GetContentUri(Java.Lang.String arg0)
                {
                    return SExecuteWithSignature<Android.Net.Uri>(LocalBridgeClazz, "getContentUri", "(Ljava/lang/String;)Landroid/net/Uri;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.Media.html#insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
                /// <param name="arg1"><see cref="Android.Graphics.Bitmap"/></param>
                /// <param name="arg2"><see cref="Java.Lang.String"/></param>
                /// <param name="arg3"><see cref="Java.Lang.String"/></param>
                /// <returns><see cref="Java.Lang.String"/></returns>
                [global::System.Obsolete()]
                public static Java.Lang.String InsertImage(Android.Content.ContentResolver arg0, Android.Graphics.Bitmap arg1, Java.Lang.String arg2, Java.Lang.String arg3)
                {
                    return SExecute<Java.Lang.String>(LocalBridgeClazz, "insertImage", arg0, arg1, arg2, arg3);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.Media.html#insertImage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
                /// <param name="arg1"><see cref="Java.Lang.String"/></param>
                /// <param name="arg2"><see cref="Java.Lang.String"/></param>
                /// <param name="arg3"><see cref="Java.Lang.String"/></param>
                /// <returns><see cref="Java.Lang.String"/></returns>
                /// <exception cref="Java.Io.FileNotFoundException"/>
                [global::System.Obsolete()]
                public static Java.Lang.String InsertImage(Android.Content.ContentResolver arg0, Java.Lang.String arg1, Java.Lang.String arg2, Java.Lang.String arg3)
                {
                    return SExecute<Java.Lang.String>(LocalBridgeClazz, "insertImage", arg0, arg1, arg2, arg3);
                }

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

            #region ImageColumns
            public partial class ImageColumns
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.ImageColumns.html#DESCRIPTION"/>
                /// </summary>
                public static Java.Lang.String DESCRIPTION { get { if (!_DESCRIPTIONReady) { _DESCRIPTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DESCRIPTION"); _DESCRIPTIONReady = true; } return _DESCRIPTIONContent; } }
                private static Java.Lang.String _DESCRIPTIONContent = default;
                private static bool _DESCRIPTIONReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.ImageColumns.html#EXPOSURE_TIME"/>
                /// </summary>
                public static Java.Lang.String EXPOSURE_TIME { get { if (!_EXPOSURE_TIMEReady) { _EXPOSURE_TIMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXPOSURE_TIME"); _EXPOSURE_TIMEReady = true; } return _EXPOSURE_TIMEContent; } }
                private static Java.Lang.String _EXPOSURE_TIMEContent = default;
                private static bool _EXPOSURE_TIMEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.ImageColumns.html#F_NUMBER"/>
                /// </summary>
                public static Java.Lang.String F_NUMBER { get { if (!_F_NUMBERReady) { _F_NUMBERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "F_NUMBER"); _F_NUMBERReady = true; } return _F_NUMBERContent; } }
                private static Java.Lang.String _F_NUMBERContent = default;
                private static bool _F_NUMBERReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.ImageColumns.html#IS_PRIVATE"/>
                /// </summary>
                public static Java.Lang.String IS_PRIVATE { get { if (!_IS_PRIVATEReady) { _IS_PRIVATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "IS_PRIVATE"); _IS_PRIVATEReady = true; } return _IS_PRIVATEContent; } }
                private static Java.Lang.String _IS_PRIVATEContent = default;
                private static bool _IS_PRIVATEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.ImageColumns.html#ISO"/>
                /// </summary>
                public static Java.Lang.String ISO { get { if (!_ISOReady) { _ISOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ISO"); _ISOReady = true; } return _ISOContent; } }
                private static Java.Lang.String _ISOContent = default;
                private static bool _ISOReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.ImageColumns.html#LATITUDE"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Java.Lang.String LATITUDE { get { if (!_LATITUDEReady) { _LATITUDEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LATITUDE"); _LATITUDEReady = true; } return _LATITUDEContent; } }
                private static Java.Lang.String _LATITUDEContent = default;
                private static bool _LATITUDEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.ImageColumns.html#LONGITUDE"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Java.Lang.String LONGITUDE { get { if (!_LONGITUDEReady) { _LONGITUDEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LONGITUDE"); _LONGITUDEReady = true; } return _LONGITUDEContent; } }
                private static Java.Lang.String _LONGITUDEContent = default;
                private static bool _LONGITUDEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.ImageColumns.html#MINI_THUMB_MAGIC"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Java.Lang.String MINI_THUMB_MAGIC { get { if (!_MINI_THUMB_MAGICReady) { _MINI_THUMB_MAGICContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MINI_THUMB_MAGIC"); _MINI_THUMB_MAGICReady = true; } return _MINI_THUMB_MAGICContent; } }
                private static Java.Lang.String _MINI_THUMB_MAGICContent = default;
                private static bool _MINI_THUMB_MAGICReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.ImageColumns.html#PICASA_ID"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Java.Lang.String PICASA_ID { get { if (!_PICASA_IDReady) { _PICASA_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PICASA_ID"); _PICASA_IDReady = true; } return _PICASA_IDContent; } }
                private static Java.Lang.String _PICASA_IDContent = default;
                private static bool _PICASA_IDReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Images.ImageColumns.html#SCENE_CAPTURE_TYPE"/>
                /// </summary>
                public static Java.Lang.String SCENE_CAPTURE_TYPE { get { if (!_SCENE_CAPTURE_TYPEReady) { _SCENE_CAPTURE_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SCENE_CAPTURE_TYPE"); _SCENE_CAPTURE_TYPEReady = true; } return _SCENE_CAPTURE_TYPEContent; } }
                private static Java.Lang.String _SCENE_CAPTURE_TYPEContent = default;
                private static bool _SCENE_CAPTURE_TYPEReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

        
            #endregion

            // TODO: complete the class
        }
        #endregion

        #region MediaColumns
        public partial class MediaColumns
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#ALBUM"/>
            /// </summary>
            public static Java.Lang.String ALBUM { get { if (!_ALBUMReady) { _ALBUMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ALBUM"); _ALBUMReady = true; } return _ALBUMContent; } }
            private static Java.Lang.String _ALBUMContent = default;
            private static bool _ALBUMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#ALBUM_ARTIST"/>
            /// </summary>
            public static Java.Lang.String ALBUM_ARTIST { get { if (!_ALBUM_ARTISTReady) { _ALBUM_ARTISTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ALBUM_ARTIST"); _ALBUM_ARTISTReady = true; } return _ALBUM_ARTISTContent; } }
            private static Java.Lang.String _ALBUM_ARTISTContent = default;
            private static bool _ALBUM_ARTISTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#ARTIST"/>
            /// </summary>
            public static Java.Lang.String ARTIST { get { if (!_ARTISTReady) { _ARTISTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ARTIST"); _ARTISTReady = true; } return _ARTISTContent; } }
            private static Java.Lang.String _ARTISTContent = default;
            private static bool _ARTISTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#AUTHOR"/>
            /// </summary>
            public static Java.Lang.String AUTHOR { get { if (!_AUTHORReady) { _AUTHORContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "AUTHOR"); _AUTHORReady = true; } return _AUTHORContent; } }
            private static Java.Lang.String _AUTHORContent = default;
            private static bool _AUTHORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#BITRATE"/>
            /// </summary>
            public static Java.Lang.String BITRATE { get { if (!_BITRATEReady) { _BITRATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BITRATE"); _BITRATEReady = true; } return _BITRATEContent; } }
            private static Java.Lang.String _BITRATEContent = default;
            private static bool _BITRATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#BUCKET_DISPLAY_NAME"/>
            /// </summary>
            public static Java.Lang.String BUCKET_DISPLAY_NAME { get { if (!_BUCKET_DISPLAY_NAMEReady) { _BUCKET_DISPLAY_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BUCKET_DISPLAY_NAME"); _BUCKET_DISPLAY_NAMEReady = true; } return _BUCKET_DISPLAY_NAMEContent; } }
            private static Java.Lang.String _BUCKET_DISPLAY_NAMEContent = default;
            private static bool _BUCKET_DISPLAY_NAMEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#BUCKET_ID"/>
            /// </summary>
            public static Java.Lang.String BUCKET_ID { get { if (!_BUCKET_IDReady) { _BUCKET_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BUCKET_ID"); _BUCKET_IDReady = true; } return _BUCKET_IDContent; } }
            private static Java.Lang.String _BUCKET_IDContent = default;
            private static bool _BUCKET_IDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#CAPTURE_FRAMERATE"/>
            /// </summary>
            public static Java.Lang.String CAPTURE_FRAMERATE { get { if (!_CAPTURE_FRAMERATEReady) { _CAPTURE_FRAMERATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CAPTURE_FRAMERATE"); _CAPTURE_FRAMERATEReady = true; } return _CAPTURE_FRAMERATEContent; } }
            private static Java.Lang.String _CAPTURE_FRAMERATEContent = default;
            private static bool _CAPTURE_FRAMERATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#CD_TRACK_NUMBER"/>
            /// </summary>
            public static Java.Lang.String CD_TRACK_NUMBER { get { if (!_CD_TRACK_NUMBERReady) { _CD_TRACK_NUMBERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CD_TRACK_NUMBER"); _CD_TRACK_NUMBERReady = true; } return _CD_TRACK_NUMBERContent; } }
            private static Java.Lang.String _CD_TRACK_NUMBERContent = default;
            private static bool _CD_TRACK_NUMBERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#COMPILATION"/>
            /// </summary>
            public static Java.Lang.String COMPILATION { get { if (!_COMPILATIONReady) { _COMPILATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COMPILATION"); _COMPILATIONReady = true; } return _COMPILATIONContent; } }
            private static Java.Lang.String _COMPILATIONContent = default;
            private static bool _COMPILATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#COMPOSER"/>
            /// </summary>
            public static Java.Lang.String COMPOSER { get { if (!_COMPOSERReady) { _COMPOSERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COMPOSER"); _COMPOSERReady = true; } return _COMPOSERContent; } }
            private static Java.Lang.String _COMPOSERContent = default;
            private static bool _COMPOSERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#DATA"/>
            /// </summary>
            public static Java.Lang.String DATA { get { if (!_DATAReady) { _DATAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DATA"); _DATAReady = true; } return _DATAContent; } }
            private static Java.Lang.String _DATAContent = default;
            private static bool _DATAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#DATE_ADDED"/>
            /// </summary>
            public static Java.Lang.String DATE_ADDED { get { if (!_DATE_ADDEDReady) { _DATE_ADDEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DATE_ADDED"); _DATE_ADDEDReady = true; } return _DATE_ADDEDContent; } }
            private static Java.Lang.String _DATE_ADDEDContent = default;
            private static bool _DATE_ADDEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#DATE_EXPIRES"/>
            /// </summary>
            public static Java.Lang.String DATE_EXPIRES { get { if (!_DATE_EXPIRESReady) { _DATE_EXPIRESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DATE_EXPIRES"); _DATE_EXPIRESReady = true; } return _DATE_EXPIRESContent; } }
            private static Java.Lang.String _DATE_EXPIRESContent = default;
            private static bool _DATE_EXPIRESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#DATE_MODIFIED"/>
            /// </summary>
            public static Java.Lang.String DATE_MODIFIED { get { if (!_DATE_MODIFIEDReady) { _DATE_MODIFIEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DATE_MODIFIED"); _DATE_MODIFIEDReady = true; } return _DATE_MODIFIEDContent; } }
            private static Java.Lang.String _DATE_MODIFIEDContent = default;
            private static bool _DATE_MODIFIEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#DATE_TAKEN"/>
            /// </summary>
            public static Java.Lang.String DATE_TAKEN { get { if (!_DATE_TAKENReady) { _DATE_TAKENContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DATE_TAKEN"); _DATE_TAKENReady = true; } return _DATE_TAKENContent; } }
            private static Java.Lang.String _DATE_TAKENContent = default;
            private static bool _DATE_TAKENReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#DISC_NUMBER"/>
            /// </summary>
            public static Java.Lang.String DISC_NUMBER { get { if (!_DISC_NUMBERReady) { _DISC_NUMBERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISC_NUMBER"); _DISC_NUMBERReady = true; } return _DISC_NUMBERContent; } }
            private static Java.Lang.String _DISC_NUMBERContent = default;
            private static bool _DISC_NUMBERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#DISPLAY_NAME"/>
            /// </summary>
            public static Java.Lang.String DISPLAY_NAME { get { if (!_DISPLAY_NAMEReady) { _DISPLAY_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISPLAY_NAME"); _DISPLAY_NAMEReady = true; } return _DISPLAY_NAMEContent; } }
            private static Java.Lang.String _DISPLAY_NAMEContent = default;
            private static bool _DISPLAY_NAMEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#DOCUMENT_ID"/>
            /// </summary>
            public static Java.Lang.String DOCUMENT_ID { get { if (!_DOCUMENT_IDReady) { _DOCUMENT_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DOCUMENT_ID"); _DOCUMENT_IDReady = true; } return _DOCUMENT_IDContent; } }
            private static Java.Lang.String _DOCUMENT_IDContent = default;
            private static bool _DOCUMENT_IDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#DURATION"/>
            /// </summary>
            public static Java.Lang.String DURATION { get { if (!_DURATIONReady) { _DURATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DURATION"); _DURATIONReady = true; } return _DURATIONContent; } }
            private static Java.Lang.String _DURATIONContent = default;
            private static bool _DURATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#GENERATION_ADDED"/>
            /// </summary>
            public static Java.Lang.String GENERATION_ADDED { get { if (!_GENERATION_ADDEDReady) { _GENERATION_ADDEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GENERATION_ADDED"); _GENERATION_ADDEDReady = true; } return _GENERATION_ADDEDContent; } }
            private static Java.Lang.String _GENERATION_ADDEDContent = default;
            private static bool _GENERATION_ADDEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#GENERATION_MODIFIED"/>
            /// </summary>
            public static Java.Lang.String GENERATION_MODIFIED { get { if (!_GENERATION_MODIFIEDReady) { _GENERATION_MODIFIEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GENERATION_MODIFIED"); _GENERATION_MODIFIEDReady = true; } return _GENERATION_MODIFIEDContent; } }
            private static Java.Lang.String _GENERATION_MODIFIEDContent = default;
            private static bool _GENERATION_MODIFIEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#GENRE"/>
            /// </summary>
            public static Java.Lang.String GENRE { get { if (!_GENREReady) { _GENREContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GENRE"); _GENREReady = true; } return _GENREContent; } }
            private static Java.Lang.String _GENREContent = default;
            private static bool _GENREReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#HEIGHT"/>
            /// </summary>
            public static Java.Lang.String HEIGHT { get { if (!_HEIGHTReady) { _HEIGHTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "HEIGHT"); _HEIGHTReady = true; } return _HEIGHTContent; } }
            private static Java.Lang.String _HEIGHTContent = default;
            private static bool _HEIGHTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#INSTANCE_ID"/>
            /// </summary>
            public static Java.Lang.String INSTANCE_ID { get { if (!_INSTANCE_IDReady) { _INSTANCE_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "INSTANCE_ID"); _INSTANCE_IDReady = true; } return _INSTANCE_IDContent; } }
            private static Java.Lang.String _INSTANCE_IDContent = default;
            private static bool _INSTANCE_IDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#IS_DOWNLOAD"/>
            /// </summary>
            public static Java.Lang.String IS_DOWNLOAD { get { if (!_IS_DOWNLOADReady) { _IS_DOWNLOADContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "IS_DOWNLOAD"); _IS_DOWNLOADReady = true; } return _IS_DOWNLOADContent; } }
            private static Java.Lang.String _IS_DOWNLOADContent = default;
            private static bool _IS_DOWNLOADReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#IS_DRM"/>
            /// </summary>
            public static Java.Lang.String IS_DRM { get { if (!_IS_DRMReady) { _IS_DRMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "IS_DRM"); _IS_DRMReady = true; } return _IS_DRMContent; } }
            private static Java.Lang.String _IS_DRMContent = default;
            private static bool _IS_DRMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#IS_FAVORITE"/>
            /// </summary>
            public static Java.Lang.String IS_FAVORITE { get { if (!_IS_FAVORITEReady) { _IS_FAVORITEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "IS_FAVORITE"); _IS_FAVORITEReady = true; } return _IS_FAVORITEContent; } }
            private static Java.Lang.String _IS_FAVORITEContent = default;
            private static bool _IS_FAVORITEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#IS_PENDING"/>
            /// </summary>
            public static Java.Lang.String IS_PENDING { get { if (!_IS_PENDINGReady) { _IS_PENDINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "IS_PENDING"); _IS_PENDINGReady = true; } return _IS_PENDINGContent; } }
            private static Java.Lang.String _IS_PENDINGContent = default;
            private static bool _IS_PENDINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#IS_TRASHED"/>
            /// </summary>
            public static Java.Lang.String IS_TRASHED { get { if (!_IS_TRASHEDReady) { _IS_TRASHEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "IS_TRASHED"); _IS_TRASHEDReady = true; } return _IS_TRASHEDContent; } }
            private static Java.Lang.String _IS_TRASHEDContent = default;
            private static bool _IS_TRASHEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#MIME_TYPE"/>
            /// </summary>
            public static Java.Lang.String MIME_TYPE { get { if (!_MIME_TYPEReady) { _MIME_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIME_TYPE"); _MIME_TYPEReady = true; } return _MIME_TYPEContent; } }
            private static Java.Lang.String _MIME_TYPEContent = default;
            private static bool _MIME_TYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#NUM_TRACKS"/>
            /// </summary>
            public static Java.Lang.String NUM_TRACKS { get { if (!_NUM_TRACKSReady) { _NUM_TRACKSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NUM_TRACKS"); _NUM_TRACKSReady = true; } return _NUM_TRACKSContent; } }
            private static Java.Lang.String _NUM_TRACKSContent = default;
            private static bool _NUM_TRACKSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#ORIENTATION"/>
            /// </summary>
            public static Java.Lang.String ORIENTATION { get { if (!_ORIENTATIONReady) { _ORIENTATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ORIENTATION"); _ORIENTATIONReady = true; } return _ORIENTATIONContent; } }
            private static Java.Lang.String _ORIENTATIONContent = default;
            private static bool _ORIENTATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#ORIGINAL_DOCUMENT_ID"/>
            /// </summary>
            public static Java.Lang.String ORIGINAL_DOCUMENT_ID { get { if (!_ORIGINAL_DOCUMENT_IDReady) { _ORIGINAL_DOCUMENT_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ORIGINAL_DOCUMENT_ID"); _ORIGINAL_DOCUMENT_IDReady = true; } return _ORIGINAL_DOCUMENT_IDContent; } }
            private static Java.Lang.String _ORIGINAL_DOCUMENT_IDContent = default;
            private static bool _ORIGINAL_DOCUMENT_IDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#OWNER_PACKAGE_NAME"/>
            /// </summary>
            public static Java.Lang.String OWNER_PACKAGE_NAME { get { if (!_OWNER_PACKAGE_NAMEReady) { _OWNER_PACKAGE_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OWNER_PACKAGE_NAME"); _OWNER_PACKAGE_NAMEReady = true; } return _OWNER_PACKAGE_NAMEContent; } }
            private static Java.Lang.String _OWNER_PACKAGE_NAMEContent = default;
            private static bool _OWNER_PACKAGE_NAMEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#RELATIVE_PATH"/>
            /// </summary>
            public static Java.Lang.String RELATIVE_PATH { get { if (!_RELATIVE_PATHReady) { _RELATIVE_PATHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RELATIVE_PATH"); _RELATIVE_PATHReady = true; } return _RELATIVE_PATHContent; } }
            private static Java.Lang.String _RELATIVE_PATHContent = default;
            private static bool _RELATIVE_PATHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#RESOLUTION"/>
            /// </summary>
            public static Java.Lang.String RESOLUTION { get { if (!_RESOLUTIONReady) { _RESOLUTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RESOLUTION"); _RESOLUTIONReady = true; } return _RESOLUTIONContent; } }
            private static Java.Lang.String _RESOLUTIONContent = default;
            private static bool _RESOLUTIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#SIZE"/>
            /// </summary>
            public static Java.Lang.String SIZE { get { if (!_SIZEReady) { _SIZEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SIZE"); _SIZEReady = true; } return _SIZEContent; } }
            private static Java.Lang.String _SIZEContent = default;
            private static bool _SIZEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#TITLE"/>
            /// </summary>
            public static Java.Lang.String TITLE { get { if (!_TITLEReady) { _TITLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TITLE"); _TITLEReady = true; } return _TITLEContent; } }
            private static Java.Lang.String _TITLEContent = default;
            private static bool _TITLEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#VOLUME_NAME"/>
            /// </summary>
            public static Java.Lang.String VOLUME_NAME { get { if (!_VOLUME_NAMEReady) { _VOLUME_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "VOLUME_NAME"); _VOLUME_NAMEReady = true; } return _VOLUME_NAMEContent; } }
            private static Java.Lang.String _VOLUME_NAMEContent = default;
            private static bool _VOLUME_NAMEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#WIDTH"/>
            /// </summary>
            public static Java.Lang.String WIDTH { get { if (!_WIDTHReady) { _WIDTHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIDTH"); _WIDTHReady = true; } return _WIDTHContent; } }
            private static Java.Lang.String _WIDTHContent = default;
            private static bool _WIDTHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#WRITER"/>
            /// </summary>
            public static Java.Lang.String WRITER { get { if (!_WRITERReady) { _WRITERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WRITER"); _WRITERReady = true; } return _WRITERContent; } }
            private static Java.Lang.String _WRITERContent = default;
            private static bool _WRITERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#XMP"/>
            /// </summary>
            public static Java.Lang.String XMP { get { if (!_XMPReady) { _XMPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "XMP"); _XMPReady = true; } return _XMPContent; } }
            private static Java.Lang.String _XMPContent = default;
            private static bool _XMPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html#YEAR"/>
            /// </summary>
            public static Java.Lang.String YEAR { get { if (!_YEARReady) { _YEARContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "YEAR"); _YEARReady = true; } return _YEARContent; } }
            private static Java.Lang.String _YEARContent = default;
            private static bool _YEARReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region PickerMediaColumns
        public partial class PickerMediaColumns
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.PickerMediaColumns.html#DATA"/>
            /// </summary>
            public static Java.Lang.String DATA { get { if (!_DATAReady) { _DATAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DATA"); _DATAReady = true; } return _DATAContent; } }
            private static Java.Lang.String _DATAContent = default;
            private static bool _DATAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.PickerMediaColumns.html#DATE_TAKEN"/>
            /// </summary>
            public static Java.Lang.String DATE_TAKEN { get { if (!_DATE_TAKENReady) { _DATE_TAKENContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DATE_TAKEN"); _DATE_TAKENReady = true; } return _DATE_TAKENContent; } }
            private static Java.Lang.String _DATE_TAKENContent = default;
            private static bool _DATE_TAKENReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.PickerMediaColumns.html#DISPLAY_NAME"/>
            /// </summary>
            public static Java.Lang.String DISPLAY_NAME { get { if (!_DISPLAY_NAMEReady) { _DISPLAY_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISPLAY_NAME"); _DISPLAY_NAMEReady = true; } return _DISPLAY_NAMEContent; } }
            private static Java.Lang.String _DISPLAY_NAMEContent = default;
            private static bool _DISPLAY_NAMEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.PickerMediaColumns.html#DURATION_MILLIS"/>
            /// </summary>
            public static Java.Lang.String DURATION_MILLIS { get { if (!_DURATION_MILLISReady) { _DURATION_MILLISContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DURATION_MILLIS"); _DURATION_MILLISReady = true; } return _DURATION_MILLISContent; } }
            private static Java.Lang.String _DURATION_MILLISContent = default;
            private static bool _DURATION_MILLISReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.PickerMediaColumns.html#HEIGHT"/>
            /// </summary>
            public static Java.Lang.String HEIGHT { get { if (!_HEIGHTReady) { _HEIGHTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "HEIGHT"); _HEIGHTReady = true; } return _HEIGHTContent; } }
            private static Java.Lang.String _HEIGHTContent = default;
            private static bool _HEIGHTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.PickerMediaColumns.html#MIME_TYPE"/>
            /// </summary>
            public static Java.Lang.String MIME_TYPE { get { if (!_MIME_TYPEReady) { _MIME_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIME_TYPE"); _MIME_TYPEReady = true; } return _MIME_TYPEContent; } }
            private static Java.Lang.String _MIME_TYPEContent = default;
            private static bool _MIME_TYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.PickerMediaColumns.html#ORIENTATION"/>
            /// </summary>
            public static Java.Lang.String ORIENTATION { get { if (!_ORIENTATIONReady) { _ORIENTATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ORIENTATION"); _ORIENTATIONReady = true; } return _ORIENTATIONContent; } }
            private static Java.Lang.String _ORIENTATIONContent = default;
            private static bool _ORIENTATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.PickerMediaColumns.html#SIZE"/>
            /// </summary>
            public static Java.Lang.String SIZE { get { if (!_SIZEReady) { _SIZEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SIZE"); _SIZEReady = true; } return _SIZEContent; } }
            private static Java.Lang.String _SIZEContent = default;
            private static bool _SIZEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.PickerMediaColumns.html#WIDTH"/>
            /// </summary>
            public static Java.Lang.String WIDTH { get { if (!_WIDTHReady) { _WIDTHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIDTH"); _WIDTHReady = true; } return _WIDTHContent; } }
            private static Java.Lang.String _WIDTHContent = default;
            private static bool _WIDTHReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Video
        public partial class Video
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Video.html#DEFAULT_SORT_ORDER"/>
            /// </summary>
            public static Java.Lang.String DEFAULT_SORT_ORDER { get { if (!_DEFAULT_SORT_ORDERReady) { _DEFAULT_SORT_ORDERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFAULT_SORT_ORDER"); _DEFAULT_SORT_ORDERReady = true; } return _DEFAULT_SORT_ORDERContent; } }
            private static Java.Lang.String _DEFAULT_SORT_ORDERContent = default;
            private static bool _DEFAULT_SORT_ORDERReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Video.html#query(android.content.ContentResolver,android.net.Uri,java.lang.String[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
            /// <param name="arg2"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Database.Cursor"/></returns>
            [global::System.Obsolete()]
            public static Android.Database.Cursor Query(Android.Content.ContentResolver arg0, Android.Net.Uri arg1, Java.Lang.String[] arg2)
            {
                return SExecute<Android.Database.Cursor>(LocalBridgeClazz, "query", arg0, arg1, arg2);
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes
            #region VideoColumns
            public partial class VideoColumns
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Video.VideoColumns.html#BOOKMARK"/>
                /// </summary>
                public static Java.Lang.String BOOKMARK { get { if (!_BOOKMARKReady) { _BOOKMARKContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BOOKMARK"); _BOOKMARKReady = true; } return _BOOKMARKContent; } }
                private static Java.Lang.String _BOOKMARKContent = default;
                private static bool _BOOKMARKReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Video.VideoColumns.html#CATEGORY"/>
                /// </summary>
                public static Java.Lang.String CATEGORY { get { if (!_CATEGORYReady) { _CATEGORYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CATEGORY"); _CATEGORYReady = true; } return _CATEGORYContent; } }
                private static Java.Lang.String _CATEGORYContent = default;
                private static bool _CATEGORYReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Video.VideoColumns.html#COLOR_RANGE"/>
                /// </summary>
                public static Java.Lang.String COLOR_RANGE { get { if (!_COLOR_RANGEReady) { _COLOR_RANGEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COLOR_RANGE"); _COLOR_RANGEReady = true; } return _COLOR_RANGEContent; } }
                private static Java.Lang.String _COLOR_RANGEContent = default;
                private static bool _COLOR_RANGEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Video.VideoColumns.html#COLOR_STANDARD"/>
                /// </summary>
                public static Java.Lang.String COLOR_STANDARD { get { if (!_COLOR_STANDARDReady) { _COLOR_STANDARDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COLOR_STANDARD"); _COLOR_STANDARDReady = true; } return _COLOR_STANDARDContent; } }
                private static Java.Lang.String _COLOR_STANDARDContent = default;
                private static bool _COLOR_STANDARDReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Video.VideoColumns.html#COLOR_TRANSFER"/>
                /// </summary>
                public static Java.Lang.String COLOR_TRANSFER { get { if (!_COLOR_TRANSFERReady) { _COLOR_TRANSFERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COLOR_TRANSFER"); _COLOR_TRANSFERReady = true; } return _COLOR_TRANSFERContent; } }
                private static Java.Lang.String _COLOR_TRANSFERContent = default;
                private static bool _COLOR_TRANSFERReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Video.VideoColumns.html#DESCRIPTION"/>
                /// </summary>
                public static Java.Lang.String DESCRIPTION { get { if (!_DESCRIPTIONReady) { _DESCRIPTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DESCRIPTION"); _DESCRIPTIONReady = true; } return _DESCRIPTIONContent; } }
                private static Java.Lang.String _DESCRIPTIONContent = default;
                private static bool _DESCRIPTIONReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Video.VideoColumns.html#IS_PRIVATE"/>
                /// </summary>
                public static Java.Lang.String IS_PRIVATE { get { if (!_IS_PRIVATEReady) { _IS_PRIVATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "IS_PRIVATE"); _IS_PRIVATEReady = true; } return _IS_PRIVATEContent; } }
                private static Java.Lang.String _IS_PRIVATEContent = default;
                private static bool _IS_PRIVATEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Video.VideoColumns.html#LANGUAGE"/>
                /// </summary>
                public static Java.Lang.String LANGUAGE { get { if (!_LANGUAGEReady) { _LANGUAGEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LANGUAGE"); _LANGUAGEReady = true; } return _LANGUAGEContent; } }
                private static Java.Lang.String _LANGUAGEContent = default;
                private static bool _LANGUAGEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Video.VideoColumns.html#LATITUDE"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Java.Lang.String LATITUDE { get { if (!_LATITUDEReady) { _LATITUDEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LATITUDE"); _LATITUDEReady = true; } return _LATITUDEContent; } }
                private static Java.Lang.String _LATITUDEContent = default;
                private static bool _LATITUDEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Video.VideoColumns.html#LONGITUDE"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Java.Lang.String LONGITUDE { get { if (!_LONGITUDEReady) { _LONGITUDEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LONGITUDE"); _LONGITUDEReady = true; } return _LONGITUDEContent; } }
                private static Java.Lang.String _LONGITUDEContent = default;
                private static bool _LONGITUDEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Video.VideoColumns.html#MINI_THUMB_MAGIC"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Java.Lang.String MINI_THUMB_MAGIC { get { if (!_MINI_THUMB_MAGICReady) { _MINI_THUMB_MAGICContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MINI_THUMB_MAGIC"); _MINI_THUMB_MAGICReady = true; } return _MINI_THUMB_MAGICContent; } }
                private static Java.Lang.String _MINI_THUMB_MAGICContent = default;
                private static bool _MINI_THUMB_MAGICReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Video.VideoColumns.html#TAGS"/>
                /// </summary>
                public static Java.Lang.String TAGS { get { if (!_TAGSReady) { _TAGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAGS"); _TAGSReady = true; } return _TAGSContent; } }
                private static Java.Lang.String _TAGSContent = default;
                private static bool _TAGSReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

            #region Thumbnails
            public partial class Thumbnails
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Video.Thumbnails.html#EXTERNAL_CONTENT_URI"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Android.Net.Uri EXTERNAL_CONTENT_URI { get { if (!_EXTERNAL_CONTENT_URIReady) { _EXTERNAL_CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "EXTERNAL_CONTENT_URI"); _EXTERNAL_CONTENT_URIReady = true; } return _EXTERNAL_CONTENT_URIContent; } }
                private static Android.Net.Uri _EXTERNAL_CONTENT_URIContent = default;
                private static bool _EXTERNAL_CONTENT_URIReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Video.Thumbnails.html#INTERNAL_CONTENT_URI"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Android.Net.Uri INTERNAL_CONTENT_URI { get { if (!_INTERNAL_CONTENT_URIReady) { _INTERNAL_CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "INTERNAL_CONTENT_URI"); _INTERNAL_CONTENT_URIReady = true; } return _INTERNAL_CONTENT_URIContent; } }
                private static Android.Net.Uri _INTERNAL_CONTENT_URIContent = default;
                private static bool _INTERNAL_CONTENT_URIReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Video.Thumbnails.html#FULL_SCREEN_KIND"/>
                /// </summary>
                [global::System.Obsolete()]
                public static int FULL_SCREEN_KIND { get { if (!_FULL_SCREEN_KINDReady) { _FULL_SCREEN_KINDContent = SGetField<int>(LocalBridgeClazz, "FULL_SCREEN_KIND"); _FULL_SCREEN_KINDReady = true; } return _FULL_SCREEN_KINDContent; } }
                private static int _FULL_SCREEN_KINDContent = default;
                private static bool _FULL_SCREEN_KINDReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Video.Thumbnails.html#MICRO_KIND"/>
                /// </summary>
                [global::System.Obsolete()]
                public static int MICRO_KIND { get { if (!_MICRO_KINDReady) { _MICRO_KINDContent = SGetField<int>(LocalBridgeClazz, "MICRO_KIND"); _MICRO_KINDReady = true; } return _MICRO_KINDContent; } }
                private static int _MICRO_KINDContent = default;
                private static bool _MICRO_KINDReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Video.Thumbnails.html#MINI_KIND"/>
                /// </summary>
                [global::System.Obsolete()]
                public static int MINI_KIND { get { if (!_MINI_KINDReady) { _MINI_KINDContent = SGetField<int>(LocalBridgeClazz, "MINI_KIND"); _MINI_KINDReady = true; } return _MINI_KINDContent; } }
                private static int _MINI_KINDContent = default;
                private static bool _MINI_KINDReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Video.Thumbnails.html#DATA"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Java.Lang.String DATA { get { if (!_DATAReady) { _DATAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DATA"); _DATAReady = true; } return _DATAContent; } }
                private static Java.Lang.String _DATAContent = default;
                private static bool _DATAReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Video.Thumbnails.html#DEFAULT_SORT_ORDER"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Java.Lang.String DEFAULT_SORT_ORDER { get { if (!_DEFAULT_SORT_ORDERReady) { _DEFAULT_SORT_ORDERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFAULT_SORT_ORDER"); _DEFAULT_SORT_ORDERReady = true; } return _DEFAULT_SORT_ORDERContent; } }
                private static Java.Lang.String _DEFAULT_SORT_ORDERContent = default;
                private static bool _DEFAULT_SORT_ORDERReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Video.Thumbnails.html#HEIGHT"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Java.Lang.String HEIGHT { get { if (!_HEIGHTReady) { _HEIGHTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "HEIGHT"); _HEIGHTReady = true; } return _HEIGHTContent; } }
                private static Java.Lang.String _HEIGHTContent = default;
                private static bool _HEIGHTReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Video.Thumbnails.html#KIND"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Java.Lang.String KIND { get { if (!_KINDReady) { _KINDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KIND"); _KINDReady = true; } return _KINDContent; } }
                private static Java.Lang.String _KINDContent = default;
                private static bool _KINDReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Video.Thumbnails.html#VIDEO_ID"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Java.Lang.String VIDEO_ID { get { if (!_VIDEO_IDReady) { _VIDEO_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "VIDEO_ID"); _VIDEO_IDReady = true; } return _VIDEO_IDContent; } }
                private static Java.Lang.String _VIDEO_IDContent = default;
                private static bool _VIDEO_IDReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Video.Thumbnails.html#WIDTH"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Java.Lang.String WIDTH { get { if (!_WIDTHReady) { _WIDTHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIDTH"); _WIDTHReady = true; } return _WIDTHContent; } }
                private static Java.Lang.String _WIDTHContent = default;
                private static bool _WIDTHReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Video.Thumbnails.html#getThumbnail(android.content.ContentResolver,long,int,android.graphics.BitmapFactory.Options)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
                /// <param name="arg1"><see cref="long"/></param>
                /// <param name="arg2"><see cref="int"/></param>
                /// <param name="arg3"><see cref="Android.Graphics.BitmapFactory.Options"/></param>
                /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
                [global::System.Obsolete()]
                public static Android.Graphics.Bitmap GetThumbnail(Android.Content.ContentResolver arg0, long arg1, int arg2, Android.Graphics.BitmapFactory.Options arg3)
                {
                    return SExecute<Android.Graphics.Bitmap>(LocalBridgeClazz, "getThumbnail", arg0, arg1, arg2, arg3);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Video.Thumbnails.html#getThumbnail(android.content.ContentResolver,long,long,int,android.graphics.BitmapFactory.Options)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
                /// <param name="arg1"><see cref="long"/></param>
                /// <param name="arg2"><see cref="long"/></param>
                /// <param name="arg3"><see cref="int"/></param>
                /// <param name="arg4"><see cref="Android.Graphics.BitmapFactory.Options"/></param>
                /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
                [global::System.Obsolete()]
                public static Android.Graphics.Bitmap GetThumbnail(Android.Content.ContentResolver arg0, long arg1, long arg2, int arg3, Android.Graphics.BitmapFactory.Options arg4)
                {
                    return SExecute<Android.Graphics.Bitmap>(LocalBridgeClazz, "getThumbnail", arg0, arg1, arg2, arg3, arg4);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Video.Thumbnails.html#getContentUri(java.lang.String)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Java.Lang.String"/></param>
                /// <returns><see cref="Android.Net.Uri"/></returns>
                [global::System.Obsolete()]
                public static Android.Net.Uri GetContentUri(Java.Lang.String arg0)
                {
                    return SExecuteWithSignature<Android.Net.Uri>(LocalBridgeClazz, "getContentUri", "(Ljava/lang/String;)Landroid/net/Uri;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Video.Thumbnails.html#getKindSize(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <returns><see cref="Android.Util.Size"/></returns>
                [global::System.Obsolete()]
                public static Android.Util.Size GetKindSize(int arg0)
                {
                    return SExecuteWithSignature<Android.Util.Size>(LocalBridgeClazz, "getKindSize", "(I)Landroid/util/Size;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Video.Thumbnails.html#cancelThumbnailRequest(android.content.ContentResolver,long,long)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
                /// <param name="arg1"><see cref="long"/></param>
                /// <param name="arg2"><see cref="long"/></param>
                [global::System.Obsolete()]
                public static void CancelThumbnailRequest(Android.Content.ContentResolver arg0, long arg1, long arg2)
                {
                    SExecute(LocalBridgeClazz, "cancelThumbnailRequest", arg0, arg1, arg2);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Video.Thumbnails.html#cancelThumbnailRequest(android.content.ContentResolver,long)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
                /// <param name="arg1"><see cref="long"/></param>
                [global::System.Obsolete()]
                public static void CancelThumbnailRequest(Android.Content.ContentResolver arg0, long arg1)
                {
                    SExecute(LocalBridgeClazz, "cancelThumbnailRequest", arg0, arg1);
                }

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

            #region Media
            public partial class Media
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Video.Media.html#EXTERNAL_CONTENT_URI"/>
                /// </summary>
                public static Android.Net.Uri EXTERNAL_CONTENT_URI { get { if (!_EXTERNAL_CONTENT_URIReady) { _EXTERNAL_CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "EXTERNAL_CONTENT_URI"); _EXTERNAL_CONTENT_URIReady = true; } return _EXTERNAL_CONTENT_URIContent; } }
                private static Android.Net.Uri _EXTERNAL_CONTENT_URIContent = default;
                private static bool _EXTERNAL_CONTENT_URIReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Video.Media.html#INTERNAL_CONTENT_URI"/>
                /// </summary>
                public static Android.Net.Uri INTERNAL_CONTENT_URI { get { if (!_INTERNAL_CONTENT_URIReady) { _INTERNAL_CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "INTERNAL_CONTENT_URI"); _INTERNAL_CONTENT_URIReady = true; } return _INTERNAL_CONTENT_URIContent; } }
                private static Android.Net.Uri _INTERNAL_CONTENT_URIContent = default;
                private static bool _INTERNAL_CONTENT_URIReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Video.Media.html#CONTENT_TYPE"/>
                /// </summary>
                public static Java.Lang.String CONTENT_TYPE { get { if (!_CONTENT_TYPEReady) { _CONTENT_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_TYPE"); _CONTENT_TYPEReady = true; } return _CONTENT_TYPEContent; } }
                private static Java.Lang.String _CONTENT_TYPEContent = default;
                private static bool _CONTENT_TYPEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Video.Media.html#DEFAULT_SORT_ORDER"/>
                /// </summary>
                public static Java.Lang.String DEFAULT_SORT_ORDER { get { if (!_DEFAULT_SORT_ORDERReady) { _DEFAULT_SORT_ORDERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFAULT_SORT_ORDER"); _DEFAULT_SORT_ORDERReady = true; } return _DEFAULT_SORT_ORDERContent; } }
                private static Java.Lang.String _DEFAULT_SORT_ORDERContent = default;
                private static bool _DEFAULT_SORT_ORDERReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Video.Media.html#getContentUri(java.lang.String,long)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Java.Lang.String"/></param>
                /// <param name="arg1"><see cref="long"/></param>
                /// <returns><see cref="Android.Net.Uri"/></returns>
                public static Android.Net.Uri GetContentUri(Java.Lang.String arg0, long arg1)
                {
                    return SExecute<Android.Net.Uri>(LocalBridgeClazz, "getContentUri", arg0, arg1);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/MediaStore.Video.Media.html#getContentUri(java.lang.String)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Java.Lang.String"/></param>
                /// <returns><see cref="Android.Net.Uri"/></returns>
                public static Android.Net.Uri GetContentUri(Java.Lang.String arg0)
                {
                    return SExecuteWithSignature<Android.Net.Uri>(LocalBridgeClazz, "getContentUri", "(Ljava/lang/String;)Landroid/net/Uri;", arg0);
                }

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

        
            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Provider
{
    #region SimPhonebookContract declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/provider/SimPhonebookContract.html"/>
    /// </summary>
    public partial class SimPhonebookContract : MASES.JCOBridge.C2JBridge.JVMBridgeBase<SimPhonebookContract>
    {
        const string _bridgeClassName = "android.provider.SimPhonebookContract";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public SimPhonebookContract() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public SimPhonebookContract(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region ElementaryFiles declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/SimPhonebookContract.ElementaryFiles.html"/>
        /// </summary>
        public partial class ElementaryFiles : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ElementaryFiles>
        {
            const string _bridgeClassName = "android.provider.SimPhonebookContract$ElementaryFiles";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public ElementaryFiles() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public ElementaryFiles(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region SimRecords declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/SimPhonebookContract.SimRecords.html"/>
        /// </summary>
        public partial class SimRecords : MASES.JCOBridge.C2JBridge.JVMBridgeBase<SimRecords>
        {
            const string _bridgeClassName = "android.provider.SimPhonebookContract$SimRecords";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public SimRecords() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public SimRecords(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region SimPhonebookContract implementation
    public partial class SimPhonebookContract
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/SimPhonebookContract.html#AUTHORITY_URI"/>
        /// </summary>
        public static Android.Net.Uri AUTHORITY_URI { get { if (!_AUTHORITY_URIReady) { _AUTHORITY_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "AUTHORITY_URI"); _AUTHORITY_URIReady = true; } return _AUTHORITY_URIContent; } }
        private static Android.Net.Uri _AUTHORITY_URIContent = default;
        private static bool _AUTHORITY_URIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/SimPhonebookContract.html#AUTHORITY"/>
        /// </summary>
        public static Java.Lang.String AUTHORITY { get { if (!_AUTHORITYReady) { _AUTHORITYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "AUTHORITY"); _AUTHORITYReady = true; } return _AUTHORITYContent; } }
        private static Java.Lang.String _AUTHORITYContent = default;
        private static bool _AUTHORITYReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
    
        #endregion
    
        #region Nested classes
        #region ElementaryFiles implementation
        public partial class ElementaryFiles
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/SimPhonebookContract.ElementaryFiles.html#CONTENT_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_URI { get { if (!_CONTENT_URIReady) { _CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_URI"); _CONTENT_URIReady = true; } return _CONTENT_URIContent; } }
            private static Android.Net.Uri _CONTENT_URIContent = default;
            private static bool _CONTENT_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/SimPhonebookContract.ElementaryFiles.html#EF_ADN"/>
            /// </summary>
            public static int EF_ADN { get { if (!_EF_ADNReady) { _EF_ADNContent = SGetField<int>(LocalBridgeClazz, "EF_ADN"); _EF_ADNReady = true; } return _EF_ADNContent; } }
            private static int _EF_ADNContent = default;
            private static bool _EF_ADNReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/SimPhonebookContract.ElementaryFiles.html#EF_FDN"/>
            /// </summary>
            public static int EF_FDN { get { if (!_EF_FDNReady) { _EF_FDNContent = SGetField<int>(LocalBridgeClazz, "EF_FDN"); _EF_FDNReady = true; } return _EF_FDNContent; } }
            private static int _EF_FDNContent = default;
            private static bool _EF_FDNReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/SimPhonebookContract.ElementaryFiles.html#EF_SDN"/>
            /// </summary>
            public static int EF_SDN { get { if (!_EF_SDNReady) { _EF_SDNContent = SGetField<int>(LocalBridgeClazz, "EF_SDN"); _EF_SDNReady = true; } return _EF_SDNContent; } }
            private static int _EF_SDNContent = default;
            private static bool _EF_SDNReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/SimPhonebookContract.ElementaryFiles.html#EF_UNKNOWN"/>
            /// </summary>
            public static int EF_UNKNOWN { get { if (!_EF_UNKNOWNReady) { _EF_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "EF_UNKNOWN"); _EF_UNKNOWNReady = true; } return _EF_UNKNOWNContent; } }
            private static int _EF_UNKNOWNContent = default;
            private static bool _EF_UNKNOWNReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/SimPhonebookContract.ElementaryFiles.html#CONTENT_ITEM_TYPE"/>
            /// </summary>
            public static Java.Lang.String CONTENT_ITEM_TYPE { get { if (!_CONTENT_ITEM_TYPEReady) { _CONTENT_ITEM_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_ITEM_TYPE"); _CONTENT_ITEM_TYPEReady = true; } return _CONTENT_ITEM_TYPEContent; } }
            private static Java.Lang.String _CONTENT_ITEM_TYPEContent = default;
            private static bool _CONTENT_ITEM_TYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/SimPhonebookContract.ElementaryFiles.html#CONTENT_TYPE"/>
            /// </summary>
            public static Java.Lang.String CONTENT_TYPE { get { if (!_CONTENT_TYPEReady) { _CONTENT_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_TYPE"); _CONTENT_TYPEReady = true; } return _CONTENT_TYPEContent; } }
            private static Java.Lang.String _CONTENT_TYPEContent = default;
            private static bool _CONTENT_TYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/SimPhonebookContract.ElementaryFiles.html#EF_TYPE"/>
            /// </summary>
            public static Java.Lang.String EF_TYPE { get { if (!_EF_TYPEReady) { _EF_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EF_TYPE"); _EF_TYPEReady = true; } return _EF_TYPEContent; } }
            private static Java.Lang.String _EF_TYPEContent = default;
            private static bool _EF_TYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/SimPhonebookContract.ElementaryFiles.html#MAX_RECORDS"/>
            /// </summary>
            public static Java.Lang.String MAX_RECORDS { get { if (!_MAX_RECORDSReady) { _MAX_RECORDSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MAX_RECORDS"); _MAX_RECORDSReady = true; } return _MAX_RECORDSContent; } }
            private static Java.Lang.String _MAX_RECORDSContent = default;
            private static bool _MAX_RECORDSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/SimPhonebookContract.ElementaryFiles.html#NAME_MAX_LENGTH"/>
            /// </summary>
            public static Java.Lang.String NAME_MAX_LENGTH { get { if (!_NAME_MAX_LENGTHReady) { _NAME_MAX_LENGTHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAME_MAX_LENGTH"); _NAME_MAX_LENGTHReady = true; } return _NAME_MAX_LENGTHContent; } }
            private static Java.Lang.String _NAME_MAX_LENGTHContent = default;
            private static bool _NAME_MAX_LENGTHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/SimPhonebookContract.ElementaryFiles.html#PHONE_NUMBER_MAX_LENGTH"/>
            /// </summary>
            public static Java.Lang.String PHONE_NUMBER_MAX_LENGTH { get { if (!_PHONE_NUMBER_MAX_LENGTHReady) { _PHONE_NUMBER_MAX_LENGTHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PHONE_NUMBER_MAX_LENGTH"); _PHONE_NUMBER_MAX_LENGTHReady = true; } return _PHONE_NUMBER_MAX_LENGTHContent; } }
            private static Java.Lang.String _PHONE_NUMBER_MAX_LENGTHContent = default;
            private static bool _PHONE_NUMBER_MAX_LENGTHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/SimPhonebookContract.ElementaryFiles.html#RECORD_COUNT"/>
            /// </summary>
            public static Java.Lang.String RECORD_COUNT { get { if (!_RECORD_COUNTReady) { _RECORD_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RECORD_COUNT"); _RECORD_COUNTReady = true; } return _RECORD_COUNTContent; } }
            private static Java.Lang.String _RECORD_COUNTContent = default;
            private static bool _RECORD_COUNTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/SimPhonebookContract.ElementaryFiles.html#SLOT_INDEX"/>
            /// </summary>
            public static Java.Lang.String SLOT_INDEX { get { if (!_SLOT_INDEXReady) { _SLOT_INDEXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SLOT_INDEX"); _SLOT_INDEXReady = true; } return _SLOT_INDEXContent; } }
            private static Java.Lang.String _SLOT_INDEXContent = default;
            private static bool _SLOT_INDEXReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/SimPhonebookContract.ElementaryFiles.html#SUBSCRIPTION_ID"/>
            /// </summary>
            public static Java.Lang.String SUBSCRIPTION_ID { get { if (!_SUBSCRIPTION_IDReady) { _SUBSCRIPTION_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SUBSCRIPTION_ID"); _SUBSCRIPTION_IDReady = true; } return _SUBSCRIPTION_IDContent; } }
            private static Java.Lang.String _SUBSCRIPTION_IDContent = default;
            private static bool _SUBSCRIPTION_IDReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/SimPhonebookContract.ElementaryFiles.html#getItemUri(int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.Uri"/></returns>
            public static Android.Net.Uri GetItemUri(int arg0, int arg1)
            {
                return SExecute<Android.Net.Uri>(LocalBridgeClazz, "getItemUri", arg0, arg1);
            }
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region SimRecords implementation
        public partial class SimRecords
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/SimPhonebookContract.SimRecords.html#ERROR_NAME_UNSUPPORTED"/>
            /// </summary>
            public static int ERROR_NAME_UNSUPPORTED { get { if (!_ERROR_NAME_UNSUPPORTEDReady) { _ERROR_NAME_UNSUPPORTEDContent = SGetField<int>(LocalBridgeClazz, "ERROR_NAME_UNSUPPORTED"); _ERROR_NAME_UNSUPPORTEDReady = true; } return _ERROR_NAME_UNSUPPORTEDContent; } }
            private static int _ERROR_NAME_UNSUPPORTEDContent = default;
            private static bool _ERROR_NAME_UNSUPPORTEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/SimPhonebookContract.SimRecords.html#CONTENT_ITEM_TYPE"/>
            /// </summary>
            public static Java.Lang.String CONTENT_ITEM_TYPE { get { if (!_CONTENT_ITEM_TYPEReady) { _CONTENT_ITEM_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_ITEM_TYPE"); _CONTENT_ITEM_TYPEReady = true; } return _CONTENT_ITEM_TYPEContent; } }
            private static Java.Lang.String _CONTENT_ITEM_TYPEContent = default;
            private static bool _CONTENT_ITEM_TYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/SimPhonebookContract.SimRecords.html#CONTENT_TYPE"/>
            /// </summary>
            public static Java.Lang.String CONTENT_TYPE { get { if (!_CONTENT_TYPEReady) { _CONTENT_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_TYPE"); _CONTENT_TYPEReady = true; } return _CONTENT_TYPEContent; } }
            private static Java.Lang.String _CONTENT_TYPEContent = default;
            private static bool _CONTENT_TYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/SimPhonebookContract.SimRecords.html#ELEMENTARY_FILE_TYPE"/>
            /// </summary>
            public static Java.Lang.String ELEMENTARY_FILE_TYPE { get { if (!_ELEMENTARY_FILE_TYPEReady) { _ELEMENTARY_FILE_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ELEMENTARY_FILE_TYPE"); _ELEMENTARY_FILE_TYPEReady = true; } return _ELEMENTARY_FILE_TYPEContent; } }
            private static Java.Lang.String _ELEMENTARY_FILE_TYPEContent = default;
            private static bool _ELEMENTARY_FILE_TYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/SimPhonebookContract.SimRecords.html#NAME"/>
            /// </summary>
            public static Java.Lang.String NAME { get { if (!_NAMEReady) { _NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAME"); _NAMEReady = true; } return _NAMEContent; } }
            private static Java.Lang.String _NAMEContent = default;
            private static bool _NAMEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/SimPhonebookContract.SimRecords.html#PHONE_NUMBER"/>
            /// </summary>
            public static Java.Lang.String PHONE_NUMBER { get { if (!_PHONE_NUMBERReady) { _PHONE_NUMBERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PHONE_NUMBER"); _PHONE_NUMBERReady = true; } return _PHONE_NUMBERContent; } }
            private static Java.Lang.String _PHONE_NUMBERContent = default;
            private static bool _PHONE_NUMBERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/SimPhonebookContract.SimRecords.html#RECORD_NUMBER"/>
            /// </summary>
            public static Java.Lang.String RECORD_NUMBER { get { if (!_RECORD_NUMBERReady) { _RECORD_NUMBERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RECORD_NUMBER"); _RECORD_NUMBERReady = true; } return _RECORD_NUMBERContent; } }
            private static Java.Lang.String _RECORD_NUMBERContent = default;
            private static bool _RECORD_NUMBERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/SimPhonebookContract.SimRecords.html#SUBSCRIPTION_ID"/>
            /// </summary>
            public static Java.Lang.String SUBSCRIPTION_ID { get { if (!_SUBSCRIPTION_IDReady) { _SUBSCRIPTION_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SUBSCRIPTION_ID"); _SUBSCRIPTION_IDReady = true; } return _SUBSCRIPTION_IDContent; } }
            private static Java.Lang.String _SUBSCRIPTION_IDContent = default;
            private static bool _SUBSCRIPTION_IDReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/SimPhonebookContract.SimRecords.html#getContentUri(int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.Uri"/></returns>
            public static Android.Net.Uri GetContentUri(int arg0, int arg1)
            {
                return SExecute<Android.Net.Uri>(LocalBridgeClazz, "getContentUri", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/SimPhonebookContract.SimRecords.html#getItemUri(int,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.Uri"/></returns>
            public static Android.Net.Uri GetItemUri(int arg0, int arg1, int arg2)
            {
                return SExecute<Android.Net.Uri>(LocalBridgeClazz, "getItemUri", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/SimPhonebookContract.SimRecords.html#getEncodedNameLength(android.content.ContentResolver,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="int"/></returns>
            public static int GetEncodedNameLength(Android.Content.ContentResolver arg0, Java.Lang.String arg1)
            {
                return SExecute<int>(LocalBridgeClazz, "getEncodedNameLength", arg0, arg1);
            }
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.5.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Provider
{
    #region DocumentsContract
    public partial class DocumentsContract
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#ACTION_DOCUMENT_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_DOCUMENT_SETTINGS { get { if (!_ACTION_DOCUMENT_SETTINGSReady) { _ACTION_DOCUMENT_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_DOCUMENT_SETTINGS"); _ACTION_DOCUMENT_SETTINGSReady = true; } return _ACTION_DOCUMENT_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_DOCUMENT_SETTINGSContent = default;
        private static bool _ACTION_DOCUMENT_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#EXTRA_ERROR"/>
        /// </summary>
        public static Java.Lang.String EXTRA_ERROR { get { if (!_EXTRA_ERRORReady) { _EXTRA_ERRORContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ERROR"); _EXTRA_ERRORReady = true; } return _EXTRA_ERRORContent; } }
        private static Java.Lang.String _EXTRA_ERRORContent = default;
        private static bool _EXTRA_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#EXTRA_EXCLUDE_SELF"/>
        /// </summary>
        public static Java.Lang.String EXTRA_EXCLUDE_SELF { get { if (!_EXTRA_EXCLUDE_SELFReady) { _EXTRA_EXCLUDE_SELFContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_EXCLUDE_SELF"); _EXTRA_EXCLUDE_SELFReady = true; } return _EXTRA_EXCLUDE_SELFContent; } }
        private static Java.Lang.String _EXTRA_EXCLUDE_SELFContent = default;
        private static bool _EXTRA_EXCLUDE_SELFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#EXTRA_INFO"/>
        /// </summary>
        public static Java.Lang.String EXTRA_INFO { get { if (!_EXTRA_INFOReady) { _EXTRA_INFOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_INFO"); _EXTRA_INFOReady = true; } return _EXTRA_INFOContent; } }
        private static Java.Lang.String _EXTRA_INFOContent = default;
        private static bool _EXTRA_INFOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#EXTRA_INITIAL_URI"/>
        /// </summary>
        public static Java.Lang.String EXTRA_INITIAL_URI { get { if (!_EXTRA_INITIAL_URIReady) { _EXTRA_INITIAL_URIContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_INITIAL_URI"); _EXTRA_INITIAL_URIReady = true; } return _EXTRA_INITIAL_URIContent; } }
        private static Java.Lang.String _EXTRA_INITIAL_URIContent = default;
        private static bool _EXTRA_INITIAL_URIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#EXTRA_LOADING"/>
        /// </summary>
        public static Java.Lang.String EXTRA_LOADING { get { if (!_EXTRA_LOADINGReady) { _EXTRA_LOADINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_LOADING"); _EXTRA_LOADINGReady = true; } return _EXTRA_LOADINGContent; } }
        private static Java.Lang.String _EXTRA_LOADINGContent = default;
        private static bool _EXTRA_LOADINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#EXTRA_ORIENTATION"/>
        /// </summary>
        public static Java.Lang.String EXTRA_ORIENTATION { get { if (!_EXTRA_ORIENTATIONReady) { _EXTRA_ORIENTATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ORIENTATION"); _EXTRA_ORIENTATIONReady = true; } return _EXTRA_ORIENTATIONContent; } }
        private static Java.Lang.String _EXTRA_ORIENTATIONContent = default;
        private static bool _EXTRA_ORIENTATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#EXTRA_PROMPT"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROMPT { get { if (!_EXTRA_PROMPTReady) { _EXTRA_PROMPTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROMPT"); _EXTRA_PROMPTReady = true; } return _EXTRA_PROMPTContent; } }
        private static Java.Lang.String _EXTRA_PROMPTContent = default;
        private static bool _EXTRA_PROMPTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#METADATA_EXIF"/>
        /// </summary>
        public static Java.Lang.String METADATA_EXIF { get { if (!_METADATA_EXIFReady) { _METADATA_EXIFContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METADATA_EXIF"); _METADATA_EXIFReady = true; } return _METADATA_EXIFContent; } }
        private static Java.Lang.String _METADATA_EXIFContent = default;
        private static bool _METADATA_EXIFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#METADATA_TREE_COUNT"/>
        /// </summary>
        public static Java.Lang.String METADATA_TREE_COUNT { get { if (!_METADATA_TREE_COUNTReady) { _METADATA_TREE_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METADATA_TREE_COUNT"); _METADATA_TREE_COUNTReady = true; } return _METADATA_TREE_COUNTContent; } }
        private static Java.Lang.String _METADATA_TREE_COUNTContent = default;
        private static bool _METADATA_TREE_COUNTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#METADATA_TREE_SIZE"/>
        /// </summary>
        public static Java.Lang.String METADATA_TREE_SIZE { get { if (!_METADATA_TREE_SIZEReady) { _METADATA_TREE_SIZEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METADATA_TREE_SIZE"); _METADATA_TREE_SIZEReady = true; } return _METADATA_TREE_SIZEContent; } }
        private static Java.Lang.String _METADATA_TREE_SIZEContent = default;
        private static bool _METADATA_TREE_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#METADATA_TYPES"/>
        /// </summary>
        public static Java.Lang.String METADATA_TYPES { get { if (!_METADATA_TYPESReady) { _METADATA_TYPESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METADATA_TYPES"); _METADATA_TYPESReady = true; } return _METADATA_TYPESContent; } }
        private static Java.Lang.String _METADATA_TYPESContent = default;
        private static bool _METADATA_TYPESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#PROVIDER_INTERFACE"/>
        /// </summary>
        public static Java.Lang.String PROVIDER_INTERFACE { get { if (!_PROVIDER_INTERFACEReady) { _PROVIDER_INTERFACEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROVIDER_INTERFACE"); _PROVIDER_INTERFACEReady = true; } return _PROVIDER_INTERFACEContent; } }
        private static Java.Lang.String _PROVIDER_INTERFACEContent = default;
        private static bool _PROVIDER_INTERFACEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#QUERY_ARG_DISPLAY_NAME"/>
        /// </summary>
        public static Java.Lang.String QUERY_ARG_DISPLAY_NAME { get { if (!_QUERY_ARG_DISPLAY_NAMEReady) { _QUERY_ARG_DISPLAY_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "QUERY_ARG_DISPLAY_NAME"); _QUERY_ARG_DISPLAY_NAMEReady = true; } return _QUERY_ARG_DISPLAY_NAMEContent; } }
        private static Java.Lang.String _QUERY_ARG_DISPLAY_NAMEContent = default;
        private static bool _QUERY_ARG_DISPLAY_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#QUERY_ARG_EXCLUDE_MEDIA"/>
        /// </summary>
        public static Java.Lang.String QUERY_ARG_EXCLUDE_MEDIA { get { if (!_QUERY_ARG_EXCLUDE_MEDIAReady) { _QUERY_ARG_EXCLUDE_MEDIAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "QUERY_ARG_EXCLUDE_MEDIA"); _QUERY_ARG_EXCLUDE_MEDIAReady = true; } return _QUERY_ARG_EXCLUDE_MEDIAContent; } }
        private static Java.Lang.String _QUERY_ARG_EXCLUDE_MEDIAContent = default;
        private static bool _QUERY_ARG_EXCLUDE_MEDIAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#QUERY_ARG_FILE_SIZE_OVER"/>
        /// </summary>
        public static Java.Lang.String QUERY_ARG_FILE_SIZE_OVER { get { if (!_QUERY_ARG_FILE_SIZE_OVERReady) { _QUERY_ARG_FILE_SIZE_OVERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "QUERY_ARG_FILE_SIZE_OVER"); _QUERY_ARG_FILE_SIZE_OVERReady = true; } return _QUERY_ARG_FILE_SIZE_OVERContent; } }
        private static Java.Lang.String _QUERY_ARG_FILE_SIZE_OVERContent = default;
        private static bool _QUERY_ARG_FILE_SIZE_OVERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#QUERY_ARG_LAST_MODIFIED_AFTER"/>
        /// </summary>
        public static Java.Lang.String QUERY_ARG_LAST_MODIFIED_AFTER { get { if (!_QUERY_ARG_LAST_MODIFIED_AFTERReady) { _QUERY_ARG_LAST_MODIFIED_AFTERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "QUERY_ARG_LAST_MODIFIED_AFTER"); _QUERY_ARG_LAST_MODIFIED_AFTERReady = true; } return _QUERY_ARG_LAST_MODIFIED_AFTERContent; } }
        private static Java.Lang.String _QUERY_ARG_LAST_MODIFIED_AFTERContent = default;
        private static bool _QUERY_ARG_LAST_MODIFIED_AFTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#QUERY_ARG_MIME_TYPES"/>
        /// </summary>
        public static Java.Lang.String QUERY_ARG_MIME_TYPES { get { if (!_QUERY_ARG_MIME_TYPESReady) { _QUERY_ARG_MIME_TYPESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "QUERY_ARG_MIME_TYPES"); _QUERY_ARG_MIME_TYPESReady = true; } return _QUERY_ARG_MIME_TYPESContent; } }
        private static Java.Lang.String _QUERY_ARG_MIME_TYPESContent = default;
        private static bool _QUERY_ARG_MIME_TYPESReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#createWebLinkIntent(android.content.ContentResolver,android.net.Uri,android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
        /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg2"><see cref="Android.Os.Bundle"/></param>
        /// <returns><see cref="Android.Content.IntentSender"/></returns>
        /// <exception cref="Java.Io.FileNotFoundException"/>
        public static Android.Content.IntentSender CreateWebLinkIntent(Android.Content.ContentResolver arg0, Android.Net.Uri arg1, Android.Os.Bundle arg2)
        {
            return SExecute<Android.Content.IntentSender>(LocalBridgeClazz, "createWebLinkIntent", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#getDocumentThumbnail(android.content.ContentResolver,android.net.Uri,android.graphics.Point,android.os.CancellationSignal)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
        /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.Point"/></param>
        /// <param name="arg3"><see cref="Android.Os.CancellationSignal"/></param>
        /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
        /// <exception cref="Java.Io.FileNotFoundException"/>
        public static Android.Graphics.Bitmap GetDocumentThumbnail(Android.Content.ContentResolver arg0, Android.Net.Uri arg1, Android.Graphics.Point arg2, Android.Os.CancellationSignal arg3)
        {
            return SExecute<Android.Graphics.Bitmap>(LocalBridgeClazz, "getDocumentThumbnail", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#buildChildDocumentsUri(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Net.Uri"/></returns>
        public static Android.Net.Uri BuildChildDocumentsUri(Java.Lang.String arg0, Java.Lang.String arg1)
        {
            return SExecute<Android.Net.Uri>(LocalBridgeClazz, "buildChildDocumentsUri", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#buildChildDocumentsUriUsingTree(android.net.Uri,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Net.Uri"/></returns>
        public static Android.Net.Uri BuildChildDocumentsUriUsingTree(Android.Net.Uri arg0, Java.Lang.String arg1)
        {
            return SExecute<Android.Net.Uri>(LocalBridgeClazz, "buildChildDocumentsUriUsingTree", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#buildDocumentUri(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Net.Uri"/></returns>
        public static Android.Net.Uri BuildDocumentUri(Java.Lang.String arg0, Java.Lang.String arg1)
        {
            return SExecute<Android.Net.Uri>(LocalBridgeClazz, "buildDocumentUri", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#buildDocumentUriUsingTree(android.net.Uri,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Net.Uri"/></returns>
        public static Android.Net.Uri BuildDocumentUriUsingTree(Android.Net.Uri arg0, Java.Lang.String arg1)
        {
            return SExecute<Android.Net.Uri>(LocalBridgeClazz, "buildDocumentUriUsingTree", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#buildRecentDocumentsUri(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Net.Uri"/></returns>
        public static Android.Net.Uri BuildRecentDocumentsUri(Java.Lang.String arg0, Java.Lang.String arg1)
        {
            return SExecute<Android.Net.Uri>(LocalBridgeClazz, "buildRecentDocumentsUri", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#buildRootsUri(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Net.Uri"/></returns>
        public static Android.Net.Uri BuildRootsUri(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<Android.Net.Uri>(LocalBridgeClazz, "buildRootsUri", "(Ljava/lang/String;)Landroid/net/Uri;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#buildRootUri(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Net.Uri"/></returns>
        public static Android.Net.Uri BuildRootUri(Java.Lang.String arg0, Java.Lang.String arg1)
        {
            return SExecute<Android.Net.Uri>(LocalBridgeClazz, "buildRootUri", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#buildSearchDocumentsUri(java.lang.String,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Net.Uri"/></returns>
        public static Android.Net.Uri BuildSearchDocumentsUri(Java.Lang.String arg0, Java.Lang.String arg1, Java.Lang.String arg2)
        {
            return SExecute<Android.Net.Uri>(LocalBridgeClazz, "buildSearchDocumentsUri", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#buildTreeDocumentUri(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Net.Uri"/></returns>
        public static Android.Net.Uri BuildTreeDocumentUri(Java.Lang.String arg0, Java.Lang.String arg1)
        {
            return SExecute<Android.Net.Uri>(LocalBridgeClazz, "buildTreeDocumentUri", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#copyDocument(android.content.ContentResolver,android.net.Uri,android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
        /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg2"><see cref="Android.Net.Uri"/></param>
        /// <returns><see cref="Android.Net.Uri"/></returns>
        /// <exception cref="Java.Io.FileNotFoundException"/>
        public static Android.Net.Uri CopyDocument(Android.Content.ContentResolver arg0, Android.Net.Uri arg1, Android.Net.Uri arg2)
        {
            return SExecute<Android.Net.Uri>(LocalBridgeClazz, "copyDocument", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#createDocument(android.content.ContentResolver,android.net.Uri,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
        /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Net.Uri"/></returns>
        /// <exception cref="Java.Io.FileNotFoundException"/>
        public static Android.Net.Uri CreateDocument(Android.Content.ContentResolver arg0, Android.Net.Uri arg1, Java.Lang.String arg2, Java.Lang.String arg3)
        {
            return SExecute<Android.Net.Uri>(LocalBridgeClazz, "createDocument", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#moveDocument(android.content.ContentResolver,android.net.Uri,android.net.Uri,android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
        /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg2"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg3"><see cref="Android.Net.Uri"/></param>
        /// <returns><see cref="Android.Net.Uri"/></returns>
        /// <exception cref="Java.Io.FileNotFoundException"/>
        public static Android.Net.Uri MoveDocument(Android.Content.ContentResolver arg0, Android.Net.Uri arg1, Android.Net.Uri arg2, Android.Net.Uri arg3)
        {
            return SExecute<Android.Net.Uri>(LocalBridgeClazz, "moveDocument", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#renameDocument(android.content.ContentResolver,android.net.Uri,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
        /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Net.Uri"/></returns>
        /// <exception cref="Java.Io.FileNotFoundException"/>
        public static Android.Net.Uri RenameDocument(Android.Content.ContentResolver arg0, Android.Net.Uri arg1, Java.Lang.String arg2)
        {
            return SExecute<Android.Net.Uri>(LocalBridgeClazz, "renameDocument", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#getDocumentMetadata(android.content.ContentResolver,android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
        /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
        /// <returns><see cref="Android.Os.Bundle"/></returns>
        /// <exception cref="Java.Io.FileNotFoundException"/>
        public static Android.Os.Bundle GetDocumentMetadata(Android.Content.ContentResolver arg0, Android.Net.Uri arg1)
        {
            return SExecute<Android.Os.Bundle>(LocalBridgeClazz, "getDocumentMetadata", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#findDocumentPath(android.content.ContentResolver,android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
        /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
        /// <returns><see cref="Android.Provider.DocumentsContract.Path"/></returns>
        /// <exception cref="Java.Io.FileNotFoundException"/>
        public static Android.Provider.DocumentsContract.Path FindDocumentPath(Android.Content.ContentResolver arg0, Android.Net.Uri arg1)
        {
            return SExecute<Android.Provider.DocumentsContract.Path>(LocalBridgeClazz, "findDocumentPath", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#deleteDocument(android.content.ContentResolver,android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
        /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
        /// <returns><see cref="bool"/></returns>
        /// <exception cref="Java.Io.FileNotFoundException"/>
        public static bool DeleteDocument(Android.Content.ContentResolver arg0, Android.Net.Uri arg1)
        {
            return SExecute<bool>(LocalBridgeClazz, "deleteDocument", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#isChildDocument(android.content.ContentResolver,android.net.Uri,android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
        /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg2"><see cref="Android.Net.Uri"/></param>
        /// <returns><see cref="bool"/></returns>
        /// <exception cref="Java.Io.FileNotFoundException"/>
        public static bool IsChildDocument(Android.Content.ContentResolver arg0, Android.Net.Uri arg1, Android.Net.Uri arg2)
        {
            return SExecute<bool>(LocalBridgeClazz, "isChildDocument", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#isDocumentUri(android.content.Context,android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsDocumentUri(Android.Content.Context arg0, Android.Net.Uri arg1)
        {
            return SExecute<bool>(LocalBridgeClazz, "isDocumentUri", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#isRootsUri(android.content.Context,android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsRootsUri(Android.Content.Context arg0, Android.Net.Uri arg1)
        {
            return SExecute<bool>(LocalBridgeClazz, "isRootsUri", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#isRootUri(android.content.Context,android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsRootUri(Android.Content.Context arg0, Android.Net.Uri arg1)
        {
            return SExecute<bool>(LocalBridgeClazz, "isRootUri", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#isTreeUri(android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsTreeUri(Android.Net.Uri arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isTreeUri", "(Landroid/net/Uri;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#removeDocument(android.content.ContentResolver,android.net.Uri,android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
        /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg2"><see cref="Android.Net.Uri"/></param>
        /// <returns><see cref="bool"/></returns>
        /// <exception cref="Java.Io.FileNotFoundException"/>
        public static bool RemoveDocument(Android.Content.ContentResolver arg0, Android.Net.Uri arg1, Android.Net.Uri arg2)
        {
            return SExecute<bool>(LocalBridgeClazz, "removeDocument", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#getDocumentId(android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String GetDocumentId(Android.Net.Uri arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "getDocumentId", "(Landroid/net/Uri;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#getRootId(android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String GetRootId(Android.Net.Uri arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "getRootId", "(Landroid/net/Uri;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#getSearchDocumentsQuery(android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String GetSearchDocumentsQuery(Android.Net.Uri arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "getSearchDocumentsQuery", "(Landroid/net/Uri;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#getTreeDocumentId(android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String GetTreeDocumentId(Android.Net.Uri arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "getTreeDocumentId", "(Landroid/net/Uri;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.html#ejectRoot(android.content.ContentResolver,android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
        /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
        public static void EjectRoot(Android.Content.ContentResolver arg0, Android.Net.Uri arg1)
        {
            SExecute(LocalBridgeClazz, "ejectRoot", arg0, arg1);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes
        #region Document
        public partial class Document
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Document.html#FLAG_DIR_BLOCKS_OPEN_DOCUMENT_TREE"/>
            /// </summary>
            public static int FLAG_DIR_BLOCKS_OPEN_DOCUMENT_TREE { get { if (!_FLAG_DIR_BLOCKS_OPEN_DOCUMENT_TREEReady) { _FLAG_DIR_BLOCKS_OPEN_DOCUMENT_TREEContent = SGetField<int>(LocalBridgeClazz, "FLAG_DIR_BLOCKS_OPEN_DOCUMENT_TREE"); _FLAG_DIR_BLOCKS_OPEN_DOCUMENT_TREEReady = true; } return _FLAG_DIR_BLOCKS_OPEN_DOCUMENT_TREEContent; } }
            private static int _FLAG_DIR_BLOCKS_OPEN_DOCUMENT_TREEContent = default;
            private static bool _FLAG_DIR_BLOCKS_OPEN_DOCUMENT_TREEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Document.html#FLAG_DIR_PREFERS_GRID"/>
            /// </summary>
            public static int FLAG_DIR_PREFERS_GRID { get { if (!_FLAG_DIR_PREFERS_GRIDReady) { _FLAG_DIR_PREFERS_GRIDContent = SGetField<int>(LocalBridgeClazz, "FLAG_DIR_PREFERS_GRID"); _FLAG_DIR_PREFERS_GRIDReady = true; } return _FLAG_DIR_PREFERS_GRIDContent; } }
            private static int _FLAG_DIR_PREFERS_GRIDContent = default;
            private static bool _FLAG_DIR_PREFERS_GRIDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Document.html#FLAG_DIR_PREFERS_LAST_MODIFIED"/>
            /// </summary>
            public static int FLAG_DIR_PREFERS_LAST_MODIFIED { get { if (!_FLAG_DIR_PREFERS_LAST_MODIFIEDReady) { _FLAG_DIR_PREFERS_LAST_MODIFIEDContent = SGetField<int>(LocalBridgeClazz, "FLAG_DIR_PREFERS_LAST_MODIFIED"); _FLAG_DIR_PREFERS_LAST_MODIFIEDReady = true; } return _FLAG_DIR_PREFERS_LAST_MODIFIEDContent; } }
            private static int _FLAG_DIR_PREFERS_LAST_MODIFIEDContent = default;
            private static bool _FLAG_DIR_PREFERS_LAST_MODIFIEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Document.html#FLAG_DIR_SUPPORTS_CREATE"/>
            /// </summary>
            public static int FLAG_DIR_SUPPORTS_CREATE { get { if (!_FLAG_DIR_SUPPORTS_CREATEReady) { _FLAG_DIR_SUPPORTS_CREATEContent = SGetField<int>(LocalBridgeClazz, "FLAG_DIR_SUPPORTS_CREATE"); _FLAG_DIR_SUPPORTS_CREATEReady = true; } return _FLAG_DIR_SUPPORTS_CREATEContent; } }
            private static int _FLAG_DIR_SUPPORTS_CREATEContent = default;
            private static bool _FLAG_DIR_SUPPORTS_CREATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Document.html#FLAG_PARTIAL"/>
            /// </summary>
            public static int FLAG_PARTIAL { get { if (!_FLAG_PARTIALReady) { _FLAG_PARTIALContent = SGetField<int>(LocalBridgeClazz, "FLAG_PARTIAL"); _FLAG_PARTIALReady = true; } return _FLAG_PARTIALContent; } }
            private static int _FLAG_PARTIALContent = default;
            private static bool _FLAG_PARTIALReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Document.html#FLAG_SUPPORTS_COPY"/>
            /// </summary>
            public static int FLAG_SUPPORTS_COPY { get { if (!_FLAG_SUPPORTS_COPYReady) { _FLAG_SUPPORTS_COPYContent = SGetField<int>(LocalBridgeClazz, "FLAG_SUPPORTS_COPY"); _FLAG_SUPPORTS_COPYReady = true; } return _FLAG_SUPPORTS_COPYContent; } }
            private static int _FLAG_SUPPORTS_COPYContent = default;
            private static bool _FLAG_SUPPORTS_COPYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Document.html#FLAG_SUPPORTS_DELETE"/>
            /// </summary>
            public static int FLAG_SUPPORTS_DELETE { get { if (!_FLAG_SUPPORTS_DELETEReady) { _FLAG_SUPPORTS_DELETEContent = SGetField<int>(LocalBridgeClazz, "FLAG_SUPPORTS_DELETE"); _FLAG_SUPPORTS_DELETEReady = true; } return _FLAG_SUPPORTS_DELETEContent; } }
            private static int _FLAG_SUPPORTS_DELETEContent = default;
            private static bool _FLAG_SUPPORTS_DELETEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Document.html#FLAG_SUPPORTS_METADATA"/>
            /// </summary>
            public static int FLAG_SUPPORTS_METADATA { get { if (!_FLAG_SUPPORTS_METADATAReady) { _FLAG_SUPPORTS_METADATAContent = SGetField<int>(LocalBridgeClazz, "FLAG_SUPPORTS_METADATA"); _FLAG_SUPPORTS_METADATAReady = true; } return _FLAG_SUPPORTS_METADATAContent; } }
            private static int _FLAG_SUPPORTS_METADATAContent = default;
            private static bool _FLAG_SUPPORTS_METADATAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Document.html#FLAG_SUPPORTS_MOVE"/>
            /// </summary>
            public static int FLAG_SUPPORTS_MOVE { get { if (!_FLAG_SUPPORTS_MOVEReady) { _FLAG_SUPPORTS_MOVEContent = SGetField<int>(LocalBridgeClazz, "FLAG_SUPPORTS_MOVE"); _FLAG_SUPPORTS_MOVEReady = true; } return _FLAG_SUPPORTS_MOVEContent; } }
            private static int _FLAG_SUPPORTS_MOVEContent = default;
            private static bool _FLAG_SUPPORTS_MOVEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Document.html#FLAG_SUPPORTS_REMOVE"/>
            /// </summary>
            public static int FLAG_SUPPORTS_REMOVE { get { if (!_FLAG_SUPPORTS_REMOVEReady) { _FLAG_SUPPORTS_REMOVEContent = SGetField<int>(LocalBridgeClazz, "FLAG_SUPPORTS_REMOVE"); _FLAG_SUPPORTS_REMOVEReady = true; } return _FLAG_SUPPORTS_REMOVEContent; } }
            private static int _FLAG_SUPPORTS_REMOVEContent = default;
            private static bool _FLAG_SUPPORTS_REMOVEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Document.html#FLAG_SUPPORTS_RENAME"/>
            /// </summary>
            public static int FLAG_SUPPORTS_RENAME { get { if (!_FLAG_SUPPORTS_RENAMEReady) { _FLAG_SUPPORTS_RENAMEContent = SGetField<int>(LocalBridgeClazz, "FLAG_SUPPORTS_RENAME"); _FLAG_SUPPORTS_RENAMEReady = true; } return _FLAG_SUPPORTS_RENAMEContent; } }
            private static int _FLAG_SUPPORTS_RENAMEContent = default;
            private static bool _FLAG_SUPPORTS_RENAMEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Document.html#FLAG_SUPPORTS_SETTINGS"/>
            /// </summary>
            public static int FLAG_SUPPORTS_SETTINGS { get { if (!_FLAG_SUPPORTS_SETTINGSReady) { _FLAG_SUPPORTS_SETTINGSContent = SGetField<int>(LocalBridgeClazz, "FLAG_SUPPORTS_SETTINGS"); _FLAG_SUPPORTS_SETTINGSReady = true; } return _FLAG_SUPPORTS_SETTINGSContent; } }
            private static int _FLAG_SUPPORTS_SETTINGSContent = default;
            private static bool _FLAG_SUPPORTS_SETTINGSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Document.html#FLAG_SUPPORTS_THUMBNAIL"/>
            /// </summary>
            public static int FLAG_SUPPORTS_THUMBNAIL { get { if (!_FLAG_SUPPORTS_THUMBNAILReady) { _FLAG_SUPPORTS_THUMBNAILContent = SGetField<int>(LocalBridgeClazz, "FLAG_SUPPORTS_THUMBNAIL"); _FLAG_SUPPORTS_THUMBNAILReady = true; } return _FLAG_SUPPORTS_THUMBNAILContent; } }
            private static int _FLAG_SUPPORTS_THUMBNAILContent = default;
            private static bool _FLAG_SUPPORTS_THUMBNAILReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Document.html#FLAG_SUPPORTS_WRITE"/>
            /// </summary>
            public static int FLAG_SUPPORTS_WRITE { get { if (!_FLAG_SUPPORTS_WRITEReady) { _FLAG_SUPPORTS_WRITEContent = SGetField<int>(LocalBridgeClazz, "FLAG_SUPPORTS_WRITE"); _FLAG_SUPPORTS_WRITEReady = true; } return _FLAG_SUPPORTS_WRITEContent; } }
            private static int _FLAG_SUPPORTS_WRITEContent = default;
            private static bool _FLAG_SUPPORTS_WRITEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Document.html#FLAG_VIRTUAL_DOCUMENT"/>
            /// </summary>
            public static int FLAG_VIRTUAL_DOCUMENT { get { if (!_FLAG_VIRTUAL_DOCUMENTReady) { _FLAG_VIRTUAL_DOCUMENTContent = SGetField<int>(LocalBridgeClazz, "FLAG_VIRTUAL_DOCUMENT"); _FLAG_VIRTUAL_DOCUMENTReady = true; } return _FLAG_VIRTUAL_DOCUMENTContent; } }
            private static int _FLAG_VIRTUAL_DOCUMENTContent = default;
            private static bool _FLAG_VIRTUAL_DOCUMENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Document.html#FLAG_WEB_LINKABLE"/>
            /// </summary>
            public static int FLAG_WEB_LINKABLE { get { if (!_FLAG_WEB_LINKABLEReady) { _FLAG_WEB_LINKABLEContent = SGetField<int>(LocalBridgeClazz, "FLAG_WEB_LINKABLE"); _FLAG_WEB_LINKABLEReady = true; } return _FLAG_WEB_LINKABLEContent; } }
            private static int _FLAG_WEB_LINKABLEContent = default;
            private static bool _FLAG_WEB_LINKABLEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Document.html#COLUMN_DISPLAY_NAME"/>
            /// </summary>
            public static Java.Lang.String COLUMN_DISPLAY_NAME { get { if (!_COLUMN_DISPLAY_NAMEReady) { _COLUMN_DISPLAY_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COLUMN_DISPLAY_NAME"); _COLUMN_DISPLAY_NAMEReady = true; } return _COLUMN_DISPLAY_NAMEContent; } }
            private static Java.Lang.String _COLUMN_DISPLAY_NAMEContent = default;
            private static bool _COLUMN_DISPLAY_NAMEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Document.html#COLUMN_DOCUMENT_ID"/>
            /// </summary>
            public static Java.Lang.String COLUMN_DOCUMENT_ID { get { if (!_COLUMN_DOCUMENT_IDReady) { _COLUMN_DOCUMENT_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COLUMN_DOCUMENT_ID"); _COLUMN_DOCUMENT_IDReady = true; } return _COLUMN_DOCUMENT_IDContent; } }
            private static Java.Lang.String _COLUMN_DOCUMENT_IDContent = default;
            private static bool _COLUMN_DOCUMENT_IDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Document.html#COLUMN_FLAGS"/>
            /// </summary>
            public static Java.Lang.String COLUMN_FLAGS { get { if (!_COLUMN_FLAGSReady) { _COLUMN_FLAGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COLUMN_FLAGS"); _COLUMN_FLAGSReady = true; } return _COLUMN_FLAGSContent; } }
            private static Java.Lang.String _COLUMN_FLAGSContent = default;
            private static bool _COLUMN_FLAGSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Document.html#COLUMN_ICON"/>
            /// </summary>
            public static Java.Lang.String COLUMN_ICON { get { if (!_COLUMN_ICONReady) { _COLUMN_ICONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COLUMN_ICON"); _COLUMN_ICONReady = true; } return _COLUMN_ICONContent; } }
            private static Java.Lang.String _COLUMN_ICONContent = default;
            private static bool _COLUMN_ICONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Document.html#COLUMN_LAST_MODIFIED"/>
            /// </summary>
            public static Java.Lang.String COLUMN_LAST_MODIFIED { get { if (!_COLUMN_LAST_MODIFIEDReady) { _COLUMN_LAST_MODIFIEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COLUMN_LAST_MODIFIED"); _COLUMN_LAST_MODIFIEDReady = true; } return _COLUMN_LAST_MODIFIEDContent; } }
            private static Java.Lang.String _COLUMN_LAST_MODIFIEDContent = default;
            private static bool _COLUMN_LAST_MODIFIEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Document.html#COLUMN_MIME_TYPE"/>
            /// </summary>
            public static Java.Lang.String COLUMN_MIME_TYPE { get { if (!_COLUMN_MIME_TYPEReady) { _COLUMN_MIME_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COLUMN_MIME_TYPE"); _COLUMN_MIME_TYPEReady = true; } return _COLUMN_MIME_TYPEContent; } }
            private static Java.Lang.String _COLUMN_MIME_TYPEContent = default;
            private static bool _COLUMN_MIME_TYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Document.html#COLUMN_SIZE"/>
            /// </summary>
            public static Java.Lang.String COLUMN_SIZE { get { if (!_COLUMN_SIZEReady) { _COLUMN_SIZEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COLUMN_SIZE"); _COLUMN_SIZEReady = true; } return _COLUMN_SIZEContent; } }
            private static Java.Lang.String _COLUMN_SIZEContent = default;
            private static bool _COLUMN_SIZEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Document.html#COLUMN_SUMMARY"/>
            /// </summary>
            public static Java.Lang.String COLUMN_SUMMARY { get { if (!_COLUMN_SUMMARYReady) { _COLUMN_SUMMARYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COLUMN_SUMMARY"); _COLUMN_SUMMARYReady = true; } return _COLUMN_SUMMARYContent; } }
            private static Java.Lang.String _COLUMN_SUMMARYContent = default;
            private static bool _COLUMN_SUMMARYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Document.html#MIME_TYPE_DIR"/>
            /// </summary>
            public static Java.Lang.String MIME_TYPE_DIR { get { if (!_MIME_TYPE_DIRReady) { _MIME_TYPE_DIRContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIME_TYPE_DIR"); _MIME_TYPE_DIRReady = true; } return _MIME_TYPE_DIRContent; } }
            private static Java.Lang.String _MIME_TYPE_DIRContent = default;
            private static bool _MIME_TYPE_DIRReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Path
        public partial class Path
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Path.html#%3Cinit%3E(java.lang.String,java.util.List)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Java.Util.List"/></param>
            public Path(Java.Lang.String arg0, Java.Util.List<Java.Lang.String> arg1)
                : base(arg0, arg1)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Path.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Path.html#describeContents()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int DescribeContents()
            {
                return IExecuteWithSignature<int>("describeContents", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Path.html#getRootId()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetRootId()
            {
                return IExecuteWithSignature<Java.Lang.String>("getRootId", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Path.html#getPath()"/>
            /// </summary>
            /// <returns><see cref="Java.Util.List"/></returns>
            public Java.Util.List<Java.Lang.String> GetPath()
            {
                return IExecuteWithSignature<Java.Util.List<Java.Lang.String>>("getPath", "()Ljava/util/List;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Path.html#writeToParcel(android.os.Parcel,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
            {
                IExecute("writeToParcel", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Root
        public partial class Root
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Root.html#FLAG_EMPTY"/>
            /// </summary>
            public static int FLAG_EMPTY { get { if (!_FLAG_EMPTYReady) { _FLAG_EMPTYContent = SGetField<int>(LocalBridgeClazz, "FLAG_EMPTY"); _FLAG_EMPTYReady = true; } return _FLAG_EMPTYContent; } }
            private static int _FLAG_EMPTYContent = default;
            private static bool _FLAG_EMPTYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Root.html#FLAG_LOCAL_ONLY"/>
            /// </summary>
            public static int FLAG_LOCAL_ONLY { get { if (!_FLAG_LOCAL_ONLYReady) { _FLAG_LOCAL_ONLYContent = SGetField<int>(LocalBridgeClazz, "FLAG_LOCAL_ONLY"); _FLAG_LOCAL_ONLYReady = true; } return _FLAG_LOCAL_ONLYContent; } }
            private static int _FLAG_LOCAL_ONLYContent = default;
            private static bool _FLAG_LOCAL_ONLYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Root.html#FLAG_SUPPORTS_CREATE"/>
            /// </summary>
            public static int FLAG_SUPPORTS_CREATE { get { if (!_FLAG_SUPPORTS_CREATEReady) { _FLAG_SUPPORTS_CREATEContent = SGetField<int>(LocalBridgeClazz, "FLAG_SUPPORTS_CREATE"); _FLAG_SUPPORTS_CREATEReady = true; } return _FLAG_SUPPORTS_CREATEContent; } }
            private static int _FLAG_SUPPORTS_CREATEContent = default;
            private static bool _FLAG_SUPPORTS_CREATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Root.html#FLAG_SUPPORTS_EJECT"/>
            /// </summary>
            public static int FLAG_SUPPORTS_EJECT { get { if (!_FLAG_SUPPORTS_EJECTReady) { _FLAG_SUPPORTS_EJECTContent = SGetField<int>(LocalBridgeClazz, "FLAG_SUPPORTS_EJECT"); _FLAG_SUPPORTS_EJECTReady = true; } return _FLAG_SUPPORTS_EJECTContent; } }
            private static int _FLAG_SUPPORTS_EJECTContent = default;
            private static bool _FLAG_SUPPORTS_EJECTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Root.html#FLAG_SUPPORTS_IS_CHILD"/>
            /// </summary>
            public static int FLAG_SUPPORTS_IS_CHILD { get { if (!_FLAG_SUPPORTS_IS_CHILDReady) { _FLAG_SUPPORTS_IS_CHILDContent = SGetField<int>(LocalBridgeClazz, "FLAG_SUPPORTS_IS_CHILD"); _FLAG_SUPPORTS_IS_CHILDReady = true; } return _FLAG_SUPPORTS_IS_CHILDContent; } }
            private static int _FLAG_SUPPORTS_IS_CHILDContent = default;
            private static bool _FLAG_SUPPORTS_IS_CHILDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Root.html#FLAG_SUPPORTS_RECENTS"/>
            /// </summary>
            public static int FLAG_SUPPORTS_RECENTS { get { if (!_FLAG_SUPPORTS_RECENTSReady) { _FLAG_SUPPORTS_RECENTSContent = SGetField<int>(LocalBridgeClazz, "FLAG_SUPPORTS_RECENTS"); _FLAG_SUPPORTS_RECENTSReady = true; } return _FLAG_SUPPORTS_RECENTSContent; } }
            private static int _FLAG_SUPPORTS_RECENTSContent = default;
            private static bool _FLAG_SUPPORTS_RECENTSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Root.html#FLAG_SUPPORTS_SEARCH"/>
            /// </summary>
            public static int FLAG_SUPPORTS_SEARCH { get { if (!_FLAG_SUPPORTS_SEARCHReady) { _FLAG_SUPPORTS_SEARCHContent = SGetField<int>(LocalBridgeClazz, "FLAG_SUPPORTS_SEARCH"); _FLAG_SUPPORTS_SEARCHReady = true; } return _FLAG_SUPPORTS_SEARCHContent; } }
            private static int _FLAG_SUPPORTS_SEARCHContent = default;
            private static bool _FLAG_SUPPORTS_SEARCHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Root.html#COLUMN_AVAILABLE_BYTES"/>
            /// </summary>
            public static Java.Lang.String COLUMN_AVAILABLE_BYTES { get { if (!_COLUMN_AVAILABLE_BYTESReady) { _COLUMN_AVAILABLE_BYTESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COLUMN_AVAILABLE_BYTES"); _COLUMN_AVAILABLE_BYTESReady = true; } return _COLUMN_AVAILABLE_BYTESContent; } }
            private static Java.Lang.String _COLUMN_AVAILABLE_BYTESContent = default;
            private static bool _COLUMN_AVAILABLE_BYTESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Root.html#COLUMN_CAPACITY_BYTES"/>
            /// </summary>
            public static Java.Lang.String COLUMN_CAPACITY_BYTES { get { if (!_COLUMN_CAPACITY_BYTESReady) { _COLUMN_CAPACITY_BYTESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COLUMN_CAPACITY_BYTES"); _COLUMN_CAPACITY_BYTESReady = true; } return _COLUMN_CAPACITY_BYTESContent; } }
            private static Java.Lang.String _COLUMN_CAPACITY_BYTESContent = default;
            private static bool _COLUMN_CAPACITY_BYTESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Root.html#COLUMN_DOCUMENT_ID"/>
            /// </summary>
            public static Java.Lang.String COLUMN_DOCUMENT_ID { get { if (!_COLUMN_DOCUMENT_IDReady) { _COLUMN_DOCUMENT_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COLUMN_DOCUMENT_ID"); _COLUMN_DOCUMENT_IDReady = true; } return _COLUMN_DOCUMENT_IDContent; } }
            private static Java.Lang.String _COLUMN_DOCUMENT_IDContent = default;
            private static bool _COLUMN_DOCUMENT_IDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Root.html#COLUMN_FLAGS"/>
            /// </summary>
            public static Java.Lang.String COLUMN_FLAGS { get { if (!_COLUMN_FLAGSReady) { _COLUMN_FLAGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COLUMN_FLAGS"); _COLUMN_FLAGSReady = true; } return _COLUMN_FLAGSContent; } }
            private static Java.Lang.String _COLUMN_FLAGSContent = default;
            private static bool _COLUMN_FLAGSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Root.html#COLUMN_ICON"/>
            /// </summary>
            public static Java.Lang.String COLUMN_ICON { get { if (!_COLUMN_ICONReady) { _COLUMN_ICONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COLUMN_ICON"); _COLUMN_ICONReady = true; } return _COLUMN_ICONContent; } }
            private static Java.Lang.String _COLUMN_ICONContent = default;
            private static bool _COLUMN_ICONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Root.html#COLUMN_MIME_TYPES"/>
            /// </summary>
            public static Java.Lang.String COLUMN_MIME_TYPES { get { if (!_COLUMN_MIME_TYPESReady) { _COLUMN_MIME_TYPESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COLUMN_MIME_TYPES"); _COLUMN_MIME_TYPESReady = true; } return _COLUMN_MIME_TYPESContent; } }
            private static Java.Lang.String _COLUMN_MIME_TYPESContent = default;
            private static bool _COLUMN_MIME_TYPESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Root.html#COLUMN_QUERY_ARGS"/>
            /// </summary>
            public static Java.Lang.String COLUMN_QUERY_ARGS { get { if (!_COLUMN_QUERY_ARGSReady) { _COLUMN_QUERY_ARGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COLUMN_QUERY_ARGS"); _COLUMN_QUERY_ARGSReady = true; } return _COLUMN_QUERY_ARGSContent; } }
            private static Java.Lang.String _COLUMN_QUERY_ARGSContent = default;
            private static bool _COLUMN_QUERY_ARGSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Root.html#COLUMN_ROOT_ID"/>
            /// </summary>
            public static Java.Lang.String COLUMN_ROOT_ID { get { if (!_COLUMN_ROOT_IDReady) { _COLUMN_ROOT_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COLUMN_ROOT_ID"); _COLUMN_ROOT_IDReady = true; } return _COLUMN_ROOT_IDContent; } }
            private static Java.Lang.String _COLUMN_ROOT_IDContent = default;
            private static bool _COLUMN_ROOT_IDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Root.html#COLUMN_SUMMARY"/>
            /// </summary>
            public static Java.Lang.String COLUMN_SUMMARY { get { if (!_COLUMN_SUMMARYReady) { _COLUMN_SUMMARYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COLUMN_SUMMARY"); _COLUMN_SUMMARYReady = true; } return _COLUMN_SUMMARYContent; } }
            private static Java.Lang.String _COLUMN_SUMMARYContent = default;
            private static bool _COLUMN_SUMMARYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Root.html#COLUMN_TITLE"/>
            /// </summary>
            public static Java.Lang.String COLUMN_TITLE { get { if (!_COLUMN_TITLEReady) { _COLUMN_TITLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COLUMN_TITLE"); _COLUMN_TITLEReady = true; } return _COLUMN_TITLEContent; } }
            private static Java.Lang.String _COLUMN_TITLEContent = default;
            private static bool _COLUMN_TITLEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/DocumentsContract.Root.html#MIME_TYPE_ITEM"/>
            /// </summary>
            public static Java.Lang.String MIME_TYPE_ITEM { get { if (!_MIME_TYPE_ITEMReady) { _MIME_TYPE_ITEMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIME_TYPE_ITEM"); _MIME_TYPE_ITEMReady = true; } return _MIME_TYPE_ITEMContent; } }
            private static Java.Lang.String _MIME_TYPE_ITEMContent = default;
            private static bool _MIME_TYPE_ITEMReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Provider
{
    #region CalendarContract declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.html"/>
    /// </summary>
    public partial class CalendarContract : MASES.JCOBridge.C2JBridge.JVMBridgeBase<CalendarContract>
    {
        const string _bridgeClassName = "android.provider.CalendarContract";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public CalendarContract() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public CalendarContract(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region Attendees declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.Attendees.html"/>
        /// </summary>
        public partial class Attendees : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Attendees>
        {
            const string _bridgeClassName = "android.provider.CalendarContract$Attendees";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Attendees() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Attendees(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region CalendarAlerts declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.CalendarAlerts.html"/>
        /// </summary>
        public partial class CalendarAlerts : MASES.JCOBridge.C2JBridge.JVMBridgeBase<CalendarAlerts>
        {
            const string _bridgeClassName = "android.provider.CalendarContract$CalendarAlerts";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public CalendarAlerts() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public CalendarAlerts(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region CalendarCache declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.CalendarCache.html"/>
        /// </summary>
        public partial class CalendarCache : MASES.JCOBridge.C2JBridge.JVMBridgeBase<CalendarCache>
        {
            const string _bridgeClassName = "android.provider.CalendarContract$CalendarCache";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public CalendarCache() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public CalendarCache(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region CalendarEntity declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.CalendarEntity.html"/>
        /// </summary>
        public partial class CalendarEntity : MASES.JCOBridge.C2JBridge.JVMBridgeBase<CalendarEntity>
        {
            const string _bridgeClassName = "android.provider.CalendarContract$CalendarEntity";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public CalendarEntity() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public CalendarEntity(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region Calendars declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.Calendars.html"/>
        /// </summary>
        public partial class Calendars : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Calendars>
        {
            const string _bridgeClassName = "android.provider.CalendarContract$Calendars";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Calendars() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Calendars(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region Colors declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.Colors.html"/>
        /// </summary>
        public partial class Colors : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Colors>
        {
            const string _bridgeClassName = "android.provider.CalendarContract$Colors";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Colors() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Colors(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region EventDays declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.EventDays.html"/>
        /// </summary>
        public partial class EventDays : MASES.JCOBridge.C2JBridge.JVMBridgeBase<EventDays>
        {
            const string _bridgeClassName = "android.provider.CalendarContract$EventDays";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public EventDays() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public EventDays(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region Events declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.Events.html"/>
        /// </summary>
        public partial class Events : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Events>
        {
            const string _bridgeClassName = "android.provider.CalendarContract$Events";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Events() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Events(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region EventsEntity declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.EventsEntity.html"/>
        /// </summary>
        public partial class EventsEntity : MASES.JCOBridge.C2JBridge.JVMBridgeBase<EventsEntity>
        {
            const string _bridgeClassName = "android.provider.CalendarContract$EventsEntity";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public EventsEntity() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public EventsEntity(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region ExtendedProperties declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.ExtendedProperties.html"/>
        /// </summary>
        public partial class ExtendedProperties : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ExtendedProperties>
        {
            const string _bridgeClassName = "android.provider.CalendarContract$ExtendedProperties";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public ExtendedProperties() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public ExtendedProperties(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region Instances declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.Instances.html"/>
        /// </summary>
        public partial class Instances : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Instances>
        {
            const string _bridgeClassName = "android.provider.CalendarContract$Instances";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Instances() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Instances(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region Reminders declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.Reminders.html"/>
        /// </summary>
        public partial class Reminders : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Reminders>
        {
            const string _bridgeClassName = "android.provider.CalendarContract$Reminders";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Reminders() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Reminders(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region SyncState declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.SyncState.html"/>
        /// </summary>
        public partial class SyncState : Android.Provider.SyncStateContract.Columns
        {
            const string _bridgeClassName = "android.provider.CalendarContract$SyncState";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public SyncState() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public SyncState(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region CalendarContract implementation
    public partial class CalendarContract
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.html#CONTENT_URI"/>
        /// </summary>
        public static Android.Net.Uri CONTENT_URI { get { if (!_CONTENT_URIReady) { _CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_URI"); _CONTENT_URIReady = true; } return _CONTENT_URIContent; } }
        private static Android.Net.Uri _CONTENT_URIContent = default;
        private static bool _CONTENT_URIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.html#ACCOUNT_TYPE_LOCAL"/>
        /// </summary>
        public static Java.Lang.String ACCOUNT_TYPE_LOCAL { get { if (!_ACCOUNT_TYPE_LOCALReady) { _ACCOUNT_TYPE_LOCALContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACCOUNT_TYPE_LOCAL"); _ACCOUNT_TYPE_LOCALReady = true; } return _ACCOUNT_TYPE_LOCALContent; } }
        private static Java.Lang.String _ACCOUNT_TYPE_LOCALContent = default;
        private static bool _ACCOUNT_TYPE_LOCALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.html#ACTION_EVENT_REMINDER"/>
        /// </summary>
        public static Java.Lang.String ACTION_EVENT_REMINDER { get { if (!_ACTION_EVENT_REMINDERReady) { _ACTION_EVENT_REMINDERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_EVENT_REMINDER"); _ACTION_EVENT_REMINDERReady = true; } return _ACTION_EVENT_REMINDERContent; } }
        private static Java.Lang.String _ACTION_EVENT_REMINDERContent = default;
        private static bool _ACTION_EVENT_REMINDERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.html#ACTION_HANDLE_CUSTOM_EVENT"/>
        /// </summary>
        public static Java.Lang.String ACTION_HANDLE_CUSTOM_EVENT { get { if (!_ACTION_HANDLE_CUSTOM_EVENTReady) { _ACTION_HANDLE_CUSTOM_EVENTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_HANDLE_CUSTOM_EVENT"); _ACTION_HANDLE_CUSTOM_EVENTReady = true; } return _ACTION_HANDLE_CUSTOM_EVENTContent; } }
        private static Java.Lang.String _ACTION_HANDLE_CUSTOM_EVENTContent = default;
        private static bool _ACTION_HANDLE_CUSTOM_EVENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.html#ACTION_VIEW_MANAGED_PROFILE_CALENDAR_EVENT"/>
        /// </summary>
        public static Java.Lang.String ACTION_VIEW_MANAGED_PROFILE_CALENDAR_EVENT { get { if (!_ACTION_VIEW_MANAGED_PROFILE_CALENDAR_EVENTReady) { _ACTION_VIEW_MANAGED_PROFILE_CALENDAR_EVENTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_VIEW_MANAGED_PROFILE_CALENDAR_EVENT"); _ACTION_VIEW_MANAGED_PROFILE_CALENDAR_EVENTReady = true; } return _ACTION_VIEW_MANAGED_PROFILE_CALENDAR_EVENTContent; } }
        private static Java.Lang.String _ACTION_VIEW_MANAGED_PROFILE_CALENDAR_EVENTContent = default;
        private static bool _ACTION_VIEW_MANAGED_PROFILE_CALENDAR_EVENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.html#AUTHORITY"/>
        /// </summary>
        public static Java.Lang.String AUTHORITY { get { if (!_AUTHORITYReady) { _AUTHORITYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "AUTHORITY"); _AUTHORITYReady = true; } return _AUTHORITYContent; } }
        private static Java.Lang.String _AUTHORITYContent = default;
        private static bool _AUTHORITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.html#CALLER_IS_SYNCADAPTER"/>
        /// </summary>
        public static Java.Lang.String CALLER_IS_SYNCADAPTER { get { if (!_CALLER_IS_SYNCADAPTERReady) { _CALLER_IS_SYNCADAPTERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CALLER_IS_SYNCADAPTER"); _CALLER_IS_SYNCADAPTERReady = true; } return _CALLER_IS_SYNCADAPTERContent; } }
        private static Java.Lang.String _CALLER_IS_SYNCADAPTERContent = default;
        private static bool _CALLER_IS_SYNCADAPTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.html#EXTRA_CUSTOM_APP_URI"/>
        /// </summary>
        public static Java.Lang.String EXTRA_CUSTOM_APP_URI { get { if (!_EXTRA_CUSTOM_APP_URIReady) { _EXTRA_CUSTOM_APP_URIContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_CUSTOM_APP_URI"); _EXTRA_CUSTOM_APP_URIReady = true; } return _EXTRA_CUSTOM_APP_URIContent; } }
        private static Java.Lang.String _EXTRA_CUSTOM_APP_URIContent = default;
        private static bool _EXTRA_CUSTOM_APP_URIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.html#EXTRA_EVENT_ALL_DAY"/>
        /// </summary>
        public static Java.Lang.String EXTRA_EVENT_ALL_DAY { get { if (!_EXTRA_EVENT_ALL_DAYReady) { _EXTRA_EVENT_ALL_DAYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_EVENT_ALL_DAY"); _EXTRA_EVENT_ALL_DAYReady = true; } return _EXTRA_EVENT_ALL_DAYContent; } }
        private static Java.Lang.String _EXTRA_EVENT_ALL_DAYContent = default;
        private static bool _EXTRA_EVENT_ALL_DAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.html#EXTRA_EVENT_BEGIN_TIME"/>
        /// </summary>
        public static Java.Lang.String EXTRA_EVENT_BEGIN_TIME { get { if (!_EXTRA_EVENT_BEGIN_TIMEReady) { _EXTRA_EVENT_BEGIN_TIMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_EVENT_BEGIN_TIME"); _EXTRA_EVENT_BEGIN_TIMEReady = true; } return _EXTRA_EVENT_BEGIN_TIMEContent; } }
        private static Java.Lang.String _EXTRA_EVENT_BEGIN_TIMEContent = default;
        private static bool _EXTRA_EVENT_BEGIN_TIMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.html#EXTRA_EVENT_END_TIME"/>
        /// </summary>
        public static Java.Lang.String EXTRA_EVENT_END_TIME { get { if (!_EXTRA_EVENT_END_TIMEReady) { _EXTRA_EVENT_END_TIMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_EVENT_END_TIME"); _EXTRA_EVENT_END_TIMEReady = true; } return _EXTRA_EVENT_END_TIMEContent; } }
        private static Java.Lang.String _EXTRA_EVENT_END_TIMEContent = default;
        private static bool _EXTRA_EVENT_END_TIMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.html#EXTRA_EVENT_ID"/>
        /// </summary>
        public static Java.Lang.String EXTRA_EVENT_ID { get { if (!_EXTRA_EVENT_IDReady) { _EXTRA_EVENT_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_EVENT_ID"); _EXTRA_EVENT_IDReady = true; } return _EXTRA_EVENT_IDContent; } }
        private static Java.Lang.String _EXTRA_EVENT_IDContent = default;
        private static bool _EXTRA_EVENT_IDReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.html#startViewCalendarEventInManagedProfile(android.content.Context,long,long,long,boolean,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <param name="arg3"><see cref="long"/></param>
        /// <param name="arg4"><see cref="bool"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool StartViewCalendarEventInManagedProfile(Android.Content.Context arg0, long arg1, long arg2, long arg3, bool arg4, int arg5)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "startViewCalendarEventInManagedProfile", "(Landroid/content/Context;JJJZI)Z", arg0, arg1, arg2, arg3, arg4, arg5);
        }
    
        #endregion
    
        #region Instance methods
    
        #endregion
    
        #region Nested classes
        #region Attendees implementation
        public partial class Attendees : Android.Provider.IBaseColumns
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Android.Provider.CalendarContract.Attendees"/> to <see cref="Android.Provider.BaseColumns"/>
            /// </summary>
            public static implicit operator Android.Provider.BaseColumns(Android.Provider.CalendarContract.Attendees t) => t.Cast<Android.Provider.BaseColumns>();
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.Attendees.html#CONTENT_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_URI { get { if (!_CONTENT_URIReady) { _CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_URI"); _CONTENT_URIReady = true; } return _CONTENT_URIContent; } }
            private static Android.Net.Uri _CONTENT_URIContent = default;
            private static bool _CONTENT_URIReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.Attendees.html#query(android.content.ContentResolver,long,java.lang.String[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <param name="arg2"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Database.Cursor"/></returns>
            public static Android.Database.Cursor Query(Android.Content.ContentResolver arg0, long arg1, Java.Lang.String[] arg2)
            {
                return SExecuteWithSignature<Android.Database.Cursor>(LocalBridgeClazz, "query", "(Landroid/content/ContentResolver;J[Ljava/lang/String;)Landroid/database/Cursor;", arg0, arg1, arg2);
            }
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region CalendarAlerts implementation
        public partial class CalendarAlerts : Android.Provider.IBaseColumns
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Android.Provider.CalendarContract.CalendarAlerts"/> to <see cref="Android.Provider.BaseColumns"/>
            /// </summary>
            public static implicit operator Android.Provider.BaseColumns(Android.Provider.CalendarContract.CalendarAlerts t) => t.Cast<Android.Provider.BaseColumns>();
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.CalendarAlerts.html#CONTENT_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_URI { get { if (!_CONTENT_URIReady) { _CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_URI"); _CONTENT_URIReady = true; } return _CONTENT_URIContent; } }
            private static Android.Net.Uri _CONTENT_URIContent = default;
            private static bool _CONTENT_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.CalendarAlerts.html#CONTENT_URI_BY_INSTANCE"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_URI_BY_INSTANCE { get { if (!_CONTENT_URI_BY_INSTANCEReady) { _CONTENT_URI_BY_INSTANCEContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_URI_BY_INSTANCE"); _CONTENT_URI_BY_INSTANCEReady = true; } return _CONTENT_URI_BY_INSTANCEContent; } }
            private static Android.Net.Uri _CONTENT_URI_BY_INSTANCEContent = default;
            private static bool _CONTENT_URI_BY_INSTANCEReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region CalendarCache implementation
        public partial class CalendarCache
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.CalendarCache.html#URI"/>
            /// </summary>
            public static Android.Net.Uri URI { get { if (!_URIReady) { _URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "URI"); _URIReady = true; } return _URIContent; } }
            private static Android.Net.Uri _URIContent = default;
            private static bool _URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.CalendarCache.html#KEY_TIMEZONE_INSTANCES"/>
            /// </summary>
            public static Java.Lang.String KEY_TIMEZONE_INSTANCES { get { if (!_KEY_TIMEZONE_INSTANCESReady) { _KEY_TIMEZONE_INSTANCESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_TIMEZONE_INSTANCES"); _KEY_TIMEZONE_INSTANCESReady = true; } return _KEY_TIMEZONE_INSTANCESContent; } }
            private static Java.Lang.String _KEY_TIMEZONE_INSTANCESContent = default;
            private static bool _KEY_TIMEZONE_INSTANCESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.CalendarCache.html#KEY_TIMEZONE_INSTANCES_PREVIOUS"/>
            /// </summary>
            public static Java.Lang.String KEY_TIMEZONE_INSTANCES_PREVIOUS { get { if (!_KEY_TIMEZONE_INSTANCES_PREVIOUSReady) { _KEY_TIMEZONE_INSTANCES_PREVIOUSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_TIMEZONE_INSTANCES_PREVIOUS"); _KEY_TIMEZONE_INSTANCES_PREVIOUSReady = true; } return _KEY_TIMEZONE_INSTANCES_PREVIOUSContent; } }
            private static Java.Lang.String _KEY_TIMEZONE_INSTANCES_PREVIOUSContent = default;
            private static bool _KEY_TIMEZONE_INSTANCES_PREVIOUSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.CalendarCache.html#KEY_TIMEZONE_TYPE"/>
            /// </summary>
            public static Java.Lang.String KEY_TIMEZONE_TYPE { get { if (!_KEY_TIMEZONE_TYPEReady) { _KEY_TIMEZONE_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_TIMEZONE_TYPE"); _KEY_TIMEZONE_TYPEReady = true; } return _KEY_TIMEZONE_TYPEContent; } }
            private static Java.Lang.String _KEY_TIMEZONE_TYPEContent = default;
            private static bool _KEY_TIMEZONE_TYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.CalendarCache.html#TIMEZONE_TYPE_AUTO"/>
            /// </summary>
            public static Java.Lang.String TIMEZONE_TYPE_AUTO { get { if (!_TIMEZONE_TYPE_AUTOReady) { _TIMEZONE_TYPE_AUTOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TIMEZONE_TYPE_AUTO"); _TIMEZONE_TYPE_AUTOReady = true; } return _TIMEZONE_TYPE_AUTOContent; } }
            private static Java.Lang.String _TIMEZONE_TYPE_AUTOContent = default;
            private static bool _TIMEZONE_TYPE_AUTOReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.CalendarCache.html#TIMEZONE_TYPE_HOME"/>
            /// </summary>
            public static Java.Lang.String TIMEZONE_TYPE_HOME { get { if (!_TIMEZONE_TYPE_HOMEReady) { _TIMEZONE_TYPE_HOMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TIMEZONE_TYPE_HOME"); _TIMEZONE_TYPE_HOMEReady = true; } return _TIMEZONE_TYPE_HOMEContent; } }
            private static Java.Lang.String _TIMEZONE_TYPE_HOMEContent = default;
            private static bool _TIMEZONE_TYPE_HOMEReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region CalendarEntity implementation
        public partial class CalendarEntity : Android.Provider.IBaseColumns
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Android.Provider.CalendarContract.CalendarEntity"/> to <see cref="Android.Provider.BaseColumns"/>
            /// </summary>
            public static implicit operator Android.Provider.BaseColumns(Android.Provider.CalendarContract.CalendarEntity t) => t.Cast<Android.Provider.BaseColumns>();
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.CalendarEntity.html#CONTENT_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_URI { get { if (!_CONTENT_URIReady) { _CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_URI"); _CONTENT_URIReady = true; } return _CONTENT_URIContent; } }
            private static Android.Net.Uri _CONTENT_URIContent = default;
            private static bool _CONTENT_URIReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.CalendarEntity.html#newEntityIterator(android.database.Cursor)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Database.Cursor"/></param>
            /// <returns><see cref="Android.Content.EntityIterator"/></returns>
            public static Android.Content.EntityIterator NewEntityIterator(Android.Database.Cursor arg0)
            {
                return SExecuteWithSignature<Android.Content.EntityIterator>(LocalBridgeClazz, "newEntityIterator", "(Landroid/database/Cursor;)Landroid/content/EntityIterator;", arg0);
            }
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region Calendars implementation
        public partial class Calendars : Android.Provider.IBaseColumns
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Android.Provider.CalendarContract.Calendars"/> to <see cref="Android.Provider.BaseColumns"/>
            /// </summary>
            public static implicit operator Android.Provider.BaseColumns(Android.Provider.CalendarContract.Calendars t) => t.Cast<Android.Provider.BaseColumns>();
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.Calendars.html#CONTENT_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_URI { get { if (!_CONTENT_URIReady) { _CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_URI"); _CONTENT_URIReady = true; } return _CONTENT_URIContent; } }
            private static Android.Net.Uri _CONTENT_URIContent = default;
            private static bool _CONTENT_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.Calendars.html#ENTERPRISE_CONTENT_URI"/>
            /// </summary>
            public static Android.Net.Uri ENTERPRISE_CONTENT_URI { get { if (!_ENTERPRISE_CONTENT_URIReady) { _ENTERPRISE_CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "ENTERPRISE_CONTENT_URI"); _ENTERPRISE_CONTENT_URIReady = true; } return _ENTERPRISE_CONTENT_URIContent; } }
            private static Android.Net.Uri _ENTERPRISE_CONTENT_URIContent = default;
            private static bool _ENTERPRISE_CONTENT_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.Calendars.html#CALENDAR_LOCATION"/>
            /// </summary>
            public static Java.Lang.String CALENDAR_LOCATION { get { if (!_CALENDAR_LOCATIONReady) { _CALENDAR_LOCATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CALENDAR_LOCATION"); _CALENDAR_LOCATIONReady = true; } return _CALENDAR_LOCATIONContent; } }
            private static Java.Lang.String _CALENDAR_LOCATIONContent = default;
            private static bool _CALENDAR_LOCATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.Calendars.html#DEFAULT_SORT_ORDER"/>
            /// </summary>
            public static Java.Lang.String DEFAULT_SORT_ORDER { get { if (!_DEFAULT_SORT_ORDERReady) { _DEFAULT_SORT_ORDERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFAULT_SORT_ORDER"); _DEFAULT_SORT_ORDERReady = true; } return _DEFAULT_SORT_ORDERContent; } }
            private static Java.Lang.String _DEFAULT_SORT_ORDERContent = default;
            private static bool _DEFAULT_SORT_ORDERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.Calendars.html#NAME"/>
            /// </summary>
            public static Java.Lang.String NAME { get { if (!_NAMEReady) { _NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAME"); _NAMEReady = true; } return _NAMEContent; } }
            private static Java.Lang.String _NAMEContent = default;
            private static bool _NAMEReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region Colors implementation
        public partial class Colors
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.Colors.html#CONTENT_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_URI { get { if (!_CONTENT_URIReady) { _CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_URI"); _CONTENT_URIReady = true; } return _CONTENT_URIContent; } }
            private static Android.Net.Uri _CONTENT_URIContent = default;
            private static bool _CONTENT_URIReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region EventDays implementation
        public partial class EventDays
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.EventDays.html#CONTENT_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_URI { get { if (!_CONTENT_URIReady) { _CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_URI"); _CONTENT_URIReady = true; } return _CONTENT_URIContent; } }
            private static Android.Net.Uri _CONTENT_URIContent = default;
            private static bool _CONTENT_URIReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.EventDays.html#query(android.content.ContentResolver,int,int,java.lang.String[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Database.Cursor"/></returns>
            public static Android.Database.Cursor Query(Android.Content.ContentResolver arg0, int arg1, int arg2, Java.Lang.String[] arg3)
            {
                return SExecuteWithSignature<Android.Database.Cursor>(LocalBridgeClazz, "query", "(Landroid/content/ContentResolver;II[Ljava/lang/String;)Landroid/database/Cursor;", arg0, arg1, arg2, arg3);
            }
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region Events implementation
        public partial class Events : Android.Provider.IBaseColumns
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Android.Provider.CalendarContract.Events"/> to <see cref="Android.Provider.BaseColumns"/>
            /// </summary>
            public static implicit operator Android.Provider.BaseColumns(Android.Provider.CalendarContract.Events t) => t.Cast<Android.Provider.BaseColumns>();
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.Events.html#CONTENT_EXCEPTION_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_EXCEPTION_URI { get { if (!_CONTENT_EXCEPTION_URIReady) { _CONTENT_EXCEPTION_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_EXCEPTION_URI"); _CONTENT_EXCEPTION_URIReady = true; } return _CONTENT_EXCEPTION_URIContent; } }
            private static Android.Net.Uri _CONTENT_EXCEPTION_URIContent = default;
            private static bool _CONTENT_EXCEPTION_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.Events.html#CONTENT_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_URI { get { if (!_CONTENT_URIReady) { _CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_URI"); _CONTENT_URIReady = true; } return _CONTENT_URIContent; } }
            private static Android.Net.Uri _CONTENT_URIContent = default;
            private static bool _CONTENT_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.Events.html#ENTERPRISE_CONTENT_URI"/>
            /// </summary>
            public static Android.Net.Uri ENTERPRISE_CONTENT_URI { get { if (!_ENTERPRISE_CONTENT_URIReady) { _ENTERPRISE_CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "ENTERPRISE_CONTENT_URI"); _ENTERPRISE_CONTENT_URIReady = true; } return _ENTERPRISE_CONTENT_URIContent; } }
            private static Android.Net.Uri _ENTERPRISE_CONTENT_URIContent = default;
            private static bool _ENTERPRISE_CONTENT_URIReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region EventsEntity implementation
        public partial class EventsEntity : Android.Provider.IBaseColumns
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Android.Provider.CalendarContract.EventsEntity"/> to <see cref="Android.Provider.BaseColumns"/>
            /// </summary>
            public static implicit operator Android.Provider.BaseColumns(Android.Provider.CalendarContract.EventsEntity t) => t.Cast<Android.Provider.BaseColumns>();
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.EventsEntity.html#CONTENT_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_URI { get { if (!_CONTENT_URIReady) { _CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_URI"); _CONTENT_URIReady = true; } return _CONTENT_URIContent; } }
            private static Android.Net.Uri _CONTENT_URIContent = default;
            private static bool _CONTENT_URIReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.EventsEntity.html#newEntityIterator(android.database.Cursor,android.content.ContentProviderClient)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Database.Cursor"/></param>
            /// <param name="arg1"><see cref="Android.Content.ContentProviderClient"/></param>
            /// <returns><see cref="Android.Content.EntityIterator"/></returns>
            public static Android.Content.EntityIterator NewEntityIterator(Android.Database.Cursor arg0, Android.Content.ContentProviderClient arg1)
            {
                return SExecuteWithSignature<Android.Content.EntityIterator>(LocalBridgeClazz, "newEntityIterator", "(Landroid/database/Cursor;Landroid/content/ContentProviderClient;)Landroid/content/EntityIterator;", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.EventsEntity.html#newEntityIterator(android.database.Cursor,android.content.ContentResolver)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Database.Cursor"/></param>
            /// <param name="arg1"><see cref="Android.Content.ContentResolver"/></param>
            /// <returns><see cref="Android.Content.EntityIterator"/></returns>
            public static Android.Content.EntityIterator NewEntityIterator(Android.Database.Cursor arg0, Android.Content.ContentResolver arg1)
            {
                return SExecuteWithSignature<Android.Content.EntityIterator>(LocalBridgeClazz, "newEntityIterator", "(Landroid/database/Cursor;Landroid/content/ContentResolver;)Landroid/content/EntityIterator;", arg0, arg1);
            }
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region ExtendedProperties implementation
        public partial class ExtendedProperties : Android.Provider.IBaseColumns
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Android.Provider.CalendarContract.ExtendedProperties"/> to <see cref="Android.Provider.BaseColumns"/>
            /// </summary>
            public static implicit operator Android.Provider.BaseColumns(Android.Provider.CalendarContract.ExtendedProperties t) => t.Cast<Android.Provider.BaseColumns>();
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.ExtendedProperties.html#CONTENT_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_URI { get { if (!_CONTENT_URIReady) { _CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_URI"); _CONTENT_URIReady = true; } return _CONTENT_URIContent; } }
            private static Android.Net.Uri _CONTENT_URIContent = default;
            private static bool _CONTENT_URIReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region Instances implementation
        public partial class Instances : Android.Provider.IBaseColumns
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Android.Provider.CalendarContract.Instances"/> to <see cref="Android.Provider.BaseColumns"/>
            /// </summary>
            public static implicit operator Android.Provider.BaseColumns(Android.Provider.CalendarContract.Instances t) => t.Cast<Android.Provider.BaseColumns>();
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.Instances.html#CONTENT_BY_DAY_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_BY_DAY_URI { get { if (!_CONTENT_BY_DAY_URIReady) { _CONTENT_BY_DAY_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_BY_DAY_URI"); _CONTENT_BY_DAY_URIReady = true; } return _CONTENT_BY_DAY_URIContent; } }
            private static Android.Net.Uri _CONTENT_BY_DAY_URIContent = default;
            private static bool _CONTENT_BY_DAY_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.Instances.html#CONTENT_SEARCH_BY_DAY_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_SEARCH_BY_DAY_URI { get { if (!_CONTENT_SEARCH_BY_DAY_URIReady) { _CONTENT_SEARCH_BY_DAY_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_SEARCH_BY_DAY_URI"); _CONTENT_SEARCH_BY_DAY_URIReady = true; } return _CONTENT_SEARCH_BY_DAY_URIContent; } }
            private static Android.Net.Uri _CONTENT_SEARCH_BY_DAY_URIContent = default;
            private static bool _CONTENT_SEARCH_BY_DAY_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.Instances.html#CONTENT_SEARCH_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_SEARCH_URI { get { if (!_CONTENT_SEARCH_URIReady) { _CONTENT_SEARCH_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_SEARCH_URI"); _CONTENT_SEARCH_URIReady = true; } return _CONTENT_SEARCH_URIContent; } }
            private static Android.Net.Uri _CONTENT_SEARCH_URIContent = default;
            private static bool _CONTENT_SEARCH_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.Instances.html#CONTENT_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_URI { get { if (!_CONTENT_URIReady) { _CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_URI"); _CONTENT_URIReady = true; } return _CONTENT_URIContent; } }
            private static Android.Net.Uri _CONTENT_URIContent = default;
            private static bool _CONTENT_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.Instances.html#ENTERPRISE_CONTENT_BY_DAY_URI"/>
            /// </summary>
            public static Android.Net.Uri ENTERPRISE_CONTENT_BY_DAY_URI { get { if (!_ENTERPRISE_CONTENT_BY_DAY_URIReady) { _ENTERPRISE_CONTENT_BY_DAY_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "ENTERPRISE_CONTENT_BY_DAY_URI"); _ENTERPRISE_CONTENT_BY_DAY_URIReady = true; } return _ENTERPRISE_CONTENT_BY_DAY_URIContent; } }
            private static Android.Net.Uri _ENTERPRISE_CONTENT_BY_DAY_URIContent = default;
            private static bool _ENTERPRISE_CONTENT_BY_DAY_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.Instances.html#ENTERPRISE_CONTENT_SEARCH_BY_DAY_URI"/>
            /// </summary>
            public static Android.Net.Uri ENTERPRISE_CONTENT_SEARCH_BY_DAY_URI { get { if (!_ENTERPRISE_CONTENT_SEARCH_BY_DAY_URIReady) { _ENTERPRISE_CONTENT_SEARCH_BY_DAY_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "ENTERPRISE_CONTENT_SEARCH_BY_DAY_URI"); _ENTERPRISE_CONTENT_SEARCH_BY_DAY_URIReady = true; } return _ENTERPRISE_CONTENT_SEARCH_BY_DAY_URIContent; } }
            private static Android.Net.Uri _ENTERPRISE_CONTENT_SEARCH_BY_DAY_URIContent = default;
            private static bool _ENTERPRISE_CONTENT_SEARCH_BY_DAY_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.Instances.html#ENTERPRISE_CONTENT_SEARCH_URI"/>
            /// </summary>
            public static Android.Net.Uri ENTERPRISE_CONTENT_SEARCH_URI { get { if (!_ENTERPRISE_CONTENT_SEARCH_URIReady) { _ENTERPRISE_CONTENT_SEARCH_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "ENTERPRISE_CONTENT_SEARCH_URI"); _ENTERPRISE_CONTENT_SEARCH_URIReady = true; } return _ENTERPRISE_CONTENT_SEARCH_URIContent; } }
            private static Android.Net.Uri _ENTERPRISE_CONTENT_SEARCH_URIContent = default;
            private static bool _ENTERPRISE_CONTENT_SEARCH_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.Instances.html#ENTERPRISE_CONTENT_URI"/>
            /// </summary>
            public static Android.Net.Uri ENTERPRISE_CONTENT_URI { get { if (!_ENTERPRISE_CONTENT_URIReady) { _ENTERPRISE_CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "ENTERPRISE_CONTENT_URI"); _ENTERPRISE_CONTENT_URIReady = true; } return _ENTERPRISE_CONTENT_URIContent; } }
            private static Android.Net.Uri _ENTERPRISE_CONTENT_URIContent = default;
            private static bool _ENTERPRISE_CONTENT_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.Instances.html#BEGIN"/>
            /// </summary>
            public static Java.Lang.String BEGIN { get { if (!_BEGINReady) { _BEGINContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BEGIN"); _BEGINReady = true; } return _BEGINContent; } }
            private static Java.Lang.String _BEGINContent = default;
            private static bool _BEGINReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.Instances.html#END"/>
            /// </summary>
            public static Java.Lang.String END { get { if (!_ENDReady) { _ENDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "END"); _ENDReady = true; } return _ENDContent; } }
            private static Java.Lang.String _ENDContent = default;
            private static bool _ENDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.Instances.html#END_DAY"/>
            /// </summary>
            public static Java.Lang.String END_DAY { get { if (!_END_DAYReady) { _END_DAYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "END_DAY"); _END_DAYReady = true; } return _END_DAYContent; } }
            private static Java.Lang.String _END_DAYContent = default;
            private static bool _END_DAYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.Instances.html#END_MINUTE"/>
            /// </summary>
            public static Java.Lang.String END_MINUTE { get { if (!_END_MINUTEReady) { _END_MINUTEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "END_MINUTE"); _END_MINUTEReady = true; } return _END_MINUTEContent; } }
            private static Java.Lang.String _END_MINUTEContent = default;
            private static bool _END_MINUTEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.Instances.html#EVENT_ID"/>
            /// </summary>
            public static Java.Lang.String EVENT_ID { get { if (!_EVENT_IDReady) { _EVENT_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EVENT_ID"); _EVENT_IDReady = true; } return _EVENT_IDContent; } }
            private static Java.Lang.String _EVENT_IDContent = default;
            private static bool _EVENT_IDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.Instances.html#START_DAY"/>
            /// </summary>
            public static Java.Lang.String START_DAY { get { if (!_START_DAYReady) { _START_DAYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "START_DAY"); _START_DAYReady = true; } return _START_DAYContent; } }
            private static Java.Lang.String _START_DAYContent = default;
            private static bool _START_DAYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.Instances.html#START_MINUTE"/>
            /// </summary>
            public static Java.Lang.String START_MINUTE { get { if (!_START_MINUTEReady) { _START_MINUTEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "START_MINUTE"); _START_MINUTEReady = true; } return _START_MINUTEContent; } }
            private static Java.Lang.String _START_MINUTEContent = default;
            private static bool _START_MINUTEReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.Instances.html#query(android.content.ContentResolver,java.lang.String[],long,long,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <param name="arg2"><see cref="long"/></param>
            /// <param name="arg3"><see cref="long"/></param>
            /// <param name="arg4"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Database.Cursor"/></returns>
            public static Android.Database.Cursor Query(Android.Content.ContentResolver arg0, Java.Lang.String[] arg1, long arg2, long arg3, Java.Lang.String arg4)
            {
                return SExecuteWithSignature<Android.Database.Cursor>(LocalBridgeClazz, "query", "(Landroid/content/ContentResolver;[Ljava/lang/String;JJLjava/lang/String;)Landroid/database/Cursor;", arg0, arg1, arg2, arg3, arg4);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.Instances.html#query(android.content.ContentResolver,java.lang.String[],long,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <param name="arg2"><see cref="long"/></param>
            /// <param name="arg3"><see cref="long"/></param>
            /// <returns><see cref="Android.Database.Cursor"/></returns>
            public static Android.Database.Cursor Query(Android.Content.ContentResolver arg0, Java.Lang.String[] arg1, long arg2, long arg3)
            {
                return SExecuteWithSignature<Android.Database.Cursor>(LocalBridgeClazz, "query", "(Landroid/content/ContentResolver;[Ljava/lang/String;JJ)Landroid/database/Cursor;", arg0, arg1, arg2, arg3);
            }
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region Reminders implementation
        public partial class Reminders : Android.Provider.IBaseColumns
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Android.Provider.CalendarContract.Reminders"/> to <see cref="Android.Provider.BaseColumns"/>
            /// </summary>
            public static implicit operator Android.Provider.BaseColumns(Android.Provider.CalendarContract.Reminders t) => t.Cast<Android.Provider.BaseColumns>();
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.Reminders.html#CONTENT_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_URI { get { if (!_CONTENT_URIReady) { _CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_URI"); _CONTENT_URIReady = true; } return _CONTENT_URIContent; } }
            private static Android.Net.Uri _CONTENT_URIContent = default;
            private static bool _CONTENT_URIReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.Reminders.html#query(android.content.ContentResolver,long,java.lang.String[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <param name="arg2"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Database.Cursor"/></returns>
            public static Android.Database.Cursor Query(Android.Content.ContentResolver arg0, long arg1, Java.Lang.String[] arg2)
            {
                return SExecuteWithSignature<Android.Database.Cursor>(LocalBridgeClazz, "query", "(Landroid/content/ContentResolver;J[Ljava/lang/String;)Landroid/database/Cursor;", arg0, arg1, arg2);
            }
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region SyncState implementation
        public partial class SyncState
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/CalendarContract.SyncState.html#CONTENT_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_URI { get { if (!_CONTENT_URIReady) { _CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_URI"); _CONTENT_URIReady = true; } return _CONTENT_URIContent; } }
            private static Android.Net.Uri _CONTENT_URIContent = default;
            private static bool _CONTENT_URIReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
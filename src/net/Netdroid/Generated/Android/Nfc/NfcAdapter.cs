/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Nfc
{
    #region NfcAdapter
    public partial class NfcAdapter
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        
        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/nfc/NfcAdapter.html#getDefaultAdapter(android.content.Context)"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetDefaultAdapter"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Android.Content.Context, Android.Nfc.NfcAdapter> OnGetDefaultAdapter { get; set; } = null;

        void GetDefaultAdapterEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Content.Context>> data)
        {
            var methodToExecute = (OnGetDefaultAdapter != null) ? OnGetDefaultAdapter : GetDefaultAdapter;
            var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData);
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/NfcAdapter.html#getDefaultAdapter(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <returns><see cref="Android.Nfc.NfcAdapter"/></returns>
        public virtual Android.Nfc.NfcAdapter GetDefaultAdapter(Android.Content.Context arg0)
        {
            return default;
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// Handlers initializer for <see cref="NfcAdapter"/>
        /// </summary>
        protected virtual void InitializeHandlers()
        {
            AddEventHandler("getNfcAntennaInfo", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(GetNfcAntennaInfoEventHandler));
            AddEventHandler("ignore", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Nfc.Tag>>>(IgnoreEventHandler));
            AddEventHandler("isEnabled", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(IsEnabledEventHandler));
            AddEventHandler("isSecureNfcEnabled", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(IsSecureNfcEnabledEventHandler));
            AddEventHandler("isSecureNfcSupported", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(IsSecureNfcSupportedEventHandler));
            AddEventHandler("disableForegroundDispatch", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.App.Activity>>>(DisableForegroundDispatchEventHandler));
            AddEventHandler("disableReaderMode", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.App.Activity>>>(DisableReaderModeEventHandler));
            AddEventHandler("enableForegroundDispatch", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.App.Activity>>>(EnableForegroundDispatchEventHandler));
            AddEventHandler("enableReaderMode", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.App.Activity>>>(EnableReaderModeEventHandler));

        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/nfc/NfcAdapter.html#getNfcAntennaInfo()"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetNfcAntennaInfo"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Android.Nfc.NfcAntennaInfo> OnGetNfcAntennaInfo { get; set; } = null;

        void GetNfcAntennaInfoEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnGetNfcAntennaInfo != null) ? OnGetNfcAntennaInfo : GetNfcAntennaInfo;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/NfcAdapter.html#getNfcAntennaInfo()"/>
        /// </summary>
        /// <returns><see cref="Android.Nfc.NfcAntennaInfo"/></returns>
        public virtual Android.Nfc.NfcAntennaInfo GetNfcAntennaInfo()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/nfc/NfcAdapter.html#ignore(android.nfc.Tag,int,android.nfc.NfcAdapter.OnTagRemovedListener,android.os.Handler)"/>
        /// </summary>
        /// <remarks>If <see cref="OnIgnore"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Android.Nfc.Tag, int, Android.Nfc.NfcAdapter.OnTagRemovedListener, Android.Os.Handler, bool> OnIgnore { get; set; } = null;

        void IgnoreEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Nfc.Tag>> data)
        {
            var methodToExecute = (OnIgnore != null) ? OnIgnore : Ignore;
            var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<Android.Nfc.NfcAdapter.OnTagRemovedListener>(1), data.EventData.GetAt<Android.Os.Handler>(2));
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/NfcAdapter.html#ignore(android.nfc.Tag,int,android.nfc.NfcAdapter.OnTagRemovedListener,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Nfc.Tag"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Nfc.NfcAdapter.OnTagRemovedListener"/></param>
        /// <param name="arg3"><see cref="Android.Os.Handler"/></param>
        /// <returns><see cref="bool"/></returns>
        public virtual bool Ignore(Android.Nfc.Tag arg0, int arg1, Android.Nfc.NfcAdapter.OnTagRemovedListener arg2, Android.Os.Handler arg3)
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/nfc/NfcAdapter.html#isEnabled()"/>
        /// </summary>
        /// <remarks>If <see cref="OnIsEnabled"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<bool> OnIsEnabled { get; set; } = null;

        void IsEnabledEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnIsEnabled != null) ? OnIsEnabled : IsEnabled;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/NfcAdapter.html#isEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public virtual bool IsEnabled()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/nfc/NfcAdapter.html#isSecureNfcEnabled()"/>
        /// </summary>
        /// <remarks>If <see cref="OnIsSecureNfcEnabled"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<bool> OnIsSecureNfcEnabled { get; set; } = null;

        void IsSecureNfcEnabledEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnIsSecureNfcEnabled != null) ? OnIsSecureNfcEnabled : IsSecureNfcEnabled;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/NfcAdapter.html#isSecureNfcEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public virtual bool IsSecureNfcEnabled()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/nfc/NfcAdapter.html#isSecureNfcSupported()"/>
        /// </summary>
        /// <remarks>If <see cref="OnIsSecureNfcSupported"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<bool> OnIsSecureNfcSupported { get; set; } = null;

        void IsSecureNfcSupportedEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnIsSecureNfcSupported != null) ? OnIsSecureNfcSupported : IsSecureNfcSupported;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/NfcAdapter.html#isSecureNfcSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public virtual bool IsSecureNfcSupported()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/nfc/NfcAdapter.html#disableForegroundDispatch(android.app.Activity)"/>
        /// </summary>
        /// <remarks>If <see cref="OnDisableForegroundDispatch"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<Android.App.Activity> OnDisableForegroundDispatch { get; set; } = null;

        void DisableForegroundDispatchEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.App.Activity>> data)
        {
            var methodToExecute = (OnDisableForegroundDispatch != null) ? OnDisableForegroundDispatch : DisableForegroundDispatch;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/NfcAdapter.html#disableForegroundDispatch(android.app.Activity)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.Activity"/></param>
        public virtual void DisableForegroundDispatch(Android.App.Activity arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/nfc/NfcAdapter.html#disableReaderMode(android.app.Activity)"/>
        /// </summary>
        /// <remarks>If <see cref="OnDisableReaderMode"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<Android.App.Activity> OnDisableReaderMode { get; set; } = null;

        void DisableReaderModeEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.App.Activity>> data)
        {
            var methodToExecute = (OnDisableReaderMode != null) ? OnDisableReaderMode : DisableReaderMode;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/NfcAdapter.html#disableReaderMode(android.app.Activity)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.Activity"/></param>
        public virtual void DisableReaderMode(Android.App.Activity arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/nfc/NfcAdapter.html#enableForegroundDispatch(android.app.Activity,android.app.PendingIntent,android.content.IntentFilter[],java.lang.String[][])"/>
        /// </summary>
        /// <remarks>If <see cref="OnEnableForegroundDispatch"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<Android.App.Activity, Android.App.PendingIntent, Android.Content.IntentFilter[], Java.Lang.String[][]> OnEnableForegroundDispatch { get; set; } = null;

        void EnableForegroundDispatchEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.App.Activity>> data)
        {
            var methodToExecute = (OnEnableForegroundDispatch != null) ? OnEnableForegroundDispatch : EnableForegroundDispatch;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.App.PendingIntent>(0), data.EventData.GetAt<Android.Content.IntentFilter[]>(1), data.EventData.GetAt<Java.Lang.String[][]>(2));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/NfcAdapter.html#enableForegroundDispatch(android.app.Activity,android.app.PendingIntent,android.content.IntentFilter[],java.lang.String[][])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.Activity"/></param>
        /// <param name="arg1"><see cref="Android.App.PendingIntent"/></param>
        /// <param name="arg2"><see cref="Android.Content.IntentFilter"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        public virtual void EnableForegroundDispatch(Android.App.Activity arg0, Android.App.PendingIntent arg1, Android.Content.IntentFilter[] arg2, Java.Lang.String[][] arg3)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/nfc/NfcAdapter.html#enableReaderMode(android.app.Activity,android.nfc.NfcAdapter.ReaderCallback,int,android.os.Bundle)"/>
        /// </summary>
        /// <remarks>If <see cref="OnEnableReaderMode"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<Android.App.Activity, Android.Nfc.NfcAdapter.ReaderCallback, int, Android.Os.Bundle> OnEnableReaderMode { get; set; } = null;

        void EnableReaderModeEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.App.Activity>> data)
        {
            var methodToExecute = (OnEnableReaderMode != null) ? OnEnableReaderMode : EnableReaderMode;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.Nfc.NfcAdapter.ReaderCallback>(0), data.EventData.GetAt<int>(1), data.EventData.GetAt<Android.Os.Bundle>(2));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/NfcAdapter.html#enableReaderMode(android.app.Activity,android.nfc.NfcAdapter.ReaderCallback,int,android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.Activity"/></param>
        /// <param name="arg1"><see cref="Android.Nfc.NfcAdapter.ReaderCallback"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Android.Os.Bundle"/></param>
        public virtual void EnableReaderMode(Android.App.Activity arg0, Android.Nfc.NfcAdapter.ReaderCallback arg1, int arg2, Android.Os.Bundle arg3)
        {
            
        }

        #endregion

        #region Nested classes
        #region OnTagRemovedListener
        public partial class OnTagRemovedListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnTagRemovedListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onTagRemoved", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(OnTagRemovedEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/nfc/NfcAdapter.OnTagRemovedListener.html#onTagRemoved()"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnTagRemoved"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action OnOnTagRemoved { get; set; } = null;

            void OnTagRemovedEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
            {
                var methodToExecute = (OnOnTagRemoved != null) ? OnOnTagRemoved : OnTagRemoved;
                methodToExecute.Invoke();
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/nfc/NfcAdapter.OnTagRemovedListener.html#onTagRemoved()"/>
            /// </summary>
            public virtual void OnTagRemoved()
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnTagRemovedListenerDirect
        public partial class OnTagRemovedListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/nfc/NfcAdapter.OnTagRemovedListener.html#onTagRemoved()"/>
            /// </summary>
            public override void OnTagRemoved()
            {
                IExecuteWithSignature("onTagRemoved", "()V");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ReaderCallback
        public partial class ReaderCallback
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/nfc/NfcAdapter.ReaderCallback.html#onTagDiscovered(android.nfc.Tag)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Nfc.Tag"/></param>
            public void OnTagDiscovered(Android.Nfc.Tag arg0)
            {
                IExecuteWithSignature("onTagDiscovered", "(Landroid/nfc/Tag;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion

    #region NfcAdapterDirect
    public partial class NfcAdapterDirect
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/NfcAdapter.html#getNfcAntennaInfo()"/> 
        /// </summary>
        public Android.Nfc.NfcAntennaInfo NfcAntennaInfo
        {
            get { return IExecuteWithSignature<Android.Nfc.NfcAntennaInfo>("getNfcAntennaInfo", "()Landroid/nfc/NfcAntennaInfo;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/NfcAdapter.html#ignore(android.nfc.Tag,int,android.nfc.NfcAdapter.OnTagRemovedListener,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Nfc.Tag"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Nfc.NfcAdapter.OnTagRemovedListener"/></param>
        /// <param name="arg3"><see cref="Android.Os.Handler"/></param>
        /// <returns><see cref="bool"/></returns>
        public override bool Ignore(Android.Nfc.Tag arg0, int arg1, Android.Nfc.NfcAdapter.OnTagRemovedListener arg2, Android.Os.Handler arg3)
        {
            return IExecute<bool>("ignore", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/NfcAdapter.html#isEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public override bool IsEnabled()
        {
            return IExecuteWithSignature<bool>("isEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/NfcAdapter.html#isSecureNfcEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public override bool IsSecureNfcEnabled()
        {
            return IExecuteWithSignature<bool>("isSecureNfcEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/NfcAdapter.html#isSecureNfcSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public override bool IsSecureNfcSupported()
        {
            return IExecuteWithSignature<bool>("isSecureNfcSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/NfcAdapter.html#disableForegroundDispatch(android.app.Activity)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.Activity"/></param>
        public override void DisableForegroundDispatch(Android.App.Activity arg0)
        {
            IExecuteWithSignature("disableForegroundDispatch", "(Landroid/app/Activity;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/NfcAdapter.html#disableReaderMode(android.app.Activity)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.Activity"/></param>
        public override void DisableReaderMode(Android.App.Activity arg0)
        {
            IExecuteWithSignature("disableReaderMode", "(Landroid/app/Activity;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/NfcAdapter.html#enableForegroundDispatch(android.app.Activity,android.app.PendingIntent,android.content.IntentFilter[],java.lang.String[][])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.Activity"/></param>
        /// <param name="arg1"><see cref="Android.App.PendingIntent"/></param>
        /// <param name="arg2"><see cref="Android.Content.IntentFilter"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        public override void EnableForegroundDispatch(Android.App.Activity arg0, Android.App.PendingIntent arg1, Android.Content.IntentFilter[] arg2, Java.Lang.String[][] arg3)
        {
            IExecute("enableForegroundDispatch", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/NfcAdapter.html#enableReaderMode(android.app.Activity,android.nfc.NfcAdapter.ReaderCallback,int,android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.Activity"/></param>
        /// <param name="arg1"><see cref="Android.Nfc.NfcAdapter.ReaderCallback"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Android.Os.Bundle"/></param>
        public override void EnableReaderMode(Android.App.Activity arg0, Android.Nfc.NfcAdapter.ReaderCallback arg1, int arg2, Android.Os.Bundle arg3)
        {
            IExecute("enableReaderMode", arg0, arg1, arg2, arg3);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
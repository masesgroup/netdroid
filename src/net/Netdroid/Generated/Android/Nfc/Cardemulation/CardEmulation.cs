/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Nfc.Cardemulation
{
    #region CardEmulation declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html"/>
    /// </summary>
    public partial class CardEmulation : MASES.JCOBridge.C2JBridge.JVMBridgeBase<CardEmulation>
    {
        const string _bridgeClassName = "android.nfc.cardemulation.CardEmulation";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public CardEmulation() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public CardEmulation(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public CardEmulation(params object[] args) : base(args) { }
    
        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region NfcEventCallback declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.NfcEventCallback.html"/>
        /// </summary>
        public partial class NfcEventCallback : MASES.JCOBridge.C2JBridge.JVMBridgeBase<NfcEventCallback>
        {
            const string _bridgeClassName = "android.nfc.cardemulation.CardEmulation$NfcEventCallback";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("NfcEventCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public NfcEventCallback() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public NfcEventCallback(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("NfcEventCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public NfcEventCallback(params object[] args) : base(args) { }
        
            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => true;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => true;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region CardEmulation implementation
    public partial class CardEmulation
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#NFC_INTERNAL_ERROR_COMMAND_TIMEOUT"/>
        /// </summary>
        public static int NFC_INTERNAL_ERROR_COMMAND_TIMEOUT { get { if (!_NFC_INTERNAL_ERROR_COMMAND_TIMEOUTReady) { _NFC_INTERNAL_ERROR_COMMAND_TIMEOUTContent = SGetField<int>(LocalBridgeClazz, "NFC_INTERNAL_ERROR_COMMAND_TIMEOUT"); _NFC_INTERNAL_ERROR_COMMAND_TIMEOUTReady = true; } return _NFC_INTERNAL_ERROR_COMMAND_TIMEOUTContent; } }
        private static int _NFC_INTERNAL_ERROR_COMMAND_TIMEOUTContent = default;
        private static bool _NFC_INTERNAL_ERROR_COMMAND_TIMEOUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#NFC_INTERNAL_ERROR_NFC_CRASH_RESTART"/>
        /// </summary>
        public static int NFC_INTERNAL_ERROR_NFC_CRASH_RESTART { get { if (!_NFC_INTERNAL_ERROR_NFC_CRASH_RESTARTReady) { _NFC_INTERNAL_ERROR_NFC_CRASH_RESTARTContent = SGetField<int>(LocalBridgeClazz, "NFC_INTERNAL_ERROR_NFC_CRASH_RESTART"); _NFC_INTERNAL_ERROR_NFC_CRASH_RESTARTReady = true; } return _NFC_INTERNAL_ERROR_NFC_CRASH_RESTARTContent; } }
        private static int _NFC_INTERNAL_ERROR_NFC_CRASH_RESTARTContent = default;
        private static bool _NFC_INTERNAL_ERROR_NFC_CRASH_RESTARTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#NFC_INTERNAL_ERROR_NFC_HARDWARE_ERROR"/>
        /// </summary>
        public static int NFC_INTERNAL_ERROR_NFC_HARDWARE_ERROR { get { if (!_NFC_INTERNAL_ERROR_NFC_HARDWARE_ERRORReady) { _NFC_INTERNAL_ERROR_NFC_HARDWARE_ERRORContent = SGetField<int>(LocalBridgeClazz, "NFC_INTERNAL_ERROR_NFC_HARDWARE_ERROR"); _NFC_INTERNAL_ERROR_NFC_HARDWARE_ERRORReady = true; } return _NFC_INTERNAL_ERROR_NFC_HARDWARE_ERRORContent; } }
        private static int _NFC_INTERNAL_ERROR_NFC_HARDWARE_ERRORContent = default;
        private static bool _NFC_INTERNAL_ERROR_NFC_HARDWARE_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#NFC_INTERNAL_ERROR_UNKNOWN"/>
        /// </summary>
        public static int NFC_INTERNAL_ERROR_UNKNOWN { get { if (!_NFC_INTERNAL_ERROR_UNKNOWNReady) { _NFC_INTERNAL_ERROR_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "NFC_INTERNAL_ERROR_UNKNOWN"); _NFC_INTERNAL_ERROR_UNKNOWNReady = true; } return _NFC_INTERNAL_ERROR_UNKNOWNContent; } }
        private static int _NFC_INTERNAL_ERROR_UNKNOWNContent = default;
        private static bool _NFC_INTERNAL_ERROR_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#PROTOCOL_AND_TECHNOLOGY_ROUTE_DEFAULT"/>
        /// </summary>
        public static int PROTOCOL_AND_TECHNOLOGY_ROUTE_DEFAULT { get { if (!_PROTOCOL_AND_TECHNOLOGY_ROUTE_DEFAULTReady) { _PROTOCOL_AND_TECHNOLOGY_ROUTE_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "PROTOCOL_AND_TECHNOLOGY_ROUTE_DEFAULT"); _PROTOCOL_AND_TECHNOLOGY_ROUTE_DEFAULTReady = true; } return _PROTOCOL_AND_TECHNOLOGY_ROUTE_DEFAULTContent; } }
        private static int _PROTOCOL_AND_TECHNOLOGY_ROUTE_DEFAULTContent = default;
        private static bool _PROTOCOL_AND_TECHNOLOGY_ROUTE_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#PROTOCOL_AND_TECHNOLOGY_ROUTE_DH"/>
        /// </summary>
        public static int PROTOCOL_AND_TECHNOLOGY_ROUTE_DH { get { if (!_PROTOCOL_AND_TECHNOLOGY_ROUTE_DHReady) { _PROTOCOL_AND_TECHNOLOGY_ROUTE_DHContent = SGetField<int>(LocalBridgeClazz, "PROTOCOL_AND_TECHNOLOGY_ROUTE_DH"); _PROTOCOL_AND_TECHNOLOGY_ROUTE_DHReady = true; } return _PROTOCOL_AND_TECHNOLOGY_ROUTE_DHContent; } }
        private static int _PROTOCOL_AND_TECHNOLOGY_ROUTE_DHContent = default;
        private static bool _PROTOCOL_AND_TECHNOLOGY_ROUTE_DHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#PROTOCOL_AND_TECHNOLOGY_ROUTE_ESE"/>
        /// </summary>
        public static int PROTOCOL_AND_TECHNOLOGY_ROUTE_ESE { get { if (!_PROTOCOL_AND_TECHNOLOGY_ROUTE_ESEReady) { _PROTOCOL_AND_TECHNOLOGY_ROUTE_ESEContent = SGetField<int>(LocalBridgeClazz, "PROTOCOL_AND_TECHNOLOGY_ROUTE_ESE"); _PROTOCOL_AND_TECHNOLOGY_ROUTE_ESEReady = true; } return _PROTOCOL_AND_TECHNOLOGY_ROUTE_ESEContent; } }
        private static int _PROTOCOL_AND_TECHNOLOGY_ROUTE_ESEContent = default;
        private static bool _PROTOCOL_AND_TECHNOLOGY_ROUTE_ESEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#PROTOCOL_AND_TECHNOLOGY_ROUTE_UICC"/>
        /// </summary>
        public static int PROTOCOL_AND_TECHNOLOGY_ROUTE_UICC { get { if (!_PROTOCOL_AND_TECHNOLOGY_ROUTE_UICCReady) { _PROTOCOL_AND_TECHNOLOGY_ROUTE_UICCContent = SGetField<int>(LocalBridgeClazz, "PROTOCOL_AND_TECHNOLOGY_ROUTE_UICC"); _PROTOCOL_AND_TECHNOLOGY_ROUTE_UICCReady = true; } return _PROTOCOL_AND_TECHNOLOGY_ROUTE_UICCContent; } }
        private static int _PROTOCOL_AND_TECHNOLOGY_ROUTE_UICCContent = default;
        private static bool _PROTOCOL_AND_TECHNOLOGY_ROUTE_UICCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#PROTOCOL_AND_TECHNOLOGY_ROUTE_UNSET"/>
        /// </summary>
        public static int PROTOCOL_AND_TECHNOLOGY_ROUTE_UNSET { get { if (!_PROTOCOL_AND_TECHNOLOGY_ROUTE_UNSETReady) { _PROTOCOL_AND_TECHNOLOGY_ROUTE_UNSETContent = SGetField<int>(LocalBridgeClazz, "PROTOCOL_AND_TECHNOLOGY_ROUTE_UNSET"); _PROTOCOL_AND_TECHNOLOGY_ROUTE_UNSETReady = true; } return _PROTOCOL_AND_TECHNOLOGY_ROUTE_UNSETContent; } }
        private static int _PROTOCOL_AND_TECHNOLOGY_ROUTE_UNSETContent = default;
        private static bool _PROTOCOL_AND_TECHNOLOGY_ROUTE_UNSETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#SELECTION_MODE_ALWAYS_ASK"/>
        /// </summary>
        public static int SELECTION_MODE_ALWAYS_ASK { get { if (!_SELECTION_MODE_ALWAYS_ASKReady) { _SELECTION_MODE_ALWAYS_ASKContent = SGetField<int>(LocalBridgeClazz, "SELECTION_MODE_ALWAYS_ASK"); _SELECTION_MODE_ALWAYS_ASKReady = true; } return _SELECTION_MODE_ALWAYS_ASKContent; } }
        private static int _SELECTION_MODE_ALWAYS_ASKContent = default;
        private static bool _SELECTION_MODE_ALWAYS_ASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#SELECTION_MODE_ASK_IF_CONFLICT"/>
        /// </summary>
        public static int SELECTION_MODE_ASK_IF_CONFLICT { get { if (!_SELECTION_MODE_ASK_IF_CONFLICTReady) { _SELECTION_MODE_ASK_IF_CONFLICTContent = SGetField<int>(LocalBridgeClazz, "SELECTION_MODE_ASK_IF_CONFLICT"); _SELECTION_MODE_ASK_IF_CONFLICTReady = true; } return _SELECTION_MODE_ASK_IF_CONFLICTContent; } }
        private static int _SELECTION_MODE_ASK_IF_CONFLICTContent = default;
        private static bool _SELECTION_MODE_ASK_IF_CONFLICTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#SELECTION_MODE_PREFER_DEFAULT"/>
        /// </summary>
        public static int SELECTION_MODE_PREFER_DEFAULT { get { if (!_SELECTION_MODE_PREFER_DEFAULTReady) { _SELECTION_MODE_PREFER_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "SELECTION_MODE_PREFER_DEFAULT"); _SELECTION_MODE_PREFER_DEFAULTReady = true; } return _SELECTION_MODE_PREFER_DEFAULTContent; } }
        private static int _SELECTION_MODE_PREFER_DEFAULTContent = default;
        private static bool _SELECTION_MODE_PREFER_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#ACTION_CHANGE_DEFAULT"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String ACTION_CHANGE_DEFAULT { get { if (!_ACTION_CHANGE_DEFAULTReady) { _ACTION_CHANGE_DEFAULTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_CHANGE_DEFAULT"); _ACTION_CHANGE_DEFAULTReady = true; } return _ACTION_CHANGE_DEFAULTContent; } }
        private static Java.Lang.String _ACTION_CHANGE_DEFAULTContent = default;
        private static bool _ACTION_CHANGE_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#CATEGORY_OTHER"/>
        /// </summary>
        public static Java.Lang.String CATEGORY_OTHER { get { if (!_CATEGORY_OTHERReady) { _CATEGORY_OTHERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CATEGORY_OTHER"); _CATEGORY_OTHERReady = true; } return _CATEGORY_OTHERContent; } }
        private static Java.Lang.String _CATEGORY_OTHERContent = default;
        private static bool _CATEGORY_OTHERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#CATEGORY_PAYMENT"/>
        /// </summary>
        public static Java.Lang.String CATEGORY_PAYMENT { get { if (!_CATEGORY_PAYMENTReady) { _CATEGORY_PAYMENTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CATEGORY_PAYMENT"); _CATEGORY_PAYMENTReady = true; } return _CATEGORY_PAYMENTContent; } }
        private static Java.Lang.String _CATEGORY_PAYMENTContent = default;
        private static bool _CATEGORY_PAYMENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#EXTRA_CATEGORY"/>
        /// </summary>
        public static Java.Lang.String EXTRA_CATEGORY { get { if (!_EXTRA_CATEGORYReady) { _EXTRA_CATEGORYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_CATEGORY"); _EXTRA_CATEGORYReady = true; } return _EXTRA_CATEGORYContent; } }
        private static Java.Lang.String _EXTRA_CATEGORYContent = default;
        private static bool _EXTRA_CATEGORYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#EXTRA_SERVICE_COMPONENT"/>
        /// </summary>
        public static Java.Lang.String EXTRA_SERVICE_COMPONENT { get { if (!_EXTRA_SERVICE_COMPONENTReady) { _EXTRA_SERVICE_COMPONENTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_SERVICE_COMPONENT"); _EXTRA_SERVICE_COMPONENTReady = true; } return _EXTRA_SERVICE_COMPONENTContent; } }
        private static Java.Lang.String _EXTRA_SERVICE_COMPONENTContent = default;
        private static bool _EXTRA_SERVICE_COMPONENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#PROPERTY_ALLOW_SHARED_ROLE_PRIORITY"/>
        /// </summary>
        public static Java.Lang.String PROPERTY_ALLOW_SHARED_ROLE_PRIORITY { get { if (!_PROPERTY_ALLOW_SHARED_ROLE_PRIORITYReady) { _PROPERTY_ALLOW_SHARED_ROLE_PRIORITYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROPERTY_ALLOW_SHARED_ROLE_PRIORITY"); _PROPERTY_ALLOW_SHARED_ROLE_PRIORITYReady = true; } return _PROPERTY_ALLOW_SHARED_ROLE_PRIORITYContent; } }
        private static Java.Lang.String _PROPERTY_ALLOW_SHARED_ROLE_PRIORITYContent = default;
        private static bool _PROPERTY_ALLOW_SHARED_ROLE_PRIORITYReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#getInstance(android.nfc.NfcAdapter)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Nfc.NfcAdapter"/></param>
        /// <returns><see cref="Android.Nfc.Cardemulation.CardEmulation"/></returns>
        public static Android.Nfc.Cardemulation.CardEmulation GetInstance(Android.Nfc.NfcAdapter arg0)
        {
            return SExecuteWithSignature<Android.Nfc.Cardemulation.CardEmulation>(LocalBridgeClazz, "getInstance", "(Landroid/nfc/NfcAdapter;)Landroid/nfc/cardemulation/CardEmulation;", arg0);
        }
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#categoryAllowsForegroundPreference(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool CategoryAllowsForegroundPreference(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<bool>("categoryAllowsForegroundPreference", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#isDefaultServiceForAid(android.content.ComponentName,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsDefaultServiceForAid(Android.Content.ComponentName arg0, Java.Lang.String arg1)
        {
            return IExecuteWithSignature<bool>("isDefaultServiceForAid", "(Landroid/content/ComponentName;Ljava/lang/String;)Z", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#isDefaultServiceForCategory(android.content.ComponentName,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsDefaultServiceForCategory(Android.Content.ComponentName arg0, Java.Lang.String arg1)
        {
            return IExecuteWithSignature<bool>("isDefaultServiceForCategory", "(Landroid/content/ComponentName;Ljava/lang/String;)Z", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#isEuiccSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsEuiccSupported()
        {
            return IExecuteWithSignature<bool>("isEuiccSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#registerAidsForService(android.content.ComponentName,java.lang.String,java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Util.List"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RegisterAidsForService(Android.Content.ComponentName arg0, Java.Lang.String arg1, Java.Util.List<Java.Lang.String> arg2)
        {
            return IExecuteWithSignature<bool>("registerAidsForService", "(Landroid/content/ComponentName;Ljava/lang/String;Ljava/util/List;)Z", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#registerPollingLoopFilterForService(android.content.ComponentName,java.lang.String,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RegisterPollingLoopFilterForService(Android.Content.ComponentName arg0, Java.Lang.String arg1, bool arg2)
        {
            return IExecuteWithSignature<bool>("registerPollingLoopFilterForService", "(Landroid/content/ComponentName;Ljava/lang/String;Z)Z", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#registerPollingLoopPatternFilterForService(android.content.ComponentName,java.lang.String,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RegisterPollingLoopPatternFilterForService(Android.Content.ComponentName arg0, Java.Lang.String arg1, bool arg2)
        {
            return IExecuteWithSignature<bool>("registerPollingLoopPatternFilterForService", "(Landroid/content/ComponentName;Ljava/lang/String;Z)Z", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#removeAidsForService(android.content.ComponentName,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RemoveAidsForService(Android.Content.ComponentName arg0, Java.Lang.String arg1)
        {
            return IExecuteWithSignature<bool>("removeAidsForService", "(Landroid/content/ComponentName;Ljava/lang/String;)Z", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#removePollingLoopFilterForService(android.content.ComponentName,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RemovePollingLoopFilterForService(Android.Content.ComponentName arg0, Java.Lang.String arg1)
        {
            return IExecuteWithSignature<bool>("removePollingLoopFilterForService", "(Landroid/content/ComponentName;Ljava/lang/String;)Z", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#removePollingLoopPatternFilterForService(android.content.ComponentName,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RemovePollingLoopPatternFilterForService(Android.Content.ComponentName arg0, Java.Lang.String arg1)
        {
            return IExecuteWithSignature<bool>("removePollingLoopPatternFilterForService", "(Landroid/content/ComponentName;Ljava/lang/String;)Z", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#setOffHostForService(android.content.ComponentName,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetOffHostForService(Android.Content.ComponentName arg0, Java.Lang.String arg1)
        {
            return IExecuteWithSignature<bool>("setOffHostForService", "(Landroid/content/ComponentName;Ljava/lang/String;)Z", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#setPreferredService(android.app.Activity,android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.Activity"/></param>
        /// <param name="arg1"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetPreferredService(Android.App.Activity arg0, Android.Content.ComponentName arg1)
        {
            return IExecuteWithSignature<bool>("setPreferredService", "(Landroid/app/Activity;Landroid/content/ComponentName;)Z", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#setShouldDefaultToObserveModeForService(android.content.ComponentName,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetShouldDefaultToObserveModeForService(Android.Content.ComponentName arg0, bool arg1)
        {
            return IExecuteWithSignature<bool>("setShouldDefaultToObserveModeForService", "(Landroid/content/ComponentName;Z)Z", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#supportsAidPrefixRegistration()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool SupportsAidPrefixRegistration()
        {
            return IExecuteWithSignature<bool>("supportsAidPrefixRegistration", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#unsetOffHostForService(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool UnsetOffHostForService(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<bool>("unsetOffHostForService", "(Landroid/content/ComponentName;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#unsetPreferredService(android.app.Activity)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.Activity"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool UnsetPreferredService(Android.App.Activity arg0)
        {
            return IExecuteWithSignature<bool>("unsetPreferredService", "(Landroid/app/Activity;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#getDefaultNfcSubscriptionId()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetDefaultNfcSubscriptionId()
        {
            return IExecuteWithSignature<int>("getDefaultNfcSubscriptionId", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#getSelectionModeForCategory(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetSelectionModeForCategory(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<int>("getSelectionModeForCategory", "(Ljava/lang/String;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#getDescriptionForPreferredPaymentService()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetDescriptionForPreferredPaymentService()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getDescriptionForPreferredPaymentService", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#getRouteDestinationForPreferredPaymentService()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetRouteDestinationForPreferredPaymentService()
        {
            return IExecuteWithSignature<Java.Lang.String>("getRouteDestinationForPreferredPaymentService", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#getAidsForPreferredPaymentService()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Java.Lang.String> GetAidsForPreferredPaymentService()
        {
            return IExecuteWithSignature<Java.Util.List<Java.Lang.String>>("getAidsForPreferredPaymentService", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#getAidsForService(android.content.ComponentName,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Java.Lang.String> GetAidsForService(Android.Content.ComponentName arg0, Java.Lang.String arg1)
        {
            return IExecuteWithSignature<Java.Util.List<Java.Lang.String>>("getAidsForService", "(Landroid/content/ComponentName;Ljava/lang/String;)Ljava/util/List;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#registerNfcEventCallback(java.util.concurrent.Executor,android.nfc.cardemulation.CardEmulation.NfcEventCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Nfc.Cardemulation.CardEmulation.NfcEventCallback"/></param>
        public void RegisterNfcEventCallback(Java.Util.Concurrent.Executor arg0, Android.Nfc.Cardemulation.CardEmulation.NfcEventCallback arg1)
        {
            IExecuteWithSignature("registerNfcEventCallback", "(Ljava/util/concurrent/Executor;Landroid/nfc/cardemulation/CardEmulation$NfcEventCallback;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#unregisterNfcEventCallback(android.nfc.cardemulation.CardEmulation.NfcEventCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Nfc.Cardemulation.CardEmulation.NfcEventCallback"/></param>
        public void UnregisterNfcEventCallback(Android.Nfc.Cardemulation.CardEmulation.NfcEventCallback arg0)
        {
            IExecuteWithSignature("unregisterNfcEventCallback", "(Landroid/nfc/cardemulation/CardEmulation$NfcEventCallback;)V", arg0);
        }
    
        #endregion
    
        #region Nested classes
        #region NfcEventCallback implementation
        public partial class NfcEventCallback
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.NfcEventCallback.html#onAidConflictOccurred(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            public void OnAidConflictOccurred(Java.Lang.String arg0)
            {
                IExecuteWithSignature("onAidConflictOccurred", "(Ljava/lang/String;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.NfcEventCallback.html#onAidNotRouted(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            public void OnAidNotRouted(Java.Lang.String arg0)
            {
                IExecuteWithSignature("onAidNotRouted", "(Ljava/lang/String;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.NfcEventCallback.html#onInternalErrorReported(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void OnInternalErrorReported(int arg0)
            {
                IExecuteWithSignature("onInternalErrorReported", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.NfcEventCallback.html#onNfcStateChanged(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void OnNfcStateChanged(int arg0)
            {
                IExecuteWithSignature("onNfcStateChanged", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.NfcEventCallback.html#onObserveModeStateChanged(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            public void OnObserveModeStateChanged(bool arg0)
            {
                IExecuteWithSignature("onObserveModeStateChanged", "(Z)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.NfcEventCallback.html#onPreferredServiceChanged(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            public void OnPreferredServiceChanged(bool arg0)
            {
                IExecuteWithSignature("onPreferredServiceChanged", "(Z)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.NfcEventCallback.html#onRemoteFieldChanged(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            public void OnRemoteFieldChanged(bool arg0)
            {
                IExecuteWithSignature("onRemoteFieldChanged", "(Z)V", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
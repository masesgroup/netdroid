/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.8.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Webkit
{
    #region TracingConfig
    public partial class TracingConfig
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/TracingConfig.html#CATEGORIES_ALL"/>
        /// </summary>
        public static int CATEGORIES_ALL { get { if (!_CATEGORIES_ALLReady) { _CATEGORIES_ALLContent = SGetField<int>(LocalBridgeClazz, "CATEGORIES_ALL"); _CATEGORIES_ALLReady = true; } return _CATEGORIES_ALLContent; } }
        private static int _CATEGORIES_ALLContent = default;
        private static bool _CATEGORIES_ALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/TracingConfig.html#CATEGORIES_ANDROID_WEBVIEW"/>
        /// </summary>
        public static int CATEGORIES_ANDROID_WEBVIEW { get { if (!_CATEGORIES_ANDROID_WEBVIEWReady) { _CATEGORIES_ANDROID_WEBVIEWContent = SGetField<int>(LocalBridgeClazz, "CATEGORIES_ANDROID_WEBVIEW"); _CATEGORIES_ANDROID_WEBVIEWReady = true; } return _CATEGORIES_ANDROID_WEBVIEWContent; } }
        private static int _CATEGORIES_ANDROID_WEBVIEWContent = default;
        private static bool _CATEGORIES_ANDROID_WEBVIEWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/TracingConfig.html#CATEGORIES_FRAME_VIEWER"/>
        /// </summary>
        public static int CATEGORIES_FRAME_VIEWER { get { if (!_CATEGORIES_FRAME_VIEWERReady) { _CATEGORIES_FRAME_VIEWERContent = SGetField<int>(LocalBridgeClazz, "CATEGORIES_FRAME_VIEWER"); _CATEGORIES_FRAME_VIEWERReady = true; } return _CATEGORIES_FRAME_VIEWERContent; } }
        private static int _CATEGORIES_FRAME_VIEWERContent = default;
        private static bool _CATEGORIES_FRAME_VIEWERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/TracingConfig.html#CATEGORIES_INPUT_LATENCY"/>
        /// </summary>
        public static int CATEGORIES_INPUT_LATENCY { get { if (!_CATEGORIES_INPUT_LATENCYReady) { _CATEGORIES_INPUT_LATENCYContent = SGetField<int>(LocalBridgeClazz, "CATEGORIES_INPUT_LATENCY"); _CATEGORIES_INPUT_LATENCYReady = true; } return _CATEGORIES_INPUT_LATENCYContent; } }
        private static int _CATEGORIES_INPUT_LATENCYContent = default;
        private static bool _CATEGORIES_INPUT_LATENCYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/TracingConfig.html#CATEGORIES_JAVASCRIPT_AND_RENDERING"/>
        /// </summary>
        public static int CATEGORIES_JAVASCRIPT_AND_RENDERING { get { if (!_CATEGORIES_JAVASCRIPT_AND_RENDERINGReady) { _CATEGORIES_JAVASCRIPT_AND_RENDERINGContent = SGetField<int>(LocalBridgeClazz, "CATEGORIES_JAVASCRIPT_AND_RENDERING"); _CATEGORIES_JAVASCRIPT_AND_RENDERINGReady = true; } return _CATEGORIES_JAVASCRIPT_AND_RENDERINGContent; } }
        private static int _CATEGORIES_JAVASCRIPT_AND_RENDERINGContent = default;
        private static bool _CATEGORIES_JAVASCRIPT_AND_RENDERINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/TracingConfig.html#CATEGORIES_NONE"/>
        /// </summary>
        public static int CATEGORIES_NONE { get { if (!_CATEGORIES_NONEReady) { _CATEGORIES_NONEContent = SGetField<int>(LocalBridgeClazz, "CATEGORIES_NONE"); _CATEGORIES_NONEReady = true; } return _CATEGORIES_NONEContent; } }
        private static int _CATEGORIES_NONEContent = default;
        private static bool _CATEGORIES_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/TracingConfig.html#CATEGORIES_RENDERING"/>
        /// </summary>
        public static int CATEGORIES_RENDERING { get { if (!_CATEGORIES_RENDERINGReady) { _CATEGORIES_RENDERINGContent = SGetField<int>(LocalBridgeClazz, "CATEGORIES_RENDERING"); _CATEGORIES_RENDERINGReady = true; } return _CATEGORIES_RENDERINGContent; } }
        private static int _CATEGORIES_RENDERINGContent = default;
        private static bool _CATEGORIES_RENDERINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/TracingConfig.html#CATEGORIES_WEB_DEVELOPER"/>
        /// </summary>
        public static int CATEGORIES_WEB_DEVELOPER { get { if (!_CATEGORIES_WEB_DEVELOPERReady) { _CATEGORIES_WEB_DEVELOPERContent = SGetField<int>(LocalBridgeClazz, "CATEGORIES_WEB_DEVELOPER"); _CATEGORIES_WEB_DEVELOPERReady = true; } return _CATEGORIES_WEB_DEVELOPERContent; } }
        private static int _CATEGORIES_WEB_DEVELOPERContent = default;
        private static bool _CATEGORIES_WEB_DEVELOPERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/TracingConfig.html#RECORD_CONTINUOUSLY"/>
        /// </summary>
        public static int RECORD_CONTINUOUSLY { get { if (!_RECORD_CONTINUOUSLYReady) { _RECORD_CONTINUOUSLYContent = SGetField<int>(LocalBridgeClazz, "RECORD_CONTINUOUSLY"); _RECORD_CONTINUOUSLYReady = true; } return _RECORD_CONTINUOUSLYContent; } }
        private static int _RECORD_CONTINUOUSLYContent = default;
        private static bool _RECORD_CONTINUOUSLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/TracingConfig.html#RECORD_UNTIL_FULL"/>
        /// </summary>
        public static int RECORD_UNTIL_FULL { get { if (!_RECORD_UNTIL_FULLReady) { _RECORD_UNTIL_FULLContent = SGetField<int>(LocalBridgeClazz, "RECORD_UNTIL_FULL"); _RECORD_UNTIL_FULLReady = true; } return _RECORD_UNTIL_FULLContent; } }
        private static int _RECORD_UNTIL_FULLContent = default;
        private static bool _RECORD_UNTIL_FULLReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/TracingConfig.html#getPredefinedCategories()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetPredefinedCategories()
        {
            return IExecuteWithSignature<int>("getPredefinedCategories", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/TracingConfig.html#getTracingMode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetTracingMode()
        {
            return IExecuteWithSignature<int>("getTracingMode", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/TracingConfig.html#getCustomIncludedCategories()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Java.Lang.String> GetCustomIncludedCategories()
        {
            return IExecuteWithSignature<Java.Util.List<Java.Lang.String>>("getCustomIncludedCategories", "()Ljava/util/List;");
        }

        #endregion

        #region Nested classes
        #region Builder
        public partial class Builder
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/TracingConfig.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Webkit.TracingConfig"/></returns>
            public Android.Webkit.TracingConfig Build()
            {
                return IExecuteWithSignature<Android.Webkit.TracingConfig>("build", "()Landroid/webkit/TracingConfig;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/TracingConfig.Builder.html#addCategories(int[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Webkit.TracingConfig.Builder"/></returns>
            public Android.Webkit.TracingConfig.Builder AddCategories(params int[] arg0)
            {
                if (arg0.Length == 0) return IExecuteWithSignature<Android.Webkit.TracingConfig.Builder>("addCategories", "([I)Landroid/webkit/TracingConfig$Builder;"); else return IExecuteWithSignature<Android.Webkit.TracingConfig.Builder>("addCategories", "([I)Landroid/webkit/TracingConfig$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/TracingConfig.Builder.html#addCategories(java.lang.String[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Webkit.TracingConfig.Builder"/></returns>
            public Android.Webkit.TracingConfig.Builder AddCategories(params Java.Lang.String[] arg0)
            {
                if (arg0.Length == 0) return IExecuteWithSignature<Android.Webkit.TracingConfig.Builder>("addCategories", "([Ljava/lang/String;)Landroid/webkit/TracingConfig$Builder;"); else return IExecuteWithSignature<Android.Webkit.TracingConfig.Builder>("addCategories", "([Ljava/lang/String;)Landroid/webkit/TracingConfig$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/TracingConfig.Builder.html#addCategories(java.util.Collection)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.Collection"/></param>
            /// <returns><see cref="Android.Webkit.TracingConfig.Builder"/></returns>
            public Android.Webkit.TracingConfig.Builder AddCategories(Java.Util.Collection<Java.Lang.String> arg0)
            {
                return IExecuteWithSignature<Android.Webkit.TracingConfig.Builder>("addCategories", "(Ljava/util/Collection;)Landroid/webkit/TracingConfig$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/TracingConfig.Builder.html#setTracingMode(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Webkit.TracingConfig.Builder"/></returns>
            public Android.Webkit.TracingConfig.Builder SetTracingMode(int arg0)
            {
                return IExecuteWithSignature<Android.Webkit.TracingConfig.Builder>("setTracingMode", "(I)Landroid/webkit/TracingConfig$Builder;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
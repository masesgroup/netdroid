/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Webkit
{
    #region WebSettings
    public partial class WebSettings
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#LOAD_CACHE_ELSE_NETWORK"/>
        /// </summary>
        public static int LOAD_CACHE_ELSE_NETWORK { get { if (!_LOAD_CACHE_ELSE_NETWORKReady) { _LOAD_CACHE_ELSE_NETWORKContent = SGetField<int>(LocalBridgeClazz, "LOAD_CACHE_ELSE_NETWORK"); _LOAD_CACHE_ELSE_NETWORKReady = true; } return _LOAD_CACHE_ELSE_NETWORKContent; } }
        private static int _LOAD_CACHE_ELSE_NETWORKContent = default;
        private static bool _LOAD_CACHE_ELSE_NETWORKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#LOAD_CACHE_ONLY"/>
        /// </summary>
        public static int LOAD_CACHE_ONLY { get { if (!_LOAD_CACHE_ONLYReady) { _LOAD_CACHE_ONLYContent = SGetField<int>(LocalBridgeClazz, "LOAD_CACHE_ONLY"); _LOAD_CACHE_ONLYReady = true; } return _LOAD_CACHE_ONLYContent; } }
        private static int _LOAD_CACHE_ONLYContent = default;
        private static bool _LOAD_CACHE_ONLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#LOAD_DEFAULT"/>
        /// </summary>
        public static int LOAD_DEFAULT { get { if (!_LOAD_DEFAULTReady) { _LOAD_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "LOAD_DEFAULT"); _LOAD_DEFAULTReady = true; } return _LOAD_DEFAULTContent; } }
        private static int _LOAD_DEFAULTContent = default;
        private static bool _LOAD_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#LOAD_NO_CACHE"/>
        /// </summary>
        public static int LOAD_NO_CACHE { get { if (!_LOAD_NO_CACHEReady) { _LOAD_NO_CACHEContent = SGetField<int>(LocalBridgeClazz, "LOAD_NO_CACHE"); _LOAD_NO_CACHEReady = true; } return _LOAD_NO_CACHEContent; } }
        private static int _LOAD_NO_CACHEContent = default;
        private static bool _LOAD_NO_CACHEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#MENU_ITEM_NONE"/>
        /// </summary>
        public static int MENU_ITEM_NONE { get { if (!_MENU_ITEM_NONEReady) { _MENU_ITEM_NONEContent = SGetField<int>(LocalBridgeClazz, "MENU_ITEM_NONE"); _MENU_ITEM_NONEReady = true; } return _MENU_ITEM_NONEContent; } }
        private static int _MENU_ITEM_NONEContent = default;
        private static bool _MENU_ITEM_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#MENU_ITEM_PROCESS_TEXT"/>
        /// </summary>
        public static int MENU_ITEM_PROCESS_TEXT { get { if (!_MENU_ITEM_PROCESS_TEXTReady) { _MENU_ITEM_PROCESS_TEXTContent = SGetField<int>(LocalBridgeClazz, "MENU_ITEM_PROCESS_TEXT"); _MENU_ITEM_PROCESS_TEXTReady = true; } return _MENU_ITEM_PROCESS_TEXTContent; } }
        private static int _MENU_ITEM_PROCESS_TEXTContent = default;
        private static bool _MENU_ITEM_PROCESS_TEXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#MENU_ITEM_SHARE"/>
        /// </summary>
        public static int MENU_ITEM_SHARE { get { if (!_MENU_ITEM_SHAREReady) { _MENU_ITEM_SHAREContent = SGetField<int>(LocalBridgeClazz, "MENU_ITEM_SHARE"); _MENU_ITEM_SHAREReady = true; } return _MENU_ITEM_SHAREContent; } }
        private static int _MENU_ITEM_SHAREContent = default;
        private static bool _MENU_ITEM_SHAREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#MENU_ITEM_WEB_SEARCH"/>
        /// </summary>
        public static int MENU_ITEM_WEB_SEARCH { get { if (!_MENU_ITEM_WEB_SEARCHReady) { _MENU_ITEM_WEB_SEARCHContent = SGetField<int>(LocalBridgeClazz, "MENU_ITEM_WEB_SEARCH"); _MENU_ITEM_WEB_SEARCHReady = true; } return _MENU_ITEM_WEB_SEARCHContent; } }
        private static int _MENU_ITEM_WEB_SEARCHContent = default;
        private static bool _MENU_ITEM_WEB_SEARCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#MIXED_CONTENT_ALWAYS_ALLOW"/>
        /// </summary>
        public static int MIXED_CONTENT_ALWAYS_ALLOW { get { if (!_MIXED_CONTENT_ALWAYS_ALLOWReady) { _MIXED_CONTENT_ALWAYS_ALLOWContent = SGetField<int>(LocalBridgeClazz, "MIXED_CONTENT_ALWAYS_ALLOW"); _MIXED_CONTENT_ALWAYS_ALLOWReady = true; } return _MIXED_CONTENT_ALWAYS_ALLOWContent; } }
        private static int _MIXED_CONTENT_ALWAYS_ALLOWContent = default;
        private static bool _MIXED_CONTENT_ALWAYS_ALLOWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#MIXED_CONTENT_COMPATIBILITY_MODE"/>
        /// </summary>
        public static int MIXED_CONTENT_COMPATIBILITY_MODE { get { if (!_MIXED_CONTENT_COMPATIBILITY_MODEReady) { _MIXED_CONTENT_COMPATIBILITY_MODEContent = SGetField<int>(LocalBridgeClazz, "MIXED_CONTENT_COMPATIBILITY_MODE"); _MIXED_CONTENT_COMPATIBILITY_MODEReady = true; } return _MIXED_CONTENT_COMPATIBILITY_MODEContent; } }
        private static int _MIXED_CONTENT_COMPATIBILITY_MODEContent = default;
        private static bool _MIXED_CONTENT_COMPATIBILITY_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#MIXED_CONTENT_NEVER_ALLOW"/>
        /// </summary>
        public static int MIXED_CONTENT_NEVER_ALLOW { get { if (!_MIXED_CONTENT_NEVER_ALLOWReady) { _MIXED_CONTENT_NEVER_ALLOWContent = SGetField<int>(LocalBridgeClazz, "MIXED_CONTENT_NEVER_ALLOW"); _MIXED_CONTENT_NEVER_ALLOWReady = true; } return _MIXED_CONTENT_NEVER_ALLOWContent; } }
        private static int _MIXED_CONTENT_NEVER_ALLOWContent = default;
        private static bool _MIXED_CONTENT_NEVER_ALLOWReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getDefaultUserAgent(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String GetDefaultUserAgent(Android.Content.Context arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "getDefaultUserAgent", "(Landroid/content/Context;)Ljava/lang/String;", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getAllowContentAccess()"/> <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setAllowContentAccess(boolean)"/>
        /// </summary>
        public bool AllowContentAccess
        {
            get { return IExecuteWithSignature<bool>("getAllowContentAccess", "()Z"); } set { IExecuteWithSignature("setAllowContentAccess", "(Z)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getAllowFileAccess()"/> <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setAllowFileAccess(boolean)"/>
        /// </summary>
        public bool AllowFileAccess
        {
            get { return IExecuteWithSignature<bool>("getAllowFileAccess", "()Z"); } set { IExecuteWithSignature("setAllowFileAccess", "(Z)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getAllowFileAccessFromFileURLs()"/> 
        /// </summary>
        public bool AllowFileAccessFromFileURLs
        {
            get { return IExecuteWithSignature<bool>("getAllowFileAccessFromFileURLs", "()Z"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getAllowUniversalAccessFromFileURLs()"/> 
        /// </summary>
        public bool AllowUniversalAccessFromFileURLs
        {
            get { return IExecuteWithSignature<bool>("getAllowUniversalAccessFromFileURLs", "()Z"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getBlockNetworkImage()"/> <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setBlockNetworkImage(boolean)"/>
        /// </summary>
        public bool BlockNetworkImage
        {
            get { return IExecuteWithSignature<bool>("getBlockNetworkImage", "()Z"); } set { IExecuteWithSignature("setBlockNetworkImage", "(Z)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getBlockNetworkLoads()"/> <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setBlockNetworkLoads(boolean)"/>
        /// </summary>
        public bool BlockNetworkLoads
        {
            get { return IExecuteWithSignature<bool>("getBlockNetworkLoads", "()Z"); } set { IExecuteWithSignature("setBlockNetworkLoads", "(Z)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getBuiltInZoomControls()"/> <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setBuiltInZoomControls(boolean)"/>
        /// </summary>
        public bool BuiltInZoomControls
        {
            get { return IExecuteWithSignature<bool>("getBuiltInZoomControls", "()Z"); } set { IExecuteWithSignature("setBuiltInZoomControls", "(Z)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getCacheMode()"/> <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setCacheMode(int)"/>
        /// </summary>
        public int CacheMode
        {
            get { return IExecuteWithSignature<int>("getCacheMode", "()I"); } set { IExecuteWithSignature("setCacheMode", "(I)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getCursiveFontFamily()"/> <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setCursiveFontFamily(java.lang.String)"/>
        /// </summary>
        public Java.Lang.String CursiveFontFamily
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getCursiveFontFamily", "()Ljava/lang/String;"); } set { IExecuteWithSignature("setCursiveFontFamily", "(Ljava/lang/String;)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getDatabaseEnabled()"/> <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setDatabaseEnabled(boolean)"/>
        /// </summary>
        public bool DatabaseEnabled
        {
            get { return IExecuteWithSignature<bool>("getDatabaseEnabled", "()Z"); } set { IExecuteWithSignature("setDatabaseEnabled", "(Z)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getDefaultFixedFontSize()"/> <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setDefaultFixedFontSize(int)"/>
        /// </summary>
        public int DefaultFixedFontSize
        {
            get { return IExecuteWithSignature<int>("getDefaultFixedFontSize", "()I"); } set { IExecuteWithSignature("setDefaultFixedFontSize", "(I)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getDefaultFontSize()"/> <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setDefaultFontSize(int)"/>
        /// </summary>
        public int DefaultFontSize
        {
            get { return IExecuteWithSignature<int>("getDefaultFontSize", "()I"); } set { IExecuteWithSignature("setDefaultFontSize", "(I)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getDefaultTextEncodingName()"/> <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setDefaultTextEncodingName(java.lang.String)"/>
        /// </summary>
        public Java.Lang.String DefaultTextEncodingName
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getDefaultTextEncodingName", "()Ljava/lang/String;"); } set { IExecuteWithSignature("setDefaultTextEncodingName", "(Ljava/lang/String;)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getDisabledActionModeMenuItems()"/> <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setDisabledActionModeMenuItems(int)"/>
        /// </summary>
        public int DisabledActionModeMenuItems
        {
            get { return IExecuteWithSignature<int>("getDisabledActionModeMenuItems", "()I"); } set { IExecuteWithSignature("setDisabledActionModeMenuItems", "(I)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getDisplayZoomControls()"/> <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setDisplayZoomControls(boolean)"/>
        /// </summary>
        public bool DisplayZoomControls
        {
            get { return IExecuteWithSignature<bool>("getDisplayZoomControls", "()Z"); } set { IExecuteWithSignature("setDisplayZoomControls", "(Z)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getDomStorageEnabled()"/> <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setDomStorageEnabled(boolean)"/>
        /// </summary>
        public bool DomStorageEnabled
        {
            get { return IExecuteWithSignature<bool>("getDomStorageEnabled", "()Z"); } set { IExecuteWithSignature("setDomStorageEnabled", "(Z)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getFantasyFontFamily()"/> <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setFantasyFontFamily(java.lang.String)"/>
        /// </summary>
        public Java.Lang.String FantasyFontFamily
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getFantasyFontFamily", "()Ljava/lang/String;"); } set { IExecuteWithSignature("setFantasyFontFamily", "(Ljava/lang/String;)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getFixedFontFamily()"/> <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setFixedFontFamily(java.lang.String)"/>
        /// </summary>
        public Java.Lang.String FixedFontFamily
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getFixedFontFamily", "()Ljava/lang/String;"); } set { IExecuteWithSignature("setFixedFontFamily", "(Ljava/lang/String;)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getLayoutAlgorithm()"/> 
        /// </summary>
        public Android.Webkit.WebSettings.LayoutAlgorithm GetLayoutAlgorithm
        {
            get { return IExecuteWithSignature<Android.Webkit.WebSettings.LayoutAlgorithm>("getLayoutAlgorithm", "()Landroid/webkit/WebSettings$LayoutAlgorithm;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getJavaScriptCanOpenWindowsAutomatically()"/> <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setJavaScriptCanOpenWindowsAutomatically(boolean)"/>
        /// </summary>
        public bool JavaScriptCanOpenWindowsAutomatically
        {
            get { return IExecuteWithSignature<bool>("getJavaScriptCanOpenWindowsAutomatically", "()Z"); } set { IExecuteWithSignature("setJavaScriptCanOpenWindowsAutomatically", "(Z)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getJavaScriptEnabled()"/> <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setJavaScriptEnabled(boolean)"/>
        /// </summary>
        public bool JavaScriptEnabled
        {
            get { return IExecuteWithSignature<bool>("getJavaScriptEnabled", "()Z"); } set { IExecuteWithSignature("setJavaScriptEnabled", "(Z)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getLoadsImagesAutomatically()"/> <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setLoadsImagesAutomatically(boolean)"/>
        /// </summary>
        public bool LoadsImagesAutomatically
        {
            get { return IExecuteWithSignature<bool>("getLoadsImagesAutomatically", "()Z"); } set { IExecuteWithSignature("setLoadsImagesAutomatically", "(Z)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getLoadWithOverviewMode()"/> <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setLoadWithOverviewMode(boolean)"/>
        /// </summary>
        public bool LoadWithOverviewMode
        {
            get { return IExecuteWithSignature<bool>("getLoadWithOverviewMode", "()Z"); } set { IExecuteWithSignature("setLoadWithOverviewMode", "(Z)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getMediaPlaybackRequiresUserGesture()"/> <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setMediaPlaybackRequiresUserGesture(boolean)"/>
        /// </summary>
        public bool MediaPlaybackRequiresUserGesture
        {
            get { return IExecuteWithSignature<bool>("getMediaPlaybackRequiresUserGesture", "()Z"); } set { IExecuteWithSignature("setMediaPlaybackRequiresUserGesture", "(Z)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getMinimumFontSize()"/> <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setMinimumFontSize(int)"/>
        /// </summary>
        public int MinimumFontSize
        {
            get { return IExecuteWithSignature<int>("getMinimumFontSize", "()I"); } set { IExecuteWithSignature("setMinimumFontSize", "(I)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getMinimumLogicalFontSize()"/> <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setMinimumLogicalFontSize(int)"/>
        /// </summary>
        public int MinimumLogicalFontSize
        {
            get { return IExecuteWithSignature<int>("getMinimumLogicalFontSize", "()I"); } set { IExecuteWithSignature("setMinimumLogicalFontSize", "(I)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getMixedContentMode()"/> <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setMixedContentMode(int)"/>
        /// </summary>
        public int MixedContentMode
        {
            get { return IExecuteWithSignature<int>("getMixedContentMode", "()I"); } set { IExecuteWithSignature("setMixedContentMode", "(I)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getOffscreenPreRaster()"/> <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setOffscreenPreRaster(boolean)"/>
        /// </summary>
        public bool OffscreenPreRaster
        {
            get { return IExecuteWithSignature<bool>("getOffscreenPreRaster", "()Z"); } set { IExecuteWithSignature("setOffscreenPreRaster", "(Z)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getSafeBrowsingEnabled()"/> <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setSafeBrowsingEnabled(boolean)"/>
        /// </summary>
        public bool SafeBrowsingEnabled
        {
            get { return IExecuteWithSignature<bool>("getSafeBrowsingEnabled", "()Z"); } set { IExecuteWithSignature("setSafeBrowsingEnabled", "(Z)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getSansSerifFontFamily()"/> <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setSansSerifFontFamily(java.lang.String)"/>
        /// </summary>
        public Java.Lang.String SansSerifFontFamily
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getSansSerifFontFamily", "()Ljava/lang/String;"); } set { IExecuteWithSignature("setSansSerifFontFamily", "(Ljava/lang/String;)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getSerifFontFamily()"/> <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setSerifFontFamily(java.lang.String)"/>
        /// </summary>
        public Java.Lang.String SerifFontFamily
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getSerifFontFamily", "()Ljava/lang/String;"); } set { IExecuteWithSignature("setSerifFontFamily", "(Ljava/lang/String;)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getStandardFontFamily()"/> <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setStandardFontFamily(java.lang.String)"/>
        /// </summary>
        public Java.Lang.String StandardFontFamily
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getStandardFontFamily", "()Ljava/lang/String;"); } set { IExecuteWithSignature("setStandardFontFamily", "(Ljava/lang/String;)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getTextZoom()"/> <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setTextZoom(int)"/>
        /// </summary>
        public int TextZoom
        {
            get { return IExecuteWithSignature<int>("getTextZoom", "()I"); } set { IExecuteWithSignature("setTextZoom", "(I)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getUserAgentString()"/> <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setUserAgentString(java.lang.String)"/>
        /// </summary>
        public Java.Lang.String UserAgentString
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getUserAgentString", "()Ljava/lang/String;"); } set { IExecuteWithSignature("setUserAgentString", "(Ljava/lang/String;)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getUseWideViewPort()"/> <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setUseWideViewPort(boolean)"/>
        /// </summary>
        public bool UseWideViewPort
        {
            get { return IExecuteWithSignature<bool>("getUseWideViewPort", "()Z"); } set { IExecuteWithSignature("setUseWideViewPort", "(Z)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#supportMultipleWindows()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool SupportMultipleWindows()
        {
            return IExecuteWithSignature<bool>("supportMultipleWindows", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#supportZoom()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool SupportZoom()
        {
            return IExecuteWithSignature<bool>("supportZoom", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setGeolocationEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetGeolocationEnabled(bool arg0)
        {
            IExecuteWithSignature("setGeolocationEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setLayoutAlgorithm(android.webkit.WebSettings.LayoutAlgorithm)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Webkit.WebSettings.LayoutAlgorithm"/></param>
        public void SetLayoutAlgorithm(Android.Webkit.WebSettings.LayoutAlgorithm arg0)
        {
            IExecuteWithSignature("setLayoutAlgorithm", "(Landroid/webkit/WebSettings$LayoutAlgorithm;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setNeedInitialFocus(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetNeedInitialFocus(bool arg0)
        {
            IExecuteWithSignature("setNeedInitialFocus", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setSupportMultipleWindows(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetSupportMultipleWindows(bool arg0)
        {
            IExecuteWithSignature("setSupportMultipleWindows", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setSupportZoom(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetSupportZoom(bool arg0)
        {
            IExecuteWithSignature("setSupportZoom", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#isAlgorithmicDarkeningAllowed()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAlgorithmicDarkeningAllowed()
        {
            return IExecuteWithSignature<bool>("isAlgorithmicDarkeningAllowed", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setAlgorithmicDarkeningAllowed(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetAlgorithmicDarkeningAllowed(bool arg0)
        {
            IExecuteWithSignature("setAlgorithmicDarkeningAllowed", "(Z)V", arg0);
        }

        #endregion

        #region Nested classes
        #region LayoutAlgorithm
        public partial class LayoutAlgorithm
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.LayoutAlgorithm.html#NORMAL"/>
            /// </summary>
            public static Android.Webkit.WebSettings.LayoutAlgorithm NORMAL { get { if (!_NORMALReady) { _NORMALContent = SGetField<Android.Webkit.WebSettings.LayoutAlgorithm>(LocalBridgeClazz, "NORMAL"); _NORMALReady = true; } return _NORMALContent; } }
            private static Android.Webkit.WebSettings.LayoutAlgorithm _NORMALContent = default;
            private static bool _NORMALReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.LayoutAlgorithm.html#TEXT_AUTOSIZING"/>
            /// </summary>
            public static Android.Webkit.WebSettings.LayoutAlgorithm TEXT_AUTOSIZING { get { if (!_TEXT_AUTOSIZINGReady) { _TEXT_AUTOSIZINGContent = SGetField<Android.Webkit.WebSettings.LayoutAlgorithm>(LocalBridgeClazz, "TEXT_AUTOSIZING"); _TEXT_AUTOSIZINGReady = true; } return _TEXT_AUTOSIZINGContent; } }
            private static Android.Webkit.WebSettings.LayoutAlgorithm _TEXT_AUTOSIZINGContent = default;
            private static bool _TEXT_AUTOSIZINGReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.LayoutAlgorithm.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Webkit.WebSettings.LayoutAlgorithm"/></returns>
            public static Android.Webkit.WebSettings.LayoutAlgorithm ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Webkit.WebSettings.LayoutAlgorithm>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/webkit/WebSettings$LayoutAlgorithm;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.LayoutAlgorithm.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.Webkit.WebSettings.LayoutAlgorithm"/></returns>
            public static Android.Webkit.WebSettings.LayoutAlgorithm[] Values()
            {
                return SExecuteWithSignatureArray<Android.Webkit.WebSettings.LayoutAlgorithm>(LocalBridgeClazz, "values", "()[Landroid/webkit/WebSettings$LayoutAlgorithm;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region PluginState
        public partial class PluginState
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.PluginState.html#OFF"/>
            /// </summary>
            public static Android.Webkit.WebSettings.PluginState OFF { get { if (!_OFFReady) { _OFFContent = SGetField<Android.Webkit.WebSettings.PluginState>(LocalBridgeClazz, "OFF"); _OFFReady = true; } return _OFFContent; } }
            private static Android.Webkit.WebSettings.PluginState _OFFContent = default;
            private static bool _OFFReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.PluginState.html#ON"/>
            /// </summary>
            public static Android.Webkit.WebSettings.PluginState ON { get { if (!_ONReady) { _ONContent = SGetField<Android.Webkit.WebSettings.PluginState>(LocalBridgeClazz, "ON"); _ONReady = true; } return _ONContent; } }
            private static Android.Webkit.WebSettings.PluginState _ONContent = default;
            private static bool _ONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.PluginState.html#ON_DEMAND"/>
            /// </summary>
            public static Android.Webkit.WebSettings.PluginState ON_DEMAND { get { if (!_ON_DEMANDReady) { _ON_DEMANDContent = SGetField<Android.Webkit.WebSettings.PluginState>(LocalBridgeClazz, "ON_DEMAND"); _ON_DEMANDReady = true; } return _ON_DEMANDContent; } }
            private static Android.Webkit.WebSettings.PluginState _ON_DEMANDContent = default;
            private static bool _ON_DEMANDReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.PluginState.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Webkit.WebSettings.PluginState"/></returns>
            public static Android.Webkit.WebSettings.PluginState ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Webkit.WebSettings.PluginState>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/webkit/WebSettings$PluginState;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.PluginState.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.Webkit.WebSettings.PluginState"/></returns>
            public static Android.Webkit.WebSettings.PluginState[] Values()
            {
                return SExecuteWithSignatureArray<Android.Webkit.WebSettings.PluginState>(LocalBridgeClazz, "values", "()[Landroid/webkit/WebSettings$PluginState;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region RenderPriority
        public partial class RenderPriority
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.RenderPriority.html#HIGH"/>
            /// </summary>
            public static Android.Webkit.WebSettings.RenderPriority HIGH { get { if (!_HIGHReady) { _HIGHContent = SGetField<Android.Webkit.WebSettings.RenderPriority>(LocalBridgeClazz, "HIGH"); _HIGHReady = true; } return _HIGHContent; } }
            private static Android.Webkit.WebSettings.RenderPriority _HIGHContent = default;
            private static bool _HIGHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.RenderPriority.html#LOW"/>
            /// </summary>
            public static Android.Webkit.WebSettings.RenderPriority LOW { get { if (!_LOWReady) { _LOWContent = SGetField<Android.Webkit.WebSettings.RenderPriority>(LocalBridgeClazz, "LOW"); _LOWReady = true; } return _LOWContent; } }
            private static Android.Webkit.WebSettings.RenderPriority _LOWContent = default;
            private static bool _LOWReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.RenderPriority.html#NORMAL"/>
            /// </summary>
            public static Android.Webkit.WebSettings.RenderPriority NORMAL { get { if (!_NORMALReady) { _NORMALContent = SGetField<Android.Webkit.WebSettings.RenderPriority>(LocalBridgeClazz, "NORMAL"); _NORMALReady = true; } return _NORMALContent; } }
            private static Android.Webkit.WebSettings.RenderPriority _NORMALContent = default;
            private static bool _NORMALReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.RenderPriority.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Webkit.WebSettings.RenderPriority"/></returns>
            public static Android.Webkit.WebSettings.RenderPriority ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Webkit.WebSettings.RenderPriority>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/webkit/WebSettings$RenderPriority;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.RenderPriority.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.Webkit.WebSettings.RenderPriority"/></returns>
            public static Android.Webkit.WebSettings.RenderPriority[] Values()
            {
                return SExecuteWithSignatureArray<Android.Webkit.WebSettings.RenderPriority>(LocalBridgeClazz, "values", "()[Landroid/webkit/WebSettings$RenderPriority;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ZoomDensity
        public partial class ZoomDensity
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.ZoomDensity.html#CLOSE"/>
            /// </summary>
            public static Android.Webkit.WebSettings.ZoomDensity CLOSE { get { if (!_CLOSEReady) { _CLOSEContent = SGetField<Android.Webkit.WebSettings.ZoomDensity>(LocalBridgeClazz, "CLOSE"); _CLOSEReady = true; } return _CLOSEContent; } }
            private static Android.Webkit.WebSettings.ZoomDensity _CLOSEContent = default;
            private static bool _CLOSEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.ZoomDensity.html#FAR"/>
            /// </summary>
            public static Android.Webkit.WebSettings.ZoomDensity FAR { get { if (!_FARReady) { _FARContent = SGetField<Android.Webkit.WebSettings.ZoomDensity>(LocalBridgeClazz, "FAR"); _FARReady = true; } return _FARContent; } }
            private static Android.Webkit.WebSettings.ZoomDensity _FARContent = default;
            private static bool _FARReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.ZoomDensity.html#MEDIUM"/>
            /// </summary>
            public static Android.Webkit.WebSettings.ZoomDensity MEDIUM { get { if (!_MEDIUMReady) { _MEDIUMContent = SGetField<Android.Webkit.WebSettings.ZoomDensity>(LocalBridgeClazz, "MEDIUM"); _MEDIUMReady = true; } return _MEDIUMContent; } }
            private static Android.Webkit.WebSettings.ZoomDensity _MEDIUMContent = default;
            private static bool _MEDIUMReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.ZoomDensity.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Webkit.WebSettings.ZoomDensity"/></returns>
            public static Android.Webkit.WebSettings.ZoomDensity ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Webkit.WebSettings.ZoomDensity>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/webkit/WebSettings$ZoomDensity;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.ZoomDensity.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.Webkit.WebSettings.ZoomDensity"/></returns>
            public static Android.Webkit.WebSettings.ZoomDensity[] Values()
            {
                return SExecuteWithSignatureArray<Android.Webkit.WebSettings.ZoomDensity>(LocalBridgeClazz, "values", "()[Landroid/webkit/WebSettings$ZoomDensity;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
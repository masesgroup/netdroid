/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.8.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Webkit
{
    #region WebSettings
    public partial class WebSettings
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#FORCE_DARK_AUTO"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int FORCE_DARK_AUTO { get { if (!_FORCE_DARK_AUTOReady) { _FORCE_DARK_AUTOContent = SGetField<int>(LocalBridgeClazz, "FORCE_DARK_AUTO"); _FORCE_DARK_AUTOReady = true; } return _FORCE_DARK_AUTOContent; } }
        private static int _FORCE_DARK_AUTOContent = default;
        private static bool _FORCE_DARK_AUTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#FORCE_DARK_OFF"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int FORCE_DARK_OFF { get { if (!_FORCE_DARK_OFFReady) { _FORCE_DARK_OFFContent = SGetField<int>(LocalBridgeClazz, "FORCE_DARK_OFF"); _FORCE_DARK_OFFReady = true; } return _FORCE_DARK_OFFContent; } }
        private static int _FORCE_DARK_OFFContent = default;
        private static bool _FORCE_DARK_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#FORCE_DARK_ON"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int FORCE_DARK_ON { get { if (!_FORCE_DARK_ONReady) { _FORCE_DARK_ONContent = SGetField<int>(LocalBridgeClazz, "FORCE_DARK_ON"); _FORCE_DARK_ONReady = true; } return _FORCE_DARK_ONContent; } }
        private static int _FORCE_DARK_ONContent = default;
        private static bool _FORCE_DARK_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#LOAD_CACHE_ELSE_NETWORK"/>
        /// </summary>
        public static int LOAD_CACHE_ELSE_NETWORK { get { if (!_LOAD_CACHE_ELSE_NETWORKReady) { _LOAD_CACHE_ELSE_NETWORKContent = SGetField<int>(LocalBridgeClazz, "LOAD_CACHE_ELSE_NETWORK"); _LOAD_CACHE_ELSE_NETWORKReady = true; } return _LOAD_CACHE_ELSE_NETWORKContent; } }
        private static int _LOAD_CACHE_ELSE_NETWORKContent = default;
        private static bool _LOAD_CACHE_ELSE_NETWORKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#LOAD_CACHE_ONLY"/>
        /// </summary>
        public static int LOAD_CACHE_ONLY { get { if (!_LOAD_CACHE_ONLYReady) { _LOAD_CACHE_ONLYContent = SGetField<int>(LocalBridgeClazz, "LOAD_CACHE_ONLY"); _LOAD_CACHE_ONLYReady = true; } return _LOAD_CACHE_ONLYContent; } }
        private static int _LOAD_CACHE_ONLYContent = default;
        private static bool _LOAD_CACHE_ONLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#LOAD_DEFAULT"/>
        /// </summary>
        public static int LOAD_DEFAULT { get { if (!_LOAD_DEFAULTReady) { _LOAD_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "LOAD_DEFAULT"); _LOAD_DEFAULTReady = true; } return _LOAD_DEFAULTContent; } }
        private static int _LOAD_DEFAULTContent = default;
        private static bool _LOAD_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#LOAD_NO_CACHE"/>
        /// </summary>
        public static int LOAD_NO_CACHE { get { if (!_LOAD_NO_CACHEReady) { _LOAD_NO_CACHEContent = SGetField<int>(LocalBridgeClazz, "LOAD_NO_CACHE"); _LOAD_NO_CACHEReady = true; } return _LOAD_NO_CACHEContent; } }
        private static int _LOAD_NO_CACHEContent = default;
        private static bool _LOAD_NO_CACHEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#LOAD_NORMAL"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int LOAD_NORMAL { get { if (!_LOAD_NORMALReady) { _LOAD_NORMALContent = SGetField<int>(LocalBridgeClazz, "LOAD_NORMAL"); _LOAD_NORMALReady = true; } return _LOAD_NORMALContent; } }
        private static int _LOAD_NORMALContent = default;
        private static bool _LOAD_NORMALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#MENU_ITEM_NONE"/>
        /// </summary>
        public static int MENU_ITEM_NONE { get { if (!_MENU_ITEM_NONEReady) { _MENU_ITEM_NONEContent = SGetField<int>(LocalBridgeClazz, "MENU_ITEM_NONE"); _MENU_ITEM_NONEReady = true; } return _MENU_ITEM_NONEContent; } }
        private static int _MENU_ITEM_NONEContent = default;
        private static bool _MENU_ITEM_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#MENU_ITEM_PROCESS_TEXT"/>
        /// </summary>
        public static int MENU_ITEM_PROCESS_TEXT { get { if (!_MENU_ITEM_PROCESS_TEXTReady) { _MENU_ITEM_PROCESS_TEXTContent = SGetField<int>(LocalBridgeClazz, "MENU_ITEM_PROCESS_TEXT"); _MENU_ITEM_PROCESS_TEXTReady = true; } return _MENU_ITEM_PROCESS_TEXTContent; } }
        private static int _MENU_ITEM_PROCESS_TEXTContent = default;
        private static bool _MENU_ITEM_PROCESS_TEXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#MENU_ITEM_SHARE"/>
        /// </summary>
        public static int MENU_ITEM_SHARE { get { if (!_MENU_ITEM_SHAREReady) { _MENU_ITEM_SHAREContent = SGetField<int>(LocalBridgeClazz, "MENU_ITEM_SHARE"); _MENU_ITEM_SHAREReady = true; } return _MENU_ITEM_SHAREContent; } }
        private static int _MENU_ITEM_SHAREContent = default;
        private static bool _MENU_ITEM_SHAREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#MENU_ITEM_WEB_SEARCH"/>
        /// </summary>
        public static int MENU_ITEM_WEB_SEARCH { get { if (!_MENU_ITEM_WEB_SEARCHReady) { _MENU_ITEM_WEB_SEARCHContent = SGetField<int>(LocalBridgeClazz, "MENU_ITEM_WEB_SEARCH"); _MENU_ITEM_WEB_SEARCHReady = true; } return _MENU_ITEM_WEB_SEARCHContent; } }
        private static int _MENU_ITEM_WEB_SEARCHContent = default;
        private static bool _MENU_ITEM_WEB_SEARCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#MIXED_CONTENT_ALWAYS_ALLOW"/>
        /// </summary>
        public static int MIXED_CONTENT_ALWAYS_ALLOW { get { if (!_MIXED_CONTENT_ALWAYS_ALLOWReady) { _MIXED_CONTENT_ALWAYS_ALLOWContent = SGetField<int>(LocalBridgeClazz, "MIXED_CONTENT_ALWAYS_ALLOW"); _MIXED_CONTENT_ALWAYS_ALLOWReady = true; } return _MIXED_CONTENT_ALWAYS_ALLOWContent; } }
        private static int _MIXED_CONTENT_ALWAYS_ALLOWContent = default;
        private static bool _MIXED_CONTENT_ALWAYS_ALLOWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#MIXED_CONTENT_COMPATIBILITY_MODE"/>
        /// </summary>
        public static int MIXED_CONTENT_COMPATIBILITY_MODE { get { if (!_MIXED_CONTENT_COMPATIBILITY_MODEReady) { _MIXED_CONTENT_COMPATIBILITY_MODEContent = SGetField<int>(LocalBridgeClazz, "MIXED_CONTENT_COMPATIBILITY_MODE"); _MIXED_CONTENT_COMPATIBILITY_MODEReady = true; } return _MIXED_CONTENT_COMPATIBILITY_MODEContent; } }
        private static int _MIXED_CONTENT_COMPATIBILITY_MODEContent = default;
        private static bool _MIXED_CONTENT_COMPATIBILITY_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#MIXED_CONTENT_NEVER_ALLOW"/>
        /// </summary>
        public static int MIXED_CONTENT_NEVER_ALLOW { get { if (!_MIXED_CONTENT_NEVER_ALLOWReady) { _MIXED_CONTENT_NEVER_ALLOWContent = SGetField<int>(LocalBridgeClazz, "MIXED_CONTENT_NEVER_ALLOW"); _MIXED_CONTENT_NEVER_ALLOWReady = true; } return _MIXED_CONTENT_NEVER_ALLOWContent; } }
        private static int _MIXED_CONTENT_NEVER_ALLOWContent = default;
        private static bool _MIXED_CONTENT_NEVER_ALLOWReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getDefaultUserAgent(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String GetDefaultUserAgent(Android.Content.Context arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "getDefaultUserAgent", "(Landroid/content/Context;)Ljava/lang/String;", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getLayoutAlgorithm()"/>
        /// </summary>
        /// <returns><see cref="Android.Webkit.WebSettings.LayoutAlgorithm"/></returns>
        public Android.Webkit.WebSettings.LayoutAlgorithm GetLayoutAlgorithm()
        {
            return IExecuteWithSignature<Android.Webkit.WebSettings.LayoutAlgorithm>("getLayoutAlgorithm", "()Landroid/webkit/WebSettings$LayoutAlgorithm;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getPluginState()"/>
        /// </summary>
        /// <returns><see cref="Android.Webkit.WebSettings.PluginState"/></returns>
        [global::System.Obsolete()]
        public Android.Webkit.WebSettings.PluginState GetPluginState()
        {
            return IExecuteWithSignature<Android.Webkit.WebSettings.PluginState>("getPluginState", "()Landroid/webkit/WebSettings$PluginState;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getDefaultZoom()"/>
        /// </summary>
        /// <returns><see cref="Android.Webkit.WebSettings.ZoomDensity"/></returns>
        [global::System.Obsolete()]
        public Android.Webkit.WebSettings.ZoomDensity GetDefaultZoom()
        {
            return IExecuteWithSignature<Android.Webkit.WebSettings.ZoomDensity>("getDefaultZoom", "()Landroid/webkit/WebSettings$ZoomDensity;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#enableSmoothTransition()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool EnableSmoothTransition()
        {
            return IExecuteWithSignature<bool>("enableSmoothTransition", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getAllowContentAccess()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetAllowContentAccess()
        {
            return IExecuteWithSignature<bool>("getAllowContentAccess", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getAllowFileAccess()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetAllowFileAccess()
        {
            return IExecuteWithSignature<bool>("getAllowFileAccess", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getAllowFileAccessFromFileURLs()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetAllowFileAccessFromFileURLs()
        {
            return IExecuteWithSignature<bool>("getAllowFileAccessFromFileURLs", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getAllowUniversalAccessFromFileURLs()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetAllowUniversalAccessFromFileURLs()
        {
            return IExecuteWithSignature<bool>("getAllowUniversalAccessFromFileURLs", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getBlockNetworkImage()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetBlockNetworkImage()
        {
            return IExecuteWithSignature<bool>("getBlockNetworkImage", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getBlockNetworkLoads()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetBlockNetworkLoads()
        {
            return IExecuteWithSignature<bool>("getBlockNetworkLoads", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getBuiltInZoomControls()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetBuiltInZoomControls()
        {
            return IExecuteWithSignature<bool>("getBuiltInZoomControls", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getDatabaseEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool GetDatabaseEnabled()
        {
            return IExecuteWithSignature<bool>("getDatabaseEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getDisplayZoomControls()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetDisplayZoomControls()
        {
            return IExecuteWithSignature<bool>("getDisplayZoomControls", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getDomStorageEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetDomStorageEnabled()
        {
            return IExecuteWithSignature<bool>("getDomStorageEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getJavaScriptCanOpenWindowsAutomatically()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetJavaScriptCanOpenWindowsAutomatically()
        {
            return IExecuteWithSignature<bool>("getJavaScriptCanOpenWindowsAutomatically", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getJavaScriptEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetJavaScriptEnabled()
        {
            return IExecuteWithSignature<bool>("getJavaScriptEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getLightTouchEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool GetLightTouchEnabled()
        {
            return IExecuteWithSignature<bool>("getLightTouchEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getLoadsImagesAutomatically()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetLoadsImagesAutomatically()
        {
            return IExecuteWithSignature<bool>("getLoadsImagesAutomatically", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getLoadWithOverviewMode()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetLoadWithOverviewMode()
        {
            return IExecuteWithSignature<bool>("getLoadWithOverviewMode", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getMediaPlaybackRequiresUserGesture()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetMediaPlaybackRequiresUserGesture()
        {
            return IExecuteWithSignature<bool>("getMediaPlaybackRequiresUserGesture", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getOffscreenPreRaster()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetOffscreenPreRaster()
        {
            return IExecuteWithSignature<bool>("getOffscreenPreRaster", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getSafeBrowsingEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetSafeBrowsingEnabled()
        {
            return IExecuteWithSignature<bool>("getSafeBrowsingEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getSaveFormData()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool GetSaveFormData()
        {
            return IExecuteWithSignature<bool>("getSaveFormData", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getSavePassword()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool GetSavePassword()
        {
            return IExecuteWithSignature<bool>("getSavePassword", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getUseWideViewPort()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetUseWideViewPort()
        {
            return IExecuteWithSignature<bool>("getUseWideViewPort", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#supportMultipleWindows()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool SupportMultipleWindows()
        {
            return IExecuteWithSignature<bool>("supportMultipleWindows", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#supportZoom()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool SupportZoom()
        {
            return IExecuteWithSignature<bool>("supportZoom", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getCacheMode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetCacheMode()
        {
            return IExecuteWithSignature<int>("getCacheMode", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getDefaultFixedFontSize()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetDefaultFixedFontSize()
        {
            return IExecuteWithSignature<int>("getDefaultFixedFontSize", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getDefaultFontSize()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetDefaultFontSize()
        {
            return IExecuteWithSignature<int>("getDefaultFontSize", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getDisabledActionModeMenuItems()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetDisabledActionModeMenuItems()
        {
            return IExecuteWithSignature<int>("getDisabledActionModeMenuItems", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getMinimumFontSize()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMinimumFontSize()
        {
            return IExecuteWithSignature<int>("getMinimumFontSize", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getMinimumLogicalFontSize()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMinimumLogicalFontSize()
        {
            return IExecuteWithSignature<int>("getMinimumLogicalFontSize", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getMixedContentMode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMixedContentMode()
        {
            return IExecuteWithSignature<int>("getMixedContentMode", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getTextZoom()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetTextZoom()
        {
            return IExecuteWithSignature<int>("getTextZoom", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getCursiveFontFamily()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetCursiveFontFamily()
        {
            return IExecuteWithSignature<Java.Lang.String>("getCursiveFontFamily", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getDatabasePath()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        [global::System.Obsolete()]
        public Java.Lang.String GetDatabasePath()
        {
            return IExecuteWithSignature<Java.Lang.String>("getDatabasePath", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getDefaultTextEncodingName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetDefaultTextEncodingName()
        {
            return IExecuteWithSignature<Java.Lang.String>("getDefaultTextEncodingName", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getFantasyFontFamily()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetFantasyFontFamily()
        {
            return IExecuteWithSignature<Java.Lang.String>("getFantasyFontFamily", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getFixedFontFamily()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetFixedFontFamily()
        {
            return IExecuteWithSignature<Java.Lang.String>("getFixedFontFamily", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getSansSerifFontFamily()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetSansSerifFontFamily()
        {
            return IExecuteWithSignature<Java.Lang.String>("getSansSerifFontFamily", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getSerifFontFamily()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetSerifFontFamily()
        {
            return IExecuteWithSignature<Java.Lang.String>("getSerifFontFamily", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getStandardFontFamily()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetStandardFontFamily()
        {
            return IExecuteWithSignature<Java.Lang.String>("getStandardFontFamily", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getUserAgentString()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetUserAgentString()
        {
            return IExecuteWithSignature<Java.Lang.String>("getUserAgentString", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setAllowContentAccess(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetAllowContentAccess(bool arg0)
        {
            IExecuteWithSignature("setAllowContentAccess", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setAllowFileAccess(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetAllowFileAccess(bool arg0)
        {
            IExecuteWithSignature("setAllowFileAccess", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setAllowFileAccessFromFileURLs(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void SetAllowFileAccessFromFileURLs(bool arg0)
        {
            IExecuteWithSignature("setAllowFileAccessFromFileURLs", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setAllowUniversalAccessFromFileURLs(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void SetAllowUniversalAccessFromFileURLs(bool arg0)
        {
            IExecuteWithSignature("setAllowUniversalAccessFromFileURLs", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setBlockNetworkImage(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetBlockNetworkImage(bool arg0)
        {
            IExecuteWithSignature("setBlockNetworkImage", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setBlockNetworkLoads(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetBlockNetworkLoads(bool arg0)
        {
            IExecuteWithSignature("setBlockNetworkLoads", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setBuiltInZoomControls(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetBuiltInZoomControls(bool arg0)
        {
            IExecuteWithSignature("setBuiltInZoomControls", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setCacheMode(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetCacheMode(int arg0)
        {
            IExecuteWithSignature("setCacheMode", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setCursiveFontFamily(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void SetCursiveFontFamily(Java.Lang.String arg0)
        {
            IExecuteWithSignature("setCursiveFontFamily", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setDatabaseEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void SetDatabaseEnabled(bool arg0)
        {
            IExecuteWithSignature("setDatabaseEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setDatabasePath(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        [global::System.Obsolete()]
        public void SetDatabasePath(Java.Lang.String arg0)
        {
            IExecuteWithSignature("setDatabasePath", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setDefaultFixedFontSize(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetDefaultFixedFontSize(int arg0)
        {
            IExecuteWithSignature("setDefaultFixedFontSize", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setDefaultFontSize(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetDefaultFontSize(int arg0)
        {
            IExecuteWithSignature("setDefaultFontSize", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setDefaultTextEncodingName(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void SetDefaultTextEncodingName(Java.Lang.String arg0)
        {
            IExecuteWithSignature("setDefaultTextEncodingName", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setDefaultZoom(android.webkit.WebSettings.ZoomDensity)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Webkit.WebSettings.ZoomDensity"/></param>
        [global::System.Obsolete()]
        public void SetDefaultZoom(Android.Webkit.WebSettings.ZoomDensity arg0)
        {
            IExecuteWithSignature("setDefaultZoom", "(Landroid/webkit/WebSettings$ZoomDensity;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setDisabledActionModeMenuItems(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetDisabledActionModeMenuItems(int arg0)
        {
            IExecuteWithSignature("setDisabledActionModeMenuItems", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setDisplayZoomControls(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetDisplayZoomControls(bool arg0)
        {
            IExecuteWithSignature("setDisplayZoomControls", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setDomStorageEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetDomStorageEnabled(bool arg0)
        {
            IExecuteWithSignature("setDomStorageEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setEnableSmoothTransition(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void SetEnableSmoothTransition(bool arg0)
        {
            IExecuteWithSignature("setEnableSmoothTransition", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setFantasyFontFamily(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void SetFantasyFontFamily(Java.Lang.String arg0)
        {
            IExecuteWithSignature("setFantasyFontFamily", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setFixedFontFamily(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void SetFixedFontFamily(Java.Lang.String arg0)
        {
            IExecuteWithSignature("setFixedFontFamily", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setGeolocationDatabasePath(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        [global::System.Obsolete()]
        public void SetGeolocationDatabasePath(Java.Lang.String arg0)
        {
            IExecuteWithSignature("setGeolocationDatabasePath", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setGeolocationEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetGeolocationEnabled(bool arg0)
        {
            IExecuteWithSignature("setGeolocationEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setJavaScriptCanOpenWindowsAutomatically(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetJavaScriptCanOpenWindowsAutomatically(bool arg0)
        {
            IExecuteWithSignature("setJavaScriptCanOpenWindowsAutomatically", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setJavaScriptEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetJavaScriptEnabled(bool arg0)
        {
            IExecuteWithSignature("setJavaScriptEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setLayoutAlgorithm(android.webkit.WebSettings.LayoutAlgorithm)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Webkit.WebSettings.LayoutAlgorithm"/></param>
        public void SetLayoutAlgorithm(Android.Webkit.WebSettings.LayoutAlgorithm arg0)
        {
            IExecuteWithSignature("setLayoutAlgorithm", "(Landroid/webkit/WebSettings$LayoutAlgorithm;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setLightTouchEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void SetLightTouchEnabled(bool arg0)
        {
            IExecuteWithSignature("setLightTouchEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setLoadsImagesAutomatically(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetLoadsImagesAutomatically(bool arg0)
        {
            IExecuteWithSignature("setLoadsImagesAutomatically", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setLoadWithOverviewMode(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetLoadWithOverviewMode(bool arg0)
        {
            IExecuteWithSignature("setLoadWithOverviewMode", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setMediaPlaybackRequiresUserGesture(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetMediaPlaybackRequiresUserGesture(bool arg0)
        {
            IExecuteWithSignature("setMediaPlaybackRequiresUserGesture", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setMinimumFontSize(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetMinimumFontSize(int arg0)
        {
            IExecuteWithSignature("setMinimumFontSize", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setMinimumLogicalFontSize(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetMinimumLogicalFontSize(int arg0)
        {
            IExecuteWithSignature("setMinimumLogicalFontSize", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setMixedContentMode(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetMixedContentMode(int arg0)
        {
            IExecuteWithSignature("setMixedContentMode", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setNeedInitialFocus(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetNeedInitialFocus(bool arg0)
        {
            IExecuteWithSignature("setNeedInitialFocus", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setOffscreenPreRaster(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetOffscreenPreRaster(bool arg0)
        {
            IExecuteWithSignature("setOffscreenPreRaster", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setPluginState(android.webkit.WebSettings.PluginState)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Webkit.WebSettings.PluginState"/></param>
        [global::System.Obsolete()]
        public void SetPluginState(Android.Webkit.WebSettings.PluginState arg0)
        {
            IExecuteWithSignature("setPluginState", "(Landroid/webkit/WebSettings$PluginState;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setRenderPriority(android.webkit.WebSettings.RenderPriority)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Webkit.WebSettings.RenderPriority"/></param>
        [global::System.Obsolete()]
        public void SetRenderPriority(Android.Webkit.WebSettings.RenderPriority arg0)
        {
            IExecuteWithSignature("setRenderPriority", "(Landroid/webkit/WebSettings$RenderPriority;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setSafeBrowsingEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetSafeBrowsingEnabled(bool arg0)
        {
            IExecuteWithSignature("setSafeBrowsingEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setSansSerifFontFamily(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void SetSansSerifFontFamily(Java.Lang.String arg0)
        {
            IExecuteWithSignature("setSansSerifFontFamily", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setSaveFormData(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void SetSaveFormData(bool arg0)
        {
            IExecuteWithSignature("setSaveFormData", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setSavePassword(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void SetSavePassword(bool arg0)
        {
            IExecuteWithSignature("setSavePassword", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setSerifFontFamily(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void SetSerifFontFamily(Java.Lang.String arg0)
        {
            IExecuteWithSignature("setSerifFontFamily", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setStandardFontFamily(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void SetStandardFontFamily(Java.Lang.String arg0)
        {
            IExecuteWithSignature("setStandardFontFamily", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setSupportMultipleWindows(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetSupportMultipleWindows(bool arg0)
        {
            IExecuteWithSignature("setSupportMultipleWindows", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setSupportZoom(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetSupportZoom(bool arg0)
        {
            IExecuteWithSignature("setSupportZoom", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setTextZoom(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetTextZoom(int arg0)
        {
            IExecuteWithSignature("setTextZoom", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setUserAgentString(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void SetUserAgentString(Java.Lang.String arg0)
        {
            IExecuteWithSignature("setUserAgentString", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setUseWideViewPort(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetUseWideViewPort(bool arg0)
        {
            IExecuteWithSignature("setUseWideViewPort", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#isAlgorithmicDarkeningAllowed()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAlgorithmicDarkeningAllowed()
        {
            return IExecuteWithSignature<bool>("isAlgorithmicDarkeningAllowed", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getForceDark()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetForceDark()
        {
            return IExecuteWithSignature<int>("getForceDark", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#getTextSize()"/>
        /// </summary>
        /// <returns><see cref="Android.Webkit.WebSettings.TextSize"/></returns>
        [global::System.Obsolete()]
        public Android.Webkit.WebSettings.TextSize GetTextSize()
        {
            return IExecuteWithSignature<Android.Webkit.WebSettings.TextSize>("getTextSize", "()Landroid/webkit/WebSettings$TextSize;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setTextSize(android.webkit.WebSettings.TextSize)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Webkit.WebSettings.TextSize"/></param>
        [global::System.Obsolete()]
        public void SetTextSize(Android.Webkit.WebSettings.TextSize arg0)
        {
            IExecuteWithSignature("setTextSize", "(Landroid/webkit/WebSettings$TextSize;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setAlgorithmicDarkeningAllowed(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetAlgorithmicDarkeningAllowed(bool arg0)
        {
            IExecuteWithSignature("setAlgorithmicDarkeningAllowed", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.html#setForceDark(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void SetForceDark(int arg0)
        {
            IExecuteWithSignature("setForceDark", "(I)V", arg0);
        }

        #endregion

        #region Nested classes
        #region LayoutAlgorithm
        public partial class LayoutAlgorithm
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.LayoutAlgorithm.html#NARROW_COLUMNS"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.Webkit.WebSettings.LayoutAlgorithm NARROW_COLUMNS { get { if (!_NARROW_COLUMNSReady) { _NARROW_COLUMNSContent = SGetField<Android.Webkit.WebSettings.LayoutAlgorithm>(LocalBridgeClazz, "NARROW_COLUMNS"); _NARROW_COLUMNSReady = true; } return _NARROW_COLUMNSContent; } }
            private static Android.Webkit.WebSettings.LayoutAlgorithm _NARROW_COLUMNSContent = default;
            private static bool _NARROW_COLUMNSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.LayoutAlgorithm.html#NORMAL"/>
            /// </summary>
            public static Android.Webkit.WebSettings.LayoutAlgorithm NORMAL { get { if (!_NORMALReady) { _NORMALContent = SGetField<Android.Webkit.WebSettings.LayoutAlgorithm>(LocalBridgeClazz, "NORMAL"); _NORMALReady = true; } return _NORMALContent; } }
            private static Android.Webkit.WebSettings.LayoutAlgorithm _NORMALContent = default;
            private static bool _NORMALReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.LayoutAlgorithm.html#SINGLE_COLUMN"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.Webkit.WebSettings.LayoutAlgorithm SINGLE_COLUMN { get { if (!_SINGLE_COLUMNReady) { _SINGLE_COLUMNContent = SGetField<Android.Webkit.WebSettings.LayoutAlgorithm>(LocalBridgeClazz, "SINGLE_COLUMN"); _SINGLE_COLUMNReady = true; } return _SINGLE_COLUMNContent; } }
            private static Android.Webkit.WebSettings.LayoutAlgorithm _SINGLE_COLUMNContent = default;
            private static bool _SINGLE_COLUMNReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.LayoutAlgorithm.html#TEXT_AUTOSIZING"/>
            /// </summary>
            public static Android.Webkit.WebSettings.LayoutAlgorithm TEXT_AUTOSIZING { get { if (!_TEXT_AUTOSIZINGReady) { _TEXT_AUTOSIZINGContent = SGetField<Android.Webkit.WebSettings.LayoutAlgorithm>(LocalBridgeClazz, "TEXT_AUTOSIZING"); _TEXT_AUTOSIZINGReady = true; } return _TEXT_AUTOSIZINGContent; } }
            private static Android.Webkit.WebSettings.LayoutAlgorithm _TEXT_AUTOSIZINGContent = default;
            private static bool _TEXT_AUTOSIZINGReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.LayoutAlgorithm.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Webkit.WebSettings.LayoutAlgorithm"/></returns>
            public static Android.Webkit.WebSettings.LayoutAlgorithm ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Webkit.WebSettings.LayoutAlgorithm>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/webkit/WebSettings$LayoutAlgorithm;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.LayoutAlgorithm.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.Webkit.WebSettings.LayoutAlgorithm"/></returns>
            public static Android.Webkit.WebSettings.LayoutAlgorithm[] Values()
            {
                return SExecuteWithSignatureArray<Android.Webkit.WebSettings.LayoutAlgorithm>(LocalBridgeClazz, "values", "()[Landroid/webkit/WebSettings$LayoutAlgorithm;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region PluginState
        public partial class PluginState
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.PluginState.html#OFF"/>
            /// </summary>
            public static Android.Webkit.WebSettings.PluginState OFF { get { if (!_OFFReady) { _OFFContent = SGetField<Android.Webkit.WebSettings.PluginState>(LocalBridgeClazz, "OFF"); _OFFReady = true; } return _OFFContent; } }
            private static Android.Webkit.WebSettings.PluginState _OFFContent = default;
            private static bool _OFFReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.PluginState.html#ON"/>
            /// </summary>
            public static Android.Webkit.WebSettings.PluginState ON { get { if (!_ONReady) { _ONContent = SGetField<Android.Webkit.WebSettings.PluginState>(LocalBridgeClazz, "ON"); _ONReady = true; } return _ONContent; } }
            private static Android.Webkit.WebSettings.PluginState _ONContent = default;
            private static bool _ONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.PluginState.html#ON_DEMAND"/>
            /// </summary>
            public static Android.Webkit.WebSettings.PluginState ON_DEMAND { get { if (!_ON_DEMANDReady) { _ON_DEMANDContent = SGetField<Android.Webkit.WebSettings.PluginState>(LocalBridgeClazz, "ON_DEMAND"); _ON_DEMANDReady = true; } return _ON_DEMANDContent; } }
            private static Android.Webkit.WebSettings.PluginState _ON_DEMANDContent = default;
            private static bool _ON_DEMANDReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.PluginState.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Webkit.WebSettings.PluginState"/></returns>
            public static Android.Webkit.WebSettings.PluginState ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Webkit.WebSettings.PluginState>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/webkit/WebSettings$PluginState;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.PluginState.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.Webkit.WebSettings.PluginState"/></returns>
            public static Android.Webkit.WebSettings.PluginState[] Values()
            {
                return SExecuteWithSignatureArray<Android.Webkit.WebSettings.PluginState>(LocalBridgeClazz, "values", "()[Landroid/webkit/WebSettings$PluginState;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region RenderPriority
        public partial class RenderPriority
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.RenderPriority.html#HIGH"/>
            /// </summary>
            public static Android.Webkit.WebSettings.RenderPriority HIGH { get { if (!_HIGHReady) { _HIGHContent = SGetField<Android.Webkit.WebSettings.RenderPriority>(LocalBridgeClazz, "HIGH"); _HIGHReady = true; } return _HIGHContent; } }
            private static Android.Webkit.WebSettings.RenderPriority _HIGHContent = default;
            private static bool _HIGHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.RenderPriority.html#LOW"/>
            /// </summary>
            public static Android.Webkit.WebSettings.RenderPriority LOW { get { if (!_LOWReady) { _LOWContent = SGetField<Android.Webkit.WebSettings.RenderPriority>(LocalBridgeClazz, "LOW"); _LOWReady = true; } return _LOWContent; } }
            private static Android.Webkit.WebSettings.RenderPriority _LOWContent = default;
            private static bool _LOWReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.RenderPriority.html#NORMAL"/>
            /// </summary>
            public static Android.Webkit.WebSettings.RenderPriority NORMAL { get { if (!_NORMALReady) { _NORMALContent = SGetField<Android.Webkit.WebSettings.RenderPriority>(LocalBridgeClazz, "NORMAL"); _NORMALReady = true; } return _NORMALContent; } }
            private static Android.Webkit.WebSettings.RenderPriority _NORMALContent = default;
            private static bool _NORMALReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.RenderPriority.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Webkit.WebSettings.RenderPriority"/></returns>
            public static Android.Webkit.WebSettings.RenderPriority ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Webkit.WebSettings.RenderPriority>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/webkit/WebSettings$RenderPriority;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.RenderPriority.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.Webkit.WebSettings.RenderPriority"/></returns>
            public static Android.Webkit.WebSettings.RenderPriority[] Values()
            {
                return SExecuteWithSignatureArray<Android.Webkit.WebSettings.RenderPriority>(LocalBridgeClazz, "values", "()[Landroid/webkit/WebSettings$RenderPriority;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region TextSize
        public partial class TextSize
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.TextSize.html#LARGER"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.Webkit.WebSettings.TextSize LARGER { get { if (!_LARGERReady) { _LARGERContent = SGetField<Android.Webkit.WebSettings.TextSize>(LocalBridgeClazz, "LARGER"); _LARGERReady = true; } return _LARGERContent; } }
            private static Android.Webkit.WebSettings.TextSize _LARGERContent = default;
            private static bool _LARGERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.TextSize.html#LARGEST"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.Webkit.WebSettings.TextSize LARGEST { get { if (!_LARGESTReady) { _LARGESTContent = SGetField<Android.Webkit.WebSettings.TextSize>(LocalBridgeClazz, "LARGEST"); _LARGESTReady = true; } return _LARGESTContent; } }
            private static Android.Webkit.WebSettings.TextSize _LARGESTContent = default;
            private static bool _LARGESTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.TextSize.html#NORMAL"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.Webkit.WebSettings.TextSize NORMAL { get { if (!_NORMALReady) { _NORMALContent = SGetField<Android.Webkit.WebSettings.TextSize>(LocalBridgeClazz, "NORMAL"); _NORMALReady = true; } return _NORMALContent; } }
            private static Android.Webkit.WebSettings.TextSize _NORMALContent = default;
            private static bool _NORMALReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.TextSize.html#SMALLER"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.Webkit.WebSettings.TextSize SMALLER { get { if (!_SMALLERReady) { _SMALLERContent = SGetField<Android.Webkit.WebSettings.TextSize>(LocalBridgeClazz, "SMALLER"); _SMALLERReady = true; } return _SMALLERContent; } }
            private static Android.Webkit.WebSettings.TextSize _SMALLERContent = default;
            private static bool _SMALLERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.TextSize.html#SMALLEST"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.Webkit.WebSettings.TextSize SMALLEST { get { if (!_SMALLESTReady) { _SMALLESTContent = SGetField<Android.Webkit.WebSettings.TextSize>(LocalBridgeClazz, "SMALLEST"); _SMALLESTReady = true; } return _SMALLESTContent; } }
            private static Android.Webkit.WebSettings.TextSize _SMALLESTContent = default;
            private static bool _SMALLESTReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.TextSize.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Webkit.WebSettings.TextSize"/></returns>
            public static Android.Webkit.WebSettings.TextSize ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Webkit.WebSettings.TextSize>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/webkit/WebSettings$TextSize;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.TextSize.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.Webkit.WebSettings.TextSize"/></returns>
            public static Android.Webkit.WebSettings.TextSize[] Values()
            {
                return SExecuteWithSignatureArray<Android.Webkit.WebSettings.TextSize>(LocalBridgeClazz, "values", "()[Landroid/webkit/WebSettings$TextSize;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ZoomDensity
        public partial class ZoomDensity
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.ZoomDensity.html#CLOSE"/>
            /// </summary>
            public static Android.Webkit.WebSettings.ZoomDensity CLOSE { get { if (!_CLOSEReady) { _CLOSEContent = SGetField<Android.Webkit.WebSettings.ZoomDensity>(LocalBridgeClazz, "CLOSE"); _CLOSEReady = true; } return _CLOSEContent; } }
            private static Android.Webkit.WebSettings.ZoomDensity _CLOSEContent = default;
            private static bool _CLOSEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.ZoomDensity.html#FAR"/>
            /// </summary>
            public static Android.Webkit.WebSettings.ZoomDensity FAR { get { if (!_FARReady) { _FARContent = SGetField<Android.Webkit.WebSettings.ZoomDensity>(LocalBridgeClazz, "FAR"); _FARReady = true; } return _FARContent; } }
            private static Android.Webkit.WebSettings.ZoomDensity _FARContent = default;
            private static bool _FARReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.ZoomDensity.html#MEDIUM"/>
            /// </summary>
            public static Android.Webkit.WebSettings.ZoomDensity MEDIUM { get { if (!_MEDIUMReady) { _MEDIUMContent = SGetField<Android.Webkit.WebSettings.ZoomDensity>(LocalBridgeClazz, "MEDIUM"); _MEDIUMReady = true; } return _MEDIUMContent; } }
            private static Android.Webkit.WebSettings.ZoomDensity _MEDIUMContent = default;
            private static bool _MEDIUMReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.ZoomDensity.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Webkit.WebSettings.ZoomDensity"/></returns>
            public static Android.Webkit.WebSettings.ZoomDensity ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Webkit.WebSettings.ZoomDensity>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/webkit/WebSettings$ZoomDensity;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebSettings.ZoomDensity.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.Webkit.WebSettings.ZoomDensity"/></returns>
            public static Android.Webkit.WebSettings.ZoomDensity[] Values()
            {
                return SExecuteWithSignatureArray<Android.Webkit.WebSettings.ZoomDensity>(LocalBridgeClazz, "values", "()[Landroid/webkit/WebSettings$ZoomDensity;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
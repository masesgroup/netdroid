/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Webkit
{
    #region WebView
    public partial class WebView
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#%3Cinit%3E(android.content.Context,android.util.AttributeSet,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Util.AttributeSet"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public WebView(Android.Content.Context arg0, Android.Util.AttributeSet arg1, int arg2, int arg3)
            : base(arg0, arg1, arg2, arg3)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#%3Cinit%3E(android.content.Context,android.util.AttributeSet,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Util.AttributeSet"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public WebView(Android.Content.Context arg0, Android.Util.AttributeSet arg1, int arg2)
            : base(arg0, arg1, arg2)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#%3Cinit%3E(android.content.Context,android.util.AttributeSet)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Util.AttributeSet"/></param>
        public WebView(Android.Content.Context arg0, Android.Util.AttributeSet arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#%3Cinit%3E(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        public WebView(Android.Content.Context arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#RENDERER_PRIORITY_BOUND"/>
        /// </summary>
        public static int RENDERER_PRIORITY_BOUND { get { if (!_RENDERER_PRIORITY_BOUNDReady) { _RENDERER_PRIORITY_BOUNDContent = SGetField<int>(LocalBridgeClazz, "RENDERER_PRIORITY_BOUND"); _RENDERER_PRIORITY_BOUNDReady = true; } return _RENDERER_PRIORITY_BOUNDContent; } }
        private static int _RENDERER_PRIORITY_BOUNDContent = default;
        private static bool _RENDERER_PRIORITY_BOUNDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#RENDERER_PRIORITY_IMPORTANT"/>
        /// </summary>
        public static int RENDERER_PRIORITY_IMPORTANT { get { if (!_RENDERER_PRIORITY_IMPORTANTReady) { _RENDERER_PRIORITY_IMPORTANTContent = SGetField<int>(LocalBridgeClazz, "RENDERER_PRIORITY_IMPORTANT"); _RENDERER_PRIORITY_IMPORTANTReady = true; } return _RENDERER_PRIORITY_IMPORTANTContent; } }
        private static int _RENDERER_PRIORITY_IMPORTANTContent = default;
        private static bool _RENDERER_PRIORITY_IMPORTANTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#RENDERER_PRIORITY_WAIVED"/>
        /// </summary>
        public static int RENDERER_PRIORITY_WAIVED { get { if (!_RENDERER_PRIORITY_WAIVEDReady) { _RENDERER_PRIORITY_WAIVEDContent = SGetField<int>(LocalBridgeClazz, "RENDERER_PRIORITY_WAIVED"); _RENDERER_PRIORITY_WAIVEDReady = true; } return _RENDERER_PRIORITY_WAIVEDContent; } }
        private static int _RENDERER_PRIORITY_WAIVEDContent = default;
        private static bool _RENDERER_PRIORITY_WAIVEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#SCHEME_GEO"/>
        /// </summary>
        public static Java.Lang.String SCHEME_GEO { get { if (!_SCHEME_GEOReady) { _SCHEME_GEOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SCHEME_GEO"); _SCHEME_GEOReady = true; } return _SCHEME_GEOContent; } }
        private static Java.Lang.String _SCHEME_GEOContent = default;
        private static bool _SCHEME_GEOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#SCHEME_MAILTO"/>
        /// </summary>
        public static Java.Lang.String SCHEME_MAILTO { get { if (!_SCHEME_MAILTOReady) { _SCHEME_MAILTOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SCHEME_MAILTO"); _SCHEME_MAILTOReady = true; } return _SCHEME_MAILTOContent; } }
        private static Java.Lang.String _SCHEME_MAILTOContent = default;
        private static bool _SCHEME_MAILTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#SCHEME_TEL"/>
        /// </summary>
        public static Java.Lang.String SCHEME_TEL { get { if (!_SCHEME_TELReady) { _SCHEME_TELContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SCHEME_TEL"); _SCHEME_TELReady = true; } return _SCHEME_TELContent; } }
        private static Java.Lang.String _SCHEME_TELContent = default;
        private static bool _SCHEME_TELReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#getCurrentWebViewPackage()"/> 
        /// </summary>
        public static Android.Content.Pm.PackageInfo CurrentWebViewPackage
        {
            get { return SExecuteWithSignature<Android.Content.Pm.PackageInfo>(LocalBridgeClazz, "getCurrentWebViewPackage", "()Landroid/content/pm/PackageInfo;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#getSafeBrowsingPrivacyPolicyUrl()"/> 
        /// </summary>
        public static Android.Net.Uri SafeBrowsingPrivacyPolicyUrl
        {
            get { return SExecuteWithSignature<Android.Net.Uri>(LocalBridgeClazz, "getSafeBrowsingPrivacyPolicyUrl", "()Landroid/net/Uri;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#getWebViewClassLoader()"/> 
        /// </summary>
        public static Java.Lang.ClassLoader WebViewClassLoader
        {
            get { return SExecuteWithSignature<Java.Lang.ClassLoader>(LocalBridgeClazz, "getWebViewClassLoader", "()Ljava/lang/ClassLoader;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#clearClientCertPreferences(java.lang.Runnable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Runnable"/></param>
        public static void ClearClientCertPreferences(Java.Lang.Runnable arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "clearClientCertPreferences", "(Ljava/lang/Runnable;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#disableWebView()"/>
        /// </summary>
        public static void DisableWebView()
        {
            SExecuteWithSignature(LocalBridgeClazz, "disableWebView", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#enableSlowWholeDocumentDraw()"/>
        /// </summary>
        public static void EnableSlowWholeDocumentDraw()
        {
            SExecuteWithSignature(LocalBridgeClazz, "enableSlowWholeDocumentDraw", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#setDataDirectorySuffix(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public static void SetDataDirectorySuffix(Java.Lang.String arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "setDataDirectorySuffix", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#setSafeBrowsingWhitelist(java.util.List,android.webkit.ValueCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        /// <param name="arg1"><see cref="Android.Webkit.ValueCallback"/></param>
        public static void SetSafeBrowsingWhitelist(Java.Util.List<Java.Lang.String> arg0, Android.Webkit.ValueCallback<Java.Lang.Boolean> arg1)
        {
            SExecute(LocalBridgeClazz, "setSafeBrowsingWhitelist", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#setWebContentsDebuggingEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public static void SetWebContentsDebuggingEnabled(bool arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "setWebContentsDebuggingEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#startSafeBrowsing(android.content.Context,android.webkit.ValueCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Webkit.ValueCallback"/></param>
        public static void StartSafeBrowsing(Android.Content.Context arg0, Android.Webkit.ValueCallback<Java.Lang.Boolean> arg1)
        {
            SExecute(LocalBridgeClazz, "startSafeBrowsing", arg0, arg1);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#getCertificate()"/> 
        /// </summary>
        public Android.Net.Http.SslCertificate Certificate
        {
            get { return IExecuteWithSignature<Android.Net.Http.SslCertificate>("getCertificate", "()Landroid/net/http/SslCertificate;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#getContentHeight()"/> 
        /// </summary>
        public int ContentHeight
        {
            get { return IExecuteWithSignature<int>("getContentHeight", "()I"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#getFavicon()"/> 
        /// </summary>
        public Android.Graphics.Bitmap Favicon
        {
            get { return IExecuteWithSignature<Android.Graphics.Bitmap>("getFavicon", "()Landroid/graphics/Bitmap;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#getHitTestResult()"/> 
        /// </summary>
        public Android.Webkit.WebView.HitTestResult GetHitTestResult
        {
            get { return IExecuteWithSignature<Android.Webkit.WebView.HitTestResult>("getHitTestResult", "()Landroid/webkit/WebView$HitTestResult;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#getOriginalUrl()"/> 
        /// </summary>
        public Java.Lang.String OriginalUrl
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getOriginalUrl", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#getProgress()"/> 
        /// </summary>
        public int Progress
        {
            get { return IExecuteWithSignature<int>("getProgress", "()I"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#getRendererPriorityWaivedWhenNotVisible()"/> 
        /// </summary>
        public bool RendererPriorityWaivedWhenNotVisible
        {
            get { return IExecuteWithSignature<bool>("getRendererPriorityWaivedWhenNotVisible", "()Z"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#getRendererRequestedPriority()"/> 
        /// </summary>
        public int RendererRequestedPriority
        {
            get { return IExecuteWithSignature<int>("getRendererRequestedPriority", "()I"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#getSettings()"/> 
        /// </summary>
        public Android.Webkit.WebSettings Settings
        {
            get { return IExecuteWithSignature<Android.Webkit.WebSettings>("getSettings", "()Landroid/webkit/WebSettings;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#getTextClassifier()"/> <see href="https://developer.android.com/reference/android/webkit/WebView.html#setTextClassifier(android.view.textclassifier.TextClassifier)"/>
        /// </summary>
        public Android.View.Textclassifier.TextClassifier TextClassifier
        {
            get { return IExecute<Android.View.Textclassifier.TextClassifier>("getTextClassifier"); } set { IExecute("setTextClassifier", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#getTitle()"/> 
        /// </summary>
        public Java.Lang.String Title
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getTitle", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#getUrl()"/> 
        /// </summary>
        public Java.Lang.String Url
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getUrl", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#getWebChromeClient()"/> <see href="https://developer.android.com/reference/android/webkit/WebView.html#setWebChromeClient(android.webkit.WebChromeClient)"/>
        /// </summary>
        public Android.Webkit.WebChromeClient WebChromeClient
        {
            get { return IExecuteWithSignature<Android.Webkit.WebChromeClient>("getWebChromeClient", "()Landroid/webkit/WebChromeClient;"); } set { IExecuteWithSignature("setWebChromeClient", "(Landroid/webkit/WebChromeClient;)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#getWebViewClient()"/> <see href="https://developer.android.com/reference/android/webkit/WebView.html#setWebViewClient(android.webkit.WebViewClient)"/>
        /// </summary>
        public Android.Webkit.WebViewClient WebViewClient
        {
            get { return IExecuteWithSignature<Android.Webkit.WebViewClient>("getWebViewClient", "()Landroid/webkit/WebViewClient;"); } set { IExecuteWithSignature("setWebViewClient", "(Landroid/webkit/WebViewClient;)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#getWebViewLooper()"/> 
        /// </summary>
        public Android.Os.Looper WebViewLooper
        {
            get { return IExecuteWithSignature<Android.Os.Looper>("getWebViewLooper", "()Landroid/os/Looper;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#getWebViewRenderProcess()"/> 
        /// </summary>
        public Android.Webkit.WebViewRenderProcess WebViewRenderProcess
        {
            get { return IExecuteWithSignature<Android.Webkit.WebViewRenderProcess>("getWebViewRenderProcess", "()Landroid/webkit/WebViewRenderProcess;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#getWebViewRenderProcessClient()"/> <see href="https://developer.android.com/reference/android/webkit/WebView.html#setWebViewRenderProcessClient(android.webkit.WebViewRenderProcessClient)"/>
        /// </summary>
        public Android.Webkit.WebViewRenderProcessClient WebViewRenderProcessClient
        {
            get { return IExecuteWithSignature<Android.Webkit.WebViewRenderProcessClient>("getWebViewRenderProcessClient", "()Landroid/webkit/WebViewRenderProcessClient;"); } set { IExecuteWithSignature("setWebViewRenderProcessClient", "(Landroid/webkit/WebViewRenderProcessClient;)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#createPrintDocumentAdapter(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Print.PrintDocumentAdapter"/></returns>
        public Android.Print.PrintDocumentAdapter CreatePrintDocumentAdapter(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Android.Print.PrintDocumentAdapter>("createPrintDocumentAdapter", "(Ljava/lang/String;)Landroid/print/PrintDocumentAdapter;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#createPrintDocumentAdapter(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Print.PrintDocumentAdapter"/></returns>
        public Android.Print.PrintDocumentAdapter CreatePrintDocumentAdapterDirect(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Android.Print.PrintDocumentAdapterDirect, Android.Print.PrintDocumentAdapter>("createPrintDocumentAdapter", "(Ljava/lang/String;)Landroid/print/PrintDocumentAdapter;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#copyBackForwardList()"/>
        /// </summary>
        /// <returns><see cref="Android.Webkit.WebBackForwardList"/></returns>
        public Android.Webkit.WebBackForwardList CopyBackForwardList()
        {
            return IExecuteWithSignature<Android.Webkit.WebBackForwardList>("copyBackForwardList", "()Landroid/webkit/WebBackForwardList;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#restoreState(android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Bundle"/></param>
        /// <returns><see cref="Android.Webkit.WebBackForwardList"/></returns>
        public Android.Webkit.WebBackForwardList RestoreState(Android.Os.Bundle arg0)
        {
            return IExecuteWithSignature<Android.Webkit.WebBackForwardList>("restoreState", "(Landroid/os/Bundle;)Landroid/webkit/WebBackForwardList;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#saveState(android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Bundle"/></param>
        /// <returns><see cref="Android.Webkit.WebBackForwardList"/></returns>
        public Android.Webkit.WebBackForwardList SaveState(Android.Os.Bundle arg0)
        {
            return IExecuteWithSignature<Android.Webkit.WebBackForwardList>("saveState", "(Landroid/os/Bundle;)Landroid/webkit/WebBackForwardList;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#createWebMessageChannel()"/>
        /// </summary>
        /// <returns><see cref="Android.Webkit.WebMessagePort"/></returns>
        public Android.Webkit.WebMessagePort[] CreateWebMessageChannel()
        {
            return IExecuteWithSignatureArray<Android.Webkit.WebMessagePort>("createWebMessageChannel", "()[Landroid/webkit/WebMessagePort;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#canGoBack()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool CanGoBack()
        {
            return IExecuteWithSignature<bool>("canGoBack", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#canGoBackOrForward(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool CanGoBackOrForward(int arg0)
        {
            return IExecuteWithSignature<bool>("canGoBackOrForward", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#canGoForward()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool CanGoForward()
        {
            return IExecuteWithSignature<bool>("canGoForward", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#isPrivateBrowsingEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsPrivateBrowsingEnabled()
        {
            return IExecuteWithSignature<bool>("isPrivateBrowsingEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#pageDown(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool PageDown(bool arg0)
        {
            return IExecuteWithSignature<bool>("pageDown", "(Z)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#pageUp(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool PageUp(bool arg0)
        {
            return IExecuteWithSignature<bool>("pageUp", "(Z)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#zoomIn()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool ZoomIn()
        {
            return IExecuteWithSignature<bool>("zoomIn", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#zoomOut()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool ZoomOut()
        {
            return IExecuteWithSignature<bool>("zoomOut", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface(java.lang.Object,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        public void AddJavascriptInterface(object arg0, Java.Lang.String arg1)
        {
            IExecute("addJavascriptInterface", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#clearCache(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void ClearCache(bool arg0)
        {
            IExecuteWithSignature("clearCache", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#clearFormData()"/>
        /// </summary>
        public void ClearFormData()
        {
            IExecuteWithSignature("clearFormData", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#clearHistory()"/>
        /// </summary>
        public void ClearHistory()
        {
            IExecuteWithSignature("clearHistory", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#clearMatches()"/>
        /// </summary>
        public void ClearMatches()
        {
            IExecuteWithSignature("clearMatches", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#clearSslPreferences()"/>
        /// </summary>
        public void ClearSslPreferences()
        {
            IExecuteWithSignature("clearSslPreferences", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#destroy()"/>
        /// </summary>
        public void Destroy()
        {
            IExecuteWithSignature("destroy", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#documentHasImages(android.os.Message)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Message"/></param>
        public void DocumentHasImages(Android.Os.Message arg0)
        {
            IExecuteWithSignature("documentHasImages", "(Landroid/os/Message;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#evaluateJavascript(java.lang.String,android.webkit.ValueCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Webkit.ValueCallback"/></param>
        public void EvaluateJavascript(Java.Lang.String arg0, Android.Webkit.ValueCallback<Java.Lang.String> arg1)
        {
            IExecute("evaluateJavascript", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#findAllAsync(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void FindAllAsync(Java.Lang.String arg0)
        {
            IExecuteWithSignature("findAllAsync", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#findNext(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void FindNext(bool arg0)
        {
            IExecuteWithSignature("findNext", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#flingScroll(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void FlingScroll(int arg0, int arg1)
        {
            IExecute("flingScroll", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#goBack()"/>
        /// </summary>
        public void GoBack()
        {
            IExecuteWithSignature("goBack", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#goBackOrForward(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void GoBackOrForward(int arg0)
        {
            IExecuteWithSignature("goBackOrForward", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#goForward()"/>
        /// </summary>
        public void GoForward()
        {
            IExecuteWithSignature("goForward", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#invokeZoomPicker()"/>
        /// </summary>
        public void InvokeZoomPicker()
        {
            IExecuteWithSignature("invokeZoomPicker", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#loadData(java.lang.String,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        public void LoadData(Java.Lang.String arg0, Java.Lang.String arg1, Java.Lang.String arg2)
        {
            IExecute("loadData", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#loadDataWithBaseURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <param name="arg4"><see cref="Java.Lang.String"/></param>
        public void LoadDataWithBaseURL(Java.Lang.String arg0, Java.Lang.String arg1, Java.Lang.String arg2, Java.Lang.String arg3, Java.Lang.String arg4)
        {
            IExecute("loadDataWithBaseURL", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#loadUrl(java.lang.String,java.util.Map)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Util.Map"/></param>
        public void LoadUrl(Java.Lang.String arg0, Java.Util.Map<Java.Lang.String, Java.Lang.String> arg1)
        {
            IExecute("loadUrl", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#loadUrl(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void LoadUrl(Java.Lang.String arg0)
        {
            IExecuteWithSignature("loadUrl", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#onPause()"/>
        /// </summary>
        public void OnPause()
        {
            IExecuteWithSignature("onPause", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#onResume()"/>
        /// </summary>
        public void OnResume()
        {
            IExecuteWithSignature("onResume", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#pauseTimers()"/>
        /// </summary>
        public void PauseTimers()
        {
            IExecuteWithSignature("pauseTimers", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#postUrl(java.lang.String,byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        public void PostUrl(Java.Lang.String arg0, byte[] arg1)
        {
            IExecute("postUrl", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#postVisualStateCallback(long,android.webkit.WebView.VisualStateCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="Android.Webkit.WebView.VisualStateCallback"/></param>
        public void PostVisualStateCallback(long arg0, Android.Webkit.WebView.VisualStateCallback arg1)
        {
            IExecute("postVisualStateCallback", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#postWebMessage(android.webkit.WebMessage,android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Webkit.WebMessage"/></param>
        /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
        public void PostWebMessage(Android.Webkit.WebMessage arg0, Android.Net.Uri arg1)
        {
            IExecute("postWebMessage", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#reload()"/>
        /// </summary>
        public void Reload()
        {
            IExecuteWithSignature("reload", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#removeJavascriptInterface(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void RemoveJavascriptInterface(Java.Lang.String arg0)
        {
            IExecuteWithSignature("removeJavascriptInterface", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#requestFocusNodeHref(android.os.Message)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Message"/></param>
        public void RequestFocusNodeHref(Android.Os.Message arg0)
        {
            IExecuteWithSignature("requestFocusNodeHref", "(Landroid/os/Message;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#requestImageRef(android.os.Message)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Message"/></param>
        public void RequestImageRef(Android.Os.Message arg0)
        {
            IExecuteWithSignature("requestImageRef", "(Landroid/os/Message;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#resumeTimers()"/>
        /// </summary>
        public void ResumeTimers()
        {
            IExecuteWithSignature("resumeTimers", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#saveWebArchive(java.lang.String,boolean,android.webkit.ValueCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <param name="arg2"><see cref="Android.Webkit.ValueCallback"/></param>
        public void SaveWebArchive(Java.Lang.String arg0, bool arg1, Android.Webkit.ValueCallback<Java.Lang.String> arg2)
        {
            IExecute("saveWebArchive", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#saveWebArchive(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void SaveWebArchive(Java.Lang.String arg0)
        {
            IExecuteWithSignature("saveWebArchive", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#setDownloadListener(android.webkit.DownloadListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Webkit.DownloadListener"/></param>
        public void SetDownloadListener(Android.Webkit.DownloadListener arg0)
        {
            IExecuteWithSignature("setDownloadListener", "(Landroid/webkit/DownloadListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#setFindListener(android.webkit.WebView.FindListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Webkit.WebView.FindListener"/></param>
        public void SetFindListener(Android.Webkit.WebView.FindListener arg0)
        {
            IExecuteWithSignature("setFindListener", "(Landroid/webkit/WebView$FindListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#setInitialScale(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetInitialScale(int arg0)
        {
            IExecuteWithSignature("setInitialScale", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#setNetworkAvailable(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetNetworkAvailable(bool arg0)
        {
            IExecuteWithSignature("setNetworkAvailable", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#setRendererPriorityPolicy(int,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public void SetRendererPriorityPolicy(int arg0, bool arg1)
        {
            IExecute("setRendererPriorityPolicy", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#setWebViewRenderProcessClient(java.util.concurrent.Executor,android.webkit.WebViewRenderProcessClient)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Webkit.WebViewRenderProcessClient"/></param>
        public void SetWebViewRenderProcessClient(Java.Util.Concurrent.Executor arg0, Android.Webkit.WebViewRenderProcessClient arg1)
        {
            IExecute("setWebViewRenderProcessClient", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#stopLoading()"/>
        /// </summary>
        public void StopLoading()
        {
            IExecuteWithSignature("stopLoading", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/WebView.html#zoomBy(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void ZoomBy(float arg0)
        {
            IExecuteWithSignature("zoomBy", "(F)V", arg0);
        }

        #endregion

        #region Nested classes
        #region FindListener
        public partial class FindListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="FindListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onFindResultReceived", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(OnFindResultReceivedEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/webkit/WebView.FindListener.html#onFindResultReceived(int,int,boolean)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnFindResultReceived"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<int, int, bool> OnOnFindResultReceived { get; set; } = null;

            void OnFindResultReceivedEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
            {
                var methodToExecute = (OnOnFindResultReceived != null) ? OnOnFindResultReceived : OnFindResultReceived;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<bool>(1));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebView.FindListener.html#onFindResultReceived(int,int,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="bool"/></param>
            public virtual void OnFindResultReceived(int arg0, int arg1, bool arg2)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region FindListenerDirect
        public partial class FindListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebView.FindListener.html#onFindResultReceived(int,int,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="bool"/></param>
            public override void OnFindResultReceived(int arg0, int arg1, bool arg2)
            {
                IExecute("onFindResultReceived", arg0, arg1, arg2);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region HitTestResult
        public partial class HitTestResult
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebView.HitTestResult.html#EDIT_TEXT_TYPE"/>
            /// </summary>
            public static int EDIT_TEXT_TYPE { get { if (!_EDIT_TEXT_TYPEReady) { _EDIT_TEXT_TYPEContent = SGetField<int>(LocalBridgeClazz, "EDIT_TEXT_TYPE"); _EDIT_TEXT_TYPEReady = true; } return _EDIT_TEXT_TYPEContent; } }
            private static int _EDIT_TEXT_TYPEContent = default;
            private static bool _EDIT_TEXT_TYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebView.HitTestResult.html#EMAIL_TYPE"/>
            /// </summary>
            public static int EMAIL_TYPE { get { if (!_EMAIL_TYPEReady) { _EMAIL_TYPEContent = SGetField<int>(LocalBridgeClazz, "EMAIL_TYPE"); _EMAIL_TYPEReady = true; } return _EMAIL_TYPEContent; } }
            private static int _EMAIL_TYPEContent = default;
            private static bool _EMAIL_TYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebView.HitTestResult.html#GEO_TYPE"/>
            /// </summary>
            public static int GEO_TYPE { get { if (!_GEO_TYPEReady) { _GEO_TYPEContent = SGetField<int>(LocalBridgeClazz, "GEO_TYPE"); _GEO_TYPEReady = true; } return _GEO_TYPEContent; } }
            private static int _GEO_TYPEContent = default;
            private static bool _GEO_TYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebView.HitTestResult.html#IMAGE_TYPE"/>
            /// </summary>
            public static int IMAGE_TYPE { get { if (!_IMAGE_TYPEReady) { _IMAGE_TYPEContent = SGetField<int>(LocalBridgeClazz, "IMAGE_TYPE"); _IMAGE_TYPEReady = true; } return _IMAGE_TYPEContent; } }
            private static int _IMAGE_TYPEContent = default;
            private static bool _IMAGE_TYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebView.HitTestResult.html#PHONE_TYPE"/>
            /// </summary>
            public static int PHONE_TYPE { get { if (!_PHONE_TYPEReady) { _PHONE_TYPEContent = SGetField<int>(LocalBridgeClazz, "PHONE_TYPE"); _PHONE_TYPEReady = true; } return _PHONE_TYPEContent; } }
            private static int _PHONE_TYPEContent = default;
            private static bool _PHONE_TYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebView.HitTestResult.html#SRC_ANCHOR_TYPE"/>
            /// </summary>
            public static int SRC_ANCHOR_TYPE { get { if (!_SRC_ANCHOR_TYPEReady) { _SRC_ANCHOR_TYPEContent = SGetField<int>(LocalBridgeClazz, "SRC_ANCHOR_TYPE"); _SRC_ANCHOR_TYPEReady = true; } return _SRC_ANCHOR_TYPEContent; } }
            private static int _SRC_ANCHOR_TYPEContent = default;
            private static bool _SRC_ANCHOR_TYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebView.HitTestResult.html#SRC_IMAGE_ANCHOR_TYPE"/>
            /// </summary>
            public static int SRC_IMAGE_ANCHOR_TYPE { get { if (!_SRC_IMAGE_ANCHOR_TYPEReady) { _SRC_IMAGE_ANCHOR_TYPEContent = SGetField<int>(LocalBridgeClazz, "SRC_IMAGE_ANCHOR_TYPE"); _SRC_IMAGE_ANCHOR_TYPEReady = true; } return _SRC_IMAGE_ANCHOR_TYPEContent; } }
            private static int _SRC_IMAGE_ANCHOR_TYPEContent = default;
            private static bool _SRC_IMAGE_ANCHOR_TYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebView.HitTestResult.html#UNKNOWN_TYPE"/>
            /// </summary>
            public static int UNKNOWN_TYPE { get { if (!_UNKNOWN_TYPEReady) { _UNKNOWN_TYPEContent = SGetField<int>(LocalBridgeClazz, "UNKNOWN_TYPE"); _UNKNOWN_TYPEReady = true; } return _UNKNOWN_TYPEContent; } }
            private static int _UNKNOWN_TYPEContent = default;
            private static bool _UNKNOWN_TYPEReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebView.HitTestResult.html#getExtra()"/> 
            /// </summary>
            public Java.Lang.String Extra
            {
                get { return IExecuteWithSignature<Java.Lang.String>("getExtra", "()Ljava/lang/String;"); }
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebView.HitTestResult.html#getType()"/> 
            /// </summary>
            public int Type
            {
                get { return IExecuteWithSignature<int>("getType", "()I"); }
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region VisualStateCallback
        public partial class VisualStateCallback
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebView.VisualStateCallback.html#onComplete(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            public void OnComplete(long arg0)
            {
                IExecuteWithSignature("onComplete", "(J)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region WebViewTransport
        public partial class WebViewTransport
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebView.WebViewTransport.html#%3Cinit%3E(android.webkit.WebView)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Webkit.WebView"/></param>
            public WebViewTransport(Android.Webkit.WebView arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebView.WebViewTransport.html#getWebView()"/> 
            /// </summary>
            public Android.Webkit.WebView GetWebView
            {
                get { return IExecuteWithSignature<Android.Webkit.WebView>("getWebView", "()Landroid/webkit/WebView;"); }
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/webkit/WebView.WebViewTransport.html#setWebView(android.webkit.WebView)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Webkit.WebView"/></param>
            public void SetWebView(Android.Webkit.WebView arg0)
            {
                IExecuteWithSignature("setWebView", "(Landroid/webkit/WebView;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
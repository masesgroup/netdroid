/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Webkit
{
    #region CookieSyncManager
    public partial class CookieSyncManager
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/CookieSyncManager.html#createInstance(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <returns><see cref="Android.Webkit.CookieSyncManager"/></returns>
        [global::System.Obsolete()]
        public static Android.Webkit.CookieSyncManager CreateInstance(Android.Content.Context arg0)
        {
            return SExecuteWithSignature<Android.Webkit.CookieSyncManager>(LocalBridgeClazz, "createInstance", "(Landroid/content/Context;)Landroid/webkit/CookieSyncManager;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/CookieSyncManager.html#getInstance()"/>
        /// </summary>
        /// <returns><see cref="Android.Webkit.CookieSyncManager"/></returns>
        [global::System.Obsolete()]
        public static Android.Webkit.CookieSyncManager GetInstance()
        {
            return SExecuteWithSignature<Android.Webkit.CookieSyncManager>(LocalBridgeClazz, "getInstance", "()Landroid/webkit/CookieSyncManager;");
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/CookieSyncManager.html#resetSync()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void ResetSync()
        {
            IExecuteWithSignature("resetSync", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/CookieSyncManager.html#run()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void Run()
        {
            IExecuteWithSignature("run", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/CookieSyncManager.html#startSync()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void StartSync()
        {
            IExecuteWithSignature("startSync", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/CookieSyncManager.html#stopSync()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void StopSync()
        {
            IExecuteWithSignature("stopSync", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/webkit/CookieSyncManager.html#sync()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void Sync()
        {
            IExecuteWithSignature("sync", "()V");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.App
{
    #region UiModeManager
    public partial class UiModeManager
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/UiModeManager.html#DISABLE_CAR_MODE_GO_HOME"/>
        /// </summary>
        public static int DISABLE_CAR_MODE_GO_HOME { get { if (!_DISABLE_CAR_MODE_GO_HOMEReady) { _DISABLE_CAR_MODE_GO_HOMEContent = SGetField<int>(LocalBridgeClazz, "DISABLE_CAR_MODE_GO_HOME"); _DISABLE_CAR_MODE_GO_HOMEReady = true; } return _DISABLE_CAR_MODE_GO_HOMEContent; } }
        private static int _DISABLE_CAR_MODE_GO_HOMEContent = default;
        private static bool _DISABLE_CAR_MODE_GO_HOMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/UiModeManager.html#ENABLE_CAR_MODE_ALLOW_SLEEP"/>
        /// </summary>
        public static int ENABLE_CAR_MODE_ALLOW_SLEEP { get { if (!_ENABLE_CAR_MODE_ALLOW_SLEEPReady) { _ENABLE_CAR_MODE_ALLOW_SLEEPContent = SGetField<int>(LocalBridgeClazz, "ENABLE_CAR_MODE_ALLOW_SLEEP"); _ENABLE_CAR_MODE_ALLOW_SLEEPReady = true; } return _ENABLE_CAR_MODE_ALLOW_SLEEPContent; } }
        private static int _ENABLE_CAR_MODE_ALLOW_SLEEPContent = default;
        private static bool _ENABLE_CAR_MODE_ALLOW_SLEEPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/UiModeManager.html#ENABLE_CAR_MODE_GO_CAR_HOME"/>
        /// </summary>
        public static int ENABLE_CAR_MODE_GO_CAR_HOME { get { if (!_ENABLE_CAR_MODE_GO_CAR_HOMEReady) { _ENABLE_CAR_MODE_GO_CAR_HOMEContent = SGetField<int>(LocalBridgeClazz, "ENABLE_CAR_MODE_GO_CAR_HOME"); _ENABLE_CAR_MODE_GO_CAR_HOMEReady = true; } return _ENABLE_CAR_MODE_GO_CAR_HOMEContent; } }
        private static int _ENABLE_CAR_MODE_GO_CAR_HOMEContent = default;
        private static bool _ENABLE_CAR_MODE_GO_CAR_HOMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/UiModeManager.html#MODE_NIGHT_AUTO"/>
        /// </summary>
        public static int MODE_NIGHT_AUTO { get { if (!_MODE_NIGHT_AUTOReady) { _MODE_NIGHT_AUTOContent = SGetField<int>(LocalBridgeClazz, "MODE_NIGHT_AUTO"); _MODE_NIGHT_AUTOReady = true; } return _MODE_NIGHT_AUTOContent; } }
        private static int _MODE_NIGHT_AUTOContent = default;
        private static bool _MODE_NIGHT_AUTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/UiModeManager.html#MODE_NIGHT_CUSTOM"/>
        /// </summary>
        public static int MODE_NIGHT_CUSTOM { get { if (!_MODE_NIGHT_CUSTOMReady) { _MODE_NIGHT_CUSTOMContent = SGetField<int>(LocalBridgeClazz, "MODE_NIGHT_CUSTOM"); _MODE_NIGHT_CUSTOMReady = true; } return _MODE_NIGHT_CUSTOMContent; } }
        private static int _MODE_NIGHT_CUSTOMContent = default;
        private static bool _MODE_NIGHT_CUSTOMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/UiModeManager.html#MODE_NIGHT_NO"/>
        /// </summary>
        public static int MODE_NIGHT_NO { get { if (!_MODE_NIGHT_NOReady) { _MODE_NIGHT_NOContent = SGetField<int>(LocalBridgeClazz, "MODE_NIGHT_NO"); _MODE_NIGHT_NOReady = true; } return _MODE_NIGHT_NOContent; } }
        private static int _MODE_NIGHT_NOContent = default;
        private static bool _MODE_NIGHT_NOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/UiModeManager.html#MODE_NIGHT_YES"/>
        /// </summary>
        public static int MODE_NIGHT_YES { get { if (!_MODE_NIGHT_YESReady) { _MODE_NIGHT_YESContent = SGetField<int>(LocalBridgeClazz, "MODE_NIGHT_YES"); _MODE_NIGHT_YESReady = true; } return _MODE_NIGHT_YESContent; } }
        private static int _MODE_NIGHT_YESContent = default;
        private static bool _MODE_NIGHT_YESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/UiModeManager.html#ACTION_ENTER_CAR_MODE"/>
        /// </summary>
        public static Java.Lang.String ACTION_ENTER_CAR_MODE { get { return SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_ENTER_CAR_MODE"); } set { SSetField(LocalBridgeClazz, "ACTION_ENTER_CAR_MODE", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/UiModeManager.html#ACTION_ENTER_DESK_MODE"/>
        /// </summary>
        public static Java.Lang.String ACTION_ENTER_DESK_MODE { get { return SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_ENTER_DESK_MODE"); } set { SSetField(LocalBridgeClazz, "ACTION_ENTER_DESK_MODE", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/UiModeManager.html#ACTION_EXIT_CAR_MODE"/>
        /// </summary>
        public static Java.Lang.String ACTION_EXIT_CAR_MODE { get { return SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_EXIT_CAR_MODE"); } set { SSetField(LocalBridgeClazz, "ACTION_EXIT_CAR_MODE", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/UiModeManager.html#ACTION_EXIT_DESK_MODE"/>
        /// </summary>
        public static Java.Lang.String ACTION_EXIT_DESK_MODE { get { return SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_EXIT_DESK_MODE"); } set { SSetField(LocalBridgeClazz, "ACTION_EXIT_DESK_MODE", value); } }

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/UiModeManager.html#getContrast()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetContrast()
        {
            return IExecuteWithSignature<float>("getContrast", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/UiModeManager.html#getCurrentModeType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetCurrentModeType()
        {
            return IExecuteWithSignature<int>("getCurrentModeType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/UiModeManager.html#getNightMode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetNightMode()
        {
            return IExecuteWithSignature<int>("getNightMode", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/UiModeManager.html#getCustomNightModeEnd()"/>
        /// </summary>
        /// <returns><see cref="Java.Time.LocalTime"/></returns>
        public Java.Time.LocalTime GetCustomNightModeEnd()
        {
            return IExecuteWithSignature<Java.Time.LocalTime>("getCustomNightModeEnd", "()Ljava/time/LocalTime;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/UiModeManager.html#getCustomNightModeStart()"/>
        /// </summary>
        /// <returns><see cref="Java.Time.LocalTime"/></returns>
        public Java.Time.LocalTime GetCustomNightModeStart()
        {
            return IExecuteWithSignature<Java.Time.LocalTime>("getCustomNightModeStart", "()Ljava/time/LocalTime;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/UiModeManager.html#addContrastChangeListener(java.util.concurrent.Executor,android.app.UiModeManager.ContrastChangeListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.App.UiModeManager.ContrastChangeListener"/></param>
        public void AddContrastChangeListener(Java.Util.Concurrent.Executor arg0, Android.App.UiModeManager.ContrastChangeListener arg1)
        {
            IExecute("addContrastChangeListener", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/UiModeManager.html#disableCarMode(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void DisableCarMode(int arg0)
        {
            IExecuteWithSignature("disableCarMode", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/UiModeManager.html#enableCarMode(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void EnableCarMode(int arg0)
        {
            IExecuteWithSignature("enableCarMode", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/UiModeManager.html#removeContrastChangeListener(android.app.UiModeManager.ContrastChangeListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.UiModeManager.ContrastChangeListener"/></param>
        public void RemoveContrastChangeListener(Android.App.UiModeManager.ContrastChangeListener arg0)
        {
            IExecuteWithSignature("removeContrastChangeListener", "(Landroid/app/UiModeManager$ContrastChangeListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/UiModeManager.html#setApplicationNightMode(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetApplicationNightMode(int arg0)
        {
            IExecuteWithSignature("setApplicationNightMode", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/UiModeManager.html#setCustomNightModeEnd(java.time.LocalTime)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Time.LocalTime"/></param>
        public void SetCustomNightModeEnd(Java.Time.LocalTime arg0)
        {
            IExecuteWithSignature("setCustomNightModeEnd", "(Ljava/time/LocalTime;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/UiModeManager.html#setCustomNightModeStart(java.time.LocalTime)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Time.LocalTime"/></param>
        public void SetCustomNightModeStart(Java.Time.LocalTime arg0)
        {
            IExecuteWithSignature("setCustomNightModeStart", "(Ljava/time/LocalTime;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/UiModeManager.html#setNightMode(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetNightMode(int arg0)
        {
            IExecuteWithSignature("setNightMode", "(I)V", arg0);
        }

        #endregion

        #region Nested classes
        #region ContrastChangeListener
        public partial class ContrastChangeListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="ContrastChangeListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onContrastChanged", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<float>>>(OnContrastChangedEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/app/UiModeManager.ContrastChangeListener.html#onContrastChanged(float)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnContrastChanged"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<float> OnOnContrastChanged { get; set; } = null;

            void OnContrastChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<float>> data)
            {
                var methodToExecute = (OnOnContrastChanged != null) ? OnOnContrastChanged : OnContrastChanged;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/UiModeManager.ContrastChangeListener.html#onContrastChanged(float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            public virtual void OnContrastChanged(float arg0)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ContrastChangeListenerDirect
        public partial class ContrastChangeListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/UiModeManager.ContrastChangeListener.html#onContrastChanged(float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            public override void OnContrastChanged(float arg0)
            {
                IExecuteWithSignature("onContrastChanged", "(F)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
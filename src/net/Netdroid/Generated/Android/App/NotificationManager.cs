/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.5.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.App
{
    #region NotificationManager
    public partial class NotificationManager
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#AUTOMATIC_RULE_STATUS_ACTIVATED"/>
        /// </summary>
        public static int AUTOMATIC_RULE_STATUS_ACTIVATED { get { if (!_AUTOMATIC_RULE_STATUS_ACTIVATEDReady) { _AUTOMATIC_RULE_STATUS_ACTIVATEDContent = SGetField<int>(LocalBridgeClazz, "AUTOMATIC_RULE_STATUS_ACTIVATED"); _AUTOMATIC_RULE_STATUS_ACTIVATEDReady = true; } return _AUTOMATIC_RULE_STATUS_ACTIVATEDContent; } }
        private static int _AUTOMATIC_RULE_STATUS_ACTIVATEDContent = default;
        private static bool _AUTOMATIC_RULE_STATUS_ACTIVATEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#AUTOMATIC_RULE_STATUS_DEACTIVATED"/>
        /// </summary>
        public static int AUTOMATIC_RULE_STATUS_DEACTIVATED { get { if (!_AUTOMATIC_RULE_STATUS_DEACTIVATEDReady) { _AUTOMATIC_RULE_STATUS_DEACTIVATEDContent = SGetField<int>(LocalBridgeClazz, "AUTOMATIC_RULE_STATUS_DEACTIVATED"); _AUTOMATIC_RULE_STATUS_DEACTIVATEDReady = true; } return _AUTOMATIC_RULE_STATUS_DEACTIVATEDContent; } }
        private static int _AUTOMATIC_RULE_STATUS_DEACTIVATEDContent = default;
        private static bool _AUTOMATIC_RULE_STATUS_DEACTIVATEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#AUTOMATIC_RULE_STATUS_DISABLED"/>
        /// </summary>
        public static int AUTOMATIC_RULE_STATUS_DISABLED { get { if (!_AUTOMATIC_RULE_STATUS_DISABLEDReady) { _AUTOMATIC_RULE_STATUS_DISABLEDContent = SGetField<int>(LocalBridgeClazz, "AUTOMATIC_RULE_STATUS_DISABLED"); _AUTOMATIC_RULE_STATUS_DISABLEDReady = true; } return _AUTOMATIC_RULE_STATUS_DISABLEDContent; } }
        private static int _AUTOMATIC_RULE_STATUS_DISABLEDContent = default;
        private static bool _AUTOMATIC_RULE_STATUS_DISABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#AUTOMATIC_RULE_STATUS_ENABLED"/>
        /// </summary>
        public static int AUTOMATIC_RULE_STATUS_ENABLED { get { if (!_AUTOMATIC_RULE_STATUS_ENABLEDReady) { _AUTOMATIC_RULE_STATUS_ENABLEDContent = SGetField<int>(LocalBridgeClazz, "AUTOMATIC_RULE_STATUS_ENABLED"); _AUTOMATIC_RULE_STATUS_ENABLEDReady = true; } return _AUTOMATIC_RULE_STATUS_ENABLEDContent; } }
        private static int _AUTOMATIC_RULE_STATUS_ENABLEDContent = default;
        private static bool _AUTOMATIC_RULE_STATUS_ENABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#AUTOMATIC_RULE_STATUS_REMOVED"/>
        /// </summary>
        public static int AUTOMATIC_RULE_STATUS_REMOVED { get { if (!_AUTOMATIC_RULE_STATUS_REMOVEDReady) { _AUTOMATIC_RULE_STATUS_REMOVEDContent = SGetField<int>(LocalBridgeClazz, "AUTOMATIC_RULE_STATUS_REMOVED"); _AUTOMATIC_RULE_STATUS_REMOVEDReady = true; } return _AUTOMATIC_RULE_STATUS_REMOVEDContent; } }
        private static int _AUTOMATIC_RULE_STATUS_REMOVEDContent = default;
        private static bool _AUTOMATIC_RULE_STATUS_REMOVEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#AUTOMATIC_RULE_STATUS_UNKNOWN"/>
        /// </summary>
        public static int AUTOMATIC_RULE_STATUS_UNKNOWN { get { if (!_AUTOMATIC_RULE_STATUS_UNKNOWNReady) { _AUTOMATIC_RULE_STATUS_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "AUTOMATIC_RULE_STATUS_UNKNOWN"); _AUTOMATIC_RULE_STATUS_UNKNOWNReady = true; } return _AUTOMATIC_RULE_STATUS_UNKNOWNContent; } }
        private static int _AUTOMATIC_RULE_STATUS_UNKNOWNContent = default;
        private static bool _AUTOMATIC_RULE_STATUS_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#BUBBLE_PREFERENCE_ALL"/>
        /// </summary>
        public static int BUBBLE_PREFERENCE_ALL { get { if (!_BUBBLE_PREFERENCE_ALLReady) { _BUBBLE_PREFERENCE_ALLContent = SGetField<int>(LocalBridgeClazz, "BUBBLE_PREFERENCE_ALL"); _BUBBLE_PREFERENCE_ALLReady = true; } return _BUBBLE_PREFERENCE_ALLContent; } }
        private static int _BUBBLE_PREFERENCE_ALLContent = default;
        private static bool _BUBBLE_PREFERENCE_ALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#BUBBLE_PREFERENCE_NONE"/>
        /// </summary>
        public static int BUBBLE_PREFERENCE_NONE { get { if (!_BUBBLE_PREFERENCE_NONEReady) { _BUBBLE_PREFERENCE_NONEContent = SGetField<int>(LocalBridgeClazz, "BUBBLE_PREFERENCE_NONE"); _BUBBLE_PREFERENCE_NONEReady = true; } return _BUBBLE_PREFERENCE_NONEContent; } }
        private static int _BUBBLE_PREFERENCE_NONEContent = default;
        private static bool _BUBBLE_PREFERENCE_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#BUBBLE_PREFERENCE_SELECTED"/>
        /// </summary>
        public static int BUBBLE_PREFERENCE_SELECTED { get { if (!_BUBBLE_PREFERENCE_SELECTEDReady) { _BUBBLE_PREFERENCE_SELECTEDContent = SGetField<int>(LocalBridgeClazz, "BUBBLE_PREFERENCE_SELECTED"); _BUBBLE_PREFERENCE_SELECTEDReady = true; } return _BUBBLE_PREFERENCE_SELECTEDContent; } }
        private static int _BUBBLE_PREFERENCE_SELECTEDContent = default;
        private static bool _BUBBLE_PREFERENCE_SELECTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#IMPORTANCE_DEFAULT"/>
        /// </summary>
        public static int IMPORTANCE_DEFAULT { get { if (!_IMPORTANCE_DEFAULTReady) { _IMPORTANCE_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "IMPORTANCE_DEFAULT"); _IMPORTANCE_DEFAULTReady = true; } return _IMPORTANCE_DEFAULTContent; } }
        private static int _IMPORTANCE_DEFAULTContent = default;
        private static bool _IMPORTANCE_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#IMPORTANCE_HIGH"/>
        /// </summary>
        public static int IMPORTANCE_HIGH { get { if (!_IMPORTANCE_HIGHReady) { _IMPORTANCE_HIGHContent = SGetField<int>(LocalBridgeClazz, "IMPORTANCE_HIGH"); _IMPORTANCE_HIGHReady = true; } return _IMPORTANCE_HIGHContent; } }
        private static int _IMPORTANCE_HIGHContent = default;
        private static bool _IMPORTANCE_HIGHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#IMPORTANCE_LOW"/>
        /// </summary>
        public static int IMPORTANCE_LOW { get { if (!_IMPORTANCE_LOWReady) { _IMPORTANCE_LOWContent = SGetField<int>(LocalBridgeClazz, "IMPORTANCE_LOW"); _IMPORTANCE_LOWReady = true; } return _IMPORTANCE_LOWContent; } }
        private static int _IMPORTANCE_LOWContent = default;
        private static bool _IMPORTANCE_LOWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#IMPORTANCE_MAX"/>
        /// </summary>
        public static int IMPORTANCE_MAX { get { if (!_IMPORTANCE_MAXReady) { _IMPORTANCE_MAXContent = SGetField<int>(LocalBridgeClazz, "IMPORTANCE_MAX"); _IMPORTANCE_MAXReady = true; } return _IMPORTANCE_MAXContent; } }
        private static int _IMPORTANCE_MAXContent = default;
        private static bool _IMPORTANCE_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#IMPORTANCE_MIN"/>
        /// </summary>
        public static int IMPORTANCE_MIN { get { if (!_IMPORTANCE_MINReady) { _IMPORTANCE_MINContent = SGetField<int>(LocalBridgeClazz, "IMPORTANCE_MIN"); _IMPORTANCE_MINReady = true; } return _IMPORTANCE_MINContent; } }
        private static int _IMPORTANCE_MINContent = default;
        private static bool _IMPORTANCE_MINReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#IMPORTANCE_NONE"/>
        /// </summary>
        public static int IMPORTANCE_NONE { get { if (!_IMPORTANCE_NONEReady) { _IMPORTANCE_NONEContent = SGetField<int>(LocalBridgeClazz, "IMPORTANCE_NONE"); _IMPORTANCE_NONEReady = true; } return _IMPORTANCE_NONEContent; } }
        private static int _IMPORTANCE_NONEContent = default;
        private static bool _IMPORTANCE_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#IMPORTANCE_UNSPECIFIED"/>
        /// </summary>
        public static int IMPORTANCE_UNSPECIFIED { get { if (!_IMPORTANCE_UNSPECIFIEDReady) { _IMPORTANCE_UNSPECIFIEDContent = SGetField<int>(LocalBridgeClazz, "IMPORTANCE_UNSPECIFIED"); _IMPORTANCE_UNSPECIFIEDReady = true; } return _IMPORTANCE_UNSPECIFIEDContent; } }
        private static int _IMPORTANCE_UNSPECIFIEDContent = default;
        private static bool _IMPORTANCE_UNSPECIFIEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#INTERRUPTION_FILTER_ALARMS"/>
        /// </summary>
        public static int INTERRUPTION_FILTER_ALARMS { get { if (!_INTERRUPTION_FILTER_ALARMSReady) { _INTERRUPTION_FILTER_ALARMSContent = SGetField<int>(LocalBridgeClazz, "INTERRUPTION_FILTER_ALARMS"); _INTERRUPTION_FILTER_ALARMSReady = true; } return _INTERRUPTION_FILTER_ALARMSContent; } }
        private static int _INTERRUPTION_FILTER_ALARMSContent = default;
        private static bool _INTERRUPTION_FILTER_ALARMSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#INTERRUPTION_FILTER_ALL"/>
        /// </summary>
        public static int INTERRUPTION_FILTER_ALL { get { if (!_INTERRUPTION_FILTER_ALLReady) { _INTERRUPTION_FILTER_ALLContent = SGetField<int>(LocalBridgeClazz, "INTERRUPTION_FILTER_ALL"); _INTERRUPTION_FILTER_ALLReady = true; } return _INTERRUPTION_FILTER_ALLContent; } }
        private static int _INTERRUPTION_FILTER_ALLContent = default;
        private static bool _INTERRUPTION_FILTER_ALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#INTERRUPTION_FILTER_NONE"/>
        /// </summary>
        public static int INTERRUPTION_FILTER_NONE { get { if (!_INTERRUPTION_FILTER_NONEReady) { _INTERRUPTION_FILTER_NONEContent = SGetField<int>(LocalBridgeClazz, "INTERRUPTION_FILTER_NONE"); _INTERRUPTION_FILTER_NONEReady = true; } return _INTERRUPTION_FILTER_NONEContent; } }
        private static int _INTERRUPTION_FILTER_NONEContent = default;
        private static bool _INTERRUPTION_FILTER_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#INTERRUPTION_FILTER_PRIORITY"/>
        /// </summary>
        public static int INTERRUPTION_FILTER_PRIORITY { get { if (!_INTERRUPTION_FILTER_PRIORITYReady) { _INTERRUPTION_FILTER_PRIORITYContent = SGetField<int>(LocalBridgeClazz, "INTERRUPTION_FILTER_PRIORITY"); _INTERRUPTION_FILTER_PRIORITYReady = true; } return _INTERRUPTION_FILTER_PRIORITYContent; } }
        private static int _INTERRUPTION_FILTER_PRIORITYContent = default;
        private static bool _INTERRUPTION_FILTER_PRIORITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#INTERRUPTION_FILTER_UNKNOWN"/>
        /// </summary>
        public static int INTERRUPTION_FILTER_UNKNOWN { get { if (!_INTERRUPTION_FILTER_UNKNOWNReady) { _INTERRUPTION_FILTER_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "INTERRUPTION_FILTER_UNKNOWN"); _INTERRUPTION_FILTER_UNKNOWNReady = true; } return _INTERRUPTION_FILTER_UNKNOWNContent; } }
        private static int _INTERRUPTION_FILTER_UNKNOWNContent = default;
        private static bool _INTERRUPTION_FILTER_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#ACTION_APP_BLOCK_STATE_CHANGED"/>
        /// </summary>
        public static Java.Lang.String ACTION_APP_BLOCK_STATE_CHANGED { get { if (!_ACTION_APP_BLOCK_STATE_CHANGEDReady) { _ACTION_APP_BLOCK_STATE_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_APP_BLOCK_STATE_CHANGED"); _ACTION_APP_BLOCK_STATE_CHANGEDReady = true; } return _ACTION_APP_BLOCK_STATE_CHANGEDContent; } }
        private static Java.Lang.String _ACTION_APP_BLOCK_STATE_CHANGEDContent = default;
        private static bool _ACTION_APP_BLOCK_STATE_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#ACTION_AUTOMATIC_ZEN_RULE"/>
        /// </summary>
        public static Java.Lang.String ACTION_AUTOMATIC_ZEN_RULE { get { if (!_ACTION_AUTOMATIC_ZEN_RULEReady) { _ACTION_AUTOMATIC_ZEN_RULEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_AUTOMATIC_ZEN_RULE"); _ACTION_AUTOMATIC_ZEN_RULEReady = true; } return _ACTION_AUTOMATIC_ZEN_RULEContent; } }
        private static Java.Lang.String _ACTION_AUTOMATIC_ZEN_RULEContent = default;
        private static bool _ACTION_AUTOMATIC_ZEN_RULEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#ACTION_AUTOMATIC_ZEN_RULE_STATUS_CHANGED"/>
        /// </summary>
        public static Java.Lang.String ACTION_AUTOMATIC_ZEN_RULE_STATUS_CHANGED { get { if (!_ACTION_AUTOMATIC_ZEN_RULE_STATUS_CHANGEDReady) { _ACTION_AUTOMATIC_ZEN_RULE_STATUS_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_AUTOMATIC_ZEN_RULE_STATUS_CHANGED"); _ACTION_AUTOMATIC_ZEN_RULE_STATUS_CHANGEDReady = true; } return _ACTION_AUTOMATIC_ZEN_RULE_STATUS_CHANGEDContent; } }
        private static Java.Lang.String _ACTION_AUTOMATIC_ZEN_RULE_STATUS_CHANGEDContent = default;
        private static bool _ACTION_AUTOMATIC_ZEN_RULE_STATUS_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#ACTION_CONSOLIDATED_NOTIFICATION_POLICY_CHANGED"/>
        /// </summary>
        public static Java.Lang.String ACTION_CONSOLIDATED_NOTIFICATION_POLICY_CHANGED { get { if (!_ACTION_CONSOLIDATED_NOTIFICATION_POLICY_CHANGEDReady) { _ACTION_CONSOLIDATED_NOTIFICATION_POLICY_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_CONSOLIDATED_NOTIFICATION_POLICY_CHANGED"); _ACTION_CONSOLIDATED_NOTIFICATION_POLICY_CHANGEDReady = true; } return _ACTION_CONSOLIDATED_NOTIFICATION_POLICY_CHANGEDContent; } }
        private static Java.Lang.String _ACTION_CONSOLIDATED_NOTIFICATION_POLICY_CHANGEDContent = default;
        private static bool _ACTION_CONSOLIDATED_NOTIFICATION_POLICY_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#ACTION_INTERRUPTION_FILTER_CHANGED"/>
        /// </summary>
        public static Java.Lang.String ACTION_INTERRUPTION_FILTER_CHANGED { get { if (!_ACTION_INTERRUPTION_FILTER_CHANGEDReady) { _ACTION_INTERRUPTION_FILTER_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_INTERRUPTION_FILTER_CHANGED"); _ACTION_INTERRUPTION_FILTER_CHANGEDReady = true; } return _ACTION_INTERRUPTION_FILTER_CHANGEDContent; } }
        private static Java.Lang.String _ACTION_INTERRUPTION_FILTER_CHANGEDContent = default;
        private static bool _ACTION_INTERRUPTION_FILTER_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#ACTION_NOTIFICATION_CHANNEL_BLOCK_STATE_CHANGED"/>
        /// </summary>
        public static Java.Lang.String ACTION_NOTIFICATION_CHANNEL_BLOCK_STATE_CHANGED { get { if (!_ACTION_NOTIFICATION_CHANNEL_BLOCK_STATE_CHANGEDReady) { _ACTION_NOTIFICATION_CHANNEL_BLOCK_STATE_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_NOTIFICATION_CHANNEL_BLOCK_STATE_CHANGED"); _ACTION_NOTIFICATION_CHANNEL_BLOCK_STATE_CHANGEDReady = true; } return _ACTION_NOTIFICATION_CHANNEL_BLOCK_STATE_CHANGEDContent; } }
        private static Java.Lang.String _ACTION_NOTIFICATION_CHANNEL_BLOCK_STATE_CHANGEDContent = default;
        private static bool _ACTION_NOTIFICATION_CHANNEL_BLOCK_STATE_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#ACTION_NOTIFICATION_CHANNEL_GROUP_BLOCK_STATE_CHANGED"/>
        /// </summary>
        public static Java.Lang.String ACTION_NOTIFICATION_CHANNEL_GROUP_BLOCK_STATE_CHANGED { get { if (!_ACTION_NOTIFICATION_CHANNEL_GROUP_BLOCK_STATE_CHANGEDReady) { _ACTION_NOTIFICATION_CHANNEL_GROUP_BLOCK_STATE_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_NOTIFICATION_CHANNEL_GROUP_BLOCK_STATE_CHANGED"); _ACTION_NOTIFICATION_CHANNEL_GROUP_BLOCK_STATE_CHANGEDReady = true; } return _ACTION_NOTIFICATION_CHANNEL_GROUP_BLOCK_STATE_CHANGEDContent; } }
        private static Java.Lang.String _ACTION_NOTIFICATION_CHANNEL_GROUP_BLOCK_STATE_CHANGEDContent = default;
        private static bool _ACTION_NOTIFICATION_CHANNEL_GROUP_BLOCK_STATE_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#ACTION_NOTIFICATION_POLICY_ACCESS_GRANTED_CHANGED"/>
        /// </summary>
        public static Java.Lang.String ACTION_NOTIFICATION_POLICY_ACCESS_GRANTED_CHANGED { get { if (!_ACTION_NOTIFICATION_POLICY_ACCESS_GRANTED_CHANGEDReady) { _ACTION_NOTIFICATION_POLICY_ACCESS_GRANTED_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_NOTIFICATION_POLICY_ACCESS_GRANTED_CHANGED"); _ACTION_NOTIFICATION_POLICY_ACCESS_GRANTED_CHANGEDReady = true; } return _ACTION_NOTIFICATION_POLICY_ACCESS_GRANTED_CHANGEDContent; } }
        private static Java.Lang.String _ACTION_NOTIFICATION_POLICY_ACCESS_GRANTED_CHANGEDContent = default;
        private static bool _ACTION_NOTIFICATION_POLICY_ACCESS_GRANTED_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#ACTION_NOTIFICATION_POLICY_CHANGED"/>
        /// </summary>
        public static Java.Lang.String ACTION_NOTIFICATION_POLICY_CHANGED { get { if (!_ACTION_NOTIFICATION_POLICY_CHANGEDReady) { _ACTION_NOTIFICATION_POLICY_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_NOTIFICATION_POLICY_CHANGED"); _ACTION_NOTIFICATION_POLICY_CHANGEDReady = true; } return _ACTION_NOTIFICATION_POLICY_CHANGEDContent; } }
        private static Java.Lang.String _ACTION_NOTIFICATION_POLICY_CHANGEDContent = default;
        private static bool _ACTION_NOTIFICATION_POLICY_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#EXTRA_AUTOMATIC_RULE_ID"/>
        /// </summary>
        public static Java.Lang.String EXTRA_AUTOMATIC_RULE_ID { get { if (!_EXTRA_AUTOMATIC_RULE_IDReady) { _EXTRA_AUTOMATIC_RULE_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_AUTOMATIC_RULE_ID"); _EXTRA_AUTOMATIC_RULE_IDReady = true; } return _EXTRA_AUTOMATIC_RULE_IDContent; } }
        private static Java.Lang.String _EXTRA_AUTOMATIC_RULE_IDContent = default;
        private static bool _EXTRA_AUTOMATIC_RULE_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#EXTRA_AUTOMATIC_ZEN_RULE_ID"/>
        /// </summary>
        public static Java.Lang.String EXTRA_AUTOMATIC_ZEN_RULE_ID { get { if (!_EXTRA_AUTOMATIC_ZEN_RULE_IDReady) { _EXTRA_AUTOMATIC_ZEN_RULE_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_AUTOMATIC_ZEN_RULE_ID"); _EXTRA_AUTOMATIC_ZEN_RULE_IDReady = true; } return _EXTRA_AUTOMATIC_ZEN_RULE_IDContent; } }
        private static Java.Lang.String _EXTRA_AUTOMATIC_ZEN_RULE_IDContent = default;
        private static bool _EXTRA_AUTOMATIC_ZEN_RULE_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#EXTRA_AUTOMATIC_ZEN_RULE_STATUS"/>
        /// </summary>
        public static Java.Lang.String EXTRA_AUTOMATIC_ZEN_RULE_STATUS { get { if (!_EXTRA_AUTOMATIC_ZEN_RULE_STATUSReady) { _EXTRA_AUTOMATIC_ZEN_RULE_STATUSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_AUTOMATIC_ZEN_RULE_STATUS"); _EXTRA_AUTOMATIC_ZEN_RULE_STATUSReady = true; } return _EXTRA_AUTOMATIC_ZEN_RULE_STATUSContent; } }
        private static Java.Lang.String _EXTRA_AUTOMATIC_ZEN_RULE_STATUSContent = default;
        private static bool _EXTRA_AUTOMATIC_ZEN_RULE_STATUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#EXTRA_BLOCKED_STATE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_BLOCKED_STATE { get { if (!_EXTRA_BLOCKED_STATEReady) { _EXTRA_BLOCKED_STATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_BLOCKED_STATE"); _EXTRA_BLOCKED_STATEReady = true; } return _EXTRA_BLOCKED_STATEContent; } }
        private static Java.Lang.String _EXTRA_BLOCKED_STATEContent = default;
        private static bool _EXTRA_BLOCKED_STATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#EXTRA_NOTIFICATION_CHANNEL_GROUP_ID"/>
        /// </summary>
        public static Java.Lang.String EXTRA_NOTIFICATION_CHANNEL_GROUP_ID { get { if (!_EXTRA_NOTIFICATION_CHANNEL_GROUP_IDReady) { _EXTRA_NOTIFICATION_CHANNEL_GROUP_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_NOTIFICATION_CHANNEL_GROUP_ID"); _EXTRA_NOTIFICATION_CHANNEL_GROUP_IDReady = true; } return _EXTRA_NOTIFICATION_CHANNEL_GROUP_IDContent; } }
        private static Java.Lang.String _EXTRA_NOTIFICATION_CHANNEL_GROUP_IDContent = default;
        private static bool _EXTRA_NOTIFICATION_CHANNEL_GROUP_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#EXTRA_NOTIFICATION_CHANNEL_ID"/>
        /// </summary>
        public static Java.Lang.String EXTRA_NOTIFICATION_CHANNEL_ID { get { if (!_EXTRA_NOTIFICATION_CHANNEL_IDReady) { _EXTRA_NOTIFICATION_CHANNEL_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_NOTIFICATION_CHANNEL_ID"); _EXTRA_NOTIFICATION_CHANNEL_IDReady = true; } return _EXTRA_NOTIFICATION_CHANNEL_IDContent; } }
        private static Java.Lang.String _EXTRA_NOTIFICATION_CHANNEL_IDContent = default;
        private static bool _EXTRA_NOTIFICATION_CHANNEL_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#EXTRA_NOTIFICATION_POLICY"/>
        /// </summary>
        public static Java.Lang.String EXTRA_NOTIFICATION_POLICY { get { if (!_EXTRA_NOTIFICATION_POLICYReady) { _EXTRA_NOTIFICATION_POLICYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_NOTIFICATION_POLICY"); _EXTRA_NOTIFICATION_POLICYReady = true; } return _EXTRA_NOTIFICATION_POLICYContent; } }
        private static Java.Lang.String _EXTRA_NOTIFICATION_POLICYContent = default;
        private static bool _EXTRA_NOTIFICATION_POLICYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#META_DATA_AUTOMATIC_RULE_TYPE"/>
        /// </summary>
        public static Java.Lang.String META_DATA_AUTOMATIC_RULE_TYPE { get { if (!_META_DATA_AUTOMATIC_RULE_TYPEReady) { _META_DATA_AUTOMATIC_RULE_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "META_DATA_AUTOMATIC_RULE_TYPE"); _META_DATA_AUTOMATIC_RULE_TYPEReady = true; } return _META_DATA_AUTOMATIC_RULE_TYPEContent; } }
        private static Java.Lang.String _META_DATA_AUTOMATIC_RULE_TYPEContent = default;
        private static bool _META_DATA_AUTOMATIC_RULE_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#META_DATA_RULE_INSTANCE_LIMIT"/>
        /// </summary>
        public static Java.Lang.String META_DATA_RULE_INSTANCE_LIMIT { get { if (!_META_DATA_RULE_INSTANCE_LIMITReady) { _META_DATA_RULE_INSTANCE_LIMITContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "META_DATA_RULE_INSTANCE_LIMIT"); _META_DATA_RULE_INSTANCE_LIMITReady = true; } return _META_DATA_RULE_INSTANCE_LIMITContent; } }
        private static Java.Lang.String _META_DATA_RULE_INSTANCE_LIMITContent = default;
        private static bool _META_DATA_RULE_INSTANCE_LIMITReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#getAutomaticZenRule(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.App.AutomaticZenRule"/></returns>
        public Android.App.AutomaticZenRule GetAutomaticZenRule(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Android.App.AutomaticZenRule>("getAutomaticZenRule", "(Ljava/lang/String;)Landroid/app/AutomaticZenRule;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#getNotificationChannel(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.App.NotificationChannel"/></returns>
        public Android.App.NotificationChannel GetNotificationChannel(Java.Lang.String arg0, Java.Lang.String arg1)
        {
            return IExecute<Android.App.NotificationChannel>("getNotificationChannel", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#getNotificationChannel(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.App.NotificationChannel"/></returns>
        public Android.App.NotificationChannel GetNotificationChannel(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Android.App.NotificationChannel>("getNotificationChannel", "(Ljava/lang/String;)Landroid/app/NotificationChannel;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#getNotificationChannelGroup(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.App.NotificationChannelGroup"/></returns>
        public Android.App.NotificationChannelGroup GetNotificationChannelGroup(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Android.App.NotificationChannelGroup>("getNotificationChannelGroup", "(Ljava/lang/String;)Landroid/app/NotificationChannelGroup;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#getConsolidatedNotificationPolicy()"/>
        /// </summary>
        /// <returns><see cref="Android.App.NotificationManager.Policy"/></returns>
        public Android.App.NotificationManager.Policy GetConsolidatedNotificationPolicy()
        {
            return IExecuteWithSignature<Android.App.NotificationManager.Policy>("getConsolidatedNotificationPolicy", "()Landroid/app/NotificationManager$Policy;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#getNotificationPolicy()"/>
        /// </summary>
        /// <returns><see cref="Android.App.NotificationManager.Policy"/></returns>
        public Android.App.NotificationManager.Policy GetNotificationPolicy()
        {
            return IExecuteWithSignature<Android.App.NotificationManager.Policy>("getNotificationPolicy", "()Landroid/app/NotificationManager$Policy;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#getActiveNotifications()"/>
        /// </summary>
        /// <returns><see cref="Android.Service.Notification.StatusBarNotification"/></returns>
        public Android.Service.Notification.StatusBarNotification[] GetActiveNotifications()
        {
            return IExecuteWithSignatureArray<Android.Service.Notification.StatusBarNotification>("getActiveNotifications", "()[Landroid/service/notification/StatusBarNotification;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#areAutomaticZenRulesUserManaged()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool AreAutomaticZenRulesUserManaged()
        {
            return IExecuteWithSignature<bool>("areAutomaticZenRulesUserManaged", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#areBubblesAllowed()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool AreBubblesAllowed()
        {
            return IExecuteWithSignature<bool>("areBubblesAllowed", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#areBubblesEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool AreBubblesEnabled()
        {
            return IExecuteWithSignature<bool>("areBubblesEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#areNotificationsEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool AreNotificationsEnabled()
        {
            return IExecuteWithSignature<bool>("areNotificationsEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#areNotificationsPaused()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool AreNotificationsPaused()
        {
            return IExecuteWithSignature<bool>("areNotificationsPaused", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#canNotifyAsPackage(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool CanNotifyAsPackage(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<bool>("canNotifyAsPackage", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#canUseFullScreenIntent()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool CanUseFullScreenIntent()
        {
            return IExecuteWithSignature<bool>("canUseFullScreenIntent", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#isNotificationListenerAccessGranted(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsNotificationListenerAccessGranted(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<bool>("isNotificationListenerAccessGranted", "(Landroid/content/ComponentName;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#isNotificationPolicyAccessGranted()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsNotificationPolicyAccessGranted()
        {
            return IExecuteWithSignature<bool>("isNotificationPolicyAccessGranted", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#matchesCallFilter(android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool MatchesCallFilter(Android.Net.Uri arg0)
        {
            return IExecuteWithSignature<bool>("matchesCallFilter", "(Landroid/net/Uri;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#removeAutomaticZenRule(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RemoveAutomaticZenRule(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<bool>("removeAutomaticZenRule", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#shouldHideSilentStatusBarIcons()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool ShouldHideSilentStatusBarIcons()
        {
            return IExecuteWithSignature<bool>("shouldHideSilentStatusBarIcons", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#updateAutomaticZenRule(java.lang.String,android.app.AutomaticZenRule)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.App.AutomaticZenRule"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool UpdateAutomaticZenRule(Java.Lang.String arg0, Android.App.AutomaticZenRule arg1)
        {
            return IExecute<bool>("updateAutomaticZenRule", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#getCurrentInterruptionFilter()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetCurrentInterruptionFilter()
        {
            return IExecuteWithSignature<int>("getCurrentInterruptionFilter", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#setInterruptionFilter(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetInterruptionFilter(int arg0)
        {
            IExecuteWithSignature("setInterruptionFilter", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#getAutomaticZenRuleState(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetAutomaticZenRuleState(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<int>("getAutomaticZenRuleState", "(Ljava/lang/String;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#getBubblePreference()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetBubblePreference()
        {
            return IExecuteWithSignature<int>("getBubblePreference", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#getImportance()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetImportance()
        {
            return IExecuteWithSignature<int>("getImportance", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#addAutomaticZenRule(android.app.AutomaticZenRule)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.AutomaticZenRule"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String AddAutomaticZenRule(Android.App.AutomaticZenRule arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("addAutomaticZenRule", "(Landroid/app/AutomaticZenRule;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#getNotificationDelegate()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetNotificationDelegate()
        {
            return IExecuteWithSignature<Java.Lang.String>("getNotificationDelegate", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#getNotificationChannels()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.App.NotificationChannel> GetNotificationChannels()
        {
            return IExecuteWithSignature<Java.Util.List<Android.App.NotificationChannel>>("getNotificationChannels", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#getNotificationChannelGroups()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.App.NotificationChannelGroup> GetNotificationChannelGroups()
        {
            return IExecuteWithSignature<Java.Util.List<Android.App.NotificationChannelGroup>>("getNotificationChannelGroups", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#getAutomaticZenRules()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public Java.Util.Map<Java.Lang.String, Android.App.AutomaticZenRule> GetAutomaticZenRules()
        {
            return IExecuteWithSignature<Java.Util.Map<Java.Lang.String, Android.App.AutomaticZenRule>>("getAutomaticZenRules", "()Ljava/util/Map;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#cancel(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void Cancel(int arg0)
        {
            IExecuteWithSignature("cancel", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#cancel(java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void Cancel(Java.Lang.String arg0, int arg1)
        {
            IExecute("cancel", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#cancelAll()"/>
        /// </summary>
        public void CancelAll()
        {
            IExecuteWithSignature("cancelAll", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#cancelAsPackage(java.lang.String,java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void CancelAsPackage(Java.Lang.String arg0, Java.Lang.String arg1, int arg2)
        {
            IExecute("cancelAsPackage", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#createNotificationChannel(android.app.NotificationChannel)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.NotificationChannel"/></param>
        public void CreateNotificationChannel(Android.App.NotificationChannel arg0)
        {
            IExecuteWithSignature("createNotificationChannel", "(Landroid/app/NotificationChannel;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#createNotificationChannelGroup(android.app.NotificationChannelGroup)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.NotificationChannelGroup"/></param>
        public void CreateNotificationChannelGroup(Android.App.NotificationChannelGroup arg0)
        {
            IExecuteWithSignature("createNotificationChannelGroup", "(Landroid/app/NotificationChannelGroup;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#createNotificationChannelGroups(java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        public void CreateNotificationChannelGroups(Java.Util.List<Android.App.NotificationChannelGroup> arg0)
        {
            IExecuteWithSignature("createNotificationChannelGroups", "(Ljava/util/List;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#createNotificationChannels(java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        public void CreateNotificationChannels(Java.Util.List<Android.App.NotificationChannel> arg0)
        {
            IExecuteWithSignature("createNotificationChannels", "(Ljava/util/List;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#deleteNotificationChannel(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void DeleteNotificationChannel(Java.Lang.String arg0)
        {
            IExecuteWithSignature("deleteNotificationChannel", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#deleteNotificationChannelGroup(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void DeleteNotificationChannelGroup(Java.Lang.String arg0)
        {
            IExecuteWithSignature("deleteNotificationChannelGroup", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#notify(int,android.app.Notification)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.App.Notification"/></param>
        public void Notify(int arg0, Android.App.Notification arg1)
        {
            IExecute("notify", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#notify(java.lang.String,int,android.app.Notification)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.App.Notification"/></param>
        public void Notify(Java.Lang.String arg0, int arg1, Android.App.Notification arg2)
        {
            IExecute("notify", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#notifyAsPackage(java.lang.String,java.lang.String,int,android.app.Notification)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Android.App.Notification"/></param>
        public void NotifyAsPackage(Java.Lang.String arg0, Java.Lang.String arg1, int arg2, Android.App.Notification arg3)
        {
            IExecute("notifyAsPackage", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#setAutomaticZenRuleState(java.lang.String,android.service.notification.Condition)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Service.Notification.Condition"/></param>
        public void SetAutomaticZenRuleState(Java.Lang.String arg0, Android.Service.Notification.Condition arg1)
        {
            IExecute("setAutomaticZenRuleState", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#setNotificationDelegate(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void SetNotificationDelegate(Java.Lang.String arg0)
        {
            IExecuteWithSignature("setNotificationDelegate", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/NotificationManager.html#setNotificationPolicy(android.app.NotificationManager.Policy)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.NotificationManager.Policy"/></param>
        public void SetNotificationPolicy(Android.App.NotificationManager.Policy arg0)
        {
            IExecuteWithSignature("setNotificationPolicy", "(Landroid/app/NotificationManager$Policy;)V", arg0);
        }

        #endregion

        #region Nested classes
        #region Policy
        public partial class Policy
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/NotificationManager.Policy.html#%3Cinit%3E(int,int,int,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="int"/></param>
            /// <param name="arg4"><see cref="int"/></param>
            public Policy(int arg0, int arg1, int arg2, int arg3, int arg4)
                : base(arg0, arg1, arg2, arg3, arg4)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/NotificationManager.Policy.html#%3Cinit%3E(int,int,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="int"/></param>
            public Policy(int arg0, int arg1, int arg2, int arg3)
                : base(arg0, arg1, arg2, arg3)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/NotificationManager.Policy.html#%3Cinit%3E(int,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            public Policy(int arg0, int arg1, int arg2)
                : base(arg0, arg1, arg2)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/NotificationManager.Policy.html#priorityCallSenders"/>
            /// </summary>
            public int priorityCallSenders { get { if (!_priorityCallSendersReady) { _priorityCallSendersContent = IGetField<int>("priorityCallSenders"); _priorityCallSendersReady = true; } return _priorityCallSendersContent; } }
            private int _priorityCallSendersContent = default;
            private bool _priorityCallSendersReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/NotificationManager.Policy.html#priorityCategories"/>
            /// </summary>
            public int priorityCategories { get { if (!_priorityCategoriesReady) { _priorityCategoriesContent = IGetField<int>("priorityCategories"); _priorityCategoriesReady = true; } return _priorityCategoriesContent; } }
            private int _priorityCategoriesContent = default;
            private bool _priorityCategoriesReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/NotificationManager.Policy.html#priorityConversationSenders"/>
            /// </summary>
            public int priorityConversationSenders { get { if (!_priorityConversationSendersReady) { _priorityConversationSendersContent = IGetField<int>("priorityConversationSenders"); _priorityConversationSendersReady = true; } return _priorityConversationSendersContent; } }
            private int _priorityConversationSendersContent = default;
            private bool _priorityConversationSendersReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/NotificationManager.Policy.html#priorityMessageSenders"/>
            /// </summary>
            public int priorityMessageSenders { get { if (!_priorityMessageSendersReady) { _priorityMessageSendersContent = IGetField<int>("priorityMessageSenders"); _priorityMessageSendersReady = true; } return _priorityMessageSendersContent; } }
            private int _priorityMessageSendersContent = default;
            private bool _priorityMessageSendersReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/NotificationManager.Policy.html#suppressedVisualEffects"/>
            /// </summary>
            public int suppressedVisualEffects { get { if (!_suppressedVisualEffectsReady) { _suppressedVisualEffectsContent = IGetField<int>("suppressedVisualEffects"); _suppressedVisualEffectsReady = true; } return _suppressedVisualEffectsContent; } }
            private int _suppressedVisualEffectsContent = default;
            private bool _suppressedVisualEffectsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/NotificationManager.Policy.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/NotificationManager.Policy.html#CONVERSATION_SENDERS_ANYONE"/>
            /// </summary>
            public static int CONVERSATION_SENDERS_ANYONE { get { if (!_CONVERSATION_SENDERS_ANYONEReady) { _CONVERSATION_SENDERS_ANYONEContent = SGetField<int>(LocalBridgeClazz, "CONVERSATION_SENDERS_ANYONE"); _CONVERSATION_SENDERS_ANYONEReady = true; } return _CONVERSATION_SENDERS_ANYONEContent; } }
            private static int _CONVERSATION_SENDERS_ANYONEContent = default;
            private static bool _CONVERSATION_SENDERS_ANYONEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/NotificationManager.Policy.html#CONVERSATION_SENDERS_IMPORTANT"/>
            /// </summary>
            public static int CONVERSATION_SENDERS_IMPORTANT { get { if (!_CONVERSATION_SENDERS_IMPORTANTReady) { _CONVERSATION_SENDERS_IMPORTANTContent = SGetField<int>(LocalBridgeClazz, "CONVERSATION_SENDERS_IMPORTANT"); _CONVERSATION_SENDERS_IMPORTANTReady = true; } return _CONVERSATION_SENDERS_IMPORTANTContent; } }
            private static int _CONVERSATION_SENDERS_IMPORTANTContent = default;
            private static bool _CONVERSATION_SENDERS_IMPORTANTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/NotificationManager.Policy.html#CONVERSATION_SENDERS_NONE"/>
            /// </summary>
            public static int CONVERSATION_SENDERS_NONE { get { if (!_CONVERSATION_SENDERS_NONEReady) { _CONVERSATION_SENDERS_NONEContent = SGetField<int>(LocalBridgeClazz, "CONVERSATION_SENDERS_NONE"); _CONVERSATION_SENDERS_NONEReady = true; } return _CONVERSATION_SENDERS_NONEContent; } }
            private static int _CONVERSATION_SENDERS_NONEContent = default;
            private static bool _CONVERSATION_SENDERS_NONEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/NotificationManager.Policy.html#PRIORITY_CATEGORY_ALARMS"/>
            /// </summary>
            public static int PRIORITY_CATEGORY_ALARMS { get { if (!_PRIORITY_CATEGORY_ALARMSReady) { _PRIORITY_CATEGORY_ALARMSContent = SGetField<int>(LocalBridgeClazz, "PRIORITY_CATEGORY_ALARMS"); _PRIORITY_CATEGORY_ALARMSReady = true; } return _PRIORITY_CATEGORY_ALARMSContent; } }
            private static int _PRIORITY_CATEGORY_ALARMSContent = default;
            private static bool _PRIORITY_CATEGORY_ALARMSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/NotificationManager.Policy.html#PRIORITY_CATEGORY_CALLS"/>
            /// </summary>
            public static int PRIORITY_CATEGORY_CALLS { get { if (!_PRIORITY_CATEGORY_CALLSReady) { _PRIORITY_CATEGORY_CALLSContent = SGetField<int>(LocalBridgeClazz, "PRIORITY_CATEGORY_CALLS"); _PRIORITY_CATEGORY_CALLSReady = true; } return _PRIORITY_CATEGORY_CALLSContent; } }
            private static int _PRIORITY_CATEGORY_CALLSContent = default;
            private static bool _PRIORITY_CATEGORY_CALLSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/NotificationManager.Policy.html#PRIORITY_CATEGORY_CONVERSATIONS"/>
            /// </summary>
            public static int PRIORITY_CATEGORY_CONVERSATIONS { get { if (!_PRIORITY_CATEGORY_CONVERSATIONSReady) { _PRIORITY_CATEGORY_CONVERSATIONSContent = SGetField<int>(LocalBridgeClazz, "PRIORITY_CATEGORY_CONVERSATIONS"); _PRIORITY_CATEGORY_CONVERSATIONSReady = true; } return _PRIORITY_CATEGORY_CONVERSATIONSContent; } }
            private static int _PRIORITY_CATEGORY_CONVERSATIONSContent = default;
            private static bool _PRIORITY_CATEGORY_CONVERSATIONSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/NotificationManager.Policy.html#PRIORITY_CATEGORY_EVENTS"/>
            /// </summary>
            public static int PRIORITY_CATEGORY_EVENTS { get { if (!_PRIORITY_CATEGORY_EVENTSReady) { _PRIORITY_CATEGORY_EVENTSContent = SGetField<int>(LocalBridgeClazz, "PRIORITY_CATEGORY_EVENTS"); _PRIORITY_CATEGORY_EVENTSReady = true; } return _PRIORITY_CATEGORY_EVENTSContent; } }
            private static int _PRIORITY_CATEGORY_EVENTSContent = default;
            private static bool _PRIORITY_CATEGORY_EVENTSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/NotificationManager.Policy.html#PRIORITY_CATEGORY_MEDIA"/>
            /// </summary>
            public static int PRIORITY_CATEGORY_MEDIA { get { if (!_PRIORITY_CATEGORY_MEDIAReady) { _PRIORITY_CATEGORY_MEDIAContent = SGetField<int>(LocalBridgeClazz, "PRIORITY_CATEGORY_MEDIA"); _PRIORITY_CATEGORY_MEDIAReady = true; } return _PRIORITY_CATEGORY_MEDIAContent; } }
            private static int _PRIORITY_CATEGORY_MEDIAContent = default;
            private static bool _PRIORITY_CATEGORY_MEDIAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/NotificationManager.Policy.html#PRIORITY_CATEGORY_MESSAGES"/>
            /// </summary>
            public static int PRIORITY_CATEGORY_MESSAGES { get { if (!_PRIORITY_CATEGORY_MESSAGESReady) { _PRIORITY_CATEGORY_MESSAGESContent = SGetField<int>(LocalBridgeClazz, "PRIORITY_CATEGORY_MESSAGES"); _PRIORITY_CATEGORY_MESSAGESReady = true; } return _PRIORITY_CATEGORY_MESSAGESContent; } }
            private static int _PRIORITY_CATEGORY_MESSAGESContent = default;
            private static bool _PRIORITY_CATEGORY_MESSAGESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/NotificationManager.Policy.html#PRIORITY_CATEGORY_REMINDERS"/>
            /// </summary>
            public static int PRIORITY_CATEGORY_REMINDERS { get { if (!_PRIORITY_CATEGORY_REMINDERSReady) { _PRIORITY_CATEGORY_REMINDERSContent = SGetField<int>(LocalBridgeClazz, "PRIORITY_CATEGORY_REMINDERS"); _PRIORITY_CATEGORY_REMINDERSReady = true; } return _PRIORITY_CATEGORY_REMINDERSContent; } }
            private static int _PRIORITY_CATEGORY_REMINDERSContent = default;
            private static bool _PRIORITY_CATEGORY_REMINDERSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/NotificationManager.Policy.html#PRIORITY_CATEGORY_REPEAT_CALLERS"/>
            /// </summary>
            public static int PRIORITY_CATEGORY_REPEAT_CALLERS { get { if (!_PRIORITY_CATEGORY_REPEAT_CALLERSReady) { _PRIORITY_CATEGORY_REPEAT_CALLERSContent = SGetField<int>(LocalBridgeClazz, "PRIORITY_CATEGORY_REPEAT_CALLERS"); _PRIORITY_CATEGORY_REPEAT_CALLERSReady = true; } return _PRIORITY_CATEGORY_REPEAT_CALLERSContent; } }
            private static int _PRIORITY_CATEGORY_REPEAT_CALLERSContent = default;
            private static bool _PRIORITY_CATEGORY_REPEAT_CALLERSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/NotificationManager.Policy.html#PRIORITY_CATEGORY_SYSTEM"/>
            /// </summary>
            public static int PRIORITY_CATEGORY_SYSTEM { get { if (!_PRIORITY_CATEGORY_SYSTEMReady) { _PRIORITY_CATEGORY_SYSTEMContent = SGetField<int>(LocalBridgeClazz, "PRIORITY_CATEGORY_SYSTEM"); _PRIORITY_CATEGORY_SYSTEMReady = true; } return _PRIORITY_CATEGORY_SYSTEMContent; } }
            private static int _PRIORITY_CATEGORY_SYSTEMContent = default;
            private static bool _PRIORITY_CATEGORY_SYSTEMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/NotificationManager.Policy.html#PRIORITY_SENDERS_ANY"/>
            /// </summary>
            public static int PRIORITY_SENDERS_ANY { get { if (!_PRIORITY_SENDERS_ANYReady) { _PRIORITY_SENDERS_ANYContent = SGetField<int>(LocalBridgeClazz, "PRIORITY_SENDERS_ANY"); _PRIORITY_SENDERS_ANYReady = true; } return _PRIORITY_SENDERS_ANYContent; } }
            private static int _PRIORITY_SENDERS_ANYContent = default;
            private static bool _PRIORITY_SENDERS_ANYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/NotificationManager.Policy.html#PRIORITY_SENDERS_CONTACTS"/>
            /// </summary>
            public static int PRIORITY_SENDERS_CONTACTS { get { if (!_PRIORITY_SENDERS_CONTACTSReady) { _PRIORITY_SENDERS_CONTACTSContent = SGetField<int>(LocalBridgeClazz, "PRIORITY_SENDERS_CONTACTS"); _PRIORITY_SENDERS_CONTACTSReady = true; } return _PRIORITY_SENDERS_CONTACTSContent; } }
            private static int _PRIORITY_SENDERS_CONTACTSContent = default;
            private static bool _PRIORITY_SENDERS_CONTACTSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/NotificationManager.Policy.html#PRIORITY_SENDERS_STARRED"/>
            /// </summary>
            public static int PRIORITY_SENDERS_STARRED { get { if (!_PRIORITY_SENDERS_STARREDReady) { _PRIORITY_SENDERS_STARREDContent = SGetField<int>(LocalBridgeClazz, "PRIORITY_SENDERS_STARRED"); _PRIORITY_SENDERS_STARREDReady = true; } return _PRIORITY_SENDERS_STARREDContent; } }
            private static int _PRIORITY_SENDERS_STARREDContent = default;
            private static bool _PRIORITY_SENDERS_STARREDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/NotificationManager.Policy.html#SUPPRESSED_EFFECT_AMBIENT"/>
            /// </summary>
            public static int SUPPRESSED_EFFECT_AMBIENT { get { if (!_SUPPRESSED_EFFECT_AMBIENTReady) { _SUPPRESSED_EFFECT_AMBIENTContent = SGetField<int>(LocalBridgeClazz, "SUPPRESSED_EFFECT_AMBIENT"); _SUPPRESSED_EFFECT_AMBIENTReady = true; } return _SUPPRESSED_EFFECT_AMBIENTContent; } }
            private static int _SUPPRESSED_EFFECT_AMBIENTContent = default;
            private static bool _SUPPRESSED_EFFECT_AMBIENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/NotificationManager.Policy.html#SUPPRESSED_EFFECT_BADGE"/>
            /// </summary>
            public static int SUPPRESSED_EFFECT_BADGE { get { if (!_SUPPRESSED_EFFECT_BADGEReady) { _SUPPRESSED_EFFECT_BADGEContent = SGetField<int>(LocalBridgeClazz, "SUPPRESSED_EFFECT_BADGE"); _SUPPRESSED_EFFECT_BADGEReady = true; } return _SUPPRESSED_EFFECT_BADGEContent; } }
            private static int _SUPPRESSED_EFFECT_BADGEContent = default;
            private static bool _SUPPRESSED_EFFECT_BADGEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/NotificationManager.Policy.html#SUPPRESSED_EFFECT_FULL_SCREEN_INTENT"/>
            /// </summary>
            public static int SUPPRESSED_EFFECT_FULL_SCREEN_INTENT { get { if (!_SUPPRESSED_EFFECT_FULL_SCREEN_INTENTReady) { _SUPPRESSED_EFFECT_FULL_SCREEN_INTENTContent = SGetField<int>(LocalBridgeClazz, "SUPPRESSED_EFFECT_FULL_SCREEN_INTENT"); _SUPPRESSED_EFFECT_FULL_SCREEN_INTENTReady = true; } return _SUPPRESSED_EFFECT_FULL_SCREEN_INTENTContent; } }
            private static int _SUPPRESSED_EFFECT_FULL_SCREEN_INTENTContent = default;
            private static bool _SUPPRESSED_EFFECT_FULL_SCREEN_INTENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/NotificationManager.Policy.html#SUPPRESSED_EFFECT_LIGHTS"/>
            /// </summary>
            public static int SUPPRESSED_EFFECT_LIGHTS { get { if (!_SUPPRESSED_EFFECT_LIGHTSReady) { _SUPPRESSED_EFFECT_LIGHTSContent = SGetField<int>(LocalBridgeClazz, "SUPPRESSED_EFFECT_LIGHTS"); _SUPPRESSED_EFFECT_LIGHTSReady = true; } return _SUPPRESSED_EFFECT_LIGHTSContent; } }
            private static int _SUPPRESSED_EFFECT_LIGHTSContent = default;
            private static bool _SUPPRESSED_EFFECT_LIGHTSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/NotificationManager.Policy.html#SUPPRESSED_EFFECT_NOTIFICATION_LIST"/>
            /// </summary>
            public static int SUPPRESSED_EFFECT_NOTIFICATION_LIST { get { if (!_SUPPRESSED_EFFECT_NOTIFICATION_LISTReady) { _SUPPRESSED_EFFECT_NOTIFICATION_LISTContent = SGetField<int>(LocalBridgeClazz, "SUPPRESSED_EFFECT_NOTIFICATION_LIST"); _SUPPRESSED_EFFECT_NOTIFICATION_LISTReady = true; } return _SUPPRESSED_EFFECT_NOTIFICATION_LISTContent; } }
            private static int _SUPPRESSED_EFFECT_NOTIFICATION_LISTContent = default;
            private static bool _SUPPRESSED_EFFECT_NOTIFICATION_LISTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/NotificationManager.Policy.html#SUPPRESSED_EFFECT_PEEK"/>
            /// </summary>
            public static int SUPPRESSED_EFFECT_PEEK { get { if (!_SUPPRESSED_EFFECT_PEEKReady) { _SUPPRESSED_EFFECT_PEEKContent = SGetField<int>(LocalBridgeClazz, "SUPPRESSED_EFFECT_PEEK"); _SUPPRESSED_EFFECT_PEEKReady = true; } return _SUPPRESSED_EFFECT_PEEKContent; } }
            private static int _SUPPRESSED_EFFECT_PEEKContent = default;
            private static bool _SUPPRESSED_EFFECT_PEEKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/NotificationManager.Policy.html#SUPPRESSED_EFFECT_SCREEN_OFF"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int SUPPRESSED_EFFECT_SCREEN_OFF { get { if (!_SUPPRESSED_EFFECT_SCREEN_OFFReady) { _SUPPRESSED_EFFECT_SCREEN_OFFContent = SGetField<int>(LocalBridgeClazz, "SUPPRESSED_EFFECT_SCREEN_OFF"); _SUPPRESSED_EFFECT_SCREEN_OFFReady = true; } return _SUPPRESSED_EFFECT_SCREEN_OFFContent; } }
            private static int _SUPPRESSED_EFFECT_SCREEN_OFFContent = default;
            private static bool _SUPPRESSED_EFFECT_SCREEN_OFFReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/NotificationManager.Policy.html#SUPPRESSED_EFFECT_SCREEN_ON"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int SUPPRESSED_EFFECT_SCREEN_ON { get { if (!_SUPPRESSED_EFFECT_SCREEN_ONReady) { _SUPPRESSED_EFFECT_SCREEN_ONContent = SGetField<int>(LocalBridgeClazz, "SUPPRESSED_EFFECT_SCREEN_ON"); _SUPPRESSED_EFFECT_SCREEN_ONReady = true; } return _SUPPRESSED_EFFECT_SCREEN_ONContent; } }
            private static int _SUPPRESSED_EFFECT_SCREEN_ONContent = default;
            private static bool _SUPPRESSED_EFFECT_SCREEN_ONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/NotificationManager.Policy.html#SUPPRESSED_EFFECT_STATUS_BAR"/>
            /// </summary>
            public static int SUPPRESSED_EFFECT_STATUS_BAR { get { if (!_SUPPRESSED_EFFECT_STATUS_BARReady) { _SUPPRESSED_EFFECT_STATUS_BARContent = SGetField<int>(LocalBridgeClazz, "SUPPRESSED_EFFECT_STATUS_BAR"); _SUPPRESSED_EFFECT_STATUS_BARReady = true; } return _SUPPRESSED_EFFECT_STATUS_BARContent; } }
            private static int _SUPPRESSED_EFFECT_STATUS_BARContent = default;
            private static bool _SUPPRESSED_EFFECT_STATUS_BARReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/NotificationManager.Policy.html#priorityCategoriesToString(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public static Java.Lang.String PriorityCategoriesToString(int arg0)
            {
                return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "priorityCategoriesToString", "(I)Ljava/lang/String;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/NotificationManager.Policy.html#prioritySendersToString(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public static Java.Lang.String PrioritySendersToString(int arg0)
            {
                return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "prioritySendersToString", "(I)Ljava/lang/String;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/NotificationManager.Policy.html#suppressedEffectsToString(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public static Java.Lang.String SuppressedEffectsToString(int arg0)
            {
                return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "suppressedEffectsToString", "(I)Ljava/lang/String;", arg0);
            }

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/NotificationManager.Policy.html#describeContents()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int DescribeContents()
            {
                return IExecuteWithSignature<int>("describeContents", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/NotificationManager.Policy.html#writeToParcel(android.os.Parcel,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
            {
                IExecute("writeToParcel", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
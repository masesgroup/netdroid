/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.2.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.App.Job
{
    #region JobInfo
    public partial class JobInfo
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#BACKOFF_POLICY_EXPONENTIAL"/>
        /// </summary>
        public static int BACKOFF_POLICY_EXPONENTIAL { get { if (!_BACKOFF_POLICY_EXPONENTIALReady) { _BACKOFF_POLICY_EXPONENTIALContent = SGetField<int>(LocalBridgeClazz, "BACKOFF_POLICY_EXPONENTIAL"); _BACKOFF_POLICY_EXPONENTIALReady = true; } return _BACKOFF_POLICY_EXPONENTIALContent; } }
        private static int _BACKOFF_POLICY_EXPONENTIALContent = default;
        private static bool _BACKOFF_POLICY_EXPONENTIALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#BACKOFF_POLICY_LINEAR"/>
        /// </summary>
        public static int BACKOFF_POLICY_LINEAR { get { if (!_BACKOFF_POLICY_LINEARReady) { _BACKOFF_POLICY_LINEARContent = SGetField<int>(LocalBridgeClazz, "BACKOFF_POLICY_LINEAR"); _BACKOFF_POLICY_LINEARReady = true; } return _BACKOFF_POLICY_LINEARContent; } }
        private static int _BACKOFF_POLICY_LINEARContent = default;
        private static bool _BACKOFF_POLICY_LINEARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#NETWORK_BYTES_UNKNOWN"/>
        /// </summary>
        public static int NETWORK_BYTES_UNKNOWN { get { if (!_NETWORK_BYTES_UNKNOWNReady) { _NETWORK_BYTES_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "NETWORK_BYTES_UNKNOWN"); _NETWORK_BYTES_UNKNOWNReady = true; } return _NETWORK_BYTES_UNKNOWNContent; } }
        private static int _NETWORK_BYTES_UNKNOWNContent = default;
        private static bool _NETWORK_BYTES_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#NETWORK_TYPE_ANY"/>
        /// </summary>
        public static int NETWORK_TYPE_ANY { get { if (!_NETWORK_TYPE_ANYReady) { _NETWORK_TYPE_ANYContent = SGetField<int>(LocalBridgeClazz, "NETWORK_TYPE_ANY"); _NETWORK_TYPE_ANYReady = true; } return _NETWORK_TYPE_ANYContent; } }
        private static int _NETWORK_TYPE_ANYContent = default;
        private static bool _NETWORK_TYPE_ANYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#NETWORK_TYPE_CELLULAR"/>
        /// </summary>
        public static int NETWORK_TYPE_CELLULAR { get { if (!_NETWORK_TYPE_CELLULARReady) { _NETWORK_TYPE_CELLULARContent = SGetField<int>(LocalBridgeClazz, "NETWORK_TYPE_CELLULAR"); _NETWORK_TYPE_CELLULARReady = true; } return _NETWORK_TYPE_CELLULARContent; } }
        private static int _NETWORK_TYPE_CELLULARContent = default;
        private static bool _NETWORK_TYPE_CELLULARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#NETWORK_TYPE_METERED"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int NETWORK_TYPE_METERED { get { if (!_NETWORK_TYPE_METEREDReady) { _NETWORK_TYPE_METEREDContent = SGetField<int>(LocalBridgeClazz, "NETWORK_TYPE_METERED"); _NETWORK_TYPE_METEREDReady = true; } return _NETWORK_TYPE_METEREDContent; } }
        private static int _NETWORK_TYPE_METEREDContent = default;
        private static bool _NETWORK_TYPE_METEREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#NETWORK_TYPE_NONE"/>
        /// </summary>
        public static int NETWORK_TYPE_NONE { get { if (!_NETWORK_TYPE_NONEReady) { _NETWORK_TYPE_NONEContent = SGetField<int>(LocalBridgeClazz, "NETWORK_TYPE_NONE"); _NETWORK_TYPE_NONEReady = true; } return _NETWORK_TYPE_NONEContent; } }
        private static int _NETWORK_TYPE_NONEContent = default;
        private static bool _NETWORK_TYPE_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#NETWORK_TYPE_NOT_ROAMING"/>
        /// </summary>
        public static int NETWORK_TYPE_NOT_ROAMING { get { if (!_NETWORK_TYPE_NOT_ROAMINGReady) { _NETWORK_TYPE_NOT_ROAMINGContent = SGetField<int>(LocalBridgeClazz, "NETWORK_TYPE_NOT_ROAMING"); _NETWORK_TYPE_NOT_ROAMINGReady = true; } return _NETWORK_TYPE_NOT_ROAMINGContent; } }
        private static int _NETWORK_TYPE_NOT_ROAMINGContent = default;
        private static bool _NETWORK_TYPE_NOT_ROAMINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#NETWORK_TYPE_UNMETERED"/>
        /// </summary>
        public static int NETWORK_TYPE_UNMETERED { get { if (!_NETWORK_TYPE_UNMETEREDReady) { _NETWORK_TYPE_UNMETEREDContent = SGetField<int>(LocalBridgeClazz, "NETWORK_TYPE_UNMETERED"); _NETWORK_TYPE_UNMETEREDReady = true; } return _NETWORK_TYPE_UNMETEREDContent; } }
        private static int _NETWORK_TYPE_UNMETEREDContent = default;
        private static bool _NETWORK_TYPE_UNMETEREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#PRIORITY_DEFAULT"/>
        /// </summary>
        public static int PRIORITY_DEFAULT { get { if (!_PRIORITY_DEFAULTReady) { _PRIORITY_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "PRIORITY_DEFAULT"); _PRIORITY_DEFAULTReady = true; } return _PRIORITY_DEFAULTContent; } }
        private static int _PRIORITY_DEFAULTContent = default;
        private static bool _PRIORITY_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#PRIORITY_HIGH"/>
        /// </summary>
        public static int PRIORITY_HIGH { get { if (!_PRIORITY_HIGHReady) { _PRIORITY_HIGHContent = SGetField<int>(LocalBridgeClazz, "PRIORITY_HIGH"); _PRIORITY_HIGHReady = true; } return _PRIORITY_HIGHContent; } }
        private static int _PRIORITY_HIGHContent = default;
        private static bool _PRIORITY_HIGHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#PRIORITY_LOW"/>
        /// </summary>
        public static int PRIORITY_LOW { get { if (!_PRIORITY_LOWReady) { _PRIORITY_LOWContent = SGetField<int>(LocalBridgeClazz, "PRIORITY_LOW"); _PRIORITY_LOWReady = true; } return _PRIORITY_LOWContent; } }
        private static int _PRIORITY_LOWContent = default;
        private static bool _PRIORITY_LOWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#PRIORITY_MAX"/>
        /// </summary>
        public static int PRIORITY_MAX { get { if (!_PRIORITY_MAXReady) { _PRIORITY_MAXContent = SGetField<int>(LocalBridgeClazz, "PRIORITY_MAX"); _PRIORITY_MAXReady = true; } return _PRIORITY_MAXContent; } }
        private static int _PRIORITY_MAXContent = default;
        private static bool _PRIORITY_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#PRIORITY_MIN"/>
        /// </summary>
        public static int PRIORITY_MIN { get { if (!_PRIORITY_MINReady) { _PRIORITY_MINContent = SGetField<int>(LocalBridgeClazz, "PRIORITY_MIN"); _PRIORITY_MINReady = true; } return _PRIORITY_MINContent; } }
        private static int _PRIORITY_MINContent = default;
        private static bool _PRIORITY_MINReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#DEFAULT_INITIAL_BACKOFF_MILLIS"/>
        /// </summary>
        public static long DEFAULT_INITIAL_BACKOFF_MILLIS { get { if (!_DEFAULT_INITIAL_BACKOFF_MILLISReady) { _DEFAULT_INITIAL_BACKOFF_MILLISContent = SGetField<long>(LocalBridgeClazz, "DEFAULT_INITIAL_BACKOFF_MILLIS"); _DEFAULT_INITIAL_BACKOFF_MILLISReady = true; } return _DEFAULT_INITIAL_BACKOFF_MILLISContent; } }
        private static long _DEFAULT_INITIAL_BACKOFF_MILLISContent = default;
        private static bool _DEFAULT_INITIAL_BACKOFF_MILLISReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#MAX_BACKOFF_DELAY_MILLIS"/>
        /// </summary>
        public static long MAX_BACKOFF_DELAY_MILLIS { get { if (!_MAX_BACKOFF_DELAY_MILLISReady) { _MAX_BACKOFF_DELAY_MILLISContent = SGetField<long>(LocalBridgeClazz, "MAX_BACKOFF_DELAY_MILLIS"); _MAX_BACKOFF_DELAY_MILLISReady = true; } return _MAX_BACKOFF_DELAY_MILLISContent; } }
        private static long _MAX_BACKOFF_DELAY_MILLISContent = default;
        private static bool _MAX_BACKOFF_DELAY_MILLISReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#getMinFlexMillis()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public static long GetMinFlexMillis()
        {
            return SExecuteWithSignature<long>(LocalBridgeClazz, "getMinFlexMillis", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#getMinPeriodMillis()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public static long GetMinPeriodMillis()
        {
            return SExecuteWithSignature<long>(LocalBridgeClazz, "getMinPeriodMillis", "()J");
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#getTriggerContentUris()"/>
        /// </summary>
        /// <returns><see cref="Android.App.Job.JobInfo.TriggerContentUri"/></returns>
        public Android.App.Job.JobInfo.TriggerContentUri[] GetTriggerContentUris()
        {
            return IExecuteWithSignatureArray<Android.App.Job.JobInfo.TriggerContentUri>("getTriggerContentUris", "()[Landroid/app/job/JobInfo$TriggerContentUri;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#getClipData()"/>
        /// </summary>
        /// <returns><see cref="Android.Content.ClipData"/></returns>
        public Android.Content.ClipData GetClipData()
        {
            return IExecuteWithSignature<Android.Content.ClipData>("getClipData", "()Landroid/content/ClipData;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#getService()"/>
        /// </summary>
        /// <returns><see cref="Android.Content.ComponentName"/></returns>
        public Android.Content.ComponentName GetService()
        {
            return IExecuteWithSignature<Android.Content.ComponentName>("getService", "()Landroid/content/ComponentName;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#getRequiredNetwork()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.NetworkRequest"/></returns>
        public Android.Net.NetworkRequest GetRequiredNetwork()
        {
            return IExecuteWithSignature<Android.Net.NetworkRequest>("getRequiredNetwork", "()Landroid/net/NetworkRequest;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#getTransientExtras()"/>
        /// </summary>
        /// <returns><see cref="Android.Os.Bundle"/></returns>
        public Android.Os.Bundle GetTransientExtras()
        {
            return IExecuteWithSignature<Android.Os.Bundle>("getTransientExtras", "()Landroid/os/Bundle;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#getExtras()"/>
        /// </summary>
        /// <returns><see cref="Android.Os.PersistableBundle"/></returns>
        public Android.Os.PersistableBundle GetExtras()
        {
            return IExecuteWithSignature<Android.Os.PersistableBundle>("getExtras", "()Landroid/os/PersistableBundle;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#isExpedited()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsExpedited()
        {
            return IExecuteWithSignature<bool>("isExpedited", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#isImportantWhileForeground()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsImportantWhileForeground()
        {
            return IExecuteWithSignature<bool>("isImportantWhileForeground", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#isPeriodic()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsPeriodic()
        {
            return IExecuteWithSignature<bool>("isPeriodic", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#isPersisted()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsPersisted()
        {
            return IExecuteWithSignature<bool>("isPersisted", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#isPrefetch()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsPrefetch()
        {
            return IExecuteWithSignature<bool>("isPrefetch", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#isRequireBatteryNotLow()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsRequireBatteryNotLow()
        {
            return IExecuteWithSignature<bool>("isRequireBatteryNotLow", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#isRequireCharging()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsRequireCharging()
        {
            return IExecuteWithSignature<bool>("isRequireCharging", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#isRequireDeviceIdle()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsRequireDeviceIdle()
        {
            return IExecuteWithSignature<bool>("isRequireDeviceIdle", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#isRequireStorageNotLow()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsRequireStorageNotLow()
        {
            return IExecuteWithSignature<bool>("isRequireStorageNotLow", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#isUserInitiated()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsUserInitiated()
        {
            return IExecuteWithSignature<bool>("isUserInitiated", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#getBackoffPolicy()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetBackoffPolicy()
        {
            return IExecuteWithSignature<int>("getBackoffPolicy", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#getClipGrantFlags()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetClipGrantFlags()
        {
            return IExecuteWithSignature<int>("getClipGrantFlags", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#getId()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetId()
        {
            return IExecuteWithSignature<int>("getId", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#getNetworkType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetNetworkType()
        {
            return IExecuteWithSignature<int>("getNetworkType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#getPriority()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetPriority()
        {
            return IExecuteWithSignature<int>("getPriority", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#getEstimatedNetworkDownloadBytes()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetEstimatedNetworkDownloadBytes()
        {
            return IExecuteWithSignature<long>("getEstimatedNetworkDownloadBytes", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#getEstimatedNetworkUploadBytes()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetEstimatedNetworkUploadBytes()
        {
            return IExecuteWithSignature<long>("getEstimatedNetworkUploadBytes", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#getFlexMillis()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetFlexMillis()
        {
            return IExecuteWithSignature<long>("getFlexMillis", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#getInitialBackoffMillis()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetInitialBackoffMillis()
        {
            return IExecuteWithSignature<long>("getInitialBackoffMillis", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#getIntervalMillis()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetIntervalMillis()
        {
            return IExecuteWithSignature<long>("getIntervalMillis", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#getMaxExecutionDelayMillis()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetMaxExecutionDelayMillis()
        {
            return IExecuteWithSignature<long>("getMaxExecutionDelayMillis", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#getMinimumNetworkChunkBytes()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetMinimumNetworkChunkBytes()
        {
            return IExecuteWithSignature<long>("getMinimumNetworkChunkBytes", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#getMinLatencyMillis()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetMinLatencyMillis()
        {
            return IExecuteWithSignature<long>("getMinLatencyMillis", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#getTriggerContentMaxDelay()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetTriggerContentMaxDelay()
        {
            return IExecuteWithSignature<long>("getTriggerContentMaxDelay", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#getTriggerContentUpdateDelay()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetTriggerContentUpdateDelay()
        {
            return IExecuteWithSignature<long>("getTriggerContentUpdateDelay", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecute("writeToParcel", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region Builder
        public partial class Builder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#%3Cinit%3E(int,android.content.ComponentName)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Android.Content.ComponentName"/></param>
            public Builder(int arg0, Android.Content.ComponentName arg1)
                : base(arg0, arg1)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.App.Job.JobInfo"/></returns>
            public Android.App.Job.JobInfo Build()
            {
                return IExecuteWithSignature<Android.App.Job.JobInfo>("build", "()Landroid/app/job/JobInfo;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#addTriggerContentUri(android.app.job.JobInfo.TriggerContentUri)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.App.Job.JobInfo.TriggerContentUri"/></param>
            /// <returns><see cref="Android.App.Job.JobInfo.Builder"/></returns>
            public Android.App.Job.JobInfo.Builder AddTriggerContentUri(Android.App.Job.JobInfo.TriggerContentUri arg0)
            {
                return IExecuteWithSignature<Android.App.Job.JobInfo.Builder>("addTriggerContentUri", "(Landroid/app/job/JobInfo$TriggerContentUri;)Landroid/app/job/JobInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setBackoffCriteria(long,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <returns><see cref="Android.App.Job.JobInfo.Builder"/></returns>
            public Android.App.Job.JobInfo.Builder SetBackoffCriteria(long arg0, int arg1)
            {
                return IExecute<Android.App.Job.JobInfo.Builder>("setBackoffCriteria", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setClipData(android.content.ClipData,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ClipData"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <returns><see cref="Android.App.Job.JobInfo.Builder"/></returns>
            public Android.App.Job.JobInfo.Builder SetClipData(Android.Content.ClipData arg0, int arg1)
            {
                return IExecute<Android.App.Job.JobInfo.Builder>("setClipData", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setEstimatedNetworkBytes(long,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <returns><see cref="Android.App.Job.JobInfo.Builder"/></returns>
            public Android.App.Job.JobInfo.Builder SetEstimatedNetworkBytes(long arg0, long arg1)
            {
                return IExecute<Android.App.Job.JobInfo.Builder>("setEstimatedNetworkBytes", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setExpedited(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.App.Job.JobInfo.Builder"/></returns>
            public Android.App.Job.JobInfo.Builder SetExpedited(bool arg0)
            {
                return IExecuteWithSignature<Android.App.Job.JobInfo.Builder>("setExpedited", "(Z)Landroid/app/job/JobInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setExtras(android.os.PersistableBundle)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.PersistableBundle"/></param>
            /// <returns><see cref="Android.App.Job.JobInfo.Builder"/></returns>
            public Android.App.Job.JobInfo.Builder SetExtras(Android.Os.PersistableBundle arg0)
            {
                return IExecuteWithSignature<Android.App.Job.JobInfo.Builder>("setExtras", "(Landroid/os/PersistableBundle;)Landroid/app/job/JobInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setImportantWhileForeground(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.App.Job.JobInfo.Builder"/></returns>
            [global::System.Obsolete()]
            public Android.App.Job.JobInfo.Builder SetImportantWhileForeground(bool arg0)
            {
                return IExecuteWithSignature<Android.App.Job.JobInfo.Builder>("setImportantWhileForeground", "(Z)Landroid/app/job/JobInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setMinimumLatency(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.App.Job.JobInfo.Builder"/></returns>
            public Android.App.Job.JobInfo.Builder SetMinimumLatency(long arg0)
            {
                return IExecuteWithSignature<Android.App.Job.JobInfo.Builder>("setMinimumLatency", "(J)Landroid/app/job/JobInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setMinimumNetworkChunkBytes(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.App.Job.JobInfo.Builder"/></returns>
            public Android.App.Job.JobInfo.Builder SetMinimumNetworkChunkBytes(long arg0)
            {
                return IExecuteWithSignature<Android.App.Job.JobInfo.Builder>("setMinimumNetworkChunkBytes", "(J)Landroid/app/job/JobInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setOverrideDeadline(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.App.Job.JobInfo.Builder"/></returns>
            public Android.App.Job.JobInfo.Builder SetOverrideDeadline(long arg0)
            {
                return IExecuteWithSignature<Android.App.Job.JobInfo.Builder>("setOverrideDeadline", "(J)Landroid/app/job/JobInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setPeriodic(long,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <returns><see cref="Android.App.Job.JobInfo.Builder"/></returns>
            public Android.App.Job.JobInfo.Builder SetPeriodic(long arg0, long arg1)
            {
                return IExecute<Android.App.Job.JobInfo.Builder>("setPeriodic", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setPeriodic(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.App.Job.JobInfo.Builder"/></returns>
            public Android.App.Job.JobInfo.Builder SetPeriodic(long arg0)
            {
                return IExecuteWithSignature<Android.App.Job.JobInfo.Builder>("setPeriodic", "(J)Landroid/app/job/JobInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setPersisted(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.App.Job.JobInfo.Builder"/></returns>
            public Android.App.Job.JobInfo.Builder SetPersisted(bool arg0)
            {
                return IExecuteWithSignature<Android.App.Job.JobInfo.Builder>("setPersisted", "(Z)Landroid/app/job/JobInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setPrefetch(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.App.Job.JobInfo.Builder"/></returns>
            public Android.App.Job.JobInfo.Builder SetPrefetch(bool arg0)
            {
                return IExecuteWithSignature<Android.App.Job.JobInfo.Builder>("setPrefetch", "(Z)Landroid/app/job/JobInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setPriority(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.App.Job.JobInfo.Builder"/></returns>
            public Android.App.Job.JobInfo.Builder SetPriority(int arg0)
            {
                return IExecuteWithSignature<Android.App.Job.JobInfo.Builder>("setPriority", "(I)Landroid/app/job/JobInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setRequiredNetwork(android.net.NetworkRequest)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.NetworkRequest"/></param>
            /// <returns><see cref="Android.App.Job.JobInfo.Builder"/></returns>
            public Android.App.Job.JobInfo.Builder SetRequiredNetwork(Android.Net.NetworkRequest arg0)
            {
                return IExecuteWithSignature<Android.App.Job.JobInfo.Builder>("setRequiredNetwork", "(Landroid/net/NetworkRequest;)Landroid/app/job/JobInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setRequiredNetworkType(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.App.Job.JobInfo.Builder"/></returns>
            public Android.App.Job.JobInfo.Builder SetRequiredNetworkType(int arg0)
            {
                return IExecuteWithSignature<Android.App.Job.JobInfo.Builder>("setRequiredNetworkType", "(I)Landroid/app/job/JobInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setRequiresBatteryNotLow(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.App.Job.JobInfo.Builder"/></returns>
            public Android.App.Job.JobInfo.Builder SetRequiresBatteryNotLow(bool arg0)
            {
                return IExecuteWithSignature<Android.App.Job.JobInfo.Builder>("setRequiresBatteryNotLow", "(Z)Landroid/app/job/JobInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setRequiresCharging(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.App.Job.JobInfo.Builder"/></returns>
            public Android.App.Job.JobInfo.Builder SetRequiresCharging(bool arg0)
            {
                return IExecuteWithSignature<Android.App.Job.JobInfo.Builder>("setRequiresCharging", "(Z)Landroid/app/job/JobInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setRequiresDeviceIdle(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.App.Job.JobInfo.Builder"/></returns>
            public Android.App.Job.JobInfo.Builder SetRequiresDeviceIdle(bool arg0)
            {
                return IExecuteWithSignature<Android.App.Job.JobInfo.Builder>("setRequiresDeviceIdle", "(Z)Landroid/app/job/JobInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setRequiresStorageNotLow(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.App.Job.JobInfo.Builder"/></returns>
            public Android.App.Job.JobInfo.Builder SetRequiresStorageNotLow(bool arg0)
            {
                return IExecuteWithSignature<Android.App.Job.JobInfo.Builder>("setRequiresStorageNotLow", "(Z)Landroid/app/job/JobInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setTransientExtras(android.os.Bundle)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Bundle"/></param>
            /// <returns><see cref="Android.App.Job.JobInfo.Builder"/></returns>
            public Android.App.Job.JobInfo.Builder SetTransientExtras(Android.Os.Bundle arg0)
            {
                return IExecuteWithSignature<Android.App.Job.JobInfo.Builder>("setTransientExtras", "(Landroid/os/Bundle;)Landroid/app/job/JobInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setTriggerContentMaxDelay(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.App.Job.JobInfo.Builder"/></returns>
            public Android.App.Job.JobInfo.Builder SetTriggerContentMaxDelay(long arg0)
            {
                return IExecuteWithSignature<Android.App.Job.JobInfo.Builder>("setTriggerContentMaxDelay", "(J)Landroid/app/job/JobInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setTriggerContentUpdateDelay(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.App.Job.JobInfo.Builder"/></returns>
            public Android.App.Job.JobInfo.Builder SetTriggerContentUpdateDelay(long arg0)
            {
                return IExecuteWithSignature<Android.App.Job.JobInfo.Builder>("setTriggerContentUpdateDelay", "(J)Landroid/app/job/JobInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setUserInitiated(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.App.Job.JobInfo.Builder"/></returns>
            public Android.App.Job.JobInfo.Builder SetUserInitiated(bool arg0)
            {
                return IExecuteWithSignature<Android.App.Job.JobInfo.Builder>("setUserInitiated", "(Z)Landroid/app/job/JobInfo$Builder;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region TriggerContentUri
        public partial class TriggerContentUri
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.TriggerContentUri.html#%3Cinit%3E(android.net.Uri,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public TriggerContentUri(Android.Net.Uri arg0, int arg1)
                : base(arg0, arg1)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.TriggerContentUri.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.TriggerContentUri.html#FLAG_NOTIFY_FOR_DESCENDANTS"/>
            /// </summary>
            public static int FLAG_NOTIFY_FOR_DESCENDANTS { get { if (!_FLAG_NOTIFY_FOR_DESCENDANTSReady) { _FLAG_NOTIFY_FOR_DESCENDANTSContent = SGetField<int>(LocalBridgeClazz, "FLAG_NOTIFY_FOR_DESCENDANTS"); _FLAG_NOTIFY_FOR_DESCENDANTSReady = true; } return _FLAG_NOTIFY_FOR_DESCENDANTSContent; } }
            private static int _FLAG_NOTIFY_FOR_DESCENDANTSContent = default;
            private static bool _FLAG_NOTIFY_FOR_DESCENDANTSReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.TriggerContentUri.html#getUri()"/>
            /// </summary>
            /// <returns><see cref="Android.Net.Uri"/></returns>
            public Android.Net.Uri GetUri()
            {
                return IExecuteWithSignature<Android.Net.Uri>("getUri", "()Landroid/net/Uri;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.TriggerContentUri.html#describeContents()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int DescribeContents()
            {
                return IExecuteWithSignature<int>("describeContents", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.TriggerContentUri.html#getFlags()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetFlags()
            {
                return IExecuteWithSignature<int>("getFlags", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/job/JobInfo.TriggerContentUri.html#writeToParcel(android.os.Parcel,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
            {
                IExecute("writeToParcel", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
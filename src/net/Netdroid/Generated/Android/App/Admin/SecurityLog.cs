/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.App.Admin
{
    #region SecurityLog declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html"/>
    /// </summary>
    public partial class SecurityLog : MASES.JCOBridge.C2JBridge.JVMBridgeBase<SecurityLog>
    {
        const string _bridgeClassName = "android.app.admin.SecurityLog";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public SecurityLog() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public SecurityLog(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region SecurityEvent declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.SecurityEvent.html"/>
        /// </summary>
        public partial class SecurityEvent : Android.Os.Parcelable
        {
            const string _bridgeClassName = "android.app.admin.SecurityLog$SecurityEvent";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public SecurityEvent() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public SecurityEvent(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region SecurityLog implementation
    public partial class SecurityLog
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#LEVEL_ERROR"/>
        /// </summary>
        public static int LEVEL_ERROR { get { if (!_LEVEL_ERRORReady) { _LEVEL_ERRORContent = SGetField<int>(LocalBridgeClazz, "LEVEL_ERROR"); _LEVEL_ERRORReady = true; } return _LEVEL_ERRORContent; } }
        private static int _LEVEL_ERRORContent = default;
        private static bool _LEVEL_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#LEVEL_INFO"/>
        /// </summary>
        public static int LEVEL_INFO { get { if (!_LEVEL_INFOReady) { _LEVEL_INFOContent = SGetField<int>(LocalBridgeClazz, "LEVEL_INFO"); _LEVEL_INFOReady = true; } return _LEVEL_INFOContent; } }
        private static int _LEVEL_INFOContent = default;
        private static bool _LEVEL_INFOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#LEVEL_WARNING"/>
        /// </summary>
        public static int LEVEL_WARNING { get { if (!_LEVEL_WARNINGReady) { _LEVEL_WARNINGContent = SGetField<int>(LocalBridgeClazz, "LEVEL_WARNING"); _LEVEL_WARNINGReady = true; } return _LEVEL_WARNINGContent; } }
        private static int _LEVEL_WARNINGContent = default;
        private static bool _LEVEL_WARNINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_ADB_SHELL_CMD"/>
        /// </summary>
        public static int TAG_ADB_SHELL_CMD { get { if (!_TAG_ADB_SHELL_CMDReady) { _TAG_ADB_SHELL_CMDContent = SGetField<int>(LocalBridgeClazz, "TAG_ADB_SHELL_CMD"); _TAG_ADB_SHELL_CMDReady = true; } return _TAG_ADB_SHELL_CMDContent; } }
        private static int _TAG_ADB_SHELL_CMDContent = default;
        private static bool _TAG_ADB_SHELL_CMDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_ADB_SHELL_INTERACTIVE"/>
        /// </summary>
        public static int TAG_ADB_SHELL_INTERACTIVE { get { if (!_TAG_ADB_SHELL_INTERACTIVEReady) { _TAG_ADB_SHELL_INTERACTIVEContent = SGetField<int>(LocalBridgeClazz, "TAG_ADB_SHELL_INTERACTIVE"); _TAG_ADB_SHELL_INTERACTIVEReady = true; } return _TAG_ADB_SHELL_INTERACTIVEContent; } }
        private static int _TAG_ADB_SHELL_INTERACTIVEContent = default;
        private static bool _TAG_ADB_SHELL_INTERACTIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_APP_PROCESS_START"/>
        /// </summary>
        public static int TAG_APP_PROCESS_START { get { if (!_TAG_APP_PROCESS_STARTReady) { _TAG_APP_PROCESS_STARTContent = SGetField<int>(LocalBridgeClazz, "TAG_APP_PROCESS_START"); _TAG_APP_PROCESS_STARTReady = true; } return _TAG_APP_PROCESS_STARTContent; } }
        private static int _TAG_APP_PROCESS_STARTContent = default;
        private static bool _TAG_APP_PROCESS_STARTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_BACKUP_SERVICE_TOGGLED"/>
        /// </summary>
        public static int TAG_BACKUP_SERVICE_TOGGLED { get { if (!_TAG_BACKUP_SERVICE_TOGGLEDReady) { _TAG_BACKUP_SERVICE_TOGGLEDContent = SGetField<int>(LocalBridgeClazz, "TAG_BACKUP_SERVICE_TOGGLED"); _TAG_BACKUP_SERVICE_TOGGLEDReady = true; } return _TAG_BACKUP_SERVICE_TOGGLEDContent; } }
        private static int _TAG_BACKUP_SERVICE_TOGGLEDContent = default;
        private static bool _TAG_BACKUP_SERVICE_TOGGLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_BLUETOOTH_CONNECTION"/>
        /// </summary>
        public static int TAG_BLUETOOTH_CONNECTION { get { if (!_TAG_BLUETOOTH_CONNECTIONReady) { _TAG_BLUETOOTH_CONNECTIONContent = SGetField<int>(LocalBridgeClazz, "TAG_BLUETOOTH_CONNECTION"); _TAG_BLUETOOTH_CONNECTIONReady = true; } return _TAG_BLUETOOTH_CONNECTIONContent; } }
        private static int _TAG_BLUETOOTH_CONNECTIONContent = default;
        private static bool _TAG_BLUETOOTH_CONNECTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_BLUETOOTH_DISCONNECTION"/>
        /// </summary>
        public static int TAG_BLUETOOTH_DISCONNECTION { get { if (!_TAG_BLUETOOTH_DISCONNECTIONReady) { _TAG_BLUETOOTH_DISCONNECTIONContent = SGetField<int>(LocalBridgeClazz, "TAG_BLUETOOTH_DISCONNECTION"); _TAG_BLUETOOTH_DISCONNECTIONReady = true; } return _TAG_BLUETOOTH_DISCONNECTIONContent; } }
        private static int _TAG_BLUETOOTH_DISCONNECTIONContent = default;
        private static bool _TAG_BLUETOOTH_DISCONNECTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_CAMERA_POLICY_SET"/>
        /// </summary>
        public static int TAG_CAMERA_POLICY_SET { get { if (!_TAG_CAMERA_POLICY_SETReady) { _TAG_CAMERA_POLICY_SETContent = SGetField<int>(LocalBridgeClazz, "TAG_CAMERA_POLICY_SET"); _TAG_CAMERA_POLICY_SETReady = true; } return _TAG_CAMERA_POLICY_SETContent; } }
        private static int _TAG_CAMERA_POLICY_SETContent = default;
        private static bool _TAG_CAMERA_POLICY_SETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_CERT_AUTHORITY_INSTALLED"/>
        /// </summary>
        public static int TAG_CERT_AUTHORITY_INSTALLED { get { if (!_TAG_CERT_AUTHORITY_INSTALLEDReady) { _TAG_CERT_AUTHORITY_INSTALLEDContent = SGetField<int>(LocalBridgeClazz, "TAG_CERT_AUTHORITY_INSTALLED"); _TAG_CERT_AUTHORITY_INSTALLEDReady = true; } return _TAG_CERT_AUTHORITY_INSTALLEDContent; } }
        private static int _TAG_CERT_AUTHORITY_INSTALLEDContent = default;
        private static bool _TAG_CERT_AUTHORITY_INSTALLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_CERT_AUTHORITY_REMOVED"/>
        /// </summary>
        public static int TAG_CERT_AUTHORITY_REMOVED { get { if (!_TAG_CERT_AUTHORITY_REMOVEDReady) { _TAG_CERT_AUTHORITY_REMOVEDContent = SGetField<int>(LocalBridgeClazz, "TAG_CERT_AUTHORITY_REMOVED"); _TAG_CERT_AUTHORITY_REMOVEDReady = true; } return _TAG_CERT_AUTHORITY_REMOVEDContent; } }
        private static int _TAG_CERT_AUTHORITY_REMOVEDContent = default;
        private static bool _TAG_CERT_AUTHORITY_REMOVEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_CERT_VALIDATION_FAILURE"/>
        /// </summary>
        public static int TAG_CERT_VALIDATION_FAILURE { get { if (!_TAG_CERT_VALIDATION_FAILUREReady) { _TAG_CERT_VALIDATION_FAILUREContent = SGetField<int>(LocalBridgeClazz, "TAG_CERT_VALIDATION_FAILURE"); _TAG_CERT_VALIDATION_FAILUREReady = true; } return _TAG_CERT_VALIDATION_FAILUREContent; } }
        private static int _TAG_CERT_VALIDATION_FAILUREContent = default;
        private static bool _TAG_CERT_VALIDATION_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_CRYPTO_SELF_TEST_COMPLETED"/>
        /// </summary>
        public static int TAG_CRYPTO_SELF_TEST_COMPLETED { get { if (!_TAG_CRYPTO_SELF_TEST_COMPLETEDReady) { _TAG_CRYPTO_SELF_TEST_COMPLETEDContent = SGetField<int>(LocalBridgeClazz, "TAG_CRYPTO_SELF_TEST_COMPLETED"); _TAG_CRYPTO_SELF_TEST_COMPLETEDReady = true; } return _TAG_CRYPTO_SELF_TEST_COMPLETEDContent; } }
        private static int _TAG_CRYPTO_SELF_TEST_COMPLETEDContent = default;
        private static bool _TAG_CRYPTO_SELF_TEST_COMPLETEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_KEY_DESTRUCTION"/>
        /// </summary>
        public static int TAG_KEY_DESTRUCTION { get { if (!_TAG_KEY_DESTRUCTIONReady) { _TAG_KEY_DESTRUCTIONContent = SGetField<int>(LocalBridgeClazz, "TAG_KEY_DESTRUCTION"); _TAG_KEY_DESTRUCTIONReady = true; } return _TAG_KEY_DESTRUCTIONContent; } }
        private static int _TAG_KEY_DESTRUCTIONContent = default;
        private static bool _TAG_KEY_DESTRUCTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_KEY_GENERATED"/>
        /// </summary>
        public static int TAG_KEY_GENERATED { get { if (!_TAG_KEY_GENERATEDReady) { _TAG_KEY_GENERATEDContent = SGetField<int>(LocalBridgeClazz, "TAG_KEY_GENERATED"); _TAG_KEY_GENERATEDReady = true; } return _TAG_KEY_GENERATEDContent; } }
        private static int _TAG_KEY_GENERATEDContent = default;
        private static bool _TAG_KEY_GENERATEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_KEY_IMPORT"/>
        /// </summary>
        public static int TAG_KEY_IMPORT { get { if (!_TAG_KEY_IMPORTReady) { _TAG_KEY_IMPORTContent = SGetField<int>(LocalBridgeClazz, "TAG_KEY_IMPORT"); _TAG_KEY_IMPORTReady = true; } return _TAG_KEY_IMPORTContent; } }
        private static int _TAG_KEY_IMPORTContent = default;
        private static bool _TAG_KEY_IMPORTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_KEY_INTEGRITY_VIOLATION"/>
        /// </summary>
        public static int TAG_KEY_INTEGRITY_VIOLATION { get { if (!_TAG_KEY_INTEGRITY_VIOLATIONReady) { _TAG_KEY_INTEGRITY_VIOLATIONContent = SGetField<int>(LocalBridgeClazz, "TAG_KEY_INTEGRITY_VIOLATION"); _TAG_KEY_INTEGRITY_VIOLATIONReady = true; } return _TAG_KEY_INTEGRITY_VIOLATIONContent; } }
        private static int _TAG_KEY_INTEGRITY_VIOLATIONContent = default;
        private static bool _TAG_KEY_INTEGRITY_VIOLATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_KEYGUARD_DISABLED_FEATURES_SET"/>
        /// </summary>
        public static int TAG_KEYGUARD_DISABLED_FEATURES_SET { get { if (!_TAG_KEYGUARD_DISABLED_FEATURES_SETReady) { _TAG_KEYGUARD_DISABLED_FEATURES_SETContent = SGetField<int>(LocalBridgeClazz, "TAG_KEYGUARD_DISABLED_FEATURES_SET"); _TAG_KEYGUARD_DISABLED_FEATURES_SETReady = true; } return _TAG_KEYGUARD_DISABLED_FEATURES_SETContent; } }
        private static int _TAG_KEYGUARD_DISABLED_FEATURES_SETContent = default;
        private static bool _TAG_KEYGUARD_DISABLED_FEATURES_SETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_KEYGUARD_DISMISS_AUTH_ATTEMPT"/>
        /// </summary>
        public static int TAG_KEYGUARD_DISMISS_AUTH_ATTEMPT { get { if (!_TAG_KEYGUARD_DISMISS_AUTH_ATTEMPTReady) { _TAG_KEYGUARD_DISMISS_AUTH_ATTEMPTContent = SGetField<int>(LocalBridgeClazz, "TAG_KEYGUARD_DISMISS_AUTH_ATTEMPT"); _TAG_KEYGUARD_DISMISS_AUTH_ATTEMPTReady = true; } return _TAG_KEYGUARD_DISMISS_AUTH_ATTEMPTContent; } }
        private static int _TAG_KEYGUARD_DISMISS_AUTH_ATTEMPTContent = default;
        private static bool _TAG_KEYGUARD_DISMISS_AUTH_ATTEMPTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_KEYGUARD_DISMISSED"/>
        /// </summary>
        public static int TAG_KEYGUARD_DISMISSED { get { if (!_TAG_KEYGUARD_DISMISSEDReady) { _TAG_KEYGUARD_DISMISSEDContent = SGetField<int>(LocalBridgeClazz, "TAG_KEYGUARD_DISMISSED"); _TAG_KEYGUARD_DISMISSEDReady = true; } return _TAG_KEYGUARD_DISMISSEDContent; } }
        private static int _TAG_KEYGUARD_DISMISSEDContent = default;
        private static bool _TAG_KEYGUARD_DISMISSEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_KEYGUARD_SECURED"/>
        /// </summary>
        public static int TAG_KEYGUARD_SECURED { get { if (!_TAG_KEYGUARD_SECUREDReady) { _TAG_KEYGUARD_SECUREDContent = SGetField<int>(LocalBridgeClazz, "TAG_KEYGUARD_SECURED"); _TAG_KEYGUARD_SECUREDReady = true; } return _TAG_KEYGUARD_SECUREDContent; } }
        private static int _TAG_KEYGUARD_SECUREDContent = default;
        private static bool _TAG_KEYGUARD_SECUREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_LOG_BUFFER_SIZE_CRITICAL"/>
        /// </summary>
        public static int TAG_LOG_BUFFER_SIZE_CRITICAL { get { if (!_TAG_LOG_BUFFER_SIZE_CRITICALReady) { _TAG_LOG_BUFFER_SIZE_CRITICALContent = SGetField<int>(LocalBridgeClazz, "TAG_LOG_BUFFER_SIZE_CRITICAL"); _TAG_LOG_BUFFER_SIZE_CRITICALReady = true; } return _TAG_LOG_BUFFER_SIZE_CRITICALContent; } }
        private static int _TAG_LOG_BUFFER_SIZE_CRITICALContent = default;
        private static bool _TAG_LOG_BUFFER_SIZE_CRITICALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_LOGGING_STARTED"/>
        /// </summary>
        public static int TAG_LOGGING_STARTED { get { if (!_TAG_LOGGING_STARTEDReady) { _TAG_LOGGING_STARTEDContent = SGetField<int>(LocalBridgeClazz, "TAG_LOGGING_STARTED"); _TAG_LOGGING_STARTEDReady = true; } return _TAG_LOGGING_STARTEDContent; } }
        private static int _TAG_LOGGING_STARTEDContent = default;
        private static bool _TAG_LOGGING_STARTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_LOGGING_STOPPED"/>
        /// </summary>
        public static int TAG_LOGGING_STOPPED { get { if (!_TAG_LOGGING_STOPPEDReady) { _TAG_LOGGING_STOPPEDContent = SGetField<int>(LocalBridgeClazz, "TAG_LOGGING_STOPPED"); _TAG_LOGGING_STOPPEDReady = true; } return _TAG_LOGGING_STOPPEDContent; } }
        private static int _TAG_LOGGING_STOPPEDContent = default;
        private static bool _TAG_LOGGING_STOPPEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_MAX_PASSWORD_ATTEMPTS_SET"/>
        /// </summary>
        public static int TAG_MAX_PASSWORD_ATTEMPTS_SET { get { if (!_TAG_MAX_PASSWORD_ATTEMPTS_SETReady) { _TAG_MAX_PASSWORD_ATTEMPTS_SETContent = SGetField<int>(LocalBridgeClazz, "TAG_MAX_PASSWORD_ATTEMPTS_SET"); _TAG_MAX_PASSWORD_ATTEMPTS_SETReady = true; } return _TAG_MAX_PASSWORD_ATTEMPTS_SETContent; } }
        private static int _TAG_MAX_PASSWORD_ATTEMPTS_SETContent = default;
        private static bool _TAG_MAX_PASSWORD_ATTEMPTS_SETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_MAX_SCREEN_LOCK_TIMEOUT_SET"/>
        /// </summary>
        public static int TAG_MAX_SCREEN_LOCK_TIMEOUT_SET { get { if (!_TAG_MAX_SCREEN_LOCK_TIMEOUT_SETReady) { _TAG_MAX_SCREEN_LOCK_TIMEOUT_SETContent = SGetField<int>(LocalBridgeClazz, "TAG_MAX_SCREEN_LOCK_TIMEOUT_SET"); _TAG_MAX_SCREEN_LOCK_TIMEOUT_SETReady = true; } return _TAG_MAX_SCREEN_LOCK_TIMEOUT_SETContent; } }
        private static int _TAG_MAX_SCREEN_LOCK_TIMEOUT_SETContent = default;
        private static bool _TAG_MAX_SCREEN_LOCK_TIMEOUT_SETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_MEDIA_MOUNT"/>
        /// </summary>
        public static int TAG_MEDIA_MOUNT { get { if (!_TAG_MEDIA_MOUNTReady) { _TAG_MEDIA_MOUNTContent = SGetField<int>(LocalBridgeClazz, "TAG_MEDIA_MOUNT"); _TAG_MEDIA_MOUNTReady = true; } return _TAG_MEDIA_MOUNTContent; } }
        private static int _TAG_MEDIA_MOUNTContent = default;
        private static bool _TAG_MEDIA_MOUNTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_MEDIA_UNMOUNT"/>
        /// </summary>
        public static int TAG_MEDIA_UNMOUNT { get { if (!_TAG_MEDIA_UNMOUNTReady) { _TAG_MEDIA_UNMOUNTContent = SGetField<int>(LocalBridgeClazz, "TAG_MEDIA_UNMOUNT"); _TAG_MEDIA_UNMOUNTReady = true; } return _TAG_MEDIA_UNMOUNTContent; } }
        private static int _TAG_MEDIA_UNMOUNTContent = default;
        private static bool _TAG_MEDIA_UNMOUNTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_OS_SHUTDOWN"/>
        /// </summary>
        public static int TAG_OS_SHUTDOWN { get { if (!_TAG_OS_SHUTDOWNReady) { _TAG_OS_SHUTDOWNContent = SGetField<int>(LocalBridgeClazz, "TAG_OS_SHUTDOWN"); _TAG_OS_SHUTDOWNReady = true; } return _TAG_OS_SHUTDOWNContent; } }
        private static int _TAG_OS_SHUTDOWNContent = default;
        private static bool _TAG_OS_SHUTDOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_OS_STARTUP"/>
        /// </summary>
        public static int TAG_OS_STARTUP { get { if (!_TAG_OS_STARTUPReady) { _TAG_OS_STARTUPContent = SGetField<int>(LocalBridgeClazz, "TAG_OS_STARTUP"); _TAG_OS_STARTUPReady = true; } return _TAG_OS_STARTUPContent; } }
        private static int _TAG_OS_STARTUPContent = default;
        private static bool _TAG_OS_STARTUPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_PACKAGE_INSTALLED"/>
        /// </summary>
        public static int TAG_PACKAGE_INSTALLED { get { if (!_TAG_PACKAGE_INSTALLEDReady) { _TAG_PACKAGE_INSTALLEDContent = SGetField<int>(LocalBridgeClazz, "TAG_PACKAGE_INSTALLED"); _TAG_PACKAGE_INSTALLEDReady = true; } return _TAG_PACKAGE_INSTALLEDContent; } }
        private static int _TAG_PACKAGE_INSTALLEDContent = default;
        private static bool _TAG_PACKAGE_INSTALLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_PACKAGE_UNINSTALLED"/>
        /// </summary>
        public static int TAG_PACKAGE_UNINSTALLED { get { if (!_TAG_PACKAGE_UNINSTALLEDReady) { _TAG_PACKAGE_UNINSTALLEDContent = SGetField<int>(LocalBridgeClazz, "TAG_PACKAGE_UNINSTALLED"); _TAG_PACKAGE_UNINSTALLEDReady = true; } return _TAG_PACKAGE_UNINSTALLEDContent; } }
        private static int _TAG_PACKAGE_UNINSTALLEDContent = default;
        private static bool _TAG_PACKAGE_UNINSTALLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_PACKAGE_UPDATED"/>
        /// </summary>
        public static int TAG_PACKAGE_UPDATED { get { if (!_TAG_PACKAGE_UPDATEDReady) { _TAG_PACKAGE_UPDATEDContent = SGetField<int>(LocalBridgeClazz, "TAG_PACKAGE_UPDATED"); _TAG_PACKAGE_UPDATEDReady = true; } return _TAG_PACKAGE_UPDATEDContent; } }
        private static int _TAG_PACKAGE_UPDATEDContent = default;
        private static bool _TAG_PACKAGE_UPDATEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_PASSWORD_CHANGED"/>
        /// </summary>
        public static int TAG_PASSWORD_CHANGED { get { if (!_TAG_PASSWORD_CHANGEDReady) { _TAG_PASSWORD_CHANGEDContent = SGetField<int>(LocalBridgeClazz, "TAG_PASSWORD_CHANGED"); _TAG_PASSWORD_CHANGEDReady = true; } return _TAG_PASSWORD_CHANGEDContent; } }
        private static int _TAG_PASSWORD_CHANGEDContent = default;
        private static bool _TAG_PASSWORD_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_PASSWORD_COMPLEXITY_REQUIRED"/>
        /// </summary>
        public static int TAG_PASSWORD_COMPLEXITY_REQUIRED { get { if (!_TAG_PASSWORD_COMPLEXITY_REQUIREDReady) { _TAG_PASSWORD_COMPLEXITY_REQUIREDContent = SGetField<int>(LocalBridgeClazz, "TAG_PASSWORD_COMPLEXITY_REQUIRED"); _TAG_PASSWORD_COMPLEXITY_REQUIREDReady = true; } return _TAG_PASSWORD_COMPLEXITY_REQUIREDContent; } }
        private static int _TAG_PASSWORD_COMPLEXITY_REQUIREDContent = default;
        private static bool _TAG_PASSWORD_COMPLEXITY_REQUIREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_PASSWORD_COMPLEXITY_SET"/>
        /// </summary>
        public static int TAG_PASSWORD_COMPLEXITY_SET { get { if (!_TAG_PASSWORD_COMPLEXITY_SETReady) { _TAG_PASSWORD_COMPLEXITY_SETContent = SGetField<int>(LocalBridgeClazz, "TAG_PASSWORD_COMPLEXITY_SET"); _TAG_PASSWORD_COMPLEXITY_SETReady = true; } return _TAG_PASSWORD_COMPLEXITY_SETContent; } }
        private static int _TAG_PASSWORD_COMPLEXITY_SETContent = default;
        private static bool _TAG_PASSWORD_COMPLEXITY_SETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_PASSWORD_EXPIRATION_SET"/>
        /// </summary>
        public static int TAG_PASSWORD_EXPIRATION_SET { get { if (!_TAG_PASSWORD_EXPIRATION_SETReady) { _TAG_PASSWORD_EXPIRATION_SETContent = SGetField<int>(LocalBridgeClazz, "TAG_PASSWORD_EXPIRATION_SET"); _TAG_PASSWORD_EXPIRATION_SETReady = true; } return _TAG_PASSWORD_EXPIRATION_SETContent; } }
        private static int _TAG_PASSWORD_EXPIRATION_SETContent = default;
        private static bool _TAG_PASSWORD_EXPIRATION_SETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_PASSWORD_HISTORY_LENGTH_SET"/>
        /// </summary>
        public static int TAG_PASSWORD_HISTORY_LENGTH_SET { get { if (!_TAG_PASSWORD_HISTORY_LENGTH_SETReady) { _TAG_PASSWORD_HISTORY_LENGTH_SETContent = SGetField<int>(LocalBridgeClazz, "TAG_PASSWORD_HISTORY_LENGTH_SET"); _TAG_PASSWORD_HISTORY_LENGTH_SETReady = true; } return _TAG_PASSWORD_HISTORY_LENGTH_SETContent; } }
        private static int _TAG_PASSWORD_HISTORY_LENGTH_SETContent = default;
        private static bool _TAG_PASSWORD_HISTORY_LENGTH_SETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_REMOTE_LOCK"/>
        /// </summary>
        public static int TAG_REMOTE_LOCK { get { if (!_TAG_REMOTE_LOCKReady) { _TAG_REMOTE_LOCKContent = SGetField<int>(LocalBridgeClazz, "TAG_REMOTE_LOCK"); _TAG_REMOTE_LOCKReady = true; } return _TAG_REMOTE_LOCKContent; } }
        private static int _TAG_REMOTE_LOCKContent = default;
        private static bool _TAG_REMOTE_LOCKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_SYNC_RECV_FILE"/>
        /// </summary>
        public static int TAG_SYNC_RECV_FILE { get { if (!_TAG_SYNC_RECV_FILEReady) { _TAG_SYNC_RECV_FILEContent = SGetField<int>(LocalBridgeClazz, "TAG_SYNC_RECV_FILE"); _TAG_SYNC_RECV_FILEReady = true; } return _TAG_SYNC_RECV_FILEContent; } }
        private static int _TAG_SYNC_RECV_FILEContent = default;
        private static bool _TAG_SYNC_RECV_FILEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_SYNC_SEND_FILE"/>
        /// </summary>
        public static int TAG_SYNC_SEND_FILE { get { if (!_TAG_SYNC_SEND_FILEReady) { _TAG_SYNC_SEND_FILEContent = SGetField<int>(LocalBridgeClazz, "TAG_SYNC_SEND_FILE"); _TAG_SYNC_SEND_FILEReady = true; } return _TAG_SYNC_SEND_FILEContent; } }
        private static int _TAG_SYNC_SEND_FILEContent = default;
        private static bool _TAG_SYNC_SEND_FILEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_USER_RESTRICTION_ADDED"/>
        /// </summary>
        public static int TAG_USER_RESTRICTION_ADDED { get { if (!_TAG_USER_RESTRICTION_ADDEDReady) { _TAG_USER_RESTRICTION_ADDEDContent = SGetField<int>(LocalBridgeClazz, "TAG_USER_RESTRICTION_ADDED"); _TAG_USER_RESTRICTION_ADDEDReady = true; } return _TAG_USER_RESTRICTION_ADDEDContent; } }
        private static int _TAG_USER_RESTRICTION_ADDEDContent = default;
        private static bool _TAG_USER_RESTRICTION_ADDEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_USER_RESTRICTION_REMOVED"/>
        /// </summary>
        public static int TAG_USER_RESTRICTION_REMOVED { get { if (!_TAG_USER_RESTRICTION_REMOVEDReady) { _TAG_USER_RESTRICTION_REMOVEDContent = SGetField<int>(LocalBridgeClazz, "TAG_USER_RESTRICTION_REMOVED"); _TAG_USER_RESTRICTION_REMOVEDReady = true; } return _TAG_USER_RESTRICTION_REMOVEDContent; } }
        private static int _TAG_USER_RESTRICTION_REMOVEDContent = default;
        private static bool _TAG_USER_RESTRICTION_REMOVEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_WIFI_CONNECTION"/>
        /// </summary>
        public static int TAG_WIFI_CONNECTION { get { if (!_TAG_WIFI_CONNECTIONReady) { _TAG_WIFI_CONNECTIONContent = SGetField<int>(LocalBridgeClazz, "TAG_WIFI_CONNECTION"); _TAG_WIFI_CONNECTIONReady = true; } return _TAG_WIFI_CONNECTIONContent; } }
        private static int _TAG_WIFI_CONNECTIONContent = default;
        private static bool _TAG_WIFI_CONNECTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_WIFI_DISCONNECTION"/>
        /// </summary>
        public static int TAG_WIFI_DISCONNECTION { get { if (!_TAG_WIFI_DISCONNECTIONReady) { _TAG_WIFI_DISCONNECTIONContent = SGetField<int>(LocalBridgeClazz, "TAG_WIFI_DISCONNECTION"); _TAG_WIFI_DISCONNECTIONReady = true; } return _TAG_WIFI_DISCONNECTIONContent; } }
        private static int _TAG_WIFI_DISCONNECTIONContent = default;
        private static bool _TAG_WIFI_DISCONNECTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.html#TAG_WIPE_FAILURE"/>
        /// </summary>
        public static int TAG_WIPE_FAILURE { get { if (!_TAG_WIPE_FAILUREReady) { _TAG_WIPE_FAILUREContent = SGetField<int>(LocalBridgeClazz, "TAG_WIPE_FAILURE"); _TAG_WIPE_FAILUREReady = true; } return _TAG_WIPE_FAILUREContent; } }
        private static int _TAG_WIPE_FAILUREContent = default;
        private static bool _TAG_WIPE_FAILUREReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes
        #region SecurityEvent implementation
        public partial class SecurityEvent
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.SecurityEvent.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.SecurityEvent.html#describeContents()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int DescribeContents()
            {
                return IExecuteWithSignature<int>("describeContents", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.SecurityEvent.html#getLogLevel()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetLogLevel()
            {
                return IExecuteWithSignature<int>("getLogLevel", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.SecurityEvent.html#getTag()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetTag()
            {
                return IExecuteWithSignature<int>("getTag", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.SecurityEvent.html#getData()"/>
            /// </summary>
            /// <returns><see cref="object"/></returns>
            public object GetData()
            {
                return IExecuteWithSignature("getData", "()Ljava/lang/Object;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.SecurityEvent.html#getId()"/>
            /// </summary>
            /// <returns><see cref="long"/></returns>
            public long GetId()
            {
                return IExecuteWithSignature<long>("getId", "()J");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.SecurityEvent.html#getTimeNanos()"/>
            /// </summary>
            /// <returns><see cref="long"/></returns>
            public long GetTimeNanos()
            {
                return IExecuteWithSignature<long>("getTimeNanos", "()J");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/admin/SecurityLog.SecurityEvent.html#writeToParcel(android.os.Parcel,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
            {
                IExecute("writeToParcel", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
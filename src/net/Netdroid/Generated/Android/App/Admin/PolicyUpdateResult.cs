/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.App.Admin
{
    #region PolicyUpdateResult declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/app/admin/PolicyUpdateResult.html"/>
    /// </summary>
    public partial class PolicyUpdateResult : MASES.JCOBridge.C2JBridge.JVMBridgeBase<PolicyUpdateResult>
    {
        const string _bridgeClassName = "android.app.admin.PolicyUpdateResult";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public PolicyUpdateResult() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public PolicyUpdateResult(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region PolicyUpdateResult implementation
    public partial class PolicyUpdateResult
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/PolicyUpdateResult.html#%3Cinit%3E(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public PolicyUpdateResult(int arg0)
            : base(arg0)
        {
        }
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/PolicyUpdateResult.html#RESULT_FAILURE_CONFLICTING_ADMIN_POLICY"/>
        /// </summary>
        public static int RESULT_FAILURE_CONFLICTING_ADMIN_POLICY { get { if (!_RESULT_FAILURE_CONFLICTING_ADMIN_POLICYReady) { _RESULT_FAILURE_CONFLICTING_ADMIN_POLICYContent = SGetField<int>(LocalBridgeClazz, "RESULT_FAILURE_CONFLICTING_ADMIN_POLICY"); _RESULT_FAILURE_CONFLICTING_ADMIN_POLICYReady = true; } return _RESULT_FAILURE_CONFLICTING_ADMIN_POLICYContent; } }
        private static int _RESULT_FAILURE_CONFLICTING_ADMIN_POLICYContent = default;
        private static bool _RESULT_FAILURE_CONFLICTING_ADMIN_POLICYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/PolicyUpdateResult.html#RESULT_FAILURE_HARDWARE_LIMITATION"/>
        /// </summary>
        public static int RESULT_FAILURE_HARDWARE_LIMITATION { get { if (!_RESULT_FAILURE_HARDWARE_LIMITATIONReady) { _RESULT_FAILURE_HARDWARE_LIMITATIONContent = SGetField<int>(LocalBridgeClazz, "RESULT_FAILURE_HARDWARE_LIMITATION"); _RESULT_FAILURE_HARDWARE_LIMITATIONReady = true; } return _RESULT_FAILURE_HARDWARE_LIMITATIONContent; } }
        private static int _RESULT_FAILURE_HARDWARE_LIMITATIONContent = default;
        private static bool _RESULT_FAILURE_HARDWARE_LIMITATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/PolicyUpdateResult.html#RESULT_FAILURE_STORAGE_LIMIT_REACHED"/>
        /// </summary>
        public static int RESULT_FAILURE_STORAGE_LIMIT_REACHED { get { if (!_RESULT_FAILURE_STORAGE_LIMIT_REACHEDReady) { _RESULT_FAILURE_STORAGE_LIMIT_REACHEDContent = SGetField<int>(LocalBridgeClazz, "RESULT_FAILURE_STORAGE_LIMIT_REACHED"); _RESULT_FAILURE_STORAGE_LIMIT_REACHEDReady = true; } return _RESULT_FAILURE_STORAGE_LIMIT_REACHEDContent; } }
        private static int _RESULT_FAILURE_STORAGE_LIMIT_REACHEDContent = default;
        private static bool _RESULT_FAILURE_STORAGE_LIMIT_REACHEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/PolicyUpdateResult.html#RESULT_FAILURE_UNKNOWN"/>
        /// </summary>
        public static int RESULT_FAILURE_UNKNOWN { get { if (!_RESULT_FAILURE_UNKNOWNReady) { _RESULT_FAILURE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "RESULT_FAILURE_UNKNOWN"); _RESULT_FAILURE_UNKNOWNReady = true; } return _RESULT_FAILURE_UNKNOWNContent; } }
        private static int _RESULT_FAILURE_UNKNOWNContent = default;
        private static bool _RESULT_FAILURE_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/PolicyUpdateResult.html#RESULT_POLICY_CLEARED"/>
        /// </summary>
        public static int RESULT_POLICY_CLEARED { get { if (!_RESULT_POLICY_CLEAREDReady) { _RESULT_POLICY_CLEAREDContent = SGetField<int>(LocalBridgeClazz, "RESULT_POLICY_CLEARED"); _RESULT_POLICY_CLEAREDReady = true; } return _RESULT_POLICY_CLEAREDContent; } }
        private static int _RESULT_POLICY_CLEAREDContent = default;
        private static bool _RESULT_POLICY_CLEAREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/PolicyUpdateResult.html#RESULT_POLICY_SET"/>
        /// </summary>
        public static int RESULT_POLICY_SET { get { if (!_RESULT_POLICY_SETReady) { _RESULT_POLICY_SETContent = SGetField<int>(LocalBridgeClazz, "RESULT_POLICY_SET"); _RESULT_POLICY_SETReady = true; } return _RESULT_POLICY_SETContent; } }
        private static int _RESULT_POLICY_SETContent = default;
        private static bool _RESULT_POLICY_SETReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/PolicyUpdateResult.html#getResultCode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetResultCode()
        {
            return IExecuteWithSignature<int>("getResultCode", "()I");
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.App.Admin
{
    #region DevicePolicyManager
    public partial class DevicePolicyManager
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#CONTENT_PROTECTION_DISABLED"/>
        /// </summary>
        public static int CONTENT_PROTECTION_DISABLED { get { if (!_CONTENT_PROTECTION_DISABLEDReady) { _CONTENT_PROTECTION_DISABLEDContent = SGetField<int>(LocalBridgeClazz, "CONTENT_PROTECTION_DISABLED"); _CONTENT_PROTECTION_DISABLEDReady = true; } return _CONTENT_PROTECTION_DISABLEDContent; } }
        private static int _CONTENT_PROTECTION_DISABLEDContent = default;
        private static bool _CONTENT_PROTECTION_DISABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#CONTENT_PROTECTION_ENABLED"/>
        /// </summary>
        public static int CONTENT_PROTECTION_ENABLED { get { if (!_CONTENT_PROTECTION_ENABLEDReady) { _CONTENT_PROTECTION_ENABLEDContent = SGetField<int>(LocalBridgeClazz, "CONTENT_PROTECTION_ENABLED"); _CONTENT_PROTECTION_ENABLEDReady = true; } return _CONTENT_PROTECTION_ENABLEDContent; } }
        private static int _CONTENT_PROTECTION_ENABLEDContent = default;
        private static bool _CONTENT_PROTECTION_ENABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#CONTENT_PROTECTION_NOT_CONTROLLED_BY_POLICY"/>
        /// </summary>
        public static int CONTENT_PROTECTION_NOT_CONTROLLED_BY_POLICY { get { if (!_CONTENT_PROTECTION_NOT_CONTROLLED_BY_POLICYReady) { _CONTENT_PROTECTION_NOT_CONTROLLED_BY_POLICYContent = SGetField<int>(LocalBridgeClazz, "CONTENT_PROTECTION_NOT_CONTROLLED_BY_POLICY"); _CONTENT_PROTECTION_NOT_CONTROLLED_BY_POLICYReady = true; } return _CONTENT_PROTECTION_NOT_CONTROLLED_BY_POLICYContent; } }
        private static int _CONTENT_PROTECTION_NOT_CONTROLLED_BY_POLICYContent = default;
        private static bool _CONTENT_PROTECTION_NOT_CONTROLLED_BY_POLICYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ENCRYPTION_STATUS_ACTIVATING"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int ENCRYPTION_STATUS_ACTIVATING { get { if (!_ENCRYPTION_STATUS_ACTIVATINGReady) { _ENCRYPTION_STATUS_ACTIVATINGContent = SGetField<int>(LocalBridgeClazz, "ENCRYPTION_STATUS_ACTIVATING"); _ENCRYPTION_STATUS_ACTIVATINGReady = true; } return _ENCRYPTION_STATUS_ACTIVATINGContent; } }
        private static int _ENCRYPTION_STATUS_ACTIVATINGContent = default;
        private static bool _ENCRYPTION_STATUS_ACTIVATINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ENCRYPTION_STATUS_ACTIVE"/>
        /// </summary>
        public static int ENCRYPTION_STATUS_ACTIVE { get { if (!_ENCRYPTION_STATUS_ACTIVEReady) { _ENCRYPTION_STATUS_ACTIVEContent = SGetField<int>(LocalBridgeClazz, "ENCRYPTION_STATUS_ACTIVE"); _ENCRYPTION_STATUS_ACTIVEReady = true; } return _ENCRYPTION_STATUS_ACTIVEContent; } }
        private static int _ENCRYPTION_STATUS_ACTIVEContent = default;
        private static bool _ENCRYPTION_STATUS_ACTIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ENCRYPTION_STATUS_ACTIVE_DEFAULT_KEY"/>
        /// </summary>
        public static int ENCRYPTION_STATUS_ACTIVE_DEFAULT_KEY { get { if (!_ENCRYPTION_STATUS_ACTIVE_DEFAULT_KEYReady) { _ENCRYPTION_STATUS_ACTIVE_DEFAULT_KEYContent = SGetField<int>(LocalBridgeClazz, "ENCRYPTION_STATUS_ACTIVE_DEFAULT_KEY"); _ENCRYPTION_STATUS_ACTIVE_DEFAULT_KEYReady = true; } return _ENCRYPTION_STATUS_ACTIVE_DEFAULT_KEYContent; } }
        private static int _ENCRYPTION_STATUS_ACTIVE_DEFAULT_KEYContent = default;
        private static bool _ENCRYPTION_STATUS_ACTIVE_DEFAULT_KEYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ENCRYPTION_STATUS_ACTIVE_PER_USER"/>
        /// </summary>
        public static int ENCRYPTION_STATUS_ACTIVE_PER_USER { get { if (!_ENCRYPTION_STATUS_ACTIVE_PER_USERReady) { _ENCRYPTION_STATUS_ACTIVE_PER_USERContent = SGetField<int>(LocalBridgeClazz, "ENCRYPTION_STATUS_ACTIVE_PER_USER"); _ENCRYPTION_STATUS_ACTIVE_PER_USERReady = true; } return _ENCRYPTION_STATUS_ACTIVE_PER_USERContent; } }
        private static int _ENCRYPTION_STATUS_ACTIVE_PER_USERContent = default;
        private static bool _ENCRYPTION_STATUS_ACTIVE_PER_USERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ENCRYPTION_STATUS_INACTIVE"/>
        /// </summary>
        public static int ENCRYPTION_STATUS_INACTIVE { get { if (!_ENCRYPTION_STATUS_INACTIVEReady) { _ENCRYPTION_STATUS_INACTIVEContent = SGetField<int>(LocalBridgeClazz, "ENCRYPTION_STATUS_INACTIVE"); _ENCRYPTION_STATUS_INACTIVEReady = true; } return _ENCRYPTION_STATUS_INACTIVEContent; } }
        private static int _ENCRYPTION_STATUS_INACTIVEContent = default;
        private static bool _ENCRYPTION_STATUS_INACTIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ENCRYPTION_STATUS_UNSUPPORTED"/>
        /// </summary>
        public static int ENCRYPTION_STATUS_UNSUPPORTED { get { if (!_ENCRYPTION_STATUS_UNSUPPORTEDReady) { _ENCRYPTION_STATUS_UNSUPPORTEDContent = SGetField<int>(LocalBridgeClazz, "ENCRYPTION_STATUS_UNSUPPORTED"); _ENCRYPTION_STATUS_UNSUPPORTEDReady = true; } return _ENCRYPTION_STATUS_UNSUPPORTEDContent; } }
        private static int _ENCRYPTION_STATUS_UNSUPPORTEDContent = default;
        private static bool _ENCRYPTION_STATUS_UNSUPPORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_RESOURCE_TYPE_DRAWABLE"/>
        /// </summary>
        public static int EXTRA_RESOURCE_TYPE_DRAWABLE { get { if (!_EXTRA_RESOURCE_TYPE_DRAWABLEReady) { _EXTRA_RESOURCE_TYPE_DRAWABLEContent = SGetField<int>(LocalBridgeClazz, "EXTRA_RESOURCE_TYPE_DRAWABLE"); _EXTRA_RESOURCE_TYPE_DRAWABLEReady = true; } return _EXTRA_RESOURCE_TYPE_DRAWABLEContent; } }
        private static int _EXTRA_RESOURCE_TYPE_DRAWABLEContent = default;
        private static bool _EXTRA_RESOURCE_TYPE_DRAWABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_RESOURCE_TYPE_STRING"/>
        /// </summary>
        public static int EXTRA_RESOURCE_TYPE_STRING { get { if (!_EXTRA_RESOURCE_TYPE_STRINGReady) { _EXTRA_RESOURCE_TYPE_STRINGContent = SGetField<int>(LocalBridgeClazz, "EXTRA_RESOURCE_TYPE_STRING"); _EXTRA_RESOURCE_TYPE_STRINGReady = true; } return _EXTRA_RESOURCE_TYPE_STRINGContent; } }
        private static int _EXTRA_RESOURCE_TYPE_STRINGContent = default;
        private static bool _EXTRA_RESOURCE_TYPE_STRINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY"/>
        /// </summary>
        public static int FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY { get { if (!_FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEYReady) { _FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEYContent = SGetField<int>(LocalBridgeClazz, "FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY"); _FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEYReady = true; } return _FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEYContent; } }
        private static int _FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEYContent = default;
        private static bool _FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#FLAG_MANAGED_CAN_ACCESS_PARENT"/>
        /// </summary>
        public static int FLAG_MANAGED_CAN_ACCESS_PARENT { get { if (!_FLAG_MANAGED_CAN_ACCESS_PARENTReady) { _FLAG_MANAGED_CAN_ACCESS_PARENTContent = SGetField<int>(LocalBridgeClazz, "FLAG_MANAGED_CAN_ACCESS_PARENT"); _FLAG_MANAGED_CAN_ACCESS_PARENTReady = true; } return _FLAG_MANAGED_CAN_ACCESS_PARENTContent; } }
        private static int _FLAG_MANAGED_CAN_ACCESS_PARENTContent = default;
        private static bool _FLAG_MANAGED_CAN_ACCESS_PARENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#FLAG_PARENT_CAN_ACCESS_MANAGED"/>
        /// </summary>
        public static int FLAG_PARENT_CAN_ACCESS_MANAGED { get { if (!_FLAG_PARENT_CAN_ACCESS_MANAGEDReady) { _FLAG_PARENT_CAN_ACCESS_MANAGEDContent = SGetField<int>(LocalBridgeClazz, "FLAG_PARENT_CAN_ACCESS_MANAGED"); _FLAG_PARENT_CAN_ACCESS_MANAGEDReady = true; } return _FLAG_PARENT_CAN_ACCESS_MANAGEDContent; } }
        private static int _FLAG_PARENT_CAN_ACCESS_MANAGEDContent = default;
        private static bool _FLAG_PARENT_CAN_ACCESS_MANAGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ID_TYPE_BASE_INFO"/>
        /// </summary>
        public static int ID_TYPE_BASE_INFO { get { if (!_ID_TYPE_BASE_INFOReady) { _ID_TYPE_BASE_INFOContent = SGetField<int>(LocalBridgeClazz, "ID_TYPE_BASE_INFO"); _ID_TYPE_BASE_INFOReady = true; } return _ID_TYPE_BASE_INFOContent; } }
        private static int _ID_TYPE_BASE_INFOContent = default;
        private static bool _ID_TYPE_BASE_INFOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ID_TYPE_IMEI"/>
        /// </summary>
        public static int ID_TYPE_IMEI { get { if (!_ID_TYPE_IMEIReady) { _ID_TYPE_IMEIContent = SGetField<int>(LocalBridgeClazz, "ID_TYPE_IMEI"); _ID_TYPE_IMEIReady = true; } return _ID_TYPE_IMEIContent; } }
        private static int _ID_TYPE_IMEIContent = default;
        private static bool _ID_TYPE_IMEIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ID_TYPE_INDIVIDUAL_ATTESTATION"/>
        /// </summary>
        public static int ID_TYPE_INDIVIDUAL_ATTESTATION { get { if (!_ID_TYPE_INDIVIDUAL_ATTESTATIONReady) { _ID_TYPE_INDIVIDUAL_ATTESTATIONContent = SGetField<int>(LocalBridgeClazz, "ID_TYPE_INDIVIDUAL_ATTESTATION"); _ID_TYPE_INDIVIDUAL_ATTESTATIONReady = true; } return _ID_TYPE_INDIVIDUAL_ATTESTATIONContent; } }
        private static int _ID_TYPE_INDIVIDUAL_ATTESTATIONContent = default;
        private static bool _ID_TYPE_INDIVIDUAL_ATTESTATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ID_TYPE_MEID"/>
        /// </summary>
        public static int ID_TYPE_MEID { get { if (!_ID_TYPE_MEIDReady) { _ID_TYPE_MEIDContent = SGetField<int>(LocalBridgeClazz, "ID_TYPE_MEID"); _ID_TYPE_MEIDReady = true; } return _ID_TYPE_MEIDContent; } }
        private static int _ID_TYPE_MEIDContent = default;
        private static bool _ID_TYPE_MEIDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ID_TYPE_SERIAL"/>
        /// </summary>
        public static int ID_TYPE_SERIAL { get { if (!_ID_TYPE_SERIALReady) { _ID_TYPE_SERIALContent = SGetField<int>(LocalBridgeClazz, "ID_TYPE_SERIAL"); _ID_TYPE_SERIALReady = true; } return _ID_TYPE_SERIALContent; } }
        private static int _ID_TYPE_SERIALContent = default;
        private static bool _ID_TYPE_SERIALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#INSTALLKEY_REQUEST_CREDENTIALS_ACCESS"/>
        /// </summary>
        public static int INSTALLKEY_REQUEST_CREDENTIALS_ACCESS { get { if (!_INSTALLKEY_REQUEST_CREDENTIALS_ACCESSReady) { _INSTALLKEY_REQUEST_CREDENTIALS_ACCESSContent = SGetField<int>(LocalBridgeClazz, "INSTALLKEY_REQUEST_CREDENTIALS_ACCESS"); _INSTALLKEY_REQUEST_CREDENTIALS_ACCESSReady = true; } return _INSTALLKEY_REQUEST_CREDENTIALS_ACCESSContent; } }
        private static int _INSTALLKEY_REQUEST_CREDENTIALS_ACCESSContent = default;
        private static bool _INSTALLKEY_REQUEST_CREDENTIALS_ACCESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#INSTALLKEY_SET_USER_SELECTABLE"/>
        /// </summary>
        public static int INSTALLKEY_SET_USER_SELECTABLE { get { if (!_INSTALLKEY_SET_USER_SELECTABLEReady) { _INSTALLKEY_SET_USER_SELECTABLEContent = SGetField<int>(LocalBridgeClazz, "INSTALLKEY_SET_USER_SELECTABLE"); _INSTALLKEY_SET_USER_SELECTABLEReady = true; } return _INSTALLKEY_SET_USER_SELECTABLEContent; } }
        private static int _INSTALLKEY_SET_USER_SELECTABLEContent = default;
        private static bool _INSTALLKEY_SET_USER_SELECTABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#KEYGUARD_DISABLE_BIOMETRICS"/>
        /// </summary>
        public static int KEYGUARD_DISABLE_BIOMETRICS { get { if (!_KEYGUARD_DISABLE_BIOMETRICSReady) { _KEYGUARD_DISABLE_BIOMETRICSContent = SGetField<int>(LocalBridgeClazz, "KEYGUARD_DISABLE_BIOMETRICS"); _KEYGUARD_DISABLE_BIOMETRICSReady = true; } return _KEYGUARD_DISABLE_BIOMETRICSContent; } }
        private static int _KEYGUARD_DISABLE_BIOMETRICSContent = default;
        private static bool _KEYGUARD_DISABLE_BIOMETRICSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#KEYGUARD_DISABLE_FACE"/>
        /// </summary>
        public static int KEYGUARD_DISABLE_FACE { get { if (!_KEYGUARD_DISABLE_FACEReady) { _KEYGUARD_DISABLE_FACEContent = SGetField<int>(LocalBridgeClazz, "KEYGUARD_DISABLE_FACE"); _KEYGUARD_DISABLE_FACEReady = true; } return _KEYGUARD_DISABLE_FACEContent; } }
        private static int _KEYGUARD_DISABLE_FACEContent = default;
        private static bool _KEYGUARD_DISABLE_FACEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#KEYGUARD_DISABLE_FEATURES_ALL"/>
        /// </summary>
        public static int KEYGUARD_DISABLE_FEATURES_ALL { get { if (!_KEYGUARD_DISABLE_FEATURES_ALLReady) { _KEYGUARD_DISABLE_FEATURES_ALLContent = SGetField<int>(LocalBridgeClazz, "KEYGUARD_DISABLE_FEATURES_ALL"); _KEYGUARD_DISABLE_FEATURES_ALLReady = true; } return _KEYGUARD_DISABLE_FEATURES_ALLContent; } }
        private static int _KEYGUARD_DISABLE_FEATURES_ALLContent = default;
        private static bool _KEYGUARD_DISABLE_FEATURES_ALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#KEYGUARD_DISABLE_FEATURES_NONE"/>
        /// </summary>
        public static int KEYGUARD_DISABLE_FEATURES_NONE { get { if (!_KEYGUARD_DISABLE_FEATURES_NONEReady) { _KEYGUARD_DISABLE_FEATURES_NONEContent = SGetField<int>(LocalBridgeClazz, "KEYGUARD_DISABLE_FEATURES_NONE"); _KEYGUARD_DISABLE_FEATURES_NONEReady = true; } return _KEYGUARD_DISABLE_FEATURES_NONEContent; } }
        private static int _KEYGUARD_DISABLE_FEATURES_NONEContent = default;
        private static bool _KEYGUARD_DISABLE_FEATURES_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#KEYGUARD_DISABLE_FINGERPRINT"/>
        /// </summary>
        public static int KEYGUARD_DISABLE_FINGERPRINT { get { if (!_KEYGUARD_DISABLE_FINGERPRINTReady) { _KEYGUARD_DISABLE_FINGERPRINTContent = SGetField<int>(LocalBridgeClazz, "KEYGUARD_DISABLE_FINGERPRINT"); _KEYGUARD_DISABLE_FINGERPRINTReady = true; } return _KEYGUARD_DISABLE_FINGERPRINTContent; } }
        private static int _KEYGUARD_DISABLE_FINGERPRINTContent = default;
        private static bool _KEYGUARD_DISABLE_FINGERPRINTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#KEYGUARD_DISABLE_IRIS"/>
        /// </summary>
        public static int KEYGUARD_DISABLE_IRIS { get { if (!_KEYGUARD_DISABLE_IRISReady) { _KEYGUARD_DISABLE_IRISContent = SGetField<int>(LocalBridgeClazz, "KEYGUARD_DISABLE_IRIS"); _KEYGUARD_DISABLE_IRISReady = true; } return _KEYGUARD_DISABLE_IRISContent; } }
        private static int _KEYGUARD_DISABLE_IRISContent = default;
        private static bool _KEYGUARD_DISABLE_IRISReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#KEYGUARD_DISABLE_REMOTE_INPUT"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int KEYGUARD_DISABLE_REMOTE_INPUT { get { if (!_KEYGUARD_DISABLE_REMOTE_INPUTReady) { _KEYGUARD_DISABLE_REMOTE_INPUTContent = SGetField<int>(LocalBridgeClazz, "KEYGUARD_DISABLE_REMOTE_INPUT"); _KEYGUARD_DISABLE_REMOTE_INPUTReady = true; } return _KEYGUARD_DISABLE_REMOTE_INPUTContent; } }
        private static int _KEYGUARD_DISABLE_REMOTE_INPUTContent = default;
        private static bool _KEYGUARD_DISABLE_REMOTE_INPUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#KEYGUARD_DISABLE_SECURE_CAMERA"/>
        /// </summary>
        public static int KEYGUARD_DISABLE_SECURE_CAMERA { get { if (!_KEYGUARD_DISABLE_SECURE_CAMERAReady) { _KEYGUARD_DISABLE_SECURE_CAMERAContent = SGetField<int>(LocalBridgeClazz, "KEYGUARD_DISABLE_SECURE_CAMERA"); _KEYGUARD_DISABLE_SECURE_CAMERAReady = true; } return _KEYGUARD_DISABLE_SECURE_CAMERAContent; } }
        private static int _KEYGUARD_DISABLE_SECURE_CAMERAContent = default;
        private static bool _KEYGUARD_DISABLE_SECURE_CAMERAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#KEYGUARD_DISABLE_SECURE_NOTIFICATIONS"/>
        /// </summary>
        public static int KEYGUARD_DISABLE_SECURE_NOTIFICATIONS { get { if (!_KEYGUARD_DISABLE_SECURE_NOTIFICATIONSReady) { _KEYGUARD_DISABLE_SECURE_NOTIFICATIONSContent = SGetField<int>(LocalBridgeClazz, "KEYGUARD_DISABLE_SECURE_NOTIFICATIONS"); _KEYGUARD_DISABLE_SECURE_NOTIFICATIONSReady = true; } return _KEYGUARD_DISABLE_SECURE_NOTIFICATIONSContent; } }
        private static int _KEYGUARD_DISABLE_SECURE_NOTIFICATIONSContent = default;
        private static bool _KEYGUARD_DISABLE_SECURE_NOTIFICATIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#KEYGUARD_DISABLE_SHORTCUTS_ALL"/>
        /// </summary>
        public static int KEYGUARD_DISABLE_SHORTCUTS_ALL { get { if (!_KEYGUARD_DISABLE_SHORTCUTS_ALLReady) { _KEYGUARD_DISABLE_SHORTCUTS_ALLContent = SGetField<int>(LocalBridgeClazz, "KEYGUARD_DISABLE_SHORTCUTS_ALL"); _KEYGUARD_DISABLE_SHORTCUTS_ALLReady = true; } return _KEYGUARD_DISABLE_SHORTCUTS_ALLContent; } }
        private static int _KEYGUARD_DISABLE_SHORTCUTS_ALLContent = default;
        private static bool _KEYGUARD_DISABLE_SHORTCUTS_ALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#KEYGUARD_DISABLE_TRUST_AGENTS"/>
        /// </summary>
        public static int KEYGUARD_DISABLE_TRUST_AGENTS { get { if (!_KEYGUARD_DISABLE_TRUST_AGENTSReady) { _KEYGUARD_DISABLE_TRUST_AGENTSContent = SGetField<int>(LocalBridgeClazz, "KEYGUARD_DISABLE_TRUST_AGENTS"); _KEYGUARD_DISABLE_TRUST_AGENTSReady = true; } return _KEYGUARD_DISABLE_TRUST_AGENTSContent; } }
        private static int _KEYGUARD_DISABLE_TRUST_AGENTSContent = default;
        private static bool _KEYGUARD_DISABLE_TRUST_AGENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS"/>
        /// </summary>
        public static int KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS { get { if (!_KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONSReady) { _KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONSContent = SGetField<int>(LocalBridgeClazz, "KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS"); _KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONSReady = true; } return _KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONSContent; } }
        private static int _KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONSContent = default;
        private static bool _KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#KEYGUARD_DISABLE_WIDGETS_ALL"/>
        /// </summary>
        public static int KEYGUARD_DISABLE_WIDGETS_ALL { get { if (!_KEYGUARD_DISABLE_WIDGETS_ALLReady) { _KEYGUARD_DISABLE_WIDGETS_ALLContent = SGetField<int>(LocalBridgeClazz, "KEYGUARD_DISABLE_WIDGETS_ALL"); _KEYGUARD_DISABLE_WIDGETS_ALLReady = true; } return _KEYGUARD_DISABLE_WIDGETS_ALLContent; } }
        private static int _KEYGUARD_DISABLE_WIDGETS_ALLContent = default;
        private static bool _KEYGUARD_DISABLE_WIDGETS_ALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#LEAVE_ALL_SYSTEM_APPS_ENABLED"/>
        /// </summary>
        public static int LEAVE_ALL_SYSTEM_APPS_ENABLED { get { if (!_LEAVE_ALL_SYSTEM_APPS_ENABLEDReady) { _LEAVE_ALL_SYSTEM_APPS_ENABLEDContent = SGetField<int>(LocalBridgeClazz, "LEAVE_ALL_SYSTEM_APPS_ENABLED"); _LEAVE_ALL_SYSTEM_APPS_ENABLEDReady = true; } return _LEAVE_ALL_SYSTEM_APPS_ENABLEDContent; } }
        private static int _LEAVE_ALL_SYSTEM_APPS_ENABLEDContent = default;
        private static bool _LEAVE_ALL_SYSTEM_APPS_ENABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#LOCK_TASK_FEATURE_BLOCK_ACTIVITY_START_IN_TASK"/>
        /// </summary>
        public static int LOCK_TASK_FEATURE_BLOCK_ACTIVITY_START_IN_TASK { get { if (!_LOCK_TASK_FEATURE_BLOCK_ACTIVITY_START_IN_TASKReady) { _LOCK_TASK_FEATURE_BLOCK_ACTIVITY_START_IN_TASKContent = SGetField<int>(LocalBridgeClazz, "LOCK_TASK_FEATURE_BLOCK_ACTIVITY_START_IN_TASK"); _LOCK_TASK_FEATURE_BLOCK_ACTIVITY_START_IN_TASKReady = true; } return _LOCK_TASK_FEATURE_BLOCK_ACTIVITY_START_IN_TASKContent; } }
        private static int _LOCK_TASK_FEATURE_BLOCK_ACTIVITY_START_IN_TASKContent = default;
        private static bool _LOCK_TASK_FEATURE_BLOCK_ACTIVITY_START_IN_TASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#LOCK_TASK_FEATURE_GLOBAL_ACTIONS"/>
        /// </summary>
        public static int LOCK_TASK_FEATURE_GLOBAL_ACTIONS { get { if (!_LOCK_TASK_FEATURE_GLOBAL_ACTIONSReady) { _LOCK_TASK_FEATURE_GLOBAL_ACTIONSContent = SGetField<int>(LocalBridgeClazz, "LOCK_TASK_FEATURE_GLOBAL_ACTIONS"); _LOCK_TASK_FEATURE_GLOBAL_ACTIONSReady = true; } return _LOCK_TASK_FEATURE_GLOBAL_ACTIONSContent; } }
        private static int _LOCK_TASK_FEATURE_GLOBAL_ACTIONSContent = default;
        private static bool _LOCK_TASK_FEATURE_GLOBAL_ACTIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#LOCK_TASK_FEATURE_HOME"/>
        /// </summary>
        public static int LOCK_TASK_FEATURE_HOME { get { if (!_LOCK_TASK_FEATURE_HOMEReady) { _LOCK_TASK_FEATURE_HOMEContent = SGetField<int>(LocalBridgeClazz, "LOCK_TASK_FEATURE_HOME"); _LOCK_TASK_FEATURE_HOMEReady = true; } return _LOCK_TASK_FEATURE_HOMEContent; } }
        private static int _LOCK_TASK_FEATURE_HOMEContent = default;
        private static bool _LOCK_TASK_FEATURE_HOMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#LOCK_TASK_FEATURE_KEYGUARD"/>
        /// </summary>
        public static int LOCK_TASK_FEATURE_KEYGUARD { get { if (!_LOCK_TASK_FEATURE_KEYGUARDReady) { _LOCK_TASK_FEATURE_KEYGUARDContent = SGetField<int>(LocalBridgeClazz, "LOCK_TASK_FEATURE_KEYGUARD"); _LOCK_TASK_FEATURE_KEYGUARDReady = true; } return _LOCK_TASK_FEATURE_KEYGUARDContent; } }
        private static int _LOCK_TASK_FEATURE_KEYGUARDContent = default;
        private static bool _LOCK_TASK_FEATURE_KEYGUARDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#LOCK_TASK_FEATURE_NONE"/>
        /// </summary>
        public static int LOCK_TASK_FEATURE_NONE { get { if (!_LOCK_TASK_FEATURE_NONEReady) { _LOCK_TASK_FEATURE_NONEContent = SGetField<int>(LocalBridgeClazz, "LOCK_TASK_FEATURE_NONE"); _LOCK_TASK_FEATURE_NONEReady = true; } return _LOCK_TASK_FEATURE_NONEContent; } }
        private static int _LOCK_TASK_FEATURE_NONEContent = default;
        private static bool _LOCK_TASK_FEATURE_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#LOCK_TASK_FEATURE_NOTIFICATIONS"/>
        /// </summary>
        public static int LOCK_TASK_FEATURE_NOTIFICATIONS { get { if (!_LOCK_TASK_FEATURE_NOTIFICATIONSReady) { _LOCK_TASK_FEATURE_NOTIFICATIONSContent = SGetField<int>(LocalBridgeClazz, "LOCK_TASK_FEATURE_NOTIFICATIONS"); _LOCK_TASK_FEATURE_NOTIFICATIONSReady = true; } return _LOCK_TASK_FEATURE_NOTIFICATIONSContent; } }
        private static int _LOCK_TASK_FEATURE_NOTIFICATIONSContent = default;
        private static bool _LOCK_TASK_FEATURE_NOTIFICATIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#LOCK_TASK_FEATURE_OVERVIEW"/>
        /// </summary>
        public static int LOCK_TASK_FEATURE_OVERVIEW { get { if (!_LOCK_TASK_FEATURE_OVERVIEWReady) { _LOCK_TASK_FEATURE_OVERVIEWContent = SGetField<int>(LocalBridgeClazz, "LOCK_TASK_FEATURE_OVERVIEW"); _LOCK_TASK_FEATURE_OVERVIEWReady = true; } return _LOCK_TASK_FEATURE_OVERVIEWContent; } }
        private static int _LOCK_TASK_FEATURE_OVERVIEWContent = default;
        private static bool _LOCK_TASK_FEATURE_OVERVIEWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#LOCK_TASK_FEATURE_SYSTEM_INFO"/>
        /// </summary>
        public static int LOCK_TASK_FEATURE_SYSTEM_INFO { get { if (!_LOCK_TASK_FEATURE_SYSTEM_INFOReady) { _LOCK_TASK_FEATURE_SYSTEM_INFOContent = SGetField<int>(LocalBridgeClazz, "LOCK_TASK_FEATURE_SYSTEM_INFO"); _LOCK_TASK_FEATURE_SYSTEM_INFOReady = true; } return _LOCK_TASK_FEATURE_SYSTEM_INFOContent; } }
        private static int _LOCK_TASK_FEATURE_SYSTEM_INFOContent = default;
        private static bool _LOCK_TASK_FEATURE_SYSTEM_INFOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#MAKE_USER_EPHEMERAL"/>
        /// </summary>
        public static int MAKE_USER_EPHEMERAL { get { if (!_MAKE_USER_EPHEMERALReady) { _MAKE_USER_EPHEMERALContent = SGetField<int>(LocalBridgeClazz, "MAKE_USER_EPHEMERAL"); _MAKE_USER_EPHEMERALReady = true; } return _MAKE_USER_EPHEMERALContent; } }
        private static int _MAKE_USER_EPHEMERALContent = default;
        private static bool _MAKE_USER_EPHEMERALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#MTE_DISABLED"/>
        /// </summary>
        public static int MTE_DISABLED { get { if (!_MTE_DISABLEDReady) { _MTE_DISABLEDContent = SGetField<int>(LocalBridgeClazz, "MTE_DISABLED"); _MTE_DISABLEDReady = true; } return _MTE_DISABLEDContent; } }
        private static int _MTE_DISABLEDContent = default;
        private static bool _MTE_DISABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#MTE_ENABLED"/>
        /// </summary>
        public static int MTE_ENABLED { get { if (!_MTE_ENABLEDReady) { _MTE_ENABLEDContent = SGetField<int>(LocalBridgeClazz, "MTE_ENABLED"); _MTE_ENABLEDReady = true; } return _MTE_ENABLEDContent; } }
        private static int _MTE_ENABLEDContent = default;
        private static bool _MTE_ENABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#MTE_NOT_CONTROLLED_BY_POLICY"/>
        /// </summary>
        public static int MTE_NOT_CONTROLLED_BY_POLICY { get { if (!_MTE_NOT_CONTROLLED_BY_POLICYReady) { _MTE_NOT_CONTROLLED_BY_POLICYContent = SGetField<int>(LocalBridgeClazz, "MTE_NOT_CONTROLLED_BY_POLICY"); _MTE_NOT_CONTROLLED_BY_POLICYReady = true; } return _MTE_NOT_CONTROLLED_BY_POLICYContent; } }
        private static int _MTE_NOT_CONTROLLED_BY_POLICYContent = default;
        private static bool _MTE_NOT_CONTROLLED_BY_POLICYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#NEARBY_STREAMING_DISABLED"/>
        /// </summary>
        public static int NEARBY_STREAMING_DISABLED { get { if (!_NEARBY_STREAMING_DISABLEDReady) { _NEARBY_STREAMING_DISABLEDContent = SGetField<int>(LocalBridgeClazz, "NEARBY_STREAMING_DISABLED"); _NEARBY_STREAMING_DISABLEDReady = true; } return _NEARBY_STREAMING_DISABLEDContent; } }
        private static int _NEARBY_STREAMING_DISABLEDContent = default;
        private static bool _NEARBY_STREAMING_DISABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#NEARBY_STREAMING_ENABLED"/>
        /// </summary>
        public static int NEARBY_STREAMING_ENABLED { get { if (!_NEARBY_STREAMING_ENABLEDReady) { _NEARBY_STREAMING_ENABLEDContent = SGetField<int>(LocalBridgeClazz, "NEARBY_STREAMING_ENABLED"); _NEARBY_STREAMING_ENABLEDReady = true; } return _NEARBY_STREAMING_ENABLEDContent; } }
        private static int _NEARBY_STREAMING_ENABLEDContent = default;
        private static bool _NEARBY_STREAMING_ENABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#NEARBY_STREAMING_NOT_CONTROLLED_BY_POLICY"/>
        /// </summary>
        public static int NEARBY_STREAMING_NOT_CONTROLLED_BY_POLICY { get { if (!_NEARBY_STREAMING_NOT_CONTROLLED_BY_POLICYReady) { _NEARBY_STREAMING_NOT_CONTROLLED_BY_POLICYContent = SGetField<int>(LocalBridgeClazz, "NEARBY_STREAMING_NOT_CONTROLLED_BY_POLICY"); _NEARBY_STREAMING_NOT_CONTROLLED_BY_POLICYReady = true; } return _NEARBY_STREAMING_NOT_CONTROLLED_BY_POLICYContent; } }
        private static int _NEARBY_STREAMING_NOT_CONTROLLED_BY_POLICYContent = default;
        private static bool _NEARBY_STREAMING_NOT_CONTROLLED_BY_POLICYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#NEARBY_STREAMING_SAME_MANAGED_ACCOUNT_ONLY"/>
        /// </summary>
        public static int NEARBY_STREAMING_SAME_MANAGED_ACCOUNT_ONLY { get { if (!_NEARBY_STREAMING_SAME_MANAGED_ACCOUNT_ONLYReady) { _NEARBY_STREAMING_SAME_MANAGED_ACCOUNT_ONLYContent = SGetField<int>(LocalBridgeClazz, "NEARBY_STREAMING_SAME_MANAGED_ACCOUNT_ONLY"); _NEARBY_STREAMING_SAME_MANAGED_ACCOUNT_ONLYReady = true; } return _NEARBY_STREAMING_SAME_MANAGED_ACCOUNT_ONLYContent; } }
        private static int _NEARBY_STREAMING_SAME_MANAGED_ACCOUNT_ONLYContent = default;
        private static bool _NEARBY_STREAMING_SAME_MANAGED_ACCOUNT_ONLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#OPERATION_SAFETY_REASON_DRIVING_DISTRACTION"/>
        /// </summary>
        public static int OPERATION_SAFETY_REASON_DRIVING_DISTRACTION { get { if (!_OPERATION_SAFETY_REASON_DRIVING_DISTRACTIONReady) { _OPERATION_SAFETY_REASON_DRIVING_DISTRACTIONContent = SGetField<int>(LocalBridgeClazz, "OPERATION_SAFETY_REASON_DRIVING_DISTRACTION"); _OPERATION_SAFETY_REASON_DRIVING_DISTRACTIONReady = true; } return _OPERATION_SAFETY_REASON_DRIVING_DISTRACTIONContent; } }
        private static int _OPERATION_SAFETY_REASON_DRIVING_DISTRACTIONContent = default;
        private static bool _OPERATION_SAFETY_REASON_DRIVING_DISTRACTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PASSWORD_COMPLEXITY_HIGH"/>
        /// </summary>
        public static int PASSWORD_COMPLEXITY_HIGH { get { if (!_PASSWORD_COMPLEXITY_HIGHReady) { _PASSWORD_COMPLEXITY_HIGHContent = SGetField<int>(LocalBridgeClazz, "PASSWORD_COMPLEXITY_HIGH"); _PASSWORD_COMPLEXITY_HIGHReady = true; } return _PASSWORD_COMPLEXITY_HIGHContent; } }
        private static int _PASSWORD_COMPLEXITY_HIGHContent = default;
        private static bool _PASSWORD_COMPLEXITY_HIGHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PASSWORD_COMPLEXITY_LOW"/>
        /// </summary>
        public static int PASSWORD_COMPLEXITY_LOW { get { if (!_PASSWORD_COMPLEXITY_LOWReady) { _PASSWORD_COMPLEXITY_LOWContent = SGetField<int>(LocalBridgeClazz, "PASSWORD_COMPLEXITY_LOW"); _PASSWORD_COMPLEXITY_LOWReady = true; } return _PASSWORD_COMPLEXITY_LOWContent; } }
        private static int _PASSWORD_COMPLEXITY_LOWContent = default;
        private static bool _PASSWORD_COMPLEXITY_LOWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PASSWORD_COMPLEXITY_MEDIUM"/>
        /// </summary>
        public static int PASSWORD_COMPLEXITY_MEDIUM { get { if (!_PASSWORD_COMPLEXITY_MEDIUMReady) { _PASSWORD_COMPLEXITY_MEDIUMContent = SGetField<int>(LocalBridgeClazz, "PASSWORD_COMPLEXITY_MEDIUM"); _PASSWORD_COMPLEXITY_MEDIUMReady = true; } return _PASSWORD_COMPLEXITY_MEDIUMContent; } }
        private static int _PASSWORD_COMPLEXITY_MEDIUMContent = default;
        private static bool _PASSWORD_COMPLEXITY_MEDIUMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PASSWORD_COMPLEXITY_NONE"/>
        /// </summary>
        public static int PASSWORD_COMPLEXITY_NONE { get { if (!_PASSWORD_COMPLEXITY_NONEReady) { _PASSWORD_COMPLEXITY_NONEContent = SGetField<int>(LocalBridgeClazz, "PASSWORD_COMPLEXITY_NONE"); _PASSWORD_COMPLEXITY_NONEReady = true; } return _PASSWORD_COMPLEXITY_NONEContent; } }
        private static int _PASSWORD_COMPLEXITY_NONEContent = default;
        private static bool _PASSWORD_COMPLEXITY_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PASSWORD_QUALITY_ALPHABETIC"/>
        /// </summary>
        public static int PASSWORD_QUALITY_ALPHABETIC { get { if (!_PASSWORD_QUALITY_ALPHABETICReady) { _PASSWORD_QUALITY_ALPHABETICContent = SGetField<int>(LocalBridgeClazz, "PASSWORD_QUALITY_ALPHABETIC"); _PASSWORD_QUALITY_ALPHABETICReady = true; } return _PASSWORD_QUALITY_ALPHABETICContent; } }
        private static int _PASSWORD_QUALITY_ALPHABETICContent = default;
        private static bool _PASSWORD_QUALITY_ALPHABETICReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PASSWORD_QUALITY_ALPHANUMERIC"/>
        /// </summary>
        public static int PASSWORD_QUALITY_ALPHANUMERIC { get { if (!_PASSWORD_QUALITY_ALPHANUMERICReady) { _PASSWORD_QUALITY_ALPHANUMERICContent = SGetField<int>(LocalBridgeClazz, "PASSWORD_QUALITY_ALPHANUMERIC"); _PASSWORD_QUALITY_ALPHANUMERICReady = true; } return _PASSWORD_QUALITY_ALPHANUMERICContent; } }
        private static int _PASSWORD_QUALITY_ALPHANUMERICContent = default;
        private static bool _PASSWORD_QUALITY_ALPHANUMERICReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PASSWORD_QUALITY_BIOMETRIC_WEAK"/>
        /// </summary>
        public static int PASSWORD_QUALITY_BIOMETRIC_WEAK { get { if (!_PASSWORD_QUALITY_BIOMETRIC_WEAKReady) { _PASSWORD_QUALITY_BIOMETRIC_WEAKContent = SGetField<int>(LocalBridgeClazz, "PASSWORD_QUALITY_BIOMETRIC_WEAK"); _PASSWORD_QUALITY_BIOMETRIC_WEAKReady = true; } return _PASSWORD_QUALITY_BIOMETRIC_WEAKContent; } }
        private static int _PASSWORD_QUALITY_BIOMETRIC_WEAKContent = default;
        private static bool _PASSWORD_QUALITY_BIOMETRIC_WEAKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PASSWORD_QUALITY_COMPLEX"/>
        /// </summary>
        public static int PASSWORD_QUALITY_COMPLEX { get { if (!_PASSWORD_QUALITY_COMPLEXReady) { _PASSWORD_QUALITY_COMPLEXContent = SGetField<int>(LocalBridgeClazz, "PASSWORD_QUALITY_COMPLEX"); _PASSWORD_QUALITY_COMPLEXReady = true; } return _PASSWORD_QUALITY_COMPLEXContent; } }
        private static int _PASSWORD_QUALITY_COMPLEXContent = default;
        private static bool _PASSWORD_QUALITY_COMPLEXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PASSWORD_QUALITY_NUMERIC"/>
        /// </summary>
        public static int PASSWORD_QUALITY_NUMERIC { get { if (!_PASSWORD_QUALITY_NUMERICReady) { _PASSWORD_QUALITY_NUMERICContent = SGetField<int>(LocalBridgeClazz, "PASSWORD_QUALITY_NUMERIC"); _PASSWORD_QUALITY_NUMERICReady = true; } return _PASSWORD_QUALITY_NUMERICContent; } }
        private static int _PASSWORD_QUALITY_NUMERICContent = default;
        private static bool _PASSWORD_QUALITY_NUMERICReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PASSWORD_QUALITY_NUMERIC_COMPLEX"/>
        /// </summary>
        public static int PASSWORD_QUALITY_NUMERIC_COMPLEX { get { if (!_PASSWORD_QUALITY_NUMERIC_COMPLEXReady) { _PASSWORD_QUALITY_NUMERIC_COMPLEXContent = SGetField<int>(LocalBridgeClazz, "PASSWORD_QUALITY_NUMERIC_COMPLEX"); _PASSWORD_QUALITY_NUMERIC_COMPLEXReady = true; } return _PASSWORD_QUALITY_NUMERIC_COMPLEXContent; } }
        private static int _PASSWORD_QUALITY_NUMERIC_COMPLEXContent = default;
        private static bool _PASSWORD_QUALITY_NUMERIC_COMPLEXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PASSWORD_QUALITY_SOMETHING"/>
        /// </summary>
        public static int PASSWORD_QUALITY_SOMETHING { get { if (!_PASSWORD_QUALITY_SOMETHINGReady) { _PASSWORD_QUALITY_SOMETHINGContent = SGetField<int>(LocalBridgeClazz, "PASSWORD_QUALITY_SOMETHING"); _PASSWORD_QUALITY_SOMETHINGReady = true; } return _PASSWORD_QUALITY_SOMETHINGContent; } }
        private static int _PASSWORD_QUALITY_SOMETHINGContent = default;
        private static bool _PASSWORD_QUALITY_SOMETHINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PASSWORD_QUALITY_UNSPECIFIED"/>
        /// </summary>
        public static int PASSWORD_QUALITY_UNSPECIFIED { get { if (!_PASSWORD_QUALITY_UNSPECIFIEDReady) { _PASSWORD_QUALITY_UNSPECIFIEDContent = SGetField<int>(LocalBridgeClazz, "PASSWORD_QUALITY_UNSPECIFIED"); _PASSWORD_QUALITY_UNSPECIFIEDReady = true; } return _PASSWORD_QUALITY_UNSPECIFIEDContent; } }
        private static int _PASSWORD_QUALITY_UNSPECIFIEDContent = default;
        private static bool _PASSWORD_QUALITY_UNSPECIFIEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PERMISSION_GRANT_STATE_DEFAULT"/>
        /// </summary>
        public static int PERMISSION_GRANT_STATE_DEFAULT { get { if (!_PERMISSION_GRANT_STATE_DEFAULTReady) { _PERMISSION_GRANT_STATE_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "PERMISSION_GRANT_STATE_DEFAULT"); _PERMISSION_GRANT_STATE_DEFAULTReady = true; } return _PERMISSION_GRANT_STATE_DEFAULTContent; } }
        private static int _PERMISSION_GRANT_STATE_DEFAULTContent = default;
        private static bool _PERMISSION_GRANT_STATE_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PERMISSION_GRANT_STATE_DENIED"/>
        /// </summary>
        public static int PERMISSION_GRANT_STATE_DENIED { get { if (!_PERMISSION_GRANT_STATE_DENIEDReady) { _PERMISSION_GRANT_STATE_DENIEDContent = SGetField<int>(LocalBridgeClazz, "PERMISSION_GRANT_STATE_DENIED"); _PERMISSION_GRANT_STATE_DENIEDReady = true; } return _PERMISSION_GRANT_STATE_DENIEDContent; } }
        private static int _PERMISSION_GRANT_STATE_DENIEDContent = default;
        private static bool _PERMISSION_GRANT_STATE_DENIEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PERMISSION_GRANT_STATE_GRANTED"/>
        /// </summary>
        public static int PERMISSION_GRANT_STATE_GRANTED { get { if (!_PERMISSION_GRANT_STATE_GRANTEDReady) { _PERMISSION_GRANT_STATE_GRANTEDContent = SGetField<int>(LocalBridgeClazz, "PERMISSION_GRANT_STATE_GRANTED"); _PERMISSION_GRANT_STATE_GRANTEDReady = true; } return _PERMISSION_GRANT_STATE_GRANTEDContent; } }
        private static int _PERMISSION_GRANT_STATE_GRANTEDContent = default;
        private static bool _PERMISSION_GRANT_STATE_GRANTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PERMISSION_POLICY_AUTO_DENY"/>
        /// </summary>
        public static int PERMISSION_POLICY_AUTO_DENY { get { if (!_PERMISSION_POLICY_AUTO_DENYReady) { _PERMISSION_POLICY_AUTO_DENYContent = SGetField<int>(LocalBridgeClazz, "PERMISSION_POLICY_AUTO_DENY"); _PERMISSION_POLICY_AUTO_DENYReady = true; } return _PERMISSION_POLICY_AUTO_DENYContent; } }
        private static int _PERMISSION_POLICY_AUTO_DENYContent = default;
        private static bool _PERMISSION_POLICY_AUTO_DENYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PERMISSION_POLICY_AUTO_GRANT"/>
        /// </summary>
        public static int PERMISSION_POLICY_AUTO_GRANT { get { if (!_PERMISSION_POLICY_AUTO_GRANTReady) { _PERMISSION_POLICY_AUTO_GRANTContent = SGetField<int>(LocalBridgeClazz, "PERMISSION_POLICY_AUTO_GRANT"); _PERMISSION_POLICY_AUTO_GRANTReady = true; } return _PERMISSION_POLICY_AUTO_GRANTContent; } }
        private static int _PERMISSION_POLICY_AUTO_GRANTContent = default;
        private static bool _PERMISSION_POLICY_AUTO_GRANTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PERMISSION_POLICY_PROMPT"/>
        /// </summary>
        public static int PERMISSION_POLICY_PROMPT { get { if (!_PERMISSION_POLICY_PROMPTReady) { _PERMISSION_POLICY_PROMPTContent = SGetField<int>(LocalBridgeClazz, "PERMISSION_POLICY_PROMPT"); _PERMISSION_POLICY_PROMPTReady = true; } return _PERMISSION_POLICY_PROMPTContent; } }
        private static int _PERMISSION_POLICY_PROMPTContent = default;
        private static bool _PERMISSION_POLICY_PROMPTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PERSONAL_APPS_NOT_SUSPENDED"/>
        /// </summary>
        public static int PERSONAL_APPS_NOT_SUSPENDED { get { if (!_PERSONAL_APPS_NOT_SUSPENDEDReady) { _PERSONAL_APPS_NOT_SUSPENDEDContent = SGetField<int>(LocalBridgeClazz, "PERSONAL_APPS_NOT_SUSPENDED"); _PERSONAL_APPS_NOT_SUSPENDEDReady = true; } return _PERSONAL_APPS_NOT_SUSPENDEDContent; } }
        private static int _PERSONAL_APPS_NOT_SUSPENDEDContent = default;
        private static bool _PERSONAL_APPS_NOT_SUSPENDEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PERSONAL_APPS_SUSPENDED_EXPLICITLY"/>
        /// </summary>
        public static int PERSONAL_APPS_SUSPENDED_EXPLICITLY { get { if (!_PERSONAL_APPS_SUSPENDED_EXPLICITLYReady) { _PERSONAL_APPS_SUSPENDED_EXPLICITLYContent = SGetField<int>(LocalBridgeClazz, "PERSONAL_APPS_SUSPENDED_EXPLICITLY"); _PERSONAL_APPS_SUSPENDED_EXPLICITLYReady = true; } return _PERSONAL_APPS_SUSPENDED_EXPLICITLYContent; } }
        private static int _PERSONAL_APPS_SUSPENDED_EXPLICITLYContent = default;
        private static bool _PERSONAL_APPS_SUSPENDED_EXPLICITLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PERSONAL_APPS_SUSPENDED_PROFILE_TIMEOUT"/>
        /// </summary>
        public static int PERSONAL_APPS_SUSPENDED_PROFILE_TIMEOUT { get { if (!_PERSONAL_APPS_SUSPENDED_PROFILE_TIMEOUTReady) { _PERSONAL_APPS_SUSPENDED_PROFILE_TIMEOUTContent = SGetField<int>(LocalBridgeClazz, "PERSONAL_APPS_SUSPENDED_PROFILE_TIMEOUT"); _PERSONAL_APPS_SUSPENDED_PROFILE_TIMEOUTReady = true; } return _PERSONAL_APPS_SUSPENDED_PROFILE_TIMEOUTContent; } }
        private static int _PERSONAL_APPS_SUSPENDED_PROFILE_TIMEOUTContent = default;
        private static bool _PERSONAL_APPS_SUSPENDED_PROFILE_TIMEOUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PRIVATE_DNS_MODE_OFF"/>
        /// </summary>
        public static int PRIVATE_DNS_MODE_OFF { get { if (!_PRIVATE_DNS_MODE_OFFReady) { _PRIVATE_DNS_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "PRIVATE_DNS_MODE_OFF"); _PRIVATE_DNS_MODE_OFFReady = true; } return _PRIVATE_DNS_MODE_OFFContent; } }
        private static int _PRIVATE_DNS_MODE_OFFContent = default;
        private static bool _PRIVATE_DNS_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PRIVATE_DNS_MODE_OPPORTUNISTIC"/>
        /// </summary>
        public static int PRIVATE_DNS_MODE_OPPORTUNISTIC { get { if (!_PRIVATE_DNS_MODE_OPPORTUNISTICReady) { _PRIVATE_DNS_MODE_OPPORTUNISTICContent = SGetField<int>(LocalBridgeClazz, "PRIVATE_DNS_MODE_OPPORTUNISTIC"); _PRIVATE_DNS_MODE_OPPORTUNISTICReady = true; } return _PRIVATE_DNS_MODE_OPPORTUNISTICContent; } }
        private static int _PRIVATE_DNS_MODE_OPPORTUNISTICContent = default;
        private static bool _PRIVATE_DNS_MODE_OPPORTUNISTICReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PRIVATE_DNS_MODE_PROVIDER_HOSTNAME"/>
        /// </summary>
        public static int PRIVATE_DNS_MODE_PROVIDER_HOSTNAME { get { if (!_PRIVATE_DNS_MODE_PROVIDER_HOSTNAMEReady) { _PRIVATE_DNS_MODE_PROVIDER_HOSTNAMEContent = SGetField<int>(LocalBridgeClazz, "PRIVATE_DNS_MODE_PROVIDER_HOSTNAME"); _PRIVATE_DNS_MODE_PROVIDER_HOSTNAMEReady = true; } return _PRIVATE_DNS_MODE_PROVIDER_HOSTNAMEContent; } }
        private static int _PRIVATE_DNS_MODE_PROVIDER_HOSTNAMEContent = default;
        private static bool _PRIVATE_DNS_MODE_PROVIDER_HOSTNAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PRIVATE_DNS_MODE_UNKNOWN"/>
        /// </summary>
        public static int PRIVATE_DNS_MODE_UNKNOWN { get { if (!_PRIVATE_DNS_MODE_UNKNOWNReady) { _PRIVATE_DNS_MODE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "PRIVATE_DNS_MODE_UNKNOWN"); _PRIVATE_DNS_MODE_UNKNOWNReady = true; } return _PRIVATE_DNS_MODE_UNKNOWNContent; } }
        private static int _PRIVATE_DNS_MODE_UNKNOWNContent = default;
        private static bool _PRIVATE_DNS_MODE_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PRIVATE_DNS_SET_ERROR_FAILURE_SETTING"/>
        /// </summary>
        public static int PRIVATE_DNS_SET_ERROR_FAILURE_SETTING { get { if (!_PRIVATE_DNS_SET_ERROR_FAILURE_SETTINGReady) { _PRIVATE_DNS_SET_ERROR_FAILURE_SETTINGContent = SGetField<int>(LocalBridgeClazz, "PRIVATE_DNS_SET_ERROR_FAILURE_SETTING"); _PRIVATE_DNS_SET_ERROR_FAILURE_SETTINGReady = true; } return _PRIVATE_DNS_SET_ERROR_FAILURE_SETTINGContent; } }
        private static int _PRIVATE_DNS_SET_ERROR_FAILURE_SETTINGContent = default;
        private static bool _PRIVATE_DNS_SET_ERROR_FAILURE_SETTINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PRIVATE_DNS_SET_ERROR_HOST_NOT_SERVING"/>
        /// </summary>
        public static int PRIVATE_DNS_SET_ERROR_HOST_NOT_SERVING { get { if (!_PRIVATE_DNS_SET_ERROR_HOST_NOT_SERVINGReady) { _PRIVATE_DNS_SET_ERROR_HOST_NOT_SERVINGContent = SGetField<int>(LocalBridgeClazz, "PRIVATE_DNS_SET_ERROR_HOST_NOT_SERVING"); _PRIVATE_DNS_SET_ERROR_HOST_NOT_SERVINGReady = true; } return _PRIVATE_DNS_SET_ERROR_HOST_NOT_SERVINGContent; } }
        private static int _PRIVATE_DNS_SET_ERROR_HOST_NOT_SERVINGContent = default;
        private static bool _PRIVATE_DNS_SET_ERROR_HOST_NOT_SERVINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PRIVATE_DNS_SET_NO_ERROR"/>
        /// </summary>
        public static int PRIVATE_DNS_SET_NO_ERROR { get { if (!_PRIVATE_DNS_SET_NO_ERRORReady) { _PRIVATE_DNS_SET_NO_ERRORContent = SGetField<int>(LocalBridgeClazz, "PRIVATE_DNS_SET_NO_ERROR"); _PRIVATE_DNS_SET_NO_ERRORReady = true; } return _PRIVATE_DNS_SET_NO_ERRORContent; } }
        private static int _PRIVATE_DNS_SET_NO_ERRORContent = default;
        private static bool _PRIVATE_DNS_SET_NO_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PROVISIONING_MODE_FULLY_MANAGED_DEVICE"/>
        /// </summary>
        public static int PROVISIONING_MODE_FULLY_MANAGED_DEVICE { get { if (!_PROVISIONING_MODE_FULLY_MANAGED_DEVICEReady) { _PROVISIONING_MODE_FULLY_MANAGED_DEVICEContent = SGetField<int>(LocalBridgeClazz, "PROVISIONING_MODE_FULLY_MANAGED_DEVICE"); _PROVISIONING_MODE_FULLY_MANAGED_DEVICEReady = true; } return _PROVISIONING_MODE_FULLY_MANAGED_DEVICEContent; } }
        private static int _PROVISIONING_MODE_FULLY_MANAGED_DEVICEContent = default;
        private static bool _PROVISIONING_MODE_FULLY_MANAGED_DEVICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PROVISIONING_MODE_MANAGED_PROFILE"/>
        /// </summary>
        public static int PROVISIONING_MODE_MANAGED_PROFILE { get { if (!_PROVISIONING_MODE_MANAGED_PROFILEReady) { _PROVISIONING_MODE_MANAGED_PROFILEContent = SGetField<int>(LocalBridgeClazz, "PROVISIONING_MODE_MANAGED_PROFILE"); _PROVISIONING_MODE_MANAGED_PROFILEReady = true; } return _PROVISIONING_MODE_MANAGED_PROFILEContent; } }
        private static int _PROVISIONING_MODE_MANAGED_PROFILEContent = default;
        private static bool _PROVISIONING_MODE_MANAGED_PROFILEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PROVISIONING_MODE_MANAGED_PROFILE_ON_PERSONAL_DEVICE"/>
        /// </summary>
        public static int PROVISIONING_MODE_MANAGED_PROFILE_ON_PERSONAL_DEVICE { get { if (!_PROVISIONING_MODE_MANAGED_PROFILE_ON_PERSONAL_DEVICEReady) { _PROVISIONING_MODE_MANAGED_PROFILE_ON_PERSONAL_DEVICEContent = SGetField<int>(LocalBridgeClazz, "PROVISIONING_MODE_MANAGED_PROFILE_ON_PERSONAL_DEVICE"); _PROVISIONING_MODE_MANAGED_PROFILE_ON_PERSONAL_DEVICEReady = true; } return _PROVISIONING_MODE_MANAGED_PROFILE_ON_PERSONAL_DEVICEContent; } }
        private static int _PROVISIONING_MODE_MANAGED_PROFILE_ON_PERSONAL_DEVICEContent = default;
        private static bool _PROVISIONING_MODE_MANAGED_PROFILE_ON_PERSONAL_DEVICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#RESET_PASSWORD_DO_NOT_ASK_CREDENTIALS_ON_BOOT"/>
        /// </summary>
        public static int RESET_PASSWORD_DO_NOT_ASK_CREDENTIALS_ON_BOOT { get { if (!_RESET_PASSWORD_DO_NOT_ASK_CREDENTIALS_ON_BOOTReady) { _RESET_PASSWORD_DO_NOT_ASK_CREDENTIALS_ON_BOOTContent = SGetField<int>(LocalBridgeClazz, "RESET_PASSWORD_DO_NOT_ASK_CREDENTIALS_ON_BOOT"); _RESET_PASSWORD_DO_NOT_ASK_CREDENTIALS_ON_BOOTReady = true; } return _RESET_PASSWORD_DO_NOT_ASK_CREDENTIALS_ON_BOOTContent; } }
        private static int _RESET_PASSWORD_DO_NOT_ASK_CREDENTIALS_ON_BOOTContent = default;
        private static bool _RESET_PASSWORD_DO_NOT_ASK_CREDENTIALS_ON_BOOTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#RESET_PASSWORD_REQUIRE_ENTRY"/>
        /// </summary>
        public static int RESET_PASSWORD_REQUIRE_ENTRY { get { if (!_RESET_PASSWORD_REQUIRE_ENTRYReady) { _RESET_PASSWORD_REQUIRE_ENTRYContent = SGetField<int>(LocalBridgeClazz, "RESET_PASSWORD_REQUIRE_ENTRY"); _RESET_PASSWORD_REQUIRE_ENTRYReady = true; } return _RESET_PASSWORD_REQUIRE_ENTRYContent; } }
        private static int _RESET_PASSWORD_REQUIRE_ENTRYContent = default;
        private static bool _RESET_PASSWORD_REQUIRE_ENTRYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#SKIP_SETUP_WIZARD"/>
        /// </summary>
        public static int SKIP_SETUP_WIZARD { get { if (!_SKIP_SETUP_WIZARDReady) { _SKIP_SETUP_WIZARDContent = SGetField<int>(LocalBridgeClazz, "SKIP_SETUP_WIZARD"); _SKIP_SETUP_WIZARDReady = true; } return _SKIP_SETUP_WIZARDContent; } }
        private static int _SKIP_SETUP_WIZARDContent = default;
        private static bool _SKIP_SETUP_WIZARDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#WIFI_SECURITY_ENTERPRISE_192"/>
        /// </summary>
        public static int WIFI_SECURITY_ENTERPRISE_192 { get { if (!_WIFI_SECURITY_ENTERPRISE_192Ready) { _WIFI_SECURITY_ENTERPRISE_192Content = SGetField<int>(LocalBridgeClazz, "WIFI_SECURITY_ENTERPRISE_192"); _WIFI_SECURITY_ENTERPRISE_192Ready = true; } return _WIFI_SECURITY_ENTERPRISE_192Content; } }
        private static int _WIFI_SECURITY_ENTERPRISE_192Content = default;
        private static bool _WIFI_SECURITY_ENTERPRISE_192Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#WIFI_SECURITY_ENTERPRISE_EAP"/>
        /// </summary>
        public static int WIFI_SECURITY_ENTERPRISE_EAP { get { if (!_WIFI_SECURITY_ENTERPRISE_EAPReady) { _WIFI_SECURITY_ENTERPRISE_EAPContent = SGetField<int>(LocalBridgeClazz, "WIFI_SECURITY_ENTERPRISE_EAP"); _WIFI_SECURITY_ENTERPRISE_EAPReady = true; } return _WIFI_SECURITY_ENTERPRISE_EAPContent; } }
        private static int _WIFI_SECURITY_ENTERPRISE_EAPContent = default;
        private static bool _WIFI_SECURITY_ENTERPRISE_EAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#WIFI_SECURITY_OPEN"/>
        /// </summary>
        public static int WIFI_SECURITY_OPEN { get { if (!_WIFI_SECURITY_OPENReady) { _WIFI_SECURITY_OPENContent = SGetField<int>(LocalBridgeClazz, "WIFI_SECURITY_OPEN"); _WIFI_SECURITY_OPENReady = true; } return _WIFI_SECURITY_OPENContent; } }
        private static int _WIFI_SECURITY_OPENContent = default;
        private static bool _WIFI_SECURITY_OPENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#WIFI_SECURITY_PERSONAL"/>
        /// </summary>
        public static int WIFI_SECURITY_PERSONAL { get { if (!_WIFI_SECURITY_PERSONALReady) { _WIFI_SECURITY_PERSONALContent = SGetField<int>(LocalBridgeClazz, "WIFI_SECURITY_PERSONAL"); _WIFI_SECURITY_PERSONALReady = true; } return _WIFI_SECURITY_PERSONALContent; } }
        private static int _WIFI_SECURITY_PERSONALContent = default;
        private static bool _WIFI_SECURITY_PERSONALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#WIPE_EUICC"/>
        /// </summary>
        public static int WIPE_EUICC { get { if (!_WIPE_EUICCReady) { _WIPE_EUICCContent = SGetField<int>(LocalBridgeClazz, "WIPE_EUICC"); _WIPE_EUICCReady = true; } return _WIPE_EUICCContent; } }
        private static int _WIPE_EUICCContent = default;
        private static bool _WIPE_EUICCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#WIPE_EXTERNAL_STORAGE"/>
        /// </summary>
        public static int WIPE_EXTERNAL_STORAGE { get { if (!_WIPE_EXTERNAL_STORAGEReady) { _WIPE_EXTERNAL_STORAGEContent = SGetField<int>(LocalBridgeClazz, "WIPE_EXTERNAL_STORAGE"); _WIPE_EXTERNAL_STORAGEReady = true; } return _WIPE_EXTERNAL_STORAGEContent; } }
        private static int _WIPE_EXTERNAL_STORAGEContent = default;
        private static bool _WIPE_EXTERNAL_STORAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#WIPE_RESET_PROTECTION_DATA"/>
        /// </summary>
        public static int WIPE_RESET_PROTECTION_DATA { get { if (!_WIPE_RESET_PROTECTION_DATAReady) { _WIPE_RESET_PROTECTION_DATAContent = SGetField<int>(LocalBridgeClazz, "WIPE_RESET_PROTECTION_DATA"); _WIPE_RESET_PROTECTION_DATAReady = true; } return _WIPE_RESET_PROTECTION_DATAContent; } }
        private static int _WIPE_RESET_PROTECTION_DATAContent = default;
        private static bool _WIPE_RESET_PROTECTION_DATAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#WIPE_SILENTLY"/>
        /// </summary>
        public static int WIPE_SILENTLY { get { if (!_WIPE_SILENTLYReady) { _WIPE_SILENTLYContent = SGetField<int>(LocalBridgeClazz, "WIPE_SILENTLY"); _WIPE_SILENTLYReady = true; } return _WIPE_SILENTLYContent; } }
        private static int _WIPE_SILENTLYContent = default;
        private static bool _WIPE_SILENTLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_ADD_DEVICE_ADMIN"/>
        /// </summary>
        public static Java.Lang.String ACTION_ADD_DEVICE_ADMIN { get { if (!_ACTION_ADD_DEVICE_ADMINReady) { _ACTION_ADD_DEVICE_ADMINContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_ADD_DEVICE_ADMIN"); _ACTION_ADD_DEVICE_ADMINReady = true; } return _ACTION_ADD_DEVICE_ADMINContent; } }
        private static Java.Lang.String _ACTION_ADD_DEVICE_ADMINContent = default;
        private static bool _ACTION_ADD_DEVICE_ADMINReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_ADMIN_POLICY_COMPLIANCE"/>
        /// </summary>
        public static Java.Lang.String ACTION_ADMIN_POLICY_COMPLIANCE { get { if (!_ACTION_ADMIN_POLICY_COMPLIANCEReady) { _ACTION_ADMIN_POLICY_COMPLIANCEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_ADMIN_POLICY_COMPLIANCE"); _ACTION_ADMIN_POLICY_COMPLIANCEReady = true; } return _ACTION_ADMIN_POLICY_COMPLIANCEContent; } }
        private static Java.Lang.String _ACTION_ADMIN_POLICY_COMPLIANCEContent = default;
        private static bool _ACTION_ADMIN_POLICY_COMPLIANCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_APPLICATION_DELEGATION_SCOPES_CHANGED"/>
        /// </summary>
        public static Java.Lang.String ACTION_APPLICATION_DELEGATION_SCOPES_CHANGED { get { if (!_ACTION_APPLICATION_DELEGATION_SCOPES_CHANGEDReady) { _ACTION_APPLICATION_DELEGATION_SCOPES_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_APPLICATION_DELEGATION_SCOPES_CHANGED"); _ACTION_APPLICATION_DELEGATION_SCOPES_CHANGEDReady = true; } return _ACTION_APPLICATION_DELEGATION_SCOPES_CHANGEDContent; } }
        private static Java.Lang.String _ACTION_APPLICATION_DELEGATION_SCOPES_CHANGEDContent = default;
        private static bool _ACTION_APPLICATION_DELEGATION_SCOPES_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_CHECK_POLICY_COMPLIANCE"/>
        /// </summary>
        public static Java.Lang.String ACTION_CHECK_POLICY_COMPLIANCE { get { if (!_ACTION_CHECK_POLICY_COMPLIANCEReady) { _ACTION_CHECK_POLICY_COMPLIANCEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_CHECK_POLICY_COMPLIANCE"); _ACTION_CHECK_POLICY_COMPLIANCEReady = true; } return _ACTION_CHECK_POLICY_COMPLIANCEContent; } }
        private static Java.Lang.String _ACTION_CHECK_POLICY_COMPLIANCEContent = default;
        private static bool _ACTION_CHECK_POLICY_COMPLIANCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_DEVICE_ADMIN_SERVICE"/>
        /// </summary>
        public static Java.Lang.String ACTION_DEVICE_ADMIN_SERVICE { get { if (!_ACTION_DEVICE_ADMIN_SERVICEReady) { _ACTION_DEVICE_ADMIN_SERVICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_DEVICE_ADMIN_SERVICE"); _ACTION_DEVICE_ADMIN_SERVICEReady = true; } return _ACTION_DEVICE_ADMIN_SERVICEContent; } }
        private static Java.Lang.String _ACTION_DEVICE_ADMIN_SERVICEContent = default;
        private static bool _ACTION_DEVICE_ADMIN_SERVICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_DEVICE_FINANCING_STATE_CHANGED"/>
        /// </summary>
        public static Java.Lang.String ACTION_DEVICE_FINANCING_STATE_CHANGED { get { if (!_ACTION_DEVICE_FINANCING_STATE_CHANGEDReady) { _ACTION_DEVICE_FINANCING_STATE_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_DEVICE_FINANCING_STATE_CHANGED"); _ACTION_DEVICE_FINANCING_STATE_CHANGEDReady = true; } return _ACTION_DEVICE_FINANCING_STATE_CHANGEDContent; } }
        private static Java.Lang.String _ACTION_DEVICE_FINANCING_STATE_CHANGEDContent = default;
        private static bool _ACTION_DEVICE_FINANCING_STATE_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_DEVICE_OWNER_CHANGED"/>
        /// </summary>
        public static Java.Lang.String ACTION_DEVICE_OWNER_CHANGED { get { if (!_ACTION_DEVICE_OWNER_CHANGEDReady) { _ACTION_DEVICE_OWNER_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_DEVICE_OWNER_CHANGED"); _ACTION_DEVICE_OWNER_CHANGEDReady = true; } return _ACTION_DEVICE_OWNER_CHANGEDContent; } }
        private static Java.Lang.String _ACTION_DEVICE_OWNER_CHANGEDContent = default;
        private static bool _ACTION_DEVICE_OWNER_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_DEVICE_POLICY_RESOURCE_UPDATED"/>
        /// </summary>
        public static Java.Lang.String ACTION_DEVICE_POLICY_RESOURCE_UPDATED { get { if (!_ACTION_DEVICE_POLICY_RESOURCE_UPDATEDReady) { _ACTION_DEVICE_POLICY_RESOURCE_UPDATEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_DEVICE_POLICY_RESOURCE_UPDATED"); _ACTION_DEVICE_POLICY_RESOURCE_UPDATEDReady = true; } return _ACTION_DEVICE_POLICY_RESOURCE_UPDATEDContent; } }
        private static Java.Lang.String _ACTION_DEVICE_POLICY_RESOURCE_UPDATEDContent = default;
        private static bool _ACTION_DEVICE_POLICY_RESOURCE_UPDATEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_GET_PROVISIONING_MODE"/>
        /// </summary>
        public static Java.Lang.String ACTION_GET_PROVISIONING_MODE { get { if (!_ACTION_GET_PROVISIONING_MODEReady) { _ACTION_GET_PROVISIONING_MODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_GET_PROVISIONING_MODE"); _ACTION_GET_PROVISIONING_MODEReady = true; } return _ACTION_GET_PROVISIONING_MODEContent; } }
        private static Java.Lang.String _ACTION_GET_PROVISIONING_MODEContent = default;
        private static bool _ACTION_GET_PROVISIONING_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_MANAGED_PROFILE_PROVISIONED"/>
        /// </summary>
        public static Java.Lang.String ACTION_MANAGED_PROFILE_PROVISIONED { get { if (!_ACTION_MANAGED_PROFILE_PROVISIONEDReady) { _ACTION_MANAGED_PROFILE_PROVISIONEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_MANAGED_PROFILE_PROVISIONED"); _ACTION_MANAGED_PROFILE_PROVISIONEDReady = true; } return _ACTION_MANAGED_PROFILE_PROVISIONEDContent; } }
        private static Java.Lang.String _ACTION_MANAGED_PROFILE_PROVISIONEDContent = default;
        private static bool _ACTION_MANAGED_PROFILE_PROVISIONEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_PROFILE_OWNER_CHANGED"/>
        /// </summary>
        public static Java.Lang.String ACTION_PROFILE_OWNER_CHANGED { get { if (!_ACTION_PROFILE_OWNER_CHANGEDReady) { _ACTION_PROFILE_OWNER_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_PROFILE_OWNER_CHANGED"); _ACTION_PROFILE_OWNER_CHANGEDReady = true; } return _ACTION_PROFILE_OWNER_CHANGEDContent; } }
        private static Java.Lang.String _ACTION_PROFILE_OWNER_CHANGEDContent = default;
        private static bool _ACTION_PROFILE_OWNER_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_PROVISION_MANAGED_DEVICE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String ACTION_PROVISION_MANAGED_DEVICE { get { if (!_ACTION_PROVISION_MANAGED_DEVICEReady) { _ACTION_PROVISION_MANAGED_DEVICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_PROVISION_MANAGED_DEVICE"); _ACTION_PROVISION_MANAGED_DEVICEReady = true; } return _ACTION_PROVISION_MANAGED_DEVICEContent; } }
        private static Java.Lang.String _ACTION_PROVISION_MANAGED_DEVICEContent = default;
        private static bool _ACTION_PROVISION_MANAGED_DEVICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_PROVISION_MANAGED_PROFILE"/>
        /// </summary>
        public static Java.Lang.String ACTION_PROVISION_MANAGED_PROFILE { get { if (!_ACTION_PROVISION_MANAGED_PROFILEReady) { _ACTION_PROVISION_MANAGED_PROFILEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_PROVISION_MANAGED_PROFILE"); _ACTION_PROVISION_MANAGED_PROFILEReady = true; } return _ACTION_PROVISION_MANAGED_PROFILEContent; } }
        private static Java.Lang.String _ACTION_PROVISION_MANAGED_PROFILEContent = default;
        private static bool _ACTION_PROVISION_MANAGED_PROFILEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_PROVISIONING_SUCCESSFUL"/>
        /// </summary>
        public static Java.Lang.String ACTION_PROVISIONING_SUCCESSFUL { get { if (!_ACTION_PROVISIONING_SUCCESSFULReady) { _ACTION_PROVISIONING_SUCCESSFULContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_PROVISIONING_SUCCESSFUL"); _ACTION_PROVISIONING_SUCCESSFULReady = true; } return _ACTION_PROVISIONING_SUCCESSFULContent; } }
        private static Java.Lang.String _ACTION_PROVISIONING_SUCCESSFULContent = default;
        private static bool _ACTION_PROVISIONING_SUCCESSFULReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_SET_NEW_PARENT_PROFILE_PASSWORD"/>
        /// </summary>
        public static Java.Lang.String ACTION_SET_NEW_PARENT_PROFILE_PASSWORD { get { if (!_ACTION_SET_NEW_PARENT_PROFILE_PASSWORDReady) { _ACTION_SET_NEW_PARENT_PROFILE_PASSWORDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_SET_NEW_PARENT_PROFILE_PASSWORD"); _ACTION_SET_NEW_PARENT_PROFILE_PASSWORDReady = true; } return _ACTION_SET_NEW_PARENT_PROFILE_PASSWORDContent; } }
        private static Java.Lang.String _ACTION_SET_NEW_PARENT_PROFILE_PASSWORDContent = default;
        private static bool _ACTION_SET_NEW_PARENT_PROFILE_PASSWORDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_SET_NEW_PASSWORD"/>
        /// </summary>
        public static Java.Lang.String ACTION_SET_NEW_PASSWORD { get { if (!_ACTION_SET_NEW_PASSWORDReady) { _ACTION_SET_NEW_PASSWORDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_SET_NEW_PASSWORD"); _ACTION_SET_NEW_PASSWORDReady = true; } return _ACTION_SET_NEW_PASSWORDContent; } }
        private static Java.Lang.String _ACTION_SET_NEW_PASSWORDContent = default;
        private static bool _ACTION_SET_NEW_PASSWORDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_START_ENCRYPTION"/>
        /// </summary>
        public static Java.Lang.String ACTION_START_ENCRYPTION { get { if (!_ACTION_START_ENCRYPTIONReady) { _ACTION_START_ENCRYPTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_START_ENCRYPTION"); _ACTION_START_ENCRYPTIONReady = true; } return _ACTION_START_ENCRYPTIONContent; } }
        private static Java.Lang.String _ACTION_START_ENCRYPTIONContent = default;
        private static bool _ACTION_START_ENCRYPTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_SYSTEM_UPDATE_POLICY_CHANGED"/>
        /// </summary>
        public static Java.Lang.String ACTION_SYSTEM_UPDATE_POLICY_CHANGED { get { if (!_ACTION_SYSTEM_UPDATE_POLICY_CHANGEDReady) { _ACTION_SYSTEM_UPDATE_POLICY_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_SYSTEM_UPDATE_POLICY_CHANGED"); _ACTION_SYSTEM_UPDATE_POLICY_CHANGEDReady = true; } return _ACTION_SYSTEM_UPDATE_POLICY_CHANGEDContent; } }
        private static Java.Lang.String _ACTION_SYSTEM_UPDATE_POLICY_CHANGEDContent = default;
        private static bool _ACTION_SYSTEM_UPDATE_POLICY_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#DELEGATION_APP_RESTRICTIONS"/>
        /// </summary>
        public static Java.Lang.String DELEGATION_APP_RESTRICTIONS { get { if (!_DELEGATION_APP_RESTRICTIONSReady) { _DELEGATION_APP_RESTRICTIONSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DELEGATION_APP_RESTRICTIONS"); _DELEGATION_APP_RESTRICTIONSReady = true; } return _DELEGATION_APP_RESTRICTIONSContent; } }
        private static Java.Lang.String _DELEGATION_APP_RESTRICTIONSContent = default;
        private static bool _DELEGATION_APP_RESTRICTIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#DELEGATION_BLOCK_UNINSTALL"/>
        /// </summary>
        public static Java.Lang.String DELEGATION_BLOCK_UNINSTALL { get { if (!_DELEGATION_BLOCK_UNINSTALLReady) { _DELEGATION_BLOCK_UNINSTALLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DELEGATION_BLOCK_UNINSTALL"); _DELEGATION_BLOCK_UNINSTALLReady = true; } return _DELEGATION_BLOCK_UNINSTALLContent; } }
        private static Java.Lang.String _DELEGATION_BLOCK_UNINSTALLContent = default;
        private static bool _DELEGATION_BLOCK_UNINSTALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#DELEGATION_CERT_INSTALL"/>
        /// </summary>
        public static Java.Lang.String DELEGATION_CERT_INSTALL { get { if (!_DELEGATION_CERT_INSTALLReady) { _DELEGATION_CERT_INSTALLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DELEGATION_CERT_INSTALL"); _DELEGATION_CERT_INSTALLReady = true; } return _DELEGATION_CERT_INSTALLContent; } }
        private static Java.Lang.String _DELEGATION_CERT_INSTALLContent = default;
        private static bool _DELEGATION_CERT_INSTALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#DELEGATION_CERT_SELECTION"/>
        /// </summary>
        public static Java.Lang.String DELEGATION_CERT_SELECTION { get { if (!_DELEGATION_CERT_SELECTIONReady) { _DELEGATION_CERT_SELECTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DELEGATION_CERT_SELECTION"); _DELEGATION_CERT_SELECTIONReady = true; } return _DELEGATION_CERT_SELECTIONContent; } }
        private static Java.Lang.String _DELEGATION_CERT_SELECTIONContent = default;
        private static bool _DELEGATION_CERT_SELECTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#DELEGATION_ENABLE_SYSTEM_APP"/>
        /// </summary>
        public static Java.Lang.String DELEGATION_ENABLE_SYSTEM_APP { get { if (!_DELEGATION_ENABLE_SYSTEM_APPReady) { _DELEGATION_ENABLE_SYSTEM_APPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DELEGATION_ENABLE_SYSTEM_APP"); _DELEGATION_ENABLE_SYSTEM_APPReady = true; } return _DELEGATION_ENABLE_SYSTEM_APPContent; } }
        private static Java.Lang.String _DELEGATION_ENABLE_SYSTEM_APPContent = default;
        private static bool _DELEGATION_ENABLE_SYSTEM_APPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#DELEGATION_INSTALL_EXISTING_PACKAGE"/>
        /// </summary>
        public static Java.Lang.String DELEGATION_INSTALL_EXISTING_PACKAGE { get { if (!_DELEGATION_INSTALL_EXISTING_PACKAGEReady) { _DELEGATION_INSTALL_EXISTING_PACKAGEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DELEGATION_INSTALL_EXISTING_PACKAGE"); _DELEGATION_INSTALL_EXISTING_PACKAGEReady = true; } return _DELEGATION_INSTALL_EXISTING_PACKAGEContent; } }
        private static Java.Lang.String _DELEGATION_INSTALL_EXISTING_PACKAGEContent = default;
        private static bool _DELEGATION_INSTALL_EXISTING_PACKAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#DELEGATION_KEEP_UNINSTALLED_PACKAGES"/>
        /// </summary>
        public static Java.Lang.String DELEGATION_KEEP_UNINSTALLED_PACKAGES { get { if (!_DELEGATION_KEEP_UNINSTALLED_PACKAGESReady) { _DELEGATION_KEEP_UNINSTALLED_PACKAGESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DELEGATION_KEEP_UNINSTALLED_PACKAGES"); _DELEGATION_KEEP_UNINSTALLED_PACKAGESReady = true; } return _DELEGATION_KEEP_UNINSTALLED_PACKAGESContent; } }
        private static Java.Lang.String _DELEGATION_KEEP_UNINSTALLED_PACKAGESContent = default;
        private static bool _DELEGATION_KEEP_UNINSTALLED_PACKAGESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#DELEGATION_NETWORK_LOGGING"/>
        /// </summary>
        public static Java.Lang.String DELEGATION_NETWORK_LOGGING { get { if (!_DELEGATION_NETWORK_LOGGINGReady) { _DELEGATION_NETWORK_LOGGINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DELEGATION_NETWORK_LOGGING"); _DELEGATION_NETWORK_LOGGINGReady = true; } return _DELEGATION_NETWORK_LOGGINGContent; } }
        private static Java.Lang.String _DELEGATION_NETWORK_LOGGINGContent = default;
        private static bool _DELEGATION_NETWORK_LOGGINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#DELEGATION_PACKAGE_ACCESS"/>
        /// </summary>
        public static Java.Lang.String DELEGATION_PACKAGE_ACCESS { get { if (!_DELEGATION_PACKAGE_ACCESSReady) { _DELEGATION_PACKAGE_ACCESSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DELEGATION_PACKAGE_ACCESS"); _DELEGATION_PACKAGE_ACCESSReady = true; } return _DELEGATION_PACKAGE_ACCESSContent; } }
        private static Java.Lang.String _DELEGATION_PACKAGE_ACCESSContent = default;
        private static bool _DELEGATION_PACKAGE_ACCESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#DELEGATION_PERMISSION_GRANT"/>
        /// </summary>
        public static Java.Lang.String DELEGATION_PERMISSION_GRANT { get { if (!_DELEGATION_PERMISSION_GRANTReady) { _DELEGATION_PERMISSION_GRANTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DELEGATION_PERMISSION_GRANT"); _DELEGATION_PERMISSION_GRANTReady = true; } return _DELEGATION_PERMISSION_GRANTContent; } }
        private static Java.Lang.String _DELEGATION_PERMISSION_GRANTContent = default;
        private static bool _DELEGATION_PERMISSION_GRANTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#DELEGATION_SECURITY_LOGGING"/>
        /// </summary>
        public static Java.Lang.String DELEGATION_SECURITY_LOGGING { get { if (!_DELEGATION_SECURITY_LOGGINGReady) { _DELEGATION_SECURITY_LOGGINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DELEGATION_SECURITY_LOGGING"); _DELEGATION_SECURITY_LOGGINGReady = true; } return _DELEGATION_SECURITY_LOGGINGContent; } }
        private static Java.Lang.String _DELEGATION_SECURITY_LOGGINGContent = default;
        private static bool _DELEGATION_SECURITY_LOGGINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_ADD_EXPLANATION"/>
        /// </summary>
        public static Java.Lang.String EXTRA_ADD_EXPLANATION { get { if (!_EXTRA_ADD_EXPLANATIONReady) { _EXTRA_ADD_EXPLANATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADD_EXPLANATION"); _EXTRA_ADD_EXPLANATIONReady = true; } return _EXTRA_ADD_EXPLANATIONContent; } }
        private static Java.Lang.String _EXTRA_ADD_EXPLANATIONContent = default;
        private static bool _EXTRA_ADD_EXPLANATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_DELEGATION_SCOPES"/>
        /// </summary>
        public static Java.Lang.String EXTRA_DELEGATION_SCOPES { get { if (!_EXTRA_DELEGATION_SCOPESReady) { _EXTRA_DELEGATION_SCOPESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_DELEGATION_SCOPES"); _EXTRA_DELEGATION_SCOPESReady = true; } return _EXTRA_DELEGATION_SCOPESContent; } }
        private static Java.Lang.String _EXTRA_DELEGATION_SCOPESContent = default;
        private static bool _EXTRA_DELEGATION_SCOPESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_DEVICE_ADMIN"/>
        /// </summary>
        public static Java.Lang.String EXTRA_DEVICE_ADMIN { get { if (!_EXTRA_DEVICE_ADMINReady) { _EXTRA_DEVICE_ADMINContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_DEVICE_ADMIN"); _EXTRA_DEVICE_ADMINReady = true; } return _EXTRA_DEVICE_ADMINContent; } }
        private static Java.Lang.String _EXTRA_DEVICE_ADMINContent = default;
        private static bool _EXTRA_DEVICE_ADMINReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_DEVICE_PASSWORD_REQUIREMENT_ONLY"/>
        /// </summary>
        public static Java.Lang.String EXTRA_DEVICE_PASSWORD_REQUIREMENT_ONLY { get { if (!_EXTRA_DEVICE_PASSWORD_REQUIREMENT_ONLYReady) { _EXTRA_DEVICE_PASSWORD_REQUIREMENT_ONLYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_DEVICE_PASSWORD_REQUIREMENT_ONLY"); _EXTRA_DEVICE_PASSWORD_REQUIREMENT_ONLYReady = true; } return _EXTRA_DEVICE_PASSWORD_REQUIREMENT_ONLYContent; } }
        private static Java.Lang.String _EXTRA_DEVICE_PASSWORD_REQUIREMENT_ONLYContent = default;
        private static bool _EXTRA_DEVICE_PASSWORD_REQUIREMENT_ONLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PASSWORD_COMPLEXITY"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PASSWORD_COMPLEXITY { get { if (!_EXTRA_PASSWORD_COMPLEXITYReady) { _EXTRA_PASSWORD_COMPLEXITYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PASSWORD_COMPLEXITY"); _EXTRA_PASSWORD_COMPLEXITYReady = true; } return _EXTRA_PASSWORD_COMPLEXITYContent; } }
        private static Java.Lang.String _EXTRA_PASSWORD_COMPLEXITYContent = default;
        private static bool _EXTRA_PASSWORD_COMPLEXITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE { get { if (!_EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATEReady) { _EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE"); _EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATEReady = true; } return _EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATEContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATEContent = default;
        private static bool _EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE { get { if (!_EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLEReady) { _EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE"); _EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLEReady = true; } return _EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLEContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLEContent = default;
        private static bool _EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_ALLOW_OFFLINE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_ALLOW_OFFLINE { get { if (!_EXTRA_PROVISIONING_ALLOW_OFFLINEReady) { _EXTRA_PROVISIONING_ALLOW_OFFLINEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_ALLOW_OFFLINE"); _EXTRA_PROVISIONING_ALLOW_OFFLINEReady = true; } return _EXTRA_PROVISIONING_ALLOW_OFFLINEContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_ALLOW_OFFLINEContent = default;
        private static bool _EXTRA_PROVISIONING_ALLOW_OFFLINEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_ALLOWED_PROVISIONING_MODES"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_ALLOWED_PROVISIONING_MODES { get { if (!_EXTRA_PROVISIONING_ALLOWED_PROVISIONING_MODESReady) { _EXTRA_PROVISIONING_ALLOWED_PROVISIONING_MODESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_ALLOWED_PROVISIONING_MODES"); _EXTRA_PROVISIONING_ALLOWED_PROVISIONING_MODESReady = true; } return _EXTRA_PROVISIONING_ALLOWED_PROVISIONING_MODESContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_ALLOWED_PROVISIONING_MODESContent = default;
        private static bool _EXTRA_PROVISIONING_ALLOWED_PROVISIONING_MODESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME { get { if (!_EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAMEReady) { _EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME"); _EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAMEReady = true; } return _EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAMEContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAMEContent = default;
        private static bool _EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_DEVICE_ADMIN_MINIMUM_VERSION_CODE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_MINIMUM_VERSION_CODE { get { if (!_EXTRA_PROVISIONING_DEVICE_ADMIN_MINIMUM_VERSION_CODEReady) { _EXTRA_PROVISIONING_DEVICE_ADMIN_MINIMUM_VERSION_CODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_DEVICE_ADMIN_MINIMUM_VERSION_CODE"); _EXTRA_PROVISIONING_DEVICE_ADMIN_MINIMUM_VERSION_CODEReady = true; } return _EXTRA_PROVISIONING_DEVICE_ADMIN_MINIMUM_VERSION_CODEContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_DEVICE_ADMIN_MINIMUM_VERSION_CODEContent = default;
        private static bool _EXTRA_PROVISIONING_DEVICE_ADMIN_MINIMUM_VERSION_CODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM { get { if (!_EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUMReady) { _EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM"); _EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUMReady = true; } return _EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUMContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUMContent = default;
        private static bool _EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER { get { if (!_EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADERReady) { _EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER"); _EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADERReady = true; } return _EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADERContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADERContent = default;
        private static bool _EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION { get { if (!_EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATIONReady) { _EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION"); _EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATIONReady = true; } return _EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATIONContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATIONContent = default;
        private static bool _EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME { get { if (!_EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAMEReady) { _EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME"); _EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAMEReady = true; } return _EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAMEContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAMEContent = default;
        private static bool _EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUM"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUM { get { if (!_EXTRA_PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUMReady) { _EXTRA_PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUM"); _EXTRA_PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUMReady = true; } return _EXTRA_PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUMContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUMContent = default;
        private static bool _EXTRA_PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_DISCLAIMER_CONTENT"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_DISCLAIMER_CONTENT { get { if (!_EXTRA_PROVISIONING_DISCLAIMER_CONTENTReady) { _EXTRA_PROVISIONING_DISCLAIMER_CONTENTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_DISCLAIMER_CONTENT"); _EXTRA_PROVISIONING_DISCLAIMER_CONTENTReady = true; } return _EXTRA_PROVISIONING_DISCLAIMER_CONTENTContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_DISCLAIMER_CONTENTContent = default;
        private static bool _EXTRA_PROVISIONING_DISCLAIMER_CONTENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_DISCLAIMER_HEADER"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_DISCLAIMER_HEADER { get { if (!_EXTRA_PROVISIONING_DISCLAIMER_HEADERReady) { _EXTRA_PROVISIONING_DISCLAIMER_HEADERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_DISCLAIMER_HEADER"); _EXTRA_PROVISIONING_DISCLAIMER_HEADERReady = true; } return _EXTRA_PROVISIONING_DISCLAIMER_HEADERContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_DISCLAIMER_HEADERContent = default;
        private static bool _EXTRA_PROVISIONING_DISCLAIMER_HEADERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_DISCLAIMERS"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_DISCLAIMERS { get { if (!_EXTRA_PROVISIONING_DISCLAIMERSReady) { _EXTRA_PROVISIONING_DISCLAIMERSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_DISCLAIMERS"); _EXTRA_PROVISIONING_DISCLAIMERSReady = true; } return _EXTRA_PROVISIONING_DISCLAIMERSContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_DISCLAIMERSContent = default;
        private static bool _EXTRA_PROVISIONING_DISCLAIMERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_EMAIL_ADDRESS"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String EXTRA_PROVISIONING_EMAIL_ADDRESS { get { if (!_EXTRA_PROVISIONING_EMAIL_ADDRESSReady) { _EXTRA_PROVISIONING_EMAIL_ADDRESSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_EMAIL_ADDRESS"); _EXTRA_PROVISIONING_EMAIL_ADDRESSReady = true; } return _EXTRA_PROVISIONING_EMAIL_ADDRESSContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_EMAIL_ADDRESSContent = default;
        private static bool _EXTRA_PROVISIONING_EMAIL_ADDRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_IMEI"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_IMEI { get { if (!_EXTRA_PROVISIONING_IMEIReady) { _EXTRA_PROVISIONING_IMEIContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_IMEI"); _EXTRA_PROVISIONING_IMEIReady = true; } return _EXTRA_PROVISIONING_IMEIContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_IMEIContent = default;
        private static bool _EXTRA_PROVISIONING_IMEIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_KEEP_ACCOUNT_ON_MIGRATION"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_KEEP_ACCOUNT_ON_MIGRATION { get { if (!_EXTRA_PROVISIONING_KEEP_ACCOUNT_ON_MIGRATIONReady) { _EXTRA_PROVISIONING_KEEP_ACCOUNT_ON_MIGRATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_KEEP_ACCOUNT_ON_MIGRATION"); _EXTRA_PROVISIONING_KEEP_ACCOUNT_ON_MIGRATIONReady = true; } return _EXTRA_PROVISIONING_KEEP_ACCOUNT_ON_MIGRATIONContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_KEEP_ACCOUNT_ON_MIGRATIONContent = default;
        private static bool _EXTRA_PROVISIONING_KEEP_ACCOUNT_ON_MIGRATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_KEEP_SCREEN_ON"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String EXTRA_PROVISIONING_KEEP_SCREEN_ON { get { if (!_EXTRA_PROVISIONING_KEEP_SCREEN_ONReady) { _EXTRA_PROVISIONING_KEEP_SCREEN_ONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_KEEP_SCREEN_ON"); _EXTRA_PROVISIONING_KEEP_SCREEN_ONReady = true; } return _EXTRA_PROVISIONING_KEEP_SCREEN_ONContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_KEEP_SCREEN_ONContent = default;
        private static bool _EXTRA_PROVISIONING_KEEP_SCREEN_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLED"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLED { get { if (!_EXTRA_PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLEDReady) { _EXTRA_PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLED"); _EXTRA_PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLEDReady = true; } return _EXTRA_PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLEDContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLEDContent = default;
        private static bool _EXTRA_PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_LOCAL_TIME"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_LOCAL_TIME { get { if (!_EXTRA_PROVISIONING_LOCAL_TIMEReady) { _EXTRA_PROVISIONING_LOCAL_TIMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_LOCAL_TIME"); _EXTRA_PROVISIONING_LOCAL_TIMEReady = true; } return _EXTRA_PROVISIONING_LOCAL_TIMEContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_LOCAL_TIMEContent = default;
        private static bool _EXTRA_PROVISIONING_LOCAL_TIMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_LOCALE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_LOCALE { get { if (!_EXTRA_PROVISIONING_LOCALEReady) { _EXTRA_PROVISIONING_LOCALEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_LOCALE"); _EXTRA_PROVISIONING_LOCALEReady = true; } return _EXTRA_PROVISIONING_LOCALEContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_LOCALEContent = default;
        private static bool _EXTRA_PROVISIONING_LOCALEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_LOGO_URI"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String EXTRA_PROVISIONING_LOGO_URI { get { if (!_EXTRA_PROVISIONING_LOGO_URIReady) { _EXTRA_PROVISIONING_LOGO_URIContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_LOGO_URI"); _EXTRA_PROVISIONING_LOGO_URIReady = true; } return _EXTRA_PROVISIONING_LOGO_URIContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_LOGO_URIContent = default;
        private static bool _EXTRA_PROVISIONING_LOGO_URIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_MAIN_COLOR"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String EXTRA_PROVISIONING_MAIN_COLOR { get { if (!_EXTRA_PROVISIONING_MAIN_COLORReady) { _EXTRA_PROVISIONING_MAIN_COLORContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_MAIN_COLOR"); _EXTRA_PROVISIONING_MAIN_COLORReady = true; } return _EXTRA_PROVISIONING_MAIN_COLORContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_MAIN_COLORContent = default;
        private static bool _EXTRA_PROVISIONING_MAIN_COLORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_MODE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_MODE { get { if (!_EXTRA_PROVISIONING_MODEReady) { _EXTRA_PROVISIONING_MODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_MODE"); _EXTRA_PROVISIONING_MODEReady = true; } return _EXTRA_PROVISIONING_MODEContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_MODEContent = default;
        private static bool _EXTRA_PROVISIONING_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_SENSORS_PERMISSION_GRANT_OPT_OUT"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_SENSORS_PERMISSION_GRANT_OPT_OUT { get { if (!_EXTRA_PROVISIONING_SENSORS_PERMISSION_GRANT_OPT_OUTReady) { _EXTRA_PROVISIONING_SENSORS_PERMISSION_GRANT_OPT_OUTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_SENSORS_PERMISSION_GRANT_OPT_OUT"); _EXTRA_PROVISIONING_SENSORS_PERMISSION_GRANT_OPT_OUTReady = true; } return _EXTRA_PROVISIONING_SENSORS_PERMISSION_GRANT_OPT_OUTContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_SENSORS_PERMISSION_GRANT_OPT_OUTContent = default;
        private static bool _EXTRA_PROVISIONING_SENSORS_PERMISSION_GRANT_OPT_OUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_SERIAL_NUMBER"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_SERIAL_NUMBER { get { if (!_EXTRA_PROVISIONING_SERIAL_NUMBERReady) { _EXTRA_PROVISIONING_SERIAL_NUMBERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_SERIAL_NUMBER"); _EXTRA_PROVISIONING_SERIAL_NUMBERReady = true; } return _EXTRA_PROVISIONING_SERIAL_NUMBERContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_SERIAL_NUMBERContent = default;
        private static bool _EXTRA_PROVISIONING_SERIAL_NUMBERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_SHOULD_LAUNCH_RESULT_INTENT"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_SHOULD_LAUNCH_RESULT_INTENT { get { if (!_EXTRA_PROVISIONING_SHOULD_LAUNCH_RESULT_INTENTReady) { _EXTRA_PROVISIONING_SHOULD_LAUNCH_RESULT_INTENTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_SHOULD_LAUNCH_RESULT_INTENT"); _EXTRA_PROVISIONING_SHOULD_LAUNCH_RESULT_INTENTReady = true; } return _EXTRA_PROVISIONING_SHOULD_LAUNCH_RESULT_INTENTContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_SHOULD_LAUNCH_RESULT_INTENTContent = default;
        private static bool _EXTRA_PROVISIONING_SHOULD_LAUNCH_RESULT_INTENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_SKIP_EDUCATION_SCREENS"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_SKIP_EDUCATION_SCREENS { get { if (!_EXTRA_PROVISIONING_SKIP_EDUCATION_SCREENSReady) { _EXTRA_PROVISIONING_SKIP_EDUCATION_SCREENSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_SKIP_EDUCATION_SCREENS"); _EXTRA_PROVISIONING_SKIP_EDUCATION_SCREENSReady = true; } return _EXTRA_PROVISIONING_SKIP_EDUCATION_SCREENSContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_SKIP_EDUCATION_SCREENSContent = default;
        private static bool _EXTRA_PROVISIONING_SKIP_EDUCATION_SCREENSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_SKIP_ENCRYPTION"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_SKIP_ENCRYPTION { get { if (!_EXTRA_PROVISIONING_SKIP_ENCRYPTIONReady) { _EXTRA_PROVISIONING_SKIP_ENCRYPTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_SKIP_ENCRYPTION"); _EXTRA_PROVISIONING_SKIP_ENCRYPTIONReady = true; } return _EXTRA_PROVISIONING_SKIP_ENCRYPTIONContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_SKIP_ENCRYPTIONContent = default;
        private static bool _EXTRA_PROVISIONING_SKIP_ENCRYPTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_SKIP_USER_CONSENT"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String EXTRA_PROVISIONING_SKIP_USER_CONSENT { get { if (!_EXTRA_PROVISIONING_SKIP_USER_CONSENTReady) { _EXTRA_PROVISIONING_SKIP_USER_CONSENTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_SKIP_USER_CONSENT"); _EXTRA_PROVISIONING_SKIP_USER_CONSENTReady = true; } return _EXTRA_PROVISIONING_SKIP_USER_CONSENTContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_SKIP_USER_CONSENTContent = default;
        private static bool _EXTRA_PROVISIONING_SKIP_USER_CONSENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_TIME_ZONE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_TIME_ZONE { get { if (!_EXTRA_PROVISIONING_TIME_ZONEReady) { _EXTRA_PROVISIONING_TIME_ZONEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_TIME_ZONE"); _EXTRA_PROVISIONING_TIME_ZONEReady = true; } return _EXTRA_PROVISIONING_TIME_ZONEContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_TIME_ZONEContent = default;
        private static bool _EXTRA_PROVISIONING_TIME_ZONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_USE_MOBILE_DATA"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_USE_MOBILE_DATA { get { if (!_EXTRA_PROVISIONING_USE_MOBILE_DATAReady) { _EXTRA_PROVISIONING_USE_MOBILE_DATAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_USE_MOBILE_DATA"); _EXTRA_PROVISIONING_USE_MOBILE_DATAReady = true; } return _EXTRA_PROVISIONING_USE_MOBILE_DATAContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_USE_MOBILE_DATAContent = default;
        private static bool _EXTRA_PROVISIONING_USE_MOBILE_DATAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_WIFI_ANONYMOUS_IDENTITY"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_WIFI_ANONYMOUS_IDENTITY { get { if (!_EXTRA_PROVISIONING_WIFI_ANONYMOUS_IDENTITYReady) { _EXTRA_PROVISIONING_WIFI_ANONYMOUS_IDENTITYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_WIFI_ANONYMOUS_IDENTITY"); _EXTRA_PROVISIONING_WIFI_ANONYMOUS_IDENTITYReady = true; } return _EXTRA_PROVISIONING_WIFI_ANONYMOUS_IDENTITYContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_WIFI_ANONYMOUS_IDENTITYContent = default;
        private static bool _EXTRA_PROVISIONING_WIFI_ANONYMOUS_IDENTITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_WIFI_CA_CERTIFICATE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_WIFI_CA_CERTIFICATE { get { if (!_EXTRA_PROVISIONING_WIFI_CA_CERTIFICATEReady) { _EXTRA_PROVISIONING_WIFI_CA_CERTIFICATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_WIFI_CA_CERTIFICATE"); _EXTRA_PROVISIONING_WIFI_CA_CERTIFICATEReady = true; } return _EXTRA_PROVISIONING_WIFI_CA_CERTIFICATEContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_WIFI_CA_CERTIFICATEContent = default;
        private static bool _EXTRA_PROVISIONING_WIFI_CA_CERTIFICATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_WIFI_DOMAIN"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_WIFI_DOMAIN { get { if (!_EXTRA_PROVISIONING_WIFI_DOMAINReady) { _EXTRA_PROVISIONING_WIFI_DOMAINContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_WIFI_DOMAIN"); _EXTRA_PROVISIONING_WIFI_DOMAINReady = true; } return _EXTRA_PROVISIONING_WIFI_DOMAINContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_WIFI_DOMAINContent = default;
        private static bool _EXTRA_PROVISIONING_WIFI_DOMAINReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_WIFI_EAP_METHOD"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_WIFI_EAP_METHOD { get { if (!_EXTRA_PROVISIONING_WIFI_EAP_METHODReady) { _EXTRA_PROVISIONING_WIFI_EAP_METHODContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_WIFI_EAP_METHOD"); _EXTRA_PROVISIONING_WIFI_EAP_METHODReady = true; } return _EXTRA_PROVISIONING_WIFI_EAP_METHODContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_WIFI_EAP_METHODContent = default;
        private static bool _EXTRA_PROVISIONING_WIFI_EAP_METHODReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_WIFI_HIDDEN"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_WIFI_HIDDEN { get { if (!_EXTRA_PROVISIONING_WIFI_HIDDENReady) { _EXTRA_PROVISIONING_WIFI_HIDDENContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_WIFI_HIDDEN"); _EXTRA_PROVISIONING_WIFI_HIDDENReady = true; } return _EXTRA_PROVISIONING_WIFI_HIDDENContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_WIFI_HIDDENContent = default;
        private static bool _EXTRA_PROVISIONING_WIFI_HIDDENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_WIFI_IDENTITY"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_WIFI_IDENTITY { get { if (!_EXTRA_PROVISIONING_WIFI_IDENTITYReady) { _EXTRA_PROVISIONING_WIFI_IDENTITYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_WIFI_IDENTITY"); _EXTRA_PROVISIONING_WIFI_IDENTITYReady = true; } return _EXTRA_PROVISIONING_WIFI_IDENTITYContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_WIFI_IDENTITYContent = default;
        private static bool _EXTRA_PROVISIONING_WIFI_IDENTITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_WIFI_PAC_URL"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_WIFI_PAC_URL { get { if (!_EXTRA_PROVISIONING_WIFI_PAC_URLReady) { _EXTRA_PROVISIONING_WIFI_PAC_URLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_WIFI_PAC_URL"); _EXTRA_PROVISIONING_WIFI_PAC_URLReady = true; } return _EXTRA_PROVISIONING_WIFI_PAC_URLContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_WIFI_PAC_URLContent = default;
        private static bool _EXTRA_PROVISIONING_WIFI_PAC_URLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_WIFI_PASSWORD"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_WIFI_PASSWORD { get { if (!_EXTRA_PROVISIONING_WIFI_PASSWORDReady) { _EXTRA_PROVISIONING_WIFI_PASSWORDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_WIFI_PASSWORD"); _EXTRA_PROVISIONING_WIFI_PASSWORDReady = true; } return _EXTRA_PROVISIONING_WIFI_PASSWORDContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_WIFI_PASSWORDContent = default;
        private static bool _EXTRA_PROVISIONING_WIFI_PASSWORDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_WIFI_PHASE2_AUTH"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_WIFI_PHASE2_AUTH { get { if (!_EXTRA_PROVISIONING_WIFI_PHASE2_AUTHReady) { _EXTRA_PROVISIONING_WIFI_PHASE2_AUTHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_WIFI_PHASE2_AUTH"); _EXTRA_PROVISIONING_WIFI_PHASE2_AUTHReady = true; } return _EXTRA_PROVISIONING_WIFI_PHASE2_AUTHContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_WIFI_PHASE2_AUTHContent = default;
        private static bool _EXTRA_PROVISIONING_WIFI_PHASE2_AUTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_WIFI_PROXY_BYPASS"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_WIFI_PROXY_BYPASS { get { if (!_EXTRA_PROVISIONING_WIFI_PROXY_BYPASSReady) { _EXTRA_PROVISIONING_WIFI_PROXY_BYPASSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_WIFI_PROXY_BYPASS"); _EXTRA_PROVISIONING_WIFI_PROXY_BYPASSReady = true; } return _EXTRA_PROVISIONING_WIFI_PROXY_BYPASSContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_WIFI_PROXY_BYPASSContent = default;
        private static bool _EXTRA_PROVISIONING_WIFI_PROXY_BYPASSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_WIFI_PROXY_HOST"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_WIFI_PROXY_HOST { get { if (!_EXTRA_PROVISIONING_WIFI_PROXY_HOSTReady) { _EXTRA_PROVISIONING_WIFI_PROXY_HOSTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_WIFI_PROXY_HOST"); _EXTRA_PROVISIONING_WIFI_PROXY_HOSTReady = true; } return _EXTRA_PROVISIONING_WIFI_PROXY_HOSTContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_WIFI_PROXY_HOSTContent = default;
        private static bool _EXTRA_PROVISIONING_WIFI_PROXY_HOSTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_WIFI_PROXY_PORT"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_WIFI_PROXY_PORT { get { if (!_EXTRA_PROVISIONING_WIFI_PROXY_PORTReady) { _EXTRA_PROVISIONING_WIFI_PROXY_PORTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_WIFI_PROXY_PORT"); _EXTRA_PROVISIONING_WIFI_PROXY_PORTReady = true; } return _EXTRA_PROVISIONING_WIFI_PROXY_PORTContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_WIFI_PROXY_PORTContent = default;
        private static bool _EXTRA_PROVISIONING_WIFI_PROXY_PORTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_WIFI_SECURITY_TYPE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_WIFI_SECURITY_TYPE { get { if (!_EXTRA_PROVISIONING_WIFI_SECURITY_TYPEReady) { _EXTRA_PROVISIONING_WIFI_SECURITY_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_WIFI_SECURITY_TYPE"); _EXTRA_PROVISIONING_WIFI_SECURITY_TYPEReady = true; } return _EXTRA_PROVISIONING_WIFI_SECURITY_TYPEContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_WIFI_SECURITY_TYPEContent = default;
        private static bool _EXTRA_PROVISIONING_WIFI_SECURITY_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_WIFI_SSID"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_WIFI_SSID { get { if (!_EXTRA_PROVISIONING_WIFI_SSIDReady) { _EXTRA_PROVISIONING_WIFI_SSIDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_WIFI_SSID"); _EXTRA_PROVISIONING_WIFI_SSIDReady = true; } return _EXTRA_PROVISIONING_WIFI_SSIDContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_WIFI_SSIDContent = default;
        private static bool _EXTRA_PROVISIONING_WIFI_SSIDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_WIFI_USER_CERTIFICATE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROVISIONING_WIFI_USER_CERTIFICATE { get { if (!_EXTRA_PROVISIONING_WIFI_USER_CERTIFICATEReady) { _EXTRA_PROVISIONING_WIFI_USER_CERTIFICATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROVISIONING_WIFI_USER_CERTIFICATE"); _EXTRA_PROVISIONING_WIFI_USER_CERTIFICATEReady = true; } return _EXTRA_PROVISIONING_WIFI_USER_CERTIFICATEContent; } }
        private static Java.Lang.String _EXTRA_PROVISIONING_WIFI_USER_CERTIFICATEContent = default;
        private static bool _EXTRA_PROVISIONING_WIFI_USER_CERTIFICATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_RESOURCE_IDS"/>
        /// </summary>
        public static Java.Lang.String EXTRA_RESOURCE_IDS { get { if (!_EXTRA_RESOURCE_IDSReady) { _EXTRA_RESOURCE_IDSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_RESOURCE_IDS"); _EXTRA_RESOURCE_IDSReady = true; } return _EXTRA_RESOURCE_IDSContent; } }
        private static Java.Lang.String _EXTRA_RESOURCE_IDSContent = default;
        private static bool _EXTRA_RESOURCE_IDSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_RESOURCE_TYPE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_RESOURCE_TYPE { get { if (!_EXTRA_RESOURCE_TYPEReady) { _EXTRA_RESOURCE_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_RESOURCE_TYPE"); _EXTRA_RESOURCE_TYPEReady = true; } return _EXTRA_RESOURCE_TYPEContent; } }
        private static Java.Lang.String _EXTRA_RESOURCE_TYPEContent = default;
        private static bool _EXTRA_RESOURCE_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_RESULT_LAUNCH_INTENT"/>
        /// </summary>
        public static Java.Lang.String EXTRA_RESULT_LAUNCH_INTENT { get { if (!_EXTRA_RESULT_LAUNCH_INTENTReady) { _EXTRA_RESULT_LAUNCH_INTENTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_RESULT_LAUNCH_INTENT"); _EXTRA_RESULT_LAUNCH_INTENTReady = true; } return _EXTRA_RESULT_LAUNCH_INTENTContent; } }
        private static Java.Lang.String _EXTRA_RESULT_LAUNCH_INTENTContent = default;
        private static bool _EXTRA_RESULT_LAUNCH_INTENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#MIME_TYPE_PROVISIONING_NFC"/>
        /// </summary>
        public static Java.Lang.String MIME_TYPE_PROVISIONING_NFC { get { if (!_MIME_TYPE_PROVISIONING_NFCReady) { _MIME_TYPE_PROVISIONING_NFCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIME_TYPE_PROVISIONING_NFC"); _MIME_TYPE_PROVISIONING_NFCReady = true; } return _MIME_TYPE_PROVISIONING_NFCContent; } }
        private static Java.Lang.String _MIME_TYPE_PROVISIONING_NFCContent = default;
        private static bool _MIME_TYPE_PROVISIONING_NFCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#POLICY_DISABLE_CAMERA"/>
        /// </summary>
        public static Java.Lang.String POLICY_DISABLE_CAMERA { get { if (!_POLICY_DISABLE_CAMERAReady) { _POLICY_DISABLE_CAMERAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "POLICY_DISABLE_CAMERA"); _POLICY_DISABLE_CAMERAReady = true; } return _POLICY_DISABLE_CAMERAContent; } }
        private static Java.Lang.String _POLICY_DISABLE_CAMERAContent = default;
        private static bool _POLICY_DISABLE_CAMERAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#POLICY_DISABLE_SCREEN_CAPTURE"/>
        /// </summary>
        public static Java.Lang.String POLICY_DISABLE_SCREEN_CAPTURE { get { if (!_POLICY_DISABLE_SCREEN_CAPTUREReady) { _POLICY_DISABLE_SCREEN_CAPTUREContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "POLICY_DISABLE_SCREEN_CAPTURE"); _POLICY_DISABLE_SCREEN_CAPTUREReady = true; } return _POLICY_DISABLE_SCREEN_CAPTUREContent; } }
        private static Java.Lang.String _POLICY_DISABLE_SCREEN_CAPTUREContent = default;
        private static bool _POLICY_DISABLE_SCREEN_CAPTUREReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isMtePolicyEnforced()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public static bool IsMtePolicyEnforced()
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isMtePolicyEnforced", "()Z");
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getParentProfileInstance(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="Android.App.Admin.DevicePolicyManager"/></returns>
        public Android.App.Admin.DevicePolicyManager GetParentProfileInstance(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<Android.App.Admin.DevicePolicyManager>("getParentProfileInstance", "(Landroid/content/ComponentName;)Landroid/app/admin/DevicePolicyManager;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getResources()"/>
        /// </summary>
        /// <returns><see cref="Android.App.Admin.DevicePolicyResourcesManager"/></returns>
        public Android.App.Admin.DevicePolicyResourcesManager GetResources()
        {
            return IExecuteWithSignature<Android.App.Admin.DevicePolicyResourcesManager>("getResources", "()Landroid/app/admin/DevicePolicyResourcesManager;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getFactoryResetProtectionPolicy(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="Android.App.Admin.FactoryResetProtectionPolicy"/></returns>
        public Android.App.Admin.FactoryResetProtectionPolicy GetFactoryResetProtectionPolicy(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<Android.App.Admin.FactoryResetProtectionPolicy>("getFactoryResetProtectionPolicy", "(Landroid/content/ComponentName;)Landroid/app/admin/FactoryResetProtectionPolicy;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getManagedSubscriptionsPolicy()"/>
        /// </summary>
        /// <returns><see cref="Android.App.Admin.ManagedSubscriptionsPolicy"/></returns>
        public Android.App.Admin.ManagedSubscriptionsPolicy GetManagedSubscriptionsPolicy()
        {
            return IExecuteWithSignature<Android.App.Admin.ManagedSubscriptionsPolicy>("getManagedSubscriptionsPolicy", "()Landroid/app/admin/ManagedSubscriptionsPolicy;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getCredentialManagerPolicy()"/>
        /// </summary>
        /// <returns><see cref="Android.App.Admin.PackagePolicy"/></returns>
        public Android.App.Admin.PackagePolicy GetCredentialManagerPolicy()
        {
            return IExecuteWithSignature<Android.App.Admin.PackagePolicy>("getCredentialManagerPolicy", "()Landroid/app/admin/PackagePolicy;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getManagedProfileCallerIdAccessPolicy()"/>
        /// </summary>
        /// <returns><see cref="Android.App.Admin.PackagePolicy"/></returns>
        public Android.App.Admin.PackagePolicy GetManagedProfileCallerIdAccessPolicy()
        {
            return IExecuteWithSignature<Android.App.Admin.PackagePolicy>("getManagedProfileCallerIdAccessPolicy", "()Landroid/app/admin/PackagePolicy;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getManagedProfileContactsAccessPolicy()"/>
        /// </summary>
        /// <returns><see cref="Android.App.Admin.PackagePolicy"/></returns>
        public Android.App.Admin.PackagePolicy GetManagedProfileContactsAccessPolicy()
        {
            return IExecuteWithSignature<Android.App.Admin.PackagePolicy>("getManagedProfileContactsAccessPolicy", "()Landroid/app/admin/PackagePolicy;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPendingSystemUpdate(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="Android.App.Admin.SystemUpdateInfo"/></returns>
        public Android.App.Admin.SystemUpdateInfo GetPendingSystemUpdate(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<Android.App.Admin.SystemUpdateInfo>("getPendingSystemUpdate", "(Landroid/content/ComponentName;)Landroid/app/admin/SystemUpdateInfo;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getSystemUpdatePolicy()"/>
        /// </summary>
        /// <returns><see cref="Android.App.Admin.SystemUpdatePolicy"/></returns>
        public Android.App.Admin.SystemUpdatePolicy GetSystemUpdatePolicy()
        {
            return IExecuteWithSignature<Android.App.Admin.SystemUpdatePolicy>("getSystemUpdatePolicy", "()Landroid/app/admin/SystemUpdatePolicy;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getWifiSsidPolicy()"/>
        /// </summary>
        /// <returns><see cref="Android.App.Admin.WifiSsidPolicy"/></returns>
        public Android.App.Admin.WifiSsidPolicy GetWifiSsidPolicy()
        {
            return IExecuteWithSignature<Android.App.Admin.WifiSsidPolicy>("getWifiSsidPolicy", "()Landroid/app/admin/WifiSsidPolicy;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#createAdminSupportIntent(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Content.Intent"/></returns>
        public Android.Content.Intent CreateAdminSupportIntent(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Android.Content.Intent>("createAdminSupportIntent", "(Ljava/lang/String;)Landroid/content/Intent;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getApplicationRestrictions(android.content.ComponentName,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Os.Bundle"/></returns>
        public Android.Os.Bundle GetApplicationRestrictions(Android.Content.ComponentName arg0, Java.Lang.String arg1)
        {
            return IExecute<Android.Os.Bundle>("getApplicationRestrictions", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getUserRestrictions(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="Android.Os.Bundle"/></returns>
        public Android.Os.Bundle GetUserRestrictions(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<Android.Os.Bundle>("getUserRestrictions", "(Landroid/content/ComponentName;)Landroid/os/Bundle;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getUserRestrictionsGlobally()"/>
        /// </summary>
        /// <returns><see cref="Android.Os.Bundle"/></returns>
        public Android.Os.Bundle GetUserRestrictionsGlobally()
        {
            return IExecuteWithSignature<Android.Os.Bundle>("getUserRestrictionsGlobally", "()Landroid/os/Bundle;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getTransferOwnershipBundle()"/>
        /// </summary>
        /// <returns><see cref="Android.Os.PersistableBundle"/></returns>
        public Android.Os.PersistableBundle GetTransferOwnershipBundle()
        {
            return IExecuteWithSignature<Android.Os.PersistableBundle>("getTransferOwnershipBundle", "()Landroid/os/PersistableBundle;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#createAndManageUser(android.content.ComponentName,java.lang.String,android.content.ComponentName,android.os.PersistableBundle,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg3"><see cref="Android.Os.PersistableBundle"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <returns><see cref="Android.Os.UserHandle"/></returns>
        public Android.Os.UserHandle CreateAndManageUser(Android.Content.ComponentName arg0, Java.Lang.String arg1, Android.Content.ComponentName arg2, Android.Os.PersistableBundle arg3, int arg4)
        {
            return IExecute<Android.Os.UserHandle>("createAndManageUser", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#generateKeyPair(android.content.ComponentName,java.lang.String,android.security.keystore.KeyGenParameterSpec,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Android.Security.Keystore.KeyGenParameterSpec"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="Android.Security.AttestedKeyPair"/></returns>
        public Android.Security.AttestedKeyPair GenerateKeyPair(Android.Content.ComponentName arg0, Java.Lang.String arg1, Android.Security.Keystore.KeyGenParameterSpec arg2, int arg3)
        {
            return IExecute<Android.Security.AttestedKeyPair>("generateKeyPair", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#addCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool AddCrossProfileWidgetProvider(Android.Content.ComponentName arg0, Java.Lang.String arg1)
        {
            return IExecute<bool>("addCrossProfileWidgetProvider", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#bindDeviceAdminServiceAsUser(android.content.ComponentName,android.content.Intent,android.content.ServiceConnection,android.content.Context.BindServiceFlags,android.os.UserHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Android.Content.Intent"/></param>
        /// <param name="arg2"><see cref="Android.Content.ServiceConnection"/></param>
        /// <param name="arg3"><see cref="Android.Content.Context.BindServiceFlags"/></param>
        /// <param name="arg4"><see cref="Android.Os.UserHandle"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool BindDeviceAdminServiceAsUser(Android.Content.ComponentName arg0, Android.Content.Intent arg1, Android.Content.ServiceConnection arg2, Android.Content.Context.BindServiceFlags arg3, Android.Os.UserHandle arg4)
        {
            return IExecute<bool>("bindDeviceAdminServiceAsUser", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#bindDeviceAdminServiceAsUser(android.content.ComponentName,android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Android.Content.Intent"/></param>
        /// <param name="arg2"><see cref="Android.Content.ServiceConnection"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="Android.Os.UserHandle"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool BindDeviceAdminServiceAsUser(Android.Content.ComponentName arg0, Android.Content.Intent arg1, Android.Content.ServiceConnection arg2, int arg3, Android.Os.UserHandle arg4)
        {
            return IExecute<bool>("bindDeviceAdminServiceAsUser", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#canAdminGrantSensorsPermissions()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool CanAdminGrantSensorsPermissions()
        {
            return IExecuteWithSignature<bool>("canAdminGrantSensorsPermissions", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#canUsbDataSignalingBeDisabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool CanUsbDataSignalingBeDisabled()
        {
            return IExecuteWithSignature<bool>("canUsbDataSignalingBeDisabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#clearResetPasswordToken(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ClearResetPasswordToken(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<bool>("clearResetPasswordToken", "(Landroid/content/ComponentName;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getAutoTimeEnabled(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool GetAutoTimeEnabled(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<bool>("getAutoTimeEnabled", "(Landroid/content/ComponentName;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getAutoTimeRequired()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool GetAutoTimeRequired()
        {
            return IExecuteWithSignature<bool>("getAutoTimeRequired", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getAutoTimeZoneEnabled(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool GetAutoTimeZoneEnabled(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<bool>("getAutoTimeZoneEnabled", "(Landroid/content/ComponentName;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getBluetoothContactSharingDisabled(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool GetBluetoothContactSharingDisabled(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<bool>("getBluetoothContactSharingDisabled", "(Landroid/content/ComponentName;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getCameraDisabled(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool GetCameraDisabled(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<bool>("getCameraDisabled", "(Landroid/content/ComponentName;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getCrossProfileCallerIdDisabled(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool GetCrossProfileCallerIdDisabled(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<bool>("getCrossProfileCallerIdDisabled", "(Landroid/content/ComponentName;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getCrossProfileContactsSearchDisabled(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool GetCrossProfileContactsSearchDisabled(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<bool>("getCrossProfileContactsSearchDisabled", "(Landroid/content/ComponentName;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getScreenCaptureDisabled(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool GetScreenCaptureDisabled(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<bool>("getScreenCaptureDisabled", "(Landroid/content/ComponentName;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getStorageEncryption(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool GetStorageEncryption(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<bool>("getStorageEncryption", "(Landroid/content/ComponentName;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#grantKeyPairToApp(android.content.ComponentName,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool GrantKeyPairToApp(Android.Content.ComponentName arg0, Java.Lang.String arg1, Java.Lang.String arg2)
        {
            return IExecute<bool>("grantKeyPairToApp", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#grantKeyPairToWifiAuth(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool GrantKeyPairToWifiAuth(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<bool>("grantKeyPairToWifiAuth", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#hasCaCertInstalled(android.content.ComponentName,byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasCaCertInstalled(Android.Content.ComponentName arg0, byte[] arg1)
        {
            return IExecute<bool>("hasCaCertInstalled", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#hasGrantedPolicy(android.content.ComponentName,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasGrantedPolicy(Android.Content.ComponentName arg0, int arg1)
        {
            return IExecute<bool>("hasGrantedPolicy", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#hasKeyPair(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasKeyPair(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<bool>("hasKeyPair", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#hasLockdownAdminConfiguredNetworks(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasLockdownAdminConfiguredNetworks(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<bool>("hasLockdownAdminConfiguredNetworks", "(Landroid/content/ComponentName;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#installCaCert(android.content.ComponentName,byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool InstallCaCert(Android.Content.ComponentName arg0, byte[] arg1)
        {
            return IExecute<bool>("installCaCert", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#installExistingPackage(android.content.ComponentName,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool InstallExistingPackage(Android.Content.ComponentName arg0, Java.Lang.String arg1)
        {
            return IExecute<bool>("installExistingPackage", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#installKeyPair(android.content.ComponentName,java.security.PrivateKey,java.security.cert.Certificate,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Security.PrivateKey"/></param>
        /// <param name="arg2"><see cref="Java.Security.Cert.Certificate"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool InstallKeyPair(Android.Content.ComponentName arg0, Java.Security.PrivateKey arg1, Java.Security.Cert.Certificate arg2, Java.Lang.String arg3)
        {
            return IExecute<bool>("installKeyPair", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#installKeyPair(android.content.ComponentName,java.security.PrivateKey,java.security.cert.Certificate[],java.lang.String,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Security.PrivateKey"/></param>
        /// <param name="arg2"><see cref="Java.Security.Cert.Certificate"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <param name="arg4"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool InstallKeyPair(Android.Content.ComponentName arg0, Java.Security.PrivateKey arg1, Java.Security.Cert.Certificate[] arg2, Java.Lang.String arg3, bool arg4)
        {
            return IExecute<bool>("installKeyPair", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#installKeyPair(android.content.ComponentName,java.security.PrivateKey,java.security.cert.Certificate[],java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Security.PrivateKey"/></param>
        /// <param name="arg2"><see cref="Java.Security.Cert.Certificate"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool InstallKeyPair(Android.Content.ComponentName arg0, Java.Security.PrivateKey arg1, Java.Security.Cert.Certificate[] arg2, Java.Lang.String arg3, int arg4)
        {
            return IExecute<bool>("installKeyPair", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isActivePasswordSufficient()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsActivePasswordSufficient()
        {
            return IExecuteWithSignature<bool>("isActivePasswordSufficient", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isActivePasswordSufficientForDeviceRequirement()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsActivePasswordSufficientForDeviceRequirement()
        {
            return IExecuteWithSignature<bool>("isActivePasswordSufficientForDeviceRequirement", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isAdminActive(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsAdminActive(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<bool>("isAdminActive", "(Landroid/content/ComponentName;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isAffiliatedUser()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAffiliatedUser()
        {
            return IExecuteWithSignature<bool>("isAffiliatedUser", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isAlwaysOnVpnLockdownEnabled(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsAlwaysOnVpnLockdownEnabled(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<bool>("isAlwaysOnVpnLockdownEnabled", "(Landroid/content/ComponentName;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isApplicationHidden(android.content.ComponentName,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsApplicationHidden(Android.Content.ComponentName arg0, Java.Lang.String arg1)
        {
            return IExecute<bool>("isApplicationHidden", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isBackupServiceEnabled(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsBackupServiceEnabled(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<bool>("isBackupServiceEnabled", "(Landroid/content/ComponentName;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isCallerApplicationRestrictionsManagingPackage()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool IsCallerApplicationRestrictionsManagingPackage()
        {
            return IExecuteWithSignature<bool>("isCallerApplicationRestrictionsManagingPackage", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isCommonCriteriaModeEnabled(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsCommonCriteriaModeEnabled(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<bool>("isCommonCriteriaModeEnabled", "(Landroid/content/ComponentName;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isComplianceAcknowledgementRequired()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsComplianceAcknowledgementRequired()
        {
            return IExecuteWithSignature<bool>("isComplianceAcknowledgementRequired", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isDeviceFinanced()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDeviceFinanced()
        {
            return IExecuteWithSignature<bool>("isDeviceFinanced", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isDeviceIdAttestationSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDeviceIdAttestationSupported()
        {
            return IExecuteWithSignature<bool>("isDeviceIdAttestationSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isDeviceOwnerApp(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsDeviceOwnerApp(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<bool>("isDeviceOwnerApp", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isEphemeralUser(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsEphemeralUser(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<bool>("isEphemeralUser", "(Landroid/content/ComponentName;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isKeyPairGrantedToWifiAuth(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsKeyPairGrantedToWifiAuth(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<bool>("isKeyPairGrantedToWifiAuth", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isLockTaskPermitted(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsLockTaskPermitted(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<bool>("isLockTaskPermitted", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isLogoutEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsLogoutEnabled()
        {
            return IExecuteWithSignature<bool>("isLogoutEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isManagedProfile(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsManagedProfile(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<bool>("isManagedProfile", "(Landroid/content/ComponentName;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isMasterVolumeMuted(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsMasterVolumeMuted(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<bool>("isMasterVolumeMuted", "(Landroid/content/ComponentName;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isNetworkLoggingEnabled(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsNetworkLoggingEnabled(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<bool>("isNetworkLoggingEnabled", "(Landroid/content/ComponentName;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isOrganizationOwnedDeviceWithManagedProfile()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsOrganizationOwnedDeviceWithManagedProfile()
        {
            return IExecuteWithSignature<bool>("isOrganizationOwnedDeviceWithManagedProfile", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isOverrideApnEnabled(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsOverrideApnEnabled(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<bool>("isOverrideApnEnabled", "(Landroid/content/ComponentName;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isPackageSuspended(android.content.ComponentName,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public bool IsPackageSuspended(Android.Content.ComponentName arg0, Java.Lang.String arg1)
        {
            return IExecute<bool>("isPackageSuspended", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isPreferentialNetworkServiceEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsPreferentialNetworkServiceEnabled()
        {
            return IExecuteWithSignature<bool>("isPreferentialNetworkServiceEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isProfileOwnerApp(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsProfileOwnerApp(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<bool>("isProfileOwnerApp", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isProvisioningAllowed(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsProvisioningAllowed(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<bool>("isProvisioningAllowed", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isResetPasswordTokenActive(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsResetPasswordTokenActive(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<bool>("isResetPasswordTokenActive", "(Landroid/content/ComponentName;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isSafeOperation(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsSafeOperation(int arg0)
        {
            return IExecuteWithSignature<bool>("isSafeOperation", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isSecurityLoggingEnabled(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsSecurityLoggingEnabled(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<bool>("isSecurityLoggingEnabled", "(Landroid/content/ComponentName;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isStatusBarDisabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsStatusBarDisabled()
        {
            return IExecuteWithSignature<bool>("isStatusBarDisabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isUninstallBlocked(android.content.ComponentName,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsUninstallBlocked(Android.Content.ComponentName arg0, Java.Lang.String arg1)
        {
            return IExecute<bool>("isUninstallBlocked", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isUniqueDeviceAttestationSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsUniqueDeviceAttestationSupported()
        {
            return IExecuteWithSignature<bool>("isUniqueDeviceAttestationSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isUsbDataSignalingEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsUsbDataSignalingEnabled()
        {
            return IExecuteWithSignature<bool>("isUsbDataSignalingEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isUsingUnifiedPassword(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsUsingUnifiedPassword(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<bool>("isUsingUnifiedPassword", "(Landroid/content/ComponentName;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#removeCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RemoveCrossProfileWidgetProvider(Android.Content.ComponentName arg0, Java.Lang.String arg1)
        {
            return IExecute<bool>("removeCrossProfileWidgetProvider", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#removeKeyPair(android.content.ComponentName,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RemoveKeyPair(Android.Content.ComponentName arg0, Java.Lang.String arg1)
        {
            return IExecute<bool>("removeKeyPair", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#removeOverrideApn(android.content.ComponentName,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RemoveOverrideApn(Android.Content.ComponentName arg0, int arg1)
        {
            return IExecute<bool>("removeOverrideApn", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#removeUser(android.content.ComponentName,android.os.UserHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Android.Os.UserHandle"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RemoveUser(Android.Content.ComponentName arg0, Android.Os.UserHandle arg1)
        {
            return IExecute<bool>("removeUser", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#requestBugreport(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RequestBugreport(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<bool>("requestBugreport", "(Landroid/content/ComponentName;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#resetPassword(java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool ResetPassword(Java.Lang.String arg0, int arg1)
        {
            return IExecute<bool>("resetPassword", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#resetPasswordWithToken(android.content.ComponentName,java.lang.String,byte[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="byte"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ResetPasswordWithToken(Android.Content.ComponentName arg0, Java.Lang.String arg1, byte[] arg2, int arg3)
        {
            return IExecute<bool>("resetPasswordWithToken", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#revokeKeyPairFromApp(android.content.ComponentName,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RevokeKeyPairFromApp(Android.Content.ComponentName arg0, Java.Lang.String arg1, Java.Lang.String arg2)
        {
            return IExecute<bool>("revokeKeyPairFromApp", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#revokeKeyPairFromWifiAuth(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RevokeKeyPairFromWifiAuth(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<bool>("revokeKeyPairFromWifiAuth", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setApplicationHidden(android.content.ComponentName,java.lang.String,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetApplicationHidden(Android.Content.ComponentName arg0, Java.Lang.String arg1, bool arg2)
        {
            return IExecute<bool>("setApplicationHidden", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setKeyguardDisabled(android.content.ComponentName,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetKeyguardDisabled(Android.Content.ComponentName arg0, bool arg1)
        {
            return IExecute<bool>("setKeyguardDisabled", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setKeyPairCertificate(android.content.ComponentName,java.lang.String,java.util.List,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Util.List"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetKeyPairCertificate(Android.Content.ComponentName arg0, Java.Lang.String arg1, Java.Util.List<Java.Security.Cert.Certificate> arg2, bool arg3)
        {
            return IExecute<bool>("setKeyPairCertificate", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetPermissionGrantState(Android.Content.ComponentName arg0, Java.Lang.String arg1, Java.Lang.String arg2, int arg3)
        {
            return IExecute<bool>("setPermissionGrantState", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPermittedAccessibilityServices(android.content.ComponentName,java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Util.List"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetPermittedAccessibilityServices(Android.Content.ComponentName arg0, Java.Util.List<Java.Lang.String> arg1)
        {
            return IExecute<bool>("setPermittedAccessibilityServices", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPermittedCrossProfileNotificationListeners(android.content.ComponentName,java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Util.List"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetPermittedCrossProfileNotificationListeners(Android.Content.ComponentName arg0, Java.Util.List<Java.Lang.String> arg1)
        {
            return IExecute<bool>("setPermittedCrossProfileNotificationListeners", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPermittedInputMethods(android.content.ComponentName,java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Util.List"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetPermittedInputMethods(Android.Content.ComponentName arg0, Java.Util.List<Java.Lang.String> arg1)
        {
            return IExecute<bool>("setPermittedInputMethods", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setResetPasswordToken(android.content.ComponentName,byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetResetPasswordToken(Android.Content.ComponentName arg0, byte[] arg1)
        {
            return IExecute<bool>("setResetPasswordToken", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setStatusBarDisabled(android.content.ComponentName,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetStatusBarDisabled(Android.Content.ComponentName arg0, bool arg1)
        {
            return IExecute<bool>("setStatusBarDisabled", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setTime(android.content.ComponentName,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetTime(Android.Content.ComponentName arg0, long arg1)
        {
            return IExecute<bool>("setTime", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setTimeZone(android.content.ComponentName,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetTimeZone(Android.Content.ComponentName arg0, Java.Lang.String arg1)
        {
            return IExecute<bool>("setTimeZone", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#switchUser(android.content.ComponentName,android.os.UserHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Android.Os.UserHandle"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SwitchUser(Android.Content.ComponentName arg0, Android.Os.UserHandle arg1)
        {
            return IExecute<bool>("switchUser", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#updateOverrideApn(android.content.ComponentName,int,android.telephony.data.ApnSetting)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Telephony.Data.ApnSetting"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool UpdateOverrideApn(Android.Content.ComponentName arg0, int arg1, Android.Telephony.Data.ApnSetting arg2)
        {
            return IExecute<bool>("updateOverrideApn", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#addOverrideApn(android.content.ComponentName,android.telephony.data.ApnSetting)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Android.Telephony.Data.ApnSetting"/></param>
        /// <returns><see cref="int"/></returns>
        public int AddOverrideApn(Android.Content.ComponentName arg0, Android.Telephony.Data.ApnSetting arg1)
        {
            return IExecute<int>("addOverrideApn", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#enableSystemApp(android.content.ComponentName,android.content.Intent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Android.Content.Intent"/></param>
        /// <returns><see cref="int"/></returns>
        public int EnableSystemApp(Android.Content.ComponentName arg0, Android.Content.Intent arg1)
        {
            return IExecute<int>("enableSystemApp", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getContentProtectionPolicy(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetContentProtectionPolicy(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<int>("getContentProtectionPolicy", "(Landroid/content/ComponentName;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getCurrentFailedPasswordAttempts()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetCurrentFailedPasswordAttempts()
        {
            return IExecuteWithSignature<int>("getCurrentFailedPasswordAttempts", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getGlobalPrivateDnsMode(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetGlobalPrivateDnsMode(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<int>("getGlobalPrivateDnsMode", "(Landroid/content/ComponentName;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getKeyguardDisabledFeatures(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetKeyguardDisabledFeatures(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<int>("getKeyguardDisabledFeatures", "(Landroid/content/ComponentName;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getLockTaskFeatures(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetLockTaskFeatures(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<int>("getLockTaskFeatures", "(Landroid/content/ComponentName;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getMaximumFailedPasswordsForWipe(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetMaximumFailedPasswordsForWipe(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<int>("getMaximumFailedPasswordsForWipe", "(Landroid/content/ComponentName;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getMinimumRequiredWifiSecurityLevel()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMinimumRequiredWifiSecurityLevel()
        {
            return IExecuteWithSignature<int>("getMinimumRequiredWifiSecurityLevel", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getMtePolicy()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMtePolicy()
        {
            return IExecuteWithSignature<int>("getMtePolicy", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getNearbyAppStreamingPolicy()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetNearbyAppStreamingPolicy()
        {
            return IExecuteWithSignature<int>("getNearbyAppStreamingPolicy", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getNearbyNotificationStreamingPolicy()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetNearbyNotificationStreamingPolicy()
        {
            return IExecuteWithSignature<int>("getNearbyNotificationStreamingPolicy", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getOrganizationColor(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetOrganizationColor(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<int>("getOrganizationColor", "(Landroid/content/ComponentName;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordComplexity()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetPasswordComplexity()
        {
            return IExecuteWithSignature<int>("getPasswordComplexity", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordHistoryLength(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetPasswordHistoryLength(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<int>("getPasswordHistoryLength", "(Landroid/content/ComponentName;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordMaximumLength(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetPasswordMaximumLength(int arg0)
        {
            return IExecuteWithSignature<int>("getPasswordMaximumLength", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordMinimumLength(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetPasswordMinimumLength(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<int>("getPasswordMinimumLength", "(Landroid/content/ComponentName;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordMinimumLetters(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetPasswordMinimumLetters(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<int>("getPasswordMinimumLetters", "(Landroid/content/ComponentName;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordMinimumLowerCase(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetPasswordMinimumLowerCase(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<int>("getPasswordMinimumLowerCase", "(Landroid/content/ComponentName;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordMinimumNonLetter(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetPasswordMinimumNonLetter(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<int>("getPasswordMinimumNonLetter", "(Landroid/content/ComponentName;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordMinimumNumeric(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetPasswordMinimumNumeric(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<int>("getPasswordMinimumNumeric", "(Landroid/content/ComponentName;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordMinimumSymbols(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetPasswordMinimumSymbols(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<int>("getPasswordMinimumSymbols", "(Landroid/content/ComponentName;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordMinimumUpperCase(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetPasswordMinimumUpperCase(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<int>("getPasswordMinimumUpperCase", "(Landroid/content/ComponentName;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordQuality(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetPasswordQuality(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<int>("getPasswordQuality", "(Landroid/content/ComponentName;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetPermissionGrantState(Android.Content.ComponentName arg0, Java.Lang.String arg1, Java.Lang.String arg2)
        {
            return IExecute<int>("getPermissionGrantState", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPermissionPolicy(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetPermissionPolicy(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<int>("getPermissionPolicy", "(Landroid/content/ComponentName;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPersonalAppsSuspendedReasons(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetPersonalAppsSuspendedReasons(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<int>("getPersonalAppsSuspendedReasons", "(Landroid/content/ComponentName;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getRequiredPasswordComplexity()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetRequiredPasswordComplexity()
        {
            return IExecuteWithSignature<int>("getRequiredPasswordComplexity", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getStorageEncryptionStatus()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetStorageEncryptionStatus()
        {
            return IExecuteWithSignature<int>("getStorageEncryptionStatus", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#logoutUser(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="int"/></returns>
        public int LogoutUser(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<int>("logoutUser", "(Landroid/content/ComponentName;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setGlobalPrivateDnsModeOpportunistic(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="int"/></returns>
        public int SetGlobalPrivateDnsModeOpportunistic(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<int>("setGlobalPrivateDnsModeOpportunistic", "(Landroid/content/ComponentName;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setGlobalPrivateDnsModeSpecifiedHost(android.content.ComponentName,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public int SetGlobalPrivateDnsModeSpecifiedHost(Android.Content.ComponentName arg0, Java.Lang.String arg1)
        {
            return IExecute<int>("setGlobalPrivateDnsModeSpecifiedHost", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setStorageEncryption(android.content.ComponentName,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int SetStorageEncryption(Android.Content.ComponentName arg0, bool arg1)
        {
            return IExecute<int>("setStorageEncryption", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#startUserInBackground(android.content.ComponentName,android.os.UserHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Android.Os.UserHandle"/></param>
        /// <returns><see cref="int"/></returns>
        public int StartUserInBackground(Android.Content.ComponentName arg0, Android.Os.UserHandle arg1)
        {
            return IExecute<int>("startUserInBackground", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#stopUser(android.content.ComponentName,android.os.UserHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Android.Os.UserHandle"/></param>
        /// <returns><see cref="int"/></returns>
        public int StopUser(Android.Content.ComponentName arg0, Android.Os.UserHandle arg1)
        {
            return IExecute<int>("stopUser", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getDeviceOwnerLockScreenInfo()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetDeviceOwnerLockScreenInfo()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getDeviceOwnerLockScreenInfo", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getEndUserSessionMessage(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetEndUserSessionMessage(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getEndUserSessionMessage", "(Landroid/content/ComponentName;)Ljava/lang/CharSequence;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getLongSupportMessage(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetLongSupportMessage(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getLongSupportMessage", "(Landroid/content/ComponentName;)Ljava/lang/CharSequence;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getOrganizationName(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetOrganizationName(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getOrganizationName", "(Landroid/content/ComponentName;)Ljava/lang/CharSequence;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getShortSupportMessage(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetShortSupportMessage(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getShortSupportMessage", "(Landroid/content/ComponentName;)Ljava/lang/CharSequence;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getStartUserSessionMessage(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetStartUserSessionMessage(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getStartUserSessionMessage", "(Landroid/content/ComponentName;)Ljava/lang/CharSequence;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getAlwaysOnVpnPackage(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetAlwaysOnVpnPackage(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getAlwaysOnVpnPackage", "(Landroid/content/ComponentName;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getApplicationRestrictionsManagingPackage(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        [global::System.Obsolete()]
        public Java.Lang.String GetApplicationRestrictionsManagingPackage(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getApplicationRestrictionsManagingPackage", "(Landroid/content/ComponentName;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getCertInstallerPackage(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        /// <exception cref="Java.Lang.SecurityException"/>
        [global::System.Obsolete()]
        public Java.Lang.String GetCertInstallerPackage(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getCertInstallerPackage", "(Landroid/content/ComponentName;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getDevicePolicyManagementRoleHolderPackage()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetDevicePolicyManagementRoleHolderPackage()
        {
            return IExecuteWithSignature<Java.Lang.String>("getDevicePolicyManagementRoleHolderPackage", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getEnrollmentSpecificId()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetEnrollmentSpecificId()
        {
            return IExecuteWithSignature<Java.Lang.String>("getEnrollmentSpecificId", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getGlobalPrivateDnsHost(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetGlobalPrivateDnsHost(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getGlobalPrivateDnsHost", "(Landroid/content/ComponentName;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getWifiMacAddress(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetWifiMacAddress(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getWifiMacAddress", "(Landroid/content/ComponentName;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getAccountTypesWithManagementDisabled()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String[] GetAccountTypesWithManagementDisabled()
        {
            return IExecuteWithSignatureArray<Java.Lang.String>("getAccountTypesWithManagementDisabled", "()[Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getLockTaskPackages(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String[] GetLockTaskPackages(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignatureArray<Java.Lang.String>("getLockTaskPackages", "(Landroid/content/ComponentName;)[Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPackagesSuspended(android.content.ComponentName,java.lang.String[],boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String[] SetPackagesSuspended(Android.Content.ComponentName arg0, Java.Lang.String[] arg1, bool arg2)
        {
            return IExecuteArray<Java.Lang.String>("setPackagesSuspended", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#retrieveNetworkLogs(android.content.ComponentName,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.App.Admin.NetworkEvent> RetrieveNetworkLogs(Android.Content.ComponentName arg0, long arg1)
        {
            return IExecute<Java.Util.List<Android.App.Admin.NetworkEvent>>("retrieveNetworkLogs", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPreferentialNetworkServiceConfigs()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.App.Admin.PreferentialNetworkServiceConfig> GetPreferentialNetworkServiceConfigs()
        {
            return IExecuteWithSignature<Java.Util.List<Android.App.Admin.PreferentialNetworkServiceConfig>>("getPreferentialNetworkServiceConfigs", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#retrievePreRebootSecurityLogs(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.App.Admin.SecurityLog.SecurityEvent> RetrievePreRebootSecurityLogs(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Android.App.Admin.SecurityLog.SecurityEvent>>("retrievePreRebootSecurityLogs", "(Landroid/content/ComponentName;)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#retrieveSecurityLogs(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.App.Admin.SecurityLog.SecurityEvent> RetrieveSecurityLogs(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Android.App.Admin.SecurityLog.SecurityEvent>>("retrieveSecurityLogs", "(Landroid/content/ComponentName;)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getActiveAdmins()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Content.ComponentName> GetActiveAdmins()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Content.ComponentName>>("getActiveAdmins", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Os.PersistableBundle> GetTrustAgentConfiguration(Android.Content.ComponentName arg0, Android.Content.ComponentName arg1)
        {
            return IExecute<Java.Util.List<Android.Os.PersistableBundle>>("getTrustAgentConfiguration", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getBindDeviceAdminTargetUsers(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Os.UserHandle> GetBindDeviceAdminTargetUsers(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Android.Os.UserHandle>>("getBindDeviceAdminTargetUsers", "(Landroid/content/ComponentName;)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getSecondaryUsers(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Os.UserHandle> GetSecondaryUsers(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Android.Os.UserHandle>>("getSecondaryUsers", "(Landroid/content/ComponentName;)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#listForegroundAffiliatedUsers()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Os.UserHandle> ListForegroundAffiliatedUsers()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Os.UserHandle>>("listForegroundAffiliatedUsers", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getOverrideApns(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Telephony.Data.ApnSetting> GetOverrideApns(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Android.Telephony.Data.ApnSetting>>("getOverrideApns", "(Landroid/content/ComponentName;)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getInstalledCaCerts(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<byte[]> GetInstalledCaCerts(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<Java.Util.List<byte[]>>("getInstalledCaCerts", "(Landroid/content/ComponentName;)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getCrossProfileWidgetProviders(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Java.Lang.String> GetCrossProfileWidgetProviders(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Java.Lang.String>>("getCrossProfileWidgetProviders", "(Landroid/content/ComponentName;)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getDelegatedScopes(android.content.ComponentName,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Java.Lang.String> GetDelegatedScopes(Android.Content.ComponentName arg0, Java.Lang.String arg1)
        {
            return IExecute<Java.Util.List<Java.Lang.String>>("getDelegatedScopes", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getDelegatePackages(android.content.ComponentName,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Java.Lang.String> GetDelegatePackages(Android.Content.ComponentName arg0, Java.Lang.String arg1)
        {
            return IExecute<Java.Util.List<Java.Lang.String>>("getDelegatePackages", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getKeepUninstalledPackages(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Java.Lang.String> GetKeepUninstalledPackages(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Java.Lang.String>>("getKeepUninstalledPackages", "(Landroid/content/ComponentName;)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getMeteredDataDisabledPackages(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Java.Lang.String> GetMeteredDataDisabledPackages(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Java.Lang.String>>("getMeteredDataDisabledPackages", "(Landroid/content/ComponentName;)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPermittedAccessibilityServices(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Java.Lang.String> GetPermittedAccessibilityServices(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Java.Lang.String>>("getPermittedAccessibilityServices", "(Landroid/content/ComponentName;)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPermittedCrossProfileNotificationListeners(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Java.Lang.String> GetPermittedCrossProfileNotificationListeners(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Java.Lang.String>>("getPermittedCrossProfileNotificationListeners", "(Landroid/content/ComponentName;)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPermittedInputMethods(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Java.Lang.String> GetPermittedInputMethods(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Java.Lang.String>>("getPermittedInputMethods", "(Landroid/content/ComponentName;)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getUserControlDisabledPackages(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Java.Lang.String> GetUserControlDisabledPackages(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Java.Lang.String>>("getUserControlDisabledPackages", "(Landroid/content/ComponentName;)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setMeteredDataDisabledPackages(android.content.ComponentName,java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Util.List"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Java.Lang.String> SetMeteredDataDisabledPackages(Android.Content.ComponentName arg0, Java.Util.List<Java.Lang.String> arg1)
        {
            return IExecute<Java.Util.List<Java.Lang.String>>("setMeteredDataDisabledPackages", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getKeyPairGrants(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public Java.Util.Map<Java.Lang.Integer, Java.Util.Set<Java.Lang.String>> GetKeyPairGrants(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Java.Util.Map<Java.Lang.Integer, Java.Util.Set<Java.Lang.String>>>("getKeyPairGrants", "(Ljava/lang/String;)Ljava/util/Map;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getSubscriptionIds()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Set"/></returns>
        public Java.Util.Set<Java.Lang.Integer> GetSubscriptionIds()
        {
            return IExecuteWithSignature<Java.Util.Set<Java.Lang.Integer>>("getSubscriptionIds", "()Ljava/util/Set;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getAffiliationIds(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="Java.Util.Set"/></returns>
        public Java.Util.Set<Java.Lang.String> GetAffiliationIds(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<Java.Util.Set<Java.Lang.String>>("getAffiliationIds", "(Landroid/content/ComponentName;)Ljava/util/Set;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getAlwaysOnVpnLockdownWhitelist(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="Java.Util.Set"/></returns>
        public Java.Util.Set<Java.Lang.String> GetAlwaysOnVpnLockdownWhitelist(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<Java.Util.Set<Java.Lang.String>>("getAlwaysOnVpnLockdownWhitelist", "(Landroid/content/ComponentName;)Ljava/util/Set;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getCrossProfileCalendarPackages(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="Java.Util.Set"/></returns>
        [global::System.Obsolete()]
        public Java.Util.Set<Java.Lang.String> GetCrossProfileCalendarPackages(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<Java.Util.Set<Java.Lang.String>>("getCrossProfileCalendarPackages", "(Landroid/content/ComponentName;)Ljava/util/Set;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getCrossProfilePackages(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="Java.Util.Set"/></returns>
        public Java.Util.Set<Java.Lang.String> GetCrossProfilePackages(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<Java.Util.Set<Java.Lang.String>>("getCrossProfilePackages", "(Landroid/content/ComponentName;)Ljava/util/Set;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getManagedProfileMaximumTimeOff(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="long"/></returns>
        public long GetManagedProfileMaximumTimeOff(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<long>("getManagedProfileMaximumTimeOff", "(Landroid/content/ComponentName;)J", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getMaximumTimeToLock(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="long"/></returns>
        public long GetMaximumTimeToLock(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<long>("getMaximumTimeToLock", "(Landroid/content/ComponentName;)J", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordExpiration(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="long"/></returns>
        public long GetPasswordExpiration(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<long>("getPasswordExpiration", "(Landroid/content/ComponentName;)J", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordExpirationTimeout(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="long"/></returns>
        public long GetPasswordExpirationTimeout(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<long>("getPasswordExpirationTimeout", "(Landroid/content/ComponentName;)J", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getRequiredStrongAuthTimeout(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="long"/></returns>
        public long GetRequiredStrongAuthTimeout(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<long>("getRequiredStrongAuthTimeout", "(Landroid/content/ComponentName;)J", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#acknowledgeDeviceCompliant()"/>
        /// </summary>
        public void AcknowledgeDeviceCompliant()
        {
            IExecuteWithSignature("acknowledgeDeviceCompliant", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#addCrossProfileIntentFilter(android.content.ComponentName,android.content.IntentFilter,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Android.Content.IntentFilter"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void AddCrossProfileIntentFilter(Android.Content.ComponentName arg0, Android.Content.IntentFilter arg1, int arg2)
        {
            IExecute("addCrossProfileIntentFilter", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#addPersistentPreferredActivity(android.content.ComponentName,android.content.IntentFilter,android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Android.Content.IntentFilter"/></param>
        /// <param name="arg2"><see cref="Android.Content.ComponentName"/></param>
        public void AddPersistentPreferredActivity(Android.Content.ComponentName arg0, Android.Content.IntentFilter arg1, Android.Content.ComponentName arg2)
        {
            IExecute("addPersistentPreferredActivity", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#addUserRestriction(android.content.ComponentName,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        public void AddUserRestriction(Android.Content.ComponentName arg0, Java.Lang.String arg1)
        {
            IExecute("addUserRestriction", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#addUserRestrictionGlobally(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void AddUserRestrictionGlobally(Java.Lang.String arg0)
        {
            IExecuteWithSignature("addUserRestrictionGlobally", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#clearApplicationUserData(android.content.ComponentName,java.lang.String,java.util.concurrent.Executor,android.app.admin.DevicePolicyManager.OnClearApplicationUserDataListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg3"><see cref="Android.App.Admin.DevicePolicyManager.OnClearApplicationUserDataListener"/></param>
        public void ClearApplicationUserData(Android.Content.ComponentName arg0, Java.Lang.String arg1, Java.Util.Concurrent.Executor arg2, Android.App.Admin.DevicePolicyManager.OnClearApplicationUserDataListener arg3)
        {
            IExecute("clearApplicationUserData", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#clearCrossProfileIntentFilters(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        public void ClearCrossProfileIntentFilters(Android.Content.ComponentName arg0)
        {
            IExecuteWithSignature("clearCrossProfileIntentFilters", "(Landroid/content/ComponentName;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#clearDeviceOwnerApp(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        [global::System.Obsolete()]
        public void ClearDeviceOwnerApp(Java.Lang.String arg0)
        {
            IExecuteWithSignature("clearDeviceOwnerApp", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#clearPackagePersistentPreferredActivities(android.content.ComponentName,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        public void ClearPackagePersistentPreferredActivities(Android.Content.ComponentName arg0, Java.Lang.String arg1)
        {
            IExecute("clearPackagePersistentPreferredActivities", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#clearProfileOwner(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        [global::System.Obsolete()]
        public void ClearProfileOwner(Android.Content.ComponentName arg0)
        {
            IExecuteWithSignature("clearProfileOwner", "(Landroid/content/ComponentName;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#clearUserRestriction(android.content.ComponentName,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        public void ClearUserRestriction(Android.Content.ComponentName arg0, Java.Lang.String arg1)
        {
            IExecute("clearUserRestriction", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#enableSystemApp(android.content.ComponentName,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        public void EnableSystemApp(Android.Content.ComponentName arg0, Java.Lang.String arg1)
        {
            IExecute("enableSystemApp", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#installSystemUpdate(android.content.ComponentName,android.net.Uri,java.util.concurrent.Executor,android.app.admin.DevicePolicyManager.InstallSystemUpdateCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg2"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg3"><see cref="Android.App.Admin.DevicePolicyManager.InstallSystemUpdateCallback"/></param>
        public void InstallSystemUpdate(Android.Content.ComponentName arg0, Android.Net.Uri arg1, Java.Util.Concurrent.Executor arg2, Android.App.Admin.DevicePolicyManager.InstallSystemUpdateCallback arg3)
        {
            IExecute("installSystemUpdate", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#lockNow()"/>
        /// </summary>
        public void LockNow()
        {
            IExecuteWithSignature("lockNow", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#lockNow(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void LockNow(int arg0)
        {
            IExecuteWithSignature("lockNow", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#reboot(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        public void Reboot(Android.Content.ComponentName arg0)
        {
            IExecuteWithSignature("reboot", "(Landroid/content/ComponentName;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#removeActiveAdmin(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        public void RemoveActiveAdmin(Android.Content.ComponentName arg0)
        {
            IExecuteWithSignature("removeActiveAdmin", "(Landroid/content/ComponentName;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setAccountManagementDisabled(android.content.ComponentName,java.lang.String,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        public void SetAccountManagementDisabled(Android.Content.ComponentName arg0, Java.Lang.String arg1, bool arg2)
        {
            IExecute("setAccountManagementDisabled", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setAffiliationIds(android.content.ComponentName,java.util.Set)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Util.Set"/></param>
        public void SetAffiliationIds(Android.Content.ComponentName arg0, Java.Util.Set<Java.Lang.String> arg1)
        {
            IExecute("setAffiliationIds", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setAlwaysOnVpnPackage(android.content.ComponentName,java.lang.String,boolean,java.util.Set)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <param name="arg3"><see cref="Java.Util.Set"/></param>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public void SetAlwaysOnVpnPackage(Android.Content.ComponentName arg0, Java.Lang.String arg1, bool arg2, Java.Util.Set<Java.Lang.String> arg3)
        {
            IExecute("setAlwaysOnVpnPackage", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setAlwaysOnVpnPackage(android.content.ComponentName,java.lang.String,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public void SetAlwaysOnVpnPackage(Android.Content.ComponentName arg0, Java.Lang.String arg1, bool arg2)
        {
            IExecute("setAlwaysOnVpnPackage", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setApplicationRestrictions(android.content.ComponentName,java.lang.String,android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Android.Os.Bundle"/></param>
        public void SetApplicationRestrictions(Android.Content.ComponentName arg0, Java.Lang.String arg1, Android.Os.Bundle arg2)
        {
            IExecute("setApplicationRestrictions", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setApplicationRestrictionsManagingPackage(android.content.ComponentName,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        [global::System.Obsolete()]
        public void SetApplicationRestrictionsManagingPackage(Android.Content.ComponentName arg0, Java.Lang.String arg1)
        {
            IExecute("setApplicationRestrictionsManagingPackage", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setAutoTimeEnabled(android.content.ComponentName,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public void SetAutoTimeEnabled(Android.Content.ComponentName arg0, bool arg1)
        {
            IExecute("setAutoTimeEnabled", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setAutoTimeRequired(android.content.ComponentName,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void SetAutoTimeRequired(Android.Content.ComponentName arg0, bool arg1)
        {
            IExecute("setAutoTimeRequired", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setAutoTimeZoneEnabled(android.content.ComponentName,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public void SetAutoTimeZoneEnabled(Android.Content.ComponentName arg0, bool arg1)
        {
            IExecute("setAutoTimeZoneEnabled", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setBackupServiceEnabled(android.content.ComponentName,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public void SetBackupServiceEnabled(Android.Content.ComponentName arg0, bool arg1)
        {
            IExecute("setBackupServiceEnabled", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setBluetoothContactSharingDisabled(android.content.ComponentName,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public void SetBluetoothContactSharingDisabled(Android.Content.ComponentName arg0, bool arg1)
        {
            IExecute("setBluetoothContactSharingDisabled", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setCameraDisabled(android.content.ComponentName,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public void SetCameraDisabled(Android.Content.ComponentName arg0, bool arg1)
        {
            IExecute("setCameraDisabled", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setCertInstallerPackage(android.content.ComponentName,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <exception cref="Java.Lang.SecurityException"/>
        [global::System.Obsolete()]
        public void SetCertInstallerPackage(Android.Content.ComponentName arg0, Java.Lang.String arg1)
        {
            IExecute("setCertInstallerPackage", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setCommonCriteriaModeEnabled(android.content.ComponentName,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public void SetCommonCriteriaModeEnabled(Android.Content.ComponentName arg0, bool arg1)
        {
            IExecute("setCommonCriteriaModeEnabled", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setConfiguredNetworksLockdownState(android.content.ComponentName,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public void SetConfiguredNetworksLockdownState(Android.Content.ComponentName arg0, bool arg1)
        {
            IExecute("setConfiguredNetworksLockdownState", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setContentProtectionPolicy(android.content.ComponentName,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetContentProtectionPolicy(Android.Content.ComponentName arg0, int arg1)
        {
            IExecute("setContentProtectionPolicy", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setCredentialManagerPolicy(android.app.admin.PackagePolicy)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.Admin.PackagePolicy"/></param>
        public void SetCredentialManagerPolicy(Android.App.Admin.PackagePolicy arg0)
        {
            IExecuteWithSignature("setCredentialManagerPolicy", "(Landroid/app/admin/PackagePolicy;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setCrossProfileCalendarPackages(android.content.ComponentName,java.util.Set)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Util.Set"/></param>
        [global::System.Obsolete()]
        public void SetCrossProfileCalendarPackages(Android.Content.ComponentName arg0, Java.Util.Set<Java.Lang.String> arg1)
        {
            IExecute("setCrossProfileCalendarPackages", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setCrossProfileCallerIdDisabled(android.content.ComponentName,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void SetCrossProfileCallerIdDisabled(Android.Content.ComponentName arg0, bool arg1)
        {
            IExecute("setCrossProfileCallerIdDisabled", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setCrossProfileContactsSearchDisabled(android.content.ComponentName,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void SetCrossProfileContactsSearchDisabled(Android.Content.ComponentName arg0, bool arg1)
        {
            IExecute("setCrossProfileContactsSearchDisabled", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setCrossProfilePackages(android.content.ComponentName,java.util.Set)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Util.Set"/></param>
        public void SetCrossProfilePackages(Android.Content.ComponentName arg0, Java.Util.Set<Java.Lang.String> arg1)
        {
            IExecute("setCrossProfilePackages", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setDefaultDialerApplication(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void SetDefaultDialerApplication(Java.Lang.String arg0)
        {
            IExecuteWithSignature("setDefaultDialerApplication", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setDefaultSmsApplication(android.content.ComponentName,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        public void SetDefaultSmsApplication(Android.Content.ComponentName arg0, Java.Lang.String arg1)
        {
            IExecute("setDefaultSmsApplication", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setDelegatedScopes(android.content.ComponentName,java.lang.String,java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Util.List"/></param>
        public void SetDelegatedScopes(Android.Content.ComponentName arg0, Java.Lang.String arg1, Java.Util.List<Java.Lang.String> arg2)
        {
            IExecute("setDelegatedScopes", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setDeviceOwnerLockScreenInfo(android.content.ComponentName,java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.CharSequence"/></param>
        public void SetDeviceOwnerLockScreenInfo(Android.Content.ComponentName arg0, Java.Lang.CharSequence arg1)
        {
            IExecute("setDeviceOwnerLockScreenInfo", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setEndUserSessionMessage(android.content.ComponentName,java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.CharSequence"/></param>
        public void SetEndUserSessionMessage(Android.Content.ComponentName arg0, Java.Lang.CharSequence arg1)
        {
            IExecute("setEndUserSessionMessage", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setFactoryResetProtectionPolicy(android.content.ComponentName,android.app.admin.FactoryResetProtectionPolicy)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Android.App.Admin.FactoryResetProtectionPolicy"/></param>
        public void SetFactoryResetProtectionPolicy(Android.Content.ComponentName arg0, Android.App.Admin.FactoryResetProtectionPolicy arg1)
        {
            IExecute("setFactoryResetProtectionPolicy", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setGlobalSetting(android.content.ComponentName,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        public void SetGlobalSetting(Android.Content.ComponentName arg0, Java.Lang.String arg1, Java.Lang.String arg2)
        {
            IExecute("setGlobalSetting", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setKeepUninstalledPackages(android.content.ComponentName,java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Util.List"/></param>
        public void SetKeepUninstalledPackages(Android.Content.ComponentName arg0, Java.Util.List<Java.Lang.String> arg1)
        {
            IExecute("setKeepUninstalledPackages", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setKeyguardDisabledFeatures(android.content.ComponentName,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetKeyguardDisabledFeatures(Android.Content.ComponentName arg0, int arg1)
        {
            IExecute("setKeyguardDisabledFeatures", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setLocationEnabled(android.content.ComponentName,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public void SetLocationEnabled(Android.Content.ComponentName arg0, bool arg1)
        {
            IExecute("setLocationEnabled", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setLockTaskFeatures(android.content.ComponentName,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetLockTaskFeatures(Android.Content.ComponentName arg0, int arg1)
        {
            IExecute("setLockTaskFeatures", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setLockTaskPackages(android.content.ComponentName,java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <exception cref="Java.Lang.SecurityException"/>
        public void SetLockTaskPackages(Android.Content.ComponentName arg0, Java.Lang.String[] arg1)
        {
            IExecute("setLockTaskPackages", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setLogoutEnabled(android.content.ComponentName,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public void SetLogoutEnabled(Android.Content.ComponentName arg0, bool arg1)
        {
            IExecute("setLogoutEnabled", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setLongSupportMessage(android.content.ComponentName,java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.CharSequence"/></param>
        public void SetLongSupportMessage(Android.Content.ComponentName arg0, Java.Lang.CharSequence arg1)
        {
            IExecute("setLongSupportMessage", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setManagedProfileCallerIdAccessPolicy(android.app.admin.PackagePolicy)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.Admin.PackagePolicy"/></param>
        public void SetManagedProfileCallerIdAccessPolicy(Android.App.Admin.PackagePolicy arg0)
        {
            IExecuteWithSignature("setManagedProfileCallerIdAccessPolicy", "(Landroid/app/admin/PackagePolicy;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setManagedProfileContactsAccessPolicy(android.app.admin.PackagePolicy)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.Admin.PackagePolicy"/></param>
        public void SetManagedProfileContactsAccessPolicy(Android.App.Admin.PackagePolicy arg0)
        {
            IExecuteWithSignature("setManagedProfileContactsAccessPolicy", "(Landroid/app/admin/PackagePolicy;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setManagedProfileMaximumTimeOff(android.content.ComponentName,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        public void SetManagedProfileMaximumTimeOff(Android.Content.ComponentName arg0, long arg1)
        {
            IExecute("setManagedProfileMaximumTimeOff", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setManagedSubscriptionsPolicy(android.app.admin.ManagedSubscriptionsPolicy)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.Admin.ManagedSubscriptionsPolicy"/></param>
        public void SetManagedSubscriptionsPolicy(Android.App.Admin.ManagedSubscriptionsPolicy arg0)
        {
            IExecuteWithSignature("setManagedSubscriptionsPolicy", "(Landroid/app/admin/ManagedSubscriptionsPolicy;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setMasterVolumeMuted(android.content.ComponentName,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public void SetMasterVolumeMuted(Android.Content.ComponentName arg0, bool arg1)
        {
            IExecute("setMasterVolumeMuted", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setMaximumFailedPasswordsForWipe(android.content.ComponentName,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetMaximumFailedPasswordsForWipe(Android.Content.ComponentName arg0, int arg1)
        {
            IExecute("setMaximumFailedPasswordsForWipe", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setMaximumTimeToLock(android.content.ComponentName,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        public void SetMaximumTimeToLock(Android.Content.ComponentName arg0, long arg1)
        {
            IExecute("setMaximumTimeToLock", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setMinimumRequiredWifiSecurityLevel(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetMinimumRequiredWifiSecurityLevel(int arg0)
        {
            IExecuteWithSignature("setMinimumRequiredWifiSecurityLevel", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setMtePolicy(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetMtePolicy(int arg0)
        {
            IExecuteWithSignature("setMtePolicy", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setNearbyAppStreamingPolicy(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetNearbyAppStreamingPolicy(int arg0)
        {
            IExecuteWithSignature("setNearbyAppStreamingPolicy", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setNearbyNotificationStreamingPolicy(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetNearbyNotificationStreamingPolicy(int arg0)
        {
            IExecuteWithSignature("setNearbyNotificationStreamingPolicy", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setNetworkLoggingEnabled(android.content.ComponentName,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public void SetNetworkLoggingEnabled(Android.Content.ComponentName arg0, bool arg1)
        {
            IExecute("setNetworkLoggingEnabled", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setOrganizationColor(android.content.ComponentName,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void SetOrganizationColor(Android.Content.ComponentName arg0, int arg1)
        {
            IExecute("setOrganizationColor", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setOrganizationId(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void SetOrganizationId(Java.Lang.String arg0)
        {
            IExecuteWithSignature("setOrganizationId", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setOrganizationName(android.content.ComponentName,java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.CharSequence"/></param>
        public void SetOrganizationName(Android.Content.ComponentName arg0, Java.Lang.CharSequence arg1)
        {
            IExecute("setOrganizationName", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setOverrideApnsEnabled(android.content.ComponentName,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public void SetOverrideApnsEnabled(Android.Content.ComponentName arg0, bool arg1)
        {
            IExecute("setOverrideApnsEnabled", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPasswordExpirationTimeout(android.content.ComponentName,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        public void SetPasswordExpirationTimeout(Android.Content.ComponentName arg0, long arg1)
        {
            IExecute("setPasswordExpirationTimeout", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPasswordHistoryLength(android.content.ComponentName,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetPasswordHistoryLength(Android.Content.ComponentName arg0, int arg1)
        {
            IExecute("setPasswordHistoryLength", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPasswordMinimumLength(android.content.ComponentName,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void SetPasswordMinimumLength(Android.Content.ComponentName arg0, int arg1)
        {
            IExecute("setPasswordMinimumLength", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPasswordMinimumLetters(android.content.ComponentName,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void SetPasswordMinimumLetters(Android.Content.ComponentName arg0, int arg1)
        {
            IExecute("setPasswordMinimumLetters", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPasswordMinimumLowerCase(android.content.ComponentName,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void SetPasswordMinimumLowerCase(Android.Content.ComponentName arg0, int arg1)
        {
            IExecute("setPasswordMinimumLowerCase", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPasswordMinimumNonLetter(android.content.ComponentName,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void SetPasswordMinimumNonLetter(Android.Content.ComponentName arg0, int arg1)
        {
            IExecute("setPasswordMinimumNonLetter", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPasswordMinimumNumeric(android.content.ComponentName,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void SetPasswordMinimumNumeric(Android.Content.ComponentName arg0, int arg1)
        {
            IExecute("setPasswordMinimumNumeric", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPasswordMinimumSymbols(android.content.ComponentName,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void SetPasswordMinimumSymbols(Android.Content.ComponentName arg0, int arg1)
        {
            IExecute("setPasswordMinimumSymbols", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPasswordMinimumUpperCase(android.content.ComponentName,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void SetPasswordMinimumUpperCase(Android.Content.ComponentName arg0, int arg1)
        {
            IExecute("setPasswordMinimumUpperCase", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPasswordQuality(android.content.ComponentName,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void SetPasswordQuality(Android.Content.ComponentName arg0, int arg1)
        {
            IExecute("setPasswordQuality", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPermissionPolicy(android.content.ComponentName,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetPermissionPolicy(Android.Content.ComponentName arg0, int arg1)
        {
            IExecute("setPermissionPolicy", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPersonalAppsSuspended(android.content.ComponentName,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public void SetPersonalAppsSuspended(Android.Content.ComponentName arg0, bool arg1)
        {
            IExecute("setPersonalAppsSuspended", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPreferentialNetworkServiceConfigs(java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        public void SetPreferentialNetworkServiceConfigs(Java.Util.List<Android.App.Admin.PreferentialNetworkServiceConfig> arg0)
        {
            IExecuteWithSignature("setPreferentialNetworkServiceConfigs", "(Ljava/util/List;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPreferentialNetworkServiceEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetPreferentialNetworkServiceEnabled(bool arg0)
        {
            IExecuteWithSignature("setPreferentialNetworkServiceEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setProfileEnabled(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        public void SetProfileEnabled(Android.Content.ComponentName arg0)
        {
            IExecuteWithSignature("setProfileEnabled", "(Landroid/content/ComponentName;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setProfileName(android.content.ComponentName,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        public void SetProfileName(Android.Content.ComponentName arg0, Java.Lang.String arg1)
        {
            IExecute("setProfileName", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setRecommendedGlobalProxy(android.content.ComponentName,android.net.ProxyInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Android.Net.ProxyInfo"/></param>
        public void SetRecommendedGlobalProxy(Android.Content.ComponentName arg0, Android.Net.ProxyInfo arg1)
        {
            IExecute("setRecommendedGlobalProxy", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setRequiredPasswordComplexity(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetRequiredPasswordComplexity(int arg0)
        {
            IExecuteWithSignature("setRequiredPasswordComplexity", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setRequiredStrongAuthTimeout(android.content.ComponentName,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        public void SetRequiredStrongAuthTimeout(Android.Content.ComponentName arg0, long arg1)
        {
            IExecute("setRequiredStrongAuthTimeout", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setRestrictionsProvider(android.content.ComponentName,android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Android.Content.ComponentName"/></param>
        public void SetRestrictionsProvider(Android.Content.ComponentName arg0, Android.Content.ComponentName arg1)
        {
            IExecute("setRestrictionsProvider", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setScreenCaptureDisabled(android.content.ComponentName,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public void SetScreenCaptureDisabled(Android.Content.ComponentName arg0, bool arg1)
        {
            IExecute("setScreenCaptureDisabled", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setSecureSetting(android.content.ComponentName,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        public void SetSecureSetting(Android.Content.ComponentName arg0, Java.Lang.String arg1, Java.Lang.String arg2)
        {
            IExecute("setSecureSetting", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setSecurityLoggingEnabled(android.content.ComponentName,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public void SetSecurityLoggingEnabled(Android.Content.ComponentName arg0, bool arg1)
        {
            IExecute("setSecurityLoggingEnabled", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setShortSupportMessage(android.content.ComponentName,java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.CharSequence"/></param>
        public void SetShortSupportMessage(Android.Content.ComponentName arg0, Java.Lang.CharSequence arg1)
        {
            IExecute("setShortSupportMessage", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setStartUserSessionMessage(android.content.ComponentName,java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.CharSequence"/></param>
        public void SetStartUserSessionMessage(Android.Content.ComponentName arg0, Java.Lang.CharSequence arg1)
        {
            IExecute("setStartUserSessionMessage", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setSystemSetting(android.content.ComponentName,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        public void SetSystemSetting(Android.Content.ComponentName arg0, Java.Lang.String arg1, Java.Lang.String arg2)
        {
            IExecute("setSystemSetting", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setSystemUpdatePolicy(android.content.ComponentName,android.app.admin.SystemUpdatePolicy)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Android.App.Admin.SystemUpdatePolicy"/></param>
        public void SetSystemUpdatePolicy(Android.Content.ComponentName arg0, Android.App.Admin.SystemUpdatePolicy arg1)
        {
            IExecute("setSystemUpdatePolicy", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg2"><see cref="Android.Os.PersistableBundle"/></param>
        public void SetTrustAgentConfiguration(Android.Content.ComponentName arg0, Android.Content.ComponentName arg1, Android.Os.PersistableBundle arg2)
        {
            IExecute("setTrustAgentConfiguration", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setUninstallBlocked(android.content.ComponentName,java.lang.String,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        public void SetUninstallBlocked(Android.Content.ComponentName arg0, Java.Lang.String arg1, bool arg2)
        {
            IExecute("setUninstallBlocked", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setUsbDataSignalingEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetUsbDataSignalingEnabled(bool arg0)
        {
            IExecuteWithSignature("setUsbDataSignalingEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setUserControlDisabledPackages(android.content.ComponentName,java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Util.List"/></param>
        public void SetUserControlDisabledPackages(Android.Content.ComponentName arg0, Java.Util.List<Java.Lang.String> arg1)
        {
            IExecute("setUserControlDisabledPackages", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setUserIcon(android.content.ComponentName,android.graphics.Bitmap)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Bitmap"/></param>
        public void SetUserIcon(Android.Content.ComponentName arg0, Android.Graphics.Bitmap arg1)
        {
            IExecute("setUserIcon", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setWifiSsidPolicy(android.app.admin.WifiSsidPolicy)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.Admin.WifiSsidPolicy"/></param>
        public void SetWifiSsidPolicy(Android.App.Admin.WifiSsidPolicy arg0)
        {
            IExecuteWithSignature("setWifiSsidPolicy", "(Landroid/app/admin/WifiSsidPolicy;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#transferOwnership(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg2"><see cref="Android.Os.PersistableBundle"/></param>
        public void TransferOwnership(Android.Content.ComponentName arg0, Android.Content.ComponentName arg1, Android.Os.PersistableBundle arg2)
        {
            IExecute("transferOwnership", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#uninstallAllUserCaCerts(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        public void UninstallAllUserCaCerts(Android.Content.ComponentName arg0)
        {
            IExecuteWithSignature("uninstallAllUserCaCerts", "(Landroid/content/ComponentName;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#uninstallCaCert(android.content.ComponentName,byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        public void UninstallCaCert(Android.Content.ComponentName arg0, byte[] arg1)
        {
            IExecute("uninstallCaCert", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#wipeData(int,java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Lang.CharSequence"/></param>
        public void WipeData(int arg0, Java.Lang.CharSequence arg1)
        {
            IExecute("wipeData", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#wipeData(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void WipeData(int arg0)
        {
            IExecuteWithSignature("wipeData", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#wipeDevice(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void WipeDevice(int arg0)
        {
            IExecuteWithSignature("wipeDevice", "(I)V", arg0);
        }

        #endregion

        #region Nested classes
        #region InstallSystemUpdateCallback
        public partial class InstallSystemUpdateCallback
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.InstallSystemUpdateCallback.html#UPDATE_ERROR_BATTERY_LOW"/>
            /// </summary>
            public static int UPDATE_ERROR_BATTERY_LOW { get { if (!_UPDATE_ERROR_BATTERY_LOWReady) { _UPDATE_ERROR_BATTERY_LOWContent = SGetField<int>(LocalBridgeClazz, "UPDATE_ERROR_BATTERY_LOW"); _UPDATE_ERROR_BATTERY_LOWReady = true; } return _UPDATE_ERROR_BATTERY_LOWContent; } }
            private static int _UPDATE_ERROR_BATTERY_LOWContent = default;
            private static bool _UPDATE_ERROR_BATTERY_LOWReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.InstallSystemUpdateCallback.html#UPDATE_ERROR_FILE_NOT_FOUND"/>
            /// </summary>
            public static int UPDATE_ERROR_FILE_NOT_FOUND { get { if (!_UPDATE_ERROR_FILE_NOT_FOUNDReady) { _UPDATE_ERROR_FILE_NOT_FOUNDContent = SGetField<int>(LocalBridgeClazz, "UPDATE_ERROR_FILE_NOT_FOUND"); _UPDATE_ERROR_FILE_NOT_FOUNDReady = true; } return _UPDATE_ERROR_FILE_NOT_FOUNDContent; } }
            private static int _UPDATE_ERROR_FILE_NOT_FOUNDContent = default;
            private static bool _UPDATE_ERROR_FILE_NOT_FOUNDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.InstallSystemUpdateCallback.html#UPDATE_ERROR_INCORRECT_OS_VERSION"/>
            /// </summary>
            public static int UPDATE_ERROR_INCORRECT_OS_VERSION { get { if (!_UPDATE_ERROR_INCORRECT_OS_VERSIONReady) { _UPDATE_ERROR_INCORRECT_OS_VERSIONContent = SGetField<int>(LocalBridgeClazz, "UPDATE_ERROR_INCORRECT_OS_VERSION"); _UPDATE_ERROR_INCORRECT_OS_VERSIONReady = true; } return _UPDATE_ERROR_INCORRECT_OS_VERSIONContent; } }
            private static int _UPDATE_ERROR_INCORRECT_OS_VERSIONContent = default;
            private static bool _UPDATE_ERROR_INCORRECT_OS_VERSIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.InstallSystemUpdateCallback.html#UPDATE_ERROR_UNKNOWN"/>
            /// </summary>
            public static int UPDATE_ERROR_UNKNOWN { get { if (!_UPDATE_ERROR_UNKNOWNReady) { _UPDATE_ERROR_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "UPDATE_ERROR_UNKNOWN"); _UPDATE_ERROR_UNKNOWNReady = true; } return _UPDATE_ERROR_UNKNOWNContent; } }
            private static int _UPDATE_ERROR_UNKNOWNContent = default;
            private static bool _UPDATE_ERROR_UNKNOWNReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.InstallSystemUpdateCallback.html#UPDATE_ERROR_UPDATE_FILE_INVALID"/>
            /// </summary>
            public static int UPDATE_ERROR_UPDATE_FILE_INVALID { get { if (!_UPDATE_ERROR_UPDATE_FILE_INVALIDReady) { _UPDATE_ERROR_UPDATE_FILE_INVALIDContent = SGetField<int>(LocalBridgeClazz, "UPDATE_ERROR_UPDATE_FILE_INVALID"); _UPDATE_ERROR_UPDATE_FILE_INVALIDReady = true; } return _UPDATE_ERROR_UPDATE_FILE_INVALIDContent; } }
            private static int _UPDATE_ERROR_UPDATE_FILE_INVALIDContent = default;
            private static bool _UPDATE_ERROR_UPDATE_FILE_INVALIDReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.InstallSystemUpdateCallback.html#onInstallUpdateError(int,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            public void OnInstallUpdateError(int arg0, Java.Lang.String arg1)
            {
                IExecute("onInstallUpdateError", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnClearApplicationUserDataListener
        public partial class OnClearApplicationUserDataListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnClearApplicationUserDataListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onApplicationUserDataCleared", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Java.Lang.String>>>(OnApplicationUserDataClearedEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.OnClearApplicationUserDataListener.html#onApplicationUserDataCleared(java.lang.String,boolean)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnApplicationUserDataCleared"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Java.Lang.String, bool> OnOnApplicationUserDataCleared { get; set; } = null;

            void OnApplicationUserDataClearedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Java.Lang.String>> data)
            {
                var methodToExecute = (OnOnApplicationUserDataCleared != null) ? OnOnApplicationUserDataCleared : OnApplicationUserDataCleared;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<bool>(0));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.OnClearApplicationUserDataListener.html#onApplicationUserDataCleared(java.lang.String,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="bool"/></param>
            public virtual void OnApplicationUserDataCleared(Java.Lang.String arg0, bool arg1)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnClearApplicationUserDataListenerDirect
        public partial class OnClearApplicationUserDataListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.OnClearApplicationUserDataListener.html#onApplicationUserDataCleared(java.lang.String,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="bool"/></param>
            public override void OnApplicationUserDataCleared(Java.Lang.String arg0, bool arg1)
            {
                IExecute("onApplicationUserDataCleared", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.2.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.App
{
    #region DownloadManager
    public partial class DownloadManager
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#ERROR_CANNOT_RESUME"/>
        /// </summary>
        public static int ERROR_CANNOT_RESUME { get { if (!_ERROR_CANNOT_RESUMEReady) { _ERROR_CANNOT_RESUMEContent = SGetField<int>(LocalBridgeClazz, "ERROR_CANNOT_RESUME"); _ERROR_CANNOT_RESUMEReady = true; } return _ERROR_CANNOT_RESUMEContent; } }
        private static int _ERROR_CANNOT_RESUMEContent = default;
        private static bool _ERROR_CANNOT_RESUMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#ERROR_DEVICE_NOT_FOUND"/>
        /// </summary>
        public static int ERROR_DEVICE_NOT_FOUND { get { if (!_ERROR_DEVICE_NOT_FOUNDReady) { _ERROR_DEVICE_NOT_FOUNDContent = SGetField<int>(LocalBridgeClazz, "ERROR_DEVICE_NOT_FOUND"); _ERROR_DEVICE_NOT_FOUNDReady = true; } return _ERROR_DEVICE_NOT_FOUNDContent; } }
        private static int _ERROR_DEVICE_NOT_FOUNDContent = default;
        private static bool _ERROR_DEVICE_NOT_FOUNDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#ERROR_FILE_ALREADY_EXISTS"/>
        /// </summary>
        public static int ERROR_FILE_ALREADY_EXISTS { get { if (!_ERROR_FILE_ALREADY_EXISTSReady) { _ERROR_FILE_ALREADY_EXISTSContent = SGetField<int>(LocalBridgeClazz, "ERROR_FILE_ALREADY_EXISTS"); _ERROR_FILE_ALREADY_EXISTSReady = true; } return _ERROR_FILE_ALREADY_EXISTSContent; } }
        private static int _ERROR_FILE_ALREADY_EXISTSContent = default;
        private static bool _ERROR_FILE_ALREADY_EXISTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#ERROR_FILE_ERROR"/>
        /// </summary>
        public static int ERROR_FILE_ERROR { get { if (!_ERROR_FILE_ERRORReady) { _ERROR_FILE_ERRORContent = SGetField<int>(LocalBridgeClazz, "ERROR_FILE_ERROR"); _ERROR_FILE_ERRORReady = true; } return _ERROR_FILE_ERRORContent; } }
        private static int _ERROR_FILE_ERRORContent = default;
        private static bool _ERROR_FILE_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#ERROR_HTTP_DATA_ERROR"/>
        /// </summary>
        public static int ERROR_HTTP_DATA_ERROR { get { if (!_ERROR_HTTP_DATA_ERRORReady) { _ERROR_HTTP_DATA_ERRORContent = SGetField<int>(LocalBridgeClazz, "ERROR_HTTP_DATA_ERROR"); _ERROR_HTTP_DATA_ERRORReady = true; } return _ERROR_HTTP_DATA_ERRORContent; } }
        private static int _ERROR_HTTP_DATA_ERRORContent = default;
        private static bool _ERROR_HTTP_DATA_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#ERROR_INSUFFICIENT_SPACE"/>
        /// </summary>
        public static int ERROR_INSUFFICIENT_SPACE { get { if (!_ERROR_INSUFFICIENT_SPACEReady) { _ERROR_INSUFFICIENT_SPACEContent = SGetField<int>(LocalBridgeClazz, "ERROR_INSUFFICIENT_SPACE"); _ERROR_INSUFFICIENT_SPACEReady = true; } return _ERROR_INSUFFICIENT_SPACEContent; } }
        private static int _ERROR_INSUFFICIENT_SPACEContent = default;
        private static bool _ERROR_INSUFFICIENT_SPACEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#ERROR_TOO_MANY_REDIRECTS"/>
        /// </summary>
        public static int ERROR_TOO_MANY_REDIRECTS { get { if (!_ERROR_TOO_MANY_REDIRECTSReady) { _ERROR_TOO_MANY_REDIRECTSContent = SGetField<int>(LocalBridgeClazz, "ERROR_TOO_MANY_REDIRECTS"); _ERROR_TOO_MANY_REDIRECTSReady = true; } return _ERROR_TOO_MANY_REDIRECTSContent; } }
        private static int _ERROR_TOO_MANY_REDIRECTSContent = default;
        private static bool _ERROR_TOO_MANY_REDIRECTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#ERROR_UNHANDLED_HTTP_CODE"/>
        /// </summary>
        public static int ERROR_UNHANDLED_HTTP_CODE { get { if (!_ERROR_UNHANDLED_HTTP_CODEReady) { _ERROR_UNHANDLED_HTTP_CODEContent = SGetField<int>(LocalBridgeClazz, "ERROR_UNHANDLED_HTTP_CODE"); _ERROR_UNHANDLED_HTTP_CODEReady = true; } return _ERROR_UNHANDLED_HTTP_CODEContent; } }
        private static int _ERROR_UNHANDLED_HTTP_CODEContent = default;
        private static bool _ERROR_UNHANDLED_HTTP_CODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#ERROR_UNKNOWN"/>
        /// </summary>
        public static int ERROR_UNKNOWN { get { if (!_ERROR_UNKNOWNReady) { _ERROR_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "ERROR_UNKNOWN"); _ERROR_UNKNOWNReady = true; } return _ERROR_UNKNOWNContent; } }
        private static int _ERROR_UNKNOWNContent = default;
        private static bool _ERROR_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#PAUSED_QUEUED_FOR_WIFI"/>
        /// </summary>
        public static int PAUSED_QUEUED_FOR_WIFI { get { if (!_PAUSED_QUEUED_FOR_WIFIReady) { _PAUSED_QUEUED_FOR_WIFIContent = SGetField<int>(LocalBridgeClazz, "PAUSED_QUEUED_FOR_WIFI"); _PAUSED_QUEUED_FOR_WIFIReady = true; } return _PAUSED_QUEUED_FOR_WIFIContent; } }
        private static int _PAUSED_QUEUED_FOR_WIFIContent = default;
        private static bool _PAUSED_QUEUED_FOR_WIFIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#PAUSED_UNKNOWN"/>
        /// </summary>
        public static int PAUSED_UNKNOWN { get { if (!_PAUSED_UNKNOWNReady) { _PAUSED_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "PAUSED_UNKNOWN"); _PAUSED_UNKNOWNReady = true; } return _PAUSED_UNKNOWNContent; } }
        private static int _PAUSED_UNKNOWNContent = default;
        private static bool _PAUSED_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#PAUSED_WAITING_FOR_NETWORK"/>
        /// </summary>
        public static int PAUSED_WAITING_FOR_NETWORK { get { if (!_PAUSED_WAITING_FOR_NETWORKReady) { _PAUSED_WAITING_FOR_NETWORKContent = SGetField<int>(LocalBridgeClazz, "PAUSED_WAITING_FOR_NETWORK"); _PAUSED_WAITING_FOR_NETWORKReady = true; } return _PAUSED_WAITING_FOR_NETWORKContent; } }
        private static int _PAUSED_WAITING_FOR_NETWORKContent = default;
        private static bool _PAUSED_WAITING_FOR_NETWORKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#PAUSED_WAITING_TO_RETRY"/>
        /// </summary>
        public static int PAUSED_WAITING_TO_RETRY { get { if (!_PAUSED_WAITING_TO_RETRYReady) { _PAUSED_WAITING_TO_RETRYContent = SGetField<int>(LocalBridgeClazz, "PAUSED_WAITING_TO_RETRY"); _PAUSED_WAITING_TO_RETRYReady = true; } return _PAUSED_WAITING_TO_RETRYContent; } }
        private static int _PAUSED_WAITING_TO_RETRYContent = default;
        private static bool _PAUSED_WAITING_TO_RETRYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#STATUS_FAILED"/>
        /// </summary>
        public static int STATUS_FAILED { get { if (!_STATUS_FAILEDReady) { _STATUS_FAILEDContent = SGetField<int>(LocalBridgeClazz, "STATUS_FAILED"); _STATUS_FAILEDReady = true; } return _STATUS_FAILEDContent; } }
        private static int _STATUS_FAILEDContent = default;
        private static bool _STATUS_FAILEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#STATUS_PAUSED"/>
        /// </summary>
        public static int STATUS_PAUSED { get { if (!_STATUS_PAUSEDReady) { _STATUS_PAUSEDContent = SGetField<int>(LocalBridgeClazz, "STATUS_PAUSED"); _STATUS_PAUSEDReady = true; } return _STATUS_PAUSEDContent; } }
        private static int _STATUS_PAUSEDContent = default;
        private static bool _STATUS_PAUSEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#STATUS_PENDING"/>
        /// </summary>
        public static int STATUS_PENDING { get { if (!_STATUS_PENDINGReady) { _STATUS_PENDINGContent = SGetField<int>(LocalBridgeClazz, "STATUS_PENDING"); _STATUS_PENDINGReady = true; } return _STATUS_PENDINGContent; } }
        private static int _STATUS_PENDINGContent = default;
        private static bool _STATUS_PENDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#STATUS_RUNNING"/>
        /// </summary>
        public static int STATUS_RUNNING { get { if (!_STATUS_RUNNINGReady) { _STATUS_RUNNINGContent = SGetField<int>(LocalBridgeClazz, "STATUS_RUNNING"); _STATUS_RUNNINGReady = true; } return _STATUS_RUNNINGContent; } }
        private static int _STATUS_RUNNINGContent = default;
        private static bool _STATUS_RUNNINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#STATUS_SUCCESSFUL"/>
        /// </summary>
        public static int STATUS_SUCCESSFUL { get { if (!_STATUS_SUCCESSFULReady) { _STATUS_SUCCESSFULContent = SGetField<int>(LocalBridgeClazz, "STATUS_SUCCESSFUL"); _STATUS_SUCCESSFULReady = true; } return _STATUS_SUCCESSFULContent; } }
        private static int _STATUS_SUCCESSFULContent = default;
        private static bool _STATUS_SUCCESSFULReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#ACTION_DOWNLOAD_COMPLETE"/>
        /// </summary>
        public static Java.Lang.String ACTION_DOWNLOAD_COMPLETE { get { if (!_ACTION_DOWNLOAD_COMPLETEReady) { _ACTION_DOWNLOAD_COMPLETEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_DOWNLOAD_COMPLETE"); _ACTION_DOWNLOAD_COMPLETEReady = true; } return _ACTION_DOWNLOAD_COMPLETEContent; } }
        private static Java.Lang.String _ACTION_DOWNLOAD_COMPLETEContent = default;
        private static bool _ACTION_DOWNLOAD_COMPLETEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#ACTION_NOTIFICATION_CLICKED"/>
        /// </summary>
        public static Java.Lang.String ACTION_NOTIFICATION_CLICKED { get { if (!_ACTION_NOTIFICATION_CLICKEDReady) { _ACTION_NOTIFICATION_CLICKEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_NOTIFICATION_CLICKED"); _ACTION_NOTIFICATION_CLICKEDReady = true; } return _ACTION_NOTIFICATION_CLICKEDContent; } }
        private static Java.Lang.String _ACTION_NOTIFICATION_CLICKEDContent = default;
        private static bool _ACTION_NOTIFICATION_CLICKEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#ACTION_VIEW_DOWNLOADS"/>
        /// </summary>
        public static Java.Lang.String ACTION_VIEW_DOWNLOADS { get { if (!_ACTION_VIEW_DOWNLOADSReady) { _ACTION_VIEW_DOWNLOADSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_VIEW_DOWNLOADS"); _ACTION_VIEW_DOWNLOADSReady = true; } return _ACTION_VIEW_DOWNLOADSContent; } }
        private static Java.Lang.String _ACTION_VIEW_DOWNLOADSContent = default;
        private static bool _ACTION_VIEW_DOWNLOADSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#COLUMN_BYTES_DOWNLOADED_SO_FAR"/>
        /// </summary>
        public static Java.Lang.String COLUMN_BYTES_DOWNLOADED_SO_FAR { get { if (!_COLUMN_BYTES_DOWNLOADED_SO_FARReady) { _COLUMN_BYTES_DOWNLOADED_SO_FARContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COLUMN_BYTES_DOWNLOADED_SO_FAR"); _COLUMN_BYTES_DOWNLOADED_SO_FARReady = true; } return _COLUMN_BYTES_DOWNLOADED_SO_FARContent; } }
        private static Java.Lang.String _COLUMN_BYTES_DOWNLOADED_SO_FARContent = default;
        private static bool _COLUMN_BYTES_DOWNLOADED_SO_FARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#COLUMN_DESCRIPTION"/>
        /// </summary>
        public static Java.Lang.String COLUMN_DESCRIPTION { get { if (!_COLUMN_DESCRIPTIONReady) { _COLUMN_DESCRIPTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COLUMN_DESCRIPTION"); _COLUMN_DESCRIPTIONReady = true; } return _COLUMN_DESCRIPTIONContent; } }
        private static Java.Lang.String _COLUMN_DESCRIPTIONContent = default;
        private static bool _COLUMN_DESCRIPTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#COLUMN_ID"/>
        /// </summary>
        public static Java.Lang.String COLUMN_ID { get { if (!_COLUMN_IDReady) { _COLUMN_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COLUMN_ID"); _COLUMN_IDReady = true; } return _COLUMN_IDContent; } }
        private static Java.Lang.String _COLUMN_IDContent = default;
        private static bool _COLUMN_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#COLUMN_LAST_MODIFIED_TIMESTAMP"/>
        /// </summary>
        public static Java.Lang.String COLUMN_LAST_MODIFIED_TIMESTAMP { get { if (!_COLUMN_LAST_MODIFIED_TIMESTAMPReady) { _COLUMN_LAST_MODIFIED_TIMESTAMPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COLUMN_LAST_MODIFIED_TIMESTAMP"); _COLUMN_LAST_MODIFIED_TIMESTAMPReady = true; } return _COLUMN_LAST_MODIFIED_TIMESTAMPContent; } }
        private static Java.Lang.String _COLUMN_LAST_MODIFIED_TIMESTAMPContent = default;
        private static bool _COLUMN_LAST_MODIFIED_TIMESTAMPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#COLUMN_LOCAL_FILENAME"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String COLUMN_LOCAL_FILENAME { get { if (!_COLUMN_LOCAL_FILENAMEReady) { _COLUMN_LOCAL_FILENAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COLUMN_LOCAL_FILENAME"); _COLUMN_LOCAL_FILENAMEReady = true; } return _COLUMN_LOCAL_FILENAMEContent; } }
        private static Java.Lang.String _COLUMN_LOCAL_FILENAMEContent = default;
        private static bool _COLUMN_LOCAL_FILENAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#COLUMN_LOCAL_URI"/>
        /// </summary>
        public static Java.Lang.String COLUMN_LOCAL_URI { get { if (!_COLUMN_LOCAL_URIReady) { _COLUMN_LOCAL_URIContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COLUMN_LOCAL_URI"); _COLUMN_LOCAL_URIReady = true; } return _COLUMN_LOCAL_URIContent; } }
        private static Java.Lang.String _COLUMN_LOCAL_URIContent = default;
        private static bool _COLUMN_LOCAL_URIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#COLUMN_MEDIA_TYPE"/>
        /// </summary>
        public static Java.Lang.String COLUMN_MEDIA_TYPE { get { if (!_COLUMN_MEDIA_TYPEReady) { _COLUMN_MEDIA_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COLUMN_MEDIA_TYPE"); _COLUMN_MEDIA_TYPEReady = true; } return _COLUMN_MEDIA_TYPEContent; } }
        private static Java.Lang.String _COLUMN_MEDIA_TYPEContent = default;
        private static bool _COLUMN_MEDIA_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#COLUMN_MEDIAPROVIDER_URI"/>
        /// </summary>
        public static Java.Lang.String COLUMN_MEDIAPROVIDER_URI { get { if (!_COLUMN_MEDIAPROVIDER_URIReady) { _COLUMN_MEDIAPROVIDER_URIContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COLUMN_MEDIAPROVIDER_URI"); _COLUMN_MEDIAPROVIDER_URIReady = true; } return _COLUMN_MEDIAPROVIDER_URIContent; } }
        private static Java.Lang.String _COLUMN_MEDIAPROVIDER_URIContent = default;
        private static bool _COLUMN_MEDIAPROVIDER_URIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#COLUMN_REASON"/>
        /// </summary>
        public static Java.Lang.String COLUMN_REASON { get { if (!_COLUMN_REASONReady) { _COLUMN_REASONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COLUMN_REASON"); _COLUMN_REASONReady = true; } return _COLUMN_REASONContent; } }
        private static Java.Lang.String _COLUMN_REASONContent = default;
        private static bool _COLUMN_REASONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#COLUMN_STATUS"/>
        /// </summary>
        public static Java.Lang.String COLUMN_STATUS { get { if (!_COLUMN_STATUSReady) { _COLUMN_STATUSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COLUMN_STATUS"); _COLUMN_STATUSReady = true; } return _COLUMN_STATUSContent; } }
        private static Java.Lang.String _COLUMN_STATUSContent = default;
        private static bool _COLUMN_STATUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#COLUMN_TITLE"/>
        /// </summary>
        public static Java.Lang.String COLUMN_TITLE { get { if (!_COLUMN_TITLEReady) { _COLUMN_TITLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COLUMN_TITLE"); _COLUMN_TITLEReady = true; } return _COLUMN_TITLEContent; } }
        private static Java.Lang.String _COLUMN_TITLEContent = default;
        private static bool _COLUMN_TITLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#COLUMN_TOTAL_SIZE_BYTES"/>
        /// </summary>
        public static Java.Lang.String COLUMN_TOTAL_SIZE_BYTES { get { if (!_COLUMN_TOTAL_SIZE_BYTESReady) { _COLUMN_TOTAL_SIZE_BYTESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COLUMN_TOTAL_SIZE_BYTES"); _COLUMN_TOTAL_SIZE_BYTESReady = true; } return _COLUMN_TOTAL_SIZE_BYTESContent; } }
        private static Java.Lang.String _COLUMN_TOTAL_SIZE_BYTESContent = default;
        private static bool _COLUMN_TOTAL_SIZE_BYTESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#COLUMN_URI"/>
        /// </summary>
        public static Java.Lang.String COLUMN_URI { get { if (!_COLUMN_URIReady) { _COLUMN_URIContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COLUMN_URI"); _COLUMN_URIReady = true; } return _COLUMN_URIContent; } }
        private static Java.Lang.String _COLUMN_URIContent = default;
        private static bool _COLUMN_URIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#EXTRA_DOWNLOAD_ID"/>
        /// </summary>
        public static Java.Lang.String EXTRA_DOWNLOAD_ID { get { if (!_EXTRA_DOWNLOAD_IDReady) { _EXTRA_DOWNLOAD_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_DOWNLOAD_ID"); _EXTRA_DOWNLOAD_IDReady = true; } return _EXTRA_DOWNLOAD_IDContent; } }
        private static Java.Lang.String _EXTRA_DOWNLOAD_IDContent = default;
        private static bool _EXTRA_DOWNLOAD_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#EXTRA_NOTIFICATION_CLICK_DOWNLOAD_IDS"/>
        /// </summary>
        public static Java.Lang.String EXTRA_NOTIFICATION_CLICK_DOWNLOAD_IDS { get { if (!_EXTRA_NOTIFICATION_CLICK_DOWNLOAD_IDSReady) { _EXTRA_NOTIFICATION_CLICK_DOWNLOAD_IDSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_NOTIFICATION_CLICK_DOWNLOAD_IDS"); _EXTRA_NOTIFICATION_CLICK_DOWNLOAD_IDSReady = true; } return _EXTRA_NOTIFICATION_CLICK_DOWNLOAD_IDSContent; } }
        private static Java.Lang.String _EXTRA_NOTIFICATION_CLICK_DOWNLOAD_IDSContent = default;
        private static bool _EXTRA_NOTIFICATION_CLICK_DOWNLOAD_IDSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#INTENT_EXTRAS_SORT_BY_SIZE"/>
        /// </summary>
        public static Java.Lang.String INTENT_EXTRAS_SORT_BY_SIZE { get { if (!_INTENT_EXTRAS_SORT_BY_SIZEReady) { _INTENT_EXTRAS_SORT_BY_SIZEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "INTENT_EXTRAS_SORT_BY_SIZE"); _INTENT_EXTRAS_SORT_BY_SIZEReady = true; } return _INTENT_EXTRAS_SORT_BY_SIZEContent; } }
        private static Java.Lang.String _INTENT_EXTRAS_SORT_BY_SIZEContent = default;
        private static bool _INTENT_EXTRAS_SORT_BY_SIZEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#getMaxBytesOverMobile(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <returns><see cref="Java.Lang.Long"/></returns>
        public static Java.Lang.Long GetMaxBytesOverMobile(Android.Content.Context arg0)
        {
            return SExecuteWithSignature<Java.Lang.Long>(LocalBridgeClazz, "getMaxBytesOverMobile", "(Landroid/content/Context;)Ljava/lang/Long;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#getRecommendedMaxBytesOverMobile(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <returns><see cref="Java.Lang.Long"/></returns>
        public static Java.Lang.Long GetRecommendedMaxBytesOverMobile(Android.Content.Context arg0)
        {
            return SExecuteWithSignature<Java.Lang.Long>(LocalBridgeClazz, "getRecommendedMaxBytesOverMobile", "(Landroid/content/Context;)Ljava/lang/Long;", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#query(android.app.DownloadManager.Query)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.DownloadManager.Query"/></param>
        /// <returns><see cref="Android.Database.Cursor"/></returns>
        public Android.Database.Cursor QueryMethod(Android.App.DownloadManager.Query arg0)
        {
            return IExecuteWithSignature<Android.Database.Cursor>("query", "(Landroid/app/DownloadManager$Query;)Landroid/database/Cursor;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#getUriForDownloadedFile(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="Android.Net.Uri"/></returns>
        public Android.Net.Uri GetUriForDownloadedFile(long arg0)
        {
            return IExecuteWithSignature<Android.Net.Uri>("getUriForDownloadedFile", "(J)Landroid/net/Uri;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#openDownloadedFile(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="Android.Os.ParcelFileDescriptor"/></returns>
        /// <exception cref="Java.Io.FileNotFoundException"/>
        public Android.Os.ParcelFileDescriptor OpenDownloadedFile(long arg0)
        {
            return IExecuteWithSignature<Android.Os.ParcelFileDescriptor>("openDownloadedFile", "(J)Landroid/os/ParcelFileDescriptor;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#remove(long[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="int"/></returns>
        public int Remove(params long[] arg0)
        {
            if (arg0.Length == 0) return IExecuteWithSignature<int>("remove", "([J)I"); else return IExecuteWithSignature<int>("remove", "([J)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#getMimeTypeForDownloadedFile(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetMimeTypeForDownloadedFile(long arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getMimeTypeForDownloadedFile", "(J)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean,android.net.Uri,android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <param name="arg4"><see cref="Java.Lang.String"/></param>
        /// <param name="arg5"><see cref="long"/></param>
        /// <param name="arg6"><see cref="bool"/></param>
        /// <param name="arg7"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg8"><see cref="Android.Net.Uri"/></param>
        /// <returns><see cref="long"/></returns>
        [global::System.Obsolete()]
        public long AddCompletedDownload(Java.Lang.String arg0, Java.Lang.String arg1, bool arg2, Java.Lang.String arg3, Java.Lang.String arg4, long arg5, bool arg6, Android.Net.Uri arg7, Android.Net.Uri arg8)
        {
            return IExecute<long>("addCompletedDownload", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <param name="arg4"><see cref="Java.Lang.String"/></param>
        /// <param name="arg5"><see cref="long"/></param>
        /// <param name="arg6"><see cref="bool"/></param>
        /// <returns><see cref="long"/></returns>
        [global::System.Obsolete()]
        public long AddCompletedDownload(Java.Lang.String arg0, Java.Lang.String arg1, bool arg2, Java.Lang.String arg3, Java.Lang.String arg4, long arg5, bool arg6)
        {
            return IExecute<long>("addCompletedDownload", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/DownloadManager.html#enqueue(android.app.DownloadManager.Request)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.DownloadManager.Request"/></param>
        /// <returns><see cref="long"/></returns>
        public long Enqueue(Android.App.DownloadManager.Request arg0)
        {
            return IExecuteWithSignature<long>("enqueue", "(Landroid/app/DownloadManager$Request;)J", arg0);
        }

        #endregion

        #region Nested classes
        #region Query
        public partial class Query
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/DownloadManager.Query.html#setFilterById(long[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.App.DownloadManager.Query"/></returns>
            public Android.App.DownloadManager.Query SetFilterById(params long[] arg0)
            {
                if (arg0.Length == 0) return IExecuteWithSignature<Android.App.DownloadManager.Query>("setFilterById", "([J)Landroid/app/DownloadManager$Query;"); else return IExecuteWithSignature<Android.App.DownloadManager.Query>("setFilterById", "([J)Landroid/app/DownloadManager$Query;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/DownloadManager.Query.html#setFilterByStatus(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.App.DownloadManager.Query"/></returns>
            public Android.App.DownloadManager.Query SetFilterByStatus(int arg0)
            {
                return IExecuteWithSignature<Android.App.DownloadManager.Query>("setFilterByStatus", "(I)Landroid/app/DownloadManager$Query;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Request
        public partial class Request
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/DownloadManager.Request.html#%3Cinit%3E(android.net.Uri)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
            public Request(Android.Net.Uri arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/DownloadManager.Request.html#NETWORK_MOBILE"/>
            /// </summary>
            public static int NETWORK_MOBILE { get { if (!_NETWORK_MOBILEReady) { _NETWORK_MOBILEContent = SGetField<int>(LocalBridgeClazz, "NETWORK_MOBILE"); _NETWORK_MOBILEReady = true; } return _NETWORK_MOBILEContent; } }
            private static int _NETWORK_MOBILEContent = default;
            private static bool _NETWORK_MOBILEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/DownloadManager.Request.html#NETWORK_WIFI"/>
            /// </summary>
            public static int NETWORK_WIFI { get { if (!_NETWORK_WIFIReady) { _NETWORK_WIFIContent = SGetField<int>(LocalBridgeClazz, "NETWORK_WIFI"); _NETWORK_WIFIReady = true; } return _NETWORK_WIFIContent; } }
            private static int _NETWORK_WIFIContent = default;
            private static bool _NETWORK_WIFIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/DownloadManager.Request.html#VISIBILITY_HIDDEN"/>
            /// </summary>
            public static int VISIBILITY_HIDDEN { get { if (!_VISIBILITY_HIDDENReady) { _VISIBILITY_HIDDENContent = SGetField<int>(LocalBridgeClazz, "VISIBILITY_HIDDEN"); _VISIBILITY_HIDDENReady = true; } return _VISIBILITY_HIDDENContent; } }
            private static int _VISIBILITY_HIDDENContent = default;
            private static bool _VISIBILITY_HIDDENReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/DownloadManager.Request.html#VISIBILITY_VISIBLE"/>
            /// </summary>
            public static int VISIBILITY_VISIBLE { get { if (!_VISIBILITY_VISIBLEReady) { _VISIBILITY_VISIBLEContent = SGetField<int>(LocalBridgeClazz, "VISIBILITY_VISIBLE"); _VISIBILITY_VISIBLEReady = true; } return _VISIBILITY_VISIBLEContent; } }
            private static int _VISIBILITY_VISIBLEContent = default;
            private static bool _VISIBILITY_VISIBLEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/DownloadManager.Request.html#VISIBILITY_VISIBLE_NOTIFY_COMPLETED"/>
            /// </summary>
            public static int VISIBILITY_VISIBLE_NOTIFY_COMPLETED { get { if (!_VISIBILITY_VISIBLE_NOTIFY_COMPLETEDReady) { _VISIBILITY_VISIBLE_NOTIFY_COMPLETEDContent = SGetField<int>(LocalBridgeClazz, "VISIBILITY_VISIBLE_NOTIFY_COMPLETED"); _VISIBILITY_VISIBLE_NOTIFY_COMPLETEDReady = true; } return _VISIBILITY_VISIBLE_NOTIFY_COMPLETEDContent; } }
            private static int _VISIBILITY_VISIBLE_NOTIFY_COMPLETEDContent = default;
            private static bool _VISIBILITY_VISIBLE_NOTIFY_COMPLETEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/DownloadManager.Request.html#VISIBILITY_VISIBLE_NOTIFY_ONLY_COMPLETION"/>
            /// </summary>
            public static int VISIBILITY_VISIBLE_NOTIFY_ONLY_COMPLETION { get { if (!_VISIBILITY_VISIBLE_NOTIFY_ONLY_COMPLETIONReady) { _VISIBILITY_VISIBLE_NOTIFY_ONLY_COMPLETIONContent = SGetField<int>(LocalBridgeClazz, "VISIBILITY_VISIBLE_NOTIFY_ONLY_COMPLETION"); _VISIBILITY_VISIBLE_NOTIFY_ONLY_COMPLETIONReady = true; } return _VISIBILITY_VISIBLE_NOTIFY_ONLY_COMPLETIONContent; } }
            private static int _VISIBILITY_VISIBLE_NOTIFY_ONLY_COMPLETIONContent = default;
            private static bool _VISIBILITY_VISIBLE_NOTIFY_ONLY_COMPLETIONReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/DownloadManager.Request.html#addRequestHeader(java.lang.String,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.App.DownloadManager.Request"/></returns>
            public Android.App.DownloadManager.Request AddRequestHeader(Java.Lang.String arg0, Java.Lang.String arg1)
            {
                return IExecute<Android.App.DownloadManager.Request>("addRequestHeader", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/DownloadManager.Request.html#setAllowedNetworkTypes(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.App.DownloadManager.Request"/></returns>
            public Android.App.DownloadManager.Request SetAllowedNetworkTypes(int arg0)
            {
                return IExecuteWithSignature<Android.App.DownloadManager.Request>("setAllowedNetworkTypes", "(I)Landroid/app/DownloadManager$Request;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/DownloadManager.Request.html#setAllowedOverMetered(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.App.DownloadManager.Request"/></returns>
            public Android.App.DownloadManager.Request SetAllowedOverMetered(bool arg0)
            {
                return IExecuteWithSignature<Android.App.DownloadManager.Request>("setAllowedOverMetered", "(Z)Landroid/app/DownloadManager$Request;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/DownloadManager.Request.html#setAllowedOverRoaming(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.App.DownloadManager.Request"/></returns>
            public Android.App.DownloadManager.Request SetAllowedOverRoaming(bool arg0)
            {
                return IExecuteWithSignature<Android.App.DownloadManager.Request>("setAllowedOverRoaming", "(Z)Landroid/app/DownloadManager$Request;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/DownloadManager.Request.html#setDescription(java.lang.CharSequence)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
            /// <returns><see cref="Android.App.DownloadManager.Request"/></returns>
            public Android.App.DownloadManager.Request SetDescription(Java.Lang.CharSequence arg0)
            {
                return IExecuteWithSignature<Android.App.DownloadManager.Request>("setDescription", "(Ljava/lang/CharSequence;)Landroid/app/DownloadManager$Request;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/DownloadManager.Request.html#setDestinationInExternalFilesDir(android.content.Context,java.lang.String,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.Context"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <param name="arg2"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.App.DownloadManager.Request"/></returns>
            public Android.App.DownloadManager.Request SetDestinationInExternalFilesDir(Android.Content.Context arg0, Java.Lang.String arg1, Java.Lang.String arg2)
            {
                return IExecute<Android.App.DownloadManager.Request>("setDestinationInExternalFilesDir", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/DownloadManager.Request.html#setDestinationInExternalPublicDir(java.lang.String,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.App.DownloadManager.Request"/></returns>
            public Android.App.DownloadManager.Request SetDestinationInExternalPublicDir(Java.Lang.String arg0, Java.Lang.String arg1)
            {
                return IExecute<Android.App.DownloadManager.Request>("setDestinationInExternalPublicDir", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/DownloadManager.Request.html#setDestinationUri(android.net.Uri)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
            /// <returns><see cref="Android.App.DownloadManager.Request"/></returns>
            public Android.App.DownloadManager.Request SetDestinationUri(Android.Net.Uri arg0)
            {
                return IExecuteWithSignature<Android.App.DownloadManager.Request>("setDestinationUri", "(Landroid/net/Uri;)Landroid/app/DownloadManager$Request;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/DownloadManager.Request.html#setMimeType(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.App.DownloadManager.Request"/></returns>
            public Android.App.DownloadManager.Request SetMimeType(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.App.DownloadManager.Request>("setMimeType", "(Ljava/lang/String;)Landroid/app/DownloadManager$Request;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/DownloadManager.Request.html#setNotificationVisibility(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.App.DownloadManager.Request"/></returns>
            public Android.App.DownloadManager.Request SetNotificationVisibility(int arg0)
            {
                return IExecuteWithSignature<Android.App.DownloadManager.Request>("setNotificationVisibility", "(I)Landroid/app/DownloadManager$Request;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/DownloadManager.Request.html#setRequiresCharging(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.App.DownloadManager.Request"/></returns>
            public Android.App.DownloadManager.Request SetRequiresCharging(bool arg0)
            {
                return IExecuteWithSignature<Android.App.DownloadManager.Request>("setRequiresCharging", "(Z)Landroid/app/DownloadManager$Request;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/DownloadManager.Request.html#setRequiresDeviceIdle(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.App.DownloadManager.Request"/></returns>
            public Android.App.DownloadManager.Request SetRequiresDeviceIdle(bool arg0)
            {
                return IExecuteWithSignature<Android.App.DownloadManager.Request>("setRequiresDeviceIdle", "(Z)Landroid/app/DownloadManager$Request;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/DownloadManager.Request.html#setShowRunningNotification(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.App.DownloadManager.Request"/></returns>
            [global::System.Obsolete()]
            public Android.App.DownloadManager.Request SetShowRunningNotification(bool arg0)
            {
                return IExecuteWithSignature<Android.App.DownloadManager.Request>("setShowRunningNotification", "(Z)Landroid/app/DownloadManager$Request;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/DownloadManager.Request.html#setTitle(java.lang.CharSequence)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
            /// <returns><see cref="Android.App.DownloadManager.Request"/></returns>
            public Android.App.DownloadManager.Request SetTitle(Java.Lang.CharSequence arg0)
            {
                return IExecuteWithSignature<Android.App.DownloadManager.Request>("setTitle", "(Ljava/lang/CharSequence;)Landroid/app/DownloadManager$Request;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/DownloadManager.Request.html#setVisibleInDownloadsUi(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.App.DownloadManager.Request"/></returns>
            [global::System.Obsolete()]
            public Android.App.DownloadManager.Request SetVisibleInDownloadsUi(bool arg0)
            {
                return IExecuteWithSignature<Android.App.DownloadManager.Request>("setVisibleInDownloadsUi", "(Z)Landroid/app/DownloadManager$Request;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/DownloadManager.Request.html#allowScanningByMediaScanner()"/>
            /// </summary>
            [global::System.Obsolete()]
            public void AllowScanningByMediaScanner()
            {
                IExecuteWithSignature("allowScanningByMediaScanner", "()V");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.6.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.App
{
    #region AppOpsManager
    public partial class AppOpsManager
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#MODE_ALLOWED"/>
        /// </summary>
        public static int MODE_ALLOWED { get { if (!_MODE_ALLOWEDReady) { _MODE_ALLOWEDContent = SGetField<int>(LocalBridgeClazz, "MODE_ALLOWED"); _MODE_ALLOWEDReady = true; } return _MODE_ALLOWEDContent; } }
        private static int _MODE_ALLOWEDContent = default;
        private static bool _MODE_ALLOWEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#MODE_DEFAULT"/>
        /// </summary>
        public static int MODE_DEFAULT { get { if (!_MODE_DEFAULTReady) { _MODE_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "MODE_DEFAULT"); _MODE_DEFAULTReady = true; } return _MODE_DEFAULTContent; } }
        private static int _MODE_DEFAULTContent = default;
        private static bool _MODE_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#MODE_ERRORED"/>
        /// </summary>
        public static int MODE_ERRORED { get { if (!_MODE_ERROREDReady) { _MODE_ERROREDContent = SGetField<int>(LocalBridgeClazz, "MODE_ERRORED"); _MODE_ERROREDReady = true; } return _MODE_ERROREDContent; } }
        private static int _MODE_ERROREDContent = default;
        private static bool _MODE_ERROREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#MODE_FOREGROUND"/>
        /// </summary>
        public static int MODE_FOREGROUND { get { if (!_MODE_FOREGROUNDReady) { _MODE_FOREGROUNDContent = SGetField<int>(LocalBridgeClazz, "MODE_FOREGROUND"); _MODE_FOREGROUNDReady = true; } return _MODE_FOREGROUNDContent; } }
        private static int _MODE_FOREGROUNDContent = default;
        private static bool _MODE_FOREGROUNDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#MODE_IGNORED"/>
        /// </summary>
        public static int MODE_IGNORED { get { if (!_MODE_IGNOREDReady) { _MODE_IGNOREDContent = SGetField<int>(LocalBridgeClazz, "MODE_IGNORED"); _MODE_IGNOREDReady = true; } return _MODE_IGNOREDContent; } }
        private static int _MODE_IGNOREDContent = default;
        private static bool _MODE_IGNOREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#WATCH_FOREGROUND_CHANGES"/>
        /// </summary>
        public static int WATCH_FOREGROUND_CHANGES { get { if (!_WATCH_FOREGROUND_CHANGESReady) { _WATCH_FOREGROUND_CHANGESContent = SGetField<int>(LocalBridgeClazz, "WATCH_FOREGROUND_CHANGES"); _WATCH_FOREGROUND_CHANGESReady = true; } return _WATCH_FOREGROUND_CHANGESContent; } }
        private static int _WATCH_FOREGROUND_CHANGESContent = default;
        private static bool _WATCH_FOREGROUND_CHANGESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_ADD_VOICEMAIL"/>
        /// </summary>
        public static Java.Lang.String OPSTR_ADD_VOICEMAIL { get { if (!_OPSTR_ADD_VOICEMAILReady) { _OPSTR_ADD_VOICEMAILContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OPSTR_ADD_VOICEMAIL"); _OPSTR_ADD_VOICEMAILReady = true; } return _OPSTR_ADD_VOICEMAILContent; } }
        private static Java.Lang.String _OPSTR_ADD_VOICEMAILContent = default;
        private static bool _OPSTR_ADD_VOICEMAILReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_ANSWER_PHONE_CALLS"/>
        /// </summary>
        public static Java.Lang.String OPSTR_ANSWER_PHONE_CALLS { get { if (!_OPSTR_ANSWER_PHONE_CALLSReady) { _OPSTR_ANSWER_PHONE_CALLSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OPSTR_ANSWER_PHONE_CALLS"); _OPSTR_ANSWER_PHONE_CALLSReady = true; } return _OPSTR_ANSWER_PHONE_CALLSContent; } }
        private static Java.Lang.String _OPSTR_ANSWER_PHONE_CALLSContent = default;
        private static bool _OPSTR_ANSWER_PHONE_CALLSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_BODY_SENSORS"/>
        /// </summary>
        public static Java.Lang.String OPSTR_BODY_SENSORS { get { if (!_OPSTR_BODY_SENSORSReady) { _OPSTR_BODY_SENSORSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OPSTR_BODY_SENSORS"); _OPSTR_BODY_SENSORSReady = true; } return _OPSTR_BODY_SENSORSContent; } }
        private static Java.Lang.String _OPSTR_BODY_SENSORSContent = default;
        private static bool _OPSTR_BODY_SENSORSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_CALL_PHONE"/>
        /// </summary>
        public static Java.Lang.String OPSTR_CALL_PHONE { get { if (!_OPSTR_CALL_PHONEReady) { _OPSTR_CALL_PHONEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OPSTR_CALL_PHONE"); _OPSTR_CALL_PHONEReady = true; } return _OPSTR_CALL_PHONEContent; } }
        private static Java.Lang.String _OPSTR_CALL_PHONEContent = default;
        private static bool _OPSTR_CALL_PHONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_CAMERA"/>
        /// </summary>
        public static Java.Lang.String OPSTR_CAMERA { get { if (!_OPSTR_CAMERAReady) { _OPSTR_CAMERAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OPSTR_CAMERA"); _OPSTR_CAMERAReady = true; } return _OPSTR_CAMERAContent; } }
        private static Java.Lang.String _OPSTR_CAMERAContent = default;
        private static bool _OPSTR_CAMERAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_COARSE_LOCATION"/>
        /// </summary>
        public static Java.Lang.String OPSTR_COARSE_LOCATION { get { if (!_OPSTR_COARSE_LOCATIONReady) { _OPSTR_COARSE_LOCATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OPSTR_COARSE_LOCATION"); _OPSTR_COARSE_LOCATIONReady = true; } return _OPSTR_COARSE_LOCATIONContent; } }
        private static Java.Lang.String _OPSTR_COARSE_LOCATIONContent = default;
        private static bool _OPSTR_COARSE_LOCATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_FINE_LOCATION"/>
        /// </summary>
        public static Java.Lang.String OPSTR_FINE_LOCATION { get { if (!_OPSTR_FINE_LOCATIONReady) { _OPSTR_FINE_LOCATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OPSTR_FINE_LOCATION"); _OPSTR_FINE_LOCATIONReady = true; } return _OPSTR_FINE_LOCATIONContent; } }
        private static Java.Lang.String _OPSTR_FINE_LOCATIONContent = default;
        private static bool _OPSTR_FINE_LOCATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_GET_USAGE_STATS"/>
        /// </summary>
        public static Java.Lang.String OPSTR_GET_USAGE_STATS { get { if (!_OPSTR_GET_USAGE_STATSReady) { _OPSTR_GET_USAGE_STATSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OPSTR_GET_USAGE_STATS"); _OPSTR_GET_USAGE_STATSReady = true; } return _OPSTR_GET_USAGE_STATSContent; } }
        private static Java.Lang.String _OPSTR_GET_USAGE_STATSContent = default;
        private static bool _OPSTR_GET_USAGE_STATSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_MOCK_LOCATION"/>
        /// </summary>
        public static Java.Lang.String OPSTR_MOCK_LOCATION { get { if (!_OPSTR_MOCK_LOCATIONReady) { _OPSTR_MOCK_LOCATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OPSTR_MOCK_LOCATION"); _OPSTR_MOCK_LOCATIONReady = true; } return _OPSTR_MOCK_LOCATIONContent; } }
        private static Java.Lang.String _OPSTR_MOCK_LOCATIONContent = default;
        private static bool _OPSTR_MOCK_LOCATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_MONITOR_HIGH_POWER_LOCATION"/>
        /// </summary>
        public static Java.Lang.String OPSTR_MONITOR_HIGH_POWER_LOCATION { get { if (!_OPSTR_MONITOR_HIGH_POWER_LOCATIONReady) { _OPSTR_MONITOR_HIGH_POWER_LOCATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OPSTR_MONITOR_HIGH_POWER_LOCATION"); _OPSTR_MONITOR_HIGH_POWER_LOCATIONReady = true; } return _OPSTR_MONITOR_HIGH_POWER_LOCATIONContent; } }
        private static Java.Lang.String _OPSTR_MONITOR_HIGH_POWER_LOCATIONContent = default;
        private static bool _OPSTR_MONITOR_HIGH_POWER_LOCATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_MONITOR_LOCATION"/>
        /// </summary>
        public static Java.Lang.String OPSTR_MONITOR_LOCATION { get { if (!_OPSTR_MONITOR_LOCATIONReady) { _OPSTR_MONITOR_LOCATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OPSTR_MONITOR_LOCATION"); _OPSTR_MONITOR_LOCATIONReady = true; } return _OPSTR_MONITOR_LOCATIONContent; } }
        private static Java.Lang.String _OPSTR_MONITOR_LOCATIONContent = default;
        private static bool _OPSTR_MONITOR_LOCATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_PICTURE_IN_PICTURE"/>
        /// </summary>
        public static Java.Lang.String OPSTR_PICTURE_IN_PICTURE { get { if (!_OPSTR_PICTURE_IN_PICTUREReady) { _OPSTR_PICTURE_IN_PICTUREContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OPSTR_PICTURE_IN_PICTURE"); _OPSTR_PICTURE_IN_PICTUREReady = true; } return _OPSTR_PICTURE_IN_PICTUREContent; } }
        private static Java.Lang.String _OPSTR_PICTURE_IN_PICTUREContent = default;
        private static bool _OPSTR_PICTURE_IN_PICTUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_PROCESS_OUTGOING_CALLS"/>
        /// </summary>
        public static Java.Lang.String OPSTR_PROCESS_OUTGOING_CALLS { get { if (!_OPSTR_PROCESS_OUTGOING_CALLSReady) { _OPSTR_PROCESS_OUTGOING_CALLSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OPSTR_PROCESS_OUTGOING_CALLS"); _OPSTR_PROCESS_OUTGOING_CALLSReady = true; } return _OPSTR_PROCESS_OUTGOING_CALLSContent; } }
        private static Java.Lang.String _OPSTR_PROCESS_OUTGOING_CALLSContent = default;
        private static bool _OPSTR_PROCESS_OUTGOING_CALLSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_READ_CALENDAR"/>
        /// </summary>
        public static Java.Lang.String OPSTR_READ_CALENDAR { get { if (!_OPSTR_READ_CALENDARReady) { _OPSTR_READ_CALENDARContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OPSTR_READ_CALENDAR"); _OPSTR_READ_CALENDARReady = true; } return _OPSTR_READ_CALENDARContent; } }
        private static Java.Lang.String _OPSTR_READ_CALENDARContent = default;
        private static bool _OPSTR_READ_CALENDARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_READ_CALL_LOG"/>
        /// </summary>
        public static Java.Lang.String OPSTR_READ_CALL_LOG { get { if (!_OPSTR_READ_CALL_LOGReady) { _OPSTR_READ_CALL_LOGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OPSTR_READ_CALL_LOG"); _OPSTR_READ_CALL_LOGReady = true; } return _OPSTR_READ_CALL_LOGContent; } }
        private static Java.Lang.String _OPSTR_READ_CALL_LOGContent = default;
        private static bool _OPSTR_READ_CALL_LOGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_READ_CELL_BROADCASTS"/>
        /// </summary>
        public static Java.Lang.String OPSTR_READ_CELL_BROADCASTS { get { if (!_OPSTR_READ_CELL_BROADCASTSReady) { _OPSTR_READ_CELL_BROADCASTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OPSTR_READ_CELL_BROADCASTS"); _OPSTR_READ_CELL_BROADCASTSReady = true; } return _OPSTR_READ_CELL_BROADCASTSContent; } }
        private static Java.Lang.String _OPSTR_READ_CELL_BROADCASTSContent = default;
        private static bool _OPSTR_READ_CELL_BROADCASTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_READ_CONTACTS"/>
        /// </summary>
        public static Java.Lang.String OPSTR_READ_CONTACTS { get { if (!_OPSTR_READ_CONTACTSReady) { _OPSTR_READ_CONTACTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OPSTR_READ_CONTACTS"); _OPSTR_READ_CONTACTSReady = true; } return _OPSTR_READ_CONTACTSContent; } }
        private static Java.Lang.String _OPSTR_READ_CONTACTSContent = default;
        private static bool _OPSTR_READ_CONTACTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_READ_EXTERNAL_STORAGE"/>
        /// </summary>
        public static Java.Lang.String OPSTR_READ_EXTERNAL_STORAGE { get { if (!_OPSTR_READ_EXTERNAL_STORAGEReady) { _OPSTR_READ_EXTERNAL_STORAGEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OPSTR_READ_EXTERNAL_STORAGE"); _OPSTR_READ_EXTERNAL_STORAGEReady = true; } return _OPSTR_READ_EXTERNAL_STORAGEContent; } }
        private static Java.Lang.String _OPSTR_READ_EXTERNAL_STORAGEContent = default;
        private static bool _OPSTR_READ_EXTERNAL_STORAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_READ_PHONE_NUMBERS"/>
        /// </summary>
        public static Java.Lang.String OPSTR_READ_PHONE_NUMBERS { get { if (!_OPSTR_READ_PHONE_NUMBERSReady) { _OPSTR_READ_PHONE_NUMBERSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OPSTR_READ_PHONE_NUMBERS"); _OPSTR_READ_PHONE_NUMBERSReady = true; } return _OPSTR_READ_PHONE_NUMBERSContent; } }
        private static Java.Lang.String _OPSTR_READ_PHONE_NUMBERSContent = default;
        private static bool _OPSTR_READ_PHONE_NUMBERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_READ_PHONE_STATE"/>
        /// </summary>
        public static Java.Lang.String OPSTR_READ_PHONE_STATE { get { if (!_OPSTR_READ_PHONE_STATEReady) { _OPSTR_READ_PHONE_STATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OPSTR_READ_PHONE_STATE"); _OPSTR_READ_PHONE_STATEReady = true; } return _OPSTR_READ_PHONE_STATEContent; } }
        private static Java.Lang.String _OPSTR_READ_PHONE_STATEContent = default;
        private static bool _OPSTR_READ_PHONE_STATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_READ_SMS"/>
        /// </summary>
        public static Java.Lang.String OPSTR_READ_SMS { get { if (!_OPSTR_READ_SMSReady) { _OPSTR_READ_SMSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OPSTR_READ_SMS"); _OPSTR_READ_SMSReady = true; } return _OPSTR_READ_SMSContent; } }
        private static Java.Lang.String _OPSTR_READ_SMSContent = default;
        private static bool _OPSTR_READ_SMSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_RECEIVE_MMS"/>
        /// </summary>
        public static Java.Lang.String OPSTR_RECEIVE_MMS { get { if (!_OPSTR_RECEIVE_MMSReady) { _OPSTR_RECEIVE_MMSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OPSTR_RECEIVE_MMS"); _OPSTR_RECEIVE_MMSReady = true; } return _OPSTR_RECEIVE_MMSContent; } }
        private static Java.Lang.String _OPSTR_RECEIVE_MMSContent = default;
        private static bool _OPSTR_RECEIVE_MMSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_RECEIVE_SMS"/>
        /// </summary>
        public static Java.Lang.String OPSTR_RECEIVE_SMS { get { if (!_OPSTR_RECEIVE_SMSReady) { _OPSTR_RECEIVE_SMSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OPSTR_RECEIVE_SMS"); _OPSTR_RECEIVE_SMSReady = true; } return _OPSTR_RECEIVE_SMSContent; } }
        private static Java.Lang.String _OPSTR_RECEIVE_SMSContent = default;
        private static bool _OPSTR_RECEIVE_SMSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_RECEIVE_WAP_PUSH"/>
        /// </summary>
        public static Java.Lang.String OPSTR_RECEIVE_WAP_PUSH { get { if (!_OPSTR_RECEIVE_WAP_PUSHReady) { _OPSTR_RECEIVE_WAP_PUSHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OPSTR_RECEIVE_WAP_PUSH"); _OPSTR_RECEIVE_WAP_PUSHReady = true; } return _OPSTR_RECEIVE_WAP_PUSHContent; } }
        private static Java.Lang.String _OPSTR_RECEIVE_WAP_PUSHContent = default;
        private static bool _OPSTR_RECEIVE_WAP_PUSHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_RECORD_AUDIO"/>
        /// </summary>
        public static Java.Lang.String OPSTR_RECORD_AUDIO { get { if (!_OPSTR_RECORD_AUDIOReady) { _OPSTR_RECORD_AUDIOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OPSTR_RECORD_AUDIO"); _OPSTR_RECORD_AUDIOReady = true; } return _OPSTR_RECORD_AUDIOContent; } }
        private static Java.Lang.String _OPSTR_RECORD_AUDIOContent = default;
        private static bool _OPSTR_RECORD_AUDIOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_SEND_SMS"/>
        /// </summary>
        public static Java.Lang.String OPSTR_SEND_SMS { get { if (!_OPSTR_SEND_SMSReady) { _OPSTR_SEND_SMSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OPSTR_SEND_SMS"); _OPSTR_SEND_SMSReady = true; } return _OPSTR_SEND_SMSContent; } }
        private static Java.Lang.String _OPSTR_SEND_SMSContent = default;
        private static bool _OPSTR_SEND_SMSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_SYSTEM_ALERT_WINDOW"/>
        /// </summary>
        public static Java.Lang.String OPSTR_SYSTEM_ALERT_WINDOW { get { if (!_OPSTR_SYSTEM_ALERT_WINDOWReady) { _OPSTR_SYSTEM_ALERT_WINDOWContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OPSTR_SYSTEM_ALERT_WINDOW"); _OPSTR_SYSTEM_ALERT_WINDOWReady = true; } return _OPSTR_SYSTEM_ALERT_WINDOWContent; } }
        private static Java.Lang.String _OPSTR_SYSTEM_ALERT_WINDOWContent = default;
        private static bool _OPSTR_SYSTEM_ALERT_WINDOWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_USE_FINGERPRINT"/>
        /// </summary>
        public static Java.Lang.String OPSTR_USE_FINGERPRINT { get { if (!_OPSTR_USE_FINGERPRINTReady) { _OPSTR_USE_FINGERPRINTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OPSTR_USE_FINGERPRINT"); _OPSTR_USE_FINGERPRINTReady = true; } return _OPSTR_USE_FINGERPRINTContent; } }
        private static Java.Lang.String _OPSTR_USE_FINGERPRINTContent = default;
        private static bool _OPSTR_USE_FINGERPRINTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_USE_SIP"/>
        /// </summary>
        public static Java.Lang.String OPSTR_USE_SIP { get { if (!_OPSTR_USE_SIPReady) { _OPSTR_USE_SIPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OPSTR_USE_SIP"); _OPSTR_USE_SIPReady = true; } return _OPSTR_USE_SIPContent; } }
        private static Java.Lang.String _OPSTR_USE_SIPContent = default;
        private static bool _OPSTR_USE_SIPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_WRITE_CALENDAR"/>
        /// </summary>
        public static Java.Lang.String OPSTR_WRITE_CALENDAR { get { if (!_OPSTR_WRITE_CALENDARReady) { _OPSTR_WRITE_CALENDARContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OPSTR_WRITE_CALENDAR"); _OPSTR_WRITE_CALENDARReady = true; } return _OPSTR_WRITE_CALENDARContent; } }
        private static Java.Lang.String _OPSTR_WRITE_CALENDARContent = default;
        private static bool _OPSTR_WRITE_CALENDARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_WRITE_CALL_LOG"/>
        /// </summary>
        public static Java.Lang.String OPSTR_WRITE_CALL_LOG { get { if (!_OPSTR_WRITE_CALL_LOGReady) { _OPSTR_WRITE_CALL_LOGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OPSTR_WRITE_CALL_LOG"); _OPSTR_WRITE_CALL_LOGReady = true; } return _OPSTR_WRITE_CALL_LOGContent; } }
        private static Java.Lang.String _OPSTR_WRITE_CALL_LOGContent = default;
        private static bool _OPSTR_WRITE_CALL_LOGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_WRITE_CONTACTS"/>
        /// </summary>
        public static Java.Lang.String OPSTR_WRITE_CONTACTS { get { if (!_OPSTR_WRITE_CONTACTSReady) { _OPSTR_WRITE_CONTACTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OPSTR_WRITE_CONTACTS"); _OPSTR_WRITE_CONTACTSReady = true; } return _OPSTR_WRITE_CONTACTSContent; } }
        private static Java.Lang.String _OPSTR_WRITE_CONTACTSContent = default;
        private static bool _OPSTR_WRITE_CONTACTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_WRITE_EXTERNAL_STORAGE"/>
        /// </summary>
        public static Java.Lang.String OPSTR_WRITE_EXTERNAL_STORAGE { get { if (!_OPSTR_WRITE_EXTERNAL_STORAGEReady) { _OPSTR_WRITE_EXTERNAL_STORAGEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OPSTR_WRITE_EXTERNAL_STORAGE"); _OPSTR_WRITE_EXTERNAL_STORAGEReady = true; } return _OPSTR_WRITE_EXTERNAL_STORAGEContent; } }
        private static Java.Lang.String _OPSTR_WRITE_EXTERNAL_STORAGEContent = default;
        private static bool _OPSTR_WRITE_EXTERNAL_STORAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_WRITE_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String OPSTR_WRITE_SETTINGS { get { if (!_OPSTR_WRITE_SETTINGSReady) { _OPSTR_WRITE_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OPSTR_WRITE_SETTINGS"); _OPSTR_WRITE_SETTINGSReady = true; } return _OPSTR_WRITE_SETTINGSContent; } }
        private static Java.Lang.String _OPSTR_WRITE_SETTINGSContent = default;
        private static bool _OPSTR_WRITE_SETTINGSReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#permissionToOp(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String PermissionToOp(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "permissionToOp", "(Ljava/lang/String;)Ljava/lang/String;", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#isOpActive(java.lang.String,int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsOpActive(Java.Lang.String arg0, int arg1, Java.Lang.String arg2)
        {
            return IExecute<bool>("isOpActive", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#checkOp(java.lang.String,int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int CheckOp(Java.Lang.String arg0, int arg1, Java.Lang.String arg2)
        {
            return IExecute<int>("checkOp", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#checkOpNoThrow(java.lang.String,int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int CheckOpNoThrow(Java.Lang.String arg0, int arg1, Java.Lang.String arg2)
        {
            return IExecute<int>("checkOpNoThrow", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#noteOp(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <param name="arg4"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public int NoteOp(Java.Lang.String arg0, int arg1, Java.Lang.String arg2, Java.Lang.String arg3, Java.Lang.String arg4)
        {
            return IExecute<int>("noteOp", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#noteOp(java.lang.String,int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int NoteOp(Java.Lang.String arg0, int arg1, Java.Lang.String arg2)
        {
            return IExecute<int>("noteOp", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#noteOpNoThrow(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <param name="arg4"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public int NoteOpNoThrow(Java.Lang.String arg0, int arg1, Java.Lang.String arg2, Java.Lang.String arg3, Java.Lang.String arg4)
        {
            return IExecute<int>("noteOpNoThrow", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#noteOpNoThrow(java.lang.String,int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int NoteOpNoThrow(Java.Lang.String arg0, int arg1, Java.Lang.String arg2)
        {
            return IExecute<int>("noteOpNoThrow", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#noteProxyOp(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <param name="arg4"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public int NoteProxyOp(Java.Lang.String arg0, Java.Lang.String arg1, int arg2, Java.Lang.String arg3, Java.Lang.String arg4)
        {
            return IExecute<int>("noteProxyOp", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#noteProxyOp(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int NoteProxyOp(Java.Lang.String arg0, Java.Lang.String arg1)
        {
            return IExecute<int>("noteProxyOp", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#noteProxyOpNoThrow(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <param name="arg4"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public int NoteProxyOpNoThrow(Java.Lang.String arg0, Java.Lang.String arg1, int arg2, Java.Lang.String arg3, Java.Lang.String arg4)
        {
            return IExecute<int>("noteProxyOpNoThrow", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#noteProxyOpNoThrow(java.lang.String,java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int NoteProxyOpNoThrow(Java.Lang.String arg0, Java.Lang.String arg1, int arg2)
        {
            return IExecute<int>("noteProxyOpNoThrow", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#noteProxyOpNoThrow(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int NoteProxyOpNoThrow(Java.Lang.String arg0, Java.Lang.String arg1)
        {
            return IExecute<int>("noteProxyOpNoThrow", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#startOp(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <param name="arg4"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public int StartOp(Java.Lang.String arg0, int arg1, Java.Lang.String arg2, Java.Lang.String arg3, Java.Lang.String arg4)
        {
            return IExecute<int>("startOp", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#startOp(java.lang.String,int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int StartOp(Java.Lang.String arg0, int arg1, Java.Lang.String arg2)
        {
            return IExecute<int>("startOp", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#startOpNoThrow(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <param name="arg4"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public int StartOpNoThrow(Java.Lang.String arg0, int arg1, Java.Lang.String arg2, Java.Lang.String arg3, Java.Lang.String arg4)
        {
            return IExecute<int>("startOpNoThrow", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#startOpNoThrow(java.lang.String,int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int StartOpNoThrow(Java.Lang.String arg0, int arg1, Java.Lang.String arg2)
        {
            return IExecute<int>("startOpNoThrow", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#startProxyOp(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <param name="arg4"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public int StartProxyOp(Java.Lang.String arg0, int arg1, Java.Lang.String arg2, Java.Lang.String arg3, Java.Lang.String arg4)
        {
            return IExecute<int>("startProxyOp", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#startProxyOpNoThrow(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <param name="arg4"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public int StartProxyOpNoThrow(Java.Lang.String arg0, int arg1, Java.Lang.String arg2, Java.Lang.String arg3, Java.Lang.String arg4)
        {
            return IExecute<int>("startProxyOpNoThrow", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#unsafeCheckOp(java.lang.String,int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public int UnsafeCheckOp(Java.Lang.String arg0, int arg1, Java.Lang.String arg2)
        {
            return IExecute<int>("unsafeCheckOp", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#unsafeCheckOpNoThrow(java.lang.String,int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public int UnsafeCheckOpNoThrow(Java.Lang.String arg0, int arg1, Java.Lang.String arg2)
        {
            return IExecute<int>("unsafeCheckOpNoThrow", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#unsafeCheckOpRaw(java.lang.String,int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public int UnsafeCheckOpRaw(Java.Lang.String arg0, int arg1, Java.Lang.String arg2)
        {
            return IExecute<int>("unsafeCheckOpRaw", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#unsafeCheckOpRawNoThrow(java.lang.String,int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public int UnsafeCheckOpRawNoThrow(Java.Lang.String arg0, int arg1, Java.Lang.String arg2)
        {
            return IExecute<int>("unsafeCheckOpRawNoThrow", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#checkPackage(int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        [global::System.Obsolete()]
        public void CheckPackage(int arg0, Java.Lang.String arg1)
        {
            IExecute("checkPackage", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#finishOp(java.lang.String,int,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        public void FinishOp(Java.Lang.String arg0, int arg1, Java.Lang.String arg2, Java.Lang.String arg3)
        {
            IExecute("finishOp", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#finishOp(java.lang.String,int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        [global::System.Obsolete()]
        public void FinishOp(Java.Lang.String arg0, int arg1, Java.Lang.String arg2)
        {
            IExecute("finishOp", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#finishProxyOp(java.lang.String,int,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        public void FinishProxyOp(Java.Lang.String arg0, int arg1, Java.Lang.String arg2, Java.Lang.String arg3)
        {
            IExecute("finishProxyOp", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#setOnOpNotedCallback(java.util.concurrent.Executor,android.app.AppOpsManager.OnOpNotedCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.App.AppOpsManager.OnOpNotedCallback"/></param>
        public void SetOnOpNotedCallback(Java.Util.Concurrent.Executor arg0, Android.App.AppOpsManager.OnOpNotedCallback arg1)
        {
            IExecute("setOnOpNotedCallback", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#startWatchingActive(java.lang.String[],java.util.concurrent.Executor,android.app.AppOpsManager.OnOpActiveChangedListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg2"><see cref="Android.App.AppOpsManager.OnOpActiveChangedListener"/></param>
        public void StartWatchingActive(Java.Lang.String[] arg0, Java.Util.Concurrent.Executor arg1, Android.App.AppOpsManager.OnOpActiveChangedListener arg2)
        {
            IExecute("startWatchingActive", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#startWatchingMode(java.lang.String,java.lang.String,android.app.AppOpsManager.OnOpChangedListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Android.App.AppOpsManager.OnOpChangedListener"/></param>
        public void StartWatchingMode(Java.Lang.String arg0, Java.Lang.String arg1, Android.App.AppOpsManager.OnOpChangedListener arg2)
        {
            IExecute("startWatchingMode", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#startWatchingMode(java.lang.String,java.lang.String,int,android.app.AppOpsManager.OnOpChangedListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Android.App.AppOpsManager.OnOpChangedListener"/></param>
        public void StartWatchingMode(Java.Lang.String arg0, Java.Lang.String arg1, int arg2, Android.App.AppOpsManager.OnOpChangedListener arg3)
        {
            IExecute("startWatchingMode", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#stopWatchingActive(android.app.AppOpsManager.OnOpActiveChangedListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.AppOpsManager.OnOpActiveChangedListener"/></param>
        public void StopWatchingActive(Android.App.AppOpsManager.OnOpActiveChangedListener arg0)
        {
            IExecuteWithSignature("stopWatchingActive", "(Landroid/app/AppOpsManager$OnOpActiveChangedListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.html#stopWatchingMode(android.app.AppOpsManager.OnOpChangedListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.AppOpsManager.OnOpChangedListener"/></param>
        public void StopWatchingMode(Android.App.AppOpsManager.OnOpChangedListener arg0)
        {
            IExecuteWithSignature("stopWatchingMode", "(Landroid/app/AppOpsManager$OnOpChangedListener;)V", arg0);
        }

        #endregion

        #region Nested classes
        #region OnOpActiveChangedListener
        public partial class OnOpActiveChangedListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnOpActiveChangedListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onOpActiveChanged", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Java.Lang.String>>>(OnOpActiveChangedEventHandler));
                AddEventHandler("onOpActiveChanged8", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Java.Lang.String>>>(OnOpActiveChanged8EventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/app/AppOpsManager.OnOpActiveChangedListener.html#onOpActiveChanged(java.lang.String,int,java.lang.String,boolean)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnOpActiveChanged"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Java.Lang.String, int, Java.Lang.String, bool> OnOnOpActiveChanged { get; set; } = null;

            void OnOpActiveChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Java.Lang.String>> data)
            {
                var methodToExecute = (OnOnOpActiveChanged != null) ? OnOnOpActiveChanged : OnOpActiveChanged;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<Java.Lang.String>(1), data.EventData.GetAt<bool>(2));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.OnOpActiveChangedListener.html#onOpActiveChanged(java.lang.String,int,java.lang.String,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="Java.Lang.String"/></param>
            /// <param name="arg3"><see cref="bool"/></param>
            public virtual void OnOpActiveChanged(Java.Lang.String arg0, int arg1, Java.Lang.String arg2, bool arg3)
            {
                
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.OnOpActiveChangedListener.html#onOpActiveChanged(java.lang.String,int,java.lang.String,java.lang.String,int,boolean,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="Java.Lang.String"/></param>
            /// <param name="arg3"><see cref="Java.Lang.String"/></param>
            /// <param name="arg4"><see cref="int"/></param>
            /// <param name="arg5"><see cref="bool"/></param>
            /// <param name="arg6"><see cref="int"/></param>
            /// <param name="arg7"><see cref="int"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface</remarks>
            public void OnOpActiveChangedDefault(Java.Lang.String arg0, int arg1, Java.Lang.String arg2, Java.Lang.String arg3, int arg4, bool arg5, int arg6, int arg7)
            {
                IExecute("onOpActiveChangedDefault", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/app/AppOpsManager.OnOpActiveChangedListener.html#onOpActiveChanged(java.lang.String,int,java.lang.String,java.lang.String,int,boolean,int,int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnOpActiveChanged8"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Java.Lang.String, int, Java.Lang.String, Java.Lang.String, int, bool, int, int> OnOnOpActiveChanged8 { get; set; } = null;

            void OnOpActiveChanged8EventHandler(object sender, CLRListenerEventArgs<CLREventData<Java.Lang.String>> data)
            {
                var methodToExecute = (OnOnOpActiveChanged8 != null) ? OnOnOpActiveChanged8 : OnOpActiveChanged;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<Java.Lang.String>(1), data.EventData.GetAt<Java.Lang.String>(2), data.EventData.GetAt<int>(3), data.EventData.GetAt<bool>(4), data.EventData.GetAt<int>(5), data.EventData.GetAt<int>(6));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.OnOpActiveChangedListener.html#onOpActiveChanged(java.lang.String,int,java.lang.String,java.lang.String,int,boolean,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="Java.Lang.String"/></param>
            /// <param name="arg3"><see cref="Java.Lang.String"/></param>
            /// <param name="arg4"><see cref="int"/></param>
            /// <param name="arg5"><see cref="bool"/></param>
            /// <param name="arg6"><see cref="int"/></param>
            /// <param name="arg7"><see cref="int"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface using <see cref="OnOpActiveChangedDefault"/>; override the method to implement a different behavior</remarks>
            public virtual void OnOpActiveChanged(Java.Lang.String arg0, int arg1, Java.Lang.String arg2, Java.Lang.String arg3, int arg4, bool arg5, int arg6, int arg7)
            {
                OnOpActiveChangedDefault(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnOpActiveChangedListenerDirect
        public partial class OnOpActiveChangedListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.OnOpActiveChangedListener.html#onOpActiveChanged(java.lang.String,int,java.lang.String,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="Java.Lang.String"/></param>
            /// <param name="arg3"><see cref="bool"/></param>
            public override void OnOpActiveChanged(Java.Lang.String arg0, int arg1, Java.Lang.String arg2, bool arg3)
            {
                IExecute("onOpActiveChanged", arg0, arg1, arg2, arg3);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.OnOpActiveChangedListener.html#onOpActiveChanged(java.lang.String,int,java.lang.String,java.lang.String,int,boolean,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="Java.Lang.String"/></param>
            /// <param name="arg3"><see cref="Java.Lang.String"/></param>
            /// <param name="arg4"><see cref="int"/></param>
            /// <param name="arg5"><see cref="bool"/></param>
            /// <param name="arg6"><see cref="int"/></param>
            /// <param name="arg7"><see cref="int"/></param>
            public override void OnOpActiveChanged(Java.Lang.String arg0, int arg1, Java.Lang.String arg2, Java.Lang.String arg3, int arg4, bool arg5, int arg6, int arg7)
            {
                IExecute("onOpActiveChanged", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnOpChangedListener
        public partial class OnOpChangedListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnOpChangedListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onOpChanged", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Java.Lang.String>>>(OnOpChangedEventHandler));
                AddEventHandler("onOpChanged4", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Java.Lang.String>>>(OnOpChanged4EventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/app/AppOpsManager.OnOpChangedListener.html#onOpChanged(java.lang.String,java.lang.String)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnOpChanged"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Java.Lang.String, Java.Lang.String> OnOnOpChanged { get; set; } = null;

            void OnOpChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Java.Lang.String>> data)
            {
                var methodToExecute = (OnOnOpChanged != null) ? OnOnOpChanged : OnOpChanged;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Java.Lang.String>(0));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.OnOpChangedListener.html#onOpChanged(java.lang.String,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            public virtual void OnOpChanged(Java.Lang.String arg0, Java.Lang.String arg1)
            {
                
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.OnOpChangedListener.html#onOpChanged(java.lang.String,java.lang.String,int,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="Java.Lang.String"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface</remarks>
            public void OnOpChangedDefault(Java.Lang.String arg0, Java.Lang.String arg1, int arg2, Java.Lang.String arg3)
            {
                IExecute("onOpChangedDefault", arg0, arg1, arg2, arg3);
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/app/AppOpsManager.OnOpChangedListener.html#onOpChanged(java.lang.String,java.lang.String,int,java.lang.String)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnOpChanged4"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Java.Lang.String, Java.Lang.String, int, Java.Lang.String> OnOnOpChanged4 { get; set; } = null;

            void OnOpChanged4EventHandler(object sender, CLRListenerEventArgs<CLREventData<Java.Lang.String>> data)
            {
                var methodToExecute = (OnOnOpChanged4 != null) ? OnOnOpChanged4 : OnOpChanged;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Java.Lang.String>(0), data.EventData.GetAt<int>(1), data.EventData.GetAt<Java.Lang.String>(2));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.OnOpChangedListener.html#onOpChanged(java.lang.String,java.lang.String,int,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="Java.Lang.String"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface using <see cref="OnOpChangedDefault"/>; override the method to implement a different behavior</remarks>
            public virtual void OnOpChanged(Java.Lang.String arg0, Java.Lang.String arg1, int arg2, Java.Lang.String arg3)
            {
                OnOpChangedDefault(arg0, arg1, arg2, arg3);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnOpChangedListenerDirect
        public partial class OnOpChangedListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.OnOpChangedListener.html#onOpChanged(java.lang.String,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            public override void OnOpChanged(Java.Lang.String arg0, Java.Lang.String arg1)
            {
                IExecute("onOpChanged", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.OnOpChangedListener.html#onOpChanged(java.lang.String,java.lang.String,int,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="Java.Lang.String"/></param>
            public override void OnOpChanged(Java.Lang.String arg0, Java.Lang.String arg1, int arg2, Java.Lang.String arg3)
            {
                IExecute("onOpChanged", arg0, arg1, arg2, arg3);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnOpNotedCallback
        public partial class OnOpNotedCallback
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.OnOpNotedCallback.html#onAsyncNoted(android.app.AsyncNotedAppOp)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.App.AsyncNotedAppOp"/></param>
            public void OnAsyncNoted(Android.App.AsyncNotedAppOp arg0)
            {
                IExecuteWithSignature("onAsyncNoted", "(Landroid/app/AsyncNotedAppOp;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.OnOpNotedCallback.html#onNoted(android.app.SyncNotedAppOp)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.App.SyncNotedAppOp"/></param>
            public void OnNoted(Android.App.SyncNotedAppOp arg0)
            {
                IExecuteWithSignature("onNoted", "(Landroid/app/SyncNotedAppOp;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/AppOpsManager.OnOpNotedCallback.html#onSelfNoted(android.app.SyncNotedAppOp)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.App.SyncNotedAppOp"/></param>
            public void OnSelfNoted(Android.App.SyncNotedAppOp arg0)
            {
                IExecuteWithSignature("onSelfNoted", "(Landroid/app/SyncNotedAppOp;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
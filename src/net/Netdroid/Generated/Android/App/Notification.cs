/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.App
{
    #region Notification
    public partial class Notification
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#%3Cinit%3E(android.os.Parcel)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        public Notification(Android.Os.Parcel arg0)
            : base(arg0)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#%3Cinit%3E(int,java.lang.CharSequence,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        [global::System.Obsolete()]
        public Notification(int arg0, Java.Lang.CharSequence arg1, long arg2)
            : base(arg0, arg1, arg2)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#publicVersion"/>
        /// </summary>
        public Android.App.Notification publicVersion { get { return IGetField<Android.App.Notification>("publicVersion"); } set { ISetField("publicVersion", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#actions"/>
        /// </summary>
        public Android.App.Notification.Action[] actions { get { return IGetFieldArray<Android.App.Notification.Action>("actions"); } set { ISetField("actions", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#contentIntent"/>
        /// </summary>
        public Android.App.PendingIntent contentIntent { get { return IGetField<Android.App.PendingIntent>("contentIntent"); } set { ISetField("contentIntent", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#deleteIntent"/>
        /// </summary>
        public Android.App.PendingIntent deleteIntent { get { return IGetField<Android.App.PendingIntent>("deleteIntent"); } set { ISetField("deleteIntent", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#fullScreenIntent"/>
        /// </summary>
        public Android.App.PendingIntent fullScreenIntent { get { return IGetField<Android.App.PendingIntent>("fullScreenIntent"); } set { ISetField("fullScreenIntent", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#largeIcon"/>
        /// </summary>
        [global::System.Obsolete()]
        public Android.Graphics.Bitmap largeIcon { get { return IGetField<Android.Graphics.Bitmap>("largeIcon"); } set { ISetField("largeIcon", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#audioAttributes"/>
        /// </summary>
        [global::System.Obsolete()]
        public Android.Media.AudioAttributes audioAttributes { get { return IGetField<Android.Media.AudioAttributes>("audioAttributes"); } set { ISetField("audioAttributes", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#sound"/>
        /// </summary>
        [global::System.Obsolete()]
        public Android.Net.Uri sound { get { return IGetField<Android.Net.Uri>("sound"); } set { ISetField("sound", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#extras"/>
        /// </summary>
        public Android.Os.Bundle extras { get { return IGetField<Android.Os.Bundle>("extras"); } set { ISetField("extras", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#bigContentView"/>
        /// </summary>
        [global::System.Obsolete()]
        public Android.Widget.RemoteViews bigContentView { get { return IGetField<Android.Widget.RemoteViews>("bigContentView"); } set { ISetField("bigContentView", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#contentView"/>
        /// </summary>
        [global::System.Obsolete()]
        public Android.Widget.RemoteViews contentView { get { return IGetField<Android.Widget.RemoteViews>("contentView"); } set { ISetField("contentView", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#headsUpContentView"/>
        /// </summary>
        [global::System.Obsolete()]
        public Android.Widget.RemoteViews headsUpContentView { get { return IGetField<Android.Widget.RemoteViews>("headsUpContentView"); } set { ISetField("headsUpContentView", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#tickerView"/>
        /// </summary>
        [global::System.Obsolete()]
        public Android.Widget.RemoteViews tickerView { get { return IGetField<Android.Widget.RemoteViews>("tickerView"); } set { ISetField("tickerView", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#audioStreamType"/>
        /// </summary>
        [global::System.Obsolete()]
        public int audioStreamType { get { return IGetField<int>("audioStreamType"); } set { ISetField("audioStreamType", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#color"/>
        /// </summary>
        public int color { get { return IGetField<int>("color"); } set { ISetField("color", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#defaults"/>
        /// </summary>
        [global::System.Obsolete()]
        public int defaults { get { return IGetField<int>("defaults"); } set { ISetField("defaults", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#flags"/>
        /// </summary>
        public int flags { get { return IGetField<int>("flags"); } set { ISetField("flags", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#icon"/>
        /// </summary>
        [global::System.Obsolete()]
        public int icon { get { return IGetField<int>("icon"); } set { ISetField("icon", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#iconLevel"/>
        /// </summary>
        public int iconLevel { get { return IGetField<int>("iconLevel"); } set { ISetField("iconLevel", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#ledARGB"/>
        /// </summary>
        [global::System.Obsolete()]
        public int ledARGB { get { return IGetField<int>("ledARGB"); } set { ISetField("ledARGB", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#ledOffMS"/>
        /// </summary>
        [global::System.Obsolete()]
        public int ledOffMS { get { return IGetField<int>("ledOffMS"); } set { ISetField("ledOffMS", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#ledOnMS"/>
        /// </summary>
        [global::System.Obsolete()]
        public int ledOnMS { get { return IGetField<int>("ledOnMS"); } set { ISetField("ledOnMS", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#number"/>
        /// </summary>
        public int number { get { return IGetField<int>("number"); } set { ISetField("number", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#priority"/>
        /// </summary>
        [global::System.Obsolete()]
        public int priority { get { return IGetField<int>("priority"); } set { ISetField("priority", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#visibility"/>
        /// </summary>
        public int visibility { get { return IGetField<int>("visibility"); } set { ISetField("visibility", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#tickerText"/>
        /// </summary>
        public Java.Lang.CharSequence tickerText { get { return IGetField<Java.Lang.CharSequence>("tickerText"); } set { ISetField("tickerText", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#category"/>
        /// </summary>
        public Java.Lang.String category { get { return IGetField<Java.Lang.String>("category"); } set { ISetField("category", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#when"/>
        /// </summary>
        public long when { get { return IGetField<long>("when"); } set { ISetField("when", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#vibrate"/>
        /// </summary>
        [global::System.Obsolete()]
        public long[] vibrate { get { return IGetFieldArray<long>("vibrate"); } set { ISetField("vibrate", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#AUDIO_ATTRIBUTES_DEFAULT"/>
        /// </summary>
        public static Android.Media.AudioAttributes AUDIO_ATTRIBUTES_DEFAULT { get { if (!_AUDIO_ATTRIBUTES_DEFAULTReady) { _AUDIO_ATTRIBUTES_DEFAULTContent = SGetField<Android.Media.AudioAttributes>(LocalBridgeClazz, "AUDIO_ATTRIBUTES_DEFAULT"); _AUDIO_ATTRIBUTES_DEFAULTReady = true; } return _AUDIO_ATTRIBUTES_DEFAULTContent; } }
        private static Android.Media.AudioAttributes _AUDIO_ATTRIBUTES_DEFAULTContent = default;
        private static bool _AUDIO_ATTRIBUTES_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#BADGE_ICON_LARGE"/>
        /// </summary>
        public static int BADGE_ICON_LARGE { get { if (!_BADGE_ICON_LARGEReady) { _BADGE_ICON_LARGEContent = SGetField<int>(LocalBridgeClazz, "BADGE_ICON_LARGE"); _BADGE_ICON_LARGEReady = true; } return _BADGE_ICON_LARGEContent; } }
        private static int _BADGE_ICON_LARGEContent = default;
        private static bool _BADGE_ICON_LARGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#BADGE_ICON_NONE"/>
        /// </summary>
        public static int BADGE_ICON_NONE { get { if (!_BADGE_ICON_NONEReady) { _BADGE_ICON_NONEContent = SGetField<int>(LocalBridgeClazz, "BADGE_ICON_NONE"); _BADGE_ICON_NONEReady = true; } return _BADGE_ICON_NONEContent; } }
        private static int _BADGE_ICON_NONEContent = default;
        private static bool _BADGE_ICON_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#BADGE_ICON_SMALL"/>
        /// </summary>
        public static int BADGE_ICON_SMALL { get { if (!_BADGE_ICON_SMALLReady) { _BADGE_ICON_SMALLContent = SGetField<int>(LocalBridgeClazz, "BADGE_ICON_SMALL"); _BADGE_ICON_SMALLReady = true; } return _BADGE_ICON_SMALLContent; } }
        private static int _BADGE_ICON_SMALLContent = default;
        private static bool _BADGE_ICON_SMALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#COLOR_DEFAULT"/>
        /// </summary>
        public static int COLOR_DEFAULT { get { if (!_COLOR_DEFAULTReady) { _COLOR_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "COLOR_DEFAULT"); _COLOR_DEFAULTReady = true; } return _COLOR_DEFAULTContent; } }
        private static int _COLOR_DEFAULTContent = default;
        private static bool _COLOR_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#DEFAULT_ALL"/>
        /// </summary>
        public static int DEFAULT_ALL { get { if (!_DEFAULT_ALLReady) { _DEFAULT_ALLContent = SGetField<int>(LocalBridgeClazz, "DEFAULT_ALL"); _DEFAULT_ALLReady = true; } return _DEFAULT_ALLContent; } }
        private static int _DEFAULT_ALLContent = default;
        private static bool _DEFAULT_ALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#DEFAULT_LIGHTS"/>
        /// </summary>
        public static int DEFAULT_LIGHTS { get { if (!_DEFAULT_LIGHTSReady) { _DEFAULT_LIGHTSContent = SGetField<int>(LocalBridgeClazz, "DEFAULT_LIGHTS"); _DEFAULT_LIGHTSReady = true; } return _DEFAULT_LIGHTSContent; } }
        private static int _DEFAULT_LIGHTSContent = default;
        private static bool _DEFAULT_LIGHTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#DEFAULT_SOUND"/>
        /// </summary>
        public static int DEFAULT_SOUND { get { if (!_DEFAULT_SOUNDReady) { _DEFAULT_SOUNDContent = SGetField<int>(LocalBridgeClazz, "DEFAULT_SOUND"); _DEFAULT_SOUNDReady = true; } return _DEFAULT_SOUNDContent; } }
        private static int _DEFAULT_SOUNDContent = default;
        private static bool _DEFAULT_SOUNDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#DEFAULT_VIBRATE"/>
        /// </summary>
        public static int DEFAULT_VIBRATE { get { if (!_DEFAULT_VIBRATEReady) { _DEFAULT_VIBRATEContent = SGetField<int>(LocalBridgeClazz, "DEFAULT_VIBRATE"); _DEFAULT_VIBRATEReady = true; } return _DEFAULT_VIBRATEContent; } }
        private static int _DEFAULT_VIBRATEContent = default;
        private static bool _DEFAULT_VIBRATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#FLAG_AUTO_CANCEL"/>
        /// </summary>
        public static int FLAG_AUTO_CANCEL { get { if (!_FLAG_AUTO_CANCELReady) { _FLAG_AUTO_CANCELContent = SGetField<int>(LocalBridgeClazz, "FLAG_AUTO_CANCEL"); _FLAG_AUTO_CANCELReady = true; } return _FLAG_AUTO_CANCELContent; } }
        private static int _FLAG_AUTO_CANCELContent = default;
        private static bool _FLAG_AUTO_CANCELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#FLAG_BUBBLE"/>
        /// </summary>
        public static int FLAG_BUBBLE { get { if (!_FLAG_BUBBLEReady) { _FLAG_BUBBLEContent = SGetField<int>(LocalBridgeClazz, "FLAG_BUBBLE"); _FLAG_BUBBLEReady = true; } return _FLAG_BUBBLEContent; } }
        private static int _FLAG_BUBBLEContent = default;
        private static bool _FLAG_BUBBLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#FLAG_FOREGROUND_SERVICE"/>
        /// </summary>
        public static int FLAG_FOREGROUND_SERVICE { get { if (!_FLAG_FOREGROUND_SERVICEReady) { _FLAG_FOREGROUND_SERVICEContent = SGetField<int>(LocalBridgeClazz, "FLAG_FOREGROUND_SERVICE"); _FLAG_FOREGROUND_SERVICEReady = true; } return _FLAG_FOREGROUND_SERVICEContent; } }
        private static int _FLAG_FOREGROUND_SERVICEContent = default;
        private static bool _FLAG_FOREGROUND_SERVICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#FLAG_GROUP_SUMMARY"/>
        /// </summary>
        public static int FLAG_GROUP_SUMMARY { get { if (!_FLAG_GROUP_SUMMARYReady) { _FLAG_GROUP_SUMMARYContent = SGetField<int>(LocalBridgeClazz, "FLAG_GROUP_SUMMARY"); _FLAG_GROUP_SUMMARYReady = true; } return _FLAG_GROUP_SUMMARYContent; } }
        private static int _FLAG_GROUP_SUMMARYContent = default;
        private static bool _FLAG_GROUP_SUMMARYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#FLAG_HIGH_PRIORITY"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int FLAG_HIGH_PRIORITY { get { if (!_FLAG_HIGH_PRIORITYReady) { _FLAG_HIGH_PRIORITYContent = SGetField<int>(LocalBridgeClazz, "FLAG_HIGH_PRIORITY"); _FLAG_HIGH_PRIORITYReady = true; } return _FLAG_HIGH_PRIORITYContent; } }
        private static int _FLAG_HIGH_PRIORITYContent = default;
        private static bool _FLAG_HIGH_PRIORITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#FLAG_INSISTENT"/>
        /// </summary>
        public static int FLAG_INSISTENT { get { if (!_FLAG_INSISTENTReady) { _FLAG_INSISTENTContent = SGetField<int>(LocalBridgeClazz, "FLAG_INSISTENT"); _FLAG_INSISTENTReady = true; } return _FLAG_INSISTENTContent; } }
        private static int _FLAG_INSISTENTContent = default;
        private static bool _FLAG_INSISTENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#FLAG_LOCAL_ONLY"/>
        /// </summary>
        public static int FLAG_LOCAL_ONLY { get { if (!_FLAG_LOCAL_ONLYReady) { _FLAG_LOCAL_ONLYContent = SGetField<int>(LocalBridgeClazz, "FLAG_LOCAL_ONLY"); _FLAG_LOCAL_ONLYReady = true; } return _FLAG_LOCAL_ONLYContent; } }
        private static int _FLAG_LOCAL_ONLYContent = default;
        private static bool _FLAG_LOCAL_ONLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#FLAG_NO_CLEAR"/>
        /// </summary>
        public static int FLAG_NO_CLEAR { get { if (!_FLAG_NO_CLEARReady) { _FLAG_NO_CLEARContent = SGetField<int>(LocalBridgeClazz, "FLAG_NO_CLEAR"); _FLAG_NO_CLEARReady = true; } return _FLAG_NO_CLEARContent; } }
        private static int _FLAG_NO_CLEARContent = default;
        private static bool _FLAG_NO_CLEARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#FLAG_ONGOING_EVENT"/>
        /// </summary>
        public static int FLAG_ONGOING_EVENT { get { if (!_FLAG_ONGOING_EVENTReady) { _FLAG_ONGOING_EVENTContent = SGetField<int>(LocalBridgeClazz, "FLAG_ONGOING_EVENT"); _FLAG_ONGOING_EVENTReady = true; } return _FLAG_ONGOING_EVENTContent; } }
        private static int _FLAG_ONGOING_EVENTContent = default;
        private static bool _FLAG_ONGOING_EVENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#FLAG_ONLY_ALERT_ONCE"/>
        /// </summary>
        public static int FLAG_ONLY_ALERT_ONCE { get { if (!_FLAG_ONLY_ALERT_ONCEReady) { _FLAG_ONLY_ALERT_ONCEContent = SGetField<int>(LocalBridgeClazz, "FLAG_ONLY_ALERT_ONCE"); _FLAG_ONLY_ALERT_ONCEReady = true; } return _FLAG_ONLY_ALERT_ONCEContent; } }
        private static int _FLAG_ONLY_ALERT_ONCEContent = default;
        private static bool _FLAG_ONLY_ALERT_ONCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#FLAG_SHOW_LIGHTS"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int FLAG_SHOW_LIGHTS { get { if (!_FLAG_SHOW_LIGHTSReady) { _FLAG_SHOW_LIGHTSContent = SGetField<int>(LocalBridgeClazz, "FLAG_SHOW_LIGHTS"); _FLAG_SHOW_LIGHTSReady = true; } return _FLAG_SHOW_LIGHTSContent; } }
        private static int _FLAG_SHOW_LIGHTSContent = default;
        private static bool _FLAG_SHOW_LIGHTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#FOREGROUND_SERVICE_DEFAULT"/>
        /// </summary>
        public static int FOREGROUND_SERVICE_DEFAULT { get { if (!_FOREGROUND_SERVICE_DEFAULTReady) { _FOREGROUND_SERVICE_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "FOREGROUND_SERVICE_DEFAULT"); _FOREGROUND_SERVICE_DEFAULTReady = true; } return _FOREGROUND_SERVICE_DEFAULTContent; } }
        private static int _FOREGROUND_SERVICE_DEFAULTContent = default;
        private static bool _FOREGROUND_SERVICE_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#FOREGROUND_SERVICE_DEFERRED"/>
        /// </summary>
        public static int FOREGROUND_SERVICE_DEFERRED { get { if (!_FOREGROUND_SERVICE_DEFERREDReady) { _FOREGROUND_SERVICE_DEFERREDContent = SGetField<int>(LocalBridgeClazz, "FOREGROUND_SERVICE_DEFERRED"); _FOREGROUND_SERVICE_DEFERREDReady = true; } return _FOREGROUND_SERVICE_DEFERREDContent; } }
        private static int _FOREGROUND_SERVICE_DEFERREDContent = default;
        private static bool _FOREGROUND_SERVICE_DEFERREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#FOREGROUND_SERVICE_IMMEDIATE"/>
        /// </summary>
        public static int FOREGROUND_SERVICE_IMMEDIATE { get { if (!_FOREGROUND_SERVICE_IMMEDIATEReady) { _FOREGROUND_SERVICE_IMMEDIATEContent = SGetField<int>(LocalBridgeClazz, "FOREGROUND_SERVICE_IMMEDIATE"); _FOREGROUND_SERVICE_IMMEDIATEReady = true; } return _FOREGROUND_SERVICE_IMMEDIATEContent; } }
        private static int _FOREGROUND_SERVICE_IMMEDIATEContent = default;
        private static bool _FOREGROUND_SERVICE_IMMEDIATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#GROUP_ALERT_ALL"/>
        /// </summary>
        public static int GROUP_ALERT_ALL { get { if (!_GROUP_ALERT_ALLReady) { _GROUP_ALERT_ALLContent = SGetField<int>(LocalBridgeClazz, "GROUP_ALERT_ALL"); _GROUP_ALERT_ALLReady = true; } return _GROUP_ALERT_ALLContent; } }
        private static int _GROUP_ALERT_ALLContent = default;
        private static bool _GROUP_ALERT_ALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#GROUP_ALERT_CHILDREN"/>
        /// </summary>
        public static int GROUP_ALERT_CHILDREN { get { if (!_GROUP_ALERT_CHILDRENReady) { _GROUP_ALERT_CHILDRENContent = SGetField<int>(LocalBridgeClazz, "GROUP_ALERT_CHILDREN"); _GROUP_ALERT_CHILDRENReady = true; } return _GROUP_ALERT_CHILDRENContent; } }
        private static int _GROUP_ALERT_CHILDRENContent = default;
        private static bool _GROUP_ALERT_CHILDRENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#GROUP_ALERT_SUMMARY"/>
        /// </summary>
        public static int GROUP_ALERT_SUMMARY { get { if (!_GROUP_ALERT_SUMMARYReady) { _GROUP_ALERT_SUMMARYContent = SGetField<int>(LocalBridgeClazz, "GROUP_ALERT_SUMMARY"); _GROUP_ALERT_SUMMARYReady = true; } return _GROUP_ALERT_SUMMARYContent; } }
        private static int _GROUP_ALERT_SUMMARYContent = default;
        private static bool _GROUP_ALERT_SUMMARYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#PRIORITY_DEFAULT"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int PRIORITY_DEFAULT { get { if (!_PRIORITY_DEFAULTReady) { _PRIORITY_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "PRIORITY_DEFAULT"); _PRIORITY_DEFAULTReady = true; } return _PRIORITY_DEFAULTContent; } }
        private static int _PRIORITY_DEFAULTContent = default;
        private static bool _PRIORITY_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#PRIORITY_HIGH"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int PRIORITY_HIGH { get { if (!_PRIORITY_HIGHReady) { _PRIORITY_HIGHContent = SGetField<int>(LocalBridgeClazz, "PRIORITY_HIGH"); _PRIORITY_HIGHReady = true; } return _PRIORITY_HIGHContent; } }
        private static int _PRIORITY_HIGHContent = default;
        private static bool _PRIORITY_HIGHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#PRIORITY_LOW"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int PRIORITY_LOW { get { if (!_PRIORITY_LOWReady) { _PRIORITY_LOWContent = SGetField<int>(LocalBridgeClazz, "PRIORITY_LOW"); _PRIORITY_LOWReady = true; } return _PRIORITY_LOWContent; } }
        private static int _PRIORITY_LOWContent = default;
        private static bool _PRIORITY_LOWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#PRIORITY_MAX"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int PRIORITY_MAX { get { if (!_PRIORITY_MAXReady) { _PRIORITY_MAXContent = SGetField<int>(LocalBridgeClazz, "PRIORITY_MAX"); _PRIORITY_MAXReady = true; } return _PRIORITY_MAXContent; } }
        private static int _PRIORITY_MAXContent = default;
        private static bool _PRIORITY_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#PRIORITY_MIN"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int PRIORITY_MIN { get { if (!_PRIORITY_MINReady) { _PRIORITY_MINContent = SGetField<int>(LocalBridgeClazz, "PRIORITY_MIN"); _PRIORITY_MINReady = true; } return _PRIORITY_MINContent; } }
        private static int _PRIORITY_MINContent = default;
        private static bool _PRIORITY_MINReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#STREAM_DEFAULT"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int STREAM_DEFAULT { get { if (!_STREAM_DEFAULTReady) { _STREAM_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "STREAM_DEFAULT"); _STREAM_DEFAULTReady = true; } return _STREAM_DEFAULTContent; } }
        private static int _STREAM_DEFAULTContent = default;
        private static bool _STREAM_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#VISIBILITY_PRIVATE"/>
        /// </summary>
        public static int VISIBILITY_PRIVATE { get { if (!_VISIBILITY_PRIVATEReady) { _VISIBILITY_PRIVATEContent = SGetField<int>(LocalBridgeClazz, "VISIBILITY_PRIVATE"); _VISIBILITY_PRIVATEReady = true; } return _VISIBILITY_PRIVATEContent; } }
        private static int _VISIBILITY_PRIVATEContent = default;
        private static bool _VISIBILITY_PRIVATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#VISIBILITY_PUBLIC"/>
        /// </summary>
        public static int VISIBILITY_PUBLIC { get { if (!_VISIBILITY_PUBLICReady) { _VISIBILITY_PUBLICContent = SGetField<int>(LocalBridgeClazz, "VISIBILITY_PUBLIC"); _VISIBILITY_PUBLICReady = true; } return _VISIBILITY_PUBLICContent; } }
        private static int _VISIBILITY_PUBLICContent = default;
        private static bool _VISIBILITY_PUBLICReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#VISIBILITY_SECRET"/>
        /// </summary>
        public static int VISIBILITY_SECRET { get { if (!_VISIBILITY_SECRETReady) { _VISIBILITY_SECRETContent = SGetField<int>(LocalBridgeClazz, "VISIBILITY_SECRET"); _VISIBILITY_SECRETReady = true; } return _VISIBILITY_SECRETContent; } }
        private static int _VISIBILITY_SECRETContent = default;
        private static bool _VISIBILITY_SECRETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#CATEGORY_ALARM"/>
        /// </summary>
        public static Java.Lang.String CATEGORY_ALARM { get { if (!_CATEGORY_ALARMReady) { _CATEGORY_ALARMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CATEGORY_ALARM"); _CATEGORY_ALARMReady = true; } return _CATEGORY_ALARMContent; } }
        private static Java.Lang.String _CATEGORY_ALARMContent = default;
        private static bool _CATEGORY_ALARMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#CATEGORY_CALL"/>
        /// </summary>
        public static Java.Lang.String CATEGORY_CALL { get { if (!_CATEGORY_CALLReady) { _CATEGORY_CALLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CATEGORY_CALL"); _CATEGORY_CALLReady = true; } return _CATEGORY_CALLContent; } }
        private static Java.Lang.String _CATEGORY_CALLContent = default;
        private static bool _CATEGORY_CALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#CATEGORY_EMAIL"/>
        /// </summary>
        public static Java.Lang.String CATEGORY_EMAIL { get { if (!_CATEGORY_EMAILReady) { _CATEGORY_EMAILContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CATEGORY_EMAIL"); _CATEGORY_EMAILReady = true; } return _CATEGORY_EMAILContent; } }
        private static Java.Lang.String _CATEGORY_EMAILContent = default;
        private static bool _CATEGORY_EMAILReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#CATEGORY_ERROR"/>
        /// </summary>
        public static Java.Lang.String CATEGORY_ERROR { get { if (!_CATEGORY_ERRORReady) { _CATEGORY_ERRORContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CATEGORY_ERROR"); _CATEGORY_ERRORReady = true; } return _CATEGORY_ERRORContent; } }
        private static Java.Lang.String _CATEGORY_ERRORContent = default;
        private static bool _CATEGORY_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#CATEGORY_EVENT"/>
        /// </summary>
        public static Java.Lang.String CATEGORY_EVENT { get { if (!_CATEGORY_EVENTReady) { _CATEGORY_EVENTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CATEGORY_EVENT"); _CATEGORY_EVENTReady = true; } return _CATEGORY_EVENTContent; } }
        private static Java.Lang.String _CATEGORY_EVENTContent = default;
        private static bool _CATEGORY_EVENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#CATEGORY_LOCATION_SHARING"/>
        /// </summary>
        public static Java.Lang.String CATEGORY_LOCATION_SHARING { get { if (!_CATEGORY_LOCATION_SHARINGReady) { _CATEGORY_LOCATION_SHARINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CATEGORY_LOCATION_SHARING"); _CATEGORY_LOCATION_SHARINGReady = true; } return _CATEGORY_LOCATION_SHARINGContent; } }
        private static Java.Lang.String _CATEGORY_LOCATION_SHARINGContent = default;
        private static bool _CATEGORY_LOCATION_SHARINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#CATEGORY_MESSAGE"/>
        /// </summary>
        public static Java.Lang.String CATEGORY_MESSAGE { get { if (!_CATEGORY_MESSAGEReady) { _CATEGORY_MESSAGEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CATEGORY_MESSAGE"); _CATEGORY_MESSAGEReady = true; } return _CATEGORY_MESSAGEContent; } }
        private static Java.Lang.String _CATEGORY_MESSAGEContent = default;
        private static bool _CATEGORY_MESSAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#CATEGORY_MISSED_CALL"/>
        /// </summary>
        public static Java.Lang.String CATEGORY_MISSED_CALL { get { if (!_CATEGORY_MISSED_CALLReady) { _CATEGORY_MISSED_CALLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CATEGORY_MISSED_CALL"); _CATEGORY_MISSED_CALLReady = true; } return _CATEGORY_MISSED_CALLContent; } }
        private static Java.Lang.String _CATEGORY_MISSED_CALLContent = default;
        private static bool _CATEGORY_MISSED_CALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#CATEGORY_NAVIGATION"/>
        /// </summary>
        public static Java.Lang.String CATEGORY_NAVIGATION { get { if (!_CATEGORY_NAVIGATIONReady) { _CATEGORY_NAVIGATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CATEGORY_NAVIGATION"); _CATEGORY_NAVIGATIONReady = true; } return _CATEGORY_NAVIGATIONContent; } }
        private static Java.Lang.String _CATEGORY_NAVIGATIONContent = default;
        private static bool _CATEGORY_NAVIGATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#CATEGORY_PROGRESS"/>
        /// </summary>
        public static Java.Lang.String CATEGORY_PROGRESS { get { if (!_CATEGORY_PROGRESSReady) { _CATEGORY_PROGRESSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CATEGORY_PROGRESS"); _CATEGORY_PROGRESSReady = true; } return _CATEGORY_PROGRESSContent; } }
        private static Java.Lang.String _CATEGORY_PROGRESSContent = default;
        private static bool _CATEGORY_PROGRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#CATEGORY_PROMO"/>
        /// </summary>
        public static Java.Lang.String CATEGORY_PROMO { get { if (!_CATEGORY_PROMOReady) { _CATEGORY_PROMOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CATEGORY_PROMO"); _CATEGORY_PROMOReady = true; } return _CATEGORY_PROMOContent; } }
        private static Java.Lang.String _CATEGORY_PROMOContent = default;
        private static bool _CATEGORY_PROMOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#CATEGORY_RECOMMENDATION"/>
        /// </summary>
        public static Java.Lang.String CATEGORY_RECOMMENDATION { get { if (!_CATEGORY_RECOMMENDATIONReady) { _CATEGORY_RECOMMENDATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CATEGORY_RECOMMENDATION"); _CATEGORY_RECOMMENDATIONReady = true; } return _CATEGORY_RECOMMENDATIONContent; } }
        private static Java.Lang.String _CATEGORY_RECOMMENDATIONContent = default;
        private static bool _CATEGORY_RECOMMENDATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#CATEGORY_REMINDER"/>
        /// </summary>
        public static Java.Lang.String CATEGORY_REMINDER { get { if (!_CATEGORY_REMINDERReady) { _CATEGORY_REMINDERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CATEGORY_REMINDER"); _CATEGORY_REMINDERReady = true; } return _CATEGORY_REMINDERContent; } }
        private static Java.Lang.String _CATEGORY_REMINDERContent = default;
        private static bool _CATEGORY_REMINDERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#CATEGORY_SERVICE"/>
        /// </summary>
        public static Java.Lang.String CATEGORY_SERVICE { get { if (!_CATEGORY_SERVICEReady) { _CATEGORY_SERVICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CATEGORY_SERVICE"); _CATEGORY_SERVICEReady = true; } return _CATEGORY_SERVICEContent; } }
        private static Java.Lang.String _CATEGORY_SERVICEContent = default;
        private static bool _CATEGORY_SERVICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#CATEGORY_SOCIAL"/>
        /// </summary>
        public static Java.Lang.String CATEGORY_SOCIAL { get { if (!_CATEGORY_SOCIALReady) { _CATEGORY_SOCIALContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CATEGORY_SOCIAL"); _CATEGORY_SOCIALReady = true; } return _CATEGORY_SOCIALContent; } }
        private static Java.Lang.String _CATEGORY_SOCIALContent = default;
        private static bool _CATEGORY_SOCIALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#CATEGORY_STATUS"/>
        /// </summary>
        public static Java.Lang.String CATEGORY_STATUS { get { if (!_CATEGORY_STATUSReady) { _CATEGORY_STATUSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CATEGORY_STATUS"); _CATEGORY_STATUSReady = true; } return _CATEGORY_STATUSContent; } }
        private static Java.Lang.String _CATEGORY_STATUSContent = default;
        private static bool _CATEGORY_STATUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#CATEGORY_STOPWATCH"/>
        /// </summary>
        public static Java.Lang.String CATEGORY_STOPWATCH { get { if (!_CATEGORY_STOPWATCHReady) { _CATEGORY_STOPWATCHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CATEGORY_STOPWATCH"); _CATEGORY_STOPWATCHReady = true; } return _CATEGORY_STOPWATCHContent; } }
        private static Java.Lang.String _CATEGORY_STOPWATCHContent = default;
        private static bool _CATEGORY_STOPWATCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#CATEGORY_SYSTEM"/>
        /// </summary>
        public static Java.Lang.String CATEGORY_SYSTEM { get { if (!_CATEGORY_SYSTEMReady) { _CATEGORY_SYSTEMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CATEGORY_SYSTEM"); _CATEGORY_SYSTEMReady = true; } return _CATEGORY_SYSTEMContent; } }
        private static Java.Lang.String _CATEGORY_SYSTEMContent = default;
        private static bool _CATEGORY_SYSTEMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#CATEGORY_TRANSPORT"/>
        /// </summary>
        public static Java.Lang.String CATEGORY_TRANSPORT { get { if (!_CATEGORY_TRANSPORTReady) { _CATEGORY_TRANSPORTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CATEGORY_TRANSPORT"); _CATEGORY_TRANSPORTReady = true; } return _CATEGORY_TRANSPORTContent; } }
        private static Java.Lang.String _CATEGORY_TRANSPORTContent = default;
        private static bool _CATEGORY_TRANSPORTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#CATEGORY_VOICEMAIL"/>
        /// </summary>
        public static Java.Lang.String CATEGORY_VOICEMAIL { get { if (!_CATEGORY_VOICEMAILReady) { _CATEGORY_VOICEMAILContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CATEGORY_VOICEMAIL"); _CATEGORY_VOICEMAILReady = true; } return _CATEGORY_VOICEMAILContent; } }
        private static Java.Lang.String _CATEGORY_VOICEMAILContent = default;
        private static bool _CATEGORY_VOICEMAILReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#CATEGORY_WORKOUT"/>
        /// </summary>
        public static Java.Lang.String CATEGORY_WORKOUT { get { if (!_CATEGORY_WORKOUTReady) { _CATEGORY_WORKOUTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CATEGORY_WORKOUT"); _CATEGORY_WORKOUTReady = true; } return _CATEGORY_WORKOUTContent; } }
        private static Java.Lang.String _CATEGORY_WORKOUTContent = default;
        private static bool _CATEGORY_WORKOUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_ANSWER_COLOR"/>
        /// </summary>
        public static Java.Lang.String EXTRA_ANSWER_COLOR { get { if (!_EXTRA_ANSWER_COLORReady) { _EXTRA_ANSWER_COLORContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ANSWER_COLOR"); _EXTRA_ANSWER_COLORReady = true; } return _EXTRA_ANSWER_COLORContent; } }
        private static Java.Lang.String _EXTRA_ANSWER_COLORContent = default;
        private static bool _EXTRA_ANSWER_COLORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_ANSWER_INTENT"/>
        /// </summary>
        public static Java.Lang.String EXTRA_ANSWER_INTENT { get { if (!_EXTRA_ANSWER_INTENTReady) { _EXTRA_ANSWER_INTENTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ANSWER_INTENT"); _EXTRA_ANSWER_INTENTReady = true; } return _EXTRA_ANSWER_INTENTContent; } }
        private static Java.Lang.String _EXTRA_ANSWER_INTENTContent = default;
        private static bool _EXTRA_ANSWER_INTENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_AUDIO_CONTENTS_URI"/>
        /// </summary>
        public static Java.Lang.String EXTRA_AUDIO_CONTENTS_URI { get { if (!_EXTRA_AUDIO_CONTENTS_URIReady) { _EXTRA_AUDIO_CONTENTS_URIContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_AUDIO_CONTENTS_URI"); _EXTRA_AUDIO_CONTENTS_URIReady = true; } return _EXTRA_AUDIO_CONTENTS_URIContent; } }
        private static Java.Lang.String _EXTRA_AUDIO_CONTENTS_URIContent = default;
        private static bool _EXTRA_AUDIO_CONTENTS_URIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_BACKGROUND_IMAGE_URI"/>
        /// </summary>
        public static Java.Lang.String EXTRA_BACKGROUND_IMAGE_URI { get { if (!_EXTRA_BACKGROUND_IMAGE_URIReady) { _EXTRA_BACKGROUND_IMAGE_URIContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_BACKGROUND_IMAGE_URI"); _EXTRA_BACKGROUND_IMAGE_URIReady = true; } return _EXTRA_BACKGROUND_IMAGE_URIContent; } }
        private static Java.Lang.String _EXTRA_BACKGROUND_IMAGE_URIContent = default;
        private static bool _EXTRA_BACKGROUND_IMAGE_URIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_BIG_TEXT"/>
        /// </summary>
        public static Java.Lang.String EXTRA_BIG_TEXT { get { if (!_EXTRA_BIG_TEXTReady) { _EXTRA_BIG_TEXTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_BIG_TEXT"); _EXTRA_BIG_TEXTReady = true; } return _EXTRA_BIG_TEXTContent; } }
        private static Java.Lang.String _EXTRA_BIG_TEXTContent = default;
        private static bool _EXTRA_BIG_TEXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_CALL_IS_VIDEO"/>
        /// </summary>
        public static Java.Lang.String EXTRA_CALL_IS_VIDEO { get { if (!_EXTRA_CALL_IS_VIDEOReady) { _EXTRA_CALL_IS_VIDEOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_CALL_IS_VIDEO"); _EXTRA_CALL_IS_VIDEOReady = true; } return _EXTRA_CALL_IS_VIDEOContent; } }
        private static Java.Lang.String _EXTRA_CALL_IS_VIDEOContent = default;
        private static bool _EXTRA_CALL_IS_VIDEOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_CALL_PERSON"/>
        /// </summary>
        public static Java.Lang.String EXTRA_CALL_PERSON { get { if (!_EXTRA_CALL_PERSONReady) { _EXTRA_CALL_PERSONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_CALL_PERSON"); _EXTRA_CALL_PERSONReady = true; } return _EXTRA_CALL_PERSONContent; } }
        private static Java.Lang.String _EXTRA_CALL_PERSONContent = default;
        private static bool _EXTRA_CALL_PERSONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_CALL_TYPE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_CALL_TYPE { get { if (!_EXTRA_CALL_TYPEReady) { _EXTRA_CALL_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_CALL_TYPE"); _EXTRA_CALL_TYPEReady = true; } return _EXTRA_CALL_TYPEContent; } }
        private static Java.Lang.String _EXTRA_CALL_TYPEContent = default;
        private static bool _EXTRA_CALL_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_CHANNEL_GROUP_ID"/>
        /// </summary>
        public static Java.Lang.String EXTRA_CHANNEL_GROUP_ID { get { if (!_EXTRA_CHANNEL_GROUP_IDReady) { _EXTRA_CHANNEL_GROUP_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_CHANNEL_GROUP_ID"); _EXTRA_CHANNEL_GROUP_IDReady = true; } return _EXTRA_CHANNEL_GROUP_IDContent; } }
        private static Java.Lang.String _EXTRA_CHANNEL_GROUP_IDContent = default;
        private static bool _EXTRA_CHANNEL_GROUP_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_CHANNEL_ID"/>
        /// </summary>
        public static Java.Lang.String EXTRA_CHANNEL_ID { get { if (!_EXTRA_CHANNEL_IDReady) { _EXTRA_CHANNEL_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_CHANNEL_ID"); _EXTRA_CHANNEL_IDReady = true; } return _EXTRA_CHANNEL_IDContent; } }
        private static Java.Lang.String _EXTRA_CHANNEL_IDContent = default;
        private static bool _EXTRA_CHANNEL_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_CHRONOMETER_COUNT_DOWN"/>
        /// </summary>
        public static Java.Lang.String EXTRA_CHRONOMETER_COUNT_DOWN { get { if (!_EXTRA_CHRONOMETER_COUNT_DOWNReady) { _EXTRA_CHRONOMETER_COUNT_DOWNContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_CHRONOMETER_COUNT_DOWN"); _EXTRA_CHRONOMETER_COUNT_DOWNReady = true; } return _EXTRA_CHRONOMETER_COUNT_DOWNContent; } }
        private static Java.Lang.String _EXTRA_CHRONOMETER_COUNT_DOWNContent = default;
        private static bool _EXTRA_CHRONOMETER_COUNT_DOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_COLORIZED"/>
        /// </summary>
        public static Java.Lang.String EXTRA_COLORIZED { get { if (!_EXTRA_COLORIZEDReady) { _EXTRA_COLORIZEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_COLORIZED"); _EXTRA_COLORIZEDReady = true; } return _EXTRA_COLORIZEDContent; } }
        private static Java.Lang.String _EXTRA_COLORIZEDContent = default;
        private static bool _EXTRA_COLORIZEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_COMPACT_ACTIONS"/>
        /// </summary>
        public static Java.Lang.String EXTRA_COMPACT_ACTIONS { get { if (!_EXTRA_COMPACT_ACTIONSReady) { _EXTRA_COMPACT_ACTIONSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_COMPACT_ACTIONS"); _EXTRA_COMPACT_ACTIONSReady = true; } return _EXTRA_COMPACT_ACTIONSContent; } }
        private static Java.Lang.String _EXTRA_COMPACT_ACTIONSContent = default;
        private static bool _EXTRA_COMPACT_ACTIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_CONVERSATION_TITLE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_CONVERSATION_TITLE { get { if (!_EXTRA_CONVERSATION_TITLEReady) { _EXTRA_CONVERSATION_TITLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_CONVERSATION_TITLE"); _EXTRA_CONVERSATION_TITLEReady = true; } return _EXTRA_CONVERSATION_TITLEContent; } }
        private static Java.Lang.String _EXTRA_CONVERSATION_TITLEContent = default;
        private static bool _EXTRA_CONVERSATION_TITLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_DECLINE_COLOR"/>
        /// </summary>
        public static Java.Lang.String EXTRA_DECLINE_COLOR { get { if (!_EXTRA_DECLINE_COLORReady) { _EXTRA_DECLINE_COLORContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_DECLINE_COLOR"); _EXTRA_DECLINE_COLORReady = true; } return _EXTRA_DECLINE_COLORContent; } }
        private static Java.Lang.String _EXTRA_DECLINE_COLORContent = default;
        private static bool _EXTRA_DECLINE_COLORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_DECLINE_INTENT"/>
        /// </summary>
        public static Java.Lang.String EXTRA_DECLINE_INTENT { get { if (!_EXTRA_DECLINE_INTENTReady) { _EXTRA_DECLINE_INTENTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_DECLINE_INTENT"); _EXTRA_DECLINE_INTENTReady = true; } return _EXTRA_DECLINE_INTENTContent; } }
        private static Java.Lang.String _EXTRA_DECLINE_INTENTContent = default;
        private static bool _EXTRA_DECLINE_INTENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_HANG_UP_INTENT"/>
        /// </summary>
        public static Java.Lang.String EXTRA_HANG_UP_INTENT { get { if (!_EXTRA_HANG_UP_INTENTReady) { _EXTRA_HANG_UP_INTENTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_HANG_UP_INTENT"); _EXTRA_HANG_UP_INTENTReady = true; } return _EXTRA_HANG_UP_INTENTContent; } }
        private static Java.Lang.String _EXTRA_HANG_UP_INTENTContent = default;
        private static bool _EXTRA_HANG_UP_INTENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_HISTORIC_MESSAGES"/>
        /// </summary>
        public static Java.Lang.String EXTRA_HISTORIC_MESSAGES { get { if (!_EXTRA_HISTORIC_MESSAGESReady) { _EXTRA_HISTORIC_MESSAGESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_HISTORIC_MESSAGES"); _EXTRA_HISTORIC_MESSAGESReady = true; } return _EXTRA_HISTORIC_MESSAGESContent; } }
        private static Java.Lang.String _EXTRA_HISTORIC_MESSAGESContent = default;
        private static bool _EXTRA_HISTORIC_MESSAGESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_INFO_TEXT"/>
        /// </summary>
        public static Java.Lang.String EXTRA_INFO_TEXT { get { if (!_EXTRA_INFO_TEXTReady) { _EXTRA_INFO_TEXTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_INFO_TEXT"); _EXTRA_INFO_TEXTReady = true; } return _EXTRA_INFO_TEXTContent; } }
        private static Java.Lang.String _EXTRA_INFO_TEXTContent = default;
        private static bool _EXTRA_INFO_TEXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_IS_GROUP_CONVERSATION"/>
        /// </summary>
        public static Java.Lang.String EXTRA_IS_GROUP_CONVERSATION { get { if (!_EXTRA_IS_GROUP_CONVERSATIONReady) { _EXTRA_IS_GROUP_CONVERSATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_IS_GROUP_CONVERSATION"); _EXTRA_IS_GROUP_CONVERSATIONReady = true; } return _EXTRA_IS_GROUP_CONVERSATIONContent; } }
        private static Java.Lang.String _EXTRA_IS_GROUP_CONVERSATIONContent = default;
        private static bool _EXTRA_IS_GROUP_CONVERSATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_LARGE_ICON"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String EXTRA_LARGE_ICON { get { if (!_EXTRA_LARGE_ICONReady) { _EXTRA_LARGE_ICONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_LARGE_ICON"); _EXTRA_LARGE_ICONReady = true; } return _EXTRA_LARGE_ICONContent; } }
        private static Java.Lang.String _EXTRA_LARGE_ICONContent = default;
        private static bool _EXTRA_LARGE_ICONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_LARGE_ICON_BIG"/>
        /// </summary>
        public static Java.Lang.String EXTRA_LARGE_ICON_BIG { get { if (!_EXTRA_LARGE_ICON_BIGReady) { _EXTRA_LARGE_ICON_BIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_LARGE_ICON_BIG"); _EXTRA_LARGE_ICON_BIGReady = true; } return _EXTRA_LARGE_ICON_BIGContent; } }
        private static Java.Lang.String _EXTRA_LARGE_ICON_BIGContent = default;
        private static bool _EXTRA_LARGE_ICON_BIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_MEDIA_SESSION"/>
        /// </summary>
        public static Java.Lang.String EXTRA_MEDIA_SESSION { get { if (!_EXTRA_MEDIA_SESSIONReady) { _EXTRA_MEDIA_SESSIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_MEDIA_SESSION"); _EXTRA_MEDIA_SESSIONReady = true; } return _EXTRA_MEDIA_SESSIONContent; } }
        private static Java.Lang.String _EXTRA_MEDIA_SESSIONContent = default;
        private static bool _EXTRA_MEDIA_SESSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_MESSAGES"/>
        /// </summary>
        public static Java.Lang.String EXTRA_MESSAGES { get { if (!_EXTRA_MESSAGESReady) { _EXTRA_MESSAGESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_MESSAGES"); _EXTRA_MESSAGESReady = true; } return _EXTRA_MESSAGESContent; } }
        private static Java.Lang.String _EXTRA_MESSAGESContent = default;
        private static bool _EXTRA_MESSAGESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_MESSAGING_PERSON"/>
        /// </summary>
        public static Java.Lang.String EXTRA_MESSAGING_PERSON { get { if (!_EXTRA_MESSAGING_PERSONReady) { _EXTRA_MESSAGING_PERSONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_MESSAGING_PERSON"); _EXTRA_MESSAGING_PERSONReady = true; } return _EXTRA_MESSAGING_PERSONContent; } }
        private static Java.Lang.String _EXTRA_MESSAGING_PERSONContent = default;
        private static bool _EXTRA_MESSAGING_PERSONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_NOTIFICATION_ID"/>
        /// </summary>
        public static Java.Lang.String EXTRA_NOTIFICATION_ID { get { if (!_EXTRA_NOTIFICATION_IDReady) { _EXTRA_NOTIFICATION_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_NOTIFICATION_ID"); _EXTRA_NOTIFICATION_IDReady = true; } return _EXTRA_NOTIFICATION_IDContent; } }
        private static Java.Lang.String _EXTRA_NOTIFICATION_IDContent = default;
        private static bool _EXTRA_NOTIFICATION_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_NOTIFICATION_TAG"/>
        /// </summary>
        public static Java.Lang.String EXTRA_NOTIFICATION_TAG { get { if (!_EXTRA_NOTIFICATION_TAGReady) { _EXTRA_NOTIFICATION_TAGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_NOTIFICATION_TAG"); _EXTRA_NOTIFICATION_TAGReady = true; } return _EXTRA_NOTIFICATION_TAGContent; } }
        private static Java.Lang.String _EXTRA_NOTIFICATION_TAGContent = default;
        private static bool _EXTRA_NOTIFICATION_TAGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_PEOPLE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String EXTRA_PEOPLE { get { if (!_EXTRA_PEOPLEReady) { _EXTRA_PEOPLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PEOPLE"); _EXTRA_PEOPLEReady = true; } return _EXTRA_PEOPLEContent; } }
        private static Java.Lang.String _EXTRA_PEOPLEContent = default;
        private static bool _EXTRA_PEOPLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_PEOPLE_LIST"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PEOPLE_LIST { get { if (!_EXTRA_PEOPLE_LISTReady) { _EXTRA_PEOPLE_LISTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PEOPLE_LIST"); _EXTRA_PEOPLE_LISTReady = true; } return _EXTRA_PEOPLE_LISTContent; } }
        private static Java.Lang.String _EXTRA_PEOPLE_LISTContent = default;
        private static bool _EXTRA_PEOPLE_LISTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_PICTURE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PICTURE { get { if (!_EXTRA_PICTUREReady) { _EXTRA_PICTUREContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PICTURE"); _EXTRA_PICTUREReady = true; } return _EXTRA_PICTUREContent; } }
        private static Java.Lang.String _EXTRA_PICTUREContent = default;
        private static bool _EXTRA_PICTUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_PICTURE_CONTENT_DESCRIPTION"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PICTURE_CONTENT_DESCRIPTION { get { if (!_EXTRA_PICTURE_CONTENT_DESCRIPTIONReady) { _EXTRA_PICTURE_CONTENT_DESCRIPTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PICTURE_CONTENT_DESCRIPTION"); _EXTRA_PICTURE_CONTENT_DESCRIPTIONReady = true; } return _EXTRA_PICTURE_CONTENT_DESCRIPTIONContent; } }
        private static Java.Lang.String _EXTRA_PICTURE_CONTENT_DESCRIPTIONContent = default;
        private static bool _EXTRA_PICTURE_CONTENT_DESCRIPTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_PICTURE_ICON"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PICTURE_ICON { get { if (!_EXTRA_PICTURE_ICONReady) { _EXTRA_PICTURE_ICONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PICTURE_ICON"); _EXTRA_PICTURE_ICONReady = true; } return _EXTRA_PICTURE_ICONContent; } }
        private static Java.Lang.String _EXTRA_PICTURE_ICONContent = default;
        private static bool _EXTRA_PICTURE_ICONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_PROGRESS"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROGRESS { get { if (!_EXTRA_PROGRESSReady) { _EXTRA_PROGRESSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROGRESS"); _EXTRA_PROGRESSReady = true; } return _EXTRA_PROGRESSContent; } }
        private static Java.Lang.String _EXTRA_PROGRESSContent = default;
        private static bool _EXTRA_PROGRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_PROGRESS_INDETERMINATE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROGRESS_INDETERMINATE { get { if (!_EXTRA_PROGRESS_INDETERMINATEReady) { _EXTRA_PROGRESS_INDETERMINATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROGRESS_INDETERMINATE"); _EXTRA_PROGRESS_INDETERMINATEReady = true; } return _EXTRA_PROGRESS_INDETERMINATEContent; } }
        private static Java.Lang.String _EXTRA_PROGRESS_INDETERMINATEContent = default;
        private static bool _EXTRA_PROGRESS_INDETERMINATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_PROGRESS_MAX"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PROGRESS_MAX { get { if (!_EXTRA_PROGRESS_MAXReady) { _EXTRA_PROGRESS_MAXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PROGRESS_MAX"); _EXTRA_PROGRESS_MAXReady = true; } return _EXTRA_PROGRESS_MAXContent; } }
        private static Java.Lang.String _EXTRA_PROGRESS_MAXContent = default;
        private static bool _EXTRA_PROGRESS_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_REMOTE_INPUT_DRAFT"/>
        /// </summary>
        public static Java.Lang.String EXTRA_REMOTE_INPUT_DRAFT { get { if (!_EXTRA_REMOTE_INPUT_DRAFTReady) { _EXTRA_REMOTE_INPUT_DRAFTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_REMOTE_INPUT_DRAFT"); _EXTRA_REMOTE_INPUT_DRAFTReady = true; } return _EXTRA_REMOTE_INPUT_DRAFTContent; } }
        private static Java.Lang.String _EXTRA_REMOTE_INPUT_DRAFTContent = default;
        private static bool _EXTRA_REMOTE_INPUT_DRAFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_REMOTE_INPUT_HISTORY"/>
        /// </summary>
        public static Java.Lang.String EXTRA_REMOTE_INPUT_HISTORY { get { if (!_EXTRA_REMOTE_INPUT_HISTORYReady) { _EXTRA_REMOTE_INPUT_HISTORYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_REMOTE_INPUT_HISTORY"); _EXTRA_REMOTE_INPUT_HISTORYReady = true; } return _EXTRA_REMOTE_INPUT_HISTORYContent; } }
        private static Java.Lang.String _EXTRA_REMOTE_INPUT_HISTORYContent = default;
        private static bool _EXTRA_REMOTE_INPUT_HISTORYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_SELF_DISPLAY_NAME"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String EXTRA_SELF_DISPLAY_NAME { get { if (!_EXTRA_SELF_DISPLAY_NAMEReady) { _EXTRA_SELF_DISPLAY_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_SELF_DISPLAY_NAME"); _EXTRA_SELF_DISPLAY_NAMEReady = true; } return _EXTRA_SELF_DISPLAY_NAMEContent; } }
        private static Java.Lang.String _EXTRA_SELF_DISPLAY_NAMEContent = default;
        private static bool _EXTRA_SELF_DISPLAY_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_SHOW_BIG_PICTURE_WHEN_COLLAPSED"/>
        /// </summary>
        public static Java.Lang.String EXTRA_SHOW_BIG_PICTURE_WHEN_COLLAPSED { get { if (!_EXTRA_SHOW_BIG_PICTURE_WHEN_COLLAPSEDReady) { _EXTRA_SHOW_BIG_PICTURE_WHEN_COLLAPSEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_SHOW_BIG_PICTURE_WHEN_COLLAPSED"); _EXTRA_SHOW_BIG_PICTURE_WHEN_COLLAPSEDReady = true; } return _EXTRA_SHOW_BIG_PICTURE_WHEN_COLLAPSEDContent; } }
        private static Java.Lang.String _EXTRA_SHOW_BIG_PICTURE_WHEN_COLLAPSEDContent = default;
        private static bool _EXTRA_SHOW_BIG_PICTURE_WHEN_COLLAPSEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_SHOW_CHRONOMETER"/>
        /// </summary>
        public static Java.Lang.String EXTRA_SHOW_CHRONOMETER { get { if (!_EXTRA_SHOW_CHRONOMETERReady) { _EXTRA_SHOW_CHRONOMETERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_SHOW_CHRONOMETER"); _EXTRA_SHOW_CHRONOMETERReady = true; } return _EXTRA_SHOW_CHRONOMETERContent; } }
        private static Java.Lang.String _EXTRA_SHOW_CHRONOMETERContent = default;
        private static bool _EXTRA_SHOW_CHRONOMETERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_SHOW_WHEN"/>
        /// </summary>
        public static Java.Lang.String EXTRA_SHOW_WHEN { get { if (!_EXTRA_SHOW_WHENReady) { _EXTRA_SHOW_WHENContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_SHOW_WHEN"); _EXTRA_SHOW_WHENReady = true; } return _EXTRA_SHOW_WHENContent; } }
        private static Java.Lang.String _EXTRA_SHOW_WHENContent = default;
        private static bool _EXTRA_SHOW_WHENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_SMALL_ICON"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String EXTRA_SMALL_ICON { get { if (!_EXTRA_SMALL_ICONReady) { _EXTRA_SMALL_ICONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_SMALL_ICON"); _EXTRA_SMALL_ICONReady = true; } return _EXTRA_SMALL_ICONContent; } }
        private static Java.Lang.String _EXTRA_SMALL_ICONContent = default;
        private static bool _EXTRA_SMALL_ICONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_SUB_TEXT"/>
        /// </summary>
        public static Java.Lang.String EXTRA_SUB_TEXT { get { if (!_EXTRA_SUB_TEXTReady) { _EXTRA_SUB_TEXTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_SUB_TEXT"); _EXTRA_SUB_TEXTReady = true; } return _EXTRA_SUB_TEXTContent; } }
        private static Java.Lang.String _EXTRA_SUB_TEXTContent = default;
        private static bool _EXTRA_SUB_TEXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_SUMMARY_TEXT"/>
        /// </summary>
        public static Java.Lang.String EXTRA_SUMMARY_TEXT { get { if (!_EXTRA_SUMMARY_TEXTReady) { _EXTRA_SUMMARY_TEXTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_SUMMARY_TEXT"); _EXTRA_SUMMARY_TEXTReady = true; } return _EXTRA_SUMMARY_TEXTContent; } }
        private static Java.Lang.String _EXTRA_SUMMARY_TEXTContent = default;
        private static bool _EXTRA_SUMMARY_TEXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_TEMPLATE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_TEMPLATE { get { if (!_EXTRA_TEMPLATEReady) { _EXTRA_TEMPLATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_TEMPLATE"); _EXTRA_TEMPLATEReady = true; } return _EXTRA_TEMPLATEContent; } }
        private static Java.Lang.String _EXTRA_TEMPLATEContent = default;
        private static bool _EXTRA_TEMPLATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_TEXT"/>
        /// </summary>
        public static Java.Lang.String EXTRA_TEXT { get { if (!_EXTRA_TEXTReady) { _EXTRA_TEXTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_TEXT"); _EXTRA_TEXTReady = true; } return _EXTRA_TEXTContent; } }
        private static Java.Lang.String _EXTRA_TEXTContent = default;
        private static bool _EXTRA_TEXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_TEXT_LINES"/>
        /// </summary>
        public static Java.Lang.String EXTRA_TEXT_LINES { get { if (!_EXTRA_TEXT_LINESReady) { _EXTRA_TEXT_LINESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_TEXT_LINES"); _EXTRA_TEXT_LINESReady = true; } return _EXTRA_TEXT_LINESContent; } }
        private static Java.Lang.String _EXTRA_TEXT_LINESContent = default;
        private static bool _EXTRA_TEXT_LINESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_TITLE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_TITLE { get { if (!_EXTRA_TITLEReady) { _EXTRA_TITLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_TITLE"); _EXTRA_TITLEReady = true; } return _EXTRA_TITLEContent; } }
        private static Java.Lang.String _EXTRA_TITLEContent = default;
        private static bool _EXTRA_TITLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_TITLE_BIG"/>
        /// </summary>
        public static Java.Lang.String EXTRA_TITLE_BIG { get { if (!_EXTRA_TITLE_BIGReady) { _EXTRA_TITLE_BIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_TITLE_BIG"); _EXTRA_TITLE_BIGReady = true; } return _EXTRA_TITLE_BIGContent; } }
        private static Java.Lang.String _EXTRA_TITLE_BIGContent = default;
        private static bool _EXTRA_TITLE_BIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_VERIFICATION_ICON"/>
        /// </summary>
        public static Java.Lang.String EXTRA_VERIFICATION_ICON { get { if (!_EXTRA_VERIFICATION_ICONReady) { _EXTRA_VERIFICATION_ICONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_VERIFICATION_ICON"); _EXTRA_VERIFICATION_ICONReady = true; } return _EXTRA_VERIFICATION_ICONContent; } }
        private static Java.Lang.String _EXTRA_VERIFICATION_ICONContent = default;
        private static bool _EXTRA_VERIFICATION_ICONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#EXTRA_VERIFICATION_TEXT"/>
        /// </summary>
        public static Java.Lang.String EXTRA_VERIFICATION_TEXT { get { if (!_EXTRA_VERIFICATION_TEXTReady) { _EXTRA_VERIFICATION_TEXTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_VERIFICATION_TEXT"); _EXTRA_VERIFICATION_TEXTReady = true; } return _EXTRA_VERIFICATION_TEXTContent; } }
        private static Java.Lang.String _EXTRA_VERIFICATION_TEXTContent = default;
        private static bool _EXTRA_VERIFICATION_TEXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#INTENT_CATEGORY_NOTIFICATION_PREFERENCES"/>
        /// </summary>
        public static Java.Lang.String INTENT_CATEGORY_NOTIFICATION_PREFERENCES { get { if (!_INTENT_CATEGORY_NOTIFICATION_PREFERENCESReady) { _INTENT_CATEGORY_NOTIFICATION_PREFERENCESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "INTENT_CATEGORY_NOTIFICATION_PREFERENCES"); _INTENT_CATEGORY_NOTIFICATION_PREFERENCESReady = true; } return _INTENT_CATEGORY_NOTIFICATION_PREFERENCESContent; } }
        private static Java.Lang.String _INTENT_CATEGORY_NOTIFICATION_PREFERENCESContent = default;
        private static bool _INTENT_CATEGORY_NOTIFICATION_PREFERENCESReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#clone()"/>
        /// </summary>
        /// <returns><see cref="Android.App.Notification"/></returns>
        public Android.App.Notification Clone()
        {
            return IExecuteWithSignature<Android.App.Notification>("clone", "()Landroid/app/Notification;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#getBubbleMetadata()"/>
        /// </summary>
        /// <returns><see cref="Android.App.Notification.BubbleMetadata"/></returns>
        public Android.App.Notification.BubbleMetadata GetBubbleMetadata()
        {
            return IExecuteWithSignature<Android.App.Notification.BubbleMetadata>("getBubbleMetadata", "()Landroid/app/Notification$BubbleMetadata;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#getLocusId()"/>
        /// </summary>
        /// <returns><see cref="Android.Content.LocusId"/></returns>
        public Android.Content.LocusId GetLocusId()
        {
            return IExecuteWithSignature<Android.Content.LocusId>("getLocusId", "()Landroid/content/LocusId;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#getLargeIcon()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Drawable.Icon"/></returns>
        public Android.Graphics.Drawable.Icon GetLargeIcon()
        {
            return IExecuteWithSignature<Android.Graphics.Drawable.Icon>("getLargeIcon", "()Landroid/graphics/drawable/Icon;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#getSmallIcon()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Drawable.Icon"/></returns>
        public Android.Graphics.Drawable.Icon GetSmallIcon()
        {
            return IExecuteWithSignature<Android.Graphics.Drawable.Icon>("getSmallIcon", "()Landroid/graphics/drawable/Icon;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#findRemoteInputActionPair(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        /// <returns><see cref="Android.Util.Pair"/></returns>
        public Android.Util.Pair<Android.App.RemoteInput, Android.App.Notification.Action> FindRemoteInputActionPair(bool arg0)
        {
            return IExecuteWithSignature<Android.Util.Pair<Android.App.RemoteInput, Android.App.Notification.Action>>("findRemoteInputActionPair", "(Z)Landroid/util/Pair;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#getAllowSystemGeneratedContextualActions()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetAllowSystemGeneratedContextualActions()
        {
            return IExecuteWithSignature<bool>("getAllowSystemGeneratedContextualActions", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#hasImage()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasImage()
        {
            return IExecuteWithSignature<bool>("hasImage", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#getBadgeIconType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetBadgeIconType()
        {
            return IExecuteWithSignature<int>("getBadgeIconType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#getGroupAlertBehavior()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetGroupAlertBehavior()
        {
            return IExecuteWithSignature<int>("getGroupAlertBehavior", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#getSettingsText()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetSettingsText()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getSettingsText", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#getChannelId()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetChannelId()
        {
            return IExecuteWithSignature<Java.Lang.String>("getChannelId", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#getGroup()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetGroup()
        {
            return IExecuteWithSignature<Java.Lang.String>("getGroup", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#getShortcutId()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetShortcutId()
        {
            return IExecuteWithSignature<Java.Lang.String>("getShortcutId", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#getSortKey()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetSortKey()
        {
            return IExecuteWithSignature<Java.Lang.String>("getSortKey", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#getContextualActions()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.App.Notification.Action> GetContextualActions()
        {
            return IExecuteWithSignature<Java.Util.List<Android.App.Notification.Action>>("getContextualActions", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#getTimeoutAfter()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetTimeoutAfter()
        {
            return IExecuteWithSignature<long>("getTimeoutAfter", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/Notification.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecute("writeToParcel", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region Action
        public partial class Action
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Action.html#%3Cinit%3E(int,java.lang.CharSequence,android.app.PendingIntent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Java.Lang.CharSequence"/></param>
            /// <param name="arg2"><see cref="Android.App.PendingIntent"/></param>
            [global::System.Obsolete()]
            public Action(int arg0, Java.Lang.CharSequence arg1, Android.App.PendingIntent arg2)
                : base(arg0, arg1, arg2)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Action.html#actionIntent"/>
            /// </summary>
            public Android.App.PendingIntent actionIntent { get { return IGetField<Android.App.PendingIntent>("actionIntent"); } set { ISetField("actionIntent", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Action.html#icon"/>
            /// </summary>
            [global::System.Obsolete()]
            public int icon { get { return IGetField<int>("icon"); } set { ISetField("icon", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Action.html#title"/>
            /// </summary>
            public Java.Lang.CharSequence title { get { return IGetField<Java.Lang.CharSequence>("title"); } set { ISetField("title", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Action.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Action.html#SEMANTIC_ACTION_ARCHIVE"/>
            /// </summary>
            public static int SEMANTIC_ACTION_ARCHIVE { get { if (!_SEMANTIC_ACTION_ARCHIVEReady) { _SEMANTIC_ACTION_ARCHIVEContent = SGetField<int>(LocalBridgeClazz, "SEMANTIC_ACTION_ARCHIVE"); _SEMANTIC_ACTION_ARCHIVEReady = true; } return _SEMANTIC_ACTION_ARCHIVEContent; } }
            private static int _SEMANTIC_ACTION_ARCHIVEContent = default;
            private static bool _SEMANTIC_ACTION_ARCHIVEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Action.html#SEMANTIC_ACTION_CALL"/>
            /// </summary>
            public static int SEMANTIC_ACTION_CALL { get { if (!_SEMANTIC_ACTION_CALLReady) { _SEMANTIC_ACTION_CALLContent = SGetField<int>(LocalBridgeClazz, "SEMANTIC_ACTION_CALL"); _SEMANTIC_ACTION_CALLReady = true; } return _SEMANTIC_ACTION_CALLContent; } }
            private static int _SEMANTIC_ACTION_CALLContent = default;
            private static bool _SEMANTIC_ACTION_CALLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Action.html#SEMANTIC_ACTION_DELETE"/>
            /// </summary>
            public static int SEMANTIC_ACTION_DELETE { get { if (!_SEMANTIC_ACTION_DELETEReady) { _SEMANTIC_ACTION_DELETEContent = SGetField<int>(LocalBridgeClazz, "SEMANTIC_ACTION_DELETE"); _SEMANTIC_ACTION_DELETEReady = true; } return _SEMANTIC_ACTION_DELETEContent; } }
            private static int _SEMANTIC_ACTION_DELETEContent = default;
            private static bool _SEMANTIC_ACTION_DELETEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Action.html#SEMANTIC_ACTION_MARK_AS_READ"/>
            /// </summary>
            public static int SEMANTIC_ACTION_MARK_AS_READ { get { if (!_SEMANTIC_ACTION_MARK_AS_READReady) { _SEMANTIC_ACTION_MARK_AS_READContent = SGetField<int>(LocalBridgeClazz, "SEMANTIC_ACTION_MARK_AS_READ"); _SEMANTIC_ACTION_MARK_AS_READReady = true; } return _SEMANTIC_ACTION_MARK_AS_READContent; } }
            private static int _SEMANTIC_ACTION_MARK_AS_READContent = default;
            private static bool _SEMANTIC_ACTION_MARK_AS_READReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Action.html#SEMANTIC_ACTION_MARK_AS_UNREAD"/>
            /// </summary>
            public static int SEMANTIC_ACTION_MARK_AS_UNREAD { get { if (!_SEMANTIC_ACTION_MARK_AS_UNREADReady) { _SEMANTIC_ACTION_MARK_AS_UNREADContent = SGetField<int>(LocalBridgeClazz, "SEMANTIC_ACTION_MARK_AS_UNREAD"); _SEMANTIC_ACTION_MARK_AS_UNREADReady = true; } return _SEMANTIC_ACTION_MARK_AS_UNREADContent; } }
            private static int _SEMANTIC_ACTION_MARK_AS_UNREADContent = default;
            private static bool _SEMANTIC_ACTION_MARK_AS_UNREADReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Action.html#SEMANTIC_ACTION_MUTE"/>
            /// </summary>
            public static int SEMANTIC_ACTION_MUTE { get { if (!_SEMANTIC_ACTION_MUTEReady) { _SEMANTIC_ACTION_MUTEContent = SGetField<int>(LocalBridgeClazz, "SEMANTIC_ACTION_MUTE"); _SEMANTIC_ACTION_MUTEReady = true; } return _SEMANTIC_ACTION_MUTEContent; } }
            private static int _SEMANTIC_ACTION_MUTEContent = default;
            private static bool _SEMANTIC_ACTION_MUTEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Action.html#SEMANTIC_ACTION_NONE"/>
            /// </summary>
            public static int SEMANTIC_ACTION_NONE { get { if (!_SEMANTIC_ACTION_NONEReady) { _SEMANTIC_ACTION_NONEContent = SGetField<int>(LocalBridgeClazz, "SEMANTIC_ACTION_NONE"); _SEMANTIC_ACTION_NONEReady = true; } return _SEMANTIC_ACTION_NONEContent; } }
            private static int _SEMANTIC_ACTION_NONEContent = default;
            private static bool _SEMANTIC_ACTION_NONEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Action.html#SEMANTIC_ACTION_REPLY"/>
            /// </summary>
            public static int SEMANTIC_ACTION_REPLY { get { if (!_SEMANTIC_ACTION_REPLYReady) { _SEMANTIC_ACTION_REPLYContent = SGetField<int>(LocalBridgeClazz, "SEMANTIC_ACTION_REPLY"); _SEMANTIC_ACTION_REPLYReady = true; } return _SEMANTIC_ACTION_REPLYContent; } }
            private static int _SEMANTIC_ACTION_REPLYContent = default;
            private static bool _SEMANTIC_ACTION_REPLYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Action.html#SEMANTIC_ACTION_THUMBS_DOWN"/>
            /// </summary>
            public static int SEMANTIC_ACTION_THUMBS_DOWN { get { if (!_SEMANTIC_ACTION_THUMBS_DOWNReady) { _SEMANTIC_ACTION_THUMBS_DOWNContent = SGetField<int>(LocalBridgeClazz, "SEMANTIC_ACTION_THUMBS_DOWN"); _SEMANTIC_ACTION_THUMBS_DOWNReady = true; } return _SEMANTIC_ACTION_THUMBS_DOWNContent; } }
            private static int _SEMANTIC_ACTION_THUMBS_DOWNContent = default;
            private static bool _SEMANTIC_ACTION_THUMBS_DOWNReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Action.html#SEMANTIC_ACTION_THUMBS_UP"/>
            /// </summary>
            public static int SEMANTIC_ACTION_THUMBS_UP { get { if (!_SEMANTIC_ACTION_THUMBS_UPReady) { _SEMANTIC_ACTION_THUMBS_UPContent = SGetField<int>(LocalBridgeClazz, "SEMANTIC_ACTION_THUMBS_UP"); _SEMANTIC_ACTION_THUMBS_UPReady = true; } return _SEMANTIC_ACTION_THUMBS_UPContent; } }
            private static int _SEMANTIC_ACTION_THUMBS_UPContent = default;
            private static bool _SEMANTIC_ACTION_THUMBS_UPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Action.html#SEMANTIC_ACTION_UNMUTE"/>
            /// </summary>
            public static int SEMANTIC_ACTION_UNMUTE { get { if (!_SEMANTIC_ACTION_UNMUTEReady) { _SEMANTIC_ACTION_UNMUTEContent = SGetField<int>(LocalBridgeClazz, "SEMANTIC_ACTION_UNMUTE"); _SEMANTIC_ACTION_UNMUTEReady = true; } return _SEMANTIC_ACTION_UNMUTEContent; } }
            private static int _SEMANTIC_ACTION_UNMUTEContent = default;
            private static bool _SEMANTIC_ACTION_UNMUTEReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Action.html#clone()"/>
            /// </summary>
            /// <returns><see cref="Android.App.Notification.Action"/></returns>
            public Android.App.Notification.Action Clone()
            {
                return IExecuteWithSignature<Android.App.Notification.Action>("clone", "()Landroid/app/Notification$Action;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Action.html#getDataOnlyRemoteInputs()"/>
            /// </summary>
            /// <returns><see cref="Android.App.RemoteInput"/></returns>
            public Android.App.RemoteInput[] GetDataOnlyRemoteInputs()
            {
                return IExecuteWithSignatureArray<Android.App.RemoteInput>("getDataOnlyRemoteInputs", "()[Landroid/app/RemoteInput;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Action.html#getRemoteInputs()"/>
            /// </summary>
            /// <returns><see cref="Android.App.RemoteInput"/></returns>
            public Android.App.RemoteInput[] GetRemoteInputs()
            {
                return IExecuteWithSignatureArray<Android.App.RemoteInput>("getRemoteInputs", "()[Landroid/app/RemoteInput;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Action.html#getIcon()"/>
            /// </summary>
            /// <returns><see cref="Android.Graphics.Drawable.Icon"/></returns>
            public Android.Graphics.Drawable.Icon GetIcon()
            {
                return IExecuteWithSignature<Android.Graphics.Drawable.Icon>("getIcon", "()Landroid/graphics/drawable/Icon;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Action.html#getExtras()"/>
            /// </summary>
            /// <returns><see cref="Android.Os.Bundle"/></returns>
            public Android.Os.Bundle GetExtras()
            {
                return IExecuteWithSignature<Android.Os.Bundle>("getExtras", "()Landroid/os/Bundle;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Action.html#getAllowGeneratedReplies()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool GetAllowGeneratedReplies()
            {
                return IExecuteWithSignature<bool>("getAllowGeneratedReplies", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Action.html#isAuthenticationRequired()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsAuthenticationRequired()
            {
                return IExecuteWithSignature<bool>("isAuthenticationRequired", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Action.html#isContextual()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsContextual()
            {
                return IExecuteWithSignature<bool>("isContextual", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Action.html#describeContents()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int DescribeContents()
            {
                return IExecuteWithSignature<int>("describeContents", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Action.html#getSemanticAction()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetSemanticAction()
            {
                return IExecuteWithSignature<int>("getSemanticAction", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Action.html#writeToParcel(android.os.Parcel,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
            {
                IExecute("writeToParcel", arg0, arg1);
            }

            #endregion

            #region Nested classes
            #region WearableExtender
            public partial class WearableExtender
            {
                #region Constructors
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.Action.WearableExtender.html#%3Cinit%3E(android.app.Notification.Action)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.App.Notification.Action"/></param>
                public WearableExtender(Android.App.Notification.Action arg0)
                    : base(arg0)
                {
                }

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields

                #endregion

                #region Static methods

                #endregion

                #region Instance methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.Action.WearableExtender.html#extend(android.app.Notification.Action.Builder)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.App.Notification.Action.Builder"/></param>
                /// <returns><see cref="Android.App.Notification.Action.Builder"/></returns>
                public Android.App.Notification.Action.Builder Extend(Android.App.Notification.Action.Builder arg0)
                {
                    return IExecuteWithSignature<Android.App.Notification.Action.Builder>("extend", "(Landroid/app/Notification$Action$Builder;)Landroid/app/Notification$Action$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.Action.WearableExtender.html#clone()"/>
                /// </summary>
                /// <returns><see cref="Android.App.Notification.Action.WearableExtender"/></returns>
                public Android.App.Notification.Action.WearableExtender Clone()
                {
                    return IExecuteWithSignature<Android.App.Notification.Action.WearableExtender>("clone", "()Landroid/app/Notification$Action$WearableExtender;");
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.Action.WearableExtender.html#setAvailableOffline(boolean)"/>
                /// </summary>
                /// <param name="arg0"><see cref="bool"/></param>
                /// <returns><see cref="Android.App.Notification.Action.WearableExtender"/></returns>
                public Android.App.Notification.Action.WearableExtender SetAvailableOffline(bool arg0)
                {
                    return IExecuteWithSignature<Android.App.Notification.Action.WearableExtender>("setAvailableOffline", "(Z)Landroid/app/Notification$Action$WearableExtender;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.Action.WearableExtender.html#setCancelLabel(java.lang.CharSequence)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
                /// <returns><see cref="Android.App.Notification.Action.WearableExtender"/></returns>
                [global::System.Obsolete()]
                public Android.App.Notification.Action.WearableExtender SetCancelLabel(Java.Lang.CharSequence arg0)
                {
                    return IExecuteWithSignature<Android.App.Notification.Action.WearableExtender>("setCancelLabel", "(Ljava/lang/CharSequence;)Landroid/app/Notification$Action$WearableExtender;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.Action.WearableExtender.html#setConfirmLabel(java.lang.CharSequence)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
                /// <returns><see cref="Android.App.Notification.Action.WearableExtender"/></returns>
                [global::System.Obsolete()]
                public Android.App.Notification.Action.WearableExtender SetConfirmLabel(Java.Lang.CharSequence arg0)
                {
                    return IExecuteWithSignature<Android.App.Notification.Action.WearableExtender>("setConfirmLabel", "(Ljava/lang/CharSequence;)Landroid/app/Notification$Action$WearableExtender;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.Action.WearableExtender.html#setHintDisplayActionInline(boolean)"/>
                /// </summary>
                /// <param name="arg0"><see cref="bool"/></param>
                /// <returns><see cref="Android.App.Notification.Action.WearableExtender"/></returns>
                public Android.App.Notification.Action.WearableExtender SetHintDisplayActionInline(bool arg0)
                {
                    return IExecuteWithSignature<Android.App.Notification.Action.WearableExtender>("setHintDisplayActionInline", "(Z)Landroid/app/Notification$Action$WearableExtender;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.Action.WearableExtender.html#setHintLaunchesActivity(boolean)"/>
                /// </summary>
                /// <param name="arg0"><see cref="bool"/></param>
                /// <returns><see cref="Android.App.Notification.Action.WearableExtender"/></returns>
                public Android.App.Notification.Action.WearableExtender SetHintLaunchesActivity(bool arg0)
                {
                    return IExecuteWithSignature<Android.App.Notification.Action.WearableExtender>("setHintLaunchesActivity", "(Z)Landroid/app/Notification$Action$WearableExtender;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.Action.WearableExtender.html#setInProgressLabel(java.lang.CharSequence)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
                /// <returns><see cref="Android.App.Notification.Action.WearableExtender"/></returns>
                [global::System.Obsolete()]
                public Android.App.Notification.Action.WearableExtender SetInProgressLabel(Java.Lang.CharSequence arg0)
                {
                    return IExecuteWithSignature<Android.App.Notification.Action.WearableExtender>("setInProgressLabel", "(Ljava/lang/CharSequence;)Landroid/app/Notification$Action$WearableExtender;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.Action.WearableExtender.html#getHintDisplayActionInline()"/>
                /// </summary>
                /// <returns><see cref="bool"/></returns>
                public bool GetHintDisplayActionInline()
                {
                    return IExecuteWithSignature<bool>("getHintDisplayActionInline", "()Z");
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.Action.WearableExtender.html#getHintLaunchesActivity()"/>
                /// </summary>
                /// <returns><see cref="bool"/></returns>
                public bool GetHintLaunchesActivity()
                {
                    return IExecuteWithSignature<bool>("getHintLaunchesActivity", "()Z");
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.Action.WearableExtender.html#isAvailableOffline()"/>
                /// </summary>
                /// <returns><see cref="bool"/></returns>
                public bool IsAvailableOffline()
                {
                    return IExecuteWithSignature<bool>("isAvailableOffline", "()Z");
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.Action.WearableExtender.html#getCancelLabel()"/>
                /// </summary>
                /// <returns><see cref="Java.Lang.CharSequence"/></returns>
                [global::System.Obsolete()]
                public Java.Lang.CharSequence GetCancelLabel()
                {
                    return IExecuteWithSignature<Java.Lang.CharSequence>("getCancelLabel", "()Ljava/lang/CharSequence;");
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.Action.WearableExtender.html#getConfirmLabel()"/>
                /// </summary>
                /// <returns><see cref="Java.Lang.CharSequence"/></returns>
                [global::System.Obsolete()]
                public Java.Lang.CharSequence GetConfirmLabel()
                {
                    return IExecuteWithSignature<Java.Lang.CharSequence>("getConfirmLabel", "()Ljava/lang/CharSequence;");
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.Action.WearableExtender.html#getInProgressLabel()"/>
                /// </summary>
                /// <returns><see cref="Java.Lang.CharSequence"/></returns>
                [global::System.Obsolete()]
                public Java.Lang.CharSequence GetInProgressLabel()
                {
                    return IExecuteWithSignature<Java.Lang.CharSequence>("getInProgressLabel", "()Ljava/lang/CharSequence;");
                }

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

            #region Extender
            public partial class Extender
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields

                #endregion

                #region Static methods

                #endregion

                #region Instance methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.Action.Extender.html#extend(android.app.Notification.Action.Builder)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.App.Notification.Action.Builder"/></param>
                /// <returns><see cref="Android.App.Notification.Action.Builder"/></returns>
                public Android.App.Notification.Action.Builder Extend(Android.App.Notification.Action.Builder arg0)
                {
                    return IExecuteWithSignature<Android.App.Notification.Action.Builder>("extend", "(Landroid/app/Notification$Action$Builder;)Landroid/app/Notification$Action$Builder;", arg0);
                }

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

            #region Builder
            public partial class Builder
            {
                #region Constructors
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.Action.Builder.html#%3Cinit%3E(android.app.Notification.Action)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.App.Notification.Action"/></param>
                public Builder(Android.App.Notification.Action arg0)
                    : base(arg0)
                {
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.Action.Builder.html#%3Cinit%3E(android.graphics.drawable.Icon,java.lang.CharSequence,android.app.PendingIntent)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Graphics.Drawable.Icon"/></param>
                /// <param name="arg1"><see cref="Java.Lang.CharSequence"/></param>
                /// <param name="arg2"><see cref="Android.App.PendingIntent"/></param>
                public Builder(Android.Graphics.Drawable.Icon arg0, Java.Lang.CharSequence arg1, Android.App.PendingIntent arg2)
                    : base(arg0, arg1, arg2)
                {
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.Action.Builder.html#%3Cinit%3E(int,java.lang.CharSequence,android.app.PendingIntent)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <param name="arg1"><see cref="Java.Lang.CharSequence"/></param>
                /// <param name="arg2"><see cref="Android.App.PendingIntent"/></param>
                [global::System.Obsolete()]
                public Builder(int arg0, Java.Lang.CharSequence arg1, Android.App.PendingIntent arg2)
                    : base(arg0, arg1, arg2)
                {
                }

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields

                #endregion

                #region Static methods

                #endregion

                #region Instance methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.Action.Builder.html#build()"/>
                /// </summary>
                /// <returns><see cref="Android.App.Notification.Action"/></returns>
                public Android.App.Notification.Action Build()
                {
                    return IExecuteWithSignature<Android.App.Notification.Action>("build", "()Landroid/app/Notification$Action;");
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.Action.Builder.html#addExtras(android.os.Bundle)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Os.Bundle"/></param>
                /// <returns><see cref="Android.App.Notification.Action.Builder"/></returns>
                public Android.App.Notification.Action.Builder AddExtras(Android.Os.Bundle arg0)
                {
                    return IExecuteWithSignature<Android.App.Notification.Action.Builder>("addExtras", "(Landroid/os/Bundle;)Landroid/app/Notification$Action$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.Action.Builder.html#addRemoteInput(android.app.RemoteInput)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.App.RemoteInput"/></param>
                /// <returns><see cref="Android.App.Notification.Action.Builder"/></returns>
                public Android.App.Notification.Action.Builder AddRemoteInput(Android.App.RemoteInput arg0)
                {
                    return IExecuteWithSignature<Android.App.Notification.Action.Builder>("addRemoteInput", "(Landroid/app/RemoteInput;)Landroid/app/Notification$Action$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.Action.Builder.html#extend(android.app.Notification.Action.Extender)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.App.Notification.Action.Extender"/></param>
                /// <returns><see cref="Android.App.Notification.Action.Builder"/></returns>
                public Android.App.Notification.Action.Builder Extend(Android.App.Notification.Action.Extender arg0)
                {
                    return IExecuteWithSignature<Android.App.Notification.Action.Builder>("extend", "(Landroid/app/Notification$Action$Extender;)Landroid/app/Notification$Action$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.Action.Builder.html#setAllowGeneratedReplies(boolean)"/>
                /// </summary>
                /// <param name="arg0"><see cref="bool"/></param>
                /// <returns><see cref="Android.App.Notification.Action.Builder"/></returns>
                public Android.App.Notification.Action.Builder SetAllowGeneratedReplies(bool arg0)
                {
                    return IExecuteWithSignature<Android.App.Notification.Action.Builder>("setAllowGeneratedReplies", "(Z)Landroid/app/Notification$Action$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.Action.Builder.html#setAuthenticationRequired(boolean)"/>
                /// </summary>
                /// <param name="arg0"><see cref="bool"/></param>
                /// <returns><see cref="Android.App.Notification.Action.Builder"/></returns>
                public Android.App.Notification.Action.Builder SetAuthenticationRequired(bool arg0)
                {
                    return IExecuteWithSignature<Android.App.Notification.Action.Builder>("setAuthenticationRequired", "(Z)Landroid/app/Notification$Action$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.Action.Builder.html#setContextual(boolean)"/>
                /// </summary>
                /// <param name="arg0"><see cref="bool"/></param>
                /// <returns><see cref="Android.App.Notification.Action.Builder"/></returns>
                public Android.App.Notification.Action.Builder SetContextual(bool arg0)
                {
                    return IExecuteWithSignature<Android.App.Notification.Action.Builder>("setContextual", "(Z)Landroid/app/Notification$Action$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.Action.Builder.html#setSemanticAction(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <returns><see cref="Android.App.Notification.Action.Builder"/></returns>
                public Android.App.Notification.Action.Builder SetSemanticAction(int arg0)
                {
                    return IExecuteWithSignature<Android.App.Notification.Action.Builder>("setSemanticAction", "(I)Landroid/app/Notification$Action$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.Action.Builder.html#getExtras()"/>
                /// </summary>
                /// <returns><see cref="Android.Os.Bundle"/></returns>
                public Android.Os.Bundle GetExtras()
                {
                    return IExecuteWithSignature<Android.Os.Bundle>("getExtras", "()Landroid/os/Bundle;");
                }

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

        
            #endregion

            // TODO: complete the class
        }
        #endregion

        #region BigPictureStyle
        public partial class BigPictureStyle
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.BigPictureStyle.html#%3Cinit%3E(android.app.Notification.Builder)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.App.Notification.Builder"/></param>
            [global::System.Obsolete()]
            public BigPictureStyle(Android.App.Notification.Builder arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.BigPictureStyle.html#bigLargeIcon(android.graphics.Bitmap)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.Bitmap"/></param>
            /// <returns><see cref="Android.App.Notification.BigPictureStyle"/></returns>
            public Android.App.Notification.BigPictureStyle BigLargeIcon(Android.Graphics.Bitmap arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.BigPictureStyle>("bigLargeIcon", "(Landroid/graphics/Bitmap;)Landroid/app/Notification$BigPictureStyle;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.BigPictureStyle.html#bigLargeIcon(android.graphics.drawable.Icon)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.Drawable.Icon"/></param>
            /// <returns><see cref="Android.App.Notification.BigPictureStyle"/></returns>
            public Android.App.Notification.BigPictureStyle BigLargeIcon(Android.Graphics.Drawable.Icon arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.BigPictureStyle>("bigLargeIcon", "(Landroid/graphics/drawable/Icon;)Landroid/app/Notification$BigPictureStyle;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.BigPictureStyle.html#bigPicture(android.graphics.Bitmap)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.Bitmap"/></param>
            /// <returns><see cref="Android.App.Notification.BigPictureStyle"/></returns>
            public Android.App.Notification.BigPictureStyle BigPicture(Android.Graphics.Bitmap arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.BigPictureStyle>("bigPicture", "(Landroid/graphics/Bitmap;)Landroid/app/Notification$BigPictureStyle;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.BigPictureStyle.html#bigPicture(android.graphics.drawable.Icon)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.Drawable.Icon"/></param>
            /// <returns><see cref="Android.App.Notification.BigPictureStyle"/></returns>
            public Android.App.Notification.BigPictureStyle BigPicture(Android.Graphics.Drawable.Icon arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.BigPictureStyle>("bigPicture", "(Landroid/graphics/drawable/Icon;)Landroid/app/Notification$BigPictureStyle;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.BigPictureStyle.html#setBigContentTitle(java.lang.CharSequence)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
            /// <returns><see cref="Android.App.Notification.BigPictureStyle"/></returns>
            public Android.App.Notification.BigPictureStyle SetBigContentTitle(Java.Lang.CharSequence arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.BigPictureStyle>("setBigContentTitle", "(Ljava/lang/CharSequence;)Landroid/app/Notification$BigPictureStyle;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.BigPictureStyle.html#setContentDescription(java.lang.CharSequence)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
            /// <returns><see cref="Android.App.Notification.BigPictureStyle"/></returns>
            public Android.App.Notification.BigPictureStyle SetContentDescription(Java.Lang.CharSequence arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.BigPictureStyle>("setContentDescription", "(Ljava/lang/CharSequence;)Landroid/app/Notification$BigPictureStyle;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.BigPictureStyle.html#setSummaryText(java.lang.CharSequence)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
            /// <returns><see cref="Android.App.Notification.BigPictureStyle"/></returns>
            public Android.App.Notification.BigPictureStyle SetSummaryText(Java.Lang.CharSequence arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.BigPictureStyle>("setSummaryText", "(Ljava/lang/CharSequence;)Landroid/app/Notification$BigPictureStyle;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.BigPictureStyle.html#showBigPictureWhenCollapsed(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.App.Notification.BigPictureStyle"/></returns>
            public Android.App.Notification.BigPictureStyle ShowBigPictureWhenCollapsed(bool arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.BigPictureStyle>("showBigPictureWhenCollapsed", "(Z)Landroid/app/Notification$BigPictureStyle;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region BigTextStyle
        public partial class BigTextStyle
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.BigTextStyle.html#%3Cinit%3E(android.app.Notification.Builder)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.App.Notification.Builder"/></param>
            [global::System.Obsolete()]
            public BigTextStyle(Android.App.Notification.Builder arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.BigTextStyle.html#bigText(java.lang.CharSequence)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
            /// <returns><see cref="Android.App.Notification.BigTextStyle"/></returns>
            public Android.App.Notification.BigTextStyle BigText(Java.Lang.CharSequence arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.BigTextStyle>("bigText", "(Ljava/lang/CharSequence;)Landroid/app/Notification$BigTextStyle;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.BigTextStyle.html#setBigContentTitle(java.lang.CharSequence)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
            /// <returns><see cref="Android.App.Notification.BigTextStyle"/></returns>
            public Android.App.Notification.BigTextStyle SetBigContentTitle(Java.Lang.CharSequence arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.BigTextStyle>("setBigContentTitle", "(Ljava/lang/CharSequence;)Landroid/app/Notification$BigTextStyle;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.BigTextStyle.html#setSummaryText(java.lang.CharSequence)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
            /// <returns><see cref="Android.App.Notification.BigTextStyle"/></returns>
            public Android.App.Notification.BigTextStyle SetSummaryText(Java.Lang.CharSequence arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.BigTextStyle>("setSummaryText", "(Ljava/lang/CharSequence;)Landroid/app/Notification$BigTextStyle;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region BubbleMetadata
        public partial class BubbleMetadata
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.BubbleMetadata.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.BubbleMetadata.html#getDeleteIntent()"/>
            /// </summary>
            /// <returns><see cref="Android.App.PendingIntent"/></returns>
            public Android.App.PendingIntent GetDeleteIntent()
            {
                return IExecuteWithSignature<Android.App.PendingIntent>("getDeleteIntent", "()Landroid/app/PendingIntent;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.BubbleMetadata.html#getIntent()"/>
            /// </summary>
            /// <returns><see cref="Android.App.PendingIntent"/></returns>
            public Android.App.PendingIntent GetIntent()
            {
                return IExecuteWithSignature<Android.App.PendingIntent>("getIntent", "()Landroid/app/PendingIntent;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.BubbleMetadata.html#getIcon()"/>
            /// </summary>
            /// <returns><see cref="Android.Graphics.Drawable.Icon"/></returns>
            public Android.Graphics.Drawable.Icon GetIcon()
            {
                return IExecuteWithSignature<Android.Graphics.Drawable.Icon>("getIcon", "()Landroid/graphics/drawable/Icon;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.BubbleMetadata.html#getAutoExpandBubble()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool GetAutoExpandBubble()
            {
                return IExecuteWithSignature<bool>("getAutoExpandBubble", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.BubbleMetadata.html#isBubbleSuppressable()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsBubbleSuppressable()
            {
                return IExecuteWithSignature<bool>("isBubbleSuppressable", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.BubbleMetadata.html#isBubbleSuppressed()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsBubbleSuppressed()
            {
                return IExecuteWithSignature<bool>("isBubbleSuppressed", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.BubbleMetadata.html#isNotificationSuppressed()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsNotificationSuppressed()
            {
                return IExecuteWithSignature<bool>("isNotificationSuppressed", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.BubbleMetadata.html#describeContents()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int DescribeContents()
            {
                return IExecuteWithSignature<int>("describeContents", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.BubbleMetadata.html#getDesiredHeight()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetDesiredHeight()
            {
                return IExecuteWithSignature<int>("getDesiredHeight", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.BubbleMetadata.html#getDesiredHeightResId()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetDesiredHeightResId()
            {
                return IExecuteWithSignature<int>("getDesiredHeightResId", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.BubbleMetadata.html#getShortcutId()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetShortcutId()
            {
                return IExecuteWithSignature<Java.Lang.String>("getShortcutId", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.BubbleMetadata.html#writeToParcel(android.os.Parcel,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
            {
                IExecute("writeToParcel", arg0, arg1);
            }

            #endregion

            #region Nested classes
            #region Builder
            public partial class Builder
            {
                #region Constructors
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.BubbleMetadata.Builder.html#%3Cinit%3E(android.app.PendingIntent,android.graphics.drawable.Icon)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.App.PendingIntent"/></param>
                /// <param name="arg1"><see cref="Android.Graphics.Drawable.Icon"/></param>
                public Builder(Android.App.PendingIntent arg0, Android.Graphics.Drawable.Icon arg1)
                    : base(arg0, arg1)
                {
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.BubbleMetadata.Builder.html#%3Cinit%3E(java.lang.String)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Java.Lang.String"/></param>
                public Builder(Java.Lang.String arg0)
                    : base(arg0)
                {
                }

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields

                #endregion

                #region Static methods

                #endregion

                #region Instance methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.BubbleMetadata.Builder.html#build()"/>
                /// </summary>
                /// <returns><see cref="Android.App.Notification.BubbleMetadata"/></returns>
                public Android.App.Notification.BubbleMetadata Build()
                {
                    return IExecuteWithSignature<Android.App.Notification.BubbleMetadata>("build", "()Landroid/app/Notification$BubbleMetadata;");
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.BubbleMetadata.Builder.html#setAutoExpandBubble(boolean)"/>
                /// </summary>
                /// <param name="arg0"><see cref="bool"/></param>
                /// <returns><see cref="Android.App.Notification.BubbleMetadata.Builder"/></returns>
                public Android.App.Notification.BubbleMetadata.Builder SetAutoExpandBubble(bool arg0)
                {
                    return IExecuteWithSignature<Android.App.Notification.BubbleMetadata.Builder>("setAutoExpandBubble", "(Z)Landroid/app/Notification$BubbleMetadata$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.BubbleMetadata.Builder.html#setDeleteIntent(android.app.PendingIntent)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.App.PendingIntent"/></param>
                /// <returns><see cref="Android.App.Notification.BubbleMetadata.Builder"/></returns>
                public Android.App.Notification.BubbleMetadata.Builder SetDeleteIntent(Android.App.PendingIntent arg0)
                {
                    return IExecuteWithSignature<Android.App.Notification.BubbleMetadata.Builder>("setDeleteIntent", "(Landroid/app/PendingIntent;)Landroid/app/Notification$BubbleMetadata$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.BubbleMetadata.Builder.html#setDesiredHeight(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <returns><see cref="Android.App.Notification.BubbleMetadata.Builder"/></returns>
                public Android.App.Notification.BubbleMetadata.Builder SetDesiredHeight(int arg0)
                {
                    return IExecuteWithSignature<Android.App.Notification.BubbleMetadata.Builder>("setDesiredHeight", "(I)Landroid/app/Notification$BubbleMetadata$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.BubbleMetadata.Builder.html#setDesiredHeightResId(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <returns><see cref="Android.App.Notification.BubbleMetadata.Builder"/></returns>
                public Android.App.Notification.BubbleMetadata.Builder SetDesiredHeightResId(int arg0)
                {
                    return IExecuteWithSignature<Android.App.Notification.BubbleMetadata.Builder>("setDesiredHeightResId", "(I)Landroid/app/Notification$BubbleMetadata$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.BubbleMetadata.Builder.html#setIcon(android.graphics.drawable.Icon)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Graphics.Drawable.Icon"/></param>
                /// <returns><see cref="Android.App.Notification.BubbleMetadata.Builder"/></returns>
                public Android.App.Notification.BubbleMetadata.Builder SetIcon(Android.Graphics.Drawable.Icon arg0)
                {
                    return IExecuteWithSignature<Android.App.Notification.BubbleMetadata.Builder>("setIcon", "(Landroid/graphics/drawable/Icon;)Landroid/app/Notification$BubbleMetadata$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.BubbleMetadata.Builder.html#setIntent(android.app.PendingIntent)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.App.PendingIntent"/></param>
                /// <returns><see cref="Android.App.Notification.BubbleMetadata.Builder"/></returns>
                public Android.App.Notification.BubbleMetadata.Builder SetIntent(Android.App.PendingIntent arg0)
                {
                    return IExecuteWithSignature<Android.App.Notification.BubbleMetadata.Builder>("setIntent", "(Landroid/app/PendingIntent;)Landroid/app/Notification$BubbleMetadata$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.BubbleMetadata.Builder.html#setSuppressableBubble(boolean)"/>
                /// </summary>
                /// <param name="arg0"><see cref="bool"/></param>
                /// <returns><see cref="Android.App.Notification.BubbleMetadata.Builder"/></returns>
                public Android.App.Notification.BubbleMetadata.Builder SetSuppressableBubble(bool arg0)
                {
                    return IExecuteWithSignature<Android.App.Notification.BubbleMetadata.Builder>("setSuppressableBubble", "(Z)Landroid/app/Notification$BubbleMetadata$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.BubbleMetadata.Builder.html#setSuppressNotification(boolean)"/>
                /// </summary>
                /// <param name="arg0"><see cref="bool"/></param>
                /// <returns><see cref="Android.App.Notification.BubbleMetadata.Builder"/></returns>
                public Android.App.Notification.BubbleMetadata.Builder SetSuppressNotification(bool arg0)
                {
                    return IExecuteWithSignature<Android.App.Notification.BubbleMetadata.Builder>("setSuppressNotification", "(Z)Landroid/app/Notification$BubbleMetadata$Builder;", arg0);
                }

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

        
            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Builder
        public partial class Builder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#%3Cinit%3E(android.content.Context,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.Context"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            public Builder(Android.Content.Context arg0, Java.Lang.String arg1)
                : base(arg0, arg1)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#%3Cinit%3E(android.content.Context)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.Context"/></param>
            [global::System.Obsolete()]
            public Builder(Android.Content.Context arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#recoverBuilder(android.content.Context,android.app.Notification)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.Context"/></param>
            /// <param name="arg1"><see cref="Android.App.Notification"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public static Android.App.Notification.Builder RecoverBuilder(Android.Content.Context arg0, Android.App.Notification arg1)
            {
                return SExecute<Android.App.Notification.Builder>(LocalBridgeClazz, "recoverBuilder", arg0, arg1);
            }

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.App.Notification"/></returns>
            public Android.App.Notification Build()
            {
                return IExecuteWithSignature<Android.App.Notification>("build", "()Landroid/app/Notification;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#getNotification()"/>
            /// </summary>
            /// <returns><see cref="Android.App.Notification"/></returns>
            [global::System.Obsolete()]
            public Android.App.Notification GetNotification()
            {
                return IExecuteWithSignature<Android.App.Notification>("getNotification", "()Landroid/app/Notification;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#addAction(android.app.Notification.Action)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.App.Notification.Action"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder AddAction(Android.App.Notification.Action arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("addAction", "(Landroid/app/Notification$Action;)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#addAction(int,java.lang.CharSequence,android.app.PendingIntent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Java.Lang.CharSequence"/></param>
            /// <param name="arg2"><see cref="Android.App.PendingIntent"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            [global::System.Obsolete()]
            public Android.App.Notification.Builder AddAction(int arg0, Java.Lang.CharSequence arg1, Android.App.PendingIntent arg2)
            {
                return IExecute<Android.App.Notification.Builder>("addAction", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#addExtras(android.os.Bundle)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Bundle"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder AddExtras(Android.Os.Bundle arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("addExtras", "(Landroid/os/Bundle;)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#addPerson(android.app.Person)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.App.Person"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder AddPerson(Android.App.Person arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("addPerson", "(Landroid/app/Person;)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#addPerson(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            [global::System.Obsolete()]
            public Android.App.Notification.Builder AddPerson(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("addPerson", "(Ljava/lang/String;)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#extend(android.app.Notification.Extender)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.App.Notification.Extender"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder Extend(Android.App.Notification.Extender arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("extend", "(Landroid/app/Notification$Extender;)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setActions(android.app.Notification.Action[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.App.Notification.Action"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetActions(params Android.App.Notification.Action[] arg0)
            {
                if (arg0.Length == 0) return IExecuteWithSignature<Android.App.Notification.Builder>("setActions", "([Landroid/app/Notification$Action;)Landroid/app/Notification$Builder;"); else return IExecuteWithSignature<Android.App.Notification.Builder>("setActions", "([Landroid/app/Notification$Action;)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setAllowSystemGeneratedContextualActions(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetAllowSystemGeneratedContextualActions(bool arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setAllowSystemGeneratedContextualActions", "(Z)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setAutoCancel(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetAutoCancel(bool arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setAutoCancel", "(Z)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setBadgeIconType(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetBadgeIconType(int arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setBadgeIconType", "(I)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setBubbleMetadata(android.app.Notification.BubbleMetadata)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.App.Notification.BubbleMetadata"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetBubbleMetadata(Android.App.Notification.BubbleMetadata arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setBubbleMetadata", "(Landroid/app/Notification$BubbleMetadata;)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setCategory(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetCategory(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setCategory", "(Ljava/lang/String;)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setChannelId(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetChannelId(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setChannelId", "(Ljava/lang/String;)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setChronometerCountDown(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetChronometerCountDown(bool arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setChronometerCountDown", "(Z)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setColor(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetColor(int arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setColor", "(I)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setColorized(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetColorized(bool arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setColorized", "(Z)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setContent(android.widget.RemoteViews)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Widget.RemoteViews"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            [global::System.Obsolete()]
            public Android.App.Notification.Builder SetContent(Android.Widget.RemoteViews arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setContent", "(Landroid/widget/RemoteViews;)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setContentInfo(java.lang.CharSequence)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            [global::System.Obsolete()]
            public Android.App.Notification.Builder SetContentInfo(Java.Lang.CharSequence arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setContentInfo", "(Ljava/lang/CharSequence;)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setContentIntent(android.app.PendingIntent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.App.PendingIntent"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetContentIntent(Android.App.PendingIntent arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setContentIntent", "(Landroid/app/PendingIntent;)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setContentText(java.lang.CharSequence)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetContentText(Java.Lang.CharSequence arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setContentText", "(Ljava/lang/CharSequence;)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setContentTitle(java.lang.CharSequence)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetContentTitle(Java.Lang.CharSequence arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setContentTitle", "(Ljava/lang/CharSequence;)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setCustomBigContentView(android.widget.RemoteViews)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Widget.RemoteViews"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetCustomBigContentView(Android.Widget.RemoteViews arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setCustomBigContentView", "(Landroid/widget/RemoteViews;)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setCustomContentView(android.widget.RemoteViews)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Widget.RemoteViews"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetCustomContentView(Android.Widget.RemoteViews arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setCustomContentView", "(Landroid/widget/RemoteViews;)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setCustomHeadsUpContentView(android.widget.RemoteViews)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Widget.RemoteViews"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetCustomHeadsUpContentView(Android.Widget.RemoteViews arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setCustomHeadsUpContentView", "(Landroid/widget/RemoteViews;)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            [global::System.Obsolete()]
            public Android.App.Notification.Builder SetDefaults(int arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setDefaults", "(I)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setDeleteIntent(android.app.PendingIntent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.App.PendingIntent"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetDeleteIntent(Android.App.PendingIntent arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setDeleteIntent", "(Landroid/app/PendingIntent;)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setExtras(android.os.Bundle)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Bundle"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetExtras(Android.Os.Bundle arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setExtras", "(Landroid/os/Bundle;)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setFlag(int,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="bool"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetFlag(int arg0, bool arg1)
            {
                return IExecute<Android.App.Notification.Builder>("setFlag", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setForegroundServiceBehavior(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetForegroundServiceBehavior(int arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setForegroundServiceBehavior", "(I)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setFullScreenIntent(android.app.PendingIntent,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.App.PendingIntent"/></param>
            /// <param name="arg1"><see cref="bool"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetFullScreenIntent(Android.App.PendingIntent arg0, bool arg1)
            {
                return IExecute<Android.App.Notification.Builder>("setFullScreenIntent", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setGroup(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetGroup(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setGroup", "(Ljava/lang/String;)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setGroupAlertBehavior(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetGroupAlertBehavior(int arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setGroupAlertBehavior", "(I)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setGroupSummary(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetGroupSummary(bool arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setGroupSummary", "(Z)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setLargeIcon(android.graphics.Bitmap)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.Bitmap"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetLargeIcon(Android.Graphics.Bitmap arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setLargeIcon", "(Landroid/graphics/Bitmap;)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setLargeIcon(android.graphics.drawable.Icon)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.Drawable.Icon"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetLargeIcon(Android.Graphics.Drawable.Icon arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setLargeIcon", "(Landroid/graphics/drawable/Icon;)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setLights(int,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            [global::System.Obsolete()]
            public Android.App.Notification.Builder SetLights(int arg0, int arg1, int arg2)
            {
                return IExecute<Android.App.Notification.Builder>("setLights", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setLocalOnly(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetLocalOnly(bool arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setLocalOnly", "(Z)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setLocusId(android.content.LocusId)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.LocusId"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetLocusId(Android.Content.LocusId arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setLocusId", "(Landroid/content/LocusId;)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setNumber(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetNumber(int arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setNumber", "(I)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setOngoing(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetOngoing(bool arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setOngoing", "(Z)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setOnlyAlertOnce(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetOnlyAlertOnce(bool arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setOnlyAlertOnce", "(Z)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setPriority(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            [global::System.Obsolete()]
            public Android.App.Notification.Builder SetPriority(int arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setPriority", "(I)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setProgress(int,int,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="bool"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetProgress(int arg0, int arg1, bool arg2)
            {
                return IExecute<Android.App.Notification.Builder>("setProgress", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setPublicVersion(android.app.Notification)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.App.Notification"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetPublicVersion(Android.App.Notification arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setPublicVersion", "(Landroid/app/Notification;)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setRemoteInputHistory(java.lang.CharSequence[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetRemoteInputHistory(Java.Lang.CharSequence[] arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setRemoteInputHistory", "([Ljava/lang/CharSequence;)Landroid/app/Notification$Builder;", new object[] { arg0 });
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setSettingsText(java.lang.CharSequence)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetSettingsText(Java.Lang.CharSequence arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setSettingsText", "(Ljava/lang/CharSequence;)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setShortcutId(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetShortcutId(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setShortcutId", "(Ljava/lang/String;)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setShowWhen(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetShowWhen(bool arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setShowWhen", "(Z)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setSmallIcon(android.graphics.drawable.Icon)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.Drawable.Icon"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetSmallIcon(Android.Graphics.Drawable.Icon arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setSmallIcon", "(Landroid/graphics/drawable/Icon;)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setSmallIcon(int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetSmallIcon(int arg0, int arg1)
            {
                return IExecute<Android.App.Notification.Builder>("setSmallIcon", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setSmallIcon(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetSmallIcon(int arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setSmallIcon", "(I)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setSortKey(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetSortKey(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setSortKey", "(Ljava/lang/String;)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setSound(android.net.Uri,android.media.AudioAttributes)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
            /// <param name="arg1"><see cref="Android.Media.AudioAttributes"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            [global::System.Obsolete()]
            public Android.App.Notification.Builder SetSound(Android.Net.Uri arg0, Android.Media.AudioAttributes arg1)
            {
                return IExecute<Android.App.Notification.Builder>("setSound", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setSound(android.net.Uri,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            [global::System.Obsolete()]
            public Android.App.Notification.Builder SetSound(Android.Net.Uri arg0, int arg1)
            {
                return IExecute<Android.App.Notification.Builder>("setSound", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setSound(android.net.Uri)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            [global::System.Obsolete()]
            public Android.App.Notification.Builder SetSound(Android.Net.Uri arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setSound", "(Landroid/net/Uri;)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setStyle(android.app.Notification.Style)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.App.Notification.Style"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetStyle(Android.App.Notification.Style arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setStyle", "(Landroid/app/Notification$Style;)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setSubText(java.lang.CharSequence)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetSubText(Java.Lang.CharSequence arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setSubText", "(Ljava/lang/CharSequence;)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setTicker(java.lang.CharSequence,android.widget.RemoteViews)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
            /// <param name="arg1"><see cref="Android.Widget.RemoteViews"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            [global::System.Obsolete()]
            public Android.App.Notification.Builder SetTicker(Java.Lang.CharSequence arg0, Android.Widget.RemoteViews arg1)
            {
                return IExecute<Android.App.Notification.Builder>("setTicker", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setTicker(java.lang.CharSequence)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetTicker(Java.Lang.CharSequence arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setTicker", "(Ljava/lang/CharSequence;)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setTimeoutAfter(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetTimeoutAfter(long arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setTimeoutAfter", "(J)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setUsesChronometer(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetUsesChronometer(bool arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setUsesChronometer", "(Z)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setVibrate(long[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            [global::System.Obsolete()]
            public Android.App.Notification.Builder SetVibrate(long[] arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setVibrate", "([J)Landroid/app/Notification$Builder;", new object[] { arg0 });
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setVisibility(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetVisibility(int arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setVisibility", "(I)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#setWhen(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder SetWhen(long arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("setWhen", "(J)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#getStyle()"/>
            /// </summary>
            /// <returns><see cref="Android.App.Notification.Style"/></returns>
            public Android.App.Notification.Style GetStyle()
            {
                return IExecuteWithSignature<Android.App.Notification.Style>("getStyle", "()Landroid/app/Notification$Style;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#getExtras()"/>
            /// </summary>
            /// <returns><see cref="Android.Os.Bundle"/></returns>
            public Android.Os.Bundle GetExtras()
            {
                return IExecuteWithSignature<Android.Os.Bundle>("getExtras", "()Landroid/os/Bundle;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#createBigContentView()"/>
            /// </summary>
            /// <returns><see cref="Android.Widget.RemoteViews"/></returns>
            [global::System.Obsolete()]
            public Android.Widget.RemoteViews CreateBigContentView()
            {
                return IExecuteWithSignature<Android.Widget.RemoteViews>("createBigContentView", "()Landroid/widget/RemoteViews;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#createContentView()"/>
            /// </summary>
            /// <returns><see cref="Android.Widget.RemoteViews"/></returns>
            [global::System.Obsolete()]
            public Android.Widget.RemoteViews CreateContentView()
            {
                return IExecuteWithSignature<Android.Widget.RemoteViews>("createContentView", "()Landroid/widget/RemoteViews;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Builder.html#createHeadsUpContentView()"/>
            /// </summary>
            /// <returns><see cref="Android.Widget.RemoteViews"/></returns>
            [global::System.Obsolete()]
            public Android.Widget.RemoteViews CreateHeadsUpContentView()
            {
                return IExecuteWithSignature<Android.Widget.RemoteViews>("createHeadsUpContentView", "()Landroid/widget/RemoteViews;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region CallStyle
        public partial class CallStyle
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.CallStyle.html#CALL_TYPE_INCOMING"/>
            /// </summary>
            public static int CALL_TYPE_INCOMING { get { if (!_CALL_TYPE_INCOMINGReady) { _CALL_TYPE_INCOMINGContent = SGetField<int>(LocalBridgeClazz, "CALL_TYPE_INCOMING"); _CALL_TYPE_INCOMINGReady = true; } return _CALL_TYPE_INCOMINGContent; } }
            private static int _CALL_TYPE_INCOMINGContent = default;
            private static bool _CALL_TYPE_INCOMINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.CallStyle.html#CALL_TYPE_ONGOING"/>
            /// </summary>
            public static int CALL_TYPE_ONGOING { get { if (!_CALL_TYPE_ONGOINGReady) { _CALL_TYPE_ONGOINGContent = SGetField<int>(LocalBridgeClazz, "CALL_TYPE_ONGOING"); _CALL_TYPE_ONGOINGReady = true; } return _CALL_TYPE_ONGOINGContent; } }
            private static int _CALL_TYPE_ONGOINGContent = default;
            private static bool _CALL_TYPE_ONGOINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.CallStyle.html#CALL_TYPE_SCREENING"/>
            /// </summary>
            public static int CALL_TYPE_SCREENING { get { if (!_CALL_TYPE_SCREENINGReady) { _CALL_TYPE_SCREENINGContent = SGetField<int>(LocalBridgeClazz, "CALL_TYPE_SCREENING"); _CALL_TYPE_SCREENINGReady = true; } return _CALL_TYPE_SCREENINGContent; } }
            private static int _CALL_TYPE_SCREENINGContent = default;
            private static bool _CALL_TYPE_SCREENINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.CallStyle.html#CALL_TYPE_UNKNOWN"/>
            /// </summary>
            public static int CALL_TYPE_UNKNOWN { get { if (!_CALL_TYPE_UNKNOWNReady) { _CALL_TYPE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "CALL_TYPE_UNKNOWN"); _CALL_TYPE_UNKNOWNReady = true; } return _CALL_TYPE_UNKNOWNContent; } }
            private static int _CALL_TYPE_UNKNOWNContent = default;
            private static bool _CALL_TYPE_UNKNOWNReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.CallStyle.html#forIncomingCall(android.app.Person,android.app.PendingIntent,android.app.PendingIntent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.App.Person"/></param>
            /// <param name="arg1"><see cref="Android.App.PendingIntent"/></param>
            /// <param name="arg2"><see cref="Android.App.PendingIntent"/></param>
            /// <returns><see cref="Android.App.Notification.CallStyle"/></returns>
            public static Android.App.Notification.CallStyle ForIncomingCall(Android.App.Person arg0, Android.App.PendingIntent arg1, Android.App.PendingIntent arg2)
            {
                return SExecute<Android.App.Notification.CallStyle>(LocalBridgeClazz, "forIncomingCall", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.CallStyle.html#forOngoingCall(android.app.Person,android.app.PendingIntent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.App.Person"/></param>
            /// <param name="arg1"><see cref="Android.App.PendingIntent"/></param>
            /// <returns><see cref="Android.App.Notification.CallStyle"/></returns>
            public static Android.App.Notification.CallStyle ForOngoingCall(Android.App.Person arg0, Android.App.PendingIntent arg1)
            {
                return SExecute<Android.App.Notification.CallStyle>(LocalBridgeClazz, "forOngoingCall", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.CallStyle.html#forScreeningCall(android.app.Person,android.app.PendingIntent,android.app.PendingIntent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.App.Person"/></param>
            /// <param name="arg1"><see cref="Android.App.PendingIntent"/></param>
            /// <param name="arg2"><see cref="Android.App.PendingIntent"/></param>
            /// <returns><see cref="Android.App.Notification.CallStyle"/></returns>
            public static Android.App.Notification.CallStyle ForScreeningCall(Android.App.Person arg0, Android.App.PendingIntent arg1, Android.App.PendingIntent arg2)
            {
                return SExecute<Android.App.Notification.CallStyle>(LocalBridgeClazz, "forScreeningCall", arg0, arg1, arg2);
            }

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.CallStyle.html#setAnswerButtonColorHint(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.App.Notification.CallStyle"/></returns>
            public Android.App.Notification.CallStyle SetAnswerButtonColorHint(int arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.CallStyle>("setAnswerButtonColorHint", "(I)Landroid/app/Notification$CallStyle;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.CallStyle.html#setDeclineButtonColorHint(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.App.Notification.CallStyle"/></returns>
            public Android.App.Notification.CallStyle SetDeclineButtonColorHint(int arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.CallStyle>("setDeclineButtonColorHint", "(I)Landroid/app/Notification$CallStyle;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.CallStyle.html#setIsVideo(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.App.Notification.CallStyle"/></returns>
            public Android.App.Notification.CallStyle SetIsVideo(bool arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.CallStyle>("setIsVideo", "(Z)Landroid/app/Notification$CallStyle;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.CallStyle.html#setVerificationIcon(android.graphics.drawable.Icon)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.Drawable.Icon"/></param>
            /// <returns><see cref="Android.App.Notification.CallStyle"/></returns>
            public Android.App.Notification.CallStyle SetVerificationIcon(Android.Graphics.Drawable.Icon arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.CallStyle>("setVerificationIcon", "(Landroid/graphics/drawable/Icon;)Landroid/app/Notification$CallStyle;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.CallStyle.html#setVerificationText(java.lang.CharSequence)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
            /// <returns><see cref="Android.App.Notification.CallStyle"/></returns>
            public Android.App.Notification.CallStyle SetVerificationText(Java.Lang.CharSequence arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.CallStyle>("setVerificationText", "(Ljava/lang/CharSequence;)Landroid/app/Notification$CallStyle;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region CarExtender
        public partial class CarExtender
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.CarExtender.html#%3Cinit%3E(android.app.Notification)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.App.Notification"/></param>
            public CarExtender(Android.App.Notification arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.CarExtender.html#extend(android.app.Notification.Builder)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.App.Notification.Builder"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder Extend(Android.App.Notification.Builder arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("extend", "(Landroid/app/Notification$Builder;)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.CarExtender.html#setColor(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.App.Notification.CarExtender"/></returns>
            public Android.App.Notification.CarExtender SetColor(int arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.CarExtender>("setColor", "(I)Landroid/app/Notification$CarExtender;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.CarExtender.html#setLargeIcon(android.graphics.Bitmap)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.Bitmap"/></param>
            /// <returns><see cref="Android.App.Notification.CarExtender"/></returns>
            public Android.App.Notification.CarExtender SetLargeIcon(Android.Graphics.Bitmap arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.CarExtender>("setLargeIcon", "(Landroid/graphics/Bitmap;)Landroid/app/Notification$CarExtender;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.CarExtender.html#setUnreadConversation(android.app.Notification.CarExtender.UnreadConversation)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.App.Notification.CarExtender.UnreadConversation"/></param>
            /// <returns><see cref="Android.App.Notification.CarExtender"/></returns>
            public Android.App.Notification.CarExtender SetUnreadConversation(Android.App.Notification.CarExtender.UnreadConversation arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.CarExtender>("setUnreadConversation", "(Landroid/app/Notification$CarExtender$UnreadConversation;)Landroid/app/Notification$CarExtender;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.CarExtender.html#getUnreadConversation()"/>
            /// </summary>
            /// <returns><see cref="Android.App.Notification.CarExtender.UnreadConversation"/></returns>
            public Android.App.Notification.CarExtender.UnreadConversation GetUnreadConversation()
            {
                return IExecuteWithSignature<Android.App.Notification.CarExtender.UnreadConversation>("getUnreadConversation", "()Landroid/app/Notification$CarExtender$UnreadConversation;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.CarExtender.html#getLargeIcon()"/>
            /// </summary>
            /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
            public Android.Graphics.Bitmap GetLargeIcon()
            {
                return IExecuteWithSignature<Android.Graphics.Bitmap>("getLargeIcon", "()Landroid/graphics/Bitmap;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.CarExtender.html#getColor()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetColor()
            {
                return IExecuteWithSignature<int>("getColor", "()I");
            }

            #endregion

            #region Nested classes
            #region UnreadConversation
            public partial class UnreadConversation
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields

                #endregion

                #region Static methods

                #endregion

                #region Instance methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.CarExtender.UnreadConversation.html#getReadPendingIntent()"/>
                /// </summary>
                /// <returns><see cref="Android.App.PendingIntent"/></returns>
                public Android.App.PendingIntent GetReadPendingIntent()
                {
                    return IExecuteWithSignature<Android.App.PendingIntent>("getReadPendingIntent", "()Landroid/app/PendingIntent;");
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.CarExtender.UnreadConversation.html#getReplyPendingIntent()"/>
                /// </summary>
                /// <returns><see cref="Android.App.PendingIntent"/></returns>
                public Android.App.PendingIntent GetReplyPendingIntent()
                {
                    return IExecuteWithSignature<Android.App.PendingIntent>("getReplyPendingIntent", "()Landroid/app/PendingIntent;");
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.CarExtender.UnreadConversation.html#getRemoteInput()"/>
                /// </summary>
                /// <returns><see cref="Android.App.RemoteInput"/></returns>
                public Android.App.RemoteInput GetRemoteInput()
                {
                    return IExecuteWithSignature<Android.App.RemoteInput>("getRemoteInput", "()Landroid/app/RemoteInput;");
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.CarExtender.UnreadConversation.html#getParticipant()"/>
                /// </summary>
                /// <returns><see cref="Java.Lang.String"/></returns>
                public Java.Lang.String GetParticipant()
                {
                    return IExecuteWithSignature<Java.Lang.String>("getParticipant", "()Ljava/lang/String;");
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.CarExtender.UnreadConversation.html#getMessages()"/>
                /// </summary>
                /// <returns><see cref="Java.Lang.String"/></returns>
                public Java.Lang.String[] GetMessages()
                {
                    return IExecuteWithSignatureArray<Java.Lang.String>("getMessages", "()[Ljava/lang/String;");
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.CarExtender.UnreadConversation.html#getParticipants()"/>
                /// </summary>
                /// <returns><see cref="Java.Lang.String"/></returns>
                public Java.Lang.String[] GetParticipants()
                {
                    return IExecuteWithSignatureArray<Java.Lang.String>("getParticipants", "()[Ljava/lang/String;");
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.CarExtender.UnreadConversation.html#getLatestTimestamp()"/>
                /// </summary>
                /// <returns><see cref="long"/></returns>
                public long GetLatestTimestamp()
                {
                    return IExecuteWithSignature<long>("getLatestTimestamp", "()J");
                }

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

            #region Builder
            public partial class Builder
            {
                #region Constructors
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.CarExtender.Builder.html#%3Cinit%3E(java.lang.String)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Java.Lang.String"/></param>
                public Builder(Java.Lang.String arg0)
                    : base(arg0)
                {
                }

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields

                #endregion

                #region Static methods

                #endregion

                #region Instance methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.CarExtender.Builder.html#addMessage(java.lang.String)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Java.Lang.String"/></param>
                /// <returns><see cref="Android.App.Notification.CarExtender.Builder"/></returns>
                public Android.App.Notification.CarExtender.Builder AddMessage(Java.Lang.String arg0)
                {
                    return IExecuteWithSignature<Android.App.Notification.CarExtender.Builder>("addMessage", "(Ljava/lang/String;)Landroid/app/Notification$CarExtender$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.CarExtender.Builder.html#setLatestTimestamp(long)"/>
                /// </summary>
                /// <param name="arg0"><see cref="long"/></param>
                /// <returns><see cref="Android.App.Notification.CarExtender.Builder"/></returns>
                public Android.App.Notification.CarExtender.Builder SetLatestTimestamp(long arg0)
                {
                    return IExecuteWithSignature<Android.App.Notification.CarExtender.Builder>("setLatestTimestamp", "(J)Landroid/app/Notification$CarExtender$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.CarExtender.Builder.html#setReadPendingIntent(android.app.PendingIntent)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.App.PendingIntent"/></param>
                /// <returns><see cref="Android.App.Notification.CarExtender.Builder"/></returns>
                public Android.App.Notification.CarExtender.Builder SetReadPendingIntent(Android.App.PendingIntent arg0)
                {
                    return IExecuteWithSignature<Android.App.Notification.CarExtender.Builder>("setReadPendingIntent", "(Landroid/app/PendingIntent;)Landroid/app/Notification$CarExtender$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.CarExtender.Builder.html#setReplyAction(android.app.PendingIntent,android.app.RemoteInput)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.App.PendingIntent"/></param>
                /// <param name="arg1"><see cref="Android.App.RemoteInput"/></param>
                /// <returns><see cref="Android.App.Notification.CarExtender.Builder"/></returns>
                public Android.App.Notification.CarExtender.Builder SetReplyAction(Android.App.PendingIntent arg0, Android.App.RemoteInput arg1)
                {
                    return IExecute<Android.App.Notification.CarExtender.Builder>("setReplyAction", arg0, arg1);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.CarExtender.Builder.html#build()"/>
                /// </summary>
                /// <returns><see cref="Android.App.Notification.CarExtender.UnreadConversation"/></returns>
                public Android.App.Notification.CarExtender.UnreadConversation Build()
                {
                    return IExecuteWithSignature<Android.App.Notification.CarExtender.UnreadConversation>("build", "()Landroid/app/Notification$CarExtender$UnreadConversation;");
                }

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

        
            #endregion

            // TODO: complete the class
        }
        #endregion

        #region DecoratedCustomViewStyle
        public partial class DecoratedCustomViewStyle
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region DecoratedMediaCustomViewStyle
        public partial class DecoratedMediaCustomViewStyle
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Extender
        public partial class Extender
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Extender.html#extend(android.app.Notification.Builder)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.App.Notification.Builder"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder Extend(Android.App.Notification.Builder arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("extend", "(Landroid/app/Notification$Builder;)Landroid/app/Notification$Builder;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region InboxStyle
        public partial class InboxStyle
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.InboxStyle.html#%3Cinit%3E(android.app.Notification.Builder)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.App.Notification.Builder"/></param>
            [global::System.Obsolete()]
            public InboxStyle(Android.App.Notification.Builder arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.InboxStyle.html#addLine(java.lang.CharSequence)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
            /// <returns><see cref="Android.App.Notification.InboxStyle"/></returns>
            public Android.App.Notification.InboxStyle AddLine(Java.Lang.CharSequence arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.InboxStyle>("addLine", "(Ljava/lang/CharSequence;)Landroid/app/Notification$InboxStyle;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.InboxStyle.html#setBigContentTitle(java.lang.CharSequence)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
            /// <returns><see cref="Android.App.Notification.InboxStyle"/></returns>
            public Android.App.Notification.InboxStyle SetBigContentTitle(Java.Lang.CharSequence arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.InboxStyle>("setBigContentTitle", "(Ljava/lang/CharSequence;)Landroid/app/Notification$InboxStyle;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.InboxStyle.html#setSummaryText(java.lang.CharSequence)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
            /// <returns><see cref="Android.App.Notification.InboxStyle"/></returns>
            public Android.App.Notification.InboxStyle SetSummaryText(Java.Lang.CharSequence arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.InboxStyle>("setSummaryText", "(Ljava/lang/CharSequence;)Landroid/app/Notification$InboxStyle;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region MediaStyle
        public partial class MediaStyle
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.MediaStyle.html#%3Cinit%3E(android.app.Notification.Builder)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.App.Notification.Builder"/></param>
            [global::System.Obsolete()]
            public MediaStyle(Android.App.Notification.Builder arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.MediaStyle.html#setMediaSession(android.media.session.MediaSession.Token)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.Session.MediaSession.Token"/></param>
            /// <returns><see cref="Android.App.Notification.MediaStyle"/></returns>
            public Android.App.Notification.MediaStyle SetMediaSession(Android.Media.Session.MediaSession.Token arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.MediaStyle>("setMediaSession", "(Landroid/media/session/MediaSession$Token;)Landroid/app/Notification$MediaStyle;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.MediaStyle.html#setRemotePlaybackInfo(java.lang.CharSequence,int,android.app.PendingIntent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="Android.App.PendingIntent"/></param>
            /// <returns><see cref="Android.App.Notification.MediaStyle"/></returns>
            public Android.App.Notification.MediaStyle SetRemotePlaybackInfo(Java.Lang.CharSequence arg0, int arg1, Android.App.PendingIntent arg2)
            {
                return IExecute<Android.App.Notification.MediaStyle>("setRemotePlaybackInfo", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.MediaStyle.html#setShowActionsInCompactView(int[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.App.Notification.MediaStyle"/></returns>
            public Android.App.Notification.MediaStyle SetShowActionsInCompactView(params int[] arg0)
            {
                if (arg0.Length == 0) return IExecuteWithSignature<Android.App.Notification.MediaStyle>("setShowActionsInCompactView", "([I)Landroid/app/Notification$MediaStyle;"); else return IExecuteWithSignature<Android.App.Notification.MediaStyle>("setShowActionsInCompactView", "([I)Landroid/app/Notification$MediaStyle;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region MessagingStyle
        public partial class MessagingStyle
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.MessagingStyle.html#%3Cinit%3E(android.app.Person)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.App.Person"/></param>
            public MessagingStyle(Android.App.Person arg0)
                : base(arg0)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.MessagingStyle.html#%3Cinit%3E(java.lang.CharSequence)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
            [global::System.Obsolete()]
            public MessagingStyle(Java.Lang.CharSequence arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.MessagingStyle.html#MAXIMUM_RETAINED_MESSAGES"/>
            /// </summary>
            public static int MAXIMUM_RETAINED_MESSAGES { get { if (!_MAXIMUM_RETAINED_MESSAGESReady) { _MAXIMUM_RETAINED_MESSAGESContent = SGetField<int>(LocalBridgeClazz, "MAXIMUM_RETAINED_MESSAGES"); _MAXIMUM_RETAINED_MESSAGESReady = true; } return _MAXIMUM_RETAINED_MESSAGESContent; } }
            private static int _MAXIMUM_RETAINED_MESSAGESContent = default;
            private static bool _MAXIMUM_RETAINED_MESSAGESReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.MessagingStyle.html#addHistoricMessage(android.app.Notification.MessagingStyle.Message)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.App.Notification.MessagingStyle.Message"/></param>
            /// <returns><see cref="Android.App.Notification.MessagingStyle"/></returns>
            public Android.App.Notification.MessagingStyle AddHistoricMessage(Android.App.Notification.MessagingStyle.Message arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.MessagingStyle>("addHistoricMessage", "(Landroid/app/Notification$MessagingStyle$Message;)Landroid/app/Notification$MessagingStyle;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.MessagingStyle.html#addMessage(android.app.Notification.MessagingStyle.Message)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.App.Notification.MessagingStyle.Message"/></param>
            /// <returns><see cref="Android.App.Notification.MessagingStyle"/></returns>
            public Android.App.Notification.MessagingStyle AddMessage(Android.App.Notification.MessagingStyle.Message arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.MessagingStyle>("addMessage", "(Landroid/app/Notification$MessagingStyle$Message;)Landroid/app/Notification$MessagingStyle;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.MessagingStyle.html#addMessage(java.lang.CharSequence,long,android.app.Person)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <param name="arg2"><see cref="Android.App.Person"/></param>
            /// <returns><see cref="Android.App.Notification.MessagingStyle"/></returns>
            public Android.App.Notification.MessagingStyle AddMessage(Java.Lang.CharSequence arg0, long arg1, Android.App.Person arg2)
            {
                return IExecute<Android.App.Notification.MessagingStyle>("addMessage", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.MessagingStyle.html#addMessage(java.lang.CharSequence,long,java.lang.CharSequence)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <param name="arg2"><see cref="Java.Lang.CharSequence"/></param>
            /// <returns><see cref="Android.App.Notification.MessagingStyle"/></returns>
            [global::System.Obsolete()]
            public Android.App.Notification.MessagingStyle AddMessage(Java.Lang.CharSequence arg0, long arg1, Java.Lang.CharSequence arg2)
            {
                return IExecute<Android.App.Notification.MessagingStyle>("addMessage", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.MessagingStyle.html#setConversationTitle(java.lang.CharSequence)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
            /// <returns><see cref="Android.App.Notification.MessagingStyle"/></returns>
            public Android.App.Notification.MessagingStyle SetConversationTitle(Java.Lang.CharSequence arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.MessagingStyle>("setConversationTitle", "(Ljava/lang/CharSequence;)Landroid/app/Notification$MessagingStyle;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.MessagingStyle.html#setGroupConversation(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.App.Notification.MessagingStyle"/></returns>
            public Android.App.Notification.MessagingStyle SetGroupConversation(bool arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.MessagingStyle>("setGroupConversation", "(Z)Landroid/app/Notification$MessagingStyle;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.MessagingStyle.html#getUser()"/>
            /// </summary>
            /// <returns><see cref="Android.App.Person"/></returns>
            public Android.App.Person GetUser()
            {
                return IExecuteWithSignature<Android.App.Person>("getUser", "()Landroid/app/Person;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.MessagingStyle.html#isGroupConversation()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsGroupConversation()
            {
                return IExecuteWithSignature<bool>("isGroupConversation", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.MessagingStyle.html#getConversationTitle()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.CharSequence"/></returns>
            public Java.Lang.CharSequence GetConversationTitle()
            {
                return IExecuteWithSignature<Java.Lang.CharSequence>("getConversationTitle", "()Ljava/lang/CharSequence;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.MessagingStyle.html#getUserDisplayName()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.CharSequence"/></returns>
            [global::System.Obsolete()]
            public Java.Lang.CharSequence GetUserDisplayName()
            {
                return IExecuteWithSignature<Java.Lang.CharSequence>("getUserDisplayName", "()Ljava/lang/CharSequence;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.MessagingStyle.html#getHistoricMessages()"/>
            /// </summary>
            /// <returns><see cref="Java.Util.List"/></returns>
            public Java.Util.List<Android.App.Notification.MessagingStyle.Message> GetHistoricMessages()
            {
                return IExecuteWithSignature<Java.Util.List<Android.App.Notification.MessagingStyle.Message>>("getHistoricMessages", "()Ljava/util/List;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.MessagingStyle.html#getMessages()"/>
            /// </summary>
            /// <returns><see cref="Java.Util.List"/></returns>
            public Java.Util.List<Android.App.Notification.MessagingStyle.Message> GetMessages()
            {
                return IExecuteWithSignature<Java.Util.List<Android.App.Notification.MessagingStyle.Message>>("getMessages", "()Ljava/util/List;");
            }

            #endregion

            #region Nested classes
            #region Message
            public partial class Message
            {
                #region Constructors
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.MessagingStyle.Message.html#%3Cinit%3E(java.lang.CharSequence,long,android.app.Person)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
                /// <param name="arg1"><see cref="long"/></param>
                /// <param name="arg2"><see cref="Android.App.Person"/></param>
                public Message(Java.Lang.CharSequence arg0, long arg1, Android.App.Person arg2)
                    : base(arg0, arg1, arg2)
                {
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.MessagingStyle.Message.html#%3Cinit%3E(java.lang.CharSequence,long,java.lang.CharSequence)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
                /// <param name="arg1"><see cref="long"/></param>
                /// <param name="arg2"><see cref="Java.Lang.CharSequence"/></param>
                [global::System.Obsolete()]
                public Message(Java.Lang.CharSequence arg0, long arg1, Java.Lang.CharSequence arg2)
                    : base(arg0, arg1, arg2)
                {
                }

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields

                #endregion

                #region Static methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.MessagingStyle.Message.html#getMessagesFromBundleArray(android.os.Parcelable[])"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Os.Parcelable"/></param>
                /// <returns><see cref="Java.Util.List"/></returns>
                public static Java.Util.List<Android.App.Notification.MessagingStyle.Message> GetMessagesFromBundleArray(Android.Os.Parcelable[] arg0)
                {
                    return SExecuteWithSignature<Java.Util.List<Android.App.Notification.MessagingStyle.Message>>(LocalBridgeClazz, "getMessagesFromBundleArray", "([Landroid/os/Parcelable;)Ljava/util/List;", new object[] { arg0 });
                }

                #endregion

                #region Instance methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.MessagingStyle.Message.html#setData(java.lang.String,android.net.Uri)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Java.Lang.String"/></param>
                /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
                /// <returns><see cref="Android.App.Notification.MessagingStyle.Message"/></returns>
                public Android.App.Notification.MessagingStyle.Message SetData(Java.Lang.String arg0, Android.Net.Uri arg1)
                {
                    return IExecute<Android.App.Notification.MessagingStyle.Message>("setData", arg0, arg1);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.MessagingStyle.Message.html#getSenderPerson()"/>
                /// </summary>
                /// <returns><see cref="Android.App.Person"/></returns>
                public Android.App.Person GetSenderPerson()
                {
                    return IExecuteWithSignature<Android.App.Person>("getSenderPerson", "()Landroid/app/Person;");
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.MessagingStyle.Message.html#getDataUri()"/>
                /// </summary>
                /// <returns><see cref="Android.Net.Uri"/></returns>
                public Android.Net.Uri GetDataUri()
                {
                    return IExecuteWithSignature<Android.Net.Uri>("getDataUri", "()Landroid/net/Uri;");
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.MessagingStyle.Message.html#getExtras()"/>
                /// </summary>
                /// <returns><see cref="Android.Os.Bundle"/></returns>
                public Android.Os.Bundle GetExtras()
                {
                    return IExecuteWithSignature<Android.Os.Bundle>("getExtras", "()Landroid/os/Bundle;");
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.MessagingStyle.Message.html#getSender()"/>
                /// </summary>
                /// <returns><see cref="Java.Lang.CharSequence"/></returns>
                [global::System.Obsolete()]
                public Java.Lang.CharSequence GetSender()
                {
                    return IExecuteWithSignature<Java.Lang.CharSequence>("getSender", "()Ljava/lang/CharSequence;");
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.MessagingStyle.Message.html#getText()"/>
                /// </summary>
                /// <returns><see cref="Java.Lang.CharSequence"/></returns>
                public Java.Lang.CharSequence GetText()
                {
                    return IExecuteWithSignature<Java.Lang.CharSequence>("getText", "()Ljava/lang/CharSequence;");
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.MessagingStyle.Message.html#getDataMimeType()"/>
                /// </summary>
                /// <returns><see cref="Java.Lang.String"/></returns>
                public Java.Lang.String GetDataMimeType()
                {
                    return IExecuteWithSignature<Java.Lang.String>("getDataMimeType", "()Ljava/lang/String;");
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/Notification.MessagingStyle.Message.html#getTimestamp()"/>
                /// </summary>
                /// <returns><see cref="long"/></returns>
                public long GetTimestamp()
                {
                    return IExecuteWithSignature<long>("getTimestamp", "()J");
                }

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

        
            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Style
        public partial class Style
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Style.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.App.Notification"/></returns>
            public Android.App.Notification Build()
            {
                return IExecuteWithSignature<Android.App.Notification>("build", "()Landroid/app/Notification;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.Style.html#setBuilder(android.app.Notification.Builder)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.App.Notification.Builder"/></param>
            public void SetBuilder(Android.App.Notification.Builder arg0)
            {
                IExecuteWithSignature("setBuilder", "(Landroid/app/Notification$Builder;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region TvExtender
        public partial class TvExtender
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.TvExtender.html#%3Cinit%3E(android.app.Notification)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.App.Notification"/></param>
            public TvExtender(Android.App.Notification arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.TvExtender.html#extend(android.app.Notification.Builder)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.App.Notification.Builder"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder Extend(Android.App.Notification.Builder arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("extend", "(Landroid/app/Notification$Builder;)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.TvExtender.html#setChannelId(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.App.Notification.TvExtender"/></returns>
            public Android.App.Notification.TvExtender SetChannelId(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.TvExtender>("setChannelId", "(Ljava/lang/String;)Landroid/app/Notification$TvExtender;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.TvExtender.html#setContentIntent(android.app.PendingIntent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.App.PendingIntent"/></param>
            /// <returns><see cref="Android.App.Notification.TvExtender"/></returns>
            public Android.App.Notification.TvExtender SetContentIntent(Android.App.PendingIntent arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.TvExtender>("setContentIntent", "(Landroid/app/PendingIntent;)Landroid/app/Notification$TvExtender;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.TvExtender.html#setDeleteIntent(android.app.PendingIntent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.App.PendingIntent"/></param>
            /// <returns><see cref="Android.App.Notification.TvExtender"/></returns>
            public Android.App.Notification.TvExtender SetDeleteIntent(Android.App.PendingIntent arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.TvExtender>("setDeleteIntent", "(Landroid/app/PendingIntent;)Landroid/app/Notification$TvExtender;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.TvExtender.html#setSuppressShowOverApps(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.App.Notification.TvExtender"/></returns>
            public Android.App.Notification.TvExtender SetSuppressShowOverApps(bool arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.TvExtender>("setSuppressShowOverApps", "(Z)Landroid/app/Notification$TvExtender;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.TvExtender.html#getContentIntent()"/>
            /// </summary>
            /// <returns><see cref="Android.App.PendingIntent"/></returns>
            public Android.App.PendingIntent GetContentIntent()
            {
                return IExecuteWithSignature<Android.App.PendingIntent>("getContentIntent", "()Landroid/app/PendingIntent;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.TvExtender.html#getDeleteIntent()"/>
            /// </summary>
            /// <returns><see cref="Android.App.PendingIntent"/></returns>
            public Android.App.PendingIntent GetDeleteIntent()
            {
                return IExecuteWithSignature<Android.App.PendingIntent>("getDeleteIntent", "()Landroid/app/PendingIntent;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.TvExtender.html#isAvailableOnTv()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsAvailableOnTv()
            {
                return IExecuteWithSignature<bool>("isAvailableOnTv", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.TvExtender.html#isSuppressShowOverApps()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsSuppressShowOverApps()
            {
                return IExecuteWithSignature<bool>("isSuppressShowOverApps", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.TvExtender.html#getChannelId()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetChannelId()
            {
                return IExecuteWithSignature<Java.Lang.String>("getChannelId", "()Ljava/lang/String;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region WearableExtender
        public partial class WearableExtender
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#%3Cinit%3E(android.app.Notification)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.App.Notification"/></param>
            public WearableExtender(Android.App.Notification arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#SCREEN_TIMEOUT_LONG"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int SCREEN_TIMEOUT_LONG { get { if (!_SCREEN_TIMEOUT_LONGReady) { _SCREEN_TIMEOUT_LONGContent = SGetField<int>(LocalBridgeClazz, "SCREEN_TIMEOUT_LONG"); _SCREEN_TIMEOUT_LONGReady = true; } return _SCREEN_TIMEOUT_LONGContent; } }
            private static int _SCREEN_TIMEOUT_LONGContent = default;
            private static bool _SCREEN_TIMEOUT_LONGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#SCREEN_TIMEOUT_SHORT"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int SCREEN_TIMEOUT_SHORT { get { if (!_SCREEN_TIMEOUT_SHORTReady) { _SCREEN_TIMEOUT_SHORTContent = SGetField<int>(LocalBridgeClazz, "SCREEN_TIMEOUT_SHORT"); _SCREEN_TIMEOUT_SHORTReady = true; } return _SCREEN_TIMEOUT_SHORTContent; } }
            private static int _SCREEN_TIMEOUT_SHORTContent = default;
            private static bool _SCREEN_TIMEOUT_SHORTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#SIZE_DEFAULT"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int SIZE_DEFAULT { get { if (!_SIZE_DEFAULTReady) { _SIZE_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "SIZE_DEFAULT"); _SIZE_DEFAULTReady = true; } return _SIZE_DEFAULTContent; } }
            private static int _SIZE_DEFAULTContent = default;
            private static bool _SIZE_DEFAULTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#SIZE_FULL_SCREEN"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int SIZE_FULL_SCREEN { get { if (!_SIZE_FULL_SCREENReady) { _SIZE_FULL_SCREENContent = SGetField<int>(LocalBridgeClazz, "SIZE_FULL_SCREEN"); _SIZE_FULL_SCREENReady = true; } return _SIZE_FULL_SCREENContent; } }
            private static int _SIZE_FULL_SCREENContent = default;
            private static bool _SIZE_FULL_SCREENReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#SIZE_LARGE"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int SIZE_LARGE { get { if (!_SIZE_LARGEReady) { _SIZE_LARGEContent = SGetField<int>(LocalBridgeClazz, "SIZE_LARGE"); _SIZE_LARGEReady = true; } return _SIZE_LARGEContent; } }
            private static int _SIZE_LARGEContent = default;
            private static bool _SIZE_LARGEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#SIZE_MEDIUM"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int SIZE_MEDIUM { get { if (!_SIZE_MEDIUMReady) { _SIZE_MEDIUMContent = SGetField<int>(LocalBridgeClazz, "SIZE_MEDIUM"); _SIZE_MEDIUMReady = true; } return _SIZE_MEDIUMContent; } }
            private static int _SIZE_MEDIUMContent = default;
            private static bool _SIZE_MEDIUMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#SIZE_SMALL"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int SIZE_SMALL { get { if (!_SIZE_SMALLReady) { _SIZE_SMALLContent = SGetField<int>(LocalBridgeClazz, "SIZE_SMALL"); _SIZE_SMALLReady = true; } return _SIZE_SMALLContent; } }
            private static int _SIZE_SMALLContent = default;
            private static bool _SIZE_SMALLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#SIZE_XSMALL"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int SIZE_XSMALL { get { if (!_SIZE_XSMALLReady) { _SIZE_XSMALLContent = SGetField<int>(LocalBridgeClazz, "SIZE_XSMALL"); _SIZE_XSMALLReady = true; } return _SIZE_XSMALLContent; } }
            private static int _SIZE_XSMALLContent = default;
            private static bool _SIZE_XSMALLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#UNSET_ACTION_INDEX"/>
            /// </summary>
            public static int UNSET_ACTION_INDEX { get { if (!_UNSET_ACTION_INDEXReady) { _UNSET_ACTION_INDEXContent = SGetField<int>(LocalBridgeClazz, "UNSET_ACTION_INDEX"); _UNSET_ACTION_INDEXReady = true; } return _UNSET_ACTION_INDEXContent; } }
            private static int _UNSET_ACTION_INDEXContent = default;
            private static bool _UNSET_ACTION_INDEXReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#extend(android.app.Notification.Builder)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.App.Notification.Builder"/></param>
            /// <returns><see cref="Android.App.Notification.Builder"/></returns>
            public Android.App.Notification.Builder Extend(Android.App.Notification.Builder arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.Builder>("extend", "(Landroid/app/Notification$Builder;)Landroid/app/Notification$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#addAction(android.app.Notification.Action)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.App.Notification.Action"/></param>
            /// <returns><see cref="Android.App.Notification.WearableExtender"/></returns>
            public Android.App.Notification.WearableExtender AddAction(Android.App.Notification.Action arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.WearableExtender>("addAction", "(Landroid/app/Notification$Action;)Landroid/app/Notification$WearableExtender;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#addActions(java.util.List)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.List"/></param>
            /// <returns><see cref="Android.App.Notification.WearableExtender"/></returns>
            public Android.App.Notification.WearableExtender AddActions(Java.Util.List<Android.App.Notification.Action> arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.WearableExtender>("addActions", "(Ljava/util/List;)Landroid/app/Notification$WearableExtender;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#addPage(android.app.Notification)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.App.Notification"/></param>
            /// <returns><see cref="Android.App.Notification.WearableExtender"/></returns>
            [global::System.Obsolete()]
            public Android.App.Notification.WearableExtender AddPage(Android.App.Notification arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.WearableExtender>("addPage", "(Landroid/app/Notification;)Landroid/app/Notification$WearableExtender;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#addPages(java.util.List)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.List"/></param>
            /// <returns><see cref="Android.App.Notification.WearableExtender"/></returns>
            [global::System.Obsolete()]
            public Android.App.Notification.WearableExtender AddPages(Java.Util.List<Android.App.Notification> arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.WearableExtender>("addPages", "(Ljava/util/List;)Landroid/app/Notification$WearableExtender;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#clearActions()"/>
            /// </summary>
            /// <returns><see cref="Android.App.Notification.WearableExtender"/></returns>
            public Android.App.Notification.WearableExtender ClearActions()
            {
                return IExecuteWithSignature<Android.App.Notification.WearableExtender>("clearActions", "()Landroid/app/Notification$WearableExtender;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#clearPages()"/>
            /// </summary>
            /// <returns><see cref="Android.App.Notification.WearableExtender"/></returns>
            [global::System.Obsolete()]
            public Android.App.Notification.WearableExtender ClearPages()
            {
                return IExecuteWithSignature<Android.App.Notification.WearableExtender>("clearPages", "()Landroid/app/Notification$WearableExtender;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#clone()"/>
            /// </summary>
            /// <returns><see cref="Android.App.Notification.WearableExtender"/></returns>
            public Android.App.Notification.WearableExtender Clone()
            {
                return IExecuteWithSignature<Android.App.Notification.WearableExtender>("clone", "()Landroid/app/Notification$WearableExtender;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#setBridgeTag(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.App.Notification.WearableExtender"/></returns>
            public Android.App.Notification.WearableExtender SetBridgeTag(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.WearableExtender>("setBridgeTag", "(Ljava/lang/String;)Landroid/app/Notification$WearableExtender;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#setContentAction(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.App.Notification.WearableExtender"/></returns>
            public Android.App.Notification.WearableExtender SetContentAction(int arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.WearableExtender>("setContentAction", "(I)Landroid/app/Notification$WearableExtender;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#setContentIcon(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.App.Notification.WearableExtender"/></returns>
            [global::System.Obsolete()]
            public Android.App.Notification.WearableExtender SetContentIcon(int arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.WearableExtender>("setContentIcon", "(I)Landroid/app/Notification$WearableExtender;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#setContentIconGravity(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.App.Notification.WearableExtender"/></returns>
            [global::System.Obsolete()]
            public Android.App.Notification.WearableExtender SetContentIconGravity(int arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.WearableExtender>("setContentIconGravity", "(I)Landroid/app/Notification$WearableExtender;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#setContentIntentAvailableOffline(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.App.Notification.WearableExtender"/></returns>
            public Android.App.Notification.WearableExtender SetContentIntentAvailableOffline(bool arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.WearableExtender>("setContentIntentAvailableOffline", "(Z)Landroid/app/Notification$WearableExtender;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#setCustomContentHeight(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.App.Notification.WearableExtender"/></returns>
            [global::System.Obsolete()]
            public Android.App.Notification.WearableExtender SetCustomContentHeight(int arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.WearableExtender>("setCustomContentHeight", "(I)Landroid/app/Notification$WearableExtender;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#setCustomSizePreset(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.App.Notification.WearableExtender"/></returns>
            [global::System.Obsolete()]
            public Android.App.Notification.WearableExtender SetCustomSizePreset(int arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.WearableExtender>("setCustomSizePreset", "(I)Landroid/app/Notification$WearableExtender;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#setDismissalId(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.App.Notification.WearableExtender"/></returns>
            public Android.App.Notification.WearableExtender SetDismissalId(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.WearableExtender>("setDismissalId", "(Ljava/lang/String;)Landroid/app/Notification$WearableExtender;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#setDisplayIntent(android.app.PendingIntent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.App.PendingIntent"/></param>
            /// <returns><see cref="Android.App.Notification.WearableExtender"/></returns>
            [global::System.Obsolete()]
            public Android.App.Notification.WearableExtender SetDisplayIntent(Android.App.PendingIntent arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.WearableExtender>("setDisplayIntent", "(Landroid/app/PendingIntent;)Landroid/app/Notification$WearableExtender;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#setGravity(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.App.Notification.WearableExtender"/></returns>
            [global::System.Obsolete()]
            public Android.App.Notification.WearableExtender SetGravity(int arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.WearableExtender>("setGravity", "(I)Landroid/app/Notification$WearableExtender;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#setHintAmbientBigPicture(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.App.Notification.WearableExtender"/></returns>
            [global::System.Obsolete()]
            public Android.App.Notification.WearableExtender SetHintAmbientBigPicture(bool arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.WearableExtender>("setHintAmbientBigPicture", "(Z)Landroid/app/Notification$WearableExtender;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#setHintAvoidBackgroundClipping(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.App.Notification.WearableExtender"/></returns>
            [global::System.Obsolete()]
            public Android.App.Notification.WearableExtender SetHintAvoidBackgroundClipping(bool arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.WearableExtender>("setHintAvoidBackgroundClipping", "(Z)Landroid/app/Notification$WearableExtender;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#setHintContentIntentLaunchesActivity(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.App.Notification.WearableExtender"/></returns>
            public Android.App.Notification.WearableExtender SetHintContentIntentLaunchesActivity(bool arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.WearableExtender>("setHintContentIntentLaunchesActivity", "(Z)Landroid/app/Notification$WearableExtender;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#setHintHideIcon(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.App.Notification.WearableExtender"/></returns>
            [global::System.Obsolete()]
            public Android.App.Notification.WearableExtender SetHintHideIcon(bool arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.WearableExtender>("setHintHideIcon", "(Z)Landroid/app/Notification$WearableExtender;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#setHintScreenTimeout(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.App.Notification.WearableExtender"/></returns>
            [global::System.Obsolete()]
            public Android.App.Notification.WearableExtender SetHintScreenTimeout(int arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.WearableExtender>("setHintScreenTimeout", "(I)Landroid/app/Notification$WearableExtender;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#setHintShowBackgroundOnly(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.App.Notification.WearableExtender"/></returns>
            [global::System.Obsolete()]
            public Android.App.Notification.WearableExtender SetHintShowBackgroundOnly(bool arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.WearableExtender>("setHintShowBackgroundOnly", "(Z)Landroid/app/Notification$WearableExtender;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#setStartScrollBottom(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.App.Notification.WearableExtender"/></returns>
            public Android.App.Notification.WearableExtender SetStartScrollBottom(bool arg0)
            {
                return IExecuteWithSignature<Android.App.Notification.WearableExtender>("setStartScrollBottom", "(Z)Landroid/app/Notification$WearableExtender;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#getDisplayIntent()"/>
            /// </summary>
            /// <returns><see cref="Android.App.PendingIntent"/></returns>
            [global::System.Obsolete()]
            public Android.App.PendingIntent GetDisplayIntent()
            {
                return IExecuteWithSignature<Android.App.PendingIntent>("getDisplayIntent", "()Landroid/app/PendingIntent;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#getContentIntentAvailableOffline()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool GetContentIntentAvailableOffline()
            {
                return IExecuteWithSignature<bool>("getContentIntentAvailableOffline", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#getHintAmbientBigPicture()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            [global::System.Obsolete()]
            public bool GetHintAmbientBigPicture()
            {
                return IExecuteWithSignature<bool>("getHintAmbientBigPicture", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#getHintAvoidBackgroundClipping()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            [global::System.Obsolete()]
            public bool GetHintAvoidBackgroundClipping()
            {
                return IExecuteWithSignature<bool>("getHintAvoidBackgroundClipping", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#getHintContentIntentLaunchesActivity()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool GetHintContentIntentLaunchesActivity()
            {
                return IExecuteWithSignature<bool>("getHintContentIntentLaunchesActivity", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#getHintHideIcon()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            [global::System.Obsolete()]
            public bool GetHintHideIcon()
            {
                return IExecuteWithSignature<bool>("getHintHideIcon", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#getHintShowBackgroundOnly()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            [global::System.Obsolete()]
            public bool GetHintShowBackgroundOnly()
            {
                return IExecuteWithSignature<bool>("getHintShowBackgroundOnly", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#getStartScrollBottom()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool GetStartScrollBottom()
            {
                return IExecuteWithSignature<bool>("getStartScrollBottom", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#getContentAction()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetContentAction()
            {
                return IExecuteWithSignature<int>("getContentAction", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#getContentIcon()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            [global::System.Obsolete()]
            public int GetContentIcon()
            {
                return IExecuteWithSignature<int>("getContentIcon", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#getContentIconGravity()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            [global::System.Obsolete()]
            public int GetContentIconGravity()
            {
                return IExecuteWithSignature<int>("getContentIconGravity", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#getCustomContentHeight()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            [global::System.Obsolete()]
            public int GetCustomContentHeight()
            {
                return IExecuteWithSignature<int>("getCustomContentHeight", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#getCustomSizePreset()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            [global::System.Obsolete()]
            public int GetCustomSizePreset()
            {
                return IExecuteWithSignature<int>("getCustomSizePreset", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#getGravity()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            [global::System.Obsolete()]
            public int GetGravity()
            {
                return IExecuteWithSignature<int>("getGravity", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#getHintScreenTimeout()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            [global::System.Obsolete()]
            public int GetHintScreenTimeout()
            {
                return IExecuteWithSignature<int>("getHintScreenTimeout", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#getBridgeTag()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetBridgeTag()
            {
                return IExecuteWithSignature<Java.Lang.String>("getBridgeTag", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#getDismissalId()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetDismissalId()
            {
                return IExecuteWithSignature<Java.Lang.String>("getDismissalId", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#getPages()"/>
            /// </summary>
            /// <returns><see cref="Java.Util.List"/></returns>
            [global::System.Obsolete()]
            public Java.Util.List<Android.App.Notification> GetPages()
            {
                return IExecuteWithSignature<Java.Util.List<Android.App.Notification>>("getPages", "()Ljava/util/List;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html#getActions()"/>
            /// </summary>
            /// <returns><see cref="Java.Util.List"/></returns>
            public Java.Util.List<Android.App.Notification.Action> GetActions()
            {
                return IExecuteWithSignature<Java.Util.List<Android.App.Notification.Action>>("getActions", "()Ljava/util/List;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
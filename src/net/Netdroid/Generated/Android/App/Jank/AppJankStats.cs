/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.App.Jank
{
    #region AppJankStats declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/app/jank/AppJankStats.html"/>
    /// </summary>
    public partial class AppJankStats : MASES.JCOBridge.C2JBridge.JVMBridgeBase<AppJankStats>
    {
        const string _bridgeClassName = "android.app.jank.AppJankStats";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public AppJankStats() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public AppJankStats(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public AppJankStats(params object[] args) : base(args) { }
    
        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region AppJankStats implementation
    public partial class AppJankStats
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/jank/AppJankStats.html#%3Cinit%3E(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,android.app.jank.RelativeFrameTimeHistogram)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <param name="arg4"><see cref="Java.Lang.String"/></param>
        /// <param name="arg5"><see cref="long"/></param>
        /// <param name="arg6"><see cref="long"/></param>
        /// <param name="arg7"><see cref="Android.App.Jank.RelativeFrameTimeHistogram"/></param>
        public AppJankStats(int arg0, Java.Lang.String arg1, Java.Lang.String arg2, Java.Lang.String arg3, Java.Lang.String arg4, long arg5, long arg6, Android.App.Jank.RelativeFrameTimeHistogram arg7)
            : base(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
        {
        }
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/jank/AppJankStats.html#WIDGET_CATEGORY_ANIMATION"/>
        /// </summary>
        public static Java.Lang.String WIDGET_CATEGORY_ANIMATION { get { if (!_WIDGET_CATEGORY_ANIMATIONReady) { _WIDGET_CATEGORY_ANIMATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIDGET_CATEGORY_ANIMATION"); _WIDGET_CATEGORY_ANIMATIONReady = true; } return _WIDGET_CATEGORY_ANIMATIONContent; } }
        private static Java.Lang.String _WIDGET_CATEGORY_ANIMATIONContent = default;
        private static bool _WIDGET_CATEGORY_ANIMATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/jank/AppJankStats.html#WIDGET_CATEGORY_KEYBOARD"/>
        /// </summary>
        public static Java.Lang.String WIDGET_CATEGORY_KEYBOARD { get { if (!_WIDGET_CATEGORY_KEYBOARDReady) { _WIDGET_CATEGORY_KEYBOARDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIDGET_CATEGORY_KEYBOARD"); _WIDGET_CATEGORY_KEYBOARDReady = true; } return _WIDGET_CATEGORY_KEYBOARDContent; } }
        private static Java.Lang.String _WIDGET_CATEGORY_KEYBOARDContent = default;
        private static bool _WIDGET_CATEGORY_KEYBOARDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/jank/AppJankStats.html#WIDGET_CATEGORY_MEDIA"/>
        /// </summary>
        public static Java.Lang.String WIDGET_CATEGORY_MEDIA { get { if (!_WIDGET_CATEGORY_MEDIAReady) { _WIDGET_CATEGORY_MEDIAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIDGET_CATEGORY_MEDIA"); _WIDGET_CATEGORY_MEDIAReady = true; } return _WIDGET_CATEGORY_MEDIAContent; } }
        private static Java.Lang.String _WIDGET_CATEGORY_MEDIAContent = default;
        private static bool _WIDGET_CATEGORY_MEDIAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/jank/AppJankStats.html#WIDGET_CATEGORY_NAVIGATION"/>
        /// </summary>
        public static Java.Lang.String WIDGET_CATEGORY_NAVIGATION { get { if (!_WIDGET_CATEGORY_NAVIGATIONReady) { _WIDGET_CATEGORY_NAVIGATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIDGET_CATEGORY_NAVIGATION"); _WIDGET_CATEGORY_NAVIGATIONReady = true; } return _WIDGET_CATEGORY_NAVIGATIONContent; } }
        private static Java.Lang.String _WIDGET_CATEGORY_NAVIGATIONContent = default;
        private static bool _WIDGET_CATEGORY_NAVIGATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/jank/AppJankStats.html#WIDGET_CATEGORY_OTHER"/>
        /// </summary>
        public static Java.Lang.String WIDGET_CATEGORY_OTHER { get { if (!_WIDGET_CATEGORY_OTHERReady) { _WIDGET_CATEGORY_OTHERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIDGET_CATEGORY_OTHER"); _WIDGET_CATEGORY_OTHERReady = true; } return _WIDGET_CATEGORY_OTHERContent; } }
        private static Java.Lang.String _WIDGET_CATEGORY_OTHERContent = default;
        private static bool _WIDGET_CATEGORY_OTHERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/jank/AppJankStats.html#WIDGET_CATEGORY_SCROLL"/>
        /// </summary>
        public static Java.Lang.String WIDGET_CATEGORY_SCROLL { get { if (!_WIDGET_CATEGORY_SCROLLReady) { _WIDGET_CATEGORY_SCROLLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIDGET_CATEGORY_SCROLL"); _WIDGET_CATEGORY_SCROLLReady = true; } return _WIDGET_CATEGORY_SCROLLContent; } }
        private static Java.Lang.String _WIDGET_CATEGORY_SCROLLContent = default;
        private static bool _WIDGET_CATEGORY_SCROLLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/jank/AppJankStats.html#WIDGET_CATEGORY_UNSPECIFIED"/>
        /// </summary>
        public static Java.Lang.String WIDGET_CATEGORY_UNSPECIFIED { get { if (!_WIDGET_CATEGORY_UNSPECIFIEDReady) { _WIDGET_CATEGORY_UNSPECIFIEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIDGET_CATEGORY_UNSPECIFIED"); _WIDGET_CATEGORY_UNSPECIFIEDReady = true; } return _WIDGET_CATEGORY_UNSPECIFIEDContent; } }
        private static Java.Lang.String _WIDGET_CATEGORY_UNSPECIFIEDContent = default;
        private static bool _WIDGET_CATEGORY_UNSPECIFIEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/jank/AppJankStats.html#WIDGET_STATE_ANIMATING"/>
        /// </summary>
        public static Java.Lang.String WIDGET_STATE_ANIMATING { get { if (!_WIDGET_STATE_ANIMATINGReady) { _WIDGET_STATE_ANIMATINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIDGET_STATE_ANIMATING"); _WIDGET_STATE_ANIMATINGReady = true; } return _WIDGET_STATE_ANIMATINGContent; } }
        private static Java.Lang.String _WIDGET_STATE_ANIMATINGContent = default;
        private static bool _WIDGET_STATE_ANIMATINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/jank/AppJankStats.html#WIDGET_STATE_DRAGGING"/>
        /// </summary>
        public static Java.Lang.String WIDGET_STATE_DRAGGING { get { if (!_WIDGET_STATE_DRAGGINGReady) { _WIDGET_STATE_DRAGGINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIDGET_STATE_DRAGGING"); _WIDGET_STATE_DRAGGINGReady = true; } return _WIDGET_STATE_DRAGGINGContent; } }
        private static Java.Lang.String _WIDGET_STATE_DRAGGINGContent = default;
        private static bool _WIDGET_STATE_DRAGGINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/jank/AppJankStats.html#WIDGET_STATE_FLINGING"/>
        /// </summary>
        public static Java.Lang.String WIDGET_STATE_FLINGING { get { if (!_WIDGET_STATE_FLINGINGReady) { _WIDGET_STATE_FLINGINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIDGET_STATE_FLINGING"); _WIDGET_STATE_FLINGINGReady = true; } return _WIDGET_STATE_FLINGINGContent; } }
        private static Java.Lang.String _WIDGET_STATE_FLINGINGContent = default;
        private static bool _WIDGET_STATE_FLINGINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/jank/AppJankStats.html#WIDGET_STATE_NONE"/>
        /// </summary>
        public static Java.Lang.String WIDGET_STATE_NONE { get { if (!_WIDGET_STATE_NONEReady) { _WIDGET_STATE_NONEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIDGET_STATE_NONE"); _WIDGET_STATE_NONEReady = true; } return _WIDGET_STATE_NONEContent; } }
        private static Java.Lang.String _WIDGET_STATE_NONEContent = default;
        private static bool _WIDGET_STATE_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/jank/AppJankStats.html#WIDGET_STATE_PLAYBACK"/>
        /// </summary>
        public static Java.Lang.String WIDGET_STATE_PLAYBACK { get { if (!_WIDGET_STATE_PLAYBACKReady) { _WIDGET_STATE_PLAYBACKContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIDGET_STATE_PLAYBACK"); _WIDGET_STATE_PLAYBACKReady = true; } return _WIDGET_STATE_PLAYBACKContent; } }
        private static Java.Lang.String _WIDGET_STATE_PLAYBACKContent = default;
        private static bool _WIDGET_STATE_PLAYBACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/jank/AppJankStats.html#WIDGET_STATE_PREDICTIVE_BACK"/>
        /// </summary>
        public static Java.Lang.String WIDGET_STATE_PREDICTIVE_BACK { get { if (!_WIDGET_STATE_PREDICTIVE_BACKReady) { _WIDGET_STATE_PREDICTIVE_BACKContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIDGET_STATE_PREDICTIVE_BACK"); _WIDGET_STATE_PREDICTIVE_BACKReady = true; } return _WIDGET_STATE_PREDICTIVE_BACKContent; } }
        private static Java.Lang.String _WIDGET_STATE_PREDICTIVE_BACKContent = default;
        private static bool _WIDGET_STATE_PREDICTIVE_BACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/jank/AppJankStats.html#WIDGET_STATE_SCROLLING"/>
        /// </summary>
        public static Java.Lang.String WIDGET_STATE_SCROLLING { get { if (!_WIDGET_STATE_SCROLLINGReady) { _WIDGET_STATE_SCROLLINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIDGET_STATE_SCROLLING"); _WIDGET_STATE_SCROLLINGReady = true; } return _WIDGET_STATE_SCROLLINGContent; } }
        private static Java.Lang.String _WIDGET_STATE_SCROLLINGContent = default;
        private static bool _WIDGET_STATE_SCROLLINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/jank/AppJankStats.html#WIDGET_STATE_SWIPING"/>
        /// </summary>
        public static Java.Lang.String WIDGET_STATE_SWIPING { get { if (!_WIDGET_STATE_SWIPINGReady) { _WIDGET_STATE_SWIPINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIDGET_STATE_SWIPING"); _WIDGET_STATE_SWIPINGReady = true; } return _WIDGET_STATE_SWIPINGContent; } }
        private static Java.Lang.String _WIDGET_STATE_SWIPINGContent = default;
        private static bool _WIDGET_STATE_SWIPINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/jank/AppJankStats.html#WIDGET_STATE_TAPPING"/>
        /// </summary>
        public static Java.Lang.String WIDGET_STATE_TAPPING { get { if (!_WIDGET_STATE_TAPPINGReady) { _WIDGET_STATE_TAPPINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIDGET_STATE_TAPPING"); _WIDGET_STATE_TAPPINGReady = true; } return _WIDGET_STATE_TAPPINGContent; } }
        private static Java.Lang.String _WIDGET_STATE_TAPPINGContent = default;
        private static bool _WIDGET_STATE_TAPPINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/jank/AppJankStats.html#WIDGET_STATE_UNSPECIFIED"/>
        /// </summary>
        public static Java.Lang.String WIDGET_STATE_UNSPECIFIED { get { if (!_WIDGET_STATE_UNSPECIFIEDReady) { _WIDGET_STATE_UNSPECIFIEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIDGET_STATE_UNSPECIFIED"); _WIDGET_STATE_UNSPECIFIEDReady = true; } return _WIDGET_STATE_UNSPECIFIEDContent; } }
        private static Java.Lang.String _WIDGET_STATE_UNSPECIFIEDContent = default;
        private static bool _WIDGET_STATE_UNSPECIFIEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/jank/AppJankStats.html#WIDGET_STATE_ZOOMING"/>
        /// </summary>
        public static Java.Lang.String WIDGET_STATE_ZOOMING { get { if (!_WIDGET_STATE_ZOOMINGReady) { _WIDGET_STATE_ZOOMINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIDGET_STATE_ZOOMING"); _WIDGET_STATE_ZOOMINGReady = true; } return _WIDGET_STATE_ZOOMINGContent; } }
        private static Java.Lang.String _WIDGET_STATE_ZOOMINGContent = default;
        private static bool _WIDGET_STATE_ZOOMINGReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/jank/AppJankStats.html#getRelativeFrameTimeHistogram()"/>
        /// </summary>
        /// <returns><see cref="Android.App.Jank.RelativeFrameTimeHistogram"/></returns>
        public Android.App.Jank.RelativeFrameTimeHistogram GetRelativeFrameTimeHistogram()
        {
            return IExecuteWithSignature<Android.App.Jank.RelativeFrameTimeHistogram>("getRelativeFrameTimeHistogram", "()Landroid/app/jank/RelativeFrameTimeHistogram;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/jank/AppJankStats.html#getUid()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetUid()
        {
            return IExecuteWithSignature<int>("getUid", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/jank/AppJankStats.html#getNavigationComponent()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetNavigationComponent()
        {
            return IExecuteWithSignature<Java.Lang.String>("getNavigationComponent", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/jank/AppJankStats.html#getWidgetCategory()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetWidgetCategory()
        {
            return IExecuteWithSignature<Java.Lang.String>("getWidgetCategory", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/jank/AppJankStats.html#getWidgetId()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetWidgetId()
        {
            return IExecuteWithSignature<Java.Lang.String>("getWidgetId", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/jank/AppJankStats.html#getWidgetState()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetWidgetState()
        {
            return IExecuteWithSignature<Java.Lang.String>("getWidgetState", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/jank/AppJankStats.html#getJankyFrameCount()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetJankyFrameCount()
        {
            return IExecuteWithSignature<long>("getJankyFrameCount", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/jank/AppJankStats.html#getTotalFrameCount()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetTotalFrameCount()
        {
            return IExecuteWithSignature<long>("getTotalFrameCount", "()J");
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
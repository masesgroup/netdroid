/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.App.Sdksandbox.Sdkprovider
{
    #region SdkSandboxController
    public partial class SdkSandboxController
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/sdksandbox/sdkprovider/SdkSandboxController.html#SDK_SANDBOX_CONTROLLER_SERVICE"/>
        /// </summary>
        public static Java.Lang.String SDK_SANDBOX_CONTROLLER_SERVICE { get { if (!_SDK_SANDBOX_CONTROLLER_SERVICEReady) { _SDK_SANDBOX_CONTROLLER_SERVICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SDK_SANDBOX_CONTROLLER_SERVICE"); _SDK_SANDBOX_CONTROLLER_SERVICEReady = true; } return _SDK_SANDBOX_CONTROLLER_SERVICEContent; } }
        private static Java.Lang.String _SDK_SANDBOX_CONTROLLER_SERVICEContent = default;
        private static bool _SDK_SANDBOX_CONTROLLER_SERVICEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/sdksandbox/sdkprovider/SdkSandboxController.html#getClientSharedPreferences()"/>
        /// </summary>
        /// <returns><see cref="Android.Content.SharedPreferences"/></returns>
        public Android.Content.SharedPreferences GetClientSharedPreferences()
        {
            return IExecuteWithSignature<Android.Content.SharedPreferences>("getClientSharedPreferences", "()Landroid/content/SharedPreferences;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/sdksandbox/sdkprovider/SdkSandboxController.html#registerSdkSandboxActivityHandler(android.app.sdksandbox.sdkprovider.SdkSandboxActivityHandler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.Sdksandbox.Sdkprovider.SdkSandboxActivityHandler"/></param>
        /// <returns><see cref="Android.Os.IBinder"/></returns>
        public Android.Os.IBinder RegisterSdkSandboxActivityHandler(Android.App.Sdksandbox.Sdkprovider.SdkSandboxActivityHandler arg0)
        {
            return IExecuteWithSignature<Android.Os.IBinder>("registerSdkSandboxActivityHandler", "(Landroid/app/sdksandbox/sdkprovider/SdkSandboxActivityHandler;)Landroid/os/IBinder;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/sdksandbox/sdkprovider/SdkSandboxController.html#getClientPackageName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetClientPackageName()
        {
            return IExecuteWithSignature<Java.Lang.String>("getClientPackageName", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/sdksandbox/sdkprovider/SdkSandboxController.html#getAppOwnedSdkSandboxInterfaces()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.App.Sdksandbox.AppOwnedSdkSandboxInterface> GetAppOwnedSdkSandboxInterfaces()
        {
            return IExecuteWithSignature<Java.Util.List<Android.App.Sdksandbox.AppOwnedSdkSandboxInterface>>("getAppOwnedSdkSandboxInterfaces", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/sdksandbox/sdkprovider/SdkSandboxController.html#getSandboxedSdks()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.App.Sdksandbox.SandboxedSdk> GetSandboxedSdks()
        {
            return IExecuteWithSignature<Java.Util.List<Android.App.Sdksandbox.SandboxedSdk>>("getSandboxedSdks", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/sdksandbox/sdkprovider/SdkSandboxController.html#loadSdk(java.lang.String,android.os.Bundle,java.util.concurrent.Executor,android.os.OutcomeReceiver)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Os.Bundle"/></param>
        /// <param name="arg2"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg3"><see cref="Android.Os.OutcomeReceiver"/></param>
        public void LoadSdk(Java.Lang.String arg0, Android.Os.Bundle arg1, Java.Util.Concurrent.Executor arg2, Android.Os.OutcomeReceiver<Android.App.Sdksandbox.SandboxedSdk, Android.App.Sdksandbox.LoadSdkException> arg3)
        {
            IExecute("loadSdk", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/sdksandbox/sdkprovider/SdkSandboxController.html#unregisterSdkSandboxActivityHandler(android.app.sdksandbox.sdkprovider.SdkSandboxActivityHandler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.Sdksandbox.Sdkprovider.SdkSandboxActivityHandler"/></param>
        public void UnregisterSdkSandboxActivityHandler(Android.App.Sdksandbox.Sdkprovider.SdkSandboxActivityHandler arg0)
        {
            IExecuteWithSignature("unregisterSdkSandboxActivityHandler", "(Landroid/app/sdksandbox/sdkprovider/SdkSandboxActivityHandler;)V", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
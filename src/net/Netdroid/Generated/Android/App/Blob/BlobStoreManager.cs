/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.App.Blob
{
    #region BlobStoreManager declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/app/blob/BlobStoreManager.html"/>
    /// </summary>
    public partial class BlobStoreManager : MASES.JCOBridge.C2JBridge.JVMBridgeBase<BlobStoreManager>
    {
        const string _bridgeClassName = "android.app.blob.BlobStoreManager";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public BlobStoreManager() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public BlobStoreManager(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region Session declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/blob/BlobStoreManager.Session.html"/>
        /// </summary>
        public partial class Session : Java.Io.Closeable
        {
            const string _bridgeClassName = "android.app.blob.BlobStoreManager$Session";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Session() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Session(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region BlobStoreManager implementation
    public partial class BlobStoreManager
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/blob/BlobStoreManager.html#openSession(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="Android.App.Blob.BlobStoreManager.Session"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public Android.App.Blob.BlobStoreManager.Session OpenSession(long arg0)
        {
            return IExecuteWithSignature<Android.App.Blob.BlobStoreManager.Session>("openSession", "(J)Landroid/app/blob/BlobStoreManager$Session;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/blob/BlobStoreManager.html#openBlob(android.app.blob.BlobHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.Blob.BlobHandle"/></param>
        /// <returns><see cref="Android.Os.ParcelFileDescriptor"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public Android.Os.ParcelFileDescriptor OpenBlob(Android.App.Blob.BlobHandle arg0)
        {
            return IExecuteWithSignature<Android.Os.ParcelFileDescriptor>("openBlob", "(Landroid/app/blob/BlobHandle;)Landroid/os/ParcelFileDescriptor;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/blob/BlobStoreManager.html#getLeasedBlobs()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public Java.Util.List<Android.App.Blob.BlobHandle> GetLeasedBlobs()
        {
            return IExecuteWithSignature<Java.Util.List<Android.App.Blob.BlobHandle>>("getLeasedBlobs", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/blob/BlobStoreManager.html#createSession(android.app.blob.BlobHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.Blob.BlobHandle"/></param>
        /// <returns><see cref="long"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public long CreateSession(Android.App.Blob.BlobHandle arg0)
        {
            return IExecuteWithSignature<long>("createSession", "(Landroid/app/blob/BlobHandle;)J", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/blob/BlobStoreManager.html#getRemainingLeaseQuotaBytes()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetRemainingLeaseQuotaBytes()
        {
            return IExecuteWithSignature<long>("getRemainingLeaseQuotaBytes", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/blob/BlobStoreManager.html#abandonSession(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void AbandonSession(long arg0)
        {
            IExecuteWithSignature("abandonSession", "(J)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/blob/BlobStoreManager.html#acquireLease(android.app.blob.BlobHandle,int,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.Blob.BlobHandle"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void AcquireLease(Android.App.Blob.BlobHandle arg0, int arg1, long arg2)
        {
            IExecute("acquireLease", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/blob/BlobStoreManager.html#acquireLease(android.app.blob.BlobHandle,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.Blob.BlobHandle"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void AcquireLease(Android.App.Blob.BlobHandle arg0, int arg1)
        {
            IExecute("acquireLease", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/blob/BlobStoreManager.html#acquireLease(android.app.blob.BlobHandle,java.lang.CharSequence,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.Blob.BlobHandle"/></param>
        /// <param name="arg1"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void AcquireLease(Android.App.Blob.BlobHandle arg0, Java.Lang.CharSequence arg1, long arg2)
        {
            IExecute("acquireLease", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/blob/BlobStoreManager.html#acquireLease(android.app.blob.BlobHandle,java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.Blob.BlobHandle"/></param>
        /// <param name="arg1"><see cref="Java.Lang.CharSequence"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void AcquireLease(Android.App.Blob.BlobHandle arg0, Java.Lang.CharSequence arg1)
        {
            IExecute("acquireLease", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/blob/BlobStoreManager.html#releaseLease(android.app.blob.BlobHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.Blob.BlobHandle"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void ReleaseLease(Android.App.Blob.BlobHandle arg0)
        {
            IExecuteWithSignature("releaseLease", "(Landroid/app/blob/BlobHandle;)V", arg0);
        }

        #endregion

        #region Nested classes
        #region Session implementation
        public partial class Session
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/blob/BlobStoreManager.Session.html#openRead()"/>
            /// </summary>
            /// <returns><see cref="Android.Os.ParcelFileDescriptor"/></returns>
            /// <exception cref="Java.Io.IOException"/>
            public Android.Os.ParcelFileDescriptor OpenRead()
            {
                return IExecuteWithSignature<Android.Os.ParcelFileDescriptor>("openRead", "()Landroid/os/ParcelFileDescriptor;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/blob/BlobStoreManager.Session.html#openWrite(long,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <returns><see cref="Android.Os.ParcelFileDescriptor"/></returns>
            /// <exception cref="Java.Io.IOException"/>
            public Android.Os.ParcelFileDescriptor OpenWrite(long arg0, long arg1)
            {
                return IExecute<Android.Os.ParcelFileDescriptor>("openWrite", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/blob/BlobStoreManager.Session.html#isPackageAccessAllowed(java.lang.String,byte[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="byte"/></param>
            /// <returns><see cref="bool"/></returns>
            /// <exception cref="Java.Io.IOException"/>
            public bool IsPackageAccessAllowed(Java.Lang.String arg0, byte[] arg1)
            {
                return IExecute<bool>("isPackageAccessAllowed", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/blob/BlobStoreManager.Session.html#isPublicAccessAllowed()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            /// <exception cref="Java.Io.IOException"/>
            public bool IsPublicAccessAllowed()
            {
                return IExecuteWithSignature<bool>("isPublicAccessAllowed", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/blob/BlobStoreManager.Session.html#isSameSignatureAccessAllowed()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            /// <exception cref="Java.Io.IOException"/>
            public bool IsSameSignatureAccessAllowed()
            {
                return IExecuteWithSignature<bool>("isSameSignatureAccessAllowed", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/blob/BlobStoreManager.Session.html#getSize()"/>
            /// </summary>
            /// <returns><see cref="long"/></returns>
            /// <exception cref="Java.Io.IOException"/>
            public long GetSize()
            {
                return IExecuteWithSignature<long>("getSize", "()J");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/blob/BlobStoreManager.Session.html#abandon()"/>
            /// </summary>
            /// <exception cref="Java.Io.IOException"/>
            public void Abandon()
            {
                IExecuteWithSignature("abandon", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/blob/BlobStoreManager.Session.html#allowPackageAccess(java.lang.String,byte[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="byte"/></param>
            /// <exception cref="Java.Io.IOException"/>
            public void AllowPackageAccess(Java.Lang.String arg0, byte[] arg1)
            {
                IExecute("allowPackageAccess", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/blob/BlobStoreManager.Session.html#allowPublicAccess()"/>
            /// </summary>
            /// <exception cref="Java.Io.IOException"/>
            public void AllowPublicAccess()
            {
                IExecuteWithSignature("allowPublicAccess", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/blob/BlobStoreManager.Session.html#allowSameSignatureAccess()"/>
            /// </summary>
            /// <exception cref="Java.Io.IOException"/>
            public void AllowSameSignatureAccess()
            {
                IExecuteWithSignature("allowSameSignatureAccess", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/blob/BlobStoreManager.Session.html#close()"/>
            /// </summary>
            /// <exception cref="Java.Io.IOException"/>
            public void Close()
            {
                IExecuteWithSignature("close", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/blob/BlobStoreManager.Session.html#commit(java.util.concurrent.Executor,java.util.function.Consumer)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
            /// <param name="arg1"><see cref="Java.Util.Function.Consumer"/></param>
            /// <exception cref="Java.Io.IOException"/>
            public void Commit(Java.Util.Concurrent.Executor arg0, Java.Util.Function.Consumer<Java.Lang.Integer> arg1)
            {
                IExecute("commit", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.5.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.App
{
    #region WallpaperColors
    public partial class WallpaperColors
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/WallpaperColors.html#%3Cinit%3E(android.graphics.Color,android.graphics.Color,android.graphics.Color,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Color"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Color"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.Color"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public WallpaperColors(Android.Graphics.Color arg0, Android.Graphics.Color arg1, Android.Graphics.Color arg2, int arg3)
            : base(arg0, arg1, arg2, arg3)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/WallpaperColors.html#%3Cinit%3E(android.graphics.Color,android.graphics.Color,android.graphics.Color)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Color"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Color"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.Color"/></param>
        public WallpaperColors(Android.Graphics.Color arg0, Android.Graphics.Color arg1, Android.Graphics.Color arg2)
            : base(arg0, arg1, arg2)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/WallpaperColors.html#%3Cinit%3E(android.os.Parcel)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        public WallpaperColors(Android.Os.Parcel arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/WallpaperColors.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/WallpaperColors.html#HINT_SUPPORTS_DARK_TEXT"/>
        /// </summary>
        public static int HINT_SUPPORTS_DARK_TEXT { get { if (!_HINT_SUPPORTS_DARK_TEXTReady) { _HINT_SUPPORTS_DARK_TEXTContent = SGetField<int>(LocalBridgeClazz, "HINT_SUPPORTS_DARK_TEXT"); _HINT_SUPPORTS_DARK_TEXTReady = true; } return _HINT_SUPPORTS_DARK_TEXTContent; } }
        private static int _HINT_SUPPORTS_DARK_TEXTContent = default;
        private static bool _HINT_SUPPORTS_DARK_TEXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/WallpaperColors.html#HINT_SUPPORTS_DARK_THEME"/>
        /// </summary>
        public static int HINT_SUPPORTS_DARK_THEME { get { if (!_HINT_SUPPORTS_DARK_THEMEReady) { _HINT_SUPPORTS_DARK_THEMEContent = SGetField<int>(LocalBridgeClazz, "HINT_SUPPORTS_DARK_THEME"); _HINT_SUPPORTS_DARK_THEMEReady = true; } return _HINT_SUPPORTS_DARK_THEMEContent; } }
        private static int _HINT_SUPPORTS_DARK_THEMEContent = default;
        private static bool _HINT_SUPPORTS_DARK_THEMEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/WallpaperColors.html#fromBitmap(android.graphics.Bitmap)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Bitmap"/></param>
        /// <returns><see cref="Android.App.WallpaperColors"/></returns>
        public static Android.App.WallpaperColors FromBitmap(Android.Graphics.Bitmap arg0)
        {
            return SExecuteWithSignature<Android.App.WallpaperColors>(LocalBridgeClazz, "fromBitmap", "(Landroid/graphics/Bitmap;)Landroid/app/WallpaperColors;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/WallpaperColors.html#fromDrawable(android.graphics.drawable.Drawable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        /// <returns><see cref="Android.App.WallpaperColors"/></returns>
        public static Android.App.WallpaperColors FromDrawable(Android.Graphics.Drawable.Drawable arg0)
        {
            return SExecuteWithSignature<Android.App.WallpaperColors>(LocalBridgeClazz, "fromDrawable", "(Landroid/graphics/drawable/Drawable;)Landroid/app/WallpaperColors;", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/WallpaperColors.html#getPrimaryColor()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Color"/></returns>
        public Android.Graphics.Color GetPrimaryColor()
        {
            return IExecuteWithSignature<Android.Graphics.Color>("getPrimaryColor", "()Landroid/graphics/Color;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/WallpaperColors.html#getSecondaryColor()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Color"/></returns>
        public Android.Graphics.Color GetSecondaryColor()
        {
            return IExecuteWithSignature<Android.Graphics.Color>("getSecondaryColor", "()Landroid/graphics/Color;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/WallpaperColors.html#getTertiaryColor()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Color"/></returns>
        public Android.Graphics.Color GetTertiaryColor()
        {
            return IExecuteWithSignature<Android.Graphics.Color>("getTertiaryColor", "()Landroid/graphics/Color;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/WallpaperColors.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/WallpaperColors.html#getColorHints()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetColorHints()
        {
            return IExecuteWithSignature<int>("getColorHints", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/WallpaperColors.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecute("writeToParcel", arg0, arg1);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
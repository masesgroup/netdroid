/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.App
{
    #region ActivityManager declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html"/>
    /// </summary>
    public partial class ActivityManager : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ActivityManager>
    {
        const string _bridgeClassName = "android.app.ActivityManager";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public ActivityManager() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public ActivityManager(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region AppTask declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.AppTask.html"/>
        /// </summary>
        public partial class AppTask : MASES.JCOBridge.C2JBridge.JVMBridgeBase<AppTask>
        {
            const string _bridgeClassName = "android.app.ActivityManager$AppTask";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public AppTask() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public AppTask(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region MemoryInfo declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.MemoryInfo.html"/>
        /// </summary>
        public partial class MemoryInfo : Android.Os.Parcelable
        {
            const string _bridgeClassName = "android.app.ActivityManager$MemoryInfo";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public MemoryInfo() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public MemoryInfo(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region ProcessErrorStateInfo declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.ProcessErrorStateInfo.html"/>
        /// </summary>
        public partial class ProcessErrorStateInfo : Android.Os.Parcelable
        {
            const string _bridgeClassName = "android.app.ActivityManager$ProcessErrorStateInfo";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public ProcessErrorStateInfo() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public ProcessErrorStateInfo(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region RecentTaskInfo declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RecentTaskInfo.html"/>
        /// </summary>
        public partial class RecentTaskInfo : Android.App.TaskInfo
        {
            const string _bridgeClassName = "android.app.ActivityManager$RecentTaskInfo";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public RecentTaskInfo() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public RecentTaskInfo(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region RunningAppProcessInfo declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningAppProcessInfo.html"/>
        /// </summary>
        public partial class RunningAppProcessInfo : Android.Os.Parcelable
        {
            const string _bridgeClassName = "android.app.ActivityManager$RunningAppProcessInfo";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public RunningAppProcessInfo() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public RunningAppProcessInfo(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region RunningServiceInfo declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningServiceInfo.html"/>
        /// </summary>
        public partial class RunningServiceInfo : Android.Os.Parcelable
        {
            const string _bridgeClassName = "android.app.ActivityManager$RunningServiceInfo";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public RunningServiceInfo() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public RunningServiceInfo(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region RunningTaskInfo declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningTaskInfo.html"/>
        /// </summary>
        public partial class RunningTaskInfo : Android.App.TaskInfo
        {
            const string _bridgeClassName = "android.app.ActivityManager$RunningTaskInfo";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public RunningTaskInfo() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public RunningTaskInfo(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region TaskDescription declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.TaskDescription.html"/>
        /// </summary>
        public partial class TaskDescription : Android.Os.Parcelable
        {
            const string _bridgeClassName = "android.app.ActivityManager$TaskDescription";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public TaskDescription() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public TaskDescription(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class
            #region Builder declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.TaskDescription.Builder.html"/>
            /// </summary>
            public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
            {
                const string _bridgeClassName = "android.app.ActivityManager$TaskDescription$Builder";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                public Builder() { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                public Builder(params object[] args) : base(args) { }

                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                /// </summary>
                public override string BridgeClassName => _bridgeClassName;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                /// </summary>
                public override bool IsBridgeAbstract => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                /// </summary>
                public override bool IsBridgeCloseable => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                /// </summary>
                public override bool IsBridgeInterface => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                /// </summary>
                public override bool IsBridgeStatic => true;

                // TODO: complete the class

            }
            #endregion

        
        }
        #endregion

    
    }
    #endregion

    #region ActivityManager implementation
    public partial class ActivityManager
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#LOCK_TASK_MODE_LOCKED"/>
        /// </summary>
        public static int LOCK_TASK_MODE_LOCKED { get { if (!_LOCK_TASK_MODE_LOCKEDReady) { _LOCK_TASK_MODE_LOCKEDContent = SGetField<int>(LocalBridgeClazz, "LOCK_TASK_MODE_LOCKED"); _LOCK_TASK_MODE_LOCKEDReady = true; } return _LOCK_TASK_MODE_LOCKEDContent; } }
        private static int _LOCK_TASK_MODE_LOCKEDContent = default;
        private static bool _LOCK_TASK_MODE_LOCKEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#LOCK_TASK_MODE_NONE"/>
        /// </summary>
        public static int LOCK_TASK_MODE_NONE { get { if (!_LOCK_TASK_MODE_NONEReady) { _LOCK_TASK_MODE_NONEContent = SGetField<int>(LocalBridgeClazz, "LOCK_TASK_MODE_NONE"); _LOCK_TASK_MODE_NONEReady = true; } return _LOCK_TASK_MODE_NONEContent; } }
        private static int _LOCK_TASK_MODE_NONEContent = default;
        private static bool _LOCK_TASK_MODE_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#LOCK_TASK_MODE_PINNED"/>
        /// </summary>
        public static int LOCK_TASK_MODE_PINNED { get { if (!_LOCK_TASK_MODE_PINNEDReady) { _LOCK_TASK_MODE_PINNEDContent = SGetField<int>(LocalBridgeClazz, "LOCK_TASK_MODE_PINNED"); _LOCK_TASK_MODE_PINNEDReady = true; } return _LOCK_TASK_MODE_PINNEDContent; } }
        private static int _LOCK_TASK_MODE_PINNEDContent = default;
        private static bool _LOCK_TASK_MODE_PINNEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#MOVE_TASK_NO_USER_ACTION"/>
        /// </summary>
        public static int MOVE_TASK_NO_USER_ACTION { get { if (!_MOVE_TASK_NO_USER_ACTIONReady) { _MOVE_TASK_NO_USER_ACTIONContent = SGetField<int>(LocalBridgeClazz, "MOVE_TASK_NO_USER_ACTION"); _MOVE_TASK_NO_USER_ACTIONReady = true; } return _MOVE_TASK_NO_USER_ACTIONContent; } }
        private static int _MOVE_TASK_NO_USER_ACTIONContent = default;
        private static bool _MOVE_TASK_NO_USER_ACTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#MOVE_TASK_WITH_HOME"/>
        /// </summary>
        public static int MOVE_TASK_WITH_HOME { get { if (!_MOVE_TASK_WITH_HOMEReady) { _MOVE_TASK_WITH_HOMEContent = SGetField<int>(LocalBridgeClazz, "MOVE_TASK_WITH_HOME"); _MOVE_TASK_WITH_HOMEReady = true; } return _MOVE_TASK_WITH_HOMEContent; } }
        private static int _MOVE_TASK_WITH_HOMEContent = default;
        private static bool _MOVE_TASK_WITH_HOMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#RECENT_IGNORE_UNAVAILABLE"/>
        /// </summary>
        public static int RECENT_IGNORE_UNAVAILABLE { get { if (!_RECENT_IGNORE_UNAVAILABLEReady) { _RECENT_IGNORE_UNAVAILABLEContent = SGetField<int>(LocalBridgeClazz, "RECENT_IGNORE_UNAVAILABLE"); _RECENT_IGNORE_UNAVAILABLEReady = true; } return _RECENT_IGNORE_UNAVAILABLEContent; } }
        private static int _RECENT_IGNORE_UNAVAILABLEContent = default;
        private static bool _RECENT_IGNORE_UNAVAILABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#RECENT_WITH_EXCLUDED"/>
        /// </summary>
        public static int RECENT_WITH_EXCLUDED { get { if (!_RECENT_WITH_EXCLUDEDReady) { _RECENT_WITH_EXCLUDEDContent = SGetField<int>(LocalBridgeClazz, "RECENT_WITH_EXCLUDED"); _RECENT_WITH_EXCLUDEDReady = true; } return _RECENT_WITH_EXCLUDEDContent; } }
        private static int _RECENT_WITH_EXCLUDEDContent = default;
        private static bool _RECENT_WITH_EXCLUDEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#ACTION_REPORT_HEAP_LIMIT"/>
        /// </summary>
        public static Java.Lang.String ACTION_REPORT_HEAP_LIMIT { get { if (!_ACTION_REPORT_HEAP_LIMITReady) { _ACTION_REPORT_HEAP_LIMITContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_REPORT_HEAP_LIMIT"); _ACTION_REPORT_HEAP_LIMITReady = true; } return _ACTION_REPORT_HEAP_LIMITContent; } }
        private static Java.Lang.String _ACTION_REPORT_HEAP_LIMITContent = default;
        private static bool _ACTION_REPORT_HEAP_LIMITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#META_HOME_ALTERNATE"/>
        /// </summary>
        public static Java.Lang.String META_HOME_ALTERNATE { get { if (!_META_HOME_ALTERNATEReady) { _META_HOME_ALTERNATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "META_HOME_ALTERNATE"); _META_HOME_ALTERNATEReady = true; } return _META_HOME_ALTERNATEContent; } }
        private static Java.Lang.String _META_HOME_ALTERNATEContent = default;
        private static bool _META_HOME_ALTERNATEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#isLowMemoryKillReportSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public static bool IsLowMemoryKillReportSupported()
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isLowMemoryKillReportSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#isRunningInTestHarness()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public static bool IsRunningInTestHarness()
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isRunningInTestHarness", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#isRunningInUserTestHarness()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public static bool IsRunningInUserTestHarness()
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isRunningInUserTestHarness", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#isUserAMonkey()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public static bool IsUserAMonkey()
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isUserAMonkey", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#getMyMemoryState(android.app.ActivityManager.RunningAppProcessInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.ActivityManager.RunningAppProcessInfo"/></param>
        public static void GetMyMemoryState(Android.App.ActivityManager.RunningAppProcessInfo arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "getMyMemoryState", "(Landroid/app/ActivityManager$RunningAppProcessInfo;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#setVrThread(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void SetVrThread(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "setVrThread", "(I)V", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#getRunningServiceControlPanel(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="Android.App.PendingIntent"/></returns>
        /// <exception cref="Java.Lang.SecurityException"/>
        public Android.App.PendingIntent GetRunningServiceControlPanel(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<Android.App.PendingIntent>("getRunningServiceControlPanel", "(Landroid/content/ComponentName;)Landroid/app/PendingIntent;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#getDeviceConfigurationInfo()"/>
        /// </summary>
        /// <returns><see cref="Android.Content.Pm.ConfigurationInfo"/></returns>
        public Android.Content.Pm.ConfigurationInfo GetDeviceConfigurationInfo()
        {
            return IExecuteWithSignature<Android.Content.Pm.ConfigurationInfo>("getDeviceConfigurationInfo", "()Landroid/content/pm/ConfigurationInfo;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#getProcessMemoryInfo(int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Os.Debug.MemoryInfo"/></returns>
        public Android.Os.Debug.MemoryInfo[] GetProcessMemoryInfo(int[] arg0)
        {
            return IExecuteWithSignatureArray<Android.Os.Debug.MemoryInfo>("getProcessMemoryInfo", "([I)[Landroid/os/Debug$MemoryInfo;", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#getAppTaskThumbnailSize()"/>
        /// </summary>
        /// <returns><see cref="Android.Util.Size"/></returns>
        public Android.Util.Size GetAppTaskThumbnailSize()
        {
            return IExecuteWithSignature<Android.Util.Size>("getAppTaskThumbnailSize", "()Landroid/util/Size;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#clearApplicationUserData()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool ClearApplicationUserData()
        {
            return IExecuteWithSignature<bool>("clearApplicationUserData", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#isActivityStartAllowedOnDisplay(android.content.Context,int,android.content.Intent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Content.Intent"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsActivityStartAllowedOnDisplay(Android.Content.Context arg0, int arg1, Android.Content.Intent arg2)
        {
            return IExecuteWithSignature<bool>("isActivityStartAllowedOnDisplay", "(Landroid/content/Context;ILandroid/content/Intent;)Z", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#isBackgroundRestricted()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsBackgroundRestricted()
        {
            return IExecuteWithSignature<bool>("isBackgroundRestricted", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#isInLockTaskMode()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool IsInLockTaskMode()
        {
            return IExecuteWithSignature<bool>("isInLockTaskMode", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#isLowRamDevice()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsLowRamDevice()
        {
            return IExecuteWithSignature<bool>("isLowRamDevice", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#addAppTask(android.app.Activity,android.content.Intent,android.app.ActivityManager.TaskDescription,android.graphics.Bitmap)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.Activity"/></param>
        /// <param name="arg1"><see cref="Android.Content.Intent"/></param>
        /// <param name="arg2"><see cref="Android.App.ActivityManager.TaskDescription"/></param>
        /// <param name="arg3"><see cref="Android.Graphics.Bitmap"/></param>
        /// <returns><see cref="int"/></returns>
        public int AddAppTask(Android.App.Activity arg0, Android.Content.Intent arg1, Android.App.ActivityManager.TaskDescription arg2, Android.Graphics.Bitmap arg3)
        {
            return IExecuteWithSignature<int>("addAppTask", "(Landroid/app/Activity;Landroid/content/Intent;Landroid/app/ActivityManager$TaskDescription;Landroid/graphics/Bitmap;)I", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#getLargeMemoryClass()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetLargeMemoryClass()
        {
            return IExecuteWithSignature<int>("getLargeMemoryClass", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#getLauncherLargeIconDensity()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetLauncherLargeIconDensity()
        {
            return IExecuteWithSignature<int>("getLauncherLargeIconDensity", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#getLauncherLargeIconSize()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetLauncherLargeIconSize()
        {
            return IExecuteWithSignature<int>("getLauncherLargeIconSize", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#getLockTaskModeState()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetLockTaskModeState()
        {
            return IExecuteWithSignature<int>("getLockTaskModeState", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#getMemoryClass()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMemoryClass()
        {
            return IExecuteWithSignature<int>("getMemoryClass", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#getAppTasks()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.App.ActivityManager.AppTask> GetAppTasks()
        {
            return IExecuteWithSignature<Java.Util.List<Android.App.ActivityManager.AppTask>>("getAppTasks", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#getProcessesInErrorState()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.App.ActivityManager.ProcessErrorStateInfo> GetProcessesInErrorState()
        {
            return IExecuteWithSignature<Java.Util.List<Android.App.ActivityManager.ProcessErrorStateInfo>>("getProcessesInErrorState", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#getRecentTasks(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        /// <exception cref="Java.Lang.SecurityException"/>
        [global::System.Obsolete()]
        public Java.Util.List<Android.App.ActivityManager.RecentTaskInfo> GetRecentTasks(int arg0, int arg1)
        {
            return IExecuteWithSignature<Java.Util.List<Android.App.ActivityManager.RecentTaskInfo>>("getRecentTasks", "(II)Ljava/util/List;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#getRunningAppProcesses()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.App.ActivityManager.RunningAppProcessInfo> GetRunningAppProcesses()
        {
            return IExecuteWithSignature<Java.Util.List<Android.App.ActivityManager.RunningAppProcessInfo>>("getRunningAppProcesses", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#getRunningServices(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        /// <exception cref="Java.Lang.SecurityException"/>
        [global::System.Obsolete()]
        public Java.Util.List<Android.App.ActivityManager.RunningServiceInfo> GetRunningServices(int arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Android.App.ActivityManager.RunningServiceInfo>>("getRunningServices", "(I)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#getRunningTasks(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        /// <exception cref="Java.Lang.SecurityException"/>
        [global::System.Obsolete()]
        public Java.Util.List<Android.App.ActivityManager.RunningTaskInfo> GetRunningTasks(int arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Android.App.ActivityManager.RunningTaskInfo>>("getRunningTasks", "(I)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#getHistoricalProcessExitReasons(java.lang.String,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.App.ApplicationExitInfo> GetHistoricalProcessExitReasons(Java.Lang.String arg0, int arg1, int arg2)
        {
            return IExecuteWithSignature<Java.Util.List<Android.App.ApplicationExitInfo>>("getHistoricalProcessExitReasons", "(Ljava/lang/String;II)Ljava/util/List;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#getHistoricalProcessStartReasons(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.App.ApplicationStartInfo> GetHistoricalProcessStartReasons(int arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Android.App.ApplicationStartInfo>>("getHistoricalProcessStartReasons", "(I)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#addApplicationStartInfoCompletionListener(java.util.concurrent.Executor,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Java.Util.Function.Consumer"/></param>
        public void AddApplicationStartInfoCompletionListener(Java.Util.Concurrent.Executor arg0, Java.Util.Function.Consumer<Android.App.ApplicationStartInfo> arg1)
        {
            IExecuteWithSignature("addApplicationStartInfoCompletionListener", "(Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#addStartInfoTimestamp(int,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        public void AddStartInfoTimestamp(int arg0, long arg1)
        {
            IExecuteWithSignature("addStartInfoTimestamp", "(IJ)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#appNotResponding(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void AppNotResponding(Java.Lang.String arg0)
        {
            IExecuteWithSignature("appNotResponding", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#clearWatchHeapLimit()"/>
        /// </summary>
        public void ClearWatchHeapLimit()
        {
            IExecuteWithSignature("clearWatchHeapLimit", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#dumpPackageState(java.io.FileDescriptor,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.FileDescriptor"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        public void DumpPackageState(Java.Io.FileDescriptor arg0, Java.Lang.String arg1)
        {
            IExecuteWithSignature("dumpPackageState", "(Ljava/io/FileDescriptor;Ljava/lang/String;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#getMemoryInfo(android.app.ActivityManager.MemoryInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.ActivityManager.MemoryInfo"/></param>
        public void GetMemoryInfo(Android.App.ActivityManager.MemoryInfo arg0)
        {
            IExecuteWithSignature("getMemoryInfo", "(Landroid/app/ActivityManager$MemoryInfo;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#killBackgroundProcesses(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void KillBackgroundProcesses(Java.Lang.String arg0)
        {
            IExecuteWithSignature("killBackgroundProcesses", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#moveTaskToFront(int,int,android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Os.Bundle"/></param>
        public void MoveTaskToFront(int arg0, int arg1, Android.Os.Bundle arg2)
        {
            IExecuteWithSignature("moveTaskToFront", "(IILandroid/os/Bundle;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#moveTaskToFront(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void MoveTaskToFront(int arg0, int arg1)
        {
            IExecuteWithSignature("moveTaskToFront", "(II)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#removeApplicationStartInfoCompletionListener(java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Consumer"/></param>
        public void RemoveApplicationStartInfoCompletionListener(Java.Util.Function.Consumer<Android.App.ApplicationStartInfo> arg0)
        {
            IExecuteWithSignature("removeApplicationStartInfoCompletionListener", "(Ljava/util/function/Consumer;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#restartPackage(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        [global::System.Obsolete()]
        public void RestartPackage(Java.Lang.String arg0)
        {
            IExecuteWithSignature("restartPackage", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#setProcessStateSummary(byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        public void SetProcessStateSummary(byte[] arg0)
        {
            IExecuteWithSignature("setProcessStateSummary", "([B)V", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/app/ActivityManager.html#setWatchHeapLimit(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        public void SetWatchHeapLimit(long arg0)
        {
            IExecuteWithSignature("setWatchHeapLimit", "(J)V", arg0);
        }

        #endregion

        #region Nested classes
        #region AppTask implementation
        public partial class AppTask
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.AppTask.html#getTaskInfo()"/>
            /// </summary>
            /// <returns><see cref="Android.App.ActivityManager.RecentTaskInfo"/></returns>
            public Android.App.ActivityManager.RecentTaskInfo GetTaskInfo()
            {
                return IExecuteWithSignature<Android.App.ActivityManager.RecentTaskInfo>("getTaskInfo", "()Landroid/app/ActivityManager$RecentTaskInfo;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.AppTask.html#finishAndRemoveTask()"/>
            /// </summary>
            public void FinishAndRemoveTask()
            {
                IExecuteWithSignature("finishAndRemoveTask", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.AppTask.html#moveToFront()"/>
            /// </summary>
            public void MoveToFront()
            {
                IExecuteWithSignature("moveToFront", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.AppTask.html#setExcludeFromRecents(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            public void SetExcludeFromRecents(bool arg0)
            {
                IExecuteWithSignature("setExcludeFromRecents", "(Z)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.AppTask.html#startActivity(android.content.Context,android.content.Intent,android.os.Bundle)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.Context"/></param>
            /// <param name="arg1"><see cref="Android.Content.Intent"/></param>
            /// <param name="arg2"><see cref="Android.Os.Bundle"/></param>
            public void StartActivity(Android.Content.Context arg0, Android.Content.Intent arg1, Android.Os.Bundle arg2)
            {
                IExecuteWithSignature("startActivity", "(Landroid/content/Context;Landroid/content/Intent;Landroid/os/Bundle;)V", arg0, arg1, arg2);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region MemoryInfo implementation
        public partial class MemoryInfo
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.MemoryInfo.html#lowMemory"/>
            /// </summary>
            public bool lowMemory { get { return IGetField<bool>("lowMemory"); } set { ISetField("lowMemory", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.MemoryInfo.html#advertisedMem"/>
            /// </summary>
            public long advertisedMem { get { return IGetField<long>("advertisedMem"); } set { ISetField("advertisedMem", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.MemoryInfo.html#availMem"/>
            /// </summary>
            public long availMem { get { return IGetField<long>("availMem"); } set { ISetField("availMem", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.MemoryInfo.html#threshold"/>
            /// </summary>
            public long threshold { get { return IGetField<long>("threshold"); } set { ISetField("threshold", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.MemoryInfo.html#totalMem"/>
            /// </summary>
            public long totalMem { get { return IGetField<long>("totalMem"); } set { ISetField("totalMem", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.MemoryInfo.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.MemoryInfo.html#describeContents()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int DescribeContents()
            {
                return IExecuteWithSignature<int>("describeContents", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.MemoryInfo.html#readFromParcel(android.os.Parcel)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            public void ReadFromParcel(Android.Os.Parcel arg0)
            {
                IExecuteWithSignature("readFromParcel", "(Landroid/os/Parcel;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.MemoryInfo.html#writeToParcel(android.os.Parcel,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
            {
                IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ProcessErrorStateInfo implementation
        public partial class ProcessErrorStateInfo
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.ProcessErrorStateInfo.html#crashData"/>
            /// </summary>
            public byte[] crashData { get { return IGetFieldArray<byte>("crashData"); } set { ISetField("crashData", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.ProcessErrorStateInfo.html#condition"/>
            /// </summary>
            public int condition { get { return IGetField<int>("condition"); } set { ISetField("condition", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.ProcessErrorStateInfo.html#pid"/>
            /// </summary>
            public int pid { get { return IGetField<int>("pid"); } set { ISetField("pid", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.ProcessErrorStateInfo.html#uid"/>
            /// </summary>
            public int uid { get { return IGetField<int>("uid"); } set { ISetField("uid", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.ProcessErrorStateInfo.html#longMsg"/>
            /// </summary>
            public Java.Lang.String longMsg { get { return IGetField<Java.Lang.String>("longMsg"); } set { ISetField("longMsg", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.ProcessErrorStateInfo.html#processName"/>
            /// </summary>
            public Java.Lang.String processName { get { return IGetField<Java.Lang.String>("processName"); } set { ISetField("processName", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.ProcessErrorStateInfo.html#shortMsg"/>
            /// </summary>
            public Java.Lang.String shortMsg { get { return IGetField<Java.Lang.String>("shortMsg"); } set { ISetField("shortMsg", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.ProcessErrorStateInfo.html#stackTrace"/>
            /// </summary>
            public Java.Lang.String stackTrace { get { return IGetField<Java.Lang.String>("stackTrace"); } set { ISetField("stackTrace", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.ProcessErrorStateInfo.html#tag"/>
            /// </summary>
            public Java.Lang.String tag { get { return IGetField<Java.Lang.String>("tag"); } set { ISetField("tag", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.ProcessErrorStateInfo.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.ProcessErrorStateInfo.html#CRASHED"/>
            /// </summary>
            public static int CRASHED { get { if (!_CRASHEDReady) { _CRASHEDContent = SGetField<int>(LocalBridgeClazz, "CRASHED"); _CRASHEDReady = true; } return _CRASHEDContent; } }
            private static int _CRASHEDContent = default;
            private static bool _CRASHEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.ProcessErrorStateInfo.html#NO_ERROR"/>
            /// </summary>
            public static int NO_ERROR { get { if (!_NO_ERRORReady) { _NO_ERRORContent = SGetField<int>(LocalBridgeClazz, "NO_ERROR"); _NO_ERRORReady = true; } return _NO_ERRORContent; } }
            private static int _NO_ERRORContent = default;
            private static bool _NO_ERRORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.ProcessErrorStateInfo.html#NOT_RESPONDING"/>
            /// </summary>
            public static int NOT_RESPONDING { get { if (!_NOT_RESPONDINGReady) { _NOT_RESPONDINGContent = SGetField<int>(LocalBridgeClazz, "NOT_RESPONDING"); _NOT_RESPONDINGReady = true; } return _NOT_RESPONDINGContent; } }
            private static int _NOT_RESPONDINGContent = default;
            private static bool _NOT_RESPONDINGReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.ProcessErrorStateInfo.html#describeContents()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int DescribeContents()
            {
                return IExecuteWithSignature<int>("describeContents", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.ProcessErrorStateInfo.html#readFromParcel(android.os.Parcel)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            public void ReadFromParcel(Android.Os.Parcel arg0)
            {
                IExecuteWithSignature("readFromParcel", "(Landroid/os/Parcel;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.ProcessErrorStateInfo.html#writeToParcel(android.os.Parcel,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
            {
                IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region RecentTaskInfo implementation
        public partial class RecentTaskInfo
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Android.App.ActivityManager.RecentTaskInfo"/> to <see cref="Android.Os.Parcelable"/>
            /// </summary>
            public static implicit operator Android.Os.Parcelable(Android.App.ActivityManager.RecentTaskInfo t) => t.Cast<Android.Os.Parcelable>();

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RecentTaskInfo.html#affiliatedTaskId"/>
            /// </summary>
            [global::System.Obsolete()]
            public int affiliatedTaskId { get { return IGetField<int>("affiliatedTaskId"); } set { ISetField("affiliatedTaskId", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RecentTaskInfo.html#id"/>
            /// </summary>
            [global::System.Obsolete()]
            public int id { get { return IGetField<int>("id"); } set { ISetField("id", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RecentTaskInfo.html#persistentId"/>
            /// </summary>
            [global::System.Obsolete()]
            public int persistentId { get { return IGetField<int>("persistentId"); } set { ISetField("persistentId", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RecentTaskInfo.html#description"/>
            /// </summary>
            [global::System.Obsolete()]
            public Java.Lang.CharSequence description { get { return IGetField<Java.Lang.CharSequence>("description"); } set { ISetField("description", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RecentTaskInfo.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RecentTaskInfo.html#describeContents()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int DescribeContents()
            {
                return IExecuteWithSignature<int>("describeContents", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RecentTaskInfo.html#readFromParcel(android.os.Parcel)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            public void ReadFromParcel(Android.Os.Parcel arg0)
            {
                IExecuteWithSignature("readFromParcel", "(Landroid/os/Parcel;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RecentTaskInfo.html#writeToParcel(android.os.Parcel,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
            {
                IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region RunningAppProcessInfo implementation
        public partial class RunningAppProcessInfo
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningAppProcessInfo.html#%3Cinit%3E(java.lang.String,int,java.lang.String[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="Java.Lang.String"/></param>
            public RunningAppProcessInfo(Java.Lang.String arg0, int arg1, Java.Lang.String[] arg2)
                : base(arg0, arg1, arg2)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningAppProcessInfo.html#importanceReasonComponent"/>
            /// </summary>
            public Android.Content.ComponentName importanceReasonComponent { get { return IGetField<Android.Content.ComponentName>("importanceReasonComponent"); } set { ISetField("importanceReasonComponent", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningAppProcessInfo.html#importance"/>
            /// </summary>
            public int importance { get { return IGetField<int>("importance"); } set { ISetField("importance", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningAppProcessInfo.html#importanceReasonCode"/>
            /// </summary>
            public int importanceReasonCode { get { return IGetField<int>("importanceReasonCode"); } set { ISetField("importanceReasonCode", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningAppProcessInfo.html#importanceReasonPid"/>
            /// </summary>
            public int importanceReasonPid { get { return IGetField<int>("importanceReasonPid"); } set { ISetField("importanceReasonPid", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningAppProcessInfo.html#lastTrimLevel"/>
            /// </summary>
            public int lastTrimLevel { get { return IGetField<int>("lastTrimLevel"); } set { ISetField("lastTrimLevel", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningAppProcessInfo.html#lru"/>
            /// </summary>
            public int lru { get { return IGetField<int>("lru"); } set { ISetField("lru", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningAppProcessInfo.html#pid"/>
            /// </summary>
            public int pid { get { return IGetField<int>("pid"); } set { ISetField("pid", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningAppProcessInfo.html#uid"/>
            /// </summary>
            public int uid { get { return IGetField<int>("uid"); } set { ISetField("uid", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningAppProcessInfo.html#processName"/>
            /// </summary>
            public Java.Lang.String processName { get { return IGetField<Java.Lang.String>("processName"); } set { ISetField("processName", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningAppProcessInfo.html#pkgList"/>
            /// </summary>
            public Java.Lang.String[] pkgList { get { return IGetFieldArray<Java.Lang.String>("pkgList"); } set { ISetField("pkgList", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningAppProcessInfo.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningAppProcessInfo.html#IMPORTANCE_BACKGROUND"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int IMPORTANCE_BACKGROUND { get { if (!_IMPORTANCE_BACKGROUNDReady) { _IMPORTANCE_BACKGROUNDContent = SGetField<int>(LocalBridgeClazz, "IMPORTANCE_BACKGROUND"); _IMPORTANCE_BACKGROUNDReady = true; } return _IMPORTANCE_BACKGROUNDContent; } }
            private static int _IMPORTANCE_BACKGROUNDContent = default;
            private static bool _IMPORTANCE_BACKGROUNDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningAppProcessInfo.html#IMPORTANCE_CACHED"/>
            /// </summary>
            public static int IMPORTANCE_CACHED { get { if (!_IMPORTANCE_CACHEDReady) { _IMPORTANCE_CACHEDContent = SGetField<int>(LocalBridgeClazz, "IMPORTANCE_CACHED"); _IMPORTANCE_CACHEDReady = true; } return _IMPORTANCE_CACHEDContent; } }
            private static int _IMPORTANCE_CACHEDContent = default;
            private static bool _IMPORTANCE_CACHEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningAppProcessInfo.html#IMPORTANCE_CANT_SAVE_STATE"/>
            /// </summary>
            public static int IMPORTANCE_CANT_SAVE_STATE { get { if (!_IMPORTANCE_CANT_SAVE_STATEReady) { _IMPORTANCE_CANT_SAVE_STATEContent = SGetField<int>(LocalBridgeClazz, "IMPORTANCE_CANT_SAVE_STATE"); _IMPORTANCE_CANT_SAVE_STATEReady = true; } return _IMPORTANCE_CANT_SAVE_STATEContent; } }
            private static int _IMPORTANCE_CANT_SAVE_STATEContent = default;
            private static bool _IMPORTANCE_CANT_SAVE_STATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningAppProcessInfo.html#IMPORTANCE_EMPTY"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int IMPORTANCE_EMPTY { get { if (!_IMPORTANCE_EMPTYReady) { _IMPORTANCE_EMPTYContent = SGetField<int>(LocalBridgeClazz, "IMPORTANCE_EMPTY"); _IMPORTANCE_EMPTYReady = true; } return _IMPORTANCE_EMPTYContent; } }
            private static int _IMPORTANCE_EMPTYContent = default;
            private static bool _IMPORTANCE_EMPTYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningAppProcessInfo.html#IMPORTANCE_FOREGROUND"/>
            /// </summary>
            public static int IMPORTANCE_FOREGROUND { get { if (!_IMPORTANCE_FOREGROUNDReady) { _IMPORTANCE_FOREGROUNDContent = SGetField<int>(LocalBridgeClazz, "IMPORTANCE_FOREGROUND"); _IMPORTANCE_FOREGROUNDReady = true; } return _IMPORTANCE_FOREGROUNDContent; } }
            private static int _IMPORTANCE_FOREGROUNDContent = default;
            private static bool _IMPORTANCE_FOREGROUNDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningAppProcessInfo.html#IMPORTANCE_FOREGROUND_SERVICE"/>
            /// </summary>
            public static int IMPORTANCE_FOREGROUND_SERVICE { get { if (!_IMPORTANCE_FOREGROUND_SERVICEReady) { _IMPORTANCE_FOREGROUND_SERVICEContent = SGetField<int>(LocalBridgeClazz, "IMPORTANCE_FOREGROUND_SERVICE"); _IMPORTANCE_FOREGROUND_SERVICEReady = true; } return _IMPORTANCE_FOREGROUND_SERVICEContent; } }
            private static int _IMPORTANCE_FOREGROUND_SERVICEContent = default;
            private static bool _IMPORTANCE_FOREGROUND_SERVICEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningAppProcessInfo.html#IMPORTANCE_GONE"/>
            /// </summary>
            public static int IMPORTANCE_GONE { get { if (!_IMPORTANCE_GONEReady) { _IMPORTANCE_GONEContent = SGetField<int>(LocalBridgeClazz, "IMPORTANCE_GONE"); _IMPORTANCE_GONEReady = true; } return _IMPORTANCE_GONEContent; } }
            private static int _IMPORTANCE_GONEContent = default;
            private static bool _IMPORTANCE_GONEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningAppProcessInfo.html#IMPORTANCE_PERCEPTIBLE"/>
            /// </summary>
            public static int IMPORTANCE_PERCEPTIBLE { get { if (!_IMPORTANCE_PERCEPTIBLEReady) { _IMPORTANCE_PERCEPTIBLEContent = SGetField<int>(LocalBridgeClazz, "IMPORTANCE_PERCEPTIBLE"); _IMPORTANCE_PERCEPTIBLEReady = true; } return _IMPORTANCE_PERCEPTIBLEContent; } }
            private static int _IMPORTANCE_PERCEPTIBLEContent = default;
            private static bool _IMPORTANCE_PERCEPTIBLEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningAppProcessInfo.html#IMPORTANCE_PERCEPTIBLE_PRE_26"/>
            /// </summary>
            public static int IMPORTANCE_PERCEPTIBLE_PRE_26 { get { if (!_IMPORTANCE_PERCEPTIBLE_PRE_26Ready) { _IMPORTANCE_PERCEPTIBLE_PRE_26Content = SGetField<int>(LocalBridgeClazz, "IMPORTANCE_PERCEPTIBLE_PRE_26"); _IMPORTANCE_PERCEPTIBLE_PRE_26Ready = true; } return _IMPORTANCE_PERCEPTIBLE_PRE_26Content; } }
            private static int _IMPORTANCE_PERCEPTIBLE_PRE_26Content = default;
            private static bool _IMPORTANCE_PERCEPTIBLE_PRE_26Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningAppProcessInfo.html#IMPORTANCE_SERVICE"/>
            /// </summary>
            public static int IMPORTANCE_SERVICE { get { if (!_IMPORTANCE_SERVICEReady) { _IMPORTANCE_SERVICEContent = SGetField<int>(LocalBridgeClazz, "IMPORTANCE_SERVICE"); _IMPORTANCE_SERVICEReady = true; } return _IMPORTANCE_SERVICEContent; } }
            private static int _IMPORTANCE_SERVICEContent = default;
            private static bool _IMPORTANCE_SERVICEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningAppProcessInfo.html#IMPORTANCE_TOP_SLEEPING"/>
            /// </summary>
            public static int IMPORTANCE_TOP_SLEEPING { get { if (!_IMPORTANCE_TOP_SLEEPINGReady) { _IMPORTANCE_TOP_SLEEPINGContent = SGetField<int>(LocalBridgeClazz, "IMPORTANCE_TOP_SLEEPING"); _IMPORTANCE_TOP_SLEEPINGReady = true; } return _IMPORTANCE_TOP_SLEEPINGContent; } }
            private static int _IMPORTANCE_TOP_SLEEPINGContent = default;
            private static bool _IMPORTANCE_TOP_SLEEPINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningAppProcessInfo.html#IMPORTANCE_TOP_SLEEPING_PRE_28"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int IMPORTANCE_TOP_SLEEPING_PRE_28 { get { if (!_IMPORTANCE_TOP_SLEEPING_PRE_28Ready) { _IMPORTANCE_TOP_SLEEPING_PRE_28Content = SGetField<int>(LocalBridgeClazz, "IMPORTANCE_TOP_SLEEPING_PRE_28"); _IMPORTANCE_TOP_SLEEPING_PRE_28Ready = true; } return _IMPORTANCE_TOP_SLEEPING_PRE_28Content; } }
            private static int _IMPORTANCE_TOP_SLEEPING_PRE_28Content = default;
            private static bool _IMPORTANCE_TOP_SLEEPING_PRE_28Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningAppProcessInfo.html#IMPORTANCE_VISIBLE"/>
            /// </summary>
            public static int IMPORTANCE_VISIBLE { get { if (!_IMPORTANCE_VISIBLEReady) { _IMPORTANCE_VISIBLEContent = SGetField<int>(LocalBridgeClazz, "IMPORTANCE_VISIBLE"); _IMPORTANCE_VISIBLEReady = true; } return _IMPORTANCE_VISIBLEContent; } }
            private static int _IMPORTANCE_VISIBLEContent = default;
            private static bool _IMPORTANCE_VISIBLEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningAppProcessInfo.html#REASON_PROVIDER_IN_USE"/>
            /// </summary>
            public static int REASON_PROVIDER_IN_USE { get { if (!_REASON_PROVIDER_IN_USEReady) { _REASON_PROVIDER_IN_USEContent = SGetField<int>(LocalBridgeClazz, "REASON_PROVIDER_IN_USE"); _REASON_PROVIDER_IN_USEReady = true; } return _REASON_PROVIDER_IN_USEContent; } }
            private static int _REASON_PROVIDER_IN_USEContent = default;
            private static bool _REASON_PROVIDER_IN_USEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningAppProcessInfo.html#REASON_SERVICE_IN_USE"/>
            /// </summary>
            public static int REASON_SERVICE_IN_USE { get { if (!_REASON_SERVICE_IN_USEReady) { _REASON_SERVICE_IN_USEContent = SGetField<int>(LocalBridgeClazz, "REASON_SERVICE_IN_USE"); _REASON_SERVICE_IN_USEReady = true; } return _REASON_SERVICE_IN_USEContent; } }
            private static int _REASON_SERVICE_IN_USEContent = default;
            private static bool _REASON_SERVICE_IN_USEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningAppProcessInfo.html#REASON_UNKNOWN"/>
            /// </summary>
            public static int REASON_UNKNOWN { get { if (!_REASON_UNKNOWNReady) { _REASON_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "REASON_UNKNOWN"); _REASON_UNKNOWNReady = true; } return _REASON_UNKNOWNContent; } }
            private static int _REASON_UNKNOWNContent = default;
            private static bool _REASON_UNKNOWNReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningAppProcessInfo.html#describeContents()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int DescribeContents()
            {
                return IExecuteWithSignature<int>("describeContents", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningAppProcessInfo.html#readFromParcel(android.os.Parcel)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            public void ReadFromParcel(Android.Os.Parcel arg0)
            {
                IExecuteWithSignature("readFromParcel", "(Landroid/os/Parcel;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningAppProcessInfo.html#writeToParcel(android.os.Parcel,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
            {
                IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region RunningServiceInfo implementation
        public partial class RunningServiceInfo
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningServiceInfo.html#service"/>
            /// </summary>
            public Android.Content.ComponentName service { get { return IGetField<Android.Content.ComponentName>("service"); } set { ISetField("service", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningServiceInfo.html#foreground"/>
            /// </summary>
            public bool foreground { get { return IGetField<bool>("foreground"); } set { ISetField("foreground", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningServiceInfo.html#started"/>
            /// </summary>
            public bool started { get { return IGetField<bool>("started"); } set { ISetField("started", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningServiceInfo.html#clientCount"/>
            /// </summary>
            public int clientCount { get { return IGetField<int>("clientCount"); } set { ISetField("clientCount", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningServiceInfo.html#clientLabel"/>
            /// </summary>
            public int clientLabel { get { return IGetField<int>("clientLabel"); } set { ISetField("clientLabel", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningServiceInfo.html#crashCount"/>
            /// </summary>
            public int crashCount { get { return IGetField<int>("crashCount"); } set { ISetField("crashCount", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningServiceInfo.html#flags"/>
            /// </summary>
            public int flags { get { return IGetField<int>("flags"); } set { ISetField("flags", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningServiceInfo.html#pid"/>
            /// </summary>
            public int pid { get { return IGetField<int>("pid"); } set { ISetField("pid", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningServiceInfo.html#uid"/>
            /// </summary>
            public int uid { get { return IGetField<int>("uid"); } set { ISetField("uid", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningServiceInfo.html#clientPackage"/>
            /// </summary>
            public Java.Lang.String clientPackage { get { return IGetField<Java.Lang.String>("clientPackage"); } set { ISetField("clientPackage", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningServiceInfo.html#process"/>
            /// </summary>
            public Java.Lang.String process { get { return IGetField<Java.Lang.String>("process"); } set { ISetField("process", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningServiceInfo.html#activeSince"/>
            /// </summary>
            public long activeSince { get { return IGetField<long>("activeSince"); } set { ISetField("activeSince", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningServiceInfo.html#lastActivityTime"/>
            /// </summary>
            public long lastActivityTime { get { return IGetField<long>("lastActivityTime"); } set { ISetField("lastActivityTime", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningServiceInfo.html#restarting"/>
            /// </summary>
            public long restarting { get { return IGetField<long>("restarting"); } set { ISetField("restarting", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningServiceInfo.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningServiceInfo.html#FLAG_FOREGROUND"/>
            /// </summary>
            public static int FLAG_FOREGROUND { get { if (!_FLAG_FOREGROUNDReady) { _FLAG_FOREGROUNDContent = SGetField<int>(LocalBridgeClazz, "FLAG_FOREGROUND"); _FLAG_FOREGROUNDReady = true; } return _FLAG_FOREGROUNDContent; } }
            private static int _FLAG_FOREGROUNDContent = default;
            private static bool _FLAG_FOREGROUNDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningServiceInfo.html#FLAG_PERSISTENT_PROCESS"/>
            /// </summary>
            public static int FLAG_PERSISTENT_PROCESS { get { if (!_FLAG_PERSISTENT_PROCESSReady) { _FLAG_PERSISTENT_PROCESSContent = SGetField<int>(LocalBridgeClazz, "FLAG_PERSISTENT_PROCESS"); _FLAG_PERSISTENT_PROCESSReady = true; } return _FLAG_PERSISTENT_PROCESSContent; } }
            private static int _FLAG_PERSISTENT_PROCESSContent = default;
            private static bool _FLAG_PERSISTENT_PROCESSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningServiceInfo.html#FLAG_STARTED"/>
            /// </summary>
            public static int FLAG_STARTED { get { if (!_FLAG_STARTEDReady) { _FLAG_STARTEDContent = SGetField<int>(LocalBridgeClazz, "FLAG_STARTED"); _FLAG_STARTEDReady = true; } return _FLAG_STARTEDContent; } }
            private static int _FLAG_STARTEDContent = default;
            private static bool _FLAG_STARTEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningServiceInfo.html#FLAG_SYSTEM_PROCESS"/>
            /// </summary>
            public static int FLAG_SYSTEM_PROCESS { get { if (!_FLAG_SYSTEM_PROCESSReady) { _FLAG_SYSTEM_PROCESSContent = SGetField<int>(LocalBridgeClazz, "FLAG_SYSTEM_PROCESS"); _FLAG_SYSTEM_PROCESSReady = true; } return _FLAG_SYSTEM_PROCESSContent; } }
            private static int _FLAG_SYSTEM_PROCESSContent = default;
            private static bool _FLAG_SYSTEM_PROCESSReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningServiceInfo.html#describeContents()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int DescribeContents()
            {
                return IExecuteWithSignature<int>("describeContents", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningServiceInfo.html#readFromParcel(android.os.Parcel)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            public void ReadFromParcel(Android.Os.Parcel arg0)
            {
                IExecuteWithSignature("readFromParcel", "(Landroid/os/Parcel;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningServiceInfo.html#writeToParcel(android.os.Parcel,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
            {
                IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region RunningTaskInfo implementation
        public partial class RunningTaskInfo
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Android.App.ActivityManager.RunningTaskInfo"/> to <see cref="Android.Os.Parcelable"/>
            /// </summary>
            public static implicit operator Android.Os.Parcelable(Android.App.ActivityManager.RunningTaskInfo t) => t.Cast<Android.Os.Parcelable>();

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningTaskInfo.html#thumbnail"/>
            /// </summary>
            [global::System.Obsolete()]
            public Android.Graphics.Bitmap thumbnail { get { return IGetField<Android.Graphics.Bitmap>("thumbnail"); } set { ISetField("thumbnail", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningTaskInfo.html#id"/>
            /// </summary>
            [global::System.Obsolete()]
            public int id { get { return IGetField<int>("id"); } set { ISetField("id", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningTaskInfo.html#numRunning"/>
            /// </summary>
            [global::System.Obsolete()]
            public int numRunning { get { return IGetField<int>("numRunning"); } set { ISetField("numRunning", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningTaskInfo.html#description"/>
            /// </summary>
            [global::System.Obsolete()]
            public Java.Lang.CharSequence description { get { return IGetField<Java.Lang.CharSequence>("description"); } set { ISetField("description", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningTaskInfo.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningTaskInfo.html#describeContents()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int DescribeContents()
            {
                return IExecuteWithSignature<int>("describeContents", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningTaskInfo.html#readFromParcel(android.os.Parcel)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            public void ReadFromParcel(Android.Os.Parcel arg0)
            {
                IExecuteWithSignature("readFromParcel", "(Landroid/os/Parcel;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.RunningTaskInfo.html#writeToParcel(android.os.Parcel,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
            {
                IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region TaskDescription implementation
        public partial class TaskDescription
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.TaskDescription.html#%3Cinit%3E(android.app.ActivityManager.TaskDescription)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.App.ActivityManager.TaskDescription"/></param>
            public TaskDescription(Android.App.ActivityManager.TaskDescription arg0)
                : base(arg0)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.TaskDescription.html#%3Cinit%3E(java.lang.String,android.graphics.Bitmap,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Android.Graphics.Bitmap"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            [global::System.Obsolete()]
            public TaskDescription(Java.Lang.String arg0, Android.Graphics.Bitmap arg1, int arg2)
                : base(arg0, arg1, arg2)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.TaskDescription.html#%3Cinit%3E(java.lang.String,android.graphics.Bitmap)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Android.Graphics.Bitmap"/></param>
            [global::System.Obsolete()]
            public TaskDescription(Java.Lang.String arg0, Android.Graphics.Bitmap arg1)
                : base(arg0, arg1)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.TaskDescription.html#%3Cinit%3E(java.lang.String,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            [global::System.Obsolete()]
            public TaskDescription(Java.Lang.String arg0, int arg1, int arg2)
                : base(arg0, arg1, arg2)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.TaskDescription.html#%3Cinit%3E(java.lang.String,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            [global::System.Obsolete()]
            public TaskDescription(Java.Lang.String arg0, int arg1)
                : base(arg0, arg1)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.TaskDescription.html#%3Cinit%3E(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            [global::System.Obsolete()]
            public TaskDescription(Java.Lang.String arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.TaskDescription.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.TaskDescription.html#getIcon()"/>
            /// </summary>
            /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
            [global::System.Obsolete()]
            public Android.Graphics.Bitmap GetIcon()
            {
                return IExecuteWithSignature<Android.Graphics.Bitmap>("getIcon", "()Landroid/graphics/Bitmap;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.TaskDescription.html#describeContents()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int DescribeContents()
            {
                return IExecuteWithSignature<int>("describeContents", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.TaskDescription.html#getBackgroundColor()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetBackgroundColor()
            {
                return IExecuteWithSignature<int>("getBackgroundColor", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.TaskDescription.html#getNavigationBarColor()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetNavigationBarColor()
            {
                return IExecuteWithSignature<int>("getNavigationBarColor", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.TaskDescription.html#getPrimaryColor()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetPrimaryColor()
            {
                return IExecuteWithSignature<int>("getPrimaryColor", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.TaskDescription.html#getStatusBarColor()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetStatusBarColor()
            {
                return IExecuteWithSignature<int>("getStatusBarColor", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.TaskDescription.html#getLabel()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetLabel()
            {
                return IExecuteWithSignature<Java.Lang.String>("getLabel", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.TaskDescription.html#readFromParcel(android.os.Parcel)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            public void ReadFromParcel(Android.Os.Parcel arg0)
            {
                IExecuteWithSignature("readFromParcel", "(Landroid/os/Parcel;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/app/ActivityManager.TaskDescription.html#writeToParcel(android.os.Parcel,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
            {
                IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
            }

            #endregion

            #region Nested classes
            #region Builder implementation
            public partial class Builder
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields

                #endregion

                #region Static methods

                #endregion

                #region Instance methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/ActivityManager.TaskDescription.Builder.html#build()"/>
                /// </summary>
                /// <returns><see cref="Android.App.ActivityManager.TaskDescription"/></returns>
                public Android.App.ActivityManager.TaskDescription Build()
                {
                    return IExecute<Android.App.ActivityManager.TaskDescription>("build");
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/ActivityManager.TaskDescription.Builder.html#setBackgroundColor(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <returns><see cref="Android.App.ActivityManager.TaskDescription.Builder"/></returns>
                public Android.App.ActivityManager.TaskDescription.Builder SetBackgroundColor(int arg0)
                {
                    return IExecute<Android.App.ActivityManager.TaskDescription.Builder>("setBackgroundColor", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/ActivityManager.TaskDescription.Builder.html#setIcon(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <returns><see cref="Android.App.ActivityManager.TaskDescription.Builder"/></returns>
                public Android.App.ActivityManager.TaskDescription.Builder SetIcon(int arg0)
                {
                    return IExecute<Android.App.ActivityManager.TaskDescription.Builder>("setIcon", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/ActivityManager.TaskDescription.Builder.html#setLabel(java.lang.String)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Java.Lang.String"/></param>
                /// <returns><see cref="Android.App.ActivityManager.TaskDescription.Builder"/></returns>
                public Android.App.ActivityManager.TaskDescription.Builder SetLabel(Java.Lang.String arg0)
                {
                    return IExecute<Android.App.ActivityManager.TaskDescription.Builder>("setLabel", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/ActivityManager.TaskDescription.Builder.html#setNavigationBarColor(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <returns><see cref="Android.App.ActivityManager.TaskDescription.Builder"/></returns>
                public Android.App.ActivityManager.TaskDescription.Builder SetNavigationBarColor(int arg0)
                {
                    return IExecute<Android.App.ActivityManager.TaskDescription.Builder>("setNavigationBarColor", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/ActivityManager.TaskDescription.Builder.html#setPrimaryColor(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <returns><see cref="Android.App.ActivityManager.TaskDescription.Builder"/></returns>
                public Android.App.ActivityManager.TaskDescription.Builder SetPrimaryColor(int arg0)
                {
                    return IExecute<Android.App.ActivityManager.TaskDescription.Builder>("setPrimaryColor", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/app/ActivityManager.TaskDescription.Builder.html#setStatusBarColor(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <returns><see cref="Android.App.ActivityManager.TaskDescription.Builder"/></returns>
                public Android.App.ActivityManager.TaskDescription.Builder SetStatusBarColor(int arg0)
                {
                    return IExecute<Android.App.ActivityManager.TaskDescription.Builder>("setStatusBarColor", arg0);
                }

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

        
            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
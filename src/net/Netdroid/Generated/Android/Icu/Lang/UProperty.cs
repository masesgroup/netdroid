/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Icu.Lang
{
    #region UProperty declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html"/>
    /// </summary>
    public partial class UProperty : MASES.JCOBridge.C2JBridge.JVMBridgeBase<UProperty>
    {
        const string _bridgeClassName = "android.icu.lang.UProperty";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("UProperty class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public UProperty() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("UProperty class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public UProperty(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region NameChoice declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.NameChoice.html"/>
        /// </summary>
        public partial class NameChoice : MASES.JCOBridge.C2JBridge.JVMBridgeBase<NameChoice>
        {
            const string _bridgeClassName = "android.icu.lang.UProperty$NameChoice";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("NameChoice class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public NameChoice() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("NameChoice class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public NameChoice(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region IUProperty
    /// <summary>
    /// .NET interface for TO BE DEFINED FROM USER
    /// </summary>
    public partial interface IUProperty
    {
        #region Instance methods
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion

    #region UProperty implementation
    public partial class UProperty : Android.Icu.Lang.IUProperty
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#AGE"/>
        /// </summary>
        public static int AGE { get { if (!_AGEReady) { _AGEContent = SGetField<int>(LocalBridgeClazz, "AGE"); _AGEReady = true; } return _AGEContent; } }
        private static int _AGEContent = default;
        private static bool _AGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#ALPHABETIC"/>
        /// </summary>
        public static int ALPHABETIC { get { if (!_ALPHABETICReady) { _ALPHABETICContent = SGetField<int>(LocalBridgeClazz, "ALPHABETIC"); _ALPHABETICReady = true; } return _ALPHABETICContent; } }
        private static int _ALPHABETICContent = default;
        private static bool _ALPHABETICReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#ASCII_HEX_DIGIT"/>
        /// </summary>
        public static int ASCII_HEX_DIGIT { get { if (!_ASCII_HEX_DIGITReady) { _ASCII_HEX_DIGITContent = SGetField<int>(LocalBridgeClazz, "ASCII_HEX_DIGIT"); _ASCII_HEX_DIGITReady = true; } return _ASCII_HEX_DIGITContent; } }
        private static int _ASCII_HEX_DIGITContent = default;
        private static bool _ASCII_HEX_DIGITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#BASIC_EMOJI"/>
        /// </summary>
        public static int BASIC_EMOJI { get { if (!_BASIC_EMOJIReady) { _BASIC_EMOJIContent = SGetField<int>(LocalBridgeClazz, "BASIC_EMOJI"); _BASIC_EMOJIReady = true; } return _BASIC_EMOJIContent; } }
        private static int _BASIC_EMOJIContent = default;
        private static bool _BASIC_EMOJIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#BIDI_CLASS"/>
        /// </summary>
        public static int BIDI_CLASS { get { if (!_BIDI_CLASSReady) { _BIDI_CLASSContent = SGetField<int>(LocalBridgeClazz, "BIDI_CLASS"); _BIDI_CLASSReady = true; } return _BIDI_CLASSContent; } }
        private static int _BIDI_CLASSContent = default;
        private static bool _BIDI_CLASSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#BIDI_CONTROL"/>
        /// </summary>
        public static int BIDI_CONTROL { get { if (!_BIDI_CONTROLReady) { _BIDI_CONTROLContent = SGetField<int>(LocalBridgeClazz, "BIDI_CONTROL"); _BIDI_CONTROLReady = true; } return _BIDI_CONTROLContent; } }
        private static int _BIDI_CONTROLContent = default;
        private static bool _BIDI_CONTROLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#BIDI_MIRRORED"/>
        /// </summary>
        public static int BIDI_MIRRORED { get { if (!_BIDI_MIRROREDReady) { _BIDI_MIRROREDContent = SGetField<int>(LocalBridgeClazz, "BIDI_MIRRORED"); _BIDI_MIRROREDReady = true; } return _BIDI_MIRROREDContent; } }
        private static int _BIDI_MIRROREDContent = default;
        private static bool _BIDI_MIRROREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#BIDI_MIRRORING_GLYPH"/>
        /// </summary>
        public static int BIDI_MIRRORING_GLYPH { get { if (!_BIDI_MIRRORING_GLYPHReady) { _BIDI_MIRRORING_GLYPHContent = SGetField<int>(LocalBridgeClazz, "BIDI_MIRRORING_GLYPH"); _BIDI_MIRRORING_GLYPHReady = true; } return _BIDI_MIRRORING_GLYPHContent; } }
        private static int _BIDI_MIRRORING_GLYPHContent = default;
        private static bool _BIDI_MIRRORING_GLYPHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#BIDI_PAIRED_BRACKET"/>
        /// </summary>
        public static int BIDI_PAIRED_BRACKET { get { if (!_BIDI_PAIRED_BRACKETReady) { _BIDI_PAIRED_BRACKETContent = SGetField<int>(LocalBridgeClazz, "BIDI_PAIRED_BRACKET"); _BIDI_PAIRED_BRACKETReady = true; } return _BIDI_PAIRED_BRACKETContent; } }
        private static int _BIDI_PAIRED_BRACKETContent = default;
        private static bool _BIDI_PAIRED_BRACKETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#BIDI_PAIRED_BRACKET_TYPE"/>
        /// </summary>
        public static int BIDI_PAIRED_BRACKET_TYPE { get { if (!_BIDI_PAIRED_BRACKET_TYPEReady) { _BIDI_PAIRED_BRACKET_TYPEContent = SGetField<int>(LocalBridgeClazz, "BIDI_PAIRED_BRACKET_TYPE"); _BIDI_PAIRED_BRACKET_TYPEReady = true; } return _BIDI_PAIRED_BRACKET_TYPEContent; } }
        private static int _BIDI_PAIRED_BRACKET_TYPEContent = default;
        private static bool _BIDI_PAIRED_BRACKET_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#BINARY_START"/>
        /// </summary>
        public static int BINARY_START { get { if (!_BINARY_STARTReady) { _BINARY_STARTContent = SGetField<int>(LocalBridgeClazz, "BINARY_START"); _BINARY_STARTReady = true; } return _BINARY_STARTContent; } }
        private static int _BINARY_STARTContent = default;
        private static bool _BINARY_STARTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#BLOCK"/>
        /// </summary>
        public static int BLOCK { get { if (!_BLOCKReady) { _BLOCKContent = SGetField<int>(LocalBridgeClazz, "BLOCK"); _BLOCKReady = true; } return _BLOCKContent; } }
        private static int _BLOCKContent = default;
        private static bool _BLOCKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#CANONICAL_COMBINING_CLASS"/>
        /// </summary>
        public static int CANONICAL_COMBINING_CLASS { get { if (!_CANONICAL_COMBINING_CLASSReady) { _CANONICAL_COMBINING_CLASSContent = SGetField<int>(LocalBridgeClazz, "CANONICAL_COMBINING_CLASS"); _CANONICAL_COMBINING_CLASSReady = true; } return _CANONICAL_COMBINING_CLASSContent; } }
        private static int _CANONICAL_COMBINING_CLASSContent = default;
        private static bool _CANONICAL_COMBINING_CLASSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#CASE_FOLDING"/>
        /// </summary>
        public static int CASE_FOLDING { get { if (!_CASE_FOLDINGReady) { _CASE_FOLDINGContent = SGetField<int>(LocalBridgeClazz, "CASE_FOLDING"); _CASE_FOLDINGReady = true; } return _CASE_FOLDINGContent; } }
        private static int _CASE_FOLDINGContent = default;
        private static bool _CASE_FOLDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#CASE_IGNORABLE"/>
        /// </summary>
        public static int CASE_IGNORABLE { get { if (!_CASE_IGNORABLEReady) { _CASE_IGNORABLEContent = SGetField<int>(LocalBridgeClazz, "CASE_IGNORABLE"); _CASE_IGNORABLEReady = true; } return _CASE_IGNORABLEContent; } }
        private static int _CASE_IGNORABLEContent = default;
        private static bool _CASE_IGNORABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#CASE_SENSITIVE"/>
        /// </summary>
        public static int CASE_SENSITIVE { get { if (!_CASE_SENSITIVEReady) { _CASE_SENSITIVEContent = SGetField<int>(LocalBridgeClazz, "CASE_SENSITIVE"); _CASE_SENSITIVEReady = true; } return _CASE_SENSITIVEContent; } }
        private static int _CASE_SENSITIVEContent = default;
        private static bool _CASE_SENSITIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#CASED"/>
        /// </summary>
        public static int CASED { get { if (!_CASEDReady) { _CASEDContent = SGetField<int>(LocalBridgeClazz, "CASED"); _CASEDReady = true; } return _CASEDContent; } }
        private static int _CASEDContent = default;
        private static bool _CASEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#CHANGES_WHEN_CASEFOLDED"/>
        /// </summary>
        public static int CHANGES_WHEN_CASEFOLDED { get { if (!_CHANGES_WHEN_CASEFOLDEDReady) { _CHANGES_WHEN_CASEFOLDEDContent = SGetField<int>(LocalBridgeClazz, "CHANGES_WHEN_CASEFOLDED"); _CHANGES_WHEN_CASEFOLDEDReady = true; } return _CHANGES_WHEN_CASEFOLDEDContent; } }
        private static int _CHANGES_WHEN_CASEFOLDEDContent = default;
        private static bool _CHANGES_WHEN_CASEFOLDEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#CHANGES_WHEN_CASEMAPPED"/>
        /// </summary>
        public static int CHANGES_WHEN_CASEMAPPED { get { if (!_CHANGES_WHEN_CASEMAPPEDReady) { _CHANGES_WHEN_CASEMAPPEDContent = SGetField<int>(LocalBridgeClazz, "CHANGES_WHEN_CASEMAPPED"); _CHANGES_WHEN_CASEMAPPEDReady = true; } return _CHANGES_WHEN_CASEMAPPEDContent; } }
        private static int _CHANGES_WHEN_CASEMAPPEDContent = default;
        private static bool _CHANGES_WHEN_CASEMAPPEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#CHANGES_WHEN_LOWERCASED"/>
        /// </summary>
        public static int CHANGES_WHEN_LOWERCASED { get { if (!_CHANGES_WHEN_LOWERCASEDReady) { _CHANGES_WHEN_LOWERCASEDContent = SGetField<int>(LocalBridgeClazz, "CHANGES_WHEN_LOWERCASED"); _CHANGES_WHEN_LOWERCASEDReady = true; } return _CHANGES_WHEN_LOWERCASEDContent; } }
        private static int _CHANGES_WHEN_LOWERCASEDContent = default;
        private static bool _CHANGES_WHEN_LOWERCASEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#CHANGES_WHEN_NFKC_CASEFOLDED"/>
        /// </summary>
        public static int CHANGES_WHEN_NFKC_CASEFOLDED { get { if (!_CHANGES_WHEN_NFKC_CASEFOLDEDReady) { _CHANGES_WHEN_NFKC_CASEFOLDEDContent = SGetField<int>(LocalBridgeClazz, "CHANGES_WHEN_NFKC_CASEFOLDED"); _CHANGES_WHEN_NFKC_CASEFOLDEDReady = true; } return _CHANGES_WHEN_NFKC_CASEFOLDEDContent; } }
        private static int _CHANGES_WHEN_NFKC_CASEFOLDEDContent = default;
        private static bool _CHANGES_WHEN_NFKC_CASEFOLDEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#CHANGES_WHEN_TITLECASED"/>
        /// </summary>
        public static int CHANGES_WHEN_TITLECASED { get { if (!_CHANGES_WHEN_TITLECASEDReady) { _CHANGES_WHEN_TITLECASEDContent = SGetField<int>(LocalBridgeClazz, "CHANGES_WHEN_TITLECASED"); _CHANGES_WHEN_TITLECASEDReady = true; } return _CHANGES_WHEN_TITLECASEDContent; } }
        private static int _CHANGES_WHEN_TITLECASEDContent = default;
        private static bool _CHANGES_WHEN_TITLECASEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#CHANGES_WHEN_UPPERCASED"/>
        /// </summary>
        public static int CHANGES_WHEN_UPPERCASED { get { if (!_CHANGES_WHEN_UPPERCASEDReady) { _CHANGES_WHEN_UPPERCASEDContent = SGetField<int>(LocalBridgeClazz, "CHANGES_WHEN_UPPERCASED"); _CHANGES_WHEN_UPPERCASEDReady = true; } return _CHANGES_WHEN_UPPERCASEDContent; } }
        private static int _CHANGES_WHEN_UPPERCASEDContent = default;
        private static bool _CHANGES_WHEN_UPPERCASEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#DASH"/>
        /// </summary>
        public static int DASH { get { if (!_DASHReady) { _DASHContent = SGetField<int>(LocalBridgeClazz, "DASH"); _DASHReady = true; } return _DASHContent; } }
        private static int _DASHContent = default;
        private static bool _DASHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#DECOMPOSITION_TYPE"/>
        /// </summary>
        public static int DECOMPOSITION_TYPE { get { if (!_DECOMPOSITION_TYPEReady) { _DECOMPOSITION_TYPEContent = SGetField<int>(LocalBridgeClazz, "DECOMPOSITION_TYPE"); _DECOMPOSITION_TYPEReady = true; } return _DECOMPOSITION_TYPEContent; } }
        private static int _DECOMPOSITION_TYPEContent = default;
        private static bool _DECOMPOSITION_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#DEFAULT_IGNORABLE_CODE_POINT"/>
        /// </summary>
        public static int DEFAULT_IGNORABLE_CODE_POINT { get { if (!_DEFAULT_IGNORABLE_CODE_POINTReady) { _DEFAULT_IGNORABLE_CODE_POINTContent = SGetField<int>(LocalBridgeClazz, "DEFAULT_IGNORABLE_CODE_POINT"); _DEFAULT_IGNORABLE_CODE_POINTReady = true; } return _DEFAULT_IGNORABLE_CODE_POINTContent; } }
        private static int _DEFAULT_IGNORABLE_CODE_POINTContent = default;
        private static bool _DEFAULT_IGNORABLE_CODE_POINTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#DEPRECATED"/>
        /// </summary>
        public static int DEPRECATED { get { if (!_DEPRECATEDReady) { _DEPRECATEDContent = SGetField<int>(LocalBridgeClazz, "DEPRECATED"); _DEPRECATEDReady = true; } return _DEPRECATEDContent; } }
        private static int _DEPRECATEDContent = default;
        private static bool _DEPRECATEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#DIACRITIC"/>
        /// </summary>
        public static int DIACRITIC { get { if (!_DIACRITICReady) { _DIACRITICContent = SGetField<int>(LocalBridgeClazz, "DIACRITIC"); _DIACRITICReady = true; } return _DIACRITICContent; } }
        private static int _DIACRITICContent = default;
        private static bool _DIACRITICReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#DOUBLE_START"/>
        /// </summary>
        public static int DOUBLE_START { get { if (!_DOUBLE_STARTReady) { _DOUBLE_STARTContent = SGetField<int>(LocalBridgeClazz, "DOUBLE_START"); _DOUBLE_STARTReady = true; } return _DOUBLE_STARTContent; } }
        private static int _DOUBLE_STARTContent = default;
        private static bool _DOUBLE_STARTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#EAST_ASIAN_WIDTH"/>
        /// </summary>
        public static int EAST_ASIAN_WIDTH { get { if (!_EAST_ASIAN_WIDTHReady) { _EAST_ASIAN_WIDTHContent = SGetField<int>(LocalBridgeClazz, "EAST_ASIAN_WIDTH"); _EAST_ASIAN_WIDTHReady = true; } return _EAST_ASIAN_WIDTHContent; } }
        private static int _EAST_ASIAN_WIDTHContent = default;
        private static bool _EAST_ASIAN_WIDTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#EMOJI"/>
        /// </summary>
        public static int EMOJI { get { if (!_EMOJIReady) { _EMOJIContent = SGetField<int>(LocalBridgeClazz, "EMOJI"); _EMOJIReady = true; } return _EMOJIContent; } }
        private static int _EMOJIContent = default;
        private static bool _EMOJIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#EMOJI_COMPONENT"/>
        /// </summary>
        public static int EMOJI_COMPONENT { get { if (!_EMOJI_COMPONENTReady) { _EMOJI_COMPONENTContent = SGetField<int>(LocalBridgeClazz, "EMOJI_COMPONENT"); _EMOJI_COMPONENTReady = true; } return _EMOJI_COMPONENTContent; } }
        private static int _EMOJI_COMPONENTContent = default;
        private static bool _EMOJI_COMPONENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#EMOJI_KEYCAP_SEQUENCE"/>
        /// </summary>
        public static int EMOJI_KEYCAP_SEQUENCE { get { if (!_EMOJI_KEYCAP_SEQUENCEReady) { _EMOJI_KEYCAP_SEQUENCEContent = SGetField<int>(LocalBridgeClazz, "EMOJI_KEYCAP_SEQUENCE"); _EMOJI_KEYCAP_SEQUENCEReady = true; } return _EMOJI_KEYCAP_SEQUENCEContent; } }
        private static int _EMOJI_KEYCAP_SEQUENCEContent = default;
        private static bool _EMOJI_KEYCAP_SEQUENCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#EMOJI_MODIFIER"/>
        /// </summary>
        public static int EMOJI_MODIFIER { get { if (!_EMOJI_MODIFIERReady) { _EMOJI_MODIFIERContent = SGetField<int>(LocalBridgeClazz, "EMOJI_MODIFIER"); _EMOJI_MODIFIERReady = true; } return _EMOJI_MODIFIERContent; } }
        private static int _EMOJI_MODIFIERContent = default;
        private static bool _EMOJI_MODIFIERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#EMOJI_MODIFIER_BASE"/>
        /// </summary>
        public static int EMOJI_MODIFIER_BASE { get { if (!_EMOJI_MODIFIER_BASEReady) { _EMOJI_MODIFIER_BASEContent = SGetField<int>(LocalBridgeClazz, "EMOJI_MODIFIER_BASE"); _EMOJI_MODIFIER_BASEReady = true; } return _EMOJI_MODIFIER_BASEContent; } }
        private static int _EMOJI_MODIFIER_BASEContent = default;
        private static bool _EMOJI_MODIFIER_BASEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#EMOJI_PRESENTATION"/>
        /// </summary>
        public static int EMOJI_PRESENTATION { get { if (!_EMOJI_PRESENTATIONReady) { _EMOJI_PRESENTATIONContent = SGetField<int>(LocalBridgeClazz, "EMOJI_PRESENTATION"); _EMOJI_PRESENTATIONReady = true; } return _EMOJI_PRESENTATIONContent; } }
        private static int _EMOJI_PRESENTATIONContent = default;
        private static bool _EMOJI_PRESENTATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#EXTENDED_PICTOGRAPHIC"/>
        /// </summary>
        public static int EXTENDED_PICTOGRAPHIC { get { if (!_EXTENDED_PICTOGRAPHICReady) { _EXTENDED_PICTOGRAPHICContent = SGetField<int>(LocalBridgeClazz, "EXTENDED_PICTOGRAPHIC"); _EXTENDED_PICTOGRAPHICReady = true; } return _EXTENDED_PICTOGRAPHICContent; } }
        private static int _EXTENDED_PICTOGRAPHICContent = default;
        private static bool _EXTENDED_PICTOGRAPHICReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#EXTENDER"/>
        /// </summary>
        public static int EXTENDER { get { if (!_EXTENDERReady) { _EXTENDERContent = SGetField<int>(LocalBridgeClazz, "EXTENDER"); _EXTENDERReady = true; } return _EXTENDERContent; } }
        private static int _EXTENDERContent = default;
        private static bool _EXTENDERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#FULL_COMPOSITION_EXCLUSION"/>
        /// </summary>
        public static int FULL_COMPOSITION_EXCLUSION { get { if (!_FULL_COMPOSITION_EXCLUSIONReady) { _FULL_COMPOSITION_EXCLUSIONContent = SGetField<int>(LocalBridgeClazz, "FULL_COMPOSITION_EXCLUSION"); _FULL_COMPOSITION_EXCLUSIONReady = true; } return _FULL_COMPOSITION_EXCLUSIONContent; } }
        private static int _FULL_COMPOSITION_EXCLUSIONContent = default;
        private static bool _FULL_COMPOSITION_EXCLUSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#GENERAL_CATEGORY"/>
        /// </summary>
        public static int GENERAL_CATEGORY { get { if (!_GENERAL_CATEGORYReady) { _GENERAL_CATEGORYContent = SGetField<int>(LocalBridgeClazz, "GENERAL_CATEGORY"); _GENERAL_CATEGORYReady = true; } return _GENERAL_CATEGORYContent; } }
        private static int _GENERAL_CATEGORYContent = default;
        private static bool _GENERAL_CATEGORYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#GENERAL_CATEGORY_MASK"/>
        /// </summary>
        public static int GENERAL_CATEGORY_MASK { get { if (!_GENERAL_CATEGORY_MASKReady) { _GENERAL_CATEGORY_MASKContent = SGetField<int>(LocalBridgeClazz, "GENERAL_CATEGORY_MASK"); _GENERAL_CATEGORY_MASKReady = true; } return _GENERAL_CATEGORY_MASKContent; } }
        private static int _GENERAL_CATEGORY_MASKContent = default;
        private static bool _GENERAL_CATEGORY_MASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#GRAPHEME_BASE"/>
        /// </summary>
        public static int GRAPHEME_BASE { get { if (!_GRAPHEME_BASEReady) { _GRAPHEME_BASEContent = SGetField<int>(LocalBridgeClazz, "GRAPHEME_BASE"); _GRAPHEME_BASEReady = true; } return _GRAPHEME_BASEContent; } }
        private static int _GRAPHEME_BASEContent = default;
        private static bool _GRAPHEME_BASEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#GRAPHEME_CLUSTER_BREAK"/>
        /// </summary>
        public static int GRAPHEME_CLUSTER_BREAK { get { if (!_GRAPHEME_CLUSTER_BREAKReady) { _GRAPHEME_CLUSTER_BREAKContent = SGetField<int>(LocalBridgeClazz, "GRAPHEME_CLUSTER_BREAK"); _GRAPHEME_CLUSTER_BREAKReady = true; } return _GRAPHEME_CLUSTER_BREAKContent; } }
        private static int _GRAPHEME_CLUSTER_BREAKContent = default;
        private static bool _GRAPHEME_CLUSTER_BREAKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#GRAPHEME_EXTEND"/>
        /// </summary>
        public static int GRAPHEME_EXTEND { get { if (!_GRAPHEME_EXTENDReady) { _GRAPHEME_EXTENDContent = SGetField<int>(LocalBridgeClazz, "GRAPHEME_EXTEND"); _GRAPHEME_EXTENDReady = true; } return _GRAPHEME_EXTENDContent; } }
        private static int _GRAPHEME_EXTENDContent = default;
        private static bool _GRAPHEME_EXTENDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#GRAPHEME_LINK"/>
        /// </summary>
        public static int GRAPHEME_LINK { get { if (!_GRAPHEME_LINKReady) { _GRAPHEME_LINKContent = SGetField<int>(LocalBridgeClazz, "GRAPHEME_LINK"); _GRAPHEME_LINKReady = true; } return _GRAPHEME_LINKContent; } }
        private static int _GRAPHEME_LINKContent = default;
        private static bool _GRAPHEME_LINKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#HANGUL_SYLLABLE_TYPE"/>
        /// </summary>
        public static int HANGUL_SYLLABLE_TYPE { get { if (!_HANGUL_SYLLABLE_TYPEReady) { _HANGUL_SYLLABLE_TYPEContent = SGetField<int>(LocalBridgeClazz, "HANGUL_SYLLABLE_TYPE"); _HANGUL_SYLLABLE_TYPEReady = true; } return _HANGUL_SYLLABLE_TYPEContent; } }
        private static int _HANGUL_SYLLABLE_TYPEContent = default;
        private static bool _HANGUL_SYLLABLE_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#HEX_DIGIT"/>
        /// </summary>
        public static int HEX_DIGIT { get { if (!_HEX_DIGITReady) { _HEX_DIGITContent = SGetField<int>(LocalBridgeClazz, "HEX_DIGIT"); _HEX_DIGITReady = true; } return _HEX_DIGITContent; } }
        private static int _HEX_DIGITContent = default;
        private static bool _HEX_DIGITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#HYPHEN"/>
        /// </summary>
        public static int HYPHEN { get { if (!_HYPHENReady) { _HYPHENContent = SGetField<int>(LocalBridgeClazz, "HYPHEN"); _HYPHENReady = true; } return _HYPHENContent; } }
        private static int _HYPHENContent = default;
        private static bool _HYPHENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#ID_CONTINUE"/>
        /// </summary>
        public static int ID_CONTINUE { get { if (!_ID_CONTINUEReady) { _ID_CONTINUEContent = SGetField<int>(LocalBridgeClazz, "ID_CONTINUE"); _ID_CONTINUEReady = true; } return _ID_CONTINUEContent; } }
        private static int _ID_CONTINUEContent = default;
        private static bool _ID_CONTINUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#ID_START"/>
        /// </summary>
        public static int ID_START { get { if (!_ID_STARTReady) { _ID_STARTContent = SGetField<int>(LocalBridgeClazz, "ID_START"); _ID_STARTReady = true; } return _ID_STARTContent; } }
        private static int _ID_STARTContent = default;
        private static bool _ID_STARTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#IDEOGRAPHIC"/>
        /// </summary>
        public static int IDEOGRAPHIC { get { if (!_IDEOGRAPHICReady) { _IDEOGRAPHICContent = SGetField<int>(LocalBridgeClazz, "IDEOGRAPHIC"); _IDEOGRAPHICReady = true; } return _IDEOGRAPHICContent; } }
        private static int _IDEOGRAPHICContent = default;
        private static bool _IDEOGRAPHICReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#IDS_BINARY_OPERATOR"/>
        /// </summary>
        public static int IDS_BINARY_OPERATOR { get { if (!_IDS_BINARY_OPERATORReady) { _IDS_BINARY_OPERATORContent = SGetField<int>(LocalBridgeClazz, "IDS_BINARY_OPERATOR"); _IDS_BINARY_OPERATORReady = true; } return _IDS_BINARY_OPERATORContent; } }
        private static int _IDS_BINARY_OPERATORContent = default;
        private static bool _IDS_BINARY_OPERATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#IDS_TRINARY_OPERATOR"/>
        /// </summary>
        public static int IDS_TRINARY_OPERATOR { get { if (!_IDS_TRINARY_OPERATORReady) { _IDS_TRINARY_OPERATORContent = SGetField<int>(LocalBridgeClazz, "IDS_TRINARY_OPERATOR"); _IDS_TRINARY_OPERATORReady = true; } return _IDS_TRINARY_OPERATORContent; } }
        private static int _IDS_TRINARY_OPERATORContent = default;
        private static bool _IDS_TRINARY_OPERATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#INDIC_POSITIONAL_CATEGORY"/>
        /// </summary>
        public static int INDIC_POSITIONAL_CATEGORY { get { if (!_INDIC_POSITIONAL_CATEGORYReady) { _INDIC_POSITIONAL_CATEGORYContent = SGetField<int>(LocalBridgeClazz, "INDIC_POSITIONAL_CATEGORY"); _INDIC_POSITIONAL_CATEGORYReady = true; } return _INDIC_POSITIONAL_CATEGORYContent; } }
        private static int _INDIC_POSITIONAL_CATEGORYContent = default;
        private static bool _INDIC_POSITIONAL_CATEGORYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#INDIC_SYLLABIC_CATEGORY"/>
        /// </summary>
        public static int INDIC_SYLLABIC_CATEGORY { get { if (!_INDIC_SYLLABIC_CATEGORYReady) { _INDIC_SYLLABIC_CATEGORYContent = SGetField<int>(LocalBridgeClazz, "INDIC_SYLLABIC_CATEGORY"); _INDIC_SYLLABIC_CATEGORYReady = true; } return _INDIC_SYLLABIC_CATEGORYContent; } }
        private static int _INDIC_SYLLABIC_CATEGORYContent = default;
        private static bool _INDIC_SYLLABIC_CATEGORYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#INT_START"/>
        /// </summary>
        public static int INT_START { get { if (!_INT_STARTReady) { _INT_STARTContent = SGetField<int>(LocalBridgeClazz, "INT_START"); _INT_STARTReady = true; } return _INT_STARTContent; } }
        private static int _INT_STARTContent = default;
        private static bool _INT_STARTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#JOIN_CONTROL"/>
        /// </summary>
        public static int JOIN_CONTROL { get { if (!_JOIN_CONTROLReady) { _JOIN_CONTROLContent = SGetField<int>(LocalBridgeClazz, "JOIN_CONTROL"); _JOIN_CONTROLReady = true; } return _JOIN_CONTROLContent; } }
        private static int _JOIN_CONTROLContent = default;
        private static bool _JOIN_CONTROLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#JOINING_GROUP"/>
        /// </summary>
        public static int JOINING_GROUP { get { if (!_JOINING_GROUPReady) { _JOINING_GROUPContent = SGetField<int>(LocalBridgeClazz, "JOINING_GROUP"); _JOINING_GROUPReady = true; } return _JOINING_GROUPContent; } }
        private static int _JOINING_GROUPContent = default;
        private static bool _JOINING_GROUPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#JOINING_TYPE"/>
        /// </summary>
        public static int JOINING_TYPE { get { if (!_JOINING_TYPEReady) { _JOINING_TYPEContent = SGetField<int>(LocalBridgeClazz, "JOINING_TYPE"); _JOINING_TYPEReady = true; } return _JOINING_TYPEContent; } }
        private static int _JOINING_TYPEContent = default;
        private static bool _JOINING_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#LEAD_CANONICAL_COMBINING_CLASS"/>
        /// </summary>
        public static int LEAD_CANONICAL_COMBINING_CLASS { get { if (!_LEAD_CANONICAL_COMBINING_CLASSReady) { _LEAD_CANONICAL_COMBINING_CLASSContent = SGetField<int>(LocalBridgeClazz, "LEAD_CANONICAL_COMBINING_CLASS"); _LEAD_CANONICAL_COMBINING_CLASSReady = true; } return _LEAD_CANONICAL_COMBINING_CLASSContent; } }
        private static int _LEAD_CANONICAL_COMBINING_CLASSContent = default;
        private static bool _LEAD_CANONICAL_COMBINING_CLASSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#LINE_BREAK"/>
        /// </summary>
        public static int LINE_BREAK { get { if (!_LINE_BREAKReady) { _LINE_BREAKContent = SGetField<int>(LocalBridgeClazz, "LINE_BREAK"); _LINE_BREAKReady = true; } return _LINE_BREAKContent; } }
        private static int _LINE_BREAKContent = default;
        private static bool _LINE_BREAKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#LOGICAL_ORDER_EXCEPTION"/>
        /// </summary>
        public static int LOGICAL_ORDER_EXCEPTION { get { if (!_LOGICAL_ORDER_EXCEPTIONReady) { _LOGICAL_ORDER_EXCEPTIONContent = SGetField<int>(LocalBridgeClazz, "LOGICAL_ORDER_EXCEPTION"); _LOGICAL_ORDER_EXCEPTIONReady = true; } return _LOGICAL_ORDER_EXCEPTIONContent; } }
        private static int _LOGICAL_ORDER_EXCEPTIONContent = default;
        private static bool _LOGICAL_ORDER_EXCEPTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#LOWERCASE"/>
        /// </summary>
        public static int LOWERCASE { get { if (!_LOWERCASEReady) { _LOWERCASEContent = SGetField<int>(LocalBridgeClazz, "LOWERCASE"); _LOWERCASEReady = true; } return _LOWERCASEContent; } }
        private static int _LOWERCASEContent = default;
        private static bool _LOWERCASEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#LOWERCASE_MAPPING"/>
        /// </summary>
        public static int LOWERCASE_MAPPING { get { if (!_LOWERCASE_MAPPINGReady) { _LOWERCASE_MAPPINGContent = SGetField<int>(LocalBridgeClazz, "LOWERCASE_MAPPING"); _LOWERCASE_MAPPINGReady = true; } return _LOWERCASE_MAPPINGContent; } }
        private static int _LOWERCASE_MAPPINGContent = default;
        private static bool _LOWERCASE_MAPPINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#MASK_START"/>
        /// </summary>
        public static int MASK_START { get { if (!_MASK_STARTReady) { _MASK_STARTContent = SGetField<int>(LocalBridgeClazz, "MASK_START"); _MASK_STARTReady = true; } return _MASK_STARTContent; } }
        private static int _MASK_STARTContent = default;
        private static bool _MASK_STARTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#MATH"/>
        /// </summary>
        public static int MATH { get { if (!_MATHReady) { _MATHContent = SGetField<int>(LocalBridgeClazz, "MATH"); _MATHReady = true; } return _MATHContent; } }
        private static int _MATHContent = default;
        private static bool _MATHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#NAME"/>
        /// </summary>
        public static int NAME { get { if (!_NAMEReady) { _NAMEContent = SGetField<int>(LocalBridgeClazz, "NAME"); _NAMEReady = true; } return _NAMEContent; } }
        private static int _NAMEContent = default;
        private static bool _NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#NFC_INERT"/>
        /// </summary>
        public static int NFC_INERT { get { if (!_NFC_INERTReady) { _NFC_INERTContent = SGetField<int>(LocalBridgeClazz, "NFC_INERT"); _NFC_INERTReady = true; } return _NFC_INERTContent; } }
        private static int _NFC_INERTContent = default;
        private static bool _NFC_INERTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#NFC_QUICK_CHECK"/>
        /// </summary>
        public static int NFC_QUICK_CHECK { get { if (!_NFC_QUICK_CHECKReady) { _NFC_QUICK_CHECKContent = SGetField<int>(LocalBridgeClazz, "NFC_QUICK_CHECK"); _NFC_QUICK_CHECKReady = true; } return _NFC_QUICK_CHECKContent; } }
        private static int _NFC_QUICK_CHECKContent = default;
        private static bool _NFC_QUICK_CHECKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#NFD_INERT"/>
        /// </summary>
        public static int NFD_INERT { get { if (!_NFD_INERTReady) { _NFD_INERTContent = SGetField<int>(LocalBridgeClazz, "NFD_INERT"); _NFD_INERTReady = true; } return _NFD_INERTContent; } }
        private static int _NFD_INERTContent = default;
        private static bool _NFD_INERTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#NFD_QUICK_CHECK"/>
        /// </summary>
        public static int NFD_QUICK_CHECK { get { if (!_NFD_QUICK_CHECKReady) { _NFD_QUICK_CHECKContent = SGetField<int>(LocalBridgeClazz, "NFD_QUICK_CHECK"); _NFD_QUICK_CHECKReady = true; } return _NFD_QUICK_CHECKContent; } }
        private static int _NFD_QUICK_CHECKContent = default;
        private static bool _NFD_QUICK_CHECKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#NFKC_INERT"/>
        /// </summary>
        public static int NFKC_INERT { get { if (!_NFKC_INERTReady) { _NFKC_INERTContent = SGetField<int>(LocalBridgeClazz, "NFKC_INERT"); _NFKC_INERTReady = true; } return _NFKC_INERTContent; } }
        private static int _NFKC_INERTContent = default;
        private static bool _NFKC_INERTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#NFKC_QUICK_CHECK"/>
        /// </summary>
        public static int NFKC_QUICK_CHECK { get { if (!_NFKC_QUICK_CHECKReady) { _NFKC_QUICK_CHECKContent = SGetField<int>(LocalBridgeClazz, "NFKC_QUICK_CHECK"); _NFKC_QUICK_CHECKReady = true; } return _NFKC_QUICK_CHECKContent; } }
        private static int _NFKC_QUICK_CHECKContent = default;
        private static bool _NFKC_QUICK_CHECKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#NFKD_INERT"/>
        /// </summary>
        public static int NFKD_INERT { get { if (!_NFKD_INERTReady) { _NFKD_INERTContent = SGetField<int>(LocalBridgeClazz, "NFKD_INERT"); _NFKD_INERTReady = true; } return _NFKD_INERTContent; } }
        private static int _NFKD_INERTContent = default;
        private static bool _NFKD_INERTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#NFKD_QUICK_CHECK"/>
        /// </summary>
        public static int NFKD_QUICK_CHECK { get { if (!_NFKD_QUICK_CHECKReady) { _NFKD_QUICK_CHECKContent = SGetField<int>(LocalBridgeClazz, "NFKD_QUICK_CHECK"); _NFKD_QUICK_CHECKReady = true; } return _NFKD_QUICK_CHECKContent; } }
        private static int _NFKD_QUICK_CHECKContent = default;
        private static bool _NFKD_QUICK_CHECKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#NONCHARACTER_CODE_POINT"/>
        /// </summary>
        public static int NONCHARACTER_CODE_POINT { get { if (!_NONCHARACTER_CODE_POINTReady) { _NONCHARACTER_CODE_POINTContent = SGetField<int>(LocalBridgeClazz, "NONCHARACTER_CODE_POINT"); _NONCHARACTER_CODE_POINTReady = true; } return _NONCHARACTER_CODE_POINTContent; } }
        private static int _NONCHARACTER_CODE_POINTContent = default;
        private static bool _NONCHARACTER_CODE_POINTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#NUMERIC_TYPE"/>
        /// </summary>
        public static int NUMERIC_TYPE { get { if (!_NUMERIC_TYPEReady) { _NUMERIC_TYPEContent = SGetField<int>(LocalBridgeClazz, "NUMERIC_TYPE"); _NUMERIC_TYPEReady = true; } return _NUMERIC_TYPEContent; } }
        private static int _NUMERIC_TYPEContent = default;
        private static bool _NUMERIC_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#NUMERIC_VALUE"/>
        /// </summary>
        public static int NUMERIC_VALUE { get { if (!_NUMERIC_VALUEReady) { _NUMERIC_VALUEContent = SGetField<int>(LocalBridgeClazz, "NUMERIC_VALUE"); _NUMERIC_VALUEReady = true; } return _NUMERIC_VALUEContent; } }
        private static int _NUMERIC_VALUEContent = default;
        private static bool _NUMERIC_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#OTHER_PROPERTY_START"/>
        /// </summary>
        public static int OTHER_PROPERTY_START { get { if (!_OTHER_PROPERTY_STARTReady) { _OTHER_PROPERTY_STARTContent = SGetField<int>(LocalBridgeClazz, "OTHER_PROPERTY_START"); _OTHER_PROPERTY_STARTReady = true; } return _OTHER_PROPERTY_STARTContent; } }
        private static int _OTHER_PROPERTY_STARTContent = default;
        private static bool _OTHER_PROPERTY_STARTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#PATTERN_SYNTAX"/>
        /// </summary>
        public static int PATTERN_SYNTAX { get { if (!_PATTERN_SYNTAXReady) { _PATTERN_SYNTAXContent = SGetField<int>(LocalBridgeClazz, "PATTERN_SYNTAX"); _PATTERN_SYNTAXReady = true; } return _PATTERN_SYNTAXContent; } }
        private static int _PATTERN_SYNTAXContent = default;
        private static bool _PATTERN_SYNTAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#PATTERN_WHITE_SPACE"/>
        /// </summary>
        public static int PATTERN_WHITE_SPACE { get { if (!_PATTERN_WHITE_SPACEReady) { _PATTERN_WHITE_SPACEContent = SGetField<int>(LocalBridgeClazz, "PATTERN_WHITE_SPACE"); _PATTERN_WHITE_SPACEReady = true; } return _PATTERN_WHITE_SPACEContent; } }
        private static int _PATTERN_WHITE_SPACEContent = default;
        private static bool _PATTERN_WHITE_SPACEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#POSIX_ALNUM"/>
        /// </summary>
        public static int POSIX_ALNUM { get { if (!_POSIX_ALNUMReady) { _POSIX_ALNUMContent = SGetField<int>(LocalBridgeClazz, "POSIX_ALNUM"); _POSIX_ALNUMReady = true; } return _POSIX_ALNUMContent; } }
        private static int _POSIX_ALNUMContent = default;
        private static bool _POSIX_ALNUMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#POSIX_BLANK"/>
        /// </summary>
        public static int POSIX_BLANK { get { if (!_POSIX_BLANKReady) { _POSIX_BLANKContent = SGetField<int>(LocalBridgeClazz, "POSIX_BLANK"); _POSIX_BLANKReady = true; } return _POSIX_BLANKContent; } }
        private static int _POSIX_BLANKContent = default;
        private static bool _POSIX_BLANKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#POSIX_GRAPH"/>
        /// </summary>
        public static int POSIX_GRAPH { get { if (!_POSIX_GRAPHReady) { _POSIX_GRAPHContent = SGetField<int>(LocalBridgeClazz, "POSIX_GRAPH"); _POSIX_GRAPHReady = true; } return _POSIX_GRAPHContent; } }
        private static int _POSIX_GRAPHContent = default;
        private static bool _POSIX_GRAPHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#POSIX_PRINT"/>
        /// </summary>
        public static int POSIX_PRINT { get { if (!_POSIX_PRINTReady) { _POSIX_PRINTContent = SGetField<int>(LocalBridgeClazz, "POSIX_PRINT"); _POSIX_PRINTReady = true; } return _POSIX_PRINTContent; } }
        private static int _POSIX_PRINTContent = default;
        private static bool _POSIX_PRINTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#POSIX_XDIGIT"/>
        /// </summary>
        public static int POSIX_XDIGIT { get { if (!_POSIX_XDIGITReady) { _POSIX_XDIGITContent = SGetField<int>(LocalBridgeClazz, "POSIX_XDIGIT"); _POSIX_XDIGITReady = true; } return _POSIX_XDIGITContent; } }
        private static int _POSIX_XDIGITContent = default;
        private static bool _POSIX_XDIGITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#PREPENDED_CONCATENATION_MARK"/>
        /// </summary>
        public static int PREPENDED_CONCATENATION_MARK { get { if (!_PREPENDED_CONCATENATION_MARKReady) { _PREPENDED_CONCATENATION_MARKContent = SGetField<int>(LocalBridgeClazz, "PREPENDED_CONCATENATION_MARK"); _PREPENDED_CONCATENATION_MARKReady = true; } return _PREPENDED_CONCATENATION_MARKContent; } }
        private static int _PREPENDED_CONCATENATION_MARKContent = default;
        private static bool _PREPENDED_CONCATENATION_MARKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#QUOTATION_MARK"/>
        /// </summary>
        public static int QUOTATION_MARK { get { if (!_QUOTATION_MARKReady) { _QUOTATION_MARKContent = SGetField<int>(LocalBridgeClazz, "QUOTATION_MARK"); _QUOTATION_MARKReady = true; } return _QUOTATION_MARKContent; } }
        private static int _QUOTATION_MARKContent = default;
        private static bool _QUOTATION_MARKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#RADICAL"/>
        /// </summary>
        public static int RADICAL { get { if (!_RADICALReady) { _RADICALContent = SGetField<int>(LocalBridgeClazz, "RADICAL"); _RADICALReady = true; } return _RADICALContent; } }
        private static int _RADICALContent = default;
        private static bool _RADICALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#REGIONAL_INDICATOR"/>
        /// </summary>
        public static int REGIONAL_INDICATOR { get { if (!_REGIONAL_INDICATORReady) { _REGIONAL_INDICATORContent = SGetField<int>(LocalBridgeClazz, "REGIONAL_INDICATOR"); _REGIONAL_INDICATORReady = true; } return _REGIONAL_INDICATORContent; } }
        private static int _REGIONAL_INDICATORContent = default;
        private static bool _REGIONAL_INDICATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#RGI_EMOJI"/>
        /// </summary>
        public static int RGI_EMOJI { get { if (!_RGI_EMOJIReady) { _RGI_EMOJIContent = SGetField<int>(LocalBridgeClazz, "RGI_EMOJI"); _RGI_EMOJIReady = true; } return _RGI_EMOJIContent; } }
        private static int _RGI_EMOJIContent = default;
        private static bool _RGI_EMOJIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#RGI_EMOJI_FLAG_SEQUENCE"/>
        /// </summary>
        public static int RGI_EMOJI_FLAG_SEQUENCE { get { if (!_RGI_EMOJI_FLAG_SEQUENCEReady) { _RGI_EMOJI_FLAG_SEQUENCEContent = SGetField<int>(LocalBridgeClazz, "RGI_EMOJI_FLAG_SEQUENCE"); _RGI_EMOJI_FLAG_SEQUENCEReady = true; } return _RGI_EMOJI_FLAG_SEQUENCEContent; } }
        private static int _RGI_EMOJI_FLAG_SEQUENCEContent = default;
        private static bool _RGI_EMOJI_FLAG_SEQUENCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#RGI_EMOJI_MODIFIER_SEQUENCE"/>
        /// </summary>
        public static int RGI_EMOJI_MODIFIER_SEQUENCE { get { if (!_RGI_EMOJI_MODIFIER_SEQUENCEReady) { _RGI_EMOJI_MODIFIER_SEQUENCEContent = SGetField<int>(LocalBridgeClazz, "RGI_EMOJI_MODIFIER_SEQUENCE"); _RGI_EMOJI_MODIFIER_SEQUENCEReady = true; } return _RGI_EMOJI_MODIFIER_SEQUENCEContent; } }
        private static int _RGI_EMOJI_MODIFIER_SEQUENCEContent = default;
        private static bool _RGI_EMOJI_MODIFIER_SEQUENCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#RGI_EMOJI_TAG_SEQUENCE"/>
        /// </summary>
        public static int RGI_EMOJI_TAG_SEQUENCE { get { if (!_RGI_EMOJI_TAG_SEQUENCEReady) { _RGI_EMOJI_TAG_SEQUENCEContent = SGetField<int>(LocalBridgeClazz, "RGI_EMOJI_TAG_SEQUENCE"); _RGI_EMOJI_TAG_SEQUENCEReady = true; } return _RGI_EMOJI_TAG_SEQUENCEContent; } }
        private static int _RGI_EMOJI_TAG_SEQUENCEContent = default;
        private static bool _RGI_EMOJI_TAG_SEQUENCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#RGI_EMOJI_ZWJ_SEQUENCE"/>
        /// </summary>
        public static int RGI_EMOJI_ZWJ_SEQUENCE { get { if (!_RGI_EMOJI_ZWJ_SEQUENCEReady) { _RGI_EMOJI_ZWJ_SEQUENCEContent = SGetField<int>(LocalBridgeClazz, "RGI_EMOJI_ZWJ_SEQUENCE"); _RGI_EMOJI_ZWJ_SEQUENCEReady = true; } return _RGI_EMOJI_ZWJ_SEQUENCEContent; } }
        private static int _RGI_EMOJI_ZWJ_SEQUENCEContent = default;
        private static bool _RGI_EMOJI_ZWJ_SEQUENCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#S_TERM"/>
        /// </summary>
        public static int S_TERM { get { if (!_S_TERMReady) { _S_TERMContent = SGetField<int>(LocalBridgeClazz, "S_TERM"); _S_TERMReady = true; } return _S_TERMContent; } }
        private static int _S_TERMContent = default;
        private static bool _S_TERMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#SCRIPT"/>
        /// </summary>
        public static int SCRIPT { get { if (!_SCRIPTReady) { _SCRIPTContent = SGetField<int>(LocalBridgeClazz, "SCRIPT"); _SCRIPTReady = true; } return _SCRIPTContent; } }
        private static int _SCRIPTContent = default;
        private static bool _SCRIPTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#SCRIPT_EXTENSIONS"/>
        /// </summary>
        public static int SCRIPT_EXTENSIONS { get { if (!_SCRIPT_EXTENSIONSReady) { _SCRIPT_EXTENSIONSContent = SGetField<int>(LocalBridgeClazz, "SCRIPT_EXTENSIONS"); _SCRIPT_EXTENSIONSReady = true; } return _SCRIPT_EXTENSIONSContent; } }
        private static int _SCRIPT_EXTENSIONSContent = default;
        private static bool _SCRIPT_EXTENSIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#SEGMENT_STARTER"/>
        /// </summary>
        public static int SEGMENT_STARTER { get { if (!_SEGMENT_STARTERReady) { _SEGMENT_STARTERContent = SGetField<int>(LocalBridgeClazz, "SEGMENT_STARTER"); _SEGMENT_STARTERReady = true; } return _SEGMENT_STARTERContent; } }
        private static int _SEGMENT_STARTERContent = default;
        private static bool _SEGMENT_STARTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#SENTENCE_BREAK"/>
        /// </summary>
        public static int SENTENCE_BREAK { get { if (!_SENTENCE_BREAKReady) { _SENTENCE_BREAKContent = SGetField<int>(LocalBridgeClazz, "SENTENCE_BREAK"); _SENTENCE_BREAKReady = true; } return _SENTENCE_BREAKContent; } }
        private static int _SENTENCE_BREAKContent = default;
        private static bool _SENTENCE_BREAKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#SIMPLE_CASE_FOLDING"/>
        /// </summary>
        public static int SIMPLE_CASE_FOLDING { get { if (!_SIMPLE_CASE_FOLDINGReady) { _SIMPLE_CASE_FOLDINGContent = SGetField<int>(LocalBridgeClazz, "SIMPLE_CASE_FOLDING"); _SIMPLE_CASE_FOLDINGReady = true; } return _SIMPLE_CASE_FOLDINGContent; } }
        private static int _SIMPLE_CASE_FOLDINGContent = default;
        private static bool _SIMPLE_CASE_FOLDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#SIMPLE_LOWERCASE_MAPPING"/>
        /// </summary>
        public static int SIMPLE_LOWERCASE_MAPPING { get { if (!_SIMPLE_LOWERCASE_MAPPINGReady) { _SIMPLE_LOWERCASE_MAPPINGContent = SGetField<int>(LocalBridgeClazz, "SIMPLE_LOWERCASE_MAPPING"); _SIMPLE_LOWERCASE_MAPPINGReady = true; } return _SIMPLE_LOWERCASE_MAPPINGContent; } }
        private static int _SIMPLE_LOWERCASE_MAPPINGContent = default;
        private static bool _SIMPLE_LOWERCASE_MAPPINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#SIMPLE_TITLECASE_MAPPING"/>
        /// </summary>
        public static int SIMPLE_TITLECASE_MAPPING { get { if (!_SIMPLE_TITLECASE_MAPPINGReady) { _SIMPLE_TITLECASE_MAPPINGContent = SGetField<int>(LocalBridgeClazz, "SIMPLE_TITLECASE_MAPPING"); _SIMPLE_TITLECASE_MAPPINGReady = true; } return _SIMPLE_TITLECASE_MAPPINGContent; } }
        private static int _SIMPLE_TITLECASE_MAPPINGContent = default;
        private static bool _SIMPLE_TITLECASE_MAPPINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#SIMPLE_UPPERCASE_MAPPING"/>
        /// </summary>
        public static int SIMPLE_UPPERCASE_MAPPING { get { if (!_SIMPLE_UPPERCASE_MAPPINGReady) { _SIMPLE_UPPERCASE_MAPPINGContent = SGetField<int>(LocalBridgeClazz, "SIMPLE_UPPERCASE_MAPPING"); _SIMPLE_UPPERCASE_MAPPINGReady = true; } return _SIMPLE_UPPERCASE_MAPPINGContent; } }
        private static int _SIMPLE_UPPERCASE_MAPPINGContent = default;
        private static bool _SIMPLE_UPPERCASE_MAPPINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#SOFT_DOTTED"/>
        /// </summary>
        public static int SOFT_DOTTED { get { if (!_SOFT_DOTTEDReady) { _SOFT_DOTTEDContent = SGetField<int>(LocalBridgeClazz, "SOFT_DOTTED"); _SOFT_DOTTEDReady = true; } return _SOFT_DOTTEDContent; } }
        private static int _SOFT_DOTTEDContent = default;
        private static bool _SOFT_DOTTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#STRING_START"/>
        /// </summary>
        public static int STRING_START { get { if (!_STRING_STARTReady) { _STRING_STARTContent = SGetField<int>(LocalBridgeClazz, "STRING_START"); _STRING_STARTReady = true; } return _STRING_STARTContent; } }
        private static int _STRING_STARTContent = default;
        private static bool _STRING_STARTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#TERMINAL_PUNCTUATION"/>
        /// </summary>
        public static int TERMINAL_PUNCTUATION { get { if (!_TERMINAL_PUNCTUATIONReady) { _TERMINAL_PUNCTUATIONContent = SGetField<int>(LocalBridgeClazz, "TERMINAL_PUNCTUATION"); _TERMINAL_PUNCTUATIONReady = true; } return _TERMINAL_PUNCTUATIONContent; } }
        private static int _TERMINAL_PUNCTUATIONContent = default;
        private static bool _TERMINAL_PUNCTUATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#TITLECASE_MAPPING"/>
        /// </summary>
        public static int TITLECASE_MAPPING { get { if (!_TITLECASE_MAPPINGReady) { _TITLECASE_MAPPINGContent = SGetField<int>(LocalBridgeClazz, "TITLECASE_MAPPING"); _TITLECASE_MAPPINGReady = true; } return _TITLECASE_MAPPINGContent; } }
        private static int _TITLECASE_MAPPINGContent = default;
        private static bool _TITLECASE_MAPPINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#TRAIL_CANONICAL_COMBINING_CLASS"/>
        /// </summary>
        public static int TRAIL_CANONICAL_COMBINING_CLASS { get { if (!_TRAIL_CANONICAL_COMBINING_CLASSReady) { _TRAIL_CANONICAL_COMBINING_CLASSContent = SGetField<int>(LocalBridgeClazz, "TRAIL_CANONICAL_COMBINING_CLASS"); _TRAIL_CANONICAL_COMBINING_CLASSReady = true; } return _TRAIL_CANONICAL_COMBINING_CLASSContent; } }
        private static int _TRAIL_CANONICAL_COMBINING_CLASSContent = default;
        private static bool _TRAIL_CANONICAL_COMBINING_CLASSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#UNIFIED_IDEOGRAPH"/>
        /// </summary>
        public static int UNIFIED_IDEOGRAPH { get { if (!_UNIFIED_IDEOGRAPHReady) { _UNIFIED_IDEOGRAPHContent = SGetField<int>(LocalBridgeClazz, "UNIFIED_IDEOGRAPH"); _UNIFIED_IDEOGRAPHReady = true; } return _UNIFIED_IDEOGRAPHContent; } }
        private static int _UNIFIED_IDEOGRAPHContent = default;
        private static bool _UNIFIED_IDEOGRAPHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#UPPERCASE"/>
        /// </summary>
        public static int UPPERCASE { get { if (!_UPPERCASEReady) { _UPPERCASEContent = SGetField<int>(LocalBridgeClazz, "UPPERCASE"); _UPPERCASEReady = true; } return _UPPERCASEContent; } }
        private static int _UPPERCASEContent = default;
        private static bool _UPPERCASEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#UPPERCASE_MAPPING"/>
        /// </summary>
        public static int UPPERCASE_MAPPING { get { if (!_UPPERCASE_MAPPINGReady) { _UPPERCASE_MAPPINGContent = SGetField<int>(LocalBridgeClazz, "UPPERCASE_MAPPING"); _UPPERCASE_MAPPINGReady = true; } return _UPPERCASE_MAPPINGContent; } }
        private static int _UPPERCASE_MAPPINGContent = default;
        private static bool _UPPERCASE_MAPPINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#VARIATION_SELECTOR"/>
        /// </summary>
        public static int VARIATION_SELECTOR { get { if (!_VARIATION_SELECTORReady) { _VARIATION_SELECTORContent = SGetField<int>(LocalBridgeClazz, "VARIATION_SELECTOR"); _VARIATION_SELECTORReady = true; } return _VARIATION_SELECTORContent; } }
        private static int _VARIATION_SELECTORContent = default;
        private static bool _VARIATION_SELECTORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#VERTICAL_ORIENTATION"/>
        /// </summary>
        public static int VERTICAL_ORIENTATION { get { if (!_VERTICAL_ORIENTATIONReady) { _VERTICAL_ORIENTATIONContent = SGetField<int>(LocalBridgeClazz, "VERTICAL_ORIENTATION"); _VERTICAL_ORIENTATIONReady = true; } return _VERTICAL_ORIENTATIONContent; } }
        private static int _VERTICAL_ORIENTATIONContent = default;
        private static bool _VERTICAL_ORIENTATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#WHITE_SPACE"/>
        /// </summary>
        public static int WHITE_SPACE { get { if (!_WHITE_SPACEReady) { _WHITE_SPACEContent = SGetField<int>(LocalBridgeClazz, "WHITE_SPACE"); _WHITE_SPACEReady = true; } return _WHITE_SPACEContent; } }
        private static int _WHITE_SPACEContent = default;
        private static bool _WHITE_SPACEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#WORD_BREAK"/>
        /// </summary>
        public static int WORD_BREAK { get { if (!_WORD_BREAKReady) { _WORD_BREAKContent = SGetField<int>(LocalBridgeClazz, "WORD_BREAK"); _WORD_BREAKReady = true; } return _WORD_BREAKContent; } }
        private static int _WORD_BREAKContent = default;
        private static bool _WORD_BREAKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#XID_CONTINUE"/>
        /// </summary>
        public static int XID_CONTINUE { get { if (!_XID_CONTINUEReady) { _XID_CONTINUEContent = SGetField<int>(LocalBridgeClazz, "XID_CONTINUE"); _XID_CONTINUEReady = true; } return _XID_CONTINUEContent; } }
        private static int _XID_CONTINUEContent = default;
        private static bool _XID_CONTINUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.html#XID_START"/>
        /// </summary>
        public static int XID_START { get { if (!_XID_STARTReady) { _XID_STARTContent = SGetField<int>(LocalBridgeClazz, "XID_START"); _XID_STARTReady = true; } return _XID_STARTContent; } }
        private static int _XID_STARTContent = default;
        private static bool _XID_STARTReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
    
        #endregion
    
        #region Nested classes
        #region NameChoice implementation
        public partial class NameChoice
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.NameChoice.html#LONG"/>
            /// </summary>
            public static int LONG { get { if (!_LONGReady) { _LONGContent = SGetField<int>(LocalBridgeClazz, "LONG"); _LONGReady = true; } return _LONGContent; } }
            private static int _LONGContent = default;
            private static bool _LONGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UProperty.NameChoice.html#SHORT"/>
            /// </summary>
            public static int SHORT { get { if (!_SHORTReady) { _SHORTContent = SGetField<int>(LocalBridgeClazz, "SHORT"); _SHORTReady = true; } return _SHORTContent; } }
            private static int _SHORTContent = default;
            private static bool _SHORTReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.5.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Icu.Lang
{
    #region UCharacterEnums
    public partial class UCharacterEnums
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes
        #region ECharacterCategory
        public partial class ECharacterCategory
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterCategory.html#COMBINING_SPACING_MARK"/>
            /// </summary>
            public static byte COMBINING_SPACING_MARK { get { if (!_COMBINING_SPACING_MARKReady) { _COMBINING_SPACING_MARKContent = SGetField<byte>(LocalBridgeClazz, "COMBINING_SPACING_MARK"); _COMBINING_SPACING_MARKReady = true; } return _COMBINING_SPACING_MARKContent; } }
            private static byte _COMBINING_SPACING_MARKContent = default;
            private static bool _COMBINING_SPACING_MARKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterCategory.html#CONNECTOR_PUNCTUATION"/>
            /// </summary>
            public static byte CONNECTOR_PUNCTUATION { get { if (!_CONNECTOR_PUNCTUATIONReady) { _CONNECTOR_PUNCTUATIONContent = SGetField<byte>(LocalBridgeClazz, "CONNECTOR_PUNCTUATION"); _CONNECTOR_PUNCTUATIONReady = true; } return _CONNECTOR_PUNCTUATIONContent; } }
            private static byte _CONNECTOR_PUNCTUATIONContent = default;
            private static bool _CONNECTOR_PUNCTUATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterCategory.html#CONTROL"/>
            /// </summary>
            public static byte CONTROL { get { if (!_CONTROLReady) { _CONTROLContent = SGetField<byte>(LocalBridgeClazz, "CONTROL"); _CONTROLReady = true; } return _CONTROLContent; } }
            private static byte _CONTROLContent = default;
            private static bool _CONTROLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterCategory.html#CURRENCY_SYMBOL"/>
            /// </summary>
            public static byte CURRENCY_SYMBOL { get { if (!_CURRENCY_SYMBOLReady) { _CURRENCY_SYMBOLContent = SGetField<byte>(LocalBridgeClazz, "CURRENCY_SYMBOL"); _CURRENCY_SYMBOLReady = true; } return _CURRENCY_SYMBOLContent; } }
            private static byte _CURRENCY_SYMBOLContent = default;
            private static bool _CURRENCY_SYMBOLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterCategory.html#DASH_PUNCTUATION"/>
            /// </summary>
            public static byte DASH_PUNCTUATION { get { if (!_DASH_PUNCTUATIONReady) { _DASH_PUNCTUATIONContent = SGetField<byte>(LocalBridgeClazz, "DASH_PUNCTUATION"); _DASH_PUNCTUATIONReady = true; } return _DASH_PUNCTUATIONContent; } }
            private static byte _DASH_PUNCTUATIONContent = default;
            private static bool _DASH_PUNCTUATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterCategory.html#DECIMAL_DIGIT_NUMBER"/>
            /// </summary>
            public static byte DECIMAL_DIGIT_NUMBER { get { if (!_DECIMAL_DIGIT_NUMBERReady) { _DECIMAL_DIGIT_NUMBERContent = SGetField<byte>(LocalBridgeClazz, "DECIMAL_DIGIT_NUMBER"); _DECIMAL_DIGIT_NUMBERReady = true; } return _DECIMAL_DIGIT_NUMBERContent; } }
            private static byte _DECIMAL_DIGIT_NUMBERContent = default;
            private static bool _DECIMAL_DIGIT_NUMBERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterCategory.html#ENCLOSING_MARK"/>
            /// </summary>
            public static byte ENCLOSING_MARK { get { if (!_ENCLOSING_MARKReady) { _ENCLOSING_MARKContent = SGetField<byte>(LocalBridgeClazz, "ENCLOSING_MARK"); _ENCLOSING_MARKReady = true; } return _ENCLOSING_MARKContent; } }
            private static byte _ENCLOSING_MARKContent = default;
            private static bool _ENCLOSING_MARKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterCategory.html#END_PUNCTUATION"/>
            /// </summary>
            public static byte END_PUNCTUATION { get { if (!_END_PUNCTUATIONReady) { _END_PUNCTUATIONContent = SGetField<byte>(LocalBridgeClazz, "END_PUNCTUATION"); _END_PUNCTUATIONReady = true; } return _END_PUNCTUATIONContent; } }
            private static byte _END_PUNCTUATIONContent = default;
            private static bool _END_PUNCTUATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterCategory.html#FINAL_PUNCTUATION"/>
            /// </summary>
            public static byte FINAL_PUNCTUATION { get { if (!_FINAL_PUNCTUATIONReady) { _FINAL_PUNCTUATIONContent = SGetField<byte>(LocalBridgeClazz, "FINAL_PUNCTUATION"); _FINAL_PUNCTUATIONReady = true; } return _FINAL_PUNCTUATIONContent; } }
            private static byte _FINAL_PUNCTUATIONContent = default;
            private static bool _FINAL_PUNCTUATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterCategory.html#FINAL_QUOTE_PUNCTUATION"/>
            /// </summary>
            public static byte FINAL_QUOTE_PUNCTUATION { get { if (!_FINAL_QUOTE_PUNCTUATIONReady) { _FINAL_QUOTE_PUNCTUATIONContent = SGetField<byte>(LocalBridgeClazz, "FINAL_QUOTE_PUNCTUATION"); _FINAL_QUOTE_PUNCTUATIONReady = true; } return _FINAL_QUOTE_PUNCTUATIONContent; } }
            private static byte _FINAL_QUOTE_PUNCTUATIONContent = default;
            private static bool _FINAL_QUOTE_PUNCTUATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterCategory.html#FORMAT"/>
            /// </summary>
            public static byte FORMAT { get { if (!_FORMATReady) { _FORMATContent = SGetField<byte>(LocalBridgeClazz, "FORMAT"); _FORMATReady = true; } return _FORMATContent; } }
            private static byte _FORMATContent = default;
            private static bool _FORMATReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterCategory.html#GENERAL_OTHER_TYPES"/>
            /// </summary>
            public static byte GENERAL_OTHER_TYPES { get { if (!_GENERAL_OTHER_TYPESReady) { _GENERAL_OTHER_TYPESContent = SGetField<byte>(LocalBridgeClazz, "GENERAL_OTHER_TYPES"); _GENERAL_OTHER_TYPESReady = true; } return _GENERAL_OTHER_TYPESContent; } }
            private static byte _GENERAL_OTHER_TYPESContent = default;
            private static bool _GENERAL_OTHER_TYPESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterCategory.html#INITIAL_PUNCTUATION"/>
            /// </summary>
            public static byte INITIAL_PUNCTUATION { get { if (!_INITIAL_PUNCTUATIONReady) { _INITIAL_PUNCTUATIONContent = SGetField<byte>(LocalBridgeClazz, "INITIAL_PUNCTUATION"); _INITIAL_PUNCTUATIONReady = true; } return _INITIAL_PUNCTUATIONContent; } }
            private static byte _INITIAL_PUNCTUATIONContent = default;
            private static bool _INITIAL_PUNCTUATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterCategory.html#INITIAL_QUOTE_PUNCTUATION"/>
            /// </summary>
            public static byte INITIAL_QUOTE_PUNCTUATION { get { if (!_INITIAL_QUOTE_PUNCTUATIONReady) { _INITIAL_QUOTE_PUNCTUATIONContent = SGetField<byte>(LocalBridgeClazz, "INITIAL_QUOTE_PUNCTUATION"); _INITIAL_QUOTE_PUNCTUATIONReady = true; } return _INITIAL_QUOTE_PUNCTUATIONContent; } }
            private static byte _INITIAL_QUOTE_PUNCTUATIONContent = default;
            private static bool _INITIAL_QUOTE_PUNCTUATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterCategory.html#LETTER_NUMBER"/>
            /// </summary>
            public static byte LETTER_NUMBER { get { if (!_LETTER_NUMBERReady) { _LETTER_NUMBERContent = SGetField<byte>(LocalBridgeClazz, "LETTER_NUMBER"); _LETTER_NUMBERReady = true; } return _LETTER_NUMBERContent; } }
            private static byte _LETTER_NUMBERContent = default;
            private static bool _LETTER_NUMBERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterCategory.html#LINE_SEPARATOR"/>
            /// </summary>
            public static byte LINE_SEPARATOR { get { if (!_LINE_SEPARATORReady) { _LINE_SEPARATORContent = SGetField<byte>(LocalBridgeClazz, "LINE_SEPARATOR"); _LINE_SEPARATORReady = true; } return _LINE_SEPARATORContent; } }
            private static byte _LINE_SEPARATORContent = default;
            private static bool _LINE_SEPARATORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterCategory.html#LOWERCASE_LETTER"/>
            /// </summary>
            public static byte LOWERCASE_LETTER { get { if (!_LOWERCASE_LETTERReady) { _LOWERCASE_LETTERContent = SGetField<byte>(LocalBridgeClazz, "LOWERCASE_LETTER"); _LOWERCASE_LETTERReady = true; } return _LOWERCASE_LETTERContent; } }
            private static byte _LOWERCASE_LETTERContent = default;
            private static bool _LOWERCASE_LETTERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterCategory.html#MATH_SYMBOL"/>
            /// </summary>
            public static byte MATH_SYMBOL { get { if (!_MATH_SYMBOLReady) { _MATH_SYMBOLContent = SGetField<byte>(LocalBridgeClazz, "MATH_SYMBOL"); _MATH_SYMBOLReady = true; } return _MATH_SYMBOLContent; } }
            private static byte _MATH_SYMBOLContent = default;
            private static bool _MATH_SYMBOLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterCategory.html#MODIFIER_LETTER"/>
            /// </summary>
            public static byte MODIFIER_LETTER { get { if (!_MODIFIER_LETTERReady) { _MODIFIER_LETTERContent = SGetField<byte>(LocalBridgeClazz, "MODIFIER_LETTER"); _MODIFIER_LETTERReady = true; } return _MODIFIER_LETTERContent; } }
            private static byte _MODIFIER_LETTERContent = default;
            private static bool _MODIFIER_LETTERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterCategory.html#MODIFIER_SYMBOL"/>
            /// </summary>
            public static byte MODIFIER_SYMBOL { get { if (!_MODIFIER_SYMBOLReady) { _MODIFIER_SYMBOLContent = SGetField<byte>(LocalBridgeClazz, "MODIFIER_SYMBOL"); _MODIFIER_SYMBOLReady = true; } return _MODIFIER_SYMBOLContent; } }
            private static byte _MODIFIER_SYMBOLContent = default;
            private static bool _MODIFIER_SYMBOLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterCategory.html#NON_SPACING_MARK"/>
            /// </summary>
            public static byte NON_SPACING_MARK { get { if (!_NON_SPACING_MARKReady) { _NON_SPACING_MARKContent = SGetField<byte>(LocalBridgeClazz, "NON_SPACING_MARK"); _NON_SPACING_MARKReady = true; } return _NON_SPACING_MARKContent; } }
            private static byte _NON_SPACING_MARKContent = default;
            private static bool _NON_SPACING_MARKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterCategory.html#OTHER_LETTER"/>
            /// </summary>
            public static byte OTHER_LETTER { get { if (!_OTHER_LETTERReady) { _OTHER_LETTERContent = SGetField<byte>(LocalBridgeClazz, "OTHER_LETTER"); _OTHER_LETTERReady = true; } return _OTHER_LETTERContent; } }
            private static byte _OTHER_LETTERContent = default;
            private static bool _OTHER_LETTERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterCategory.html#OTHER_NUMBER"/>
            /// </summary>
            public static byte OTHER_NUMBER { get { if (!_OTHER_NUMBERReady) { _OTHER_NUMBERContent = SGetField<byte>(LocalBridgeClazz, "OTHER_NUMBER"); _OTHER_NUMBERReady = true; } return _OTHER_NUMBERContent; } }
            private static byte _OTHER_NUMBERContent = default;
            private static bool _OTHER_NUMBERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterCategory.html#OTHER_PUNCTUATION"/>
            /// </summary>
            public static byte OTHER_PUNCTUATION { get { if (!_OTHER_PUNCTUATIONReady) { _OTHER_PUNCTUATIONContent = SGetField<byte>(LocalBridgeClazz, "OTHER_PUNCTUATION"); _OTHER_PUNCTUATIONReady = true; } return _OTHER_PUNCTUATIONContent; } }
            private static byte _OTHER_PUNCTUATIONContent = default;
            private static bool _OTHER_PUNCTUATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterCategory.html#OTHER_SYMBOL"/>
            /// </summary>
            public static byte OTHER_SYMBOL { get { if (!_OTHER_SYMBOLReady) { _OTHER_SYMBOLContent = SGetField<byte>(LocalBridgeClazz, "OTHER_SYMBOL"); _OTHER_SYMBOLReady = true; } return _OTHER_SYMBOLContent; } }
            private static byte _OTHER_SYMBOLContent = default;
            private static bool _OTHER_SYMBOLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterCategory.html#PARAGRAPH_SEPARATOR"/>
            /// </summary>
            public static byte PARAGRAPH_SEPARATOR { get { if (!_PARAGRAPH_SEPARATORReady) { _PARAGRAPH_SEPARATORContent = SGetField<byte>(LocalBridgeClazz, "PARAGRAPH_SEPARATOR"); _PARAGRAPH_SEPARATORReady = true; } return _PARAGRAPH_SEPARATORContent; } }
            private static byte _PARAGRAPH_SEPARATORContent = default;
            private static bool _PARAGRAPH_SEPARATORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterCategory.html#PRIVATE_USE"/>
            /// </summary>
            public static byte PRIVATE_USE { get { if (!_PRIVATE_USEReady) { _PRIVATE_USEContent = SGetField<byte>(LocalBridgeClazz, "PRIVATE_USE"); _PRIVATE_USEReady = true; } return _PRIVATE_USEContent; } }
            private static byte _PRIVATE_USEContent = default;
            private static bool _PRIVATE_USEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterCategory.html#SPACE_SEPARATOR"/>
            /// </summary>
            public static byte SPACE_SEPARATOR { get { if (!_SPACE_SEPARATORReady) { _SPACE_SEPARATORContent = SGetField<byte>(LocalBridgeClazz, "SPACE_SEPARATOR"); _SPACE_SEPARATORReady = true; } return _SPACE_SEPARATORContent; } }
            private static byte _SPACE_SEPARATORContent = default;
            private static bool _SPACE_SEPARATORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterCategory.html#START_PUNCTUATION"/>
            /// </summary>
            public static byte START_PUNCTUATION { get { if (!_START_PUNCTUATIONReady) { _START_PUNCTUATIONContent = SGetField<byte>(LocalBridgeClazz, "START_PUNCTUATION"); _START_PUNCTUATIONReady = true; } return _START_PUNCTUATIONContent; } }
            private static byte _START_PUNCTUATIONContent = default;
            private static bool _START_PUNCTUATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterCategory.html#SURROGATE"/>
            /// </summary>
            public static byte SURROGATE { get { if (!_SURROGATEReady) { _SURROGATEContent = SGetField<byte>(LocalBridgeClazz, "SURROGATE"); _SURROGATEReady = true; } return _SURROGATEContent; } }
            private static byte _SURROGATEContent = default;
            private static bool _SURROGATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterCategory.html#TITLECASE_LETTER"/>
            /// </summary>
            public static byte TITLECASE_LETTER { get { if (!_TITLECASE_LETTERReady) { _TITLECASE_LETTERContent = SGetField<byte>(LocalBridgeClazz, "TITLECASE_LETTER"); _TITLECASE_LETTERReady = true; } return _TITLECASE_LETTERContent; } }
            private static byte _TITLECASE_LETTERContent = default;
            private static bool _TITLECASE_LETTERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterCategory.html#UNASSIGNED"/>
            /// </summary>
            public static byte UNASSIGNED { get { if (!_UNASSIGNEDReady) { _UNASSIGNEDContent = SGetField<byte>(LocalBridgeClazz, "UNASSIGNED"); _UNASSIGNEDReady = true; } return _UNASSIGNEDContent; } }
            private static byte _UNASSIGNEDContent = default;
            private static bool _UNASSIGNEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterCategory.html#UPPERCASE_LETTER"/>
            /// </summary>
            public static byte UPPERCASE_LETTER { get { if (!_UPPERCASE_LETTERReady) { _UPPERCASE_LETTERContent = SGetField<byte>(LocalBridgeClazz, "UPPERCASE_LETTER"); _UPPERCASE_LETTERReady = true; } return _UPPERCASE_LETTERContent; } }
            private static byte _UPPERCASE_LETTERContent = default;
            private static bool _UPPERCASE_LETTERReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ECharacterDirection
        public partial class ECharacterDirection
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#DIRECTIONALITY_ARABIC_NUMBER"/>
            /// </summary>
            public static byte DIRECTIONALITY_ARABIC_NUMBER { get { if (!_DIRECTIONALITY_ARABIC_NUMBERReady) { _DIRECTIONALITY_ARABIC_NUMBERContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_ARABIC_NUMBER"); _DIRECTIONALITY_ARABIC_NUMBERReady = true; } return _DIRECTIONALITY_ARABIC_NUMBERContent; } }
            private static byte _DIRECTIONALITY_ARABIC_NUMBERContent = default;
            private static bool _DIRECTIONALITY_ARABIC_NUMBERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#DIRECTIONALITY_BOUNDARY_NEUTRAL"/>
            /// </summary>
            public static byte DIRECTIONALITY_BOUNDARY_NEUTRAL { get { if (!_DIRECTIONALITY_BOUNDARY_NEUTRALReady) { _DIRECTIONALITY_BOUNDARY_NEUTRALContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_BOUNDARY_NEUTRAL"); _DIRECTIONALITY_BOUNDARY_NEUTRALReady = true; } return _DIRECTIONALITY_BOUNDARY_NEUTRALContent; } }
            private static byte _DIRECTIONALITY_BOUNDARY_NEUTRALContent = default;
            private static bool _DIRECTIONALITY_BOUNDARY_NEUTRALReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#DIRECTIONALITY_COMMON_NUMBER_SEPARATOR"/>
            /// </summary>
            public static byte DIRECTIONALITY_COMMON_NUMBER_SEPARATOR { get { if (!_DIRECTIONALITY_COMMON_NUMBER_SEPARATORReady) { _DIRECTIONALITY_COMMON_NUMBER_SEPARATORContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_COMMON_NUMBER_SEPARATOR"); _DIRECTIONALITY_COMMON_NUMBER_SEPARATORReady = true; } return _DIRECTIONALITY_COMMON_NUMBER_SEPARATORContent; } }
            private static byte _DIRECTIONALITY_COMMON_NUMBER_SEPARATORContent = default;
            private static bool _DIRECTIONALITY_COMMON_NUMBER_SEPARATORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#DIRECTIONALITY_EUROPEAN_NUMBER"/>
            /// </summary>
            public static byte DIRECTIONALITY_EUROPEAN_NUMBER { get { if (!_DIRECTIONALITY_EUROPEAN_NUMBERReady) { _DIRECTIONALITY_EUROPEAN_NUMBERContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_EUROPEAN_NUMBER"); _DIRECTIONALITY_EUROPEAN_NUMBERReady = true; } return _DIRECTIONALITY_EUROPEAN_NUMBERContent; } }
            private static byte _DIRECTIONALITY_EUROPEAN_NUMBERContent = default;
            private static bool _DIRECTIONALITY_EUROPEAN_NUMBERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR"/>
            /// </summary>
            public static byte DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR { get { if (!_DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATORReady) { _DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATORContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR"); _DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATORReady = true; } return _DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATORContent; } }
            private static byte _DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATORContent = default;
            private static bool _DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR"/>
            /// </summary>
            public static byte DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR { get { if (!_DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATORReady) { _DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATORContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR"); _DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATORReady = true; } return _DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATORContent; } }
            private static byte _DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATORContent = default;
            private static bool _DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#DIRECTIONALITY_LEFT_TO_RIGHT"/>
            /// </summary>
            public static byte DIRECTIONALITY_LEFT_TO_RIGHT { get { if (!_DIRECTIONALITY_LEFT_TO_RIGHTReady) { _DIRECTIONALITY_LEFT_TO_RIGHTContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_LEFT_TO_RIGHT"); _DIRECTIONALITY_LEFT_TO_RIGHTReady = true; } return _DIRECTIONALITY_LEFT_TO_RIGHTContent; } }
            private static byte _DIRECTIONALITY_LEFT_TO_RIGHTContent = default;
            private static bool _DIRECTIONALITY_LEFT_TO_RIGHTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING"/>
            /// </summary>
            public static byte DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING { get { if (!_DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDINGReady) { _DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDINGContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING"); _DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDINGReady = true; } return _DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDINGContent; } }
            private static byte _DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDINGContent = default;
            private static bool _DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE"/>
            /// </summary>
            public static byte DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE { get { if (!_DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDEReady) { _DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDEContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE"); _DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDEReady = true; } return _DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDEContent; } }
            private static byte _DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDEContent = default;
            private static bool _DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#DIRECTIONALITY_NONSPACING_MARK"/>
            /// </summary>
            public static byte DIRECTIONALITY_NONSPACING_MARK { get { if (!_DIRECTIONALITY_NONSPACING_MARKReady) { _DIRECTIONALITY_NONSPACING_MARKContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_NONSPACING_MARK"); _DIRECTIONALITY_NONSPACING_MARKReady = true; } return _DIRECTIONALITY_NONSPACING_MARKContent; } }
            private static byte _DIRECTIONALITY_NONSPACING_MARKContent = default;
            private static bool _DIRECTIONALITY_NONSPACING_MARKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#DIRECTIONALITY_OTHER_NEUTRALS"/>
            /// </summary>
            public static byte DIRECTIONALITY_OTHER_NEUTRALS { get { if (!_DIRECTIONALITY_OTHER_NEUTRALSReady) { _DIRECTIONALITY_OTHER_NEUTRALSContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_OTHER_NEUTRALS"); _DIRECTIONALITY_OTHER_NEUTRALSReady = true; } return _DIRECTIONALITY_OTHER_NEUTRALSContent; } }
            private static byte _DIRECTIONALITY_OTHER_NEUTRALSContent = default;
            private static bool _DIRECTIONALITY_OTHER_NEUTRALSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#DIRECTIONALITY_PARAGRAPH_SEPARATOR"/>
            /// </summary>
            public static byte DIRECTIONALITY_PARAGRAPH_SEPARATOR { get { if (!_DIRECTIONALITY_PARAGRAPH_SEPARATORReady) { _DIRECTIONALITY_PARAGRAPH_SEPARATORContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_PARAGRAPH_SEPARATOR"); _DIRECTIONALITY_PARAGRAPH_SEPARATORReady = true; } return _DIRECTIONALITY_PARAGRAPH_SEPARATORContent; } }
            private static byte _DIRECTIONALITY_PARAGRAPH_SEPARATORContent = default;
            private static bool _DIRECTIONALITY_PARAGRAPH_SEPARATORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#DIRECTIONALITY_POP_DIRECTIONAL_FORMAT"/>
            /// </summary>
            public static byte DIRECTIONALITY_POP_DIRECTIONAL_FORMAT { get { if (!_DIRECTIONALITY_POP_DIRECTIONAL_FORMATReady) { _DIRECTIONALITY_POP_DIRECTIONAL_FORMATContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_POP_DIRECTIONAL_FORMAT"); _DIRECTIONALITY_POP_DIRECTIONAL_FORMATReady = true; } return _DIRECTIONALITY_POP_DIRECTIONAL_FORMATContent; } }
            private static byte _DIRECTIONALITY_POP_DIRECTIONAL_FORMATContent = default;
            private static bool _DIRECTIONALITY_POP_DIRECTIONAL_FORMATReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#DIRECTIONALITY_RIGHT_TO_LEFT"/>
            /// </summary>
            public static byte DIRECTIONALITY_RIGHT_TO_LEFT { get { if (!_DIRECTIONALITY_RIGHT_TO_LEFTReady) { _DIRECTIONALITY_RIGHT_TO_LEFTContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_RIGHT_TO_LEFT"); _DIRECTIONALITY_RIGHT_TO_LEFTReady = true; } return _DIRECTIONALITY_RIGHT_TO_LEFTContent; } }
            private static byte _DIRECTIONALITY_RIGHT_TO_LEFTContent = default;
            private static bool _DIRECTIONALITY_RIGHT_TO_LEFTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC"/>
            /// </summary>
            public static byte DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC { get { if (!_DIRECTIONALITY_RIGHT_TO_LEFT_ARABICReady) { _DIRECTIONALITY_RIGHT_TO_LEFT_ARABICContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC"); _DIRECTIONALITY_RIGHT_TO_LEFT_ARABICReady = true; } return _DIRECTIONALITY_RIGHT_TO_LEFT_ARABICContent; } }
            private static byte _DIRECTIONALITY_RIGHT_TO_LEFT_ARABICContent = default;
            private static bool _DIRECTIONALITY_RIGHT_TO_LEFT_ARABICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING"/>
            /// </summary>
            public static byte DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING { get { if (!_DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDINGReady) { _DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDINGContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING"); _DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDINGReady = true; } return _DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDINGContent; } }
            private static byte _DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDINGContent = default;
            private static bool _DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE"/>
            /// </summary>
            public static byte DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE { get { if (!_DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDEReady) { _DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDEContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE"); _DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDEReady = true; } return _DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDEContent; } }
            private static byte _DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDEContent = default;
            private static bool _DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#DIRECTIONALITY_SEGMENT_SEPARATOR"/>
            /// </summary>
            public static byte DIRECTIONALITY_SEGMENT_SEPARATOR { get { if (!_DIRECTIONALITY_SEGMENT_SEPARATORReady) { _DIRECTIONALITY_SEGMENT_SEPARATORContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_SEGMENT_SEPARATOR"); _DIRECTIONALITY_SEGMENT_SEPARATORReady = true; } return _DIRECTIONALITY_SEGMENT_SEPARATORContent; } }
            private static byte _DIRECTIONALITY_SEGMENT_SEPARATORContent = default;
            private static bool _DIRECTIONALITY_SEGMENT_SEPARATORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#DIRECTIONALITY_UNDEFINED"/>
            /// </summary>
            public static byte DIRECTIONALITY_UNDEFINED { get { if (!_DIRECTIONALITY_UNDEFINEDReady) { _DIRECTIONALITY_UNDEFINEDContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_UNDEFINED"); _DIRECTIONALITY_UNDEFINEDReady = true; } return _DIRECTIONALITY_UNDEFINEDContent; } }
            private static byte _DIRECTIONALITY_UNDEFINEDContent = default;
            private static bool _DIRECTIONALITY_UNDEFINEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#DIRECTIONALITY_WHITESPACE"/>
            /// </summary>
            public static byte DIRECTIONALITY_WHITESPACE { get { if (!_DIRECTIONALITY_WHITESPACEReady) { _DIRECTIONALITY_WHITESPACEContent = SGetField<byte>(LocalBridgeClazz, "DIRECTIONALITY_WHITESPACE"); _DIRECTIONALITY_WHITESPACEReady = true; } return _DIRECTIONALITY_WHITESPACEContent; } }
            private static byte _DIRECTIONALITY_WHITESPACEContent = default;
            private static bool _DIRECTIONALITY_WHITESPACEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#FIRST_STRONG_ISOLATE"/>
            /// </summary>
            public static byte FIRST_STRONG_ISOLATE { get { if (!_FIRST_STRONG_ISOLATEReady) { _FIRST_STRONG_ISOLATEContent = SGetField<byte>(LocalBridgeClazz, "FIRST_STRONG_ISOLATE"); _FIRST_STRONG_ISOLATEReady = true; } return _FIRST_STRONG_ISOLATEContent; } }
            private static byte _FIRST_STRONG_ISOLATEContent = default;
            private static bool _FIRST_STRONG_ISOLATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#LEFT_TO_RIGHT_ISOLATE"/>
            /// </summary>
            public static byte LEFT_TO_RIGHT_ISOLATE { get { if (!_LEFT_TO_RIGHT_ISOLATEReady) { _LEFT_TO_RIGHT_ISOLATEContent = SGetField<byte>(LocalBridgeClazz, "LEFT_TO_RIGHT_ISOLATE"); _LEFT_TO_RIGHT_ISOLATEReady = true; } return _LEFT_TO_RIGHT_ISOLATEContent; } }
            private static byte _LEFT_TO_RIGHT_ISOLATEContent = default;
            private static bool _LEFT_TO_RIGHT_ISOLATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#POP_DIRECTIONAL_ISOLATE"/>
            /// </summary>
            public static byte POP_DIRECTIONAL_ISOLATE { get { if (!_POP_DIRECTIONAL_ISOLATEReady) { _POP_DIRECTIONAL_ISOLATEContent = SGetField<byte>(LocalBridgeClazz, "POP_DIRECTIONAL_ISOLATE"); _POP_DIRECTIONAL_ISOLATEReady = true; } return _POP_DIRECTIONAL_ISOLATEContent; } }
            private static byte _POP_DIRECTIONAL_ISOLATEContent = default;
            private static bool _POP_DIRECTIONAL_ISOLATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#RIGHT_TO_LEFT_ISOLATE"/>
            /// </summary>
            public static byte RIGHT_TO_LEFT_ISOLATE { get { if (!_RIGHT_TO_LEFT_ISOLATEReady) { _RIGHT_TO_LEFT_ISOLATEContent = SGetField<byte>(LocalBridgeClazz, "RIGHT_TO_LEFT_ISOLATE"); _RIGHT_TO_LEFT_ISOLATEReady = true; } return _RIGHT_TO_LEFT_ISOLATEContent; } }
            private static byte _RIGHT_TO_LEFT_ISOLATEContent = default;
            private static bool _RIGHT_TO_LEFT_ISOLATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#ARABIC_NUMBER"/>
            /// </summary>
            public static int ARABIC_NUMBER { get { if (!_ARABIC_NUMBERReady) { _ARABIC_NUMBERContent = SGetField<int>(LocalBridgeClazz, "ARABIC_NUMBER"); _ARABIC_NUMBERReady = true; } return _ARABIC_NUMBERContent; } }
            private static int _ARABIC_NUMBERContent = default;
            private static bool _ARABIC_NUMBERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#BLOCK_SEPARATOR"/>
            /// </summary>
            public static int BLOCK_SEPARATOR { get { if (!_BLOCK_SEPARATORReady) { _BLOCK_SEPARATORContent = SGetField<int>(LocalBridgeClazz, "BLOCK_SEPARATOR"); _BLOCK_SEPARATORReady = true; } return _BLOCK_SEPARATORContent; } }
            private static int _BLOCK_SEPARATORContent = default;
            private static bool _BLOCK_SEPARATORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#BOUNDARY_NEUTRAL"/>
            /// </summary>
            public static int BOUNDARY_NEUTRAL { get { if (!_BOUNDARY_NEUTRALReady) { _BOUNDARY_NEUTRALContent = SGetField<int>(LocalBridgeClazz, "BOUNDARY_NEUTRAL"); _BOUNDARY_NEUTRALReady = true; } return _BOUNDARY_NEUTRALContent; } }
            private static int _BOUNDARY_NEUTRALContent = default;
            private static bool _BOUNDARY_NEUTRALReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#COMMON_NUMBER_SEPARATOR"/>
            /// </summary>
            public static int COMMON_NUMBER_SEPARATOR { get { if (!_COMMON_NUMBER_SEPARATORReady) { _COMMON_NUMBER_SEPARATORContent = SGetField<int>(LocalBridgeClazz, "COMMON_NUMBER_SEPARATOR"); _COMMON_NUMBER_SEPARATORReady = true; } return _COMMON_NUMBER_SEPARATORContent; } }
            private static int _COMMON_NUMBER_SEPARATORContent = default;
            private static bool _COMMON_NUMBER_SEPARATORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#DIR_NON_SPACING_MARK"/>
            /// </summary>
            public static int DIR_NON_SPACING_MARK { get { if (!_DIR_NON_SPACING_MARKReady) { _DIR_NON_SPACING_MARKContent = SGetField<int>(LocalBridgeClazz, "DIR_NON_SPACING_MARK"); _DIR_NON_SPACING_MARKReady = true; } return _DIR_NON_SPACING_MARKContent; } }
            private static int _DIR_NON_SPACING_MARKContent = default;
            private static bool _DIR_NON_SPACING_MARKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#EUROPEAN_NUMBER"/>
            /// </summary>
            public static int EUROPEAN_NUMBER { get { if (!_EUROPEAN_NUMBERReady) { _EUROPEAN_NUMBERContent = SGetField<int>(LocalBridgeClazz, "EUROPEAN_NUMBER"); _EUROPEAN_NUMBERReady = true; } return _EUROPEAN_NUMBERContent; } }
            private static int _EUROPEAN_NUMBERContent = default;
            private static bool _EUROPEAN_NUMBERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#EUROPEAN_NUMBER_SEPARATOR"/>
            /// </summary>
            public static int EUROPEAN_NUMBER_SEPARATOR { get { if (!_EUROPEAN_NUMBER_SEPARATORReady) { _EUROPEAN_NUMBER_SEPARATORContent = SGetField<int>(LocalBridgeClazz, "EUROPEAN_NUMBER_SEPARATOR"); _EUROPEAN_NUMBER_SEPARATORReady = true; } return _EUROPEAN_NUMBER_SEPARATORContent; } }
            private static int _EUROPEAN_NUMBER_SEPARATORContent = default;
            private static bool _EUROPEAN_NUMBER_SEPARATORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#EUROPEAN_NUMBER_TERMINATOR"/>
            /// </summary>
            public static int EUROPEAN_NUMBER_TERMINATOR { get { if (!_EUROPEAN_NUMBER_TERMINATORReady) { _EUROPEAN_NUMBER_TERMINATORContent = SGetField<int>(LocalBridgeClazz, "EUROPEAN_NUMBER_TERMINATOR"); _EUROPEAN_NUMBER_TERMINATORReady = true; } return _EUROPEAN_NUMBER_TERMINATORContent; } }
            private static int _EUROPEAN_NUMBER_TERMINATORContent = default;
            private static bool _EUROPEAN_NUMBER_TERMINATORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#LEFT_TO_RIGHT"/>
            /// </summary>
            public static int LEFT_TO_RIGHT { get { if (!_LEFT_TO_RIGHTReady) { _LEFT_TO_RIGHTContent = SGetField<int>(LocalBridgeClazz, "LEFT_TO_RIGHT"); _LEFT_TO_RIGHTReady = true; } return _LEFT_TO_RIGHTContent; } }
            private static int _LEFT_TO_RIGHTContent = default;
            private static bool _LEFT_TO_RIGHTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#LEFT_TO_RIGHT_EMBEDDING"/>
            /// </summary>
            public static int LEFT_TO_RIGHT_EMBEDDING { get { if (!_LEFT_TO_RIGHT_EMBEDDINGReady) { _LEFT_TO_RIGHT_EMBEDDINGContent = SGetField<int>(LocalBridgeClazz, "LEFT_TO_RIGHT_EMBEDDING"); _LEFT_TO_RIGHT_EMBEDDINGReady = true; } return _LEFT_TO_RIGHT_EMBEDDINGContent; } }
            private static int _LEFT_TO_RIGHT_EMBEDDINGContent = default;
            private static bool _LEFT_TO_RIGHT_EMBEDDINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#LEFT_TO_RIGHT_OVERRIDE"/>
            /// </summary>
            public static int LEFT_TO_RIGHT_OVERRIDE { get { if (!_LEFT_TO_RIGHT_OVERRIDEReady) { _LEFT_TO_RIGHT_OVERRIDEContent = SGetField<int>(LocalBridgeClazz, "LEFT_TO_RIGHT_OVERRIDE"); _LEFT_TO_RIGHT_OVERRIDEReady = true; } return _LEFT_TO_RIGHT_OVERRIDEContent; } }
            private static int _LEFT_TO_RIGHT_OVERRIDEContent = default;
            private static bool _LEFT_TO_RIGHT_OVERRIDEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#OTHER_NEUTRAL"/>
            /// </summary>
            public static int OTHER_NEUTRAL { get { if (!_OTHER_NEUTRALReady) { _OTHER_NEUTRALContent = SGetField<int>(LocalBridgeClazz, "OTHER_NEUTRAL"); _OTHER_NEUTRALReady = true; } return _OTHER_NEUTRALContent; } }
            private static int _OTHER_NEUTRALContent = default;
            private static bool _OTHER_NEUTRALReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#POP_DIRECTIONAL_FORMAT"/>
            /// </summary>
            public static int POP_DIRECTIONAL_FORMAT { get { if (!_POP_DIRECTIONAL_FORMATReady) { _POP_DIRECTIONAL_FORMATContent = SGetField<int>(LocalBridgeClazz, "POP_DIRECTIONAL_FORMAT"); _POP_DIRECTIONAL_FORMATReady = true; } return _POP_DIRECTIONAL_FORMATContent; } }
            private static int _POP_DIRECTIONAL_FORMATContent = default;
            private static bool _POP_DIRECTIONAL_FORMATReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#RIGHT_TO_LEFT"/>
            /// </summary>
            public static int RIGHT_TO_LEFT { get { if (!_RIGHT_TO_LEFTReady) { _RIGHT_TO_LEFTContent = SGetField<int>(LocalBridgeClazz, "RIGHT_TO_LEFT"); _RIGHT_TO_LEFTReady = true; } return _RIGHT_TO_LEFTContent; } }
            private static int _RIGHT_TO_LEFTContent = default;
            private static bool _RIGHT_TO_LEFTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#RIGHT_TO_LEFT_ARABIC"/>
            /// </summary>
            public static int RIGHT_TO_LEFT_ARABIC { get { if (!_RIGHT_TO_LEFT_ARABICReady) { _RIGHT_TO_LEFT_ARABICContent = SGetField<int>(LocalBridgeClazz, "RIGHT_TO_LEFT_ARABIC"); _RIGHT_TO_LEFT_ARABICReady = true; } return _RIGHT_TO_LEFT_ARABICContent; } }
            private static int _RIGHT_TO_LEFT_ARABICContent = default;
            private static bool _RIGHT_TO_LEFT_ARABICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#RIGHT_TO_LEFT_EMBEDDING"/>
            /// </summary>
            public static int RIGHT_TO_LEFT_EMBEDDING { get { if (!_RIGHT_TO_LEFT_EMBEDDINGReady) { _RIGHT_TO_LEFT_EMBEDDINGContent = SGetField<int>(LocalBridgeClazz, "RIGHT_TO_LEFT_EMBEDDING"); _RIGHT_TO_LEFT_EMBEDDINGReady = true; } return _RIGHT_TO_LEFT_EMBEDDINGContent; } }
            private static int _RIGHT_TO_LEFT_EMBEDDINGContent = default;
            private static bool _RIGHT_TO_LEFT_EMBEDDINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#RIGHT_TO_LEFT_OVERRIDE"/>
            /// </summary>
            public static int RIGHT_TO_LEFT_OVERRIDE { get { if (!_RIGHT_TO_LEFT_OVERRIDEReady) { _RIGHT_TO_LEFT_OVERRIDEContent = SGetField<int>(LocalBridgeClazz, "RIGHT_TO_LEFT_OVERRIDE"); _RIGHT_TO_LEFT_OVERRIDEReady = true; } return _RIGHT_TO_LEFT_OVERRIDEContent; } }
            private static int _RIGHT_TO_LEFT_OVERRIDEContent = default;
            private static bool _RIGHT_TO_LEFT_OVERRIDEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#SEGMENT_SEPARATOR"/>
            /// </summary>
            public static int SEGMENT_SEPARATOR { get { if (!_SEGMENT_SEPARATORReady) { _SEGMENT_SEPARATORContent = SGetField<int>(LocalBridgeClazz, "SEGMENT_SEPARATOR"); _SEGMENT_SEPARATORReady = true; } return _SEGMENT_SEPARATORContent; } }
            private static int _SEGMENT_SEPARATORContent = default;
            private static bool _SEGMENT_SEPARATORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html#WHITE_SPACE_NEUTRAL"/>
            /// </summary>
            public static int WHITE_SPACE_NEUTRAL { get { if (!_WHITE_SPACE_NEUTRALReady) { _WHITE_SPACE_NEUTRALContent = SGetField<int>(LocalBridgeClazz, "WHITE_SPACE_NEUTRAL"); _WHITE_SPACE_NEUTRALReady = true; } return _WHITE_SPACE_NEUTRALContent; } }
            private static int _WHITE_SPACE_NEUTRALContent = default;
            private static bool _WHITE_SPACE_NEUTRALReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
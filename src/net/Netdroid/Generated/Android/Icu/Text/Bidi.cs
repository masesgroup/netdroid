/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Icu.Text
{
    #region Bidi
    public partial class Bidi
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#%3Cinit%3E(char[],int,byte[],int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="byte"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        public Bidi(char[] arg0, int arg1, byte[] arg2, int arg3, int arg4, int arg5)
            : base(arg0, arg1, arg2, arg3, arg4, arg5)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#%3Cinit%3E(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public Bidi(int arg0, int arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#%3Cinit%3E(java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public Bidi(Java.Lang.String arg0, int arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#%3Cinit%3E(java.text.AttributedCharacterIterator)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Text.AttributedCharacterIterator"/></param>
        public Bidi(Java.Text.AttributedCharacterIterator arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#LEVEL_DEFAULT_LTR"/>
        /// </summary>
        public static byte LEVEL_DEFAULT_LTR { get { if (!_LEVEL_DEFAULT_LTRReady) { _LEVEL_DEFAULT_LTRContent = SGetField<byte>(LocalBridgeClazz, "LEVEL_DEFAULT_LTR"); _LEVEL_DEFAULT_LTRReady = true; } return _LEVEL_DEFAULT_LTRContent; } }
        private static byte _LEVEL_DEFAULT_LTRContent = default;
        private static bool _LEVEL_DEFAULT_LTRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#LEVEL_DEFAULT_RTL"/>
        /// </summary>
        public static byte LEVEL_DEFAULT_RTL { get { if (!_LEVEL_DEFAULT_RTLReady) { _LEVEL_DEFAULT_RTLContent = SGetField<byte>(LocalBridgeClazz, "LEVEL_DEFAULT_RTL"); _LEVEL_DEFAULT_RTLReady = true; } return _LEVEL_DEFAULT_RTLContent; } }
        private static byte _LEVEL_DEFAULT_RTLContent = default;
        private static bool _LEVEL_DEFAULT_RTLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#LEVEL_OVERRIDE"/>
        /// </summary>
        public static byte LEVEL_OVERRIDE { get { if (!_LEVEL_OVERRIDEReady) { _LEVEL_OVERRIDEContent = SGetField<byte>(LocalBridgeClazz, "LEVEL_OVERRIDE"); _LEVEL_OVERRIDEReady = true; } return _LEVEL_OVERRIDEContent; } }
        private static byte _LEVEL_OVERRIDEContent = default;
        private static bool _LEVEL_OVERRIDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#LTR"/>
        /// </summary>
        public static byte LTR { get { if (!_LTRReady) { _LTRContent = SGetField<byte>(LocalBridgeClazz, "LTR"); _LTRReady = true; } return _LTRContent; } }
        private static byte _LTRContent = default;
        private static bool _LTRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#MAX_EXPLICIT_LEVEL"/>
        /// </summary>
        public static byte MAX_EXPLICIT_LEVEL { get { if (!_MAX_EXPLICIT_LEVELReady) { _MAX_EXPLICIT_LEVELContent = SGetField<byte>(LocalBridgeClazz, "MAX_EXPLICIT_LEVEL"); _MAX_EXPLICIT_LEVELReady = true; } return _MAX_EXPLICIT_LEVELContent; } }
        private static byte _MAX_EXPLICIT_LEVELContent = default;
        private static bool _MAX_EXPLICIT_LEVELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#MIXED"/>
        /// </summary>
        public static byte MIXED { get { if (!_MIXEDReady) { _MIXEDContent = SGetField<byte>(LocalBridgeClazz, "MIXED"); _MIXEDReady = true; } return _MIXEDContent; } }
        private static byte _MIXEDContent = default;
        private static bool _MIXEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#NEUTRAL"/>
        /// </summary>
        public static byte NEUTRAL { get { if (!_NEUTRALReady) { _NEUTRALContent = SGetField<byte>(LocalBridgeClazz, "NEUTRAL"); _NEUTRALReady = true; } return _NEUTRALContent; } }
        private static byte _NEUTRALContent = default;
        private static bool _NEUTRALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#RTL"/>
        /// </summary>
        public static byte RTL { get { if (!_RTLReady) { _RTLContent = SGetField<byte>(LocalBridgeClazz, "RTL"); _RTLReady = true; } return _RTLContent; } }
        private static byte _RTLContent = default;
        private static bool _RTLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#DIRECTION_DEFAULT_LEFT_TO_RIGHT"/>
        /// </summary>
        public static int DIRECTION_DEFAULT_LEFT_TO_RIGHT { get { if (!_DIRECTION_DEFAULT_LEFT_TO_RIGHTReady) { _DIRECTION_DEFAULT_LEFT_TO_RIGHTContent = SGetField<int>(LocalBridgeClazz, "DIRECTION_DEFAULT_LEFT_TO_RIGHT"); _DIRECTION_DEFAULT_LEFT_TO_RIGHTReady = true; } return _DIRECTION_DEFAULT_LEFT_TO_RIGHTContent; } }
        private static int _DIRECTION_DEFAULT_LEFT_TO_RIGHTContent = default;
        private static bool _DIRECTION_DEFAULT_LEFT_TO_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#DIRECTION_DEFAULT_RIGHT_TO_LEFT"/>
        /// </summary>
        public static int DIRECTION_DEFAULT_RIGHT_TO_LEFT { get { if (!_DIRECTION_DEFAULT_RIGHT_TO_LEFTReady) { _DIRECTION_DEFAULT_RIGHT_TO_LEFTContent = SGetField<int>(LocalBridgeClazz, "DIRECTION_DEFAULT_RIGHT_TO_LEFT"); _DIRECTION_DEFAULT_RIGHT_TO_LEFTReady = true; } return _DIRECTION_DEFAULT_RIGHT_TO_LEFTContent; } }
        private static int _DIRECTION_DEFAULT_RIGHT_TO_LEFTContent = default;
        private static bool _DIRECTION_DEFAULT_RIGHT_TO_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#DIRECTION_LEFT_TO_RIGHT"/>
        /// </summary>
        public static int DIRECTION_LEFT_TO_RIGHT { get { if (!_DIRECTION_LEFT_TO_RIGHTReady) { _DIRECTION_LEFT_TO_RIGHTContent = SGetField<int>(LocalBridgeClazz, "DIRECTION_LEFT_TO_RIGHT"); _DIRECTION_LEFT_TO_RIGHTReady = true; } return _DIRECTION_LEFT_TO_RIGHTContent; } }
        private static int _DIRECTION_LEFT_TO_RIGHTContent = default;
        private static bool _DIRECTION_LEFT_TO_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#DIRECTION_RIGHT_TO_LEFT"/>
        /// </summary>
        public static int DIRECTION_RIGHT_TO_LEFT { get { if (!_DIRECTION_RIGHT_TO_LEFTReady) { _DIRECTION_RIGHT_TO_LEFTContent = SGetField<int>(LocalBridgeClazz, "DIRECTION_RIGHT_TO_LEFT"); _DIRECTION_RIGHT_TO_LEFTReady = true; } return _DIRECTION_RIGHT_TO_LEFTContent; } }
        private static int _DIRECTION_RIGHT_TO_LEFTContent = default;
        private static bool _DIRECTION_RIGHT_TO_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#MAP_NOWHERE"/>
        /// </summary>
        public static int MAP_NOWHERE { get { if (!_MAP_NOWHEREReady) { _MAP_NOWHEREContent = SGetField<int>(LocalBridgeClazz, "MAP_NOWHERE"); _MAP_NOWHEREReady = true; } return _MAP_NOWHEREContent; } }
        private static int _MAP_NOWHEREContent = default;
        private static bool _MAP_NOWHEREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#OPTION_DEFAULT"/>
        /// </summary>
        public static int OPTION_DEFAULT { get { if (!_OPTION_DEFAULTReady) { _OPTION_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "OPTION_DEFAULT"); _OPTION_DEFAULTReady = true; } return _OPTION_DEFAULTContent; } }
        private static int _OPTION_DEFAULTContent = default;
        private static bool _OPTION_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#OPTION_INSERT_MARKS"/>
        /// </summary>
        public static int OPTION_INSERT_MARKS { get { if (!_OPTION_INSERT_MARKSReady) { _OPTION_INSERT_MARKSContent = SGetField<int>(LocalBridgeClazz, "OPTION_INSERT_MARKS"); _OPTION_INSERT_MARKSReady = true; } return _OPTION_INSERT_MARKSContent; } }
        private static int _OPTION_INSERT_MARKSContent = default;
        private static bool _OPTION_INSERT_MARKSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#OPTION_REMOVE_CONTROLS"/>
        /// </summary>
        public static int OPTION_REMOVE_CONTROLS { get { if (!_OPTION_REMOVE_CONTROLSReady) { _OPTION_REMOVE_CONTROLSContent = SGetField<int>(LocalBridgeClazz, "OPTION_REMOVE_CONTROLS"); _OPTION_REMOVE_CONTROLSReady = true; } return _OPTION_REMOVE_CONTROLSContent; } }
        private static int _OPTION_REMOVE_CONTROLSContent = default;
        private static bool _OPTION_REMOVE_CONTROLSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#OPTION_STREAMING"/>
        /// </summary>
        public static int OPTION_STREAMING { get { if (!_OPTION_STREAMINGReady) { _OPTION_STREAMINGContent = SGetField<int>(LocalBridgeClazz, "OPTION_STREAMING"); _OPTION_STREAMINGReady = true; } return _OPTION_STREAMINGContent; } }
        private static int _OPTION_STREAMINGContent = default;
        private static bool _OPTION_STREAMINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#DO_MIRRORING"/>
        /// </summary>
        public static short DO_MIRRORING { get { if (!_DO_MIRRORINGReady) { _DO_MIRRORINGContent = SGetField<short>(LocalBridgeClazz, "DO_MIRRORING"); _DO_MIRRORINGReady = true; } return _DO_MIRRORINGContent; } }
        private static short _DO_MIRRORINGContent = default;
        private static bool _DO_MIRRORINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#INSERT_LRM_FOR_NUMERIC"/>
        /// </summary>
        public static short INSERT_LRM_FOR_NUMERIC { get { if (!_INSERT_LRM_FOR_NUMERICReady) { _INSERT_LRM_FOR_NUMERICContent = SGetField<short>(LocalBridgeClazz, "INSERT_LRM_FOR_NUMERIC"); _INSERT_LRM_FOR_NUMERICReady = true; } return _INSERT_LRM_FOR_NUMERICContent; } }
        private static short _INSERT_LRM_FOR_NUMERICContent = default;
        private static bool _INSERT_LRM_FOR_NUMERICReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#KEEP_BASE_COMBINING"/>
        /// </summary>
        public static short KEEP_BASE_COMBINING { get { if (!_KEEP_BASE_COMBININGReady) { _KEEP_BASE_COMBININGContent = SGetField<short>(LocalBridgeClazz, "KEEP_BASE_COMBINING"); _KEEP_BASE_COMBININGReady = true; } return _KEEP_BASE_COMBININGContent; } }
        private static short _KEEP_BASE_COMBININGContent = default;
        private static bool _KEEP_BASE_COMBININGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#OUTPUT_REVERSE"/>
        /// </summary>
        public static short OUTPUT_REVERSE { get { if (!_OUTPUT_REVERSEReady) { _OUTPUT_REVERSEContent = SGetField<short>(LocalBridgeClazz, "OUTPUT_REVERSE"); _OUTPUT_REVERSEReady = true; } return _OUTPUT_REVERSEContent; } }
        private static short _OUTPUT_REVERSEContent = default;
        private static bool _OUTPUT_REVERSEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#REMOVE_BIDI_CONTROLS"/>
        /// </summary>
        public static short REMOVE_BIDI_CONTROLS { get { if (!_REMOVE_BIDI_CONTROLSReady) { _REMOVE_BIDI_CONTROLSContent = SGetField<short>(LocalBridgeClazz, "REMOVE_BIDI_CONTROLS"); _REMOVE_BIDI_CONTROLSReady = true; } return _REMOVE_BIDI_CONTROLSContent; } }
        private static short _REMOVE_BIDI_CONTROLSContent = default;
        private static bool _REMOVE_BIDI_CONTROLSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#REORDER_DEFAULT"/>
        /// </summary>
        public static short REORDER_DEFAULT { get { if (!_REORDER_DEFAULTReady) { _REORDER_DEFAULTContent = SGetField<short>(LocalBridgeClazz, "REORDER_DEFAULT"); _REORDER_DEFAULTReady = true; } return _REORDER_DEFAULTContent; } }
        private static short _REORDER_DEFAULTContent = default;
        private static bool _REORDER_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#REORDER_GROUP_NUMBERS_WITH_R"/>
        /// </summary>
        public static short REORDER_GROUP_NUMBERS_WITH_R { get { if (!_REORDER_GROUP_NUMBERS_WITH_RReady) { _REORDER_GROUP_NUMBERS_WITH_RContent = SGetField<short>(LocalBridgeClazz, "REORDER_GROUP_NUMBERS_WITH_R"); _REORDER_GROUP_NUMBERS_WITH_RReady = true; } return _REORDER_GROUP_NUMBERS_WITH_RContent; } }
        private static short _REORDER_GROUP_NUMBERS_WITH_RContent = default;
        private static bool _REORDER_GROUP_NUMBERS_WITH_RReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#REORDER_INVERSE_FOR_NUMBERS_SPECIAL"/>
        /// </summary>
        public static short REORDER_INVERSE_FOR_NUMBERS_SPECIAL { get { if (!_REORDER_INVERSE_FOR_NUMBERS_SPECIALReady) { _REORDER_INVERSE_FOR_NUMBERS_SPECIALContent = SGetField<short>(LocalBridgeClazz, "REORDER_INVERSE_FOR_NUMBERS_SPECIAL"); _REORDER_INVERSE_FOR_NUMBERS_SPECIALReady = true; } return _REORDER_INVERSE_FOR_NUMBERS_SPECIALContent; } }
        private static short _REORDER_INVERSE_FOR_NUMBERS_SPECIALContent = default;
        private static bool _REORDER_INVERSE_FOR_NUMBERS_SPECIALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#REORDER_INVERSE_LIKE_DIRECT"/>
        /// </summary>
        public static short REORDER_INVERSE_LIKE_DIRECT { get { if (!_REORDER_INVERSE_LIKE_DIRECTReady) { _REORDER_INVERSE_LIKE_DIRECTContent = SGetField<short>(LocalBridgeClazz, "REORDER_INVERSE_LIKE_DIRECT"); _REORDER_INVERSE_LIKE_DIRECTReady = true; } return _REORDER_INVERSE_LIKE_DIRECTContent; } }
        private static short _REORDER_INVERSE_LIKE_DIRECTContent = default;
        private static bool _REORDER_INVERSE_LIKE_DIRECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#REORDER_INVERSE_NUMBERS_AS_L"/>
        /// </summary>
        public static short REORDER_INVERSE_NUMBERS_AS_L { get { if (!_REORDER_INVERSE_NUMBERS_AS_LReady) { _REORDER_INVERSE_NUMBERS_AS_LContent = SGetField<short>(LocalBridgeClazz, "REORDER_INVERSE_NUMBERS_AS_L"); _REORDER_INVERSE_NUMBERS_AS_LReady = true; } return _REORDER_INVERSE_NUMBERS_AS_LContent; } }
        private static short _REORDER_INVERSE_NUMBERS_AS_LContent = default;
        private static bool _REORDER_INVERSE_NUMBERS_AS_LReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#REORDER_NUMBERS_SPECIAL"/>
        /// </summary>
        public static short REORDER_NUMBERS_SPECIAL { get { if (!_REORDER_NUMBERS_SPECIALReady) { _REORDER_NUMBERS_SPECIALContent = SGetField<short>(LocalBridgeClazz, "REORDER_NUMBERS_SPECIAL"); _REORDER_NUMBERS_SPECIALReady = true; } return _REORDER_NUMBERS_SPECIALContent; } }
        private static short _REORDER_NUMBERS_SPECIALContent = default;
        private static bool _REORDER_NUMBERS_SPECIALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#REORDER_RUNS_ONLY"/>
        /// </summary>
        public static short REORDER_RUNS_ONLY { get { if (!_REORDER_RUNS_ONLYReady) { _REORDER_RUNS_ONLYContent = SGetField<short>(LocalBridgeClazz, "REORDER_RUNS_ONLY"); _REORDER_RUNS_ONLYReady = true; } return _REORDER_RUNS_ONLYContent; } }
        private static short _REORDER_RUNS_ONLYContent = default;
        private static bool _REORDER_RUNS_ONLYReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#requiresBidi(char[],int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool RequiresBidi(char[] arg0, int arg1, int arg2)
        {
            return SExecute<bool>(LocalBridgeClazz, "requiresBidi", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#getBaseDirection(java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <returns><see cref="byte"/></returns>
        public static byte GetBaseDirection(Java.Lang.CharSequence arg0)
        {
            return SExecuteWithSignature<byte>(LocalBridgeClazz, "getBaseDirection", "(Ljava/lang/CharSequence;)B", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#invertMap(int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int[] InvertMap(int[] arg0)
        {
            return SExecuteWithSignatureArray<int>(LocalBridgeClazz, "invertMap", "([I)[I", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#reorderLogical(byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <returns><see cref="int"/></returns>
        public static int[] ReorderLogical(byte[] arg0)
        {
            return SExecuteWithSignatureArray<int>(LocalBridgeClazz, "reorderLogical", "([B)[I", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#reorderVisual(byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <returns><see cref="int"/></returns>
        public static int[] ReorderVisual(byte[] arg0)
        {
            return SExecuteWithSignatureArray<int>(LocalBridgeClazz, "reorderVisual", "([B)[I", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#writeReverse(java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String WriteReverse(Java.Lang.String arg0, int arg1)
        {
            return SExecute<Java.Lang.String>(LocalBridgeClazz, "writeReverse", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#reorderVisually(byte[],int,java.lang.Object[],int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="object"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void ReorderVisually(byte[] arg0, int arg1, object[] arg2, int arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "reorderVisually", arg0, arg1, arg2, arg3, arg4);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#createLineBidi(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.Icu.Text.Bidi"/></returns>
        public Android.Icu.Text.Bidi CreateLineBidi(int arg0, int arg1)
        {
            return IExecute<Android.Icu.Text.Bidi>("createLineBidi", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#setLine(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.Icu.Text.Bidi"/></returns>
        public Android.Icu.Text.Bidi SetLine(int arg0, int arg1)
        {
            return IExecute<Android.Icu.Text.Bidi>("setLine", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#getCustomClassifier()"/>
        /// </summary>
        /// <returns><see cref="Android.Icu.Text.BidiClassifier"/></returns>
        public Android.Icu.Text.BidiClassifier GetCustomClassifier()
        {
            return IExecuteWithSignature<Android.Icu.Text.BidiClassifier>("getCustomClassifier", "()Landroid/icu/text/BidiClassifier;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#getLogicalRun(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Icu.Text.BidiRun"/></returns>
        public Android.Icu.Text.BidiRun GetLogicalRun(int arg0)
        {
            return IExecuteWithSignature<Android.Icu.Text.BidiRun>("getLogicalRun", "(I)Landroid/icu/text/BidiRun;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#getParagraph(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Icu.Text.BidiRun"/></returns>
        public Android.Icu.Text.BidiRun GetParagraph(int arg0)
        {
            return IExecuteWithSignature<Android.Icu.Text.BidiRun>("getParagraph", "(I)Landroid/icu/text/BidiRun;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#getParagraphByIndex(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Icu.Text.BidiRun"/></returns>
        public Android.Icu.Text.BidiRun GetParagraphByIndex(int arg0)
        {
            return IExecuteWithSignature<Android.Icu.Text.BidiRun>("getParagraphByIndex", "(I)Landroid/icu/text/BidiRun;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#getVisualRun(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Icu.Text.BidiRun"/></returns>
        public Android.Icu.Text.BidiRun GetVisualRun(int arg0)
        {
            return IExecuteWithSignature<Android.Icu.Text.BidiRun>("getVisualRun", "(I)Landroid/icu/text/BidiRun;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#baseIsLeftToRight()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool BaseIsLeftToRight()
        {
            return IExecuteWithSignature<bool>("baseIsLeftToRight", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#isInverse()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsInverse()
        {
            return IExecuteWithSignature<bool>("isInverse", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#isLeftToRight()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsLeftToRight()
        {
            return IExecuteWithSignature<bool>("isLeftToRight", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#isMixed()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsMixed()
        {
            return IExecuteWithSignature<bool>("isMixed", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#isOrderParagraphsLTR()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsOrderParagraphsLTR()
        {
            return IExecuteWithSignature<bool>("isOrderParagraphsLTR", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#isRightToLeft()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsRightToLeft()
        {
            return IExecuteWithSignature<bool>("isRightToLeft", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#getDirection()"/>
        /// </summary>
        /// <returns><see cref="byte"/></returns>
        public byte GetDirection()
        {
            return IExecuteWithSignature<byte>("getDirection", "()B");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#getLevelAt(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="byte"/></returns>
        public byte GetLevelAt(int arg0)
        {
            return IExecuteWithSignature<byte>("getLevelAt", "(I)B", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#getParaLevel()"/>
        /// </summary>
        /// <returns><see cref="byte"/></returns>
        public byte GetParaLevel()
        {
            return IExecuteWithSignature<byte>("getParaLevel", "()B");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#getLevels()"/>
        /// </summary>
        /// <returns><see cref="byte"/></returns>
        public byte[] GetLevels()
        {
            return IExecuteWithSignatureArray<byte>("getLevels", "()[B");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#getText()"/>
        /// </summary>
        /// <returns><see cref="char"/></returns>
        public char[] GetText()
        {
            return IExecuteWithSignatureArray<char>("getText", "()[C");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#countParagraphs()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int CountParagraphs()
        {
            return IExecuteWithSignature<int>("countParagraphs", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#countRuns()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int CountRuns()
        {
            return IExecuteWithSignature<int>("countRuns", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#getBaseLevel()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetBaseLevel()
        {
            return IExecuteWithSignature<int>("getBaseLevel", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#getCustomizedClass(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetCustomizedClass(int arg0)
        {
            return IExecuteWithSignature<int>("getCustomizedClass", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#getLength()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetLength()
        {
            return IExecuteWithSignature<int>("getLength", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#getLogicalIndex(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetLogicalIndex(int arg0)
        {
            return IExecuteWithSignature<int>("getLogicalIndex", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#getParagraphIndex(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetParagraphIndex(int arg0)
        {
            return IExecuteWithSignature<int>("getParagraphIndex", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#getProcessedLength()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetProcessedLength()
        {
            return IExecuteWithSignature<int>("getProcessedLength", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#getReorderingMode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetReorderingMode()
        {
            return IExecuteWithSignature<int>("getReorderingMode", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#getReorderingOptions()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetReorderingOptions()
        {
            return IExecuteWithSignature<int>("getReorderingOptions", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#getResultLength()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetResultLength()
        {
            return IExecuteWithSignature<int>("getResultLength", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#getRunCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetRunCount()
        {
            return IExecuteWithSignature<int>("getRunCount", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#getRunLevel(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetRunLevel(int arg0)
        {
            return IExecuteWithSignature<int>("getRunLevel", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#getRunLimit(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetRunLimit(int arg0)
        {
            return IExecuteWithSignature<int>("getRunLimit", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#getRunStart(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetRunStart(int arg0)
        {
            return IExecuteWithSignature<int>("getRunStart", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#getVisualIndex(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetVisualIndex(int arg0)
        {
            return IExecuteWithSignature<int>("getVisualIndex", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#getLogicalMap()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int[] GetLogicalMap()
        {
            return IExecuteWithSignatureArray<int>("getLogicalMap", "()[I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#getVisualMap()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int[] GetVisualMap()
        {
            return IExecuteWithSignatureArray<int>("getVisualMap", "()[I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#getTextAsString()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetTextAsString()
        {
            return IExecuteWithSignature<Java.Lang.String>("getTextAsString", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#writeReordered(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String WriteReordered(int arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("writeReordered", "(I)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#orderParagraphsLTR(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void OrderParagraphsLTR(bool arg0)
        {
            IExecuteWithSignature("orderParagraphsLTR", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#setContext(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        public void SetContext(Java.Lang.String arg0, Java.Lang.String arg1)
        {
            IExecute("setContext", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#setCustomClassifier(android.icu.text.BidiClassifier)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Icu.Text.BidiClassifier"/></param>
        public void SetCustomClassifier(Android.Icu.Text.BidiClassifier arg0)
        {
            IExecuteWithSignature("setCustomClassifier", "(Landroid/icu/text/BidiClassifier;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#setInverse(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetInverse(bool arg0)
        {
            IExecuteWithSignature("setInverse", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#setPara(char[],byte,byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        /// <param name="arg2"><see cref="byte"/></param>
        public void SetPara(char[] arg0, byte arg1, byte[] arg2)
        {
            IExecute("setPara", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#setPara(java.lang.String,byte,byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        /// <param name="arg2"><see cref="byte"/></param>
        public void SetPara(Java.Lang.String arg0, byte arg1, byte[] arg2)
        {
            IExecute("setPara", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#setPara(java.text.AttributedCharacterIterator)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Text.AttributedCharacterIterator"/></param>
        public void SetPara(Java.Text.AttributedCharacterIterator arg0)
        {
            IExecuteWithSignature("setPara", "(Ljava/text/AttributedCharacterIterator;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#setReorderingMode(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetReorderingMode(int arg0)
        {
            IExecuteWithSignature("setReorderingMode", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Bidi.html#setReorderingOptions(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetReorderingOptions(int arg0)
        {
            IExecuteWithSignature("setReorderingOptions", "(I)V", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
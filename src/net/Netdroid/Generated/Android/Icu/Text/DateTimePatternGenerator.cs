/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Icu.Text
{
    #region DateTimePatternGenerator declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html"/>
    /// </summary>
    public partial class DateTimePatternGenerator : MASES.JCOBridge.C2JBridge.JVMBridgeBase<DateTimePatternGenerator>
    {
        const string _bridgeClassName = "android.icu.text.DateTimePatternGenerator";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public DateTimePatternGenerator() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public DateTimePatternGenerator(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region DisplayWidth declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.DisplayWidth.html"/>
        /// </summary>
        public partial class DisplayWidth : Java.Lang.Enum<Android.Icu.Text.DateTimePatternGenerator.DisplayWidth>
        {
            const string _bridgeClassName = "android.icu.text.DateTimePatternGenerator$DisplayWidth";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public DisplayWidth() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public DisplayWidth(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region PatternInfo declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.PatternInfo.html"/>
        /// </summary>
        public partial class PatternInfo : MASES.JCOBridge.C2JBridge.JVMBridgeBase<PatternInfo>
        {
            const string _bridgeClassName = "android.icu.text.DateTimePatternGenerator$PatternInfo";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public PatternInfo() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public PatternInfo(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region DateTimePatternGenerator implementation
    public partial class DateTimePatternGenerator : Android.Icu.Util.IFreezable<Android.Icu.Text.DateTimePatternGenerator>, Java.Lang.ICloneable
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Android.Icu.Text.DateTimePatternGenerator"/> to <see cref="Android.Icu.Util.Freezable"/>
        /// </summary>
        public static implicit operator Android.Icu.Util.Freezable(Android.Icu.Text.DateTimePatternGenerator t) => t.Cast<Android.Icu.Util.Freezable>();
        /// <summary>
        /// Converter from <see cref="Android.Icu.Text.DateTimePatternGenerator"/> to <see cref="Java.Lang.Cloneable"/>
        /// </summary>
        public static implicit operator Java.Lang.Cloneable(Android.Icu.Text.DateTimePatternGenerator t) => t.Cast<Java.Lang.Cloneable>();

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#DAY"/>
        /// </summary>
        public static int DAY { get { if (!_DAYReady) { _DAYContent = SGetField<int>(LocalBridgeClazz, "DAY"); _DAYReady = true; } return _DAYContent; } }
        private static int _DAYContent = default;
        private static bool _DAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#DAY_OF_WEEK_IN_MONTH"/>
        /// </summary>
        public static int DAY_OF_WEEK_IN_MONTH { get { if (!_DAY_OF_WEEK_IN_MONTHReady) { _DAY_OF_WEEK_IN_MONTHContent = SGetField<int>(LocalBridgeClazz, "DAY_OF_WEEK_IN_MONTH"); _DAY_OF_WEEK_IN_MONTHReady = true; } return _DAY_OF_WEEK_IN_MONTHContent; } }
        private static int _DAY_OF_WEEK_IN_MONTHContent = default;
        private static bool _DAY_OF_WEEK_IN_MONTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#DAY_OF_YEAR"/>
        /// </summary>
        public static int DAY_OF_YEAR { get { if (!_DAY_OF_YEARReady) { _DAY_OF_YEARContent = SGetField<int>(LocalBridgeClazz, "DAY_OF_YEAR"); _DAY_OF_YEARReady = true; } return _DAY_OF_YEARContent; } }
        private static int _DAY_OF_YEARContent = default;
        private static bool _DAY_OF_YEARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#DAYPERIOD"/>
        /// </summary>
        public static int DAYPERIOD { get { if (!_DAYPERIODReady) { _DAYPERIODContent = SGetField<int>(LocalBridgeClazz, "DAYPERIOD"); _DAYPERIODReady = true; } return _DAYPERIODContent; } }
        private static int _DAYPERIODContent = default;
        private static bool _DAYPERIODReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#ERA"/>
        /// </summary>
        public static int ERA { get { if (!_ERAReady) { _ERAContent = SGetField<int>(LocalBridgeClazz, "ERA"); _ERAReady = true; } return _ERAContent; } }
        private static int _ERAContent = default;
        private static bool _ERAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#FRACTIONAL_SECOND"/>
        /// </summary>
        public static int FRACTIONAL_SECOND { get { if (!_FRACTIONAL_SECONDReady) { _FRACTIONAL_SECONDContent = SGetField<int>(LocalBridgeClazz, "FRACTIONAL_SECOND"); _FRACTIONAL_SECONDReady = true; } return _FRACTIONAL_SECONDContent; } }
        private static int _FRACTIONAL_SECONDContent = default;
        private static bool _FRACTIONAL_SECONDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#HOUR"/>
        /// </summary>
        public static int HOUR { get { if (!_HOURReady) { _HOURContent = SGetField<int>(LocalBridgeClazz, "HOUR"); _HOURReady = true; } return _HOURContent; } }
        private static int _HOURContent = default;
        private static bool _HOURReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#MATCH_ALL_FIELDS_LENGTH"/>
        /// </summary>
        public static int MATCH_ALL_FIELDS_LENGTH { get { if (!_MATCH_ALL_FIELDS_LENGTHReady) { _MATCH_ALL_FIELDS_LENGTHContent = SGetField<int>(LocalBridgeClazz, "MATCH_ALL_FIELDS_LENGTH"); _MATCH_ALL_FIELDS_LENGTHReady = true; } return _MATCH_ALL_FIELDS_LENGTHContent; } }
        private static int _MATCH_ALL_FIELDS_LENGTHContent = default;
        private static bool _MATCH_ALL_FIELDS_LENGTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#MATCH_HOUR_FIELD_LENGTH"/>
        /// </summary>
        public static int MATCH_HOUR_FIELD_LENGTH { get { if (!_MATCH_HOUR_FIELD_LENGTHReady) { _MATCH_HOUR_FIELD_LENGTHContent = SGetField<int>(LocalBridgeClazz, "MATCH_HOUR_FIELD_LENGTH"); _MATCH_HOUR_FIELD_LENGTHReady = true; } return _MATCH_HOUR_FIELD_LENGTHContent; } }
        private static int _MATCH_HOUR_FIELD_LENGTHContent = default;
        private static bool _MATCH_HOUR_FIELD_LENGTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#MATCH_NO_OPTIONS"/>
        /// </summary>
        public static int MATCH_NO_OPTIONS { get { if (!_MATCH_NO_OPTIONSReady) { _MATCH_NO_OPTIONSContent = SGetField<int>(LocalBridgeClazz, "MATCH_NO_OPTIONS"); _MATCH_NO_OPTIONSReady = true; } return _MATCH_NO_OPTIONSContent; } }
        private static int _MATCH_NO_OPTIONSContent = default;
        private static bool _MATCH_NO_OPTIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#MINUTE"/>
        /// </summary>
        public static int MINUTE { get { if (!_MINUTEReady) { _MINUTEContent = SGetField<int>(LocalBridgeClazz, "MINUTE"); _MINUTEReady = true; } return _MINUTEContent; } }
        private static int _MINUTEContent = default;
        private static bool _MINUTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#MONTH"/>
        /// </summary>
        public static int MONTH { get { if (!_MONTHReady) { _MONTHContent = SGetField<int>(LocalBridgeClazz, "MONTH"); _MONTHReady = true; } return _MONTHContent; } }
        private static int _MONTHContent = default;
        private static bool _MONTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#QUARTER"/>
        /// </summary>
        public static int QUARTER { get { if (!_QUARTERReady) { _QUARTERContent = SGetField<int>(LocalBridgeClazz, "QUARTER"); _QUARTERReady = true; } return _QUARTERContent; } }
        private static int _QUARTERContent = default;
        private static bool _QUARTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#SECOND"/>
        /// </summary>
        public static int SECOND { get { if (!_SECONDReady) { _SECONDContent = SGetField<int>(LocalBridgeClazz, "SECOND"); _SECONDReady = true; } return _SECONDContent; } }
        private static int _SECONDContent = default;
        private static bool _SECONDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#WEEK_OF_MONTH"/>
        /// </summary>
        public static int WEEK_OF_MONTH { get { if (!_WEEK_OF_MONTHReady) { _WEEK_OF_MONTHContent = SGetField<int>(LocalBridgeClazz, "WEEK_OF_MONTH"); _WEEK_OF_MONTHReady = true; } return _WEEK_OF_MONTHContent; } }
        private static int _WEEK_OF_MONTHContent = default;
        private static bool _WEEK_OF_MONTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#WEEK_OF_YEAR"/>
        /// </summary>
        public static int WEEK_OF_YEAR { get { if (!_WEEK_OF_YEARReady) { _WEEK_OF_YEARContent = SGetField<int>(LocalBridgeClazz, "WEEK_OF_YEAR"); _WEEK_OF_YEARReady = true; } return _WEEK_OF_YEARContent; } }
        private static int _WEEK_OF_YEARContent = default;
        private static bool _WEEK_OF_YEARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#WEEKDAY"/>
        /// </summary>
        public static int WEEKDAY { get { if (!_WEEKDAYReady) { _WEEKDAYContent = SGetField<int>(LocalBridgeClazz, "WEEKDAY"); _WEEKDAYReady = true; } return _WEEKDAYContent; } }
        private static int _WEEKDAYContent = default;
        private static bool _WEEKDAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#YEAR"/>
        /// </summary>
        public static int YEAR { get { if (!_YEARReady) { _YEARContent = SGetField<int>(LocalBridgeClazz, "YEAR"); _YEARReady = true; } return _YEARContent; } }
        private static int _YEARContent = default;
        private static bool _YEARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#ZONE"/>
        /// </summary>
        public static int ZONE { get { if (!_ZONEReady) { _ZONEContent = SGetField<int>(LocalBridgeClazz, "ZONE"); _ZONEReady = true; } return _ZONEContent; } }
        private static int _ZONEContent = default;
        private static bool _ZONEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#getEmptyInstance()"/>
        /// </summary>
        /// <returns><see cref="Android.Icu.Text.DateTimePatternGenerator"/></returns>
        public static Android.Icu.Text.DateTimePatternGenerator GetEmptyInstance()
        {
            return SExecuteWithSignature<Android.Icu.Text.DateTimePatternGenerator>(LocalBridgeClazz, "getEmptyInstance", "()Landroid/icu/text/DateTimePatternGenerator;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#getInstance()"/>
        /// </summary>
        /// <returns><see cref="Android.Icu.Text.DateTimePatternGenerator"/></returns>
        public static Android.Icu.Text.DateTimePatternGenerator GetInstance()
        {
            return SExecuteWithSignature<Android.Icu.Text.DateTimePatternGenerator>(LocalBridgeClazz, "getInstance", "()Landroid/icu/text/DateTimePatternGenerator;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#getInstance(android.icu.util.ULocale)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Icu.Util.ULocale"/></param>
        /// <returns><see cref="Android.Icu.Text.DateTimePatternGenerator"/></returns>
        public static Android.Icu.Text.DateTimePatternGenerator GetInstance(Android.Icu.Util.ULocale arg0)
        {
            return SExecuteWithSignature<Android.Icu.Text.DateTimePatternGenerator>(LocalBridgeClazz, "getInstance", "(Landroid/icu/util/ULocale;)Landroid/icu/text/DateTimePatternGenerator;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#getInstance(java.util.Locale)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Locale"/></param>
        /// <returns><see cref="Android.Icu.Text.DateTimePatternGenerator"/></returns>
        public static Android.Icu.Text.DateTimePatternGenerator GetInstance(Java.Util.Locale arg0)
        {
            return SExecuteWithSignature<Android.Icu.Text.DateTimePatternGenerator>(LocalBridgeClazz, "getInstance", "(Ljava/util/Locale;)Landroid/icu/text/DateTimePatternGenerator;", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#getDefaultHourCycle()"/>
        /// </summary>
        /// <returns><see cref="Android.Icu.Text.DateFormat.HourCycle"/></returns>
        public Android.Icu.Text.DateFormat.HourCycle GetDefaultHourCycle()
        {
            return IExecuteWithSignature<Android.Icu.Text.DateFormat.HourCycle>("getDefaultHourCycle", "()Landroid/icu/text/DateFormat$HourCycle;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#addPattern(java.lang.String,boolean,android.icu.text.DateTimePatternGenerator.PatternInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <param name="arg2"><see cref="Android.Icu.Text.DateTimePatternGenerator.PatternInfo"/></param>
        /// <returns><see cref="Android.Icu.Text.DateTimePatternGenerator"/></returns>
        public Android.Icu.Text.DateTimePatternGenerator AddPattern(Java.Lang.String arg0, bool arg1, Android.Icu.Text.DateTimePatternGenerator.PatternInfo arg2)
        {
            return IExecuteWithSignature<Android.Icu.Text.DateTimePatternGenerator>("addPattern", "(Ljava/lang/String;ZLandroid/icu/text/DateTimePatternGenerator$PatternInfo;)Landroid/icu/text/DateTimePatternGenerator;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#isFrozen()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsFrozen()
        {
            return IExecuteWithSignature<bool>("isFrozen", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#cloneAsThawed()"/>
        /// </summary>
        /// <returns><see cref="object"/></returns>
        public object CloneAsThawed()
        {
            return IExecuteWithSignature("cloneAsThawed", "()Ljava/lang/Object;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#freeze()"/>
        /// </summary>
        /// <returns><see cref="object"/></returns>
        public object Freeze()
        {
            return IExecuteWithSignature("freeze", "()Ljava/lang/Object;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#getAppendItemFormat(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetAppendItemFormat(int arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getAppendItemFormat", "(I)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#getAppendItemName(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetAppendItemName(int arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getAppendItemName", "(I)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#getBaseSkeleton(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetBaseSkeleton(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getBaseSkeleton", "(Ljava/lang/String;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#getBestPattern(java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetBestPattern(Java.Lang.String arg0, int arg1)
        {
            return IExecuteWithSignature<Java.Lang.String>("getBestPattern", "(Ljava/lang/String;I)Ljava/lang/String;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#getBestPattern(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetBestPattern(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getBestPattern", "(Ljava/lang/String;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#getDateTimeFormat()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetDateTimeFormat()
        {
            return IExecuteWithSignature<Java.Lang.String>("getDateTimeFormat", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#getDateTimeFormat(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetDateTimeFormat(int arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getDateTimeFormat", "(I)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#getDecimal()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetDecimal()
        {
            return IExecuteWithSignature<Java.Lang.String>("getDecimal", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#getFieldDisplayName(int,android.icu.text.DateTimePatternGenerator.DisplayWidth)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Icu.Text.DateTimePatternGenerator.DisplayWidth"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetFieldDisplayName(int arg0, Android.Icu.Text.DateTimePatternGenerator.DisplayWidth arg1)
        {
            return IExecuteWithSignature<Java.Lang.String>("getFieldDisplayName", "(ILandroid/icu/text/DateTimePatternGenerator$DisplayWidth;)Ljava/lang/String;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#getSkeleton(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetSkeleton(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getSkeleton", "(Ljava/lang/String;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#replaceFieldTypes(java.lang.String,java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String ReplaceFieldTypes(Java.Lang.String arg0, Java.Lang.String arg1, int arg2)
        {
            return IExecuteWithSignature<Java.Lang.String>("replaceFieldTypes", "(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#replaceFieldTypes(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String ReplaceFieldTypes(Java.Lang.String arg0, Java.Lang.String arg1)
        {
            return IExecuteWithSignature<Java.Lang.String>("replaceFieldTypes", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#getSkeletons(java.util.Map)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Map"/></param>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public Java.Util.Map<Java.Lang.String, Java.Lang.String> GetSkeletons(Java.Util.Map<Java.Lang.String, Java.Lang.String> arg0)
        {
            return IExecuteWithSignature<Java.Util.Map<Java.Lang.String, Java.Lang.String>>("getSkeletons", "(Ljava/util/Map;)Ljava/util/Map;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#getBaseSkeletons(java.util.Set)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Set"/></param>
        /// <returns><see cref="Java.Util.Set"/></returns>
        public Java.Util.Set<Java.Lang.String> GetBaseSkeletons(Java.Util.Set<Java.Lang.String> arg0)
        {
            return IExecuteWithSignature<Java.Util.Set<Java.Lang.String>>("getBaseSkeletons", "(Ljava/util/Set;)Ljava/util/Set;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#setAppendItemFormat(int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        public void SetAppendItemFormat(int arg0, Java.Lang.String arg1)
        {
            IExecuteWithSignature("setAppendItemFormat", "(ILjava/lang/String;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#setAppendItemName(int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        public void SetAppendItemName(int arg0, Java.Lang.String arg1)
        {
            IExecuteWithSignature("setAppendItemName", "(ILjava/lang/String;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#setDateTimeFormat(int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        public void SetDateTimeFormat(int arg0, Java.Lang.String arg1)
        {
            IExecuteWithSignature("setDateTimeFormat", "(ILjava/lang/String;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#setDateTimeFormat(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void SetDateTimeFormat(Java.Lang.String arg0)
        {
            IExecuteWithSignature("setDateTimeFormat", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html#setDecimal(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void SetDecimal(Java.Lang.String arg0)
        {
            IExecuteWithSignature("setDecimal", "(Ljava/lang/String;)V", arg0);
        }

        #endregion

        #region Nested classes
        #region DisplayWidth implementation
        public partial class DisplayWidth
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.DisplayWidth.html#ABBREVIATED"/>
            /// </summary>
            public static Android.Icu.Text.DateTimePatternGenerator.DisplayWidth ABBREVIATED { get { if (!_ABBREVIATEDReady) { _ABBREVIATEDContent = SGetField<Android.Icu.Text.DateTimePatternGenerator.DisplayWidth>(LocalBridgeClazz, "ABBREVIATED"); _ABBREVIATEDReady = true; } return _ABBREVIATEDContent; } }
            private static Android.Icu.Text.DateTimePatternGenerator.DisplayWidth _ABBREVIATEDContent = default;
            private static bool _ABBREVIATEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.DisplayWidth.html#NARROW"/>
            /// </summary>
            public static Android.Icu.Text.DateTimePatternGenerator.DisplayWidth NARROW { get { if (!_NARROWReady) { _NARROWContent = SGetField<Android.Icu.Text.DateTimePatternGenerator.DisplayWidth>(LocalBridgeClazz, "NARROW"); _NARROWReady = true; } return _NARROWContent; } }
            private static Android.Icu.Text.DateTimePatternGenerator.DisplayWidth _NARROWContent = default;
            private static bool _NARROWReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.DisplayWidth.html#WIDE"/>
            /// </summary>
            public static Android.Icu.Text.DateTimePatternGenerator.DisplayWidth WIDE { get { if (!_WIDEReady) { _WIDEContent = SGetField<Android.Icu.Text.DateTimePatternGenerator.DisplayWidth>(LocalBridgeClazz, "WIDE"); _WIDEReady = true; } return _WIDEContent; } }
            private static Android.Icu.Text.DateTimePatternGenerator.DisplayWidth _WIDEContent = default;
            private static bool _WIDEReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.DisplayWidth.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Icu.Text.DateTimePatternGenerator.DisplayWidth"/></returns>
            public static Android.Icu.Text.DateTimePatternGenerator.DisplayWidth ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Icu.Text.DateTimePatternGenerator.DisplayWidth>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/icu/text/DateTimePatternGenerator$DisplayWidth;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.DisplayWidth.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.Icu.Text.DateTimePatternGenerator.DisplayWidth"/></returns>
            public static Android.Icu.Text.DateTimePatternGenerator.DisplayWidth[] Values()
            {
                return SExecuteWithSignatureArray<Android.Icu.Text.DateTimePatternGenerator.DisplayWidth>(LocalBridgeClazz, "values", "()[Landroid/icu/text/DateTimePatternGenerator$DisplayWidth;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region PatternInfo implementation
        public partial class PatternInfo
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.PatternInfo.html#status"/>
            /// </summary>
            public int status { get { return IGetField<int>("status"); } set { ISetField("status", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.PatternInfo.html#conflictingPattern"/>
            /// </summary>
            public Java.Lang.String conflictingPattern { get { return IGetField<Java.Lang.String>("conflictingPattern"); } set { ISetField("conflictingPattern", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.PatternInfo.html#BASE_CONFLICT"/>
            /// </summary>
            public static int BASE_CONFLICT { get { if (!_BASE_CONFLICTReady) { _BASE_CONFLICTContent = SGetField<int>(LocalBridgeClazz, "BASE_CONFLICT"); _BASE_CONFLICTReady = true; } return _BASE_CONFLICTContent; } }
            private static int _BASE_CONFLICTContent = default;
            private static bool _BASE_CONFLICTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.PatternInfo.html#CONFLICT"/>
            /// </summary>
            public static int CONFLICT { get { if (!_CONFLICTReady) { _CONFLICTContent = SGetField<int>(LocalBridgeClazz, "CONFLICT"); _CONFLICTReady = true; } return _CONFLICTContent; } }
            private static int _CONFLICTContent = default;
            private static bool _CONFLICTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.PatternInfo.html#OK"/>
            /// </summary>
            public static int OK { get { if (!_OKReady) { _OKContent = SGetField<int>(LocalBridgeClazz, "OK"); _OKReady = true; } return _OKContent; } }
            private static int _OKContent = default;
            private static bool _OKReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
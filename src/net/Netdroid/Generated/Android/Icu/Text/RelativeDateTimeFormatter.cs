/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Icu.Text
{
    #region RelativeDateTimeFormatter declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.html"/>
    /// </summary>
    public partial class RelativeDateTimeFormatter : MASES.JCOBridge.C2JBridge.JVMBridgeBase<RelativeDateTimeFormatter>
    {
        const string _bridgeClassName = "android.icu.text.RelativeDateTimeFormatter";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public RelativeDateTimeFormatter() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public RelativeDateTimeFormatter(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region AbsoluteUnit declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.AbsoluteUnit.html"/>
        /// </summary>
        public partial class AbsoluteUnit : Java.Lang.Enum<Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit>
        {
            const string _bridgeClassName = "android.icu.text.RelativeDateTimeFormatter$AbsoluteUnit";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public AbsoluteUnit() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public AbsoluteUnit(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region Direction declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.Direction.html"/>
        /// </summary>
        public partial class Direction : Java.Lang.Enum<Android.Icu.Text.RelativeDateTimeFormatter.Direction>
        {
            const string _bridgeClassName = "android.icu.text.RelativeDateTimeFormatter$Direction";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Direction() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Direction(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region FormattedRelativeDateTime declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.FormattedRelativeDateTime.html"/>
        /// </summary>
        public partial class FormattedRelativeDateTime : Android.Icu.Text.FormattedValue
        {
            const string _bridgeClassName = "android.icu.text.RelativeDateTimeFormatter$FormattedRelativeDateTime";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public FormattedRelativeDateTime() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public FormattedRelativeDateTime(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region RelativeDateTimeUnit declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.RelativeDateTimeUnit.html"/>
        /// </summary>
        public partial class RelativeDateTimeUnit : Java.Lang.Enum<Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit>
        {
            const string _bridgeClassName = "android.icu.text.RelativeDateTimeFormatter$RelativeDateTimeUnit";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public RelativeDateTimeUnit() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public RelativeDateTimeUnit(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region RelativeUnit declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.RelativeUnit.html"/>
        /// </summary>
        public partial class RelativeUnit : Java.Lang.Enum<Android.Icu.Text.RelativeDateTimeFormatter.RelativeUnit>
        {
            const string _bridgeClassName = "android.icu.text.RelativeDateTimeFormatter$RelativeUnit";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public RelativeUnit() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public RelativeUnit(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region Style declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.Style.html"/>
        /// </summary>
        public partial class Style : Java.Lang.Enum<Android.Icu.Text.RelativeDateTimeFormatter.Style>
        {
            const string _bridgeClassName = "android.icu.text.RelativeDateTimeFormatter$Style";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Style() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Style(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region RelativeDateTimeFormatter implementation
    public partial class RelativeDateTimeFormatter
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
    
        #endregion
    
        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.html#getInstance()"/>
        /// </summary>
        /// <returns><see cref="Android.Icu.Text.RelativeDateTimeFormatter"/></returns>
        public static Android.Icu.Text.RelativeDateTimeFormatter GetInstance()
        {
            return SExecuteWithSignature<Android.Icu.Text.RelativeDateTimeFormatter>(LocalBridgeClazz, "getInstance", "()Landroid/icu/text/RelativeDateTimeFormatter;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.html#getInstance(android.icu.util.ULocale,android.icu.text.NumberFormat,android.icu.text.RelativeDateTimeFormatter.Style,android.icu.text.DisplayContext)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Icu.Util.ULocale"/></param>
        /// <param name="arg1"><see cref="Android.Icu.Text.NumberFormat"/></param>
        /// <param name="arg2"><see cref="Android.Icu.Text.RelativeDateTimeFormatter.Style"/></param>
        /// <param name="arg3"><see cref="Android.Icu.Text.DisplayContext"/></param>
        /// <returns><see cref="Android.Icu.Text.RelativeDateTimeFormatter"/></returns>
        public static Android.Icu.Text.RelativeDateTimeFormatter GetInstance(Android.Icu.Util.ULocale arg0, Android.Icu.Text.NumberFormat arg1, Android.Icu.Text.RelativeDateTimeFormatter.Style arg2, Android.Icu.Text.DisplayContext arg3)
        {
            return SExecuteWithSignature<Android.Icu.Text.RelativeDateTimeFormatter>(LocalBridgeClazz, "getInstance", "(Landroid/icu/util/ULocale;Landroid/icu/text/NumberFormat;Landroid/icu/text/RelativeDateTimeFormatter$Style;Landroid/icu/text/DisplayContext;)Landroid/icu/text/RelativeDateTimeFormatter;", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.html#getInstance(android.icu.util.ULocale,android.icu.text.NumberFormat)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Icu.Util.ULocale"/></param>
        /// <param name="arg1"><see cref="Android.Icu.Text.NumberFormat"/></param>
        /// <returns><see cref="Android.Icu.Text.RelativeDateTimeFormatter"/></returns>
        public static Android.Icu.Text.RelativeDateTimeFormatter GetInstance(Android.Icu.Util.ULocale arg0, Android.Icu.Text.NumberFormat arg1)
        {
            return SExecuteWithSignature<Android.Icu.Text.RelativeDateTimeFormatter>(LocalBridgeClazz, "getInstance", "(Landroid/icu/util/ULocale;Landroid/icu/text/NumberFormat;)Landroid/icu/text/RelativeDateTimeFormatter;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.html#getInstance(android.icu.util.ULocale)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Icu.Util.ULocale"/></param>
        /// <returns><see cref="Android.Icu.Text.RelativeDateTimeFormatter"/></returns>
        public static Android.Icu.Text.RelativeDateTimeFormatter GetInstance(Android.Icu.Util.ULocale arg0)
        {
            return SExecuteWithSignature<Android.Icu.Text.RelativeDateTimeFormatter>(LocalBridgeClazz, "getInstance", "(Landroid/icu/util/ULocale;)Landroid/icu/text/RelativeDateTimeFormatter;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.html#getInstance(java.util.Locale,android.icu.text.NumberFormat)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Locale"/></param>
        /// <param name="arg1"><see cref="Android.Icu.Text.NumberFormat"/></param>
        /// <returns><see cref="Android.Icu.Text.RelativeDateTimeFormatter"/></returns>
        public static Android.Icu.Text.RelativeDateTimeFormatter GetInstance(Java.Util.Locale arg0, Android.Icu.Text.NumberFormat arg1)
        {
            return SExecuteWithSignature<Android.Icu.Text.RelativeDateTimeFormatter>(LocalBridgeClazz, "getInstance", "(Ljava/util/Locale;Landroid/icu/text/NumberFormat;)Landroid/icu/text/RelativeDateTimeFormatter;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.html#getInstance(java.util.Locale)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Locale"/></param>
        /// <returns><see cref="Android.Icu.Text.RelativeDateTimeFormatter"/></returns>
        public static Android.Icu.Text.RelativeDateTimeFormatter GetInstance(Java.Util.Locale arg0)
        {
            return SExecuteWithSignature<Android.Icu.Text.RelativeDateTimeFormatter>(LocalBridgeClazz, "getInstance", "(Ljava/util/Locale;)Landroid/icu/text/RelativeDateTimeFormatter;", arg0);
        }
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.html#getCapitalizationContext()"/>
        /// </summary>
        /// <returns><see cref="Android.Icu.Text.DisplayContext"/></returns>
        public Android.Icu.Text.DisplayContext GetCapitalizationContext()
        {
            return IExecuteWithSignature<Android.Icu.Text.DisplayContext>("getCapitalizationContext", "()Landroid/icu/text/DisplayContext;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.html#getNumberFormat()"/>
        /// </summary>
        /// <returns><see cref="Android.Icu.Text.NumberFormat"/></returns>
        public Android.Icu.Text.NumberFormat GetNumberFormat()
        {
            return IExecuteWithSignature<Android.Icu.Text.NumberFormat>("getNumberFormat", "()Landroid/icu/text/NumberFormat;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.html#formatNumericToValue(double,android.icu.text.RelativeDateTimeFormatter.RelativeDateTimeUnit)"/>
        /// </summary>
        /// <param name="arg0"><see cref="double"/></param>
        /// <param name="arg1"><see cref="Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit"/></param>
        /// <returns><see cref="Android.Icu.Text.RelativeDateTimeFormatter.FormattedRelativeDateTime"/></returns>
        public Android.Icu.Text.RelativeDateTimeFormatter.FormattedRelativeDateTime FormatNumericToValue(double arg0, Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit arg1)
        {
            return IExecuteWithSignature<Android.Icu.Text.RelativeDateTimeFormatter.FormattedRelativeDateTime>("formatNumericToValue", "(DLandroid/icu/text/RelativeDateTimeFormatter$RelativeDateTimeUnit;)Landroid/icu/text/RelativeDateTimeFormatter$FormattedRelativeDateTime;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.html#formatToValue(android.icu.text.RelativeDateTimeFormatter.Direction,android.icu.text.RelativeDateTimeFormatter.AbsoluteUnit)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Icu.Text.RelativeDateTimeFormatter.Direction"/></param>
        /// <param name="arg1"><see cref="Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit"/></param>
        /// <returns><see cref="Android.Icu.Text.RelativeDateTimeFormatter.FormattedRelativeDateTime"/></returns>
        public Android.Icu.Text.RelativeDateTimeFormatter.FormattedRelativeDateTime FormatToValue(Android.Icu.Text.RelativeDateTimeFormatter.Direction arg0, Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit arg1)
        {
            return IExecuteWithSignature<Android.Icu.Text.RelativeDateTimeFormatter.FormattedRelativeDateTime>("formatToValue", "(Landroid/icu/text/RelativeDateTimeFormatter$Direction;Landroid/icu/text/RelativeDateTimeFormatter$AbsoluteUnit;)Landroid/icu/text/RelativeDateTimeFormatter$FormattedRelativeDateTime;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.html#formatToValue(double,android.icu.text.RelativeDateTimeFormatter.Direction,android.icu.text.RelativeDateTimeFormatter.RelativeUnit)"/>
        /// </summary>
        /// <param name="arg0"><see cref="double"/></param>
        /// <param name="arg1"><see cref="Android.Icu.Text.RelativeDateTimeFormatter.Direction"/></param>
        /// <param name="arg2"><see cref="Android.Icu.Text.RelativeDateTimeFormatter.RelativeUnit"/></param>
        /// <returns><see cref="Android.Icu.Text.RelativeDateTimeFormatter.FormattedRelativeDateTime"/></returns>
        public Android.Icu.Text.RelativeDateTimeFormatter.FormattedRelativeDateTime FormatToValue(double arg0, Android.Icu.Text.RelativeDateTimeFormatter.Direction arg1, Android.Icu.Text.RelativeDateTimeFormatter.RelativeUnit arg2)
        {
            return IExecuteWithSignature<Android.Icu.Text.RelativeDateTimeFormatter.FormattedRelativeDateTime>("formatToValue", "(DLandroid/icu/text/RelativeDateTimeFormatter$Direction;Landroid/icu/text/RelativeDateTimeFormatter$RelativeUnit;)Landroid/icu/text/RelativeDateTimeFormatter$FormattedRelativeDateTime;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.html#formatToValue(double,android.icu.text.RelativeDateTimeFormatter.RelativeDateTimeUnit)"/>
        /// </summary>
        /// <param name="arg0"><see cref="double"/></param>
        /// <param name="arg1"><see cref="Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit"/></param>
        /// <returns><see cref="Android.Icu.Text.RelativeDateTimeFormatter.FormattedRelativeDateTime"/></returns>
        public Android.Icu.Text.RelativeDateTimeFormatter.FormattedRelativeDateTime FormatToValue(double arg0, Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit arg1)
        {
            return IExecuteWithSignature<Android.Icu.Text.RelativeDateTimeFormatter.FormattedRelativeDateTime>("formatToValue", "(DLandroid/icu/text/RelativeDateTimeFormatter$RelativeDateTimeUnit;)Landroid/icu/text/RelativeDateTimeFormatter$FormattedRelativeDateTime;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.html#getFormatStyle()"/>
        /// </summary>
        /// <returns><see cref="Android.Icu.Text.RelativeDateTimeFormatter.Style"/></returns>
        public Android.Icu.Text.RelativeDateTimeFormatter.Style GetFormatStyle()
        {
            return IExecuteWithSignature<Android.Icu.Text.RelativeDateTimeFormatter.Style>("getFormatStyle", "()Landroid/icu/text/RelativeDateTimeFormatter$Style;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.html#combineDateAndTime(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String CombineDateAndTime(Java.Lang.String arg0, Java.Lang.String arg1)
        {
            return IExecuteWithSignature<Java.Lang.String>("combineDateAndTime", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.html#format(android.icu.text.RelativeDateTimeFormatter.Direction,android.icu.text.RelativeDateTimeFormatter.AbsoluteUnit)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Icu.Text.RelativeDateTimeFormatter.Direction"/></param>
        /// <param name="arg1"><see cref="Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String Format(Android.Icu.Text.RelativeDateTimeFormatter.Direction arg0, Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit arg1)
        {
            return IExecuteWithSignature<Java.Lang.String>("format", "(Landroid/icu/text/RelativeDateTimeFormatter$Direction;Landroid/icu/text/RelativeDateTimeFormatter$AbsoluteUnit;)Ljava/lang/String;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.html#format(double,android.icu.text.RelativeDateTimeFormatter.Direction,android.icu.text.RelativeDateTimeFormatter.RelativeUnit)"/>
        /// </summary>
        /// <param name="arg0"><see cref="double"/></param>
        /// <param name="arg1"><see cref="Android.Icu.Text.RelativeDateTimeFormatter.Direction"/></param>
        /// <param name="arg2"><see cref="Android.Icu.Text.RelativeDateTimeFormatter.RelativeUnit"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String Format(double arg0, Android.Icu.Text.RelativeDateTimeFormatter.Direction arg1, Android.Icu.Text.RelativeDateTimeFormatter.RelativeUnit arg2)
        {
            return IExecuteWithSignature<Java.Lang.String>("format", "(DLandroid/icu/text/RelativeDateTimeFormatter$Direction;Landroid/icu/text/RelativeDateTimeFormatter$RelativeUnit;)Ljava/lang/String;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.html#format(double,android.icu.text.RelativeDateTimeFormatter.RelativeDateTimeUnit)"/>
        /// </summary>
        /// <param name="arg0"><see cref="double"/></param>
        /// <param name="arg1"><see cref="Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String Format(double arg0, Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit arg1)
        {
            return IExecuteWithSignature<Java.Lang.String>("format", "(DLandroid/icu/text/RelativeDateTimeFormatter$RelativeDateTimeUnit;)Ljava/lang/String;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.html#formatNumeric(double,android.icu.text.RelativeDateTimeFormatter.RelativeDateTimeUnit)"/>
        /// </summary>
        /// <param name="arg0"><see cref="double"/></param>
        /// <param name="arg1"><see cref="Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String FormatNumeric(double arg0, Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit arg1)
        {
            return IExecuteWithSignature<Java.Lang.String>("formatNumeric", "(DLandroid/icu/text/RelativeDateTimeFormatter$RelativeDateTimeUnit;)Ljava/lang/String;", arg0, arg1);
        }
    
        #endregion
    
        #region Nested classes
        #region AbsoluteUnit implementation
        public partial class AbsoluteUnit
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.AbsoluteUnit.html#DAY"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit DAY { get { if (!_DAYReady) { _DAYContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit>(LocalBridgeClazz, "DAY"); _DAYReady = true; } return _DAYContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit _DAYContent = default;
            private static bool _DAYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.AbsoluteUnit.html#FRIDAY"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit FRIDAY { get { if (!_FRIDAYReady) { _FRIDAYContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit>(LocalBridgeClazz, "FRIDAY"); _FRIDAYReady = true; } return _FRIDAYContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit _FRIDAYContent = default;
            private static bool _FRIDAYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.AbsoluteUnit.html#HOUR"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit HOUR { get { if (!_HOURReady) { _HOURContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit>(LocalBridgeClazz, "HOUR"); _HOURReady = true; } return _HOURContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit _HOURContent = default;
            private static bool _HOURReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.AbsoluteUnit.html#MINUTE"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit MINUTE { get { if (!_MINUTEReady) { _MINUTEContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit>(LocalBridgeClazz, "MINUTE"); _MINUTEReady = true; } return _MINUTEContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit _MINUTEContent = default;
            private static bool _MINUTEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.AbsoluteUnit.html#MONDAY"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit MONDAY { get { if (!_MONDAYReady) { _MONDAYContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit>(LocalBridgeClazz, "MONDAY"); _MONDAYReady = true; } return _MONDAYContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit _MONDAYContent = default;
            private static bool _MONDAYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.AbsoluteUnit.html#MONTH"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit MONTH { get { if (!_MONTHReady) { _MONTHContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit>(LocalBridgeClazz, "MONTH"); _MONTHReady = true; } return _MONTHContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit _MONTHContent = default;
            private static bool _MONTHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.AbsoluteUnit.html#NOW"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit NOW { get { if (!_NOWReady) { _NOWContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit>(LocalBridgeClazz, "NOW"); _NOWReady = true; } return _NOWContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit _NOWContent = default;
            private static bool _NOWReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.AbsoluteUnit.html#QUARTER"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit QUARTER { get { if (!_QUARTERReady) { _QUARTERContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit>(LocalBridgeClazz, "QUARTER"); _QUARTERReady = true; } return _QUARTERContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit _QUARTERContent = default;
            private static bool _QUARTERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.AbsoluteUnit.html#SATURDAY"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit SATURDAY { get { if (!_SATURDAYReady) { _SATURDAYContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit>(LocalBridgeClazz, "SATURDAY"); _SATURDAYReady = true; } return _SATURDAYContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit _SATURDAYContent = default;
            private static bool _SATURDAYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.AbsoluteUnit.html#SUNDAY"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit SUNDAY { get { if (!_SUNDAYReady) { _SUNDAYContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit>(LocalBridgeClazz, "SUNDAY"); _SUNDAYReady = true; } return _SUNDAYContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit _SUNDAYContent = default;
            private static bool _SUNDAYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.AbsoluteUnit.html#THURSDAY"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit THURSDAY { get { if (!_THURSDAYReady) { _THURSDAYContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit>(LocalBridgeClazz, "THURSDAY"); _THURSDAYReady = true; } return _THURSDAYContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit _THURSDAYContent = default;
            private static bool _THURSDAYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.AbsoluteUnit.html#TUESDAY"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit TUESDAY { get { if (!_TUESDAYReady) { _TUESDAYContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit>(LocalBridgeClazz, "TUESDAY"); _TUESDAYReady = true; } return _TUESDAYContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit _TUESDAYContent = default;
            private static bool _TUESDAYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.AbsoluteUnit.html#WEDNESDAY"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit WEDNESDAY { get { if (!_WEDNESDAYReady) { _WEDNESDAYContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit>(LocalBridgeClazz, "WEDNESDAY"); _WEDNESDAYReady = true; } return _WEDNESDAYContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit _WEDNESDAYContent = default;
            private static bool _WEDNESDAYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.AbsoluteUnit.html#WEEK"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit WEEK { get { if (!_WEEKReady) { _WEEKContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit>(LocalBridgeClazz, "WEEK"); _WEEKReady = true; } return _WEEKContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit _WEEKContent = default;
            private static bool _WEEKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.AbsoluteUnit.html#YEAR"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit YEAR { get { if (!_YEARReady) { _YEARContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit>(LocalBridgeClazz, "YEAR"); _YEARReady = true; } return _YEARContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit _YEARContent = default;
            private static bool _YEARReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.AbsoluteUnit.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit"/></returns>
            public static Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/icu/text/RelativeDateTimeFormatter$AbsoluteUnit;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.AbsoluteUnit.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit"/></returns>
            public static Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit[] Values()
            {
                return SExecuteWithSignatureArray<Android.Icu.Text.RelativeDateTimeFormatter.AbsoluteUnit>(LocalBridgeClazz, "values", "()[Landroid/icu/text/RelativeDateTimeFormatter$AbsoluteUnit;");
            }
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region Direction implementation
        public partial class Direction
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.Direction.html#LAST"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.Direction LAST { get { if (!_LASTReady) { _LASTContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.Direction>(LocalBridgeClazz, "LAST"); _LASTReady = true; } return _LASTContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.Direction _LASTContent = default;
            private static bool _LASTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.Direction.html#LAST_2"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.Direction LAST_2 { get { if (!_LAST_2Ready) { _LAST_2Content = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.Direction>(LocalBridgeClazz, "LAST_2"); _LAST_2Ready = true; } return _LAST_2Content; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.Direction _LAST_2Content = default;
            private static bool _LAST_2Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.Direction.html#NEXT"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.Direction NEXT { get { if (!_NEXTReady) { _NEXTContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.Direction>(LocalBridgeClazz, "NEXT"); _NEXTReady = true; } return _NEXTContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.Direction _NEXTContent = default;
            private static bool _NEXTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.Direction.html#NEXT_2"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.Direction NEXT_2 { get { if (!_NEXT_2Ready) { _NEXT_2Content = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.Direction>(LocalBridgeClazz, "NEXT_2"); _NEXT_2Ready = true; } return _NEXT_2Content; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.Direction _NEXT_2Content = default;
            private static bool _NEXT_2Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.Direction.html#PLAIN"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.Direction PLAIN { get { if (!_PLAINReady) { _PLAINContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.Direction>(LocalBridgeClazz, "PLAIN"); _PLAINReady = true; } return _PLAINContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.Direction _PLAINContent = default;
            private static bool _PLAINReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.Direction.html#THIS"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.Direction THIS { get { if (!_THISReady) { _THISContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.Direction>(LocalBridgeClazz, "THIS"); _THISReady = true; } return _THISContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.Direction _THISContent = default;
            private static bool _THISReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.Direction.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Icu.Text.RelativeDateTimeFormatter.Direction"/></returns>
            public static Android.Icu.Text.RelativeDateTimeFormatter.Direction ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Icu.Text.RelativeDateTimeFormatter.Direction>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/icu/text/RelativeDateTimeFormatter$Direction;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.Direction.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.Icu.Text.RelativeDateTimeFormatter.Direction"/></returns>
            public static Android.Icu.Text.RelativeDateTimeFormatter.Direction[] Values()
            {
                return SExecuteWithSignatureArray<Android.Icu.Text.RelativeDateTimeFormatter.Direction>(LocalBridgeClazz, "values", "()[Landroid/icu/text/RelativeDateTimeFormatter$Direction;");
            }
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region FormattedRelativeDateTime implementation
        public partial class FormattedRelativeDateTime
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.FormattedRelativeDateTime.html#appendTo(java.lang.Appendable)"/>
            /// </summary>
            /// <param name="arg0"><typeparamref name="A"/></param>
            /// <typeparam name="A"><see cref="Java.Lang.IAppendable"/></typeparam>
            /// <returns><typeparamref name="A"/></returns>
            public A AppendTo<A>(A arg0) where A : Java.Lang.IAppendable, new()
            {
                return IExecuteWithSignature<A>("appendTo", "(Ljava/lang/Appendable;)Ljava/lang/Appendable;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.FormattedRelativeDateTime.html#nextPosition(android.icu.text.ConstrainedFieldPosition)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Icu.Text.ConstrainedFieldPosition"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool NextPosition(Android.Icu.Text.ConstrainedFieldPosition arg0)
            {
                return IExecuteWithSignature<bool>("nextPosition", "(Landroid/icu/text/ConstrainedFieldPosition;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.FormattedRelativeDateTime.html#charAt(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="char"/></returns>
            public char CharAt(int arg0)
            {
                return IExecuteWithSignature<char>("charAt", "(I)C", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.FormattedRelativeDateTime.html#length()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int Length()
            {
                return IExecuteWithSignature<int>("length", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.FormattedRelativeDateTime.html#subSequence(int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <returns><see cref="Java.Lang.CharSequence"/></returns>
            public Java.Lang.CharSequence SubSequence(int arg0, int arg1)
            {
                return IExecuteWithSignature<Java.Lang.CharSequence>("subSequence", "(II)Ljava/lang/CharSequence;", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.FormattedRelativeDateTime.html#toCharacterIterator()"/>
            /// </summary>
            /// <returns><see cref="Java.Text.AttributedCharacterIterator"/></returns>
            public Java.Text.AttributedCharacterIterator ToCharacterIterator()
            {
                return IExecuteWithSignature<Java.Text.AttributedCharacterIterator>("toCharacterIterator", "()Ljava/text/AttributedCharacterIterator;");
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region RelativeDateTimeUnit implementation
        public partial class RelativeDateTimeUnit
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.RelativeDateTimeUnit.html#DAY"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit DAY { get { if (!_DAYReady) { _DAYContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit>(LocalBridgeClazz, "DAY"); _DAYReady = true; } return _DAYContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit _DAYContent = default;
            private static bool _DAYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.RelativeDateTimeUnit.html#FRIDAY"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit FRIDAY { get { if (!_FRIDAYReady) { _FRIDAYContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit>(LocalBridgeClazz, "FRIDAY"); _FRIDAYReady = true; } return _FRIDAYContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit _FRIDAYContent = default;
            private static bool _FRIDAYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.RelativeDateTimeUnit.html#HOUR"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit HOUR { get { if (!_HOURReady) { _HOURContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit>(LocalBridgeClazz, "HOUR"); _HOURReady = true; } return _HOURContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit _HOURContent = default;
            private static bool _HOURReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.RelativeDateTimeUnit.html#MINUTE"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit MINUTE { get { if (!_MINUTEReady) { _MINUTEContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit>(LocalBridgeClazz, "MINUTE"); _MINUTEReady = true; } return _MINUTEContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit _MINUTEContent = default;
            private static bool _MINUTEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.RelativeDateTimeUnit.html#MONDAY"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit MONDAY { get { if (!_MONDAYReady) { _MONDAYContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit>(LocalBridgeClazz, "MONDAY"); _MONDAYReady = true; } return _MONDAYContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit _MONDAYContent = default;
            private static bool _MONDAYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.RelativeDateTimeUnit.html#MONTH"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit MONTH { get { if (!_MONTHReady) { _MONTHContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit>(LocalBridgeClazz, "MONTH"); _MONTHReady = true; } return _MONTHContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit _MONTHContent = default;
            private static bool _MONTHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.RelativeDateTimeUnit.html#QUARTER"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit QUARTER { get { if (!_QUARTERReady) { _QUARTERContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit>(LocalBridgeClazz, "QUARTER"); _QUARTERReady = true; } return _QUARTERContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit _QUARTERContent = default;
            private static bool _QUARTERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.RelativeDateTimeUnit.html#SATURDAY"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit SATURDAY { get { if (!_SATURDAYReady) { _SATURDAYContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit>(LocalBridgeClazz, "SATURDAY"); _SATURDAYReady = true; } return _SATURDAYContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit _SATURDAYContent = default;
            private static bool _SATURDAYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.RelativeDateTimeUnit.html#SECOND"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit SECOND { get { if (!_SECONDReady) { _SECONDContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit>(LocalBridgeClazz, "SECOND"); _SECONDReady = true; } return _SECONDContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit _SECONDContent = default;
            private static bool _SECONDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.RelativeDateTimeUnit.html#SUNDAY"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit SUNDAY { get { if (!_SUNDAYReady) { _SUNDAYContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit>(LocalBridgeClazz, "SUNDAY"); _SUNDAYReady = true; } return _SUNDAYContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit _SUNDAYContent = default;
            private static bool _SUNDAYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.RelativeDateTimeUnit.html#THURSDAY"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit THURSDAY { get { if (!_THURSDAYReady) { _THURSDAYContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit>(LocalBridgeClazz, "THURSDAY"); _THURSDAYReady = true; } return _THURSDAYContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit _THURSDAYContent = default;
            private static bool _THURSDAYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.RelativeDateTimeUnit.html#TUESDAY"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit TUESDAY { get { if (!_TUESDAYReady) { _TUESDAYContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit>(LocalBridgeClazz, "TUESDAY"); _TUESDAYReady = true; } return _TUESDAYContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit _TUESDAYContent = default;
            private static bool _TUESDAYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.RelativeDateTimeUnit.html#WEDNESDAY"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit WEDNESDAY { get { if (!_WEDNESDAYReady) { _WEDNESDAYContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit>(LocalBridgeClazz, "WEDNESDAY"); _WEDNESDAYReady = true; } return _WEDNESDAYContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit _WEDNESDAYContent = default;
            private static bool _WEDNESDAYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.RelativeDateTimeUnit.html#WEEK"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit WEEK { get { if (!_WEEKReady) { _WEEKContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit>(LocalBridgeClazz, "WEEK"); _WEEKReady = true; } return _WEEKContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit _WEEKContent = default;
            private static bool _WEEKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.RelativeDateTimeUnit.html#YEAR"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit YEAR { get { if (!_YEARReady) { _YEARContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit>(LocalBridgeClazz, "YEAR"); _YEARReady = true; } return _YEARContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit _YEARContent = default;
            private static bool _YEARReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.RelativeDateTimeUnit.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit"/></returns>
            public static Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/icu/text/RelativeDateTimeFormatter$RelativeDateTimeUnit;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.RelativeDateTimeUnit.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit"/></returns>
            public static Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit[] Values()
            {
                return SExecuteWithSignatureArray<Android.Icu.Text.RelativeDateTimeFormatter.RelativeDateTimeUnit>(LocalBridgeClazz, "values", "()[Landroid/icu/text/RelativeDateTimeFormatter$RelativeDateTimeUnit;");
            }
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region RelativeUnit implementation
        public partial class RelativeUnit
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.RelativeUnit.html#DAYS"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.RelativeUnit DAYS { get { if (!_DAYSReady) { _DAYSContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.RelativeUnit>(LocalBridgeClazz, "DAYS"); _DAYSReady = true; } return _DAYSContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.RelativeUnit _DAYSContent = default;
            private static bool _DAYSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.RelativeUnit.html#HOURS"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.RelativeUnit HOURS { get { if (!_HOURSReady) { _HOURSContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.RelativeUnit>(LocalBridgeClazz, "HOURS"); _HOURSReady = true; } return _HOURSContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.RelativeUnit _HOURSContent = default;
            private static bool _HOURSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.RelativeUnit.html#MINUTES"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.RelativeUnit MINUTES { get { if (!_MINUTESReady) { _MINUTESContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.RelativeUnit>(LocalBridgeClazz, "MINUTES"); _MINUTESReady = true; } return _MINUTESContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.RelativeUnit _MINUTESContent = default;
            private static bool _MINUTESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.RelativeUnit.html#MONTHS"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.RelativeUnit MONTHS { get { if (!_MONTHSReady) { _MONTHSContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.RelativeUnit>(LocalBridgeClazz, "MONTHS"); _MONTHSReady = true; } return _MONTHSContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.RelativeUnit _MONTHSContent = default;
            private static bool _MONTHSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.RelativeUnit.html#SECONDS"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.RelativeUnit SECONDS { get { if (!_SECONDSReady) { _SECONDSContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.RelativeUnit>(LocalBridgeClazz, "SECONDS"); _SECONDSReady = true; } return _SECONDSContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.RelativeUnit _SECONDSContent = default;
            private static bool _SECONDSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.RelativeUnit.html#WEEKS"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.RelativeUnit WEEKS { get { if (!_WEEKSReady) { _WEEKSContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.RelativeUnit>(LocalBridgeClazz, "WEEKS"); _WEEKSReady = true; } return _WEEKSContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.RelativeUnit _WEEKSContent = default;
            private static bool _WEEKSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.RelativeUnit.html#YEARS"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.RelativeUnit YEARS { get { if (!_YEARSReady) { _YEARSContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.RelativeUnit>(LocalBridgeClazz, "YEARS"); _YEARSReady = true; } return _YEARSContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.RelativeUnit _YEARSContent = default;
            private static bool _YEARSReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.RelativeUnit.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Icu.Text.RelativeDateTimeFormatter.RelativeUnit"/></returns>
            public static Android.Icu.Text.RelativeDateTimeFormatter.RelativeUnit ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Icu.Text.RelativeDateTimeFormatter.RelativeUnit>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/icu/text/RelativeDateTimeFormatter$RelativeUnit;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.RelativeUnit.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.Icu.Text.RelativeDateTimeFormatter.RelativeUnit"/></returns>
            public static Android.Icu.Text.RelativeDateTimeFormatter.RelativeUnit[] Values()
            {
                return SExecuteWithSignatureArray<Android.Icu.Text.RelativeDateTimeFormatter.RelativeUnit>(LocalBridgeClazz, "values", "()[Landroid/icu/text/RelativeDateTimeFormatter$RelativeUnit;");
            }
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region Style implementation
        public partial class Style
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.Style.html#LONG"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.Style LONG { get { if (!_LONGReady) { _LONGContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.Style>(LocalBridgeClazz, "LONG"); _LONGReady = true; } return _LONGContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.Style _LONGContent = default;
            private static bool _LONGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.Style.html#NARROW"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.Style NARROW { get { if (!_NARROWReady) { _NARROWContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.Style>(LocalBridgeClazz, "NARROW"); _NARROWReady = true; } return _NARROWContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.Style _NARROWContent = default;
            private static bool _NARROWReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.Style.html#SHORT"/>
            /// </summary>
            public static Android.Icu.Text.RelativeDateTimeFormatter.Style SHORT { get { if (!_SHORTReady) { _SHORTContent = SGetField<Android.Icu.Text.RelativeDateTimeFormatter.Style>(LocalBridgeClazz, "SHORT"); _SHORTReady = true; } return _SHORTContent; } }
            private static Android.Icu.Text.RelativeDateTimeFormatter.Style _SHORTContent = default;
            private static bool _SHORTReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.Style.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Icu.Text.RelativeDateTimeFormatter.Style"/></returns>
            public static Android.Icu.Text.RelativeDateTimeFormatter.Style ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Icu.Text.RelativeDateTimeFormatter.Style>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/icu/text/RelativeDateTimeFormatter$Style;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.Style.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.Icu.Text.RelativeDateTimeFormatter.Style"/></returns>
            public static Android.Icu.Text.RelativeDateTimeFormatter.Style[] Values()
            {
                return SExecuteWithSignatureArray<Android.Icu.Text.RelativeDateTimeFormatter.Style>(LocalBridgeClazz, "values", "()[Landroid/icu/text/RelativeDateTimeFormatter$Style;");
            }
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
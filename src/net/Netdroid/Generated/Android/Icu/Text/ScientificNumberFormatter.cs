/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Icu.Text
{
    #region ScientificNumberFormatter
    public partial class ScientificNumberFormatter
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/ScientificNumberFormatter.html#getMarkupInstance(android.icu.text.DecimalFormat,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Icu.Text.DecimalFormat"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Icu.Text.ScientificNumberFormatter"/></returns>
        public static Android.Icu.Text.ScientificNumberFormatter GetMarkupInstance(Android.Icu.Text.DecimalFormat arg0, Java.Lang.String arg1, Java.Lang.String arg2)
        {
            return SExecute<Android.Icu.Text.ScientificNumberFormatter>(LocalBridgeClazz, "getMarkupInstance", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/ScientificNumberFormatter.html#getMarkupInstance(android.icu.util.ULocale,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Icu.Util.ULocale"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Icu.Text.ScientificNumberFormatter"/></returns>
        public static Android.Icu.Text.ScientificNumberFormatter GetMarkupInstance(Android.Icu.Util.ULocale arg0, Java.Lang.String arg1, Java.Lang.String arg2)
        {
            return SExecute<Android.Icu.Text.ScientificNumberFormatter>(LocalBridgeClazz, "getMarkupInstance", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/ScientificNumberFormatter.html#getSuperscriptInstance(android.icu.text.DecimalFormat)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Icu.Text.DecimalFormat"/></param>
        /// <returns><see cref="Android.Icu.Text.ScientificNumberFormatter"/></returns>
        public static Android.Icu.Text.ScientificNumberFormatter GetSuperscriptInstance(Android.Icu.Text.DecimalFormat arg0)
        {
            return SExecuteWithSignature<Android.Icu.Text.ScientificNumberFormatter>(LocalBridgeClazz, "getSuperscriptInstance", "(Landroid/icu/text/DecimalFormat;)Landroid/icu/text/ScientificNumberFormatter;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/ScientificNumberFormatter.html#getSuperscriptInstance(android.icu.util.ULocale)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Icu.Util.ULocale"/></param>
        /// <returns><see cref="Android.Icu.Text.ScientificNumberFormatter"/></returns>
        public static Android.Icu.Text.ScientificNumberFormatter GetSuperscriptInstance(Android.Icu.Util.ULocale arg0)
        {
            return SExecuteWithSignature<Android.Icu.Text.ScientificNumberFormatter>(LocalBridgeClazz, "getSuperscriptInstance", "(Landroid/icu/util/ULocale;)Landroid/icu/text/ScientificNumberFormatter;", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/ScientificNumberFormatter.html#format(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String Format(object arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("format", "(Ljava/lang/Object;)Ljava/lang/String;", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
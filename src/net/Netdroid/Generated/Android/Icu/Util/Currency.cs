/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Icu.Util
{
    #region Currency declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/icu/util/Currency.html"/>
    /// </summary>
    public partial class Currency : Android.Icu.Util.MeasureUnit
    {
        const string _bridgeClassName = "android.icu.util.Currency";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public Currency() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public Currency(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region CurrencyUsage declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/Currency.CurrencyUsage.html"/>
        /// </summary>
        public partial class CurrencyUsage : Java.Lang.Enum<Android.Icu.Util.Currency.CurrencyUsage>
        {
            const string _bridgeClassName = "android.icu.util.Currency$CurrencyUsage";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public CurrencyUsage() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public CurrencyUsage(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region Currency implementation
    public partial class Currency
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/Currency.html#FORMAL_SYMBOL_NAME"/>
        /// </summary>
        public static int FORMAL_SYMBOL_NAME { get { if (!_FORMAL_SYMBOL_NAMEReady) { _FORMAL_SYMBOL_NAMEContent = SGetField<int>(LocalBridgeClazz, "FORMAL_SYMBOL_NAME"); _FORMAL_SYMBOL_NAMEReady = true; } return _FORMAL_SYMBOL_NAMEContent; } }
        private static int _FORMAL_SYMBOL_NAMEContent = default;
        private static bool _FORMAL_SYMBOL_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/Currency.html#LONG_NAME"/>
        /// </summary>
        public static int LONG_NAME { get { if (!_LONG_NAMEReady) { _LONG_NAMEContent = SGetField<int>(LocalBridgeClazz, "LONG_NAME"); _LONG_NAMEReady = true; } return _LONG_NAMEContent; } }
        private static int _LONG_NAMEContent = default;
        private static bool _LONG_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/Currency.html#NARROW_SYMBOL_NAME"/>
        /// </summary>
        public static int NARROW_SYMBOL_NAME { get { if (!_NARROW_SYMBOL_NAMEReady) { _NARROW_SYMBOL_NAMEContent = SGetField<int>(LocalBridgeClazz, "NARROW_SYMBOL_NAME"); _NARROW_SYMBOL_NAMEReady = true; } return _NARROW_SYMBOL_NAMEContent; } }
        private static int _NARROW_SYMBOL_NAMEContent = default;
        private static bool _NARROW_SYMBOL_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/Currency.html#PLURAL_LONG_NAME"/>
        /// </summary>
        public static int PLURAL_LONG_NAME { get { if (!_PLURAL_LONG_NAMEReady) { _PLURAL_LONG_NAMEContent = SGetField<int>(LocalBridgeClazz, "PLURAL_LONG_NAME"); _PLURAL_LONG_NAMEReady = true; } return _PLURAL_LONG_NAMEContent; } }
        private static int _PLURAL_LONG_NAMEContent = default;
        private static bool _PLURAL_LONG_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/Currency.html#SYMBOL_NAME"/>
        /// </summary>
        public static int SYMBOL_NAME { get { if (!_SYMBOL_NAMEReady) { _SYMBOL_NAMEContent = SGetField<int>(LocalBridgeClazz, "SYMBOL_NAME"); _SYMBOL_NAMEReady = true; } return _SYMBOL_NAMEContent; } }
        private static int _SYMBOL_NAMEContent = default;
        private static bool _SYMBOL_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/Currency.html#VARIANT_SYMBOL_NAME"/>
        /// </summary>
        public static int VARIANT_SYMBOL_NAME { get { if (!_VARIANT_SYMBOL_NAMEReady) { _VARIANT_SYMBOL_NAMEContent = SGetField<int>(LocalBridgeClazz, "VARIANT_SYMBOL_NAME"); _VARIANT_SYMBOL_NAMEReady = true; } return _VARIANT_SYMBOL_NAMEContent; } }
        private static int _VARIANT_SYMBOL_NAMEContent = default;
        private static bool _VARIANT_SYMBOL_NAMEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/Currency.html#fromJavaCurrency(java.util.Currency)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Currency"/></param>
        /// <returns><see cref="Android.Icu.Util.Currency"/></returns>
        public static Android.Icu.Util.Currency FromJavaCurrency(Java.Util.Currency arg0)
        {
            return SExecuteWithSignature<Android.Icu.Util.Currency>(LocalBridgeClazz, "fromJavaCurrency", "(Ljava/util/Currency;)Landroid/icu/util/Currency;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/Currency.html#getInstance(android.icu.util.ULocale)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Icu.Util.ULocale"/></param>
        /// <returns><see cref="Android.Icu.Util.Currency"/></returns>
        public static Android.Icu.Util.Currency GetInstance(Android.Icu.Util.ULocale arg0)
        {
            return SExecuteWithSignature<Android.Icu.Util.Currency>(LocalBridgeClazz, "getInstance", "(Landroid/icu/util/ULocale;)Landroid/icu/util/Currency;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/Currency.html#getInstance(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Icu.Util.Currency"/></returns>
        public static Android.Icu.Util.Currency GetInstance(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<Android.Icu.Util.Currency>(LocalBridgeClazz, "getInstance", "(Ljava/lang/String;)Landroid/icu/util/Currency;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/Currency.html#getInstance(java.util.Locale)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Locale"/></param>
        /// <returns><see cref="Android.Icu.Util.Currency"/></returns>
        public static Android.Icu.Util.Currency GetInstance(Java.Util.Locale arg0)
        {
            return SExecuteWithSignature<Android.Icu.Util.Currency>(LocalBridgeClazz, "getInstance", "(Ljava/util/Locale;)Landroid/icu/util/Currency;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/Currency.html#getAvailableULocales()"/>
        /// </summary>
        /// <returns><see cref="Android.Icu.Util.ULocale"/></returns>
        public static Android.Icu.Util.ULocale[] GetAvailableULocales()
        {
            return SExecuteWithSignatureArray<Android.Icu.Util.ULocale>(LocalBridgeClazz, "getAvailableULocales", "()[Landroid/icu/util/ULocale;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/Currency.html#isAvailable(java.lang.String,java.util.Date,java.util.Date)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Util.Date"/></param>
        /// <param name="arg2"><see cref="Java.Util.Date"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsAvailable(Java.Lang.String arg0, Java.Util.Date arg1, Java.Util.Date arg2)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isAvailable", "(Ljava/lang/String;Ljava/util/Date;Ljava/util/Date;)Z", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/Currency.html#getKeywordValuesForLocale(java.lang.String,android.icu.util.ULocale,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Icu.Util.ULocale"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String[] GetKeywordValuesForLocale(Java.Lang.String arg0, Android.Icu.Util.ULocale arg1, bool arg2)
        {
            return SExecuteWithSignatureArray<Java.Lang.String>(LocalBridgeClazz, "getKeywordValuesForLocale", "(Ljava/lang/String;Landroid/icu/util/ULocale;Z)[Ljava/lang/String;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/Currency.html#getAvailableCurrencyCodes(android.icu.util.ULocale,java.util.Date)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Icu.Util.ULocale"/></param>
        /// <param name="arg1"><see cref="Java.Util.Date"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String[] GetAvailableCurrencyCodes(Android.Icu.Util.ULocale arg0, Java.Util.Date arg1)
        {
            return SExecuteWithSignatureArray<Java.Lang.String>(LocalBridgeClazz, "getAvailableCurrencyCodes", "(Landroid/icu/util/ULocale;Ljava/util/Date;)[Ljava/lang/String;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/Currency.html#getAvailableCurrencyCodes(java.util.Locale,java.util.Date)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Locale"/></param>
        /// <param name="arg1"><see cref="Java.Util.Date"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String[] GetAvailableCurrencyCodes(Java.Util.Locale arg0, Java.Util.Date arg1)
        {
            return SExecuteWithSignatureArray<Java.Lang.String>(LocalBridgeClazz, "getAvailableCurrencyCodes", "(Ljava/util/Locale;Ljava/util/Date;)[Ljava/lang/String;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/Currency.html#getAvailableLocales()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Locale"/></returns>
        public static Java.Util.Locale[] GetAvailableLocales()
        {
            return SExecuteWithSignatureArray<Java.Util.Locale>(LocalBridgeClazz, "getAvailableLocales", "()[Ljava/util/Locale;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/Currency.html#getAvailableCurrencies()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Set"/></returns>
        public static Java.Util.Set<Android.Icu.Util.Currency> GetAvailableCurrencies()
        {
            return SExecuteWithSignature<Java.Util.Set<Android.Icu.Util.Currency>>(LocalBridgeClazz, "getAvailableCurrencies", "()Ljava/util/Set;");
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/Currency.html#getRoundingIncrement()"/>
        /// </summary>
        /// <returns><see cref="double"/></returns>
        public double GetRoundingIncrement()
        {
            return IExecuteWithSignature<double>("getRoundingIncrement", "()D");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/Currency.html#getRoundingIncrement(android.icu.util.Currency.CurrencyUsage)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Icu.Util.Currency.CurrencyUsage"/></param>
        /// <returns><see cref="double"/></returns>
        public double GetRoundingIncrement(Android.Icu.Util.Currency.CurrencyUsage arg0)
        {
            return IExecuteWithSignature<double>("getRoundingIncrement", "(Landroid/icu/util/Currency$CurrencyUsage;)D", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/Currency.html#getDefaultFractionDigits()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetDefaultFractionDigits()
        {
            return IExecuteWithSignature<int>("getDefaultFractionDigits", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/Currency.html#getDefaultFractionDigits(android.icu.util.Currency.CurrencyUsage)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Icu.Util.Currency.CurrencyUsage"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetDefaultFractionDigits(Android.Icu.Util.Currency.CurrencyUsage arg0)
        {
            return IExecuteWithSignature<int>("getDefaultFractionDigits", "(Landroid/icu/util/Currency$CurrencyUsage;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/Currency.html#getNumericCode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetNumericCode()
        {
            return IExecuteWithSignature<int>("getNumericCode", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/Currency.html#getCurrencyCode()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetCurrencyCode()
        {
            return IExecuteWithSignature<Java.Lang.String>("getCurrencyCode", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/Currency.html#getDisplayName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetDisplayName()
        {
            return IExecuteWithSignature<Java.Lang.String>("getDisplayName", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/Currency.html#getDisplayName(java.util.Locale)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Locale"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetDisplayName(Java.Util.Locale arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getDisplayName", "(Ljava/util/Locale;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/Currency.html#getName(android.icu.util.ULocale,int,boolean[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Icu.Util.ULocale"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetName(Android.Icu.Util.ULocale arg0, int arg1, bool[] arg2)
        {
            return IExecuteWithSignature<Java.Lang.String>("getName", "(Landroid/icu/util/ULocale;I[Z)Ljava/lang/String;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/Currency.html#getName(android.icu.util.ULocale,int,java.lang.String,boolean[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Icu.Util.ULocale"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetName(Android.Icu.Util.ULocale arg0, int arg1, Java.Lang.String arg2, bool[] arg3)
        {
            return IExecuteWithSignature<Java.Lang.String>("getName", "(Landroid/icu/util/ULocale;ILjava/lang/String;[Z)Ljava/lang/String;", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/Currency.html#getName(java.util.Locale,int,boolean[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Locale"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetName(Java.Util.Locale arg0, int arg1, bool[] arg2)
        {
            return IExecuteWithSignature<Java.Lang.String>("getName", "(Ljava/util/Locale;I[Z)Ljava/lang/String;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/Currency.html#getName(java.util.Locale,int,java.lang.String,boolean[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Locale"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetName(Java.Util.Locale arg0, int arg1, Java.Lang.String arg2, bool[] arg3)
        {
            return IExecuteWithSignature<Java.Lang.String>("getName", "(Ljava/util/Locale;ILjava/lang/String;[Z)Ljava/lang/String;", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/Currency.html#getSymbol()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetSymbol()
        {
            return IExecuteWithSignature<Java.Lang.String>("getSymbol", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/Currency.html#getSymbol(android.icu.util.ULocale)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Icu.Util.ULocale"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetSymbol(Android.Icu.Util.ULocale arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getSymbol", "(Landroid/icu/util/ULocale;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/Currency.html#getSymbol(java.util.Locale)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Locale"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetSymbol(Java.Util.Locale arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getSymbol", "(Ljava/util/Locale;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/Currency.html#toJavaCurrency()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Currency"/></returns>
        public Java.Util.Currency ToJavaCurrency()
        {
            return IExecuteWithSignature<Java.Util.Currency>("toJavaCurrency", "()Ljava/util/Currency;");
        }

        #endregion

        #region Nested classes
        #region CurrencyUsage implementation
        public partial class CurrencyUsage
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/util/Currency.CurrencyUsage.html#CASH"/>
            /// </summary>
            public static Android.Icu.Util.Currency.CurrencyUsage CASH { get { if (!_CASHReady) { _CASHContent = SGetField<Android.Icu.Util.Currency.CurrencyUsage>(LocalBridgeClazz, "CASH"); _CASHReady = true; } return _CASHContent; } }
            private static Android.Icu.Util.Currency.CurrencyUsage _CASHContent = default;
            private static bool _CASHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/util/Currency.CurrencyUsage.html#STANDARD"/>
            /// </summary>
            public static Android.Icu.Util.Currency.CurrencyUsage STANDARD { get { if (!_STANDARDReady) { _STANDARDContent = SGetField<Android.Icu.Util.Currency.CurrencyUsage>(LocalBridgeClazz, "STANDARD"); _STANDARDReady = true; } return _STANDARDContent; } }
            private static Android.Icu.Util.Currency.CurrencyUsage _STANDARDContent = default;
            private static bool _STANDARDReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/util/Currency.CurrencyUsage.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Icu.Util.Currency.CurrencyUsage"/></returns>
            public static Android.Icu.Util.Currency.CurrencyUsage ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Icu.Util.Currency.CurrencyUsage>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/icu/util/Currency$CurrencyUsage;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/icu/util/Currency.CurrencyUsage.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.Icu.Util.Currency.CurrencyUsage"/></returns>
            public static Android.Icu.Util.Currency.CurrencyUsage[] Values()
            {
                return SExecuteWithSignatureArray<Android.Icu.Util.Currency.CurrencyUsage>(LocalBridgeClazz, "values", "()[Landroid/icu/util/Currency$CurrencyUsage;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
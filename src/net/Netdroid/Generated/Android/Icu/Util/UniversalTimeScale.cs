/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Icu.Util
{
    #region UniversalTimeScale declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/icu/util/UniversalTimeScale.html"/>
    /// </summary>
    public partial class UniversalTimeScale : MASES.JCOBridge.C2JBridge.JVMBridgeBase<UniversalTimeScale>
    {
        const string _bridgeClassName = "android.icu.util.UniversalTimeScale";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public UniversalTimeScale() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public UniversalTimeScale(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region UniversalTimeScale implementation
    public partial class UniversalTimeScale
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/UniversalTimeScale.html#DB2_TIME"/>
        /// </summary>
        public static int DB2_TIME { get { if (!_DB2_TIMEReady) { _DB2_TIMEContent = SGetField<int>(LocalBridgeClazz, "DB2_TIME"); _DB2_TIMEReady = true; } return _DB2_TIMEContent; } }
        private static int _DB2_TIMEContent = default;
        private static bool _DB2_TIMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/UniversalTimeScale.html#DOTNET_DATE_TIME"/>
        /// </summary>
        public static int DOTNET_DATE_TIME { get { if (!_DOTNET_DATE_TIMEReady) { _DOTNET_DATE_TIMEContent = SGetField<int>(LocalBridgeClazz, "DOTNET_DATE_TIME"); _DOTNET_DATE_TIMEReady = true; } return _DOTNET_DATE_TIMEContent; } }
        private static int _DOTNET_DATE_TIMEContent = default;
        private static bool _DOTNET_DATE_TIMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/UniversalTimeScale.html#EPOCH_OFFSET_PLUS_1_VALUE"/>
        /// </summary>
        public static int EPOCH_OFFSET_PLUS_1_VALUE { get { if (!_EPOCH_OFFSET_PLUS_1_VALUEReady) { _EPOCH_OFFSET_PLUS_1_VALUEContent = SGetField<int>(LocalBridgeClazz, "EPOCH_OFFSET_PLUS_1_VALUE"); _EPOCH_OFFSET_PLUS_1_VALUEReady = true; } return _EPOCH_OFFSET_PLUS_1_VALUEContent; } }
        private static int _EPOCH_OFFSET_PLUS_1_VALUEContent = default;
        private static bool _EPOCH_OFFSET_PLUS_1_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/UniversalTimeScale.html#EPOCH_OFFSET_VALUE"/>
        /// </summary>
        public static int EPOCH_OFFSET_VALUE { get { if (!_EPOCH_OFFSET_VALUEReady) { _EPOCH_OFFSET_VALUEContent = SGetField<int>(LocalBridgeClazz, "EPOCH_OFFSET_VALUE"); _EPOCH_OFFSET_VALUEReady = true; } return _EPOCH_OFFSET_VALUEContent; } }
        private static int _EPOCH_OFFSET_VALUEContent = default;
        private static bool _EPOCH_OFFSET_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/UniversalTimeScale.html#EXCEL_TIME"/>
        /// </summary>
        public static int EXCEL_TIME { get { if (!_EXCEL_TIMEReady) { _EXCEL_TIMEContent = SGetField<int>(LocalBridgeClazz, "EXCEL_TIME"); _EXCEL_TIMEReady = true; } return _EXCEL_TIMEContent; } }
        private static int _EXCEL_TIMEContent = default;
        private static bool _EXCEL_TIMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/UniversalTimeScale.html#FROM_MAX_VALUE"/>
        /// </summary>
        public static int FROM_MAX_VALUE { get { if (!_FROM_MAX_VALUEReady) { _FROM_MAX_VALUEContent = SGetField<int>(LocalBridgeClazz, "FROM_MAX_VALUE"); _FROM_MAX_VALUEReady = true; } return _FROM_MAX_VALUEContent; } }
        private static int _FROM_MAX_VALUEContent = default;
        private static bool _FROM_MAX_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/UniversalTimeScale.html#FROM_MIN_VALUE"/>
        /// </summary>
        public static int FROM_MIN_VALUE { get { if (!_FROM_MIN_VALUEReady) { _FROM_MIN_VALUEContent = SGetField<int>(LocalBridgeClazz, "FROM_MIN_VALUE"); _FROM_MIN_VALUEReady = true; } return _FROM_MIN_VALUEContent; } }
        private static int _FROM_MIN_VALUEContent = default;
        private static bool _FROM_MIN_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/UniversalTimeScale.html#ICU4C_TIME"/>
        /// </summary>
        public static int ICU4C_TIME { get { if (!_ICU4C_TIMEReady) { _ICU4C_TIMEContent = SGetField<int>(LocalBridgeClazz, "ICU4C_TIME"); _ICU4C_TIMEReady = true; } return _ICU4C_TIMEContent; } }
        private static int _ICU4C_TIMEContent = default;
        private static bool _ICU4C_TIMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/UniversalTimeScale.html#JAVA_TIME"/>
        /// </summary>
        public static int JAVA_TIME { get { if (!_JAVA_TIMEReady) { _JAVA_TIMEContent = SGetField<int>(LocalBridgeClazz, "JAVA_TIME"); _JAVA_TIMEReady = true; } return _JAVA_TIMEContent; } }
        private static int _JAVA_TIMEContent = default;
        private static bool _JAVA_TIMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/UniversalTimeScale.html#MAC_OLD_TIME"/>
        /// </summary>
        public static int MAC_OLD_TIME { get { if (!_MAC_OLD_TIMEReady) { _MAC_OLD_TIMEContent = SGetField<int>(LocalBridgeClazz, "MAC_OLD_TIME"); _MAC_OLD_TIMEReady = true; } return _MAC_OLD_TIMEContent; } }
        private static int _MAC_OLD_TIMEContent = default;
        private static bool _MAC_OLD_TIMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/UniversalTimeScale.html#MAC_TIME"/>
        /// </summary>
        public static int MAC_TIME { get { if (!_MAC_TIMEReady) { _MAC_TIMEContent = SGetField<int>(LocalBridgeClazz, "MAC_TIME"); _MAC_TIMEReady = true; } return _MAC_TIMEContent; } }
        private static int _MAC_TIMEContent = default;
        private static bool _MAC_TIMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/UniversalTimeScale.html#MAX_SCALE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int MAX_SCALE { get { if (!_MAX_SCALEReady) { _MAX_SCALEContent = SGetField<int>(LocalBridgeClazz, "MAX_SCALE"); _MAX_SCALEReady = true; } return _MAX_SCALEContent; } }
        private static int _MAX_SCALEContent = default;
        private static bool _MAX_SCALEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/UniversalTimeScale.html#TO_MAX_VALUE"/>
        /// </summary>
        public static int TO_MAX_VALUE { get { if (!_TO_MAX_VALUEReady) { _TO_MAX_VALUEContent = SGetField<int>(LocalBridgeClazz, "TO_MAX_VALUE"); _TO_MAX_VALUEReady = true; } return _TO_MAX_VALUEContent; } }
        private static int _TO_MAX_VALUEContent = default;
        private static bool _TO_MAX_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/UniversalTimeScale.html#TO_MIN_VALUE"/>
        /// </summary>
        public static int TO_MIN_VALUE { get { if (!_TO_MIN_VALUEReady) { _TO_MIN_VALUEContent = SGetField<int>(LocalBridgeClazz, "TO_MIN_VALUE"); _TO_MIN_VALUEReady = true; } return _TO_MIN_VALUEContent; } }
        private static int _TO_MIN_VALUEContent = default;
        private static bool _TO_MIN_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/UniversalTimeScale.html#UNITS_VALUE"/>
        /// </summary>
        public static int UNITS_VALUE { get { if (!_UNITS_VALUEReady) { _UNITS_VALUEContent = SGetField<int>(LocalBridgeClazz, "UNITS_VALUE"); _UNITS_VALUEReady = true; } return _UNITS_VALUEContent; } }
        private static int _UNITS_VALUEContent = default;
        private static bool _UNITS_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/UniversalTimeScale.html#UNIX_MICROSECONDS_TIME"/>
        /// </summary>
        public static int UNIX_MICROSECONDS_TIME { get { if (!_UNIX_MICROSECONDS_TIMEReady) { _UNIX_MICROSECONDS_TIMEContent = SGetField<int>(LocalBridgeClazz, "UNIX_MICROSECONDS_TIME"); _UNIX_MICROSECONDS_TIMEReady = true; } return _UNIX_MICROSECONDS_TIMEContent; } }
        private static int _UNIX_MICROSECONDS_TIMEContent = default;
        private static bool _UNIX_MICROSECONDS_TIMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/UniversalTimeScale.html#UNIX_TIME"/>
        /// </summary>
        public static int UNIX_TIME { get { if (!_UNIX_TIMEReady) { _UNIX_TIMEContent = SGetField<int>(LocalBridgeClazz, "UNIX_TIME"); _UNIX_TIMEReady = true; } return _UNIX_TIMEContent; } }
        private static int _UNIX_TIMEContent = default;
        private static bool _UNIX_TIMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/UniversalTimeScale.html#WINDOWS_FILE_TIME"/>
        /// </summary>
        public static int WINDOWS_FILE_TIME { get { if (!_WINDOWS_FILE_TIMEReady) { _WINDOWS_FILE_TIMEContent = SGetField<int>(LocalBridgeClazz, "WINDOWS_FILE_TIME"); _WINDOWS_FILE_TIMEReady = true; } return _WINDOWS_FILE_TIMEContent; } }
        private static int _WINDOWS_FILE_TIMEContent = default;
        private static bool _WINDOWS_FILE_TIMEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/UniversalTimeScale.html#bigDecimalFrom(android.icu.math.BigDecimal,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Icu.Math.BigDecimal"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.Icu.Math.BigDecimal"/></returns>
        public static Android.Icu.Math.BigDecimal BigDecimalFrom(Android.Icu.Math.BigDecimal arg0, int arg1)
        {
            return SExecute<Android.Icu.Math.BigDecimal>(LocalBridgeClazz, "bigDecimalFrom", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/UniversalTimeScale.html#bigDecimalFrom(double,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="double"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.Icu.Math.BigDecimal"/></returns>
        public static Android.Icu.Math.BigDecimal BigDecimalFrom(double arg0, int arg1)
        {
            return SExecute<Android.Icu.Math.BigDecimal>(LocalBridgeClazz, "bigDecimalFrom", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/UniversalTimeScale.html#bigDecimalFrom(long,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.Icu.Math.BigDecimal"/></returns>
        public static Android.Icu.Math.BigDecimal BigDecimalFrom(long arg0, int arg1)
        {
            return SExecute<Android.Icu.Math.BigDecimal>(LocalBridgeClazz, "bigDecimalFrom", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/UniversalTimeScale.html#toBigDecimal(android.icu.math.BigDecimal,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Icu.Math.BigDecimal"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.Icu.Math.BigDecimal"/></returns>
        public static Android.Icu.Math.BigDecimal ToBigDecimal(Android.Icu.Math.BigDecimal arg0, int arg1)
        {
            return SExecute<Android.Icu.Math.BigDecimal>(LocalBridgeClazz, "toBigDecimal", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/UniversalTimeScale.html#toBigDecimal(long,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.Icu.Math.BigDecimal"/></returns>
        public static Android.Icu.Math.BigDecimal ToBigDecimal(long arg0, int arg1)
        {
            return SExecute<Android.Icu.Math.BigDecimal>(LocalBridgeClazz, "toBigDecimal", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/UniversalTimeScale.html#from(long,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="long"/></returns>
        public static long From(long arg0, int arg1)
        {
            return SExecute<long>(LocalBridgeClazz, "from", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/UniversalTimeScale.html#getTimeScaleValue(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="long"/></returns>
        public static long GetTimeScaleValue(int arg0, int arg1)
        {
            return SExecute<long>(LocalBridgeClazz, "getTimeScaleValue", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/util/UniversalTimeScale.html#toLong(long,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="long"/></returns>
        public static long ToLong(long arg0, int arg1)
        {
            return SExecute<long>(LocalBridgeClazz, "toLong", arg0, arg1);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
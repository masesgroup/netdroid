/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Database.Sqlite
{
    #region SQLiteDatabase declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html"/>
    /// </summary>
    public partial class SQLiteDatabase : Android.Database.Sqlite.SQLiteClosable
    {
        const string _bridgeClassName = "android.database.sqlite.SQLiteDatabase";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public SQLiteDatabase() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public SQLiteDatabase(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region CursorFactory declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.CursorFactory.html"/>
        /// </summary>
        public partial class CursorFactory : MASES.JCOBridge.C2JBridge.JVMBridgeBase<CursorFactory>
        {
            const string _bridgeClassName = "android.database.sqlite.SQLiteDatabase$CursorFactory";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("CursorFactory class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public CursorFactory() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("CursorFactory class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public CursorFactory(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region OpenParams declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.html"/>
        /// </summary>
        public partial class OpenParams : MASES.JCOBridge.C2JBridge.JVMBridgeBase<OpenParams>
        {
            const string _bridgeClassName = "android.database.sqlite.SQLiteDatabase$OpenParams";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OpenParams() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public OpenParams(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class
            #region Builder declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.Builder.html"/>
            /// </summary>
            public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
            {
                const string _bridgeClassName = "android.database.sqlite.SQLiteDatabase$OpenParams$Builder";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                public Builder() { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                public Builder(params object[] args) : base(args) { }

                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                /// </summary>
                public override string BridgeClassName => _bridgeClassName;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                /// </summary>
                public override bool IsBridgeAbstract => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                /// </summary>
                public override bool IsBridgeCloseable => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                /// </summary>
                public override bool IsBridgeInterface => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                /// </summary>
                public override bool IsBridgeStatic => true;

                // TODO: complete the class

            }
            #endregion

        
        }
        #endregion

    
    }
    #endregion

    #region SQLiteDatabase implementation
    public partial class SQLiteDatabase
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#CONFLICT_ABORT"/>
        /// </summary>
        public static int CONFLICT_ABORT { get { if (!_CONFLICT_ABORTReady) { _CONFLICT_ABORTContent = SGetField<int>(LocalBridgeClazz, "CONFLICT_ABORT"); _CONFLICT_ABORTReady = true; } return _CONFLICT_ABORTContent; } }
        private static int _CONFLICT_ABORTContent = default;
        private static bool _CONFLICT_ABORTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#CONFLICT_FAIL"/>
        /// </summary>
        public static int CONFLICT_FAIL { get { if (!_CONFLICT_FAILReady) { _CONFLICT_FAILContent = SGetField<int>(LocalBridgeClazz, "CONFLICT_FAIL"); _CONFLICT_FAILReady = true; } return _CONFLICT_FAILContent; } }
        private static int _CONFLICT_FAILContent = default;
        private static bool _CONFLICT_FAILReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#CONFLICT_IGNORE"/>
        /// </summary>
        public static int CONFLICT_IGNORE { get { if (!_CONFLICT_IGNOREReady) { _CONFLICT_IGNOREContent = SGetField<int>(LocalBridgeClazz, "CONFLICT_IGNORE"); _CONFLICT_IGNOREReady = true; } return _CONFLICT_IGNOREContent; } }
        private static int _CONFLICT_IGNOREContent = default;
        private static bool _CONFLICT_IGNOREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#CONFLICT_NONE"/>
        /// </summary>
        public static int CONFLICT_NONE { get { if (!_CONFLICT_NONEReady) { _CONFLICT_NONEContent = SGetField<int>(LocalBridgeClazz, "CONFLICT_NONE"); _CONFLICT_NONEReady = true; } return _CONFLICT_NONEContent; } }
        private static int _CONFLICT_NONEContent = default;
        private static bool _CONFLICT_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#CONFLICT_REPLACE"/>
        /// </summary>
        public static int CONFLICT_REPLACE { get { if (!_CONFLICT_REPLACEReady) { _CONFLICT_REPLACEContent = SGetField<int>(LocalBridgeClazz, "CONFLICT_REPLACE"); _CONFLICT_REPLACEReady = true; } return _CONFLICT_REPLACEContent; } }
        private static int _CONFLICT_REPLACEContent = default;
        private static bool _CONFLICT_REPLACEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#CONFLICT_ROLLBACK"/>
        /// </summary>
        public static int CONFLICT_ROLLBACK { get { if (!_CONFLICT_ROLLBACKReady) { _CONFLICT_ROLLBACKContent = SGetField<int>(LocalBridgeClazz, "CONFLICT_ROLLBACK"); _CONFLICT_ROLLBACKReady = true; } return _CONFLICT_ROLLBACKContent; } }
        private static int _CONFLICT_ROLLBACKContent = default;
        private static bool _CONFLICT_ROLLBACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#CREATE_IF_NECESSARY"/>
        /// </summary>
        public static int CREATE_IF_NECESSARY { get { if (!_CREATE_IF_NECESSARYReady) { _CREATE_IF_NECESSARYContent = SGetField<int>(LocalBridgeClazz, "CREATE_IF_NECESSARY"); _CREATE_IF_NECESSARYReady = true; } return _CREATE_IF_NECESSARYContent; } }
        private static int _CREATE_IF_NECESSARYContent = default;
        private static bool _CREATE_IF_NECESSARYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#ENABLE_WRITE_AHEAD_LOGGING"/>
        /// </summary>
        public static int ENABLE_WRITE_AHEAD_LOGGING { get { if (!_ENABLE_WRITE_AHEAD_LOGGINGReady) { _ENABLE_WRITE_AHEAD_LOGGINGContent = SGetField<int>(LocalBridgeClazz, "ENABLE_WRITE_AHEAD_LOGGING"); _ENABLE_WRITE_AHEAD_LOGGINGReady = true; } return _ENABLE_WRITE_AHEAD_LOGGINGContent; } }
        private static int _ENABLE_WRITE_AHEAD_LOGGINGContent = default;
        private static bool _ENABLE_WRITE_AHEAD_LOGGINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#MAX_SQL_CACHE_SIZE"/>
        /// </summary>
        public static int MAX_SQL_CACHE_SIZE { get { if (!_MAX_SQL_CACHE_SIZEReady) { _MAX_SQL_CACHE_SIZEContent = SGetField<int>(LocalBridgeClazz, "MAX_SQL_CACHE_SIZE"); _MAX_SQL_CACHE_SIZEReady = true; } return _MAX_SQL_CACHE_SIZEContent; } }
        private static int _MAX_SQL_CACHE_SIZEContent = default;
        private static bool _MAX_SQL_CACHE_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#NO_LOCALIZED_COLLATORS"/>
        /// </summary>
        public static int NO_LOCALIZED_COLLATORS { get { if (!_NO_LOCALIZED_COLLATORSReady) { _NO_LOCALIZED_COLLATORSContent = SGetField<int>(LocalBridgeClazz, "NO_LOCALIZED_COLLATORS"); _NO_LOCALIZED_COLLATORSReady = true; } return _NO_LOCALIZED_COLLATORSContent; } }
        private static int _NO_LOCALIZED_COLLATORSContent = default;
        private static bool _NO_LOCALIZED_COLLATORSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#OPEN_READONLY"/>
        /// </summary>
        public static int OPEN_READONLY { get { if (!_OPEN_READONLYReady) { _OPEN_READONLYContent = SGetField<int>(LocalBridgeClazz, "OPEN_READONLY"); _OPEN_READONLYReady = true; } return _OPEN_READONLYContent; } }
        private static int _OPEN_READONLYContent = default;
        private static bool _OPEN_READONLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#OPEN_READWRITE"/>
        /// </summary>
        public static int OPEN_READWRITE { get { if (!_OPEN_READWRITEReady) { _OPEN_READWRITEContent = SGetField<int>(LocalBridgeClazz, "OPEN_READWRITE"); _OPEN_READWRITEReady = true; } return _OPEN_READWRITEContent; } }
        private static int _OPEN_READWRITEContent = default;
        private static bool _OPEN_READWRITEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#SQLITE_MAX_LIKE_PATTERN_LENGTH"/>
        /// </summary>
        public static int SQLITE_MAX_LIKE_PATTERN_LENGTH { get { if (!_SQLITE_MAX_LIKE_PATTERN_LENGTHReady) { _SQLITE_MAX_LIKE_PATTERN_LENGTHContent = SGetField<int>(LocalBridgeClazz, "SQLITE_MAX_LIKE_PATTERN_LENGTH"); _SQLITE_MAX_LIKE_PATTERN_LENGTHReady = true; } return _SQLITE_MAX_LIKE_PATTERN_LENGTHContent; } }
        private static int _SQLITE_MAX_LIKE_PATTERN_LENGTHContent = default;
        private static bool _SQLITE_MAX_LIKE_PATTERN_LENGTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#JOURNAL_MODE_DELETE"/>
        /// </summary>
        public static Java.Lang.String JOURNAL_MODE_DELETE { get { if (!_JOURNAL_MODE_DELETEReady) { _JOURNAL_MODE_DELETEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "JOURNAL_MODE_DELETE"); _JOURNAL_MODE_DELETEReady = true; } return _JOURNAL_MODE_DELETEContent; } }
        private static Java.Lang.String _JOURNAL_MODE_DELETEContent = default;
        private static bool _JOURNAL_MODE_DELETEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#JOURNAL_MODE_MEMORY"/>
        /// </summary>
        public static Java.Lang.String JOURNAL_MODE_MEMORY { get { if (!_JOURNAL_MODE_MEMORYReady) { _JOURNAL_MODE_MEMORYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "JOURNAL_MODE_MEMORY"); _JOURNAL_MODE_MEMORYReady = true; } return _JOURNAL_MODE_MEMORYContent; } }
        private static Java.Lang.String _JOURNAL_MODE_MEMORYContent = default;
        private static bool _JOURNAL_MODE_MEMORYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#JOURNAL_MODE_OFF"/>
        /// </summary>
        public static Java.Lang.String JOURNAL_MODE_OFF { get { if (!_JOURNAL_MODE_OFFReady) { _JOURNAL_MODE_OFFContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "JOURNAL_MODE_OFF"); _JOURNAL_MODE_OFFReady = true; } return _JOURNAL_MODE_OFFContent; } }
        private static Java.Lang.String _JOURNAL_MODE_OFFContent = default;
        private static bool _JOURNAL_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#JOURNAL_MODE_PERSIST"/>
        /// </summary>
        public static Java.Lang.String JOURNAL_MODE_PERSIST { get { if (!_JOURNAL_MODE_PERSISTReady) { _JOURNAL_MODE_PERSISTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "JOURNAL_MODE_PERSIST"); _JOURNAL_MODE_PERSISTReady = true; } return _JOURNAL_MODE_PERSISTContent; } }
        private static Java.Lang.String _JOURNAL_MODE_PERSISTContent = default;
        private static bool _JOURNAL_MODE_PERSISTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#JOURNAL_MODE_TRUNCATE"/>
        /// </summary>
        public static Java.Lang.String JOURNAL_MODE_TRUNCATE { get { if (!_JOURNAL_MODE_TRUNCATEReady) { _JOURNAL_MODE_TRUNCATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "JOURNAL_MODE_TRUNCATE"); _JOURNAL_MODE_TRUNCATEReady = true; } return _JOURNAL_MODE_TRUNCATEContent; } }
        private static Java.Lang.String _JOURNAL_MODE_TRUNCATEContent = default;
        private static bool _JOURNAL_MODE_TRUNCATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#JOURNAL_MODE_WAL"/>
        /// </summary>
        public static Java.Lang.String JOURNAL_MODE_WAL { get { if (!_JOURNAL_MODE_WALReady) { _JOURNAL_MODE_WALContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "JOURNAL_MODE_WAL"); _JOURNAL_MODE_WALReady = true; } return _JOURNAL_MODE_WALContent; } }
        private static Java.Lang.String _JOURNAL_MODE_WALContent = default;
        private static bool _JOURNAL_MODE_WALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#SYNC_MODE_EXTRA"/>
        /// </summary>
        public static Java.Lang.String SYNC_MODE_EXTRA { get { if (!_SYNC_MODE_EXTRAReady) { _SYNC_MODE_EXTRAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SYNC_MODE_EXTRA"); _SYNC_MODE_EXTRAReady = true; } return _SYNC_MODE_EXTRAContent; } }
        private static Java.Lang.String _SYNC_MODE_EXTRAContent = default;
        private static bool _SYNC_MODE_EXTRAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#SYNC_MODE_FULL"/>
        /// </summary>
        public static Java.Lang.String SYNC_MODE_FULL { get { if (!_SYNC_MODE_FULLReady) { _SYNC_MODE_FULLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SYNC_MODE_FULL"); _SYNC_MODE_FULLReady = true; } return _SYNC_MODE_FULLContent; } }
        private static Java.Lang.String _SYNC_MODE_FULLContent = default;
        private static bool _SYNC_MODE_FULLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#SYNC_MODE_NORMAL"/>
        /// </summary>
        public static Java.Lang.String SYNC_MODE_NORMAL { get { if (!_SYNC_MODE_NORMALReady) { _SYNC_MODE_NORMALContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SYNC_MODE_NORMAL"); _SYNC_MODE_NORMALReady = true; } return _SYNC_MODE_NORMALContent; } }
        private static Java.Lang.String _SYNC_MODE_NORMALContent = default;
        private static bool _SYNC_MODE_NORMALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#SYNC_MODE_OFF"/>
        /// </summary>
        public static Java.Lang.String SYNC_MODE_OFF { get { if (!_SYNC_MODE_OFFReady) { _SYNC_MODE_OFFContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SYNC_MODE_OFF"); _SYNC_MODE_OFFReady = true; } return _SYNC_MODE_OFFContent; } }
        private static Java.Lang.String _SYNC_MODE_OFFContent = default;
        private static bool _SYNC_MODE_OFFReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#create(android.database.sqlite.SQLiteDatabase.CursorFactory)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Database.Sqlite.SQLiteDatabase.CursorFactory"/></param>
        /// <returns><see cref="Android.Database.Sqlite.SQLiteDatabase"/></returns>
        public static Android.Database.Sqlite.SQLiteDatabase Create(Android.Database.Sqlite.SQLiteDatabase.CursorFactory arg0)
        {
            return SExecuteWithSignature<Android.Database.Sqlite.SQLiteDatabase>(LocalBridgeClazz, "create", "(Landroid/database/sqlite/SQLiteDatabase$CursorFactory;)Landroid/database/sqlite/SQLiteDatabase;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#createInMemory(android.database.sqlite.SQLiteDatabase.OpenParams)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Database.Sqlite.SQLiteDatabase.OpenParams"/></param>
        /// <returns><see cref="Android.Database.Sqlite.SQLiteDatabase"/></returns>
        public static Android.Database.Sqlite.SQLiteDatabase CreateInMemory(Android.Database.Sqlite.SQLiteDatabase.OpenParams arg0)
        {
            return SExecuteWithSignature<Android.Database.Sqlite.SQLiteDatabase>(LocalBridgeClazz, "createInMemory", "(Landroid/database/sqlite/SQLiteDatabase$OpenParams;)Landroid/database/sqlite/SQLiteDatabase;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#openDatabase(java.io.File,android.database.sqlite.SQLiteDatabase.OpenParams)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.File"/></param>
        /// <param name="arg1"><see cref="Android.Database.Sqlite.SQLiteDatabase.OpenParams"/></param>
        /// <returns><see cref="Android.Database.Sqlite.SQLiteDatabase"/></returns>
        public static Android.Database.Sqlite.SQLiteDatabase OpenDatabase(Java.Io.File arg0, Android.Database.Sqlite.SQLiteDatabase.OpenParams arg1)
        {
            return SExecute<Android.Database.Sqlite.SQLiteDatabase>(LocalBridgeClazz, "openDatabase", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase.CursorFactory,int,android.database.DatabaseErrorHandler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Database.Sqlite.SQLiteDatabase.CursorFactory"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Android.Database.DatabaseErrorHandler"/></param>
        /// <returns><see cref="Android.Database.Sqlite.SQLiteDatabase"/></returns>
        public static Android.Database.Sqlite.SQLiteDatabase OpenDatabase(Java.Lang.String arg0, Android.Database.Sqlite.SQLiteDatabase.CursorFactory arg1, int arg2, Android.Database.DatabaseErrorHandler arg3)
        {
            return SExecute<Android.Database.Sqlite.SQLiteDatabase>(LocalBridgeClazz, "openDatabase", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase.CursorFactory,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Database.Sqlite.SQLiteDatabase.CursorFactory"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="Android.Database.Sqlite.SQLiteDatabase"/></returns>
        public static Android.Database.Sqlite.SQLiteDatabase OpenDatabase(Java.Lang.String arg0, Android.Database.Sqlite.SQLiteDatabase.CursorFactory arg1, int arg2)
        {
            return SExecute<Android.Database.Sqlite.SQLiteDatabase>(LocalBridgeClazz, "openDatabase", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#openOrCreateDatabase(java.io.File,android.database.sqlite.SQLiteDatabase.CursorFactory)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.File"/></param>
        /// <param name="arg1"><see cref="Android.Database.Sqlite.SQLiteDatabase.CursorFactory"/></param>
        /// <returns><see cref="Android.Database.Sqlite.SQLiteDatabase"/></returns>
        public static Android.Database.Sqlite.SQLiteDatabase OpenOrCreateDatabase(Java.Io.File arg0, Android.Database.Sqlite.SQLiteDatabase.CursorFactory arg1)
        {
            return SExecute<Android.Database.Sqlite.SQLiteDatabase>(LocalBridgeClazz, "openOrCreateDatabase", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#openOrCreateDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase.CursorFactory,android.database.DatabaseErrorHandler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Database.Sqlite.SQLiteDatabase.CursorFactory"/></param>
        /// <param name="arg2"><see cref="Android.Database.DatabaseErrorHandler"/></param>
        /// <returns><see cref="Android.Database.Sqlite.SQLiteDatabase"/></returns>
        public static Android.Database.Sqlite.SQLiteDatabase OpenOrCreateDatabase(Java.Lang.String arg0, Android.Database.Sqlite.SQLiteDatabase.CursorFactory arg1, Android.Database.DatabaseErrorHandler arg2)
        {
            return SExecute<Android.Database.Sqlite.SQLiteDatabase>(LocalBridgeClazz, "openOrCreateDatabase", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#openOrCreateDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase.CursorFactory)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Database.Sqlite.SQLiteDatabase.CursorFactory"/></param>
        /// <returns><see cref="Android.Database.Sqlite.SQLiteDatabase"/></returns>
        public static Android.Database.Sqlite.SQLiteDatabase OpenOrCreateDatabase(Java.Lang.String arg0, Android.Database.Sqlite.SQLiteDatabase.CursorFactory arg1)
        {
            return SExecute<Android.Database.Sqlite.SQLiteDatabase>(LocalBridgeClazz, "openOrCreateDatabase", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#deleteDatabase(java.io.File)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.File"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool DeleteDatabase(Java.Io.File arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "deleteDatabase", "(Ljava/io/File;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#releaseMemory()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public static int ReleaseMemory()
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "releaseMemory", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#findEditTable(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String FindEditTable(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "findEditTable", "(Ljava/lang/String;)Ljava/lang/String;", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <param name="arg4"><see cref="Java.Lang.String"/></param>
        /// <param name="arg5"><see cref="Java.Lang.String"/></param>
        /// <param name="arg6"><see cref="Java.Lang.String"/></param>
        /// <param name="arg7"><see cref="Java.Lang.String"/></param>
        /// <param name="arg8"><see cref="Java.Lang.String"/></param>
        /// <param name="arg9"><see cref="Android.Os.CancellationSignal"/></param>
        /// <returns><see cref="Android.Database.Cursor"/></returns>
        public Android.Database.Cursor Query(bool arg0, Java.Lang.String arg1, Java.Lang.String[] arg2, Java.Lang.String arg3, Java.Lang.String[] arg4, Java.Lang.String arg5, Java.Lang.String arg6, Java.Lang.String arg7, Java.Lang.String arg8, Android.Os.CancellationSignal arg9)
        {
            return IExecute<Android.Database.Cursor>("query", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <param name="arg4"><see cref="Java.Lang.String"/></param>
        /// <param name="arg5"><see cref="Java.Lang.String"/></param>
        /// <param name="arg6"><see cref="Java.Lang.String"/></param>
        /// <param name="arg7"><see cref="Java.Lang.String"/></param>
        /// <param name="arg8"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Database.Cursor"/></returns>
        public Android.Database.Cursor Query(bool arg0, Java.Lang.String arg1, Java.Lang.String[] arg2, Java.Lang.String arg3, Java.Lang.String[] arg4, Java.Lang.String arg5, Java.Lang.String arg6, Java.Lang.String arg7, Java.Lang.String arg8)
        {
            return IExecute<Android.Database.Cursor>("query", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <param name="arg4"><see cref="Java.Lang.String"/></param>
        /// <param name="arg5"><see cref="Java.Lang.String"/></param>
        /// <param name="arg6"><see cref="Java.Lang.String"/></param>
        /// <param name="arg7"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Database.Cursor"/></returns>
        public Android.Database.Cursor Query(Java.Lang.String arg0, Java.Lang.String[] arg1, Java.Lang.String arg2, Java.Lang.String[] arg3, Java.Lang.String arg4, Java.Lang.String arg5, Java.Lang.String arg6, Java.Lang.String arg7)
        {
            return IExecute<Android.Database.Cursor>("query", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <param name="arg4"><see cref="Java.Lang.String"/></param>
        /// <param name="arg5"><see cref="Java.Lang.String"/></param>
        /// <param name="arg6"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Database.Cursor"/></returns>
        public Android.Database.Cursor Query(Java.Lang.String arg0, Java.Lang.String[] arg1, Java.Lang.String arg2, Java.Lang.String[] arg3, Java.Lang.String arg4, Java.Lang.String arg5, Java.Lang.String arg6)
        {
            return IExecute<Android.Database.Cursor>("query", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#queryWithFactory(android.database.sqlite.SQLiteDatabase.CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Database.Sqlite.SQLiteDatabase.CursorFactory"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <param name="arg4"><see cref="Java.Lang.String"/></param>
        /// <param name="arg5"><see cref="Java.Lang.String"/></param>
        /// <param name="arg6"><see cref="Java.Lang.String"/></param>
        /// <param name="arg7"><see cref="Java.Lang.String"/></param>
        /// <param name="arg8"><see cref="Java.Lang.String"/></param>
        /// <param name="arg9"><see cref="Java.Lang.String"/></param>
        /// <param name="arg10"><see cref="Android.Os.CancellationSignal"/></param>
        /// <returns><see cref="Android.Database.Cursor"/></returns>
        public Android.Database.Cursor QueryWithFactory(Android.Database.Sqlite.SQLiteDatabase.CursorFactory arg0, bool arg1, Java.Lang.String arg2, Java.Lang.String[] arg3, Java.Lang.String arg4, Java.Lang.String[] arg5, Java.Lang.String arg6, Java.Lang.String arg7, Java.Lang.String arg8, Java.Lang.String arg9, Android.Os.CancellationSignal arg10)
        {
            return IExecute<Android.Database.Cursor>("queryWithFactory", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#queryWithFactory(android.database.sqlite.SQLiteDatabase.CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Database.Sqlite.SQLiteDatabase.CursorFactory"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <param name="arg4"><see cref="Java.Lang.String"/></param>
        /// <param name="arg5"><see cref="Java.Lang.String"/></param>
        /// <param name="arg6"><see cref="Java.Lang.String"/></param>
        /// <param name="arg7"><see cref="Java.Lang.String"/></param>
        /// <param name="arg8"><see cref="Java.Lang.String"/></param>
        /// <param name="arg9"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Database.Cursor"/></returns>
        public Android.Database.Cursor QueryWithFactory(Android.Database.Sqlite.SQLiteDatabase.CursorFactory arg0, bool arg1, Java.Lang.String arg2, Java.Lang.String[] arg3, Java.Lang.String arg4, Java.Lang.String[] arg5, Java.Lang.String arg6, Java.Lang.String arg7, Java.Lang.String arg8, Java.Lang.String arg9)
        {
            return IExecute<Android.Database.Cursor>("queryWithFactory", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#rawQuery(java.lang.String,java.lang.String[],android.os.CancellationSignal)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Android.Os.CancellationSignal"/></param>
        /// <returns><see cref="Android.Database.Cursor"/></returns>
        public Android.Database.Cursor RawQuery(Java.Lang.String arg0, Java.Lang.String[] arg1, Android.Os.CancellationSignal arg2)
        {
            return IExecute<Android.Database.Cursor>("rawQuery", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#rawQuery(java.lang.String,java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Database.Cursor"/></returns>
        public Android.Database.Cursor RawQuery(Java.Lang.String arg0, Java.Lang.String[] arg1)
        {
            return IExecute<Android.Database.Cursor>("rawQuery", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#rawQueryWithFactory(android.database.sqlite.SQLiteDatabase.CursorFactory,java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Database.Sqlite.SQLiteDatabase.CursorFactory"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <param name="arg4"><see cref="Android.Os.CancellationSignal"/></param>
        /// <returns><see cref="Android.Database.Cursor"/></returns>
        public Android.Database.Cursor RawQueryWithFactory(Android.Database.Sqlite.SQLiteDatabase.CursorFactory arg0, Java.Lang.String arg1, Java.Lang.String[] arg2, Java.Lang.String arg3, Android.Os.CancellationSignal arg4)
        {
            return IExecute<Android.Database.Cursor>("rawQueryWithFactory", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#rawQueryWithFactory(android.database.sqlite.SQLiteDatabase.CursorFactory,java.lang.String,java.lang.String[],java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Database.Sqlite.SQLiteDatabase.CursorFactory"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Database.Cursor"/></returns>
        public Android.Database.Cursor RawQueryWithFactory(Android.Database.Sqlite.SQLiteDatabase.CursorFactory arg0, Java.Lang.String arg1, Java.Lang.String[] arg2, Java.Lang.String arg3)
        {
            return IExecute<Android.Database.Cursor>("rawQueryWithFactory", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#createRawStatement(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Database.Sqlite.SQLiteRawStatement"/></returns>
        public Android.Database.Sqlite.SQLiteRawStatement CreateRawStatement(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Android.Database.Sqlite.SQLiteRawStatement>("createRawStatement", "(Ljava/lang/String;)Landroid/database/sqlite/SQLiteRawStatement;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#compileStatement(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Database.Sqlite.SQLiteStatement"/></returns>
        /// <exception cref="Android.Database.SQLException"/>
        public Android.Database.Sqlite.SQLiteStatement CompileStatement(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Android.Database.Sqlite.SQLiteStatement>("compileStatement", "(Ljava/lang/String;)Landroid/database/sqlite/SQLiteStatement;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#enableWriteAheadLogging()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool EnableWriteAheadLogging()
        {
            return IExecuteWithSignature<bool>("enableWriteAheadLogging", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#inTransaction()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool InTransaction()
        {
            return IExecuteWithSignature<bool>("inTransaction", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#isDatabaseIntegrityOk()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDatabaseIntegrityOk()
        {
            return IExecuteWithSignature<bool>("isDatabaseIntegrityOk", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#isDbLockedByCurrentThread()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDbLockedByCurrentThread()
        {
            return IExecuteWithSignature<bool>("isDbLockedByCurrentThread", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#isDbLockedByOtherThreads()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool IsDbLockedByOtherThreads()
        {
            return IExecuteWithSignature<bool>("isDbLockedByOtherThreads", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#isOpen()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsOpen()
        {
            return IExecuteWithSignature<bool>("isOpen", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#isReadOnly()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsReadOnly()
        {
            return IExecuteWithSignature<bool>("isReadOnly", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#isWriteAheadLoggingEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsWriteAheadLoggingEnabled()
        {
            return IExecuteWithSignature<bool>("isWriteAheadLoggingEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#needUpgrade(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool NeedUpgrade(int arg0)
        {
            return IExecuteWithSignature<bool>("needUpgrade", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#yieldIfContended()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool YieldIfContended()
        {
            return IExecuteWithSignature<bool>("yieldIfContended", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#yieldIfContendedSafely()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool YieldIfContendedSafely()
        {
            return IExecuteWithSignature<bool>("yieldIfContendedSafely", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#yieldIfContendedSafely(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool YieldIfContendedSafely(long arg0)
        {
            return IExecuteWithSignature<bool>("yieldIfContendedSafely", "(J)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#delete(java.lang.String,java.lang.String,java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public int Delete(Java.Lang.String arg0, Java.Lang.String arg1, Java.Lang.String[] arg2)
        {
            return IExecute<int>("delete", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#getVersion()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetVersion()
        {
            return IExecuteWithSignature<int>("getVersion", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Content.ContentValues"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public int Update(Java.Lang.String arg0, Android.Content.ContentValues arg1, Java.Lang.String arg2, Java.Lang.String[] arg3)
        {
            return IExecute<int>("update", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#updateWithOnConflict(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Content.ContentValues"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int UpdateWithOnConflict(Java.Lang.String arg0, Android.Content.ContentValues arg1, Java.Lang.String arg2, Java.Lang.String[] arg3, int arg4)
        {
            return IExecute<int>("updateWithOnConflict", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#getPath()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetPath()
        {
            return IExecuteWithSignature<Java.Lang.String>("getPath", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#getAttachedDbs()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Util.Pair<Java.Lang.String, Java.Lang.String>> GetAttachedDbs()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Util.Pair<Java.Lang.String, Java.Lang.String>>>("getAttachedDbs", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#getSyncedTables()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Map"/></returns>
        [global::System.Obsolete()]
        public Java.Util.Map<Java.Lang.String, Java.Lang.String> GetSyncedTables()
        {
            return IExecuteWithSignature<Java.Util.Map<Java.Lang.String, Java.Lang.String>>("getSyncedTables", "()Ljava/util/Map;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#getLastChangedRowCount()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetLastChangedRowCount()
        {
            return IExecuteWithSignature<long>("getLastChangedRowCount", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#getLastInsertRowId()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetLastInsertRowId()
        {
            return IExecuteWithSignature<long>("getLastInsertRowId", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#getMaximumSize()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetMaximumSize()
        {
            return IExecuteWithSignature<long>("getMaximumSize", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#getPageSize()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetPageSize()
        {
            return IExecuteWithSignature<long>("getPageSize", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#getTotalChangedRowCount()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetTotalChangedRowCount()
        {
            return IExecuteWithSignature<long>("getTotalChangedRowCount", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#insert(java.lang.String,java.lang.String,android.content.ContentValues)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Android.Content.ContentValues"/></param>
        /// <returns><see cref="long"/></returns>
        public long Insert(Java.Lang.String arg0, Java.Lang.String arg1, Android.Content.ContentValues arg2)
        {
            return IExecute<long>("insert", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#insertOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Android.Content.ContentValues"/></param>
        /// <returns><see cref="long"/></returns>
        /// <exception cref="Android.Database.SQLException"/>
        public long InsertOrThrow(Java.Lang.String arg0, Java.Lang.String arg1, Android.Content.ContentValues arg2)
        {
            return IExecute<long>("insertOrThrow", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Android.Content.ContentValues"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="long"/></returns>
        public long InsertWithOnConflict(Java.Lang.String arg0, Java.Lang.String arg1, Android.Content.ContentValues arg2, int arg3)
        {
            return IExecute<long>("insertWithOnConflict", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#replace(java.lang.String,java.lang.String,android.content.ContentValues)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Android.Content.ContentValues"/></param>
        /// <returns><see cref="long"/></returns>
        public long Replace(Java.Lang.String arg0, Java.Lang.String arg1, Android.Content.ContentValues arg2)
        {
            return IExecute<long>("replace", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#replaceOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Android.Content.ContentValues"/></param>
        /// <returns><see cref="long"/></returns>
        /// <exception cref="Android.Database.SQLException"/>
        public long ReplaceOrThrow(Java.Lang.String arg0, Java.Lang.String arg1, Android.Content.ContentValues arg2)
        {
            return IExecute<long>("replaceOrThrow", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#setMaximumSize(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="long"/></returns>
        public long SetMaximumSize(long arg0)
        {
            return IExecuteWithSignature<long>("setMaximumSize", "(J)J", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#beginTransaction()"/>
        /// </summary>
        public void BeginTransaction()
        {
            IExecuteWithSignature("beginTransaction", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#beginTransactionNonExclusive()"/>
        /// </summary>
        public void BeginTransactionNonExclusive()
        {
            IExecuteWithSignature("beginTransactionNonExclusive", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#beginTransactionReadOnly()"/>
        /// </summary>
        public void BeginTransactionReadOnly()
        {
            IExecuteWithSignature("beginTransactionReadOnly", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#beginTransactionWithListener(android.database.sqlite.SQLiteTransactionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Database.Sqlite.SQLiteTransactionListener"/></param>
        public void BeginTransactionWithListener(Android.Database.Sqlite.SQLiteTransactionListener arg0)
        {
            IExecuteWithSignature("beginTransactionWithListener", "(Landroid/database/sqlite/SQLiteTransactionListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#beginTransactionWithListenerNonExclusive(android.database.sqlite.SQLiteTransactionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Database.Sqlite.SQLiteTransactionListener"/></param>
        public void BeginTransactionWithListenerNonExclusive(Android.Database.Sqlite.SQLiteTransactionListener arg0)
        {
            IExecuteWithSignature("beginTransactionWithListenerNonExclusive", "(Landroid/database/sqlite/SQLiteTransactionListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#beginTransactionWithListenerReadOnly(android.database.sqlite.SQLiteTransactionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Database.Sqlite.SQLiteTransactionListener"/></param>
        public void BeginTransactionWithListenerReadOnly(Android.Database.Sqlite.SQLiteTransactionListener arg0)
        {
            IExecuteWithSignature("beginTransactionWithListenerReadOnly", "(Landroid/database/sqlite/SQLiteTransactionListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#disableWriteAheadLogging()"/>
        /// </summary>
        public void DisableWriteAheadLogging()
        {
            IExecuteWithSignature("disableWriteAheadLogging", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#endTransaction()"/>
        /// </summary>
        public void EndTransaction()
        {
            IExecuteWithSignature("endTransaction", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#execPerConnectionSQL(java.lang.String,java.lang.Object[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="object"/></param>
        /// <exception cref="Android.Database.SQLException"/>
        public void ExecPerConnectionSQL(Java.Lang.String arg0, object[] arg1)
        {
            IExecute("execPerConnectionSQL", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#execSQL(java.lang.String,java.lang.Object[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="object"/></param>
        /// <exception cref="Android.Database.SQLException"/>
        public void ExecSQL(Java.Lang.String arg0, object[] arg1)
        {
            IExecute("execSQL", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#execSQL(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <exception cref="Android.Database.SQLException"/>
        public void ExecSQL(Java.Lang.String arg0)
        {
            IExecuteWithSignature("execSQL", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#markTableSyncable(java.lang.String,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        [global::System.Obsolete()]
        public void MarkTableSyncable(Java.Lang.String arg0, Java.Lang.String arg1, Java.Lang.String arg2)
        {
            IExecute("markTableSyncable", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#markTableSyncable(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        [global::System.Obsolete()]
        public void MarkTableSyncable(Java.Lang.String arg0, Java.Lang.String arg1)
        {
            IExecute("markTableSyncable", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#setCustomAggregateFunction(java.lang.String,java.util.function.BinaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Util.Function.BinaryOperator"/></param>
        /// <exception cref="Android.Database.Sqlite.SQLiteException"/>
        public void SetCustomAggregateFunction(Java.Lang.String arg0, Java.Util.Function.BinaryOperator<Java.Lang.String> arg1)
        {
            IExecute("setCustomAggregateFunction", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#setCustomScalarFunction(java.lang.String,java.util.function.UnaryOperator)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Util.Function.UnaryOperator"/></param>
        /// <exception cref="Android.Database.Sqlite.SQLiteException"/>
        public void SetCustomScalarFunction(Java.Lang.String arg0, Java.Util.Function.UnaryOperator<Java.Lang.String> arg1)
        {
            IExecute("setCustomScalarFunction", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#setForeignKeyConstraintsEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetForeignKeyConstraintsEnabled(bool arg0)
        {
            IExecuteWithSignature("setForeignKeyConstraintsEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#setLocale(java.util.Locale)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Locale"/></param>
        public void SetLocale(Java.Util.Locale arg0)
        {
            IExecuteWithSignature("setLocale", "(Ljava/util/Locale;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#setLockingEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void SetLockingEnabled(bool arg0)
        {
            IExecuteWithSignature("setLockingEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#setMaxSqlCacheSize(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetMaxSqlCacheSize(int arg0)
        {
            IExecuteWithSignature("setMaxSqlCacheSize", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#setPageSize(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        public void SetPageSize(long arg0)
        {
            IExecuteWithSignature("setPageSize", "(J)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#setTransactionSuccessful()"/>
        /// </summary>
        public void SetTransactionSuccessful()
        {
            IExecuteWithSignature("setTransactionSuccessful", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#setVersion(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetVersion(int arg0)
        {
            IExecuteWithSignature("setVersion", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#validateSql(java.lang.String,android.os.CancellationSignal)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Os.CancellationSignal"/></param>
        public void ValidateSql(Java.Lang.String arg0, Android.Os.CancellationSignal arg1)
        {
            IExecute("validateSql", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region CursorFactory implementation
        public partial class CursorFactory
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.CursorFactory.html#newCursor(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteCursorDriver,java.lang.String,android.database.sqlite.SQLiteQuery)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Database.Sqlite.SQLiteDatabase"/></param>
            /// <param name="arg1"><see cref="Android.Database.Sqlite.SQLiteCursorDriver"/></param>
            /// <param name="arg2"><see cref="Java.Lang.String"/></param>
            /// <param name="arg3"><see cref="Android.Database.Sqlite.SQLiteQuery"/></param>
            /// <returns><see cref="Android.Database.Cursor"/></returns>
            public Android.Database.Cursor NewCursor(Android.Database.Sqlite.SQLiteDatabase arg0, Android.Database.Sqlite.SQLiteCursorDriver arg1, Java.Lang.String arg2, Android.Database.Sqlite.SQLiteQuery arg3)
            {
                return IExecute<Android.Database.Cursor>("newCursor", arg0, arg1, arg2, arg3);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OpenParams implementation
        public partial class OpenParams
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.html#getErrorHandler()"/>
            /// </summary>
            /// <returns><see cref="Android.Database.DatabaseErrorHandler"/></returns>
            public Android.Database.DatabaseErrorHandler GetErrorHandler()
            {
                return IExecuteWithSignature<Android.Database.DatabaseErrorHandler>("getErrorHandler", "()Landroid/database/DatabaseErrorHandler;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.html#getCursorFactory()"/>
            /// </summary>
            /// <returns><see cref="Android.Database.Sqlite.SQLiteDatabase.CursorFactory"/></returns>
            public Android.Database.Sqlite.SQLiteDatabase.CursorFactory GetCursorFactory()
            {
                return IExecuteWithSignature<Android.Database.Sqlite.SQLiteDatabase.CursorFactory>("getCursorFactory", "()Landroid/database/sqlite/SQLiteDatabase$CursorFactory;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.html#getLookasideSlotCount()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetLookasideSlotCount()
            {
                return IExecuteWithSignature<int>("getLookasideSlotCount", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.html#getLookasideSlotSize()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetLookasideSlotSize()
            {
                return IExecuteWithSignature<int>("getLookasideSlotSize", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.html#getOpenFlags()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetOpenFlags()
            {
                return IExecuteWithSignature<int>("getOpenFlags", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.html#getJournalMode()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetJournalMode()
            {
                return IExecuteWithSignature<Java.Lang.String>("getJournalMode", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.html#getSynchronousMode()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetSynchronousMode()
            {
                return IExecuteWithSignature<Java.Lang.String>("getSynchronousMode", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.html#getIdleConnectionTimeout()"/>
            /// </summary>
            /// <returns><see cref="long"/></returns>
            public long GetIdleConnectionTimeout()
            {
                return IExecuteWithSignature<long>("getIdleConnectionTimeout", "()J");
            }

            #endregion

            #region Nested classes
            #region Builder implementation
            public partial class Builder
            {
                #region Constructors
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.Builder.html#%3Cinit%3E(android.database.sqlite.SQLiteDatabase.OpenParams)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Database.Sqlite.SQLiteDatabase.OpenParams"/></param>
                public Builder(Android.Database.Sqlite.SQLiteDatabase.OpenParams arg0)
                    : base(arg0)
                {
                }

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields

                #endregion

                #region Static methods

                #endregion

                #region Instance methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.Builder.html#build()"/>
                /// </summary>
                /// <returns><see cref="Android.Database.Sqlite.SQLiteDatabase.OpenParams"/></returns>
                public Android.Database.Sqlite.SQLiteDatabase.OpenParams Build()
                {
                    return IExecuteWithSignature<Android.Database.Sqlite.SQLiteDatabase.OpenParams>("build", "()Landroid/database/sqlite/SQLiteDatabase$OpenParams;");
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.Builder.html#addOpenFlags(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <returns><see cref="Android.Database.Sqlite.SQLiteDatabase.OpenParams.Builder"/></returns>
                public Android.Database.Sqlite.SQLiteDatabase.OpenParams.Builder AddOpenFlags(int arg0)
                {
                    return IExecuteWithSignature<Android.Database.Sqlite.SQLiteDatabase.OpenParams.Builder>("addOpenFlags", "(I)Landroid/database/sqlite/SQLiteDatabase$OpenParams$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.Builder.html#removeOpenFlags(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <returns><see cref="Android.Database.Sqlite.SQLiteDatabase.OpenParams.Builder"/></returns>
                public Android.Database.Sqlite.SQLiteDatabase.OpenParams.Builder RemoveOpenFlags(int arg0)
                {
                    return IExecuteWithSignature<Android.Database.Sqlite.SQLiteDatabase.OpenParams.Builder>("removeOpenFlags", "(I)Landroid/database/sqlite/SQLiteDatabase$OpenParams$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.Builder.html#setCursorFactory(android.database.sqlite.SQLiteDatabase.CursorFactory)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Database.Sqlite.SQLiteDatabase.CursorFactory"/></param>
                /// <returns><see cref="Android.Database.Sqlite.SQLiteDatabase.OpenParams.Builder"/></returns>
                public Android.Database.Sqlite.SQLiteDatabase.OpenParams.Builder SetCursorFactory(Android.Database.Sqlite.SQLiteDatabase.CursorFactory arg0)
                {
                    return IExecuteWithSignature<Android.Database.Sqlite.SQLiteDatabase.OpenParams.Builder>("setCursorFactory", "(Landroid/database/sqlite/SQLiteDatabase$CursorFactory;)Landroid/database/sqlite/SQLiteDatabase$OpenParams$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.Builder.html#setErrorHandler(android.database.DatabaseErrorHandler)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Database.DatabaseErrorHandler"/></param>
                /// <returns><see cref="Android.Database.Sqlite.SQLiteDatabase.OpenParams.Builder"/></returns>
                public Android.Database.Sqlite.SQLiteDatabase.OpenParams.Builder SetErrorHandler(Android.Database.DatabaseErrorHandler arg0)
                {
                    return IExecuteWithSignature<Android.Database.Sqlite.SQLiteDatabase.OpenParams.Builder>("setErrorHandler", "(Landroid/database/DatabaseErrorHandler;)Landroid/database/sqlite/SQLiteDatabase$OpenParams$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.Builder.html#setIdleConnectionTimeout(long)"/>
                /// </summary>
                /// <param name="arg0"><see cref="long"/></param>
                /// <returns><see cref="Android.Database.Sqlite.SQLiteDatabase.OpenParams.Builder"/></returns>
                [global::System.Obsolete()]
                public Android.Database.Sqlite.SQLiteDatabase.OpenParams.Builder SetIdleConnectionTimeout(long arg0)
                {
                    return IExecuteWithSignature<Android.Database.Sqlite.SQLiteDatabase.OpenParams.Builder>("setIdleConnectionTimeout", "(J)Landroid/database/sqlite/SQLiteDatabase$OpenParams$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.Builder.html#setJournalMode(java.lang.String)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Java.Lang.String"/></param>
                /// <returns><see cref="Android.Database.Sqlite.SQLiteDatabase.OpenParams.Builder"/></returns>
                public Android.Database.Sqlite.SQLiteDatabase.OpenParams.Builder SetJournalMode(Java.Lang.String arg0)
                {
                    return IExecuteWithSignature<Android.Database.Sqlite.SQLiteDatabase.OpenParams.Builder>("setJournalMode", "(Ljava/lang/String;)Landroid/database/sqlite/SQLiteDatabase$OpenParams$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.Builder.html#setLookasideConfig(int,int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <param name="arg1"><see cref="int"/></param>
                /// <returns><see cref="Android.Database.Sqlite.SQLiteDatabase.OpenParams.Builder"/></returns>
                public Android.Database.Sqlite.SQLiteDatabase.OpenParams.Builder SetLookasideConfig(int arg0, int arg1)
                {
                    return IExecute<Android.Database.Sqlite.SQLiteDatabase.OpenParams.Builder>("setLookasideConfig", arg0, arg1);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.Builder.html#setOpenFlags(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <returns><see cref="Android.Database.Sqlite.SQLiteDatabase.OpenParams.Builder"/></returns>
                public Android.Database.Sqlite.SQLiteDatabase.OpenParams.Builder SetOpenFlags(int arg0)
                {
                    return IExecuteWithSignature<Android.Database.Sqlite.SQLiteDatabase.OpenParams.Builder>("setOpenFlags", "(I)Landroid/database/sqlite/SQLiteDatabase$OpenParams$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.Builder.html#setSynchronousMode(java.lang.String)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Java.Lang.String"/></param>
                /// <returns><see cref="Android.Database.Sqlite.SQLiteDatabase.OpenParams.Builder"/></returns>
                public Android.Database.Sqlite.SQLiteDatabase.OpenParams.Builder SetSynchronousMode(Java.Lang.String arg0)
                {
                    return IExecuteWithSignature<Android.Database.Sqlite.SQLiteDatabase.OpenParams.Builder>("setSynchronousMode", "(Ljava/lang/String;)Landroid/database/sqlite/SQLiteDatabase$OpenParams$Builder;", arg0);
                }

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

        
            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
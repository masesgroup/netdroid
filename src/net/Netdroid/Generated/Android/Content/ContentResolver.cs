/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Content
{
    #region ContentResolver
    public partial class ContentResolver
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#%3Cinit%3E(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        public ContentResolver(Android.Content.Context arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#NOTIFY_DELETE"/>
        /// </summary>
        public static int NOTIFY_DELETE { get { if (!_NOTIFY_DELETEReady) { _NOTIFY_DELETEContent = SGetField<int>(LocalBridgeClazz, "NOTIFY_DELETE"); _NOTIFY_DELETEReady = true; } return _NOTIFY_DELETEContent; } }
        private static int _NOTIFY_DELETEContent = default;
        private static bool _NOTIFY_DELETEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#NOTIFY_INSERT"/>
        /// </summary>
        public static int NOTIFY_INSERT { get { if (!_NOTIFY_INSERTReady) { _NOTIFY_INSERTContent = SGetField<int>(LocalBridgeClazz, "NOTIFY_INSERT"); _NOTIFY_INSERTReady = true; } return _NOTIFY_INSERTContent; } }
        private static int _NOTIFY_INSERTContent = default;
        private static bool _NOTIFY_INSERTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#NOTIFY_SKIP_NOTIFY_FOR_DESCENDANTS"/>
        /// </summary>
        public static int NOTIFY_SKIP_NOTIFY_FOR_DESCENDANTS { get { if (!_NOTIFY_SKIP_NOTIFY_FOR_DESCENDANTSReady) { _NOTIFY_SKIP_NOTIFY_FOR_DESCENDANTSContent = SGetField<int>(LocalBridgeClazz, "NOTIFY_SKIP_NOTIFY_FOR_DESCENDANTS"); _NOTIFY_SKIP_NOTIFY_FOR_DESCENDANTSReady = true; } return _NOTIFY_SKIP_NOTIFY_FOR_DESCENDANTSContent; } }
        private static int _NOTIFY_SKIP_NOTIFY_FOR_DESCENDANTSContent = default;
        private static bool _NOTIFY_SKIP_NOTIFY_FOR_DESCENDANTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#NOTIFY_SYNC_TO_NETWORK"/>
        /// </summary>
        public static int NOTIFY_SYNC_TO_NETWORK { get { if (!_NOTIFY_SYNC_TO_NETWORKReady) { _NOTIFY_SYNC_TO_NETWORKContent = SGetField<int>(LocalBridgeClazz, "NOTIFY_SYNC_TO_NETWORK"); _NOTIFY_SYNC_TO_NETWORKReady = true; } return _NOTIFY_SYNC_TO_NETWORKContent; } }
        private static int _NOTIFY_SYNC_TO_NETWORKContent = default;
        private static bool _NOTIFY_SYNC_TO_NETWORKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#NOTIFY_UPDATE"/>
        /// </summary>
        public static int NOTIFY_UPDATE { get { if (!_NOTIFY_UPDATEReady) { _NOTIFY_UPDATEContent = SGetField<int>(LocalBridgeClazz, "NOTIFY_UPDATE"); _NOTIFY_UPDATEReady = true; } return _NOTIFY_UPDATEContent; } }
        private static int _NOTIFY_UPDATEContent = default;
        private static bool _NOTIFY_UPDATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#QUERY_SORT_DIRECTION_ASCENDING"/>
        /// </summary>
        public static int QUERY_SORT_DIRECTION_ASCENDING { get { if (!_QUERY_SORT_DIRECTION_ASCENDINGReady) { _QUERY_SORT_DIRECTION_ASCENDINGContent = SGetField<int>(LocalBridgeClazz, "QUERY_SORT_DIRECTION_ASCENDING"); _QUERY_SORT_DIRECTION_ASCENDINGReady = true; } return _QUERY_SORT_DIRECTION_ASCENDINGContent; } }
        private static int _QUERY_SORT_DIRECTION_ASCENDINGContent = default;
        private static bool _QUERY_SORT_DIRECTION_ASCENDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#QUERY_SORT_DIRECTION_DESCENDING"/>
        /// </summary>
        public static int QUERY_SORT_DIRECTION_DESCENDING { get { if (!_QUERY_SORT_DIRECTION_DESCENDINGReady) { _QUERY_SORT_DIRECTION_DESCENDINGContent = SGetField<int>(LocalBridgeClazz, "QUERY_SORT_DIRECTION_DESCENDING"); _QUERY_SORT_DIRECTION_DESCENDINGReady = true; } return _QUERY_SORT_DIRECTION_DESCENDINGContent; } }
        private static int _QUERY_SORT_DIRECTION_DESCENDINGContent = default;
        private static bool _QUERY_SORT_DIRECTION_DESCENDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#SYNC_OBSERVER_TYPE_ACTIVE"/>
        /// </summary>
        public static int SYNC_OBSERVER_TYPE_ACTIVE { get { if (!_SYNC_OBSERVER_TYPE_ACTIVEReady) { _SYNC_OBSERVER_TYPE_ACTIVEContent = SGetField<int>(LocalBridgeClazz, "SYNC_OBSERVER_TYPE_ACTIVE"); _SYNC_OBSERVER_TYPE_ACTIVEReady = true; } return _SYNC_OBSERVER_TYPE_ACTIVEContent; } }
        private static int _SYNC_OBSERVER_TYPE_ACTIVEContent = default;
        private static bool _SYNC_OBSERVER_TYPE_ACTIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#SYNC_OBSERVER_TYPE_PENDING"/>
        /// </summary>
        public static int SYNC_OBSERVER_TYPE_PENDING { get { if (!_SYNC_OBSERVER_TYPE_PENDINGReady) { _SYNC_OBSERVER_TYPE_PENDINGContent = SGetField<int>(LocalBridgeClazz, "SYNC_OBSERVER_TYPE_PENDING"); _SYNC_OBSERVER_TYPE_PENDINGReady = true; } return _SYNC_OBSERVER_TYPE_PENDINGContent; } }
        private static int _SYNC_OBSERVER_TYPE_PENDINGContent = default;
        private static bool _SYNC_OBSERVER_TYPE_PENDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#SYNC_OBSERVER_TYPE_SETTINGS"/>
        /// </summary>
        public static int SYNC_OBSERVER_TYPE_SETTINGS { get { if (!_SYNC_OBSERVER_TYPE_SETTINGSReady) { _SYNC_OBSERVER_TYPE_SETTINGSContent = SGetField<int>(LocalBridgeClazz, "SYNC_OBSERVER_TYPE_SETTINGS"); _SYNC_OBSERVER_TYPE_SETTINGSReady = true; } return _SYNC_OBSERVER_TYPE_SETTINGSContent; } }
        private static int _SYNC_OBSERVER_TYPE_SETTINGSContent = default;
        private static bool _SYNC_OBSERVER_TYPE_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#ANY_CURSOR_ITEM_TYPE"/>
        /// </summary>
        public static Java.Lang.String ANY_CURSOR_ITEM_TYPE { get { if (!_ANY_CURSOR_ITEM_TYPEReady) { _ANY_CURSOR_ITEM_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ANY_CURSOR_ITEM_TYPE"); _ANY_CURSOR_ITEM_TYPEReady = true; } return _ANY_CURSOR_ITEM_TYPEContent; } }
        private static Java.Lang.String _ANY_CURSOR_ITEM_TYPEContent = default;
        private static bool _ANY_CURSOR_ITEM_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#CURSOR_DIR_BASE_TYPE"/>
        /// </summary>
        public static Java.Lang.String CURSOR_DIR_BASE_TYPE { get { if (!_CURSOR_DIR_BASE_TYPEReady) { _CURSOR_DIR_BASE_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CURSOR_DIR_BASE_TYPE"); _CURSOR_DIR_BASE_TYPEReady = true; } return _CURSOR_DIR_BASE_TYPEContent; } }
        private static Java.Lang.String _CURSOR_DIR_BASE_TYPEContent = default;
        private static bool _CURSOR_DIR_BASE_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#CURSOR_ITEM_BASE_TYPE"/>
        /// </summary>
        public static Java.Lang.String CURSOR_ITEM_BASE_TYPE { get { if (!_CURSOR_ITEM_BASE_TYPEReady) { _CURSOR_ITEM_BASE_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CURSOR_ITEM_BASE_TYPE"); _CURSOR_ITEM_BASE_TYPEReady = true; } return _CURSOR_ITEM_BASE_TYPEContent; } }
        private static Java.Lang.String _CURSOR_ITEM_BASE_TYPEContent = default;
        private static bool _CURSOR_ITEM_BASE_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#EXTRA_HONORED_ARGS"/>
        /// </summary>
        public static Java.Lang.String EXTRA_HONORED_ARGS { get { if (!_EXTRA_HONORED_ARGSReady) { _EXTRA_HONORED_ARGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_HONORED_ARGS"); _EXTRA_HONORED_ARGSReady = true; } return _EXTRA_HONORED_ARGSContent; } }
        private static Java.Lang.String _EXTRA_HONORED_ARGSContent = default;
        private static bool _EXTRA_HONORED_ARGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#EXTRA_REFRESH_SUPPORTED"/>
        /// </summary>
        public static Java.Lang.String EXTRA_REFRESH_SUPPORTED { get { if (!_EXTRA_REFRESH_SUPPORTEDReady) { _EXTRA_REFRESH_SUPPORTEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_REFRESH_SUPPORTED"); _EXTRA_REFRESH_SUPPORTEDReady = true; } return _EXTRA_REFRESH_SUPPORTEDContent; } }
        private static Java.Lang.String _EXTRA_REFRESH_SUPPORTEDContent = default;
        private static bool _EXTRA_REFRESH_SUPPORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#EXTRA_SIZE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_SIZE { get { if (!_EXTRA_SIZEReady) { _EXTRA_SIZEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_SIZE"); _EXTRA_SIZEReady = true; } return _EXTRA_SIZEContent; } }
        private static Java.Lang.String _EXTRA_SIZEContent = default;
        private static bool _EXTRA_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#EXTRA_TOTAL_COUNT"/>
        /// </summary>
        public static Java.Lang.String EXTRA_TOTAL_COUNT { get { if (!_EXTRA_TOTAL_COUNTReady) { _EXTRA_TOTAL_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_TOTAL_COUNT"); _EXTRA_TOTAL_COUNTReady = true; } return _EXTRA_TOTAL_COUNTContent; } }
        private static Java.Lang.String _EXTRA_TOTAL_COUNTContent = default;
        private static bool _EXTRA_TOTAL_COUNTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#QUERY_ARG_GROUP_COLUMNS"/>
        /// </summary>
        public static Java.Lang.String QUERY_ARG_GROUP_COLUMNS { get { if (!_QUERY_ARG_GROUP_COLUMNSReady) { _QUERY_ARG_GROUP_COLUMNSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "QUERY_ARG_GROUP_COLUMNS"); _QUERY_ARG_GROUP_COLUMNSReady = true; } return _QUERY_ARG_GROUP_COLUMNSContent; } }
        private static Java.Lang.String _QUERY_ARG_GROUP_COLUMNSContent = default;
        private static bool _QUERY_ARG_GROUP_COLUMNSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#QUERY_ARG_LIMIT"/>
        /// </summary>
        public static Java.Lang.String QUERY_ARG_LIMIT { get { if (!_QUERY_ARG_LIMITReady) { _QUERY_ARG_LIMITContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "QUERY_ARG_LIMIT"); _QUERY_ARG_LIMITReady = true; } return _QUERY_ARG_LIMITContent; } }
        private static Java.Lang.String _QUERY_ARG_LIMITContent = default;
        private static bool _QUERY_ARG_LIMITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#QUERY_ARG_OFFSET"/>
        /// </summary>
        public static Java.Lang.String QUERY_ARG_OFFSET { get { if (!_QUERY_ARG_OFFSETReady) { _QUERY_ARG_OFFSETContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "QUERY_ARG_OFFSET"); _QUERY_ARG_OFFSETReady = true; } return _QUERY_ARG_OFFSETContent; } }
        private static Java.Lang.String _QUERY_ARG_OFFSETContent = default;
        private static bool _QUERY_ARG_OFFSETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#QUERY_ARG_SORT_COLLATION"/>
        /// </summary>
        public static Java.Lang.String QUERY_ARG_SORT_COLLATION { get { if (!_QUERY_ARG_SORT_COLLATIONReady) { _QUERY_ARG_SORT_COLLATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "QUERY_ARG_SORT_COLLATION"); _QUERY_ARG_SORT_COLLATIONReady = true; } return _QUERY_ARG_SORT_COLLATIONContent; } }
        private static Java.Lang.String _QUERY_ARG_SORT_COLLATIONContent = default;
        private static bool _QUERY_ARG_SORT_COLLATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#QUERY_ARG_SORT_COLUMNS"/>
        /// </summary>
        public static Java.Lang.String QUERY_ARG_SORT_COLUMNS { get { if (!_QUERY_ARG_SORT_COLUMNSReady) { _QUERY_ARG_SORT_COLUMNSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "QUERY_ARG_SORT_COLUMNS"); _QUERY_ARG_SORT_COLUMNSReady = true; } return _QUERY_ARG_SORT_COLUMNSContent; } }
        private static Java.Lang.String _QUERY_ARG_SORT_COLUMNSContent = default;
        private static bool _QUERY_ARG_SORT_COLUMNSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#QUERY_ARG_SORT_DIRECTION"/>
        /// </summary>
        public static Java.Lang.String QUERY_ARG_SORT_DIRECTION { get { if (!_QUERY_ARG_SORT_DIRECTIONReady) { _QUERY_ARG_SORT_DIRECTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "QUERY_ARG_SORT_DIRECTION"); _QUERY_ARG_SORT_DIRECTIONReady = true; } return _QUERY_ARG_SORT_DIRECTIONContent; } }
        private static Java.Lang.String _QUERY_ARG_SORT_DIRECTIONContent = default;
        private static bool _QUERY_ARG_SORT_DIRECTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#QUERY_ARG_SORT_LOCALE"/>
        /// </summary>
        public static Java.Lang.String QUERY_ARG_SORT_LOCALE { get { if (!_QUERY_ARG_SORT_LOCALEReady) { _QUERY_ARG_SORT_LOCALEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "QUERY_ARG_SORT_LOCALE"); _QUERY_ARG_SORT_LOCALEReady = true; } return _QUERY_ARG_SORT_LOCALEContent; } }
        private static Java.Lang.String _QUERY_ARG_SORT_LOCALEContent = default;
        private static bool _QUERY_ARG_SORT_LOCALEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#QUERY_ARG_SQL_GROUP_BY"/>
        /// </summary>
        public static Java.Lang.String QUERY_ARG_SQL_GROUP_BY { get { if (!_QUERY_ARG_SQL_GROUP_BYReady) { _QUERY_ARG_SQL_GROUP_BYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "QUERY_ARG_SQL_GROUP_BY"); _QUERY_ARG_SQL_GROUP_BYReady = true; } return _QUERY_ARG_SQL_GROUP_BYContent; } }
        private static Java.Lang.String _QUERY_ARG_SQL_GROUP_BYContent = default;
        private static bool _QUERY_ARG_SQL_GROUP_BYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#QUERY_ARG_SQL_HAVING"/>
        /// </summary>
        public static Java.Lang.String QUERY_ARG_SQL_HAVING { get { if (!_QUERY_ARG_SQL_HAVINGReady) { _QUERY_ARG_SQL_HAVINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "QUERY_ARG_SQL_HAVING"); _QUERY_ARG_SQL_HAVINGReady = true; } return _QUERY_ARG_SQL_HAVINGContent; } }
        private static Java.Lang.String _QUERY_ARG_SQL_HAVINGContent = default;
        private static bool _QUERY_ARG_SQL_HAVINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#QUERY_ARG_SQL_LIMIT"/>
        /// </summary>
        public static Java.Lang.String QUERY_ARG_SQL_LIMIT { get { if (!_QUERY_ARG_SQL_LIMITReady) { _QUERY_ARG_SQL_LIMITContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "QUERY_ARG_SQL_LIMIT"); _QUERY_ARG_SQL_LIMITReady = true; } return _QUERY_ARG_SQL_LIMITContent; } }
        private static Java.Lang.String _QUERY_ARG_SQL_LIMITContent = default;
        private static bool _QUERY_ARG_SQL_LIMITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#QUERY_ARG_SQL_SELECTION"/>
        /// </summary>
        public static Java.Lang.String QUERY_ARG_SQL_SELECTION { get { if (!_QUERY_ARG_SQL_SELECTIONReady) { _QUERY_ARG_SQL_SELECTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "QUERY_ARG_SQL_SELECTION"); _QUERY_ARG_SQL_SELECTIONReady = true; } return _QUERY_ARG_SQL_SELECTIONContent; } }
        private static Java.Lang.String _QUERY_ARG_SQL_SELECTIONContent = default;
        private static bool _QUERY_ARG_SQL_SELECTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#QUERY_ARG_SQL_SELECTION_ARGS"/>
        /// </summary>
        public static Java.Lang.String QUERY_ARG_SQL_SELECTION_ARGS { get { if (!_QUERY_ARG_SQL_SELECTION_ARGSReady) { _QUERY_ARG_SQL_SELECTION_ARGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "QUERY_ARG_SQL_SELECTION_ARGS"); _QUERY_ARG_SQL_SELECTION_ARGSReady = true; } return _QUERY_ARG_SQL_SELECTION_ARGSContent; } }
        private static Java.Lang.String _QUERY_ARG_SQL_SELECTION_ARGSContent = default;
        private static bool _QUERY_ARG_SQL_SELECTION_ARGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#QUERY_ARG_SQL_SORT_ORDER"/>
        /// </summary>
        public static Java.Lang.String QUERY_ARG_SQL_SORT_ORDER { get { if (!_QUERY_ARG_SQL_SORT_ORDERReady) { _QUERY_ARG_SQL_SORT_ORDERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "QUERY_ARG_SQL_SORT_ORDER"); _QUERY_ARG_SQL_SORT_ORDERReady = true; } return _QUERY_ARG_SQL_SORT_ORDERContent; } }
        private static Java.Lang.String _QUERY_ARG_SQL_SORT_ORDERContent = default;
        private static bool _QUERY_ARG_SQL_SORT_ORDERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#SCHEME_ANDROID_RESOURCE"/>
        /// </summary>
        public static Java.Lang.String SCHEME_ANDROID_RESOURCE { get { if (!_SCHEME_ANDROID_RESOURCEReady) { _SCHEME_ANDROID_RESOURCEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SCHEME_ANDROID_RESOURCE"); _SCHEME_ANDROID_RESOURCEReady = true; } return _SCHEME_ANDROID_RESOURCEContent; } }
        private static Java.Lang.String _SCHEME_ANDROID_RESOURCEContent = default;
        private static bool _SCHEME_ANDROID_RESOURCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#SCHEME_CONTENT"/>
        /// </summary>
        public static Java.Lang.String SCHEME_CONTENT { get { if (!_SCHEME_CONTENTReady) { _SCHEME_CONTENTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SCHEME_CONTENT"); _SCHEME_CONTENTReady = true; } return _SCHEME_CONTENTContent; } }
        private static Java.Lang.String _SCHEME_CONTENTContent = default;
        private static bool _SCHEME_CONTENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#SCHEME_FILE"/>
        /// </summary>
        public static Java.Lang.String SCHEME_FILE { get { if (!_SCHEME_FILEReady) { _SCHEME_FILEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SCHEME_FILE"); _SCHEME_FILEReady = true; } return _SCHEME_FILEContent; } }
        private static Java.Lang.String _SCHEME_FILEContent = default;
        private static bool _SCHEME_FILEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#SYNC_EXTRAS_ACCOUNT"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String SYNC_EXTRAS_ACCOUNT { get { if (!_SYNC_EXTRAS_ACCOUNTReady) { _SYNC_EXTRAS_ACCOUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SYNC_EXTRAS_ACCOUNT"); _SYNC_EXTRAS_ACCOUNTReady = true; } return _SYNC_EXTRAS_ACCOUNTContent; } }
        private static Java.Lang.String _SYNC_EXTRAS_ACCOUNTContent = default;
        private static bool _SYNC_EXTRAS_ACCOUNTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#SYNC_EXTRAS_DISCARD_LOCAL_DELETIONS"/>
        /// </summary>
        public static Java.Lang.String SYNC_EXTRAS_DISCARD_LOCAL_DELETIONS { get { if (!_SYNC_EXTRAS_DISCARD_LOCAL_DELETIONSReady) { _SYNC_EXTRAS_DISCARD_LOCAL_DELETIONSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SYNC_EXTRAS_DISCARD_LOCAL_DELETIONS"); _SYNC_EXTRAS_DISCARD_LOCAL_DELETIONSReady = true; } return _SYNC_EXTRAS_DISCARD_LOCAL_DELETIONSContent; } }
        private static Java.Lang.String _SYNC_EXTRAS_DISCARD_LOCAL_DELETIONSContent = default;
        private static bool _SYNC_EXTRAS_DISCARD_LOCAL_DELETIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#SYNC_EXTRAS_DO_NOT_RETRY"/>
        /// </summary>
        public static Java.Lang.String SYNC_EXTRAS_DO_NOT_RETRY { get { if (!_SYNC_EXTRAS_DO_NOT_RETRYReady) { _SYNC_EXTRAS_DO_NOT_RETRYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SYNC_EXTRAS_DO_NOT_RETRY"); _SYNC_EXTRAS_DO_NOT_RETRYReady = true; } return _SYNC_EXTRAS_DO_NOT_RETRYContent; } }
        private static Java.Lang.String _SYNC_EXTRAS_DO_NOT_RETRYContent = default;
        private static bool _SYNC_EXTRAS_DO_NOT_RETRYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#SYNC_EXTRAS_EXPEDITED"/>
        /// </summary>
        public static Java.Lang.String SYNC_EXTRAS_EXPEDITED { get { if (!_SYNC_EXTRAS_EXPEDITEDReady) { _SYNC_EXTRAS_EXPEDITEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SYNC_EXTRAS_EXPEDITED"); _SYNC_EXTRAS_EXPEDITEDReady = true; } return _SYNC_EXTRAS_EXPEDITEDContent; } }
        private static Java.Lang.String _SYNC_EXTRAS_EXPEDITEDContent = default;
        private static bool _SYNC_EXTRAS_EXPEDITEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#SYNC_EXTRAS_FORCE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String SYNC_EXTRAS_FORCE { get { if (!_SYNC_EXTRAS_FORCEReady) { _SYNC_EXTRAS_FORCEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SYNC_EXTRAS_FORCE"); _SYNC_EXTRAS_FORCEReady = true; } return _SYNC_EXTRAS_FORCEContent; } }
        private static Java.Lang.String _SYNC_EXTRAS_FORCEContent = default;
        private static bool _SYNC_EXTRAS_FORCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#SYNC_EXTRAS_IGNORE_BACKOFF"/>
        /// </summary>
        public static Java.Lang.String SYNC_EXTRAS_IGNORE_BACKOFF { get { if (!_SYNC_EXTRAS_IGNORE_BACKOFFReady) { _SYNC_EXTRAS_IGNORE_BACKOFFContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SYNC_EXTRAS_IGNORE_BACKOFF"); _SYNC_EXTRAS_IGNORE_BACKOFFReady = true; } return _SYNC_EXTRAS_IGNORE_BACKOFFContent; } }
        private static Java.Lang.String _SYNC_EXTRAS_IGNORE_BACKOFFContent = default;
        private static bool _SYNC_EXTRAS_IGNORE_BACKOFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#SYNC_EXTRAS_IGNORE_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String SYNC_EXTRAS_IGNORE_SETTINGS { get { if (!_SYNC_EXTRAS_IGNORE_SETTINGSReady) { _SYNC_EXTRAS_IGNORE_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SYNC_EXTRAS_IGNORE_SETTINGS"); _SYNC_EXTRAS_IGNORE_SETTINGSReady = true; } return _SYNC_EXTRAS_IGNORE_SETTINGSContent; } }
        private static Java.Lang.String _SYNC_EXTRAS_IGNORE_SETTINGSContent = default;
        private static bool _SYNC_EXTRAS_IGNORE_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#SYNC_EXTRAS_INITIALIZE"/>
        /// </summary>
        public static Java.Lang.String SYNC_EXTRAS_INITIALIZE { get { if (!_SYNC_EXTRAS_INITIALIZEReady) { _SYNC_EXTRAS_INITIALIZEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SYNC_EXTRAS_INITIALIZE"); _SYNC_EXTRAS_INITIALIZEReady = true; } return _SYNC_EXTRAS_INITIALIZEContent; } }
        private static Java.Lang.String _SYNC_EXTRAS_INITIALIZEContent = default;
        private static bool _SYNC_EXTRAS_INITIALIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#SYNC_EXTRAS_MANUAL"/>
        /// </summary>
        public static Java.Lang.String SYNC_EXTRAS_MANUAL { get { if (!_SYNC_EXTRAS_MANUALReady) { _SYNC_EXTRAS_MANUALContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SYNC_EXTRAS_MANUAL"); _SYNC_EXTRAS_MANUALReady = true; } return _SYNC_EXTRAS_MANUALContent; } }
        private static Java.Lang.String _SYNC_EXTRAS_MANUALContent = default;
        private static bool _SYNC_EXTRAS_MANUALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONS"/>
        /// </summary>
        public static Java.Lang.String SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONS { get { if (!_SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONSReady) { _SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONS"); _SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONSReady = true; } return _SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONSContent; } }
        private static Java.Lang.String _SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONSContent = default;
        private static bool _SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#SYNC_EXTRAS_REQUIRE_CHARGING"/>
        /// </summary>
        public static Java.Lang.String SYNC_EXTRAS_REQUIRE_CHARGING { get { if (!_SYNC_EXTRAS_REQUIRE_CHARGINGReady) { _SYNC_EXTRAS_REQUIRE_CHARGINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SYNC_EXTRAS_REQUIRE_CHARGING"); _SYNC_EXTRAS_REQUIRE_CHARGINGReady = true; } return _SYNC_EXTRAS_REQUIRE_CHARGINGContent; } }
        private static Java.Lang.String _SYNC_EXTRAS_REQUIRE_CHARGINGContent = default;
        private static bool _SYNC_EXTRAS_REQUIRE_CHARGINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#SYNC_EXTRAS_SCHEDULE_AS_EXPEDITED_JOB"/>
        /// </summary>
        public static Java.Lang.String SYNC_EXTRAS_SCHEDULE_AS_EXPEDITED_JOB { get { if (!_SYNC_EXTRAS_SCHEDULE_AS_EXPEDITED_JOBReady) { _SYNC_EXTRAS_SCHEDULE_AS_EXPEDITED_JOBContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SYNC_EXTRAS_SCHEDULE_AS_EXPEDITED_JOB"); _SYNC_EXTRAS_SCHEDULE_AS_EXPEDITED_JOBReady = true; } return _SYNC_EXTRAS_SCHEDULE_AS_EXPEDITED_JOBContent; } }
        private static Java.Lang.String _SYNC_EXTRAS_SCHEDULE_AS_EXPEDITED_JOBContent = default;
        private static bool _SYNC_EXTRAS_SCHEDULE_AS_EXPEDITED_JOBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#SYNC_EXTRAS_UPLOAD"/>
        /// </summary>
        public static Java.Lang.String SYNC_EXTRAS_UPLOAD { get { if (!_SYNC_EXTRAS_UPLOADReady) { _SYNC_EXTRAS_UPLOADContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SYNC_EXTRAS_UPLOAD"); _SYNC_EXTRAS_UPLOADReady = true; } return _SYNC_EXTRAS_UPLOADContent; } }
        private static Java.Lang.String _SYNC_EXTRAS_UPLOADContent = default;
        private static bool _SYNC_EXTRAS_UPLOADReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#wrap(android.content.ContentProvider)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ContentProvider"/></param>
        /// <returns><see cref="Android.Content.ContentResolver"/></returns>
        public static Android.Content.ContentResolver Wrap(Android.Content.ContentProvider arg0)
        {
            return SExecuteWithSignature<Android.Content.ContentResolver>(LocalBridgeClazz, "wrap", "(Landroid/content/ContentProvider;)Landroid/content/ContentResolver;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#wrap(android.content.ContentProviderClient)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ContentProviderClient"/></param>
        /// <returns><see cref="Android.Content.ContentResolver"/></returns>
        public static Android.Content.ContentResolver Wrap(Android.Content.ContentProviderClient arg0)
        {
            return SExecuteWithSignature<Android.Content.ContentResolver>(LocalBridgeClazz, "wrap", "(Landroid/content/ContentProviderClient;)Landroid/content/ContentResolver;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#getSyncAdapterTypes()"/>
        /// </summary>
        /// <returns><see cref="Android.Content.SyncAdapterType"/></returns>
        public static Android.Content.SyncAdapterType[] GetSyncAdapterTypes()
        {
            return SExecuteWithSignatureArray<Android.Content.SyncAdapterType>(LocalBridgeClazz, "getSyncAdapterTypes", "()[Landroid/content/SyncAdapterType;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#getCurrentSync()"/>
        /// </summary>
        /// <returns><see cref="Android.Content.SyncInfo"/></returns>
        [global::System.Obsolete()]
        public static Android.Content.SyncInfo GetCurrentSync()
        {
            return SExecuteWithSignature<Android.Content.SyncInfo>(LocalBridgeClazz, "getCurrentSync", "()Landroid/content/SyncInfo;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#getMasterSyncAutomatically()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public static bool GetMasterSyncAutomatically()
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "getMasterSyncAutomatically", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#getSyncAutomatically(android.accounts.Account,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Accounts.Account"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool GetSyncAutomatically(Android.Accounts.Account arg0, Java.Lang.String arg1)
        {
            return SExecute<bool>(LocalBridgeClazz, "getSyncAutomatically", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#isSyncActive(android.accounts.Account,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Accounts.Account"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsSyncActive(Android.Accounts.Account arg0, Java.Lang.String arg1)
        {
            return SExecute<bool>(LocalBridgeClazz, "isSyncActive", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#isSyncPending(android.accounts.Account,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Accounts.Account"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsSyncPending(Android.Accounts.Account arg0, Java.Lang.String arg1)
        {
            return SExecute<bool>(LocalBridgeClazz, "isSyncPending", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#getIsSyncable(android.accounts.Account,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Accounts.Account"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GetIsSyncable(Android.Accounts.Account arg0, Java.Lang.String arg1)
        {
            return SExecute<int>(LocalBridgeClazz, "getIsSyncable", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#addStatusChangeListener(int,android.content.SyncStatusObserver)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Content.SyncStatusObserver"/></param>
        /// <returns><see cref="object"/></returns>
        public static object AddStatusChangeListener(int arg0, Android.Content.SyncStatusObserver arg1)
        {
            return SExecute(LocalBridgeClazz, "addStatusChangeListener", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#getPeriodicSyncs(android.accounts.Account,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Accounts.Account"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public static Java.Util.List<Android.Content.PeriodicSync> GetPeriodicSyncs(Android.Accounts.Account arg0, Java.Lang.String arg1)
        {
            return SExecute<Java.Util.List<Android.Content.PeriodicSync>>(LocalBridgeClazz, "getPeriodicSyncs", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#getCurrentSyncs()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public static Java.Util.List<Android.Content.SyncInfo> GetCurrentSyncs()
        {
            return SExecuteWithSignature<Java.Util.List<Android.Content.SyncInfo>>(LocalBridgeClazz, "getCurrentSyncs", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Accounts.Account"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Android.Os.Bundle"/></param>
        /// <param name="arg3"><see cref="long"/></param>
        public static void AddPeriodicSync(Android.Accounts.Account arg0, Java.Lang.String arg1, Android.Os.Bundle arg2, long arg3)
        {
            SExecute(LocalBridgeClazz, "addPeriodicSync", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#cancelSync(android.accounts.Account,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Accounts.Account"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        public static void CancelSync(Android.Accounts.Account arg0, Java.Lang.String arg1)
        {
            SExecute(LocalBridgeClazz, "cancelSync", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#cancelSync(android.content.SyncRequest)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.SyncRequest"/></param>
        public static void CancelSync(Android.Content.SyncRequest arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "cancelSync", "(Landroid/content/SyncRequest;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Accounts.Account"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Android.Os.Bundle"/></param>
        public static void RemovePeriodicSync(Android.Accounts.Account arg0, Java.Lang.String arg1, Android.Os.Bundle arg2)
        {
            SExecute(LocalBridgeClazz, "removePeriodicSync", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#removeStatusChangeListener(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        public static void RemoveStatusChangeListener(object arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "removeStatusChangeListener", "(Ljava/lang/Object;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#requestSync(android.accounts.Account,java.lang.String,android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Accounts.Account"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Android.Os.Bundle"/></param>
        public static void RequestSync(Android.Accounts.Account arg0, Java.Lang.String arg1, Android.Os.Bundle arg2)
        {
            SExecute(LocalBridgeClazz, "requestSync", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#requestSync(android.content.SyncRequest)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.SyncRequest"/></param>
        public static void RequestSync(Android.Content.SyncRequest arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "requestSync", "(Landroid/content/SyncRequest;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#setIsSyncable(android.accounts.Account,java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Accounts.Account"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void SetIsSyncable(Android.Accounts.Account arg0, Java.Lang.String arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "setIsSyncable", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#setMasterSyncAutomatically(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public static void SetMasterSyncAutomatically(bool arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "setMasterSyncAutomatically", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Accounts.Account"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        public static void SetSyncAutomatically(Android.Accounts.Account arg0, Java.Lang.String arg1, bool arg2)
        {
            SExecute(LocalBridgeClazz, "setSyncAutomatically", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#validateSyncExtrasBundle(android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Bundle"/></param>
        public static void ValidateSyncExtrasBundle(Android.Os.Bundle arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "validateSyncExtrasBundle", "(Landroid/os/Bundle;)V", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#applyBatch(java.lang.String,java.util.ArrayList)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Util.ArrayList"/></param>
        /// <returns><see cref="Android.Content.ContentProviderResult"/></returns>
        /// <exception cref="Android.Content.OperationApplicationException"/>
        /// <exception cref="Android.Os.RemoteException"/>
        public Android.Content.ContentProviderResult[] ApplyBatch(Java.Lang.String arg0, Java.Util.ArrayList<Android.Content.ContentProviderOperation> arg1)
        {
            return IExecuteArray<Android.Content.ContentProviderResult>("applyBatch", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#loadThumbnail(android.net.Uri,android.util.Size,android.os.CancellationSignal)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg1"><see cref="Android.Util.Size"/></param>
        /// <param name="arg2"><see cref="Android.Os.CancellationSignal"/></param>
        /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public Android.Graphics.Bitmap LoadThumbnail(Android.Net.Uri arg0, Android.Util.Size arg1, Android.Os.CancellationSignal arg2)
        {
            return IExecute<Android.Graphics.Bitmap>("loadThumbnail", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#acquireContentProviderClient(android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <returns><see cref="Android.Content.ContentProviderClient"/></returns>
        public Android.Content.ContentProviderClient AcquireContentProviderClient(Android.Net.Uri arg0)
        {
            return IExecuteWithSignature<Android.Content.ContentProviderClient>("acquireContentProviderClient", "(Landroid/net/Uri;)Landroid/content/ContentProviderClient;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#acquireContentProviderClient(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Content.ContentProviderClient"/></returns>
        public Android.Content.ContentProviderClient AcquireContentProviderClient(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Android.Content.ContentProviderClient>("acquireContentProviderClient", "(Ljava/lang/String;)Landroid/content/ContentProviderClient;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#acquireUnstableContentProviderClient(android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <returns><see cref="Android.Content.ContentProviderClient"/></returns>
        public Android.Content.ContentProviderClient AcquireUnstableContentProviderClient(Android.Net.Uri arg0)
        {
            return IExecuteWithSignature<Android.Content.ContentProviderClient>("acquireUnstableContentProviderClient", "(Landroid/net/Uri;)Landroid/content/ContentProviderClient;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#acquireUnstableContentProviderClient(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Content.ContentProviderClient"/></returns>
        public Android.Content.ContentProviderClient AcquireUnstableContentProviderClient(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Android.Content.ContentProviderClient>("acquireUnstableContentProviderClient", "(Ljava/lang/String;)Landroid/content/ContentProviderClient;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#getTypeInfo(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Content.ContentResolver.MimeTypeInfo"/></returns>
        public Android.Content.ContentResolver.MimeTypeInfo GetTypeInfo(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Android.Content.ContentResolver.MimeTypeInfo>("getTypeInfo", "(Ljava/lang/String;)Landroid/content/ContentResolver$MimeTypeInfo;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#openAssetFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Android.Os.CancellationSignal"/></param>
        /// <returns><see cref="Android.Content.Res.AssetFileDescriptor"/></returns>
        /// <exception cref="Java.Io.FileNotFoundException"/>
        public Android.Content.Res.AssetFileDescriptor OpenAssetFile(Android.Net.Uri arg0, Java.Lang.String arg1, Android.Os.CancellationSignal arg2)
        {
            return IExecute<Android.Content.Res.AssetFileDescriptor>("openAssetFile", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#openAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.CancellationSignal)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Android.Os.CancellationSignal"/></param>
        /// <returns><see cref="Android.Content.Res.AssetFileDescriptor"/></returns>
        /// <exception cref="Java.Io.FileNotFoundException"/>
        public Android.Content.Res.AssetFileDescriptor OpenAssetFileDescriptor(Android.Net.Uri arg0, Java.Lang.String arg1, Android.Os.CancellationSignal arg2)
        {
            return IExecute<Android.Content.Res.AssetFileDescriptor>("openAssetFileDescriptor", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#openAssetFileDescriptor(android.net.Uri,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Content.Res.AssetFileDescriptor"/></returns>
        /// <exception cref="Java.Io.FileNotFoundException"/>
        public Android.Content.Res.AssetFileDescriptor OpenAssetFileDescriptor(Android.Net.Uri arg0, Java.Lang.String arg1)
        {
            return IExecute<Android.Content.Res.AssetFileDescriptor>("openAssetFileDescriptor", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Android.Os.Bundle"/></param>
        /// <param name="arg3"><see cref="Android.Os.CancellationSignal"/></param>
        /// <returns><see cref="Android.Content.Res.AssetFileDescriptor"/></returns>
        /// <exception cref="Java.Io.FileNotFoundException"/>
        public Android.Content.Res.AssetFileDescriptor OpenTypedAssetFile(Android.Net.Uri arg0, Java.Lang.String arg1, Android.Os.Bundle arg2, Android.Os.CancellationSignal arg3)
        {
            return IExecute<Android.Content.Res.AssetFileDescriptor>("openTypedAssetFile", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Android.Os.Bundle"/></param>
        /// <param name="arg3"><see cref="Android.Os.CancellationSignal"/></param>
        /// <returns><see cref="Android.Content.Res.AssetFileDescriptor"/></returns>
        /// <exception cref="Java.Io.FileNotFoundException"/>
        public Android.Content.Res.AssetFileDescriptor OpenTypedAssetFileDescriptor(Android.Net.Uri arg0, Java.Lang.String arg1, Android.Os.Bundle arg2, Android.Os.CancellationSignal arg3)
        {
            return IExecute<Android.Content.Res.AssetFileDescriptor>("openTypedAssetFileDescriptor", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Android.Os.Bundle"/></param>
        /// <returns><see cref="Android.Content.Res.AssetFileDescriptor"/></returns>
        /// <exception cref="Java.Io.FileNotFoundException"/>
        public Android.Content.Res.AssetFileDescriptor OpenTypedAssetFileDescriptor(Android.Net.Uri arg0, Java.Lang.String arg1, Android.Os.Bundle arg2)
        {
            return IExecute<Android.Content.Res.AssetFileDescriptor>("openTypedAssetFileDescriptor", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#query(android.net.Uri,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Android.Os.Bundle"/></param>
        /// <param name="arg3"><see cref="Android.Os.CancellationSignal"/></param>
        /// <returns><see cref="Android.Database.Cursor"/></returns>
        public Android.Database.Cursor Query(Android.Net.Uri arg0, Java.Lang.String[] arg1, Android.Os.Bundle arg2, Android.Os.CancellationSignal arg3)
        {
            return IExecute<Android.Database.Cursor>("query", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <param name="arg4"><see cref="Java.Lang.String"/></param>
        /// <param name="arg5"><see cref="Android.Os.CancellationSignal"/></param>
        /// <returns><see cref="Android.Database.Cursor"/></returns>
        public Android.Database.Cursor Query(Android.Net.Uri arg0, Java.Lang.String[] arg1, Java.Lang.String arg2, Java.Lang.String[] arg3, Java.Lang.String arg4, Android.Os.CancellationSignal arg5)
        {
            return IExecute<Android.Database.Cursor>("query", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <param name="arg4"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Database.Cursor"/></returns>
        public Android.Database.Cursor Query(Android.Net.Uri arg0, Java.Lang.String[] arg1, Java.Lang.String arg2, Java.Lang.String[] arg3, Java.Lang.String arg4)
        {
            return IExecute<Android.Database.Cursor>("query", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#canonicalize(android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <returns><see cref="Android.Net.Uri"/></returns>
        public Android.Net.Uri Canonicalize(Android.Net.Uri arg0)
        {
            return IExecuteWithSignature<Android.Net.Uri>("canonicalize", "(Landroid/net/Uri;)Landroid/net/Uri;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#insert(android.net.Uri,android.content.ContentValues,android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg1"><see cref="Android.Content.ContentValues"/></param>
        /// <param name="arg2"><see cref="Android.Os.Bundle"/></param>
        /// <returns><see cref="Android.Net.Uri"/></returns>
        public Android.Net.Uri Insert(Android.Net.Uri arg0, Android.Content.ContentValues arg1, Android.Os.Bundle arg2)
        {
            return IExecute<Android.Net.Uri>("insert", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#insert(android.net.Uri,android.content.ContentValues)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg1"><see cref="Android.Content.ContentValues"/></param>
        /// <returns><see cref="Android.Net.Uri"/></returns>
        public Android.Net.Uri Insert(Android.Net.Uri arg0, Android.Content.ContentValues arg1)
        {
            return IExecute<Android.Net.Uri>("insert", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#uncanonicalize(android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <returns><see cref="Android.Net.Uri"/></returns>
        public Android.Net.Uri Uncanonicalize(Android.Net.Uri arg0)
        {
            return IExecuteWithSignature<Android.Net.Uri>("uncanonicalize", "(Landroid/net/Uri;)Landroid/net/Uri;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#call(android.net.Uri,java.lang.String,java.lang.String,android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Android.Os.Bundle"/></param>
        /// <returns><see cref="Android.Os.Bundle"/></returns>
        public Android.Os.Bundle Call(Android.Net.Uri arg0, Java.Lang.String arg1, Java.Lang.String arg2, Android.Os.Bundle arg3)
        {
            return IExecute<Android.Os.Bundle>("call", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#call(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Android.Os.Bundle"/></param>
        /// <returns><see cref="Android.Os.Bundle"/></returns>
        public Android.Os.Bundle Call(Java.Lang.String arg0, Java.Lang.String arg1, Java.Lang.String arg2, Android.Os.Bundle arg3)
        {
            return IExecute<Android.Os.Bundle>("call", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#openFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Android.Os.CancellationSignal"/></param>
        /// <returns><see cref="Android.Os.ParcelFileDescriptor"/></returns>
        /// <exception cref="Java.Io.FileNotFoundException"/>
        public Android.Os.ParcelFileDescriptor OpenFile(Android.Net.Uri arg0, Java.Lang.String arg1, Android.Os.CancellationSignal arg2)
        {
            return IExecute<Android.Os.ParcelFileDescriptor>("openFile", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#openFileDescriptor(android.net.Uri,java.lang.String,android.os.CancellationSignal)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Android.Os.CancellationSignal"/></param>
        /// <returns><see cref="Android.Os.ParcelFileDescriptor"/></returns>
        /// <exception cref="Java.Io.FileNotFoundException"/>
        public Android.Os.ParcelFileDescriptor OpenFileDescriptor(Android.Net.Uri arg0, Java.Lang.String arg1, Android.Os.CancellationSignal arg2)
        {
            return IExecute<Android.Os.ParcelFileDescriptor>("openFileDescriptor", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#openFileDescriptor(android.net.Uri,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Os.ParcelFileDescriptor"/></returns>
        /// <exception cref="Java.Io.FileNotFoundException"/>
        public Android.Os.ParcelFileDescriptor OpenFileDescriptor(Android.Net.Uri arg0, Java.Lang.String arg1)
        {
            return IExecute<Android.Os.ParcelFileDescriptor>("openFileDescriptor", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#refresh(android.net.Uri,android.os.Bundle,android.os.CancellationSignal)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg1"><see cref="Android.Os.Bundle"/></param>
        /// <param name="arg2"><see cref="Android.Os.CancellationSignal"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Refresh(Android.Net.Uri arg0, Android.Os.Bundle arg1, Android.Os.CancellationSignal arg2)
        {
            return IExecute<bool>("refresh", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#bulkInsert(android.net.Uri,android.content.ContentValues[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg1"><see cref="Android.Content.ContentValues"/></param>
        /// <returns><see cref="int"/></returns>
        public int BulkInsert(Android.Net.Uri arg0, Android.Content.ContentValues[] arg1)
        {
            return IExecute<int>("bulkInsert", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#delete(android.net.Uri,android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg1"><see cref="Android.Os.Bundle"/></param>
        /// <returns><see cref="int"/></returns>
        public int Delete(Android.Net.Uri arg0, Android.Os.Bundle arg1)
        {
            return IExecute<int>("delete", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#delete(android.net.Uri,java.lang.String,java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public int Delete(Android.Net.Uri arg0, Java.Lang.String arg1, Java.Lang.String[] arg2)
        {
            return IExecute<int>("delete", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#update(android.net.Uri,android.content.ContentValues,android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg1"><see cref="Android.Content.ContentValues"/></param>
        /// <param name="arg2"><see cref="Android.Os.Bundle"/></param>
        /// <returns><see cref="int"/></returns>
        public int Update(Android.Net.Uri arg0, Android.Content.ContentValues arg1, Android.Os.Bundle arg2)
        {
            return IExecute<int>("update", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg1"><see cref="Android.Content.ContentValues"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public int Update(Android.Net.Uri arg0, Android.Content.ContentValues arg1, Java.Lang.String arg2, Java.Lang.String[] arg3)
        {
            return IExecute<int>("update", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#openInputStream(android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <returns><see cref="Java.Io.InputStream"/></returns>
        /// <exception cref="Java.Io.FileNotFoundException"/>
        public Java.Io.InputStream OpenInputStream(Android.Net.Uri arg0)
        {
            return IExecuteWithSignature<Java.Io.InputStream>("openInputStream", "(Landroid/net/Uri;)Ljava/io/InputStream;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#openOutputStream(android.net.Uri,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Io.OutputStream"/></returns>
        /// <exception cref="Java.Io.FileNotFoundException"/>
        public Java.Io.OutputStream OpenOutputStream(Android.Net.Uri arg0, Java.Lang.String arg1)
        {
            return IExecute<Java.Io.OutputStream>("openOutputStream", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#openOutputStream(android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <returns><see cref="Java.Io.OutputStream"/></returns>
        /// <exception cref="Java.Io.FileNotFoundException"/>
        public Java.Io.OutputStream OpenOutputStream(Android.Net.Uri arg0)
        {
            return IExecuteWithSignature<Java.Io.OutputStream>("openOutputStream", "(Landroid/net/Uri;)Ljava/io/OutputStream;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#getType(android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetType(Android.Net.Uri arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getType", "(Landroid/net/Uri;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <param name="arg2"><see cref="Android.Database.ContentObserver"/></param>
        public void RegisterContentObserver(Android.Net.Uri arg0, bool arg1, Android.Database.ContentObserver arg2)
        {
            IExecute("registerContentObserver", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#unregisterContentObserver(android.database.ContentObserver)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Database.ContentObserver"/></param>
        public void UnregisterContentObserver(Android.Database.ContentObserver arg0)
        {
            IExecuteWithSignature("unregisterContentObserver", "(Landroid/database/ContentObserver;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#getStreamTypes(android.net.Uri,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String[] GetStreamTypes(Android.Net.Uri arg0, Java.Lang.String arg1)
        {
            return IExecuteArray<Java.Lang.String>("getStreamTypes", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#getOutgoingPersistedUriPermissions()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Content.UriPermission> GetOutgoingPersistedUriPermissions()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Content.UriPermission>>("getOutgoingPersistedUriPermissions", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#getPersistedUriPermissions()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Content.UriPermission> GetPersistedUriPermissions()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Content.UriPermission>>("getPersistedUriPermissions", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#cancelSync(android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        [global::System.Obsolete()]
        public void CancelSync(Android.Net.Uri arg0)
        {
            IExecuteWithSignature("cancelSync", "(Landroid/net/Uri;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#notifyChange(android.net.Uri,android.database.ContentObserver,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg1"><see cref="Android.Database.ContentObserver"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void NotifyChange(Android.Net.Uri arg0, Android.Database.ContentObserver arg1, bool arg2)
        {
            IExecute("notifyChange", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#notifyChange(android.net.Uri,android.database.ContentObserver,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg1"><see cref="Android.Database.ContentObserver"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void NotifyChange(Android.Net.Uri arg0, Android.Database.ContentObserver arg1, int arg2)
        {
            IExecute("notifyChange", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#notifyChange(android.net.Uri,android.database.ContentObserver)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg1"><see cref="Android.Database.ContentObserver"/></param>
        public void NotifyChange(Android.Net.Uri arg0, Android.Database.ContentObserver arg1)
        {
            IExecute("notifyChange", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#notifyChange(java.util.Collection,android.database.ContentObserver,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Collection"/></param>
        /// <param name="arg1"><see cref="Android.Database.ContentObserver"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void NotifyChange(Java.Util.Collection<Android.Net.Uri> arg0, Android.Database.ContentObserver arg1, int arg2)
        {
            IExecute("notifyChange", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#releasePersistableUriPermission(android.net.Uri,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void ReleasePersistableUriPermission(Android.Net.Uri arg0, int arg1)
        {
            IExecute("releasePersistableUriPermission", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#startSync(android.net.Uri,android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg1"><see cref="Android.Os.Bundle"/></param>
        [global::System.Obsolete()]
        public void StartSync(Android.Net.Uri arg0, Android.Os.Bundle arg1)
        {
            IExecute("startSync", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/ContentResolver.html#takePersistableUriPermission(android.net.Uri,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void TakePersistableUriPermission(Android.Net.Uri arg0, int arg1)
        {
            IExecute("takePersistableUriPermission", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region MimeTypeInfo
        public partial class MimeTypeInfo
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/ContentResolver.MimeTypeInfo.html#getIcon()"/>
            /// </summary>
            /// <returns><see cref="Android.Graphics.Drawable.Icon"/></returns>
            public Android.Graphics.Drawable.Icon GetIcon()
            {
                return IExecuteWithSignature<Android.Graphics.Drawable.Icon>("getIcon", "()Landroid/graphics/drawable/Icon;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/ContentResolver.MimeTypeInfo.html#getContentDescription()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.CharSequence"/></returns>
            public Java.Lang.CharSequence GetContentDescription()
            {
                return IExecuteWithSignature<Java.Lang.CharSequence>("getContentDescription", "()Ljava/lang/CharSequence;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/ContentResolver.MimeTypeInfo.html#getLabel()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.CharSequence"/></returns>
            public Java.Lang.CharSequence GetLabel()
            {
                return IExecuteWithSignature<Java.Lang.CharSequence>("getLabel", "()Ljava/lang/CharSequence;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
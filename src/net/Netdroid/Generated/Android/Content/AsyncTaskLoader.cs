/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Content
{
    #region AsyncTaskLoader
    public partial class AsyncTaskLoader
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/AsyncTaskLoader.html#%3Cinit%3E(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        [global::System.Obsolete()]
        public AsyncTaskLoader(Android.Content.Context arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/AsyncTaskLoader.html#loadInBackground()"/>
        /// </summary>
        /// <returns><see cref="object"/></returns>
        [global::System.Obsolete()]
        public object LoadInBackground()
        {
            return IExecuteWithSignature("loadInBackground", "()Ljava/lang/Object;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/AsyncTaskLoader.html#isLoadInBackgroundCanceled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool IsLoadInBackgroundCanceled()
        {
            return IExecuteWithSignature<bool>("isLoadInBackgroundCanceled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/AsyncTaskLoader.html#cancelLoadInBackground()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void CancelLoadInBackground()
        {
            IExecuteWithSignature("cancelLoadInBackground", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/AsyncTaskLoader.html#onCanceled(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        [global::System.Obsolete()]
        public void OnCanceled(object arg0)
        {
            IExecuteWithSignature("onCanceled", "(Ljava/lang/Object;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/AsyncTaskLoader.html#setUpdateThrottle(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        [global::System.Obsolete()]
        public void SetUpdateThrottle(long arg0)
        {
            IExecuteWithSignature("setUpdateThrottle", "(J)V", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region AsyncTaskLoader<D>
    public partial class AsyncTaskLoader<D>
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/AsyncTaskLoader.html#%3Cinit%3E(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        [global::System.Obsolete()]
        public AsyncTaskLoader(Android.Content.Context arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Android.Content.AsyncTaskLoader{D}"/> to <see cref="Android.Content.AsyncTaskLoader"/>
        /// </summary>
        public static implicit operator Android.Content.AsyncTaskLoader(Android.Content.AsyncTaskLoader<D> t) => t.Cast<Android.Content.AsyncTaskLoader>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/AsyncTaskLoader.html#loadInBackground()"/>
        /// </summary>
        /// <returns><typeparamref name="D"/></returns>
        [global::System.Obsolete()]
        public D LoadInBackground()
        {
            return IExecuteWithSignature<D>("loadInBackground", "()Ljava/lang/Object;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/AsyncTaskLoader.html#isLoadInBackgroundCanceled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool IsLoadInBackgroundCanceled()
        {
            return IExecuteWithSignature<bool>("isLoadInBackgroundCanceled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/AsyncTaskLoader.html#cancelLoadInBackground()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void CancelLoadInBackground()
        {
            IExecuteWithSignature("cancelLoadInBackground", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/AsyncTaskLoader.html#onCanceled(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><typeparamref name="D"/></param>
        [global::System.Obsolete()]
        public void OnCanceled(D arg0)
        {
            IExecuteWithSignature("onCanceled", "(Ljava/lang/Object;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/AsyncTaskLoader.html#setUpdateThrottle(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        [global::System.Obsolete()]
        public void SetUpdateThrottle(long arg0)
        {
            IExecuteWithSignature("setUpdateThrottle", "(J)V", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
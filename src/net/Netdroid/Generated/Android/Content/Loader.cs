/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Content
{
    #region Loader declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/content/Loader.html"/>
    /// </summary>
    [global::System.Obsolete()]
    public partial class Loader : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Loader>
    {
        const string _bridgeClassName = "android.content.Loader";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public Loader() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public Loader(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region ForceLoadContentObserver declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.ForceLoadContentObserver.html"/>
        /// </summary>
        [global::System.Obsolete()]
        public partial class ForceLoadContentObserver : Android.Database.ContentObserver
        {
            const string _bridgeClassName = "android.content.Loader$ForceLoadContentObserver";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public ForceLoadContentObserver() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public ForceLoadContentObserver(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => false;

            // TODO: complete the class

        }
        #endregion

        #region OnLoadCanceledListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.OnLoadCanceledListener.html"/>
        /// </summary>
        [global::System.Obsolete()]
        public partial class OnLoadCanceledListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnLoadCanceledListener() { InitializeHandlers(); }

            const string _bridgeClassName = "org.mases.netdroid.generated.android.content.Loader_OnLoadCanceledListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

        
            // TODO: complete the class

        }
        #endregion

        #region OnLoadCanceledListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="OnLoadCanceledListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnLoadCanceledListenerDirect : OnLoadCanceledListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;

            /// <inheritdoc />
            protected override void InitializeHandlers() { }

            const string _bridgeClassName = "android.content.Loader$OnLoadCanceledListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region OnLoadCanceledListener<D> declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.OnLoadCanceledListener.html"/>
        /// </summary>
        /// <typeparam name="D"></typeparam>
        [global::System.Obsolete()]
        public partial class OnLoadCanceledListener<D> : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnLoadCanceledListener() { InitializeHandlers(); }

            const string _bridgeClassName = "org.mases.netdroid.generated.android.content.Loader_OnLoadCanceledListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

        
            // TODO: complete the class

        }
        #endregion

        #region OnLoadCanceledListenerDirect<D> declaration
        /// <summary>
        /// Direct override of <see cref="OnLoadCanceledListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnLoadCanceledListenerDirect<D> : OnLoadCanceledListener<D>
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;

            /// <inheritdoc />
            protected override void InitializeHandlers() { }

            const string _bridgeClassName = "android.content.Loader$OnLoadCanceledListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region OnLoadCompleteListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.OnLoadCompleteListener.html"/>
        /// </summary>
        [global::System.Obsolete()]
        public partial class OnLoadCompleteListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnLoadCompleteListener() { InitializeHandlers(); }

            const string _bridgeClassName = "org.mases.netdroid.generated.android.content.Loader_OnLoadCompleteListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

        
            // TODO: complete the class

        }
        #endregion

        #region OnLoadCompleteListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="OnLoadCompleteListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnLoadCompleteListenerDirect : OnLoadCompleteListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;

            /// <inheritdoc />
            protected override void InitializeHandlers() { }

            const string _bridgeClassName = "android.content.Loader$OnLoadCompleteListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region OnLoadCompleteListener<D> declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.OnLoadCompleteListener.html"/>
        /// </summary>
        /// <typeparam name="D"></typeparam>
        [global::System.Obsolete()]
        public partial class OnLoadCompleteListener<D> : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnLoadCompleteListener() { InitializeHandlers(); }

            const string _bridgeClassName = "org.mases.netdroid.generated.android.content.Loader_OnLoadCompleteListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

        
            // TODO: complete the class

        }
        #endregion

        #region OnLoadCompleteListenerDirect<D> declaration
        /// <summary>
        /// Direct override of <see cref="OnLoadCompleteListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnLoadCompleteListenerDirect<D> : OnLoadCompleteListener<D>
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;

            /// <inheritdoc />
            protected override void InitializeHandlers() { }

            const string _bridgeClassName = "android.content.Loader$OnLoadCompleteListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

    
    }
    #endregion

    #region Loader<D> declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/content/Loader.html"/>
    /// </summary>
    /// <typeparam name="D"></typeparam>
    [global::System.Obsolete()]
    public partial class Loader<D> : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Loader<D>>
    {
        const string _bridgeClassName = "android.content.Loader";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public Loader() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public Loader(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
    
    }
    #endregion

    #region Loader implementation
    public partial class Loader
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#%3Cinit%3E(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        [global::System.Obsolete()]
        public Loader(Android.Content.Context arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#getContext()"/>
        /// </summary>
        /// <returns><see cref="Android.Content.Context"/></returns>
        [global::System.Obsolete()]
        public Android.Content.Context GetContext()
        {
            return IExecuteWithSignature<Android.Content.Context>("getContext", "()Landroid/content/Context;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#cancelLoad()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool CancelLoad()
        {
            return IExecuteWithSignature<bool>("cancelLoad", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#isAbandoned()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool IsAbandoned()
        {
            return IExecuteWithSignature<bool>("isAbandoned", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#isReset()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool IsReset()
        {
            return IExecuteWithSignature<bool>("isReset", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#isStarted()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool IsStarted()
        {
            return IExecuteWithSignature<bool>("isStarted", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#takeContentChanged()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool TakeContentChanged()
        {
            return IExecuteWithSignature<bool>("takeContentChanged", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#startLoading()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void StartLoading()
        {
            IExecuteWithSignature("startLoading", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#getId()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetId()
        {
            return IExecuteWithSignature<int>("getId", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#dataToString(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        [global::System.Obsolete()]
        public Java.Lang.String DataToString(object arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("dataToString", "(Ljava/lang/Object;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#abandon()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void Abandon()
        {
            IExecuteWithSignature("abandon", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#commitContentChanged()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void CommitContentChanged()
        {
            IExecuteWithSignature("commitContentChanged", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#deliverCancellation()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void DeliverCancellation()
        {
            IExecuteWithSignature("deliverCancellation", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#deliverResult(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        [global::System.Obsolete()]
        public void DeliverResult(object arg0)
        {
            IExecuteWithSignature("deliverResult", "(Ljava/lang/Object;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Io.FileDescriptor"/></param>
        /// <param name="arg2"><see cref="Java.Io.PrintWriter"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        [global::System.Obsolete()]
        public void Dump(Java.Lang.String arg0, Java.Io.FileDescriptor arg1, Java.Io.PrintWriter arg2, Java.Lang.String[] arg3)
        {
            IExecute("dump", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#forceLoad()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void ForceLoad()
        {
            IExecuteWithSignature("forceLoad", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#onContentChanged()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void OnContentChanged()
        {
            IExecuteWithSignature("onContentChanged", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#registerListener(int,android.content.Loader.OnLoadCompleteListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Content.Loader.OnLoadCompleteListener"/></param>
        [global::System.Obsolete()]
        public void RegisterListener(int arg0, Android.Content.Loader.OnLoadCompleteListener arg1)
        {
            IExecute("registerListener", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#registerOnLoadCanceledListener(android.content.Loader.OnLoadCanceledListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Loader.OnLoadCanceledListener"/></param>
        [global::System.Obsolete()]
        public void RegisterOnLoadCanceledListener(Android.Content.Loader.OnLoadCanceledListener arg0)
        {
            IExecuteWithSignature("registerOnLoadCanceledListener", "(Landroid/content/Loader$OnLoadCanceledListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#reset()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void Reset()
        {
            IExecuteWithSignature("reset", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#rollbackContentChanged()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void RollbackContentChanged()
        {
            IExecuteWithSignature("rollbackContentChanged", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#stopLoading()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void StopLoading()
        {
            IExecuteWithSignature("stopLoading", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#unregisterListener(android.content.Loader.OnLoadCompleteListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Loader.OnLoadCompleteListener"/></param>
        [global::System.Obsolete()]
        public void UnregisterListener(Android.Content.Loader.OnLoadCompleteListener arg0)
        {
            IExecuteWithSignature("unregisterListener", "(Landroid/content/Loader$OnLoadCompleteListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#unregisterOnLoadCanceledListener(android.content.Loader.OnLoadCanceledListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Loader.OnLoadCanceledListener"/></param>
        [global::System.Obsolete()]
        public void UnregisterOnLoadCanceledListener(Android.Content.Loader.OnLoadCanceledListener arg0)
        {
            IExecuteWithSignature("unregisterOnLoadCanceledListener", "(Landroid/content/Loader$OnLoadCanceledListener;)V", arg0);
        }

        #endregion

        #region Nested classes
        #region ForceLoadContentObserver implementation
        public partial class ForceLoadContentObserver
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/Loader.ForceLoadContentObserver.html#%3Cinit%3E(android.content.Loader)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.Loader"/></param>
            [global::System.Obsolete()]
            public ForceLoadContentObserver(Android.Content.Loader arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnLoadCanceledListener implementation
        public partial class OnLoadCanceledListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnLoadCanceledListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onLoadCanceled", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnLoadCanceledEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/content/Loader.OnLoadCanceledListener.html#onLoadCanceled(android.content.Loader)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnLoadCanceled"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Content.Loader> OnOnLoadCanceled { get; set; } = null;

            bool hasOverrideOnLoadCanceled = true;
            void OnLoadCanceledEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnLoadCanceled = true;
                var methodToExecute = (OnOnLoadCanceled != null) ? OnOnLoadCanceled : OnLoadCanceled;
                methodToExecute.Invoke(data.EventData.GetAt<Android.Content.Loader>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnLoadCanceled;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/Loader.OnLoadCanceledListener.html#onLoadCanceled(android.content.Loader)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.Loader"/></param>
            [global::System.Obsolete()]
            public virtual void OnLoadCanceled(Android.Content.Loader arg0)
            {
                hasOverrideOnLoadCanceled = false;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnLoadCanceledListenerDirect implementation
        public partial class OnLoadCanceledListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/Loader.OnLoadCanceledListener.html#onLoadCanceled(android.content.Loader)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.Loader"/></param>
            [global::System.Obsolete()]
            public override void OnLoadCanceled(Android.Content.Loader arg0)
            {
                IExecuteWithSignature("onLoadCanceled", "(Landroid/content/Loader;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnLoadCanceledListener<D> implementation
        public partial class OnLoadCanceledListener<D>
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnLoadCanceledListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onLoadCanceled", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnLoadCanceledEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/content/Loader.OnLoadCanceledListener.html#onLoadCanceled(android.content.Loader)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnLoadCanceled"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Content.Loader<D>> OnOnLoadCanceled { get; set; } = null;

            bool hasOverrideOnLoadCanceled = true;
            void OnLoadCanceledEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnLoadCanceled = true;
                var methodToExecute = (OnOnLoadCanceled != null) ? OnOnLoadCanceled : OnLoadCanceled;
                methodToExecute.Invoke(data.EventData.GetAt<Android.Content.Loader<D>>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnLoadCanceled;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/Loader.OnLoadCanceledListener.html#onLoadCanceled(android.content.Loader)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.Loader"/></param>
            [global::System.Obsolete()]
            public virtual void OnLoadCanceled(Android.Content.Loader<D> arg0)
            {
                hasOverrideOnLoadCanceled = false;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnLoadCanceledListenerDirect<D> implementation
        public partial class OnLoadCanceledListenerDirect<D>
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/Loader.OnLoadCanceledListener.html#onLoadCanceled(android.content.Loader)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.Loader"/></param>
            [global::System.Obsolete()]
            public override void OnLoadCanceled(Android.Content.Loader<D> arg0)
            {
                IExecuteWithSignature("onLoadCanceled", "(Landroid/content/Loader;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnLoadCompleteListener implementation
        public partial class OnLoadCompleteListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnLoadCompleteListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onLoadComplete", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnLoadCompleteEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/content/Loader.OnLoadCompleteListener.html#onLoadComplete(android.content.Loader,java.lang.Object)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnLoadComplete"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Content.Loader, object> OnOnLoadComplete { get; set; } = null;

            bool hasOverrideOnLoadComplete = true;
            void OnLoadCompleteEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnLoadComplete = true;
                var methodToExecute = (OnOnLoadComplete != null) ? OnOnLoadComplete : OnLoadComplete;
                methodToExecute.Invoke(data.EventData.GetAt<Android.Content.Loader>(0), data.EventData.GetAt<object>(1));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnLoadComplete;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/Loader.OnLoadCompleteListener.html#onLoadComplete(android.content.Loader,java.lang.Object)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.Loader"/></param>
            /// <param name="arg1"><see cref="object"/></param>
            [global::System.Obsolete()]
            public virtual void OnLoadComplete(Android.Content.Loader arg0, object arg1)
            {
                hasOverrideOnLoadComplete = false;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnLoadCompleteListenerDirect implementation
        public partial class OnLoadCompleteListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/Loader.OnLoadCompleteListener.html#onLoadComplete(android.content.Loader,java.lang.Object)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.Loader"/></param>
            /// <param name="arg1"><see cref="object"/></param>
            [global::System.Obsolete()]
            public override void OnLoadComplete(Android.Content.Loader arg0, object arg1)
            {
                IExecute("onLoadComplete", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnLoadCompleteListener<D> implementation
        public partial class OnLoadCompleteListener<D>
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnLoadCompleteListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onLoadComplete", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnLoadCompleteEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/content/Loader.OnLoadCompleteListener.html#onLoadComplete(android.content.Loader,java.lang.Object)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnLoadComplete"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Content.Loader<D>, D> OnOnLoadComplete { get; set; } = null;

            bool hasOverrideOnLoadComplete = true;
            void OnLoadCompleteEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnLoadComplete = true;
                var methodToExecute = (OnOnLoadComplete != null) ? OnOnLoadComplete : OnLoadComplete;
                methodToExecute.Invoke(data.EventData.GetAt<Android.Content.Loader<D>>(0), data.EventData.GetAt<D>(1));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnLoadComplete;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/Loader.OnLoadCompleteListener.html#onLoadComplete(android.content.Loader,java.lang.Object)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.Loader"/></param>
            /// <param name="arg1"><typeparamref name="D"/></param>
            [global::System.Obsolete()]
            public virtual void OnLoadComplete(Android.Content.Loader<D> arg0, D arg1)
            {
                hasOverrideOnLoadComplete = false;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnLoadCompleteListenerDirect<D> implementation
        public partial class OnLoadCompleteListenerDirect<D>
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/Loader.OnLoadCompleteListener.html#onLoadComplete(android.content.Loader,java.lang.Object)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.Loader"/></param>
            /// <param name="arg1"><typeparamref name="D"/></param>
            [global::System.Obsolete()]
            public override void OnLoadComplete(Android.Content.Loader<D> arg0, D arg1)
            {
                IExecute("onLoadComplete", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion

    #region Loader<D> implementation
    public partial class Loader<D>
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#%3Cinit%3E(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        [global::System.Obsolete()]
        public Loader(Android.Content.Context arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Android.Content.Loader{D}"/> to <see cref="Android.Content.Loader"/>
        /// </summary>
        public static implicit operator Android.Content.Loader(Android.Content.Loader<D> t) => t.Cast<Android.Content.Loader>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#getContext()"/>
        /// </summary>
        /// <returns><see cref="Android.Content.Context"/></returns>
        [global::System.Obsolete()]
        public Android.Content.Context GetContext()
        {
            return IExecuteWithSignature<Android.Content.Context>("getContext", "()Landroid/content/Context;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#cancelLoad()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool CancelLoad()
        {
            return IExecuteWithSignature<bool>("cancelLoad", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#isAbandoned()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool IsAbandoned()
        {
            return IExecuteWithSignature<bool>("isAbandoned", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#isReset()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool IsReset()
        {
            return IExecuteWithSignature<bool>("isReset", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#isStarted()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool IsStarted()
        {
            return IExecuteWithSignature<bool>("isStarted", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#takeContentChanged()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool TakeContentChanged()
        {
            return IExecuteWithSignature<bool>("takeContentChanged", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#startLoading()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void StartLoading()
        {
            IExecuteWithSignature("startLoading", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#getId()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetId()
        {
            return IExecuteWithSignature<int>("getId", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#dataToString(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><typeparamref name="D"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        [global::System.Obsolete()]
        public Java.Lang.String DataToString(D arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("dataToString", "(Ljava/lang/Object;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#abandon()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void Abandon()
        {
            IExecuteWithSignature("abandon", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#commitContentChanged()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void CommitContentChanged()
        {
            IExecuteWithSignature("commitContentChanged", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#deliverCancellation()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void DeliverCancellation()
        {
            IExecuteWithSignature("deliverCancellation", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#deliverResult(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><typeparamref name="D"/></param>
        [global::System.Obsolete()]
        public void DeliverResult(D arg0)
        {
            IExecuteWithSignature("deliverResult", "(Ljava/lang/Object;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Io.FileDescriptor"/></param>
        /// <param name="arg2"><see cref="Java.Io.PrintWriter"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        [global::System.Obsolete()]
        public void Dump(Java.Lang.String arg0, Java.Io.FileDescriptor arg1, Java.Io.PrintWriter arg2, Java.Lang.String[] arg3)
        {
            IExecute("dump", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#forceLoad()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void ForceLoad()
        {
            IExecuteWithSignature("forceLoad", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#onContentChanged()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void OnContentChanged()
        {
            IExecuteWithSignature("onContentChanged", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#registerListener(int,android.content.Loader.OnLoadCompleteListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Content.Loader.OnLoadCompleteListener"/></param>
        [global::System.Obsolete()]
        public void RegisterListener(int arg0, Android.Content.Loader.OnLoadCompleteListener<D> arg1)
        {
            IExecute("registerListener", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#registerOnLoadCanceledListener(android.content.Loader.OnLoadCanceledListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Loader.OnLoadCanceledListener"/></param>
        [global::System.Obsolete()]
        public void RegisterOnLoadCanceledListener(Android.Content.Loader.OnLoadCanceledListener<D> arg0)
        {
            IExecuteWithSignature("registerOnLoadCanceledListener", "(Landroid/content/Loader$OnLoadCanceledListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#reset()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void Reset()
        {
            IExecuteWithSignature("reset", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#rollbackContentChanged()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void RollbackContentChanged()
        {
            IExecuteWithSignature("rollbackContentChanged", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#stopLoading()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void StopLoading()
        {
            IExecuteWithSignature("stopLoading", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#unregisterListener(android.content.Loader.OnLoadCompleteListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Loader.OnLoadCompleteListener"/></param>
        [global::System.Obsolete()]
        public void UnregisterListener(Android.Content.Loader.OnLoadCompleteListener<D> arg0)
        {
            IExecuteWithSignature("unregisterListener", "(Landroid/content/Loader$OnLoadCompleteListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/Loader.html#unregisterOnLoadCanceledListener(android.content.Loader.OnLoadCanceledListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Loader.OnLoadCanceledListener"/></param>
        [global::System.Obsolete()]
        public void UnregisterOnLoadCanceledListener(Android.Content.Loader.OnLoadCanceledListener<D> arg0)
        {
            IExecuteWithSignature("unregisterOnLoadCanceledListener", "(Landroid/content/Loader$OnLoadCanceledListener;)V", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
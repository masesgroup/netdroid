/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Content.Res
{
    #region AssetFileDescriptor declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/content/res/AssetFileDescriptor.html"/>
    /// </summary>
    public partial class AssetFileDescriptor : MASES.JCOBridge.C2JBridge.JVMBridgeBase<AssetFileDescriptor>
    {
        const string _bridgeClassName = "android.content.res.AssetFileDescriptor";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public AssetFileDescriptor() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public AssetFileDescriptor(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region AutoCloseInputStream declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/AssetFileDescriptor.AutoCloseInputStream.html"/>
        /// </summary>
        public partial class AutoCloseInputStream : Android.Os.ParcelFileDescriptor.AutoCloseInputStream
        {
            const string _bridgeClassName = "android.content.res.AssetFileDescriptor$AutoCloseInputStream";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public AutoCloseInputStream() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public AutoCloseInputStream(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region AutoCloseOutputStream declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/AssetFileDescriptor.AutoCloseOutputStream.html"/>
        /// </summary>
        public partial class AutoCloseOutputStream : Android.Os.ParcelFileDescriptor.AutoCloseOutputStream
        {
            const string _bridgeClassName = "android.content.res.AssetFileDescriptor$AutoCloseOutputStream";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public AutoCloseOutputStream() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public AutoCloseOutputStream(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region AssetFileDescriptor implementation
    public partial class AssetFileDescriptor : Android.Os.IParcelable, Java.Io.ICloseable
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/AssetFileDescriptor.html#%3Cinit%3E(android.os.ParcelFileDescriptor,long,long,android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.ParcelFileDescriptor"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <param name="arg3"><see cref="Android.Os.Bundle"/></param>
        public AssetFileDescriptor(Android.Os.ParcelFileDescriptor arg0, long arg1, long arg2, Android.Os.Bundle arg3)
            : base(arg0, arg1, arg2, arg3)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/AssetFileDescriptor.html#%3Cinit%3E(android.os.ParcelFileDescriptor,long,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.ParcelFileDescriptor"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        public AssetFileDescriptor(Android.Os.ParcelFileDescriptor arg0, long arg1, long arg2)
            : base(arg0, arg1, arg2)
        {
        }
    
        #endregion
    
        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Android.Content.Res.AssetFileDescriptor"/> to <see cref="Android.Os.Parcelable"/>
        /// </summary>
        public static implicit operator Android.Os.Parcelable(Android.Content.Res.AssetFileDescriptor t) => t.Cast<Android.Os.Parcelable>();
        /// <summary>
        /// Converter from <see cref="Android.Content.Res.AssetFileDescriptor"/> to <see cref="Java.Io.Closeable"/>
        /// </summary>
        public static implicit operator Java.Io.Closeable(Android.Content.Res.AssetFileDescriptor t) => t.Cast<Java.Io.Closeable>();
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/AssetFileDescriptor.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/AssetFileDescriptor.html#UNKNOWN_LENGTH"/>
        /// </summary>
        public static long UNKNOWN_LENGTH { get { if (!_UNKNOWN_LENGTHReady) { _UNKNOWN_LENGTHContent = SGetField<long>(LocalBridgeClazz, "UNKNOWN_LENGTH"); _UNKNOWN_LENGTHReady = true; } return _UNKNOWN_LENGTHContent; } }
        private static long _UNKNOWN_LENGTHContent = default;
        private static bool _UNKNOWN_LENGTHReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/AssetFileDescriptor.html#getExtras()"/>
        /// </summary>
        /// <returns><see cref="Android.Os.Bundle"/></returns>
        public Android.Os.Bundle GetExtras()
        {
            return IExecute<Android.Os.Bundle>("getExtras");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/AssetFileDescriptor.html#getParcelFileDescriptor()"/>
        /// </summary>
        /// <returns><see cref="Android.Os.ParcelFileDescriptor"/></returns>
        public Android.Os.ParcelFileDescriptor GetParcelFileDescriptor()
        {
            return IExecute<Android.Os.ParcelFileDescriptor>("getParcelFileDescriptor");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/AssetFileDescriptor.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecute<int>("describeContents");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/AssetFileDescriptor.html#getFileDescriptor()"/>
        /// </summary>
        /// <returns><see cref="Java.Io.FileDescriptor"/></returns>
        public Java.Io.FileDescriptor GetFileDescriptor()
        {
            return IExecute<Java.Io.FileDescriptor>("getFileDescriptor");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/AssetFileDescriptor.html#createInputStream()"/>
        /// </summary>
        /// <returns><see cref="Java.Io.FileInputStream"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public Java.Io.FileInputStream CreateInputStream()
        {
            return IExecute<Java.Io.FileInputStream>("createInputStream");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/AssetFileDescriptor.html#createOutputStream()"/>
        /// </summary>
        /// <returns><see cref="Java.Io.FileOutputStream"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public Java.Io.FileOutputStream CreateOutputStream()
        {
            return IExecute<Java.Io.FileOutputStream>("createOutputStream");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/AssetFileDescriptor.html#getDeclaredLength()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetDeclaredLength()
        {
            return IExecute<long>("getDeclaredLength");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/AssetFileDescriptor.html#getLength()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetLength()
        {
            return IExecute<long>("getLength");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/AssetFileDescriptor.html#getStartOffset()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetStartOffset()
        {
            return IExecute<long>("getStartOffset");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/AssetFileDescriptor.html#close()"/>
        /// </summary>
        /// <exception cref="Java.Io.IOException"/>
        public void Close()
        {
            IExecute("close");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/AssetFileDescriptor.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecute("writeToParcel", arg0, arg1);
        }
    
        #endregion
    
        #region Nested classes
        #region AutoCloseInputStream implementation
        public partial class AutoCloseInputStream
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/res/AssetFileDescriptor.AutoCloseInputStream.html#%3Cinit%3E(android.content.res.AssetFileDescriptor)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.Res.AssetFileDescriptor"/></param>
            /// <exception cref="Java.Io.IOException"/>
            public AutoCloseInputStream(Android.Content.Res.AssetFileDescriptor arg0)
                : base(arg0)
            {
            }
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region AutoCloseOutputStream implementation
        public partial class AutoCloseOutputStream
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/res/AssetFileDescriptor.AutoCloseOutputStream.html#%3Cinit%3E(android.content.res.AssetFileDescriptor)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.Res.AssetFileDescriptor"/></param>
            /// <exception cref="Java.Io.IOException"/>
            public AutoCloseOutputStream(Android.Content.Res.AssetFileDescriptor arg0)
                : base(arg0)
            {
            }
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Content.Res
{
    #region Configuration
    public partial class Configuration : Android.Os.IParcelable, Java.Lang.IComparable<Android.Content.Res.Configuration>
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#%3Cinit%3E(android.content.res.Configuration)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Res.Configuration"/></param>
        public Configuration(Android.Content.Res.Configuration arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Android.Content.Res.Configuration"/> to <see cref="Android.Os.Parcelable"/>
        /// </summary>
        public static implicit operator Android.Os.Parcelable(Android.Content.Res.Configuration t) => t.Cast<Android.Os.Parcelable>();
        /// <summary>
        /// Converter from <see cref="Android.Content.Res.Configuration"/> to <see cref="Java.Lang.Comparable"/>
        /// </summary>
        public static implicit operator Java.Lang.Comparable(Android.Content.Res.Configuration t) => t.Cast<Java.Lang.Comparable>();

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#fontScale"/>
        /// </summary>
        public float fontScale { get { return IGetField<float>("fontScale"); } set { ISetField("fontScale", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#colorMode"/>
        /// </summary>
        public int colorMode { get { return IGetField<int>("colorMode"); } set { ISetField("colorMode", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#densityDpi"/>
        /// </summary>
        public int densityDpi { get { return IGetField<int>("densityDpi"); } set { ISetField("densityDpi", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#fontWeightAdjustment"/>
        /// </summary>
        public int fontWeightAdjustment { get { return IGetField<int>("fontWeightAdjustment"); } set { ISetField("fontWeightAdjustment", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#hardKeyboardHidden"/>
        /// </summary>
        public int hardKeyboardHidden { get { return IGetField<int>("hardKeyboardHidden"); } set { ISetField("hardKeyboardHidden", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#keyboard"/>
        /// </summary>
        public int keyboard { get { return IGetField<int>("keyboard"); } set { ISetField("keyboard", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#keyboardHidden"/>
        /// </summary>
        public int keyboardHidden { get { return IGetField<int>("keyboardHidden"); } set { ISetField("keyboardHidden", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#mcc"/>
        /// </summary>
        public int mcc { get { return IGetField<int>("mcc"); } set { ISetField("mcc", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#mnc"/>
        /// </summary>
        public int mnc { get { return IGetField<int>("mnc"); } set { ISetField("mnc", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#navigation"/>
        /// </summary>
        public int navigation { get { return IGetField<int>("navigation"); } set { ISetField("navigation", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#navigationHidden"/>
        /// </summary>
        public int navigationHidden { get { return IGetField<int>("navigationHidden"); } set { ISetField("navigationHidden", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#orientation"/>
        /// </summary>
        public int orientation { get { return IGetField<int>("orientation"); } set { ISetField("orientation", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#screenHeightDp"/>
        /// </summary>
        public int screenHeightDp { get { return IGetField<int>("screenHeightDp"); } set { ISetField("screenHeightDp", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#screenLayout"/>
        /// </summary>
        public int screenLayout { get { return IGetField<int>("screenLayout"); } set { ISetField("screenLayout", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#screenWidthDp"/>
        /// </summary>
        public int screenWidthDp { get { return IGetField<int>("screenWidthDp"); } set { ISetField("screenWidthDp", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#smallestScreenWidthDp"/>
        /// </summary>
        public int smallestScreenWidthDp { get { return IGetField<int>("smallestScreenWidthDp"); } set { ISetField("smallestScreenWidthDp", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#touchscreen"/>
        /// </summary>
        public int touchscreen { get { return IGetField<int>("touchscreen"); } set { ISetField("touchscreen", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#uiMode"/>
        /// </summary>
        public int uiMode { get { return IGetField<int>("uiMode"); } set { ISetField("uiMode", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#locale"/>
        /// </summary>
        [global::System.Obsolete()]
        public Java.Util.Locale locale { get { return IGetField<Java.Util.Locale>("locale"); } set { ISetField("locale", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#COLOR_MODE_HDR_MASK"/>
        /// </summary>
        public static int COLOR_MODE_HDR_MASK { get { if (!_COLOR_MODE_HDR_MASKReady) { _COLOR_MODE_HDR_MASKContent = SGetField<int>(LocalBridgeClazz, "COLOR_MODE_HDR_MASK"); _COLOR_MODE_HDR_MASKReady = true; } return _COLOR_MODE_HDR_MASKContent; } }
        private static int _COLOR_MODE_HDR_MASKContent = default;
        private static bool _COLOR_MODE_HDR_MASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#COLOR_MODE_HDR_NO"/>
        /// </summary>
        public static int COLOR_MODE_HDR_NO { get { if (!_COLOR_MODE_HDR_NOReady) { _COLOR_MODE_HDR_NOContent = SGetField<int>(LocalBridgeClazz, "COLOR_MODE_HDR_NO"); _COLOR_MODE_HDR_NOReady = true; } return _COLOR_MODE_HDR_NOContent; } }
        private static int _COLOR_MODE_HDR_NOContent = default;
        private static bool _COLOR_MODE_HDR_NOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#COLOR_MODE_HDR_SHIFT"/>
        /// </summary>
        public static int COLOR_MODE_HDR_SHIFT { get { if (!_COLOR_MODE_HDR_SHIFTReady) { _COLOR_MODE_HDR_SHIFTContent = SGetField<int>(LocalBridgeClazz, "COLOR_MODE_HDR_SHIFT"); _COLOR_MODE_HDR_SHIFTReady = true; } return _COLOR_MODE_HDR_SHIFTContent; } }
        private static int _COLOR_MODE_HDR_SHIFTContent = default;
        private static bool _COLOR_MODE_HDR_SHIFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#COLOR_MODE_HDR_UNDEFINED"/>
        /// </summary>
        public static int COLOR_MODE_HDR_UNDEFINED { get { if (!_COLOR_MODE_HDR_UNDEFINEDReady) { _COLOR_MODE_HDR_UNDEFINEDContent = SGetField<int>(LocalBridgeClazz, "COLOR_MODE_HDR_UNDEFINED"); _COLOR_MODE_HDR_UNDEFINEDReady = true; } return _COLOR_MODE_HDR_UNDEFINEDContent; } }
        private static int _COLOR_MODE_HDR_UNDEFINEDContent = default;
        private static bool _COLOR_MODE_HDR_UNDEFINEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#COLOR_MODE_HDR_YES"/>
        /// </summary>
        public static int COLOR_MODE_HDR_YES { get { if (!_COLOR_MODE_HDR_YESReady) { _COLOR_MODE_HDR_YESContent = SGetField<int>(LocalBridgeClazz, "COLOR_MODE_HDR_YES"); _COLOR_MODE_HDR_YESReady = true; } return _COLOR_MODE_HDR_YESContent; } }
        private static int _COLOR_MODE_HDR_YESContent = default;
        private static bool _COLOR_MODE_HDR_YESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#COLOR_MODE_UNDEFINED"/>
        /// </summary>
        public static int COLOR_MODE_UNDEFINED { get { if (!_COLOR_MODE_UNDEFINEDReady) { _COLOR_MODE_UNDEFINEDContent = SGetField<int>(LocalBridgeClazz, "COLOR_MODE_UNDEFINED"); _COLOR_MODE_UNDEFINEDReady = true; } return _COLOR_MODE_UNDEFINEDContent; } }
        private static int _COLOR_MODE_UNDEFINEDContent = default;
        private static bool _COLOR_MODE_UNDEFINEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#COLOR_MODE_WIDE_COLOR_GAMUT_MASK"/>
        /// </summary>
        public static int COLOR_MODE_WIDE_COLOR_GAMUT_MASK { get { if (!_COLOR_MODE_WIDE_COLOR_GAMUT_MASKReady) { _COLOR_MODE_WIDE_COLOR_GAMUT_MASKContent = SGetField<int>(LocalBridgeClazz, "COLOR_MODE_WIDE_COLOR_GAMUT_MASK"); _COLOR_MODE_WIDE_COLOR_GAMUT_MASKReady = true; } return _COLOR_MODE_WIDE_COLOR_GAMUT_MASKContent; } }
        private static int _COLOR_MODE_WIDE_COLOR_GAMUT_MASKContent = default;
        private static bool _COLOR_MODE_WIDE_COLOR_GAMUT_MASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#COLOR_MODE_WIDE_COLOR_GAMUT_NO"/>
        /// </summary>
        public static int COLOR_MODE_WIDE_COLOR_GAMUT_NO { get { if (!_COLOR_MODE_WIDE_COLOR_GAMUT_NOReady) { _COLOR_MODE_WIDE_COLOR_GAMUT_NOContent = SGetField<int>(LocalBridgeClazz, "COLOR_MODE_WIDE_COLOR_GAMUT_NO"); _COLOR_MODE_WIDE_COLOR_GAMUT_NOReady = true; } return _COLOR_MODE_WIDE_COLOR_GAMUT_NOContent; } }
        private static int _COLOR_MODE_WIDE_COLOR_GAMUT_NOContent = default;
        private static bool _COLOR_MODE_WIDE_COLOR_GAMUT_NOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#COLOR_MODE_WIDE_COLOR_GAMUT_UNDEFINED"/>
        /// </summary>
        public static int COLOR_MODE_WIDE_COLOR_GAMUT_UNDEFINED { get { if (!_COLOR_MODE_WIDE_COLOR_GAMUT_UNDEFINEDReady) { _COLOR_MODE_WIDE_COLOR_GAMUT_UNDEFINEDContent = SGetField<int>(LocalBridgeClazz, "COLOR_MODE_WIDE_COLOR_GAMUT_UNDEFINED"); _COLOR_MODE_WIDE_COLOR_GAMUT_UNDEFINEDReady = true; } return _COLOR_MODE_WIDE_COLOR_GAMUT_UNDEFINEDContent; } }
        private static int _COLOR_MODE_WIDE_COLOR_GAMUT_UNDEFINEDContent = default;
        private static bool _COLOR_MODE_WIDE_COLOR_GAMUT_UNDEFINEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#COLOR_MODE_WIDE_COLOR_GAMUT_YES"/>
        /// </summary>
        public static int COLOR_MODE_WIDE_COLOR_GAMUT_YES { get { if (!_COLOR_MODE_WIDE_COLOR_GAMUT_YESReady) { _COLOR_MODE_WIDE_COLOR_GAMUT_YESContent = SGetField<int>(LocalBridgeClazz, "COLOR_MODE_WIDE_COLOR_GAMUT_YES"); _COLOR_MODE_WIDE_COLOR_GAMUT_YESReady = true; } return _COLOR_MODE_WIDE_COLOR_GAMUT_YESContent; } }
        private static int _COLOR_MODE_WIDE_COLOR_GAMUT_YESContent = default;
        private static bool _COLOR_MODE_WIDE_COLOR_GAMUT_YESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#DENSITY_DPI_UNDEFINED"/>
        /// </summary>
        public static int DENSITY_DPI_UNDEFINED { get { if (!_DENSITY_DPI_UNDEFINEDReady) { _DENSITY_DPI_UNDEFINEDContent = SGetField<int>(LocalBridgeClazz, "DENSITY_DPI_UNDEFINED"); _DENSITY_DPI_UNDEFINEDReady = true; } return _DENSITY_DPI_UNDEFINEDContent; } }
        private static int _DENSITY_DPI_UNDEFINEDContent = default;
        private static bool _DENSITY_DPI_UNDEFINEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#FONT_WEIGHT_ADJUSTMENT_UNDEFINED"/>
        /// </summary>
        public static int FONT_WEIGHT_ADJUSTMENT_UNDEFINED { get { if (!_FONT_WEIGHT_ADJUSTMENT_UNDEFINEDReady) { _FONT_WEIGHT_ADJUSTMENT_UNDEFINEDContent = SGetField<int>(LocalBridgeClazz, "FONT_WEIGHT_ADJUSTMENT_UNDEFINED"); _FONT_WEIGHT_ADJUSTMENT_UNDEFINEDReady = true; } return _FONT_WEIGHT_ADJUSTMENT_UNDEFINEDContent; } }
        private static int _FONT_WEIGHT_ADJUSTMENT_UNDEFINEDContent = default;
        private static bool _FONT_WEIGHT_ADJUSTMENT_UNDEFINEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#GRAMMATICAL_GENDER_FEMININE"/>
        /// </summary>
        public static int GRAMMATICAL_GENDER_FEMININE { get { if (!_GRAMMATICAL_GENDER_FEMININEReady) { _GRAMMATICAL_GENDER_FEMININEContent = SGetField<int>(LocalBridgeClazz, "GRAMMATICAL_GENDER_FEMININE"); _GRAMMATICAL_GENDER_FEMININEReady = true; } return _GRAMMATICAL_GENDER_FEMININEContent; } }
        private static int _GRAMMATICAL_GENDER_FEMININEContent = default;
        private static bool _GRAMMATICAL_GENDER_FEMININEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#GRAMMATICAL_GENDER_MASCULINE"/>
        /// </summary>
        public static int GRAMMATICAL_GENDER_MASCULINE { get { if (!_GRAMMATICAL_GENDER_MASCULINEReady) { _GRAMMATICAL_GENDER_MASCULINEContent = SGetField<int>(LocalBridgeClazz, "GRAMMATICAL_GENDER_MASCULINE"); _GRAMMATICAL_GENDER_MASCULINEReady = true; } return _GRAMMATICAL_GENDER_MASCULINEContent; } }
        private static int _GRAMMATICAL_GENDER_MASCULINEContent = default;
        private static bool _GRAMMATICAL_GENDER_MASCULINEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#GRAMMATICAL_GENDER_NEUTRAL"/>
        /// </summary>
        public static int GRAMMATICAL_GENDER_NEUTRAL { get { if (!_GRAMMATICAL_GENDER_NEUTRALReady) { _GRAMMATICAL_GENDER_NEUTRALContent = SGetField<int>(LocalBridgeClazz, "GRAMMATICAL_GENDER_NEUTRAL"); _GRAMMATICAL_GENDER_NEUTRALReady = true; } return _GRAMMATICAL_GENDER_NEUTRALContent; } }
        private static int _GRAMMATICAL_GENDER_NEUTRALContent = default;
        private static bool _GRAMMATICAL_GENDER_NEUTRALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#GRAMMATICAL_GENDER_NOT_SPECIFIED"/>
        /// </summary>
        public static int GRAMMATICAL_GENDER_NOT_SPECIFIED { get { if (!_GRAMMATICAL_GENDER_NOT_SPECIFIEDReady) { _GRAMMATICAL_GENDER_NOT_SPECIFIEDContent = SGetField<int>(LocalBridgeClazz, "GRAMMATICAL_GENDER_NOT_SPECIFIED"); _GRAMMATICAL_GENDER_NOT_SPECIFIEDReady = true; } return _GRAMMATICAL_GENDER_NOT_SPECIFIEDContent; } }
        private static int _GRAMMATICAL_GENDER_NOT_SPECIFIEDContent = default;
        private static bool _GRAMMATICAL_GENDER_NOT_SPECIFIEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#HARDKEYBOARDHIDDEN_NO"/>
        /// </summary>
        public static int HARDKEYBOARDHIDDEN_NO { get { if (!_HARDKEYBOARDHIDDEN_NOReady) { _HARDKEYBOARDHIDDEN_NOContent = SGetField<int>(LocalBridgeClazz, "HARDKEYBOARDHIDDEN_NO"); _HARDKEYBOARDHIDDEN_NOReady = true; } return _HARDKEYBOARDHIDDEN_NOContent; } }
        private static int _HARDKEYBOARDHIDDEN_NOContent = default;
        private static bool _HARDKEYBOARDHIDDEN_NOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#HARDKEYBOARDHIDDEN_UNDEFINED"/>
        /// </summary>
        public static int HARDKEYBOARDHIDDEN_UNDEFINED { get { if (!_HARDKEYBOARDHIDDEN_UNDEFINEDReady) { _HARDKEYBOARDHIDDEN_UNDEFINEDContent = SGetField<int>(LocalBridgeClazz, "HARDKEYBOARDHIDDEN_UNDEFINED"); _HARDKEYBOARDHIDDEN_UNDEFINEDReady = true; } return _HARDKEYBOARDHIDDEN_UNDEFINEDContent; } }
        private static int _HARDKEYBOARDHIDDEN_UNDEFINEDContent = default;
        private static bool _HARDKEYBOARDHIDDEN_UNDEFINEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#HARDKEYBOARDHIDDEN_YES"/>
        /// </summary>
        public static int HARDKEYBOARDHIDDEN_YES { get { if (!_HARDKEYBOARDHIDDEN_YESReady) { _HARDKEYBOARDHIDDEN_YESContent = SGetField<int>(LocalBridgeClazz, "HARDKEYBOARDHIDDEN_YES"); _HARDKEYBOARDHIDDEN_YESReady = true; } return _HARDKEYBOARDHIDDEN_YESContent; } }
        private static int _HARDKEYBOARDHIDDEN_YESContent = default;
        private static bool _HARDKEYBOARDHIDDEN_YESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#KEYBOARD_12KEY"/>
        /// </summary>
        public static int KEYBOARD_12KEY { get { if (!_KEYBOARD_12KEYReady) { _KEYBOARD_12KEYContent = SGetField<int>(LocalBridgeClazz, "KEYBOARD_12KEY"); _KEYBOARD_12KEYReady = true; } return _KEYBOARD_12KEYContent; } }
        private static int _KEYBOARD_12KEYContent = default;
        private static bool _KEYBOARD_12KEYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#KEYBOARD_NOKEYS"/>
        /// </summary>
        public static int KEYBOARD_NOKEYS { get { if (!_KEYBOARD_NOKEYSReady) { _KEYBOARD_NOKEYSContent = SGetField<int>(LocalBridgeClazz, "KEYBOARD_NOKEYS"); _KEYBOARD_NOKEYSReady = true; } return _KEYBOARD_NOKEYSContent; } }
        private static int _KEYBOARD_NOKEYSContent = default;
        private static bool _KEYBOARD_NOKEYSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#KEYBOARD_QWERTY"/>
        /// </summary>
        public static int KEYBOARD_QWERTY { get { if (!_KEYBOARD_QWERTYReady) { _KEYBOARD_QWERTYContent = SGetField<int>(LocalBridgeClazz, "KEYBOARD_QWERTY"); _KEYBOARD_QWERTYReady = true; } return _KEYBOARD_QWERTYContent; } }
        private static int _KEYBOARD_QWERTYContent = default;
        private static bool _KEYBOARD_QWERTYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#KEYBOARD_UNDEFINED"/>
        /// </summary>
        public static int KEYBOARD_UNDEFINED { get { if (!_KEYBOARD_UNDEFINEDReady) { _KEYBOARD_UNDEFINEDContent = SGetField<int>(LocalBridgeClazz, "KEYBOARD_UNDEFINED"); _KEYBOARD_UNDEFINEDReady = true; } return _KEYBOARD_UNDEFINEDContent; } }
        private static int _KEYBOARD_UNDEFINEDContent = default;
        private static bool _KEYBOARD_UNDEFINEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#KEYBOARDHIDDEN_NO"/>
        /// </summary>
        public static int KEYBOARDHIDDEN_NO { get { if (!_KEYBOARDHIDDEN_NOReady) { _KEYBOARDHIDDEN_NOContent = SGetField<int>(LocalBridgeClazz, "KEYBOARDHIDDEN_NO"); _KEYBOARDHIDDEN_NOReady = true; } return _KEYBOARDHIDDEN_NOContent; } }
        private static int _KEYBOARDHIDDEN_NOContent = default;
        private static bool _KEYBOARDHIDDEN_NOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#KEYBOARDHIDDEN_UNDEFINED"/>
        /// </summary>
        public static int KEYBOARDHIDDEN_UNDEFINED { get { if (!_KEYBOARDHIDDEN_UNDEFINEDReady) { _KEYBOARDHIDDEN_UNDEFINEDContent = SGetField<int>(LocalBridgeClazz, "KEYBOARDHIDDEN_UNDEFINED"); _KEYBOARDHIDDEN_UNDEFINEDReady = true; } return _KEYBOARDHIDDEN_UNDEFINEDContent; } }
        private static int _KEYBOARDHIDDEN_UNDEFINEDContent = default;
        private static bool _KEYBOARDHIDDEN_UNDEFINEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#KEYBOARDHIDDEN_YES"/>
        /// </summary>
        public static int KEYBOARDHIDDEN_YES { get { if (!_KEYBOARDHIDDEN_YESReady) { _KEYBOARDHIDDEN_YESContent = SGetField<int>(LocalBridgeClazz, "KEYBOARDHIDDEN_YES"); _KEYBOARDHIDDEN_YESReady = true; } return _KEYBOARDHIDDEN_YESContent; } }
        private static int _KEYBOARDHIDDEN_YESContent = default;
        private static bool _KEYBOARDHIDDEN_YESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#MNC_ZERO"/>
        /// </summary>
        public static int MNC_ZERO { get { if (!_MNC_ZEROReady) { _MNC_ZEROContent = SGetField<int>(LocalBridgeClazz, "MNC_ZERO"); _MNC_ZEROReady = true; } return _MNC_ZEROContent; } }
        private static int _MNC_ZEROContent = default;
        private static bool _MNC_ZEROReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#NAVIGATION_DPAD"/>
        /// </summary>
        public static int NAVIGATION_DPAD { get { if (!_NAVIGATION_DPADReady) { _NAVIGATION_DPADContent = SGetField<int>(LocalBridgeClazz, "NAVIGATION_DPAD"); _NAVIGATION_DPADReady = true; } return _NAVIGATION_DPADContent; } }
        private static int _NAVIGATION_DPADContent = default;
        private static bool _NAVIGATION_DPADReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#NAVIGATION_NONAV"/>
        /// </summary>
        public static int NAVIGATION_NONAV { get { if (!_NAVIGATION_NONAVReady) { _NAVIGATION_NONAVContent = SGetField<int>(LocalBridgeClazz, "NAVIGATION_NONAV"); _NAVIGATION_NONAVReady = true; } return _NAVIGATION_NONAVContent; } }
        private static int _NAVIGATION_NONAVContent = default;
        private static bool _NAVIGATION_NONAVReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#NAVIGATION_TRACKBALL"/>
        /// </summary>
        public static int NAVIGATION_TRACKBALL { get { if (!_NAVIGATION_TRACKBALLReady) { _NAVIGATION_TRACKBALLContent = SGetField<int>(LocalBridgeClazz, "NAVIGATION_TRACKBALL"); _NAVIGATION_TRACKBALLReady = true; } return _NAVIGATION_TRACKBALLContent; } }
        private static int _NAVIGATION_TRACKBALLContent = default;
        private static bool _NAVIGATION_TRACKBALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#NAVIGATION_UNDEFINED"/>
        /// </summary>
        public static int NAVIGATION_UNDEFINED { get { if (!_NAVIGATION_UNDEFINEDReady) { _NAVIGATION_UNDEFINEDContent = SGetField<int>(LocalBridgeClazz, "NAVIGATION_UNDEFINED"); _NAVIGATION_UNDEFINEDReady = true; } return _NAVIGATION_UNDEFINEDContent; } }
        private static int _NAVIGATION_UNDEFINEDContent = default;
        private static bool _NAVIGATION_UNDEFINEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#NAVIGATION_WHEEL"/>
        /// </summary>
        public static int NAVIGATION_WHEEL { get { if (!_NAVIGATION_WHEELReady) { _NAVIGATION_WHEELContent = SGetField<int>(LocalBridgeClazz, "NAVIGATION_WHEEL"); _NAVIGATION_WHEELReady = true; } return _NAVIGATION_WHEELContent; } }
        private static int _NAVIGATION_WHEELContent = default;
        private static bool _NAVIGATION_WHEELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#NAVIGATIONHIDDEN_NO"/>
        /// </summary>
        public static int NAVIGATIONHIDDEN_NO { get { if (!_NAVIGATIONHIDDEN_NOReady) { _NAVIGATIONHIDDEN_NOContent = SGetField<int>(LocalBridgeClazz, "NAVIGATIONHIDDEN_NO"); _NAVIGATIONHIDDEN_NOReady = true; } return _NAVIGATIONHIDDEN_NOContent; } }
        private static int _NAVIGATIONHIDDEN_NOContent = default;
        private static bool _NAVIGATIONHIDDEN_NOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#NAVIGATIONHIDDEN_UNDEFINED"/>
        /// </summary>
        public static int NAVIGATIONHIDDEN_UNDEFINED { get { if (!_NAVIGATIONHIDDEN_UNDEFINEDReady) { _NAVIGATIONHIDDEN_UNDEFINEDContent = SGetField<int>(LocalBridgeClazz, "NAVIGATIONHIDDEN_UNDEFINED"); _NAVIGATIONHIDDEN_UNDEFINEDReady = true; } return _NAVIGATIONHIDDEN_UNDEFINEDContent; } }
        private static int _NAVIGATIONHIDDEN_UNDEFINEDContent = default;
        private static bool _NAVIGATIONHIDDEN_UNDEFINEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#NAVIGATIONHIDDEN_YES"/>
        /// </summary>
        public static int NAVIGATIONHIDDEN_YES { get { if (!_NAVIGATIONHIDDEN_YESReady) { _NAVIGATIONHIDDEN_YESContent = SGetField<int>(LocalBridgeClazz, "NAVIGATIONHIDDEN_YES"); _NAVIGATIONHIDDEN_YESReady = true; } return _NAVIGATIONHIDDEN_YESContent; } }
        private static int _NAVIGATIONHIDDEN_YESContent = default;
        private static bool _NAVIGATIONHIDDEN_YESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#ORIENTATION_LANDSCAPE"/>
        /// </summary>
        public static int ORIENTATION_LANDSCAPE { get { if (!_ORIENTATION_LANDSCAPEReady) { _ORIENTATION_LANDSCAPEContent = SGetField<int>(LocalBridgeClazz, "ORIENTATION_LANDSCAPE"); _ORIENTATION_LANDSCAPEReady = true; } return _ORIENTATION_LANDSCAPEContent; } }
        private static int _ORIENTATION_LANDSCAPEContent = default;
        private static bool _ORIENTATION_LANDSCAPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#ORIENTATION_PORTRAIT"/>
        /// </summary>
        public static int ORIENTATION_PORTRAIT { get { if (!_ORIENTATION_PORTRAITReady) { _ORIENTATION_PORTRAITContent = SGetField<int>(LocalBridgeClazz, "ORIENTATION_PORTRAIT"); _ORIENTATION_PORTRAITReady = true; } return _ORIENTATION_PORTRAITContent; } }
        private static int _ORIENTATION_PORTRAITContent = default;
        private static bool _ORIENTATION_PORTRAITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#ORIENTATION_SQUARE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int ORIENTATION_SQUARE { get { if (!_ORIENTATION_SQUAREReady) { _ORIENTATION_SQUAREContent = SGetField<int>(LocalBridgeClazz, "ORIENTATION_SQUARE"); _ORIENTATION_SQUAREReady = true; } return _ORIENTATION_SQUAREContent; } }
        private static int _ORIENTATION_SQUAREContent = default;
        private static bool _ORIENTATION_SQUAREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#ORIENTATION_UNDEFINED"/>
        /// </summary>
        public static int ORIENTATION_UNDEFINED { get { if (!_ORIENTATION_UNDEFINEDReady) { _ORIENTATION_UNDEFINEDContent = SGetField<int>(LocalBridgeClazz, "ORIENTATION_UNDEFINED"); _ORIENTATION_UNDEFINEDReady = true; } return _ORIENTATION_UNDEFINEDContent; } }
        private static int _ORIENTATION_UNDEFINEDContent = default;
        private static bool _ORIENTATION_UNDEFINEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#SCREEN_HEIGHT_DP_UNDEFINED"/>
        /// </summary>
        public static int SCREEN_HEIGHT_DP_UNDEFINED { get { if (!_SCREEN_HEIGHT_DP_UNDEFINEDReady) { _SCREEN_HEIGHT_DP_UNDEFINEDContent = SGetField<int>(LocalBridgeClazz, "SCREEN_HEIGHT_DP_UNDEFINED"); _SCREEN_HEIGHT_DP_UNDEFINEDReady = true; } return _SCREEN_HEIGHT_DP_UNDEFINEDContent; } }
        private static int _SCREEN_HEIGHT_DP_UNDEFINEDContent = default;
        private static bool _SCREEN_HEIGHT_DP_UNDEFINEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#SCREEN_WIDTH_DP_UNDEFINED"/>
        /// </summary>
        public static int SCREEN_WIDTH_DP_UNDEFINED { get { if (!_SCREEN_WIDTH_DP_UNDEFINEDReady) { _SCREEN_WIDTH_DP_UNDEFINEDContent = SGetField<int>(LocalBridgeClazz, "SCREEN_WIDTH_DP_UNDEFINED"); _SCREEN_WIDTH_DP_UNDEFINEDReady = true; } return _SCREEN_WIDTH_DP_UNDEFINEDContent; } }
        private static int _SCREEN_WIDTH_DP_UNDEFINEDContent = default;
        private static bool _SCREEN_WIDTH_DP_UNDEFINEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#SCREENLAYOUT_LAYOUTDIR_LTR"/>
        /// </summary>
        public static int SCREENLAYOUT_LAYOUTDIR_LTR { get { if (!_SCREENLAYOUT_LAYOUTDIR_LTRReady) { _SCREENLAYOUT_LAYOUTDIR_LTRContent = SGetField<int>(LocalBridgeClazz, "SCREENLAYOUT_LAYOUTDIR_LTR"); _SCREENLAYOUT_LAYOUTDIR_LTRReady = true; } return _SCREENLAYOUT_LAYOUTDIR_LTRContent; } }
        private static int _SCREENLAYOUT_LAYOUTDIR_LTRContent = default;
        private static bool _SCREENLAYOUT_LAYOUTDIR_LTRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#SCREENLAYOUT_LAYOUTDIR_MASK"/>
        /// </summary>
        public static int SCREENLAYOUT_LAYOUTDIR_MASK { get { if (!_SCREENLAYOUT_LAYOUTDIR_MASKReady) { _SCREENLAYOUT_LAYOUTDIR_MASKContent = SGetField<int>(LocalBridgeClazz, "SCREENLAYOUT_LAYOUTDIR_MASK"); _SCREENLAYOUT_LAYOUTDIR_MASKReady = true; } return _SCREENLAYOUT_LAYOUTDIR_MASKContent; } }
        private static int _SCREENLAYOUT_LAYOUTDIR_MASKContent = default;
        private static bool _SCREENLAYOUT_LAYOUTDIR_MASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#SCREENLAYOUT_LAYOUTDIR_RTL"/>
        /// </summary>
        public static int SCREENLAYOUT_LAYOUTDIR_RTL { get { if (!_SCREENLAYOUT_LAYOUTDIR_RTLReady) { _SCREENLAYOUT_LAYOUTDIR_RTLContent = SGetField<int>(LocalBridgeClazz, "SCREENLAYOUT_LAYOUTDIR_RTL"); _SCREENLAYOUT_LAYOUTDIR_RTLReady = true; } return _SCREENLAYOUT_LAYOUTDIR_RTLContent; } }
        private static int _SCREENLAYOUT_LAYOUTDIR_RTLContent = default;
        private static bool _SCREENLAYOUT_LAYOUTDIR_RTLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#SCREENLAYOUT_LAYOUTDIR_SHIFT"/>
        /// </summary>
        public static int SCREENLAYOUT_LAYOUTDIR_SHIFT { get { if (!_SCREENLAYOUT_LAYOUTDIR_SHIFTReady) { _SCREENLAYOUT_LAYOUTDIR_SHIFTContent = SGetField<int>(LocalBridgeClazz, "SCREENLAYOUT_LAYOUTDIR_SHIFT"); _SCREENLAYOUT_LAYOUTDIR_SHIFTReady = true; } return _SCREENLAYOUT_LAYOUTDIR_SHIFTContent; } }
        private static int _SCREENLAYOUT_LAYOUTDIR_SHIFTContent = default;
        private static bool _SCREENLAYOUT_LAYOUTDIR_SHIFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#SCREENLAYOUT_LAYOUTDIR_UNDEFINED"/>
        /// </summary>
        public static int SCREENLAYOUT_LAYOUTDIR_UNDEFINED { get { if (!_SCREENLAYOUT_LAYOUTDIR_UNDEFINEDReady) { _SCREENLAYOUT_LAYOUTDIR_UNDEFINEDContent = SGetField<int>(LocalBridgeClazz, "SCREENLAYOUT_LAYOUTDIR_UNDEFINED"); _SCREENLAYOUT_LAYOUTDIR_UNDEFINEDReady = true; } return _SCREENLAYOUT_LAYOUTDIR_UNDEFINEDContent; } }
        private static int _SCREENLAYOUT_LAYOUTDIR_UNDEFINEDContent = default;
        private static bool _SCREENLAYOUT_LAYOUTDIR_UNDEFINEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#SCREENLAYOUT_LONG_MASK"/>
        /// </summary>
        public static int SCREENLAYOUT_LONG_MASK { get { if (!_SCREENLAYOUT_LONG_MASKReady) { _SCREENLAYOUT_LONG_MASKContent = SGetField<int>(LocalBridgeClazz, "SCREENLAYOUT_LONG_MASK"); _SCREENLAYOUT_LONG_MASKReady = true; } return _SCREENLAYOUT_LONG_MASKContent; } }
        private static int _SCREENLAYOUT_LONG_MASKContent = default;
        private static bool _SCREENLAYOUT_LONG_MASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#SCREENLAYOUT_LONG_NO"/>
        /// </summary>
        public static int SCREENLAYOUT_LONG_NO { get { if (!_SCREENLAYOUT_LONG_NOReady) { _SCREENLAYOUT_LONG_NOContent = SGetField<int>(LocalBridgeClazz, "SCREENLAYOUT_LONG_NO"); _SCREENLAYOUT_LONG_NOReady = true; } return _SCREENLAYOUT_LONG_NOContent; } }
        private static int _SCREENLAYOUT_LONG_NOContent = default;
        private static bool _SCREENLAYOUT_LONG_NOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#SCREENLAYOUT_LONG_UNDEFINED"/>
        /// </summary>
        public static int SCREENLAYOUT_LONG_UNDEFINED { get { if (!_SCREENLAYOUT_LONG_UNDEFINEDReady) { _SCREENLAYOUT_LONG_UNDEFINEDContent = SGetField<int>(LocalBridgeClazz, "SCREENLAYOUT_LONG_UNDEFINED"); _SCREENLAYOUT_LONG_UNDEFINEDReady = true; } return _SCREENLAYOUT_LONG_UNDEFINEDContent; } }
        private static int _SCREENLAYOUT_LONG_UNDEFINEDContent = default;
        private static bool _SCREENLAYOUT_LONG_UNDEFINEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#SCREENLAYOUT_LONG_YES"/>
        /// </summary>
        public static int SCREENLAYOUT_LONG_YES { get { if (!_SCREENLAYOUT_LONG_YESReady) { _SCREENLAYOUT_LONG_YESContent = SGetField<int>(LocalBridgeClazz, "SCREENLAYOUT_LONG_YES"); _SCREENLAYOUT_LONG_YESReady = true; } return _SCREENLAYOUT_LONG_YESContent; } }
        private static int _SCREENLAYOUT_LONG_YESContent = default;
        private static bool _SCREENLAYOUT_LONG_YESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#SCREENLAYOUT_ROUND_MASK"/>
        /// </summary>
        public static int SCREENLAYOUT_ROUND_MASK { get { if (!_SCREENLAYOUT_ROUND_MASKReady) { _SCREENLAYOUT_ROUND_MASKContent = SGetField<int>(LocalBridgeClazz, "SCREENLAYOUT_ROUND_MASK"); _SCREENLAYOUT_ROUND_MASKReady = true; } return _SCREENLAYOUT_ROUND_MASKContent; } }
        private static int _SCREENLAYOUT_ROUND_MASKContent = default;
        private static bool _SCREENLAYOUT_ROUND_MASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#SCREENLAYOUT_ROUND_NO"/>
        /// </summary>
        public static int SCREENLAYOUT_ROUND_NO { get { if (!_SCREENLAYOUT_ROUND_NOReady) { _SCREENLAYOUT_ROUND_NOContent = SGetField<int>(LocalBridgeClazz, "SCREENLAYOUT_ROUND_NO"); _SCREENLAYOUT_ROUND_NOReady = true; } return _SCREENLAYOUT_ROUND_NOContent; } }
        private static int _SCREENLAYOUT_ROUND_NOContent = default;
        private static bool _SCREENLAYOUT_ROUND_NOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#SCREENLAYOUT_ROUND_UNDEFINED"/>
        /// </summary>
        public static int SCREENLAYOUT_ROUND_UNDEFINED { get { if (!_SCREENLAYOUT_ROUND_UNDEFINEDReady) { _SCREENLAYOUT_ROUND_UNDEFINEDContent = SGetField<int>(LocalBridgeClazz, "SCREENLAYOUT_ROUND_UNDEFINED"); _SCREENLAYOUT_ROUND_UNDEFINEDReady = true; } return _SCREENLAYOUT_ROUND_UNDEFINEDContent; } }
        private static int _SCREENLAYOUT_ROUND_UNDEFINEDContent = default;
        private static bool _SCREENLAYOUT_ROUND_UNDEFINEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#SCREENLAYOUT_ROUND_YES"/>
        /// </summary>
        public static int SCREENLAYOUT_ROUND_YES { get { if (!_SCREENLAYOUT_ROUND_YESReady) { _SCREENLAYOUT_ROUND_YESContent = SGetField<int>(LocalBridgeClazz, "SCREENLAYOUT_ROUND_YES"); _SCREENLAYOUT_ROUND_YESReady = true; } return _SCREENLAYOUT_ROUND_YESContent; } }
        private static int _SCREENLAYOUT_ROUND_YESContent = default;
        private static bool _SCREENLAYOUT_ROUND_YESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#SCREENLAYOUT_SIZE_LARGE"/>
        /// </summary>
        public static int SCREENLAYOUT_SIZE_LARGE { get { if (!_SCREENLAYOUT_SIZE_LARGEReady) { _SCREENLAYOUT_SIZE_LARGEContent = SGetField<int>(LocalBridgeClazz, "SCREENLAYOUT_SIZE_LARGE"); _SCREENLAYOUT_SIZE_LARGEReady = true; } return _SCREENLAYOUT_SIZE_LARGEContent; } }
        private static int _SCREENLAYOUT_SIZE_LARGEContent = default;
        private static bool _SCREENLAYOUT_SIZE_LARGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#SCREENLAYOUT_SIZE_MASK"/>
        /// </summary>
        public static int SCREENLAYOUT_SIZE_MASK { get { if (!_SCREENLAYOUT_SIZE_MASKReady) { _SCREENLAYOUT_SIZE_MASKContent = SGetField<int>(LocalBridgeClazz, "SCREENLAYOUT_SIZE_MASK"); _SCREENLAYOUT_SIZE_MASKReady = true; } return _SCREENLAYOUT_SIZE_MASKContent; } }
        private static int _SCREENLAYOUT_SIZE_MASKContent = default;
        private static bool _SCREENLAYOUT_SIZE_MASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#SCREENLAYOUT_SIZE_NORMAL"/>
        /// </summary>
        public static int SCREENLAYOUT_SIZE_NORMAL { get { if (!_SCREENLAYOUT_SIZE_NORMALReady) { _SCREENLAYOUT_SIZE_NORMALContent = SGetField<int>(LocalBridgeClazz, "SCREENLAYOUT_SIZE_NORMAL"); _SCREENLAYOUT_SIZE_NORMALReady = true; } return _SCREENLAYOUT_SIZE_NORMALContent; } }
        private static int _SCREENLAYOUT_SIZE_NORMALContent = default;
        private static bool _SCREENLAYOUT_SIZE_NORMALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#SCREENLAYOUT_SIZE_SMALL"/>
        /// </summary>
        public static int SCREENLAYOUT_SIZE_SMALL { get { if (!_SCREENLAYOUT_SIZE_SMALLReady) { _SCREENLAYOUT_SIZE_SMALLContent = SGetField<int>(LocalBridgeClazz, "SCREENLAYOUT_SIZE_SMALL"); _SCREENLAYOUT_SIZE_SMALLReady = true; } return _SCREENLAYOUT_SIZE_SMALLContent; } }
        private static int _SCREENLAYOUT_SIZE_SMALLContent = default;
        private static bool _SCREENLAYOUT_SIZE_SMALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#SCREENLAYOUT_SIZE_UNDEFINED"/>
        /// </summary>
        public static int SCREENLAYOUT_SIZE_UNDEFINED { get { if (!_SCREENLAYOUT_SIZE_UNDEFINEDReady) { _SCREENLAYOUT_SIZE_UNDEFINEDContent = SGetField<int>(LocalBridgeClazz, "SCREENLAYOUT_SIZE_UNDEFINED"); _SCREENLAYOUT_SIZE_UNDEFINEDReady = true; } return _SCREENLAYOUT_SIZE_UNDEFINEDContent; } }
        private static int _SCREENLAYOUT_SIZE_UNDEFINEDContent = default;
        private static bool _SCREENLAYOUT_SIZE_UNDEFINEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#SCREENLAYOUT_SIZE_XLARGE"/>
        /// </summary>
        public static int SCREENLAYOUT_SIZE_XLARGE { get { if (!_SCREENLAYOUT_SIZE_XLARGEReady) { _SCREENLAYOUT_SIZE_XLARGEContent = SGetField<int>(LocalBridgeClazz, "SCREENLAYOUT_SIZE_XLARGE"); _SCREENLAYOUT_SIZE_XLARGEReady = true; } return _SCREENLAYOUT_SIZE_XLARGEContent; } }
        private static int _SCREENLAYOUT_SIZE_XLARGEContent = default;
        private static bool _SCREENLAYOUT_SIZE_XLARGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#SCREENLAYOUT_UNDEFINED"/>
        /// </summary>
        public static int SCREENLAYOUT_UNDEFINED { get { if (!_SCREENLAYOUT_UNDEFINEDReady) { _SCREENLAYOUT_UNDEFINEDContent = SGetField<int>(LocalBridgeClazz, "SCREENLAYOUT_UNDEFINED"); _SCREENLAYOUT_UNDEFINEDReady = true; } return _SCREENLAYOUT_UNDEFINEDContent; } }
        private static int _SCREENLAYOUT_UNDEFINEDContent = default;
        private static bool _SCREENLAYOUT_UNDEFINEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#SMALLEST_SCREEN_WIDTH_DP_UNDEFINED"/>
        /// </summary>
        public static int SMALLEST_SCREEN_WIDTH_DP_UNDEFINED { get { if (!_SMALLEST_SCREEN_WIDTH_DP_UNDEFINEDReady) { _SMALLEST_SCREEN_WIDTH_DP_UNDEFINEDContent = SGetField<int>(LocalBridgeClazz, "SMALLEST_SCREEN_WIDTH_DP_UNDEFINED"); _SMALLEST_SCREEN_WIDTH_DP_UNDEFINEDReady = true; } return _SMALLEST_SCREEN_WIDTH_DP_UNDEFINEDContent; } }
        private static int _SMALLEST_SCREEN_WIDTH_DP_UNDEFINEDContent = default;
        private static bool _SMALLEST_SCREEN_WIDTH_DP_UNDEFINEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#TOUCHSCREEN_FINGER"/>
        /// </summary>
        public static int TOUCHSCREEN_FINGER { get { if (!_TOUCHSCREEN_FINGERReady) { _TOUCHSCREEN_FINGERContent = SGetField<int>(LocalBridgeClazz, "TOUCHSCREEN_FINGER"); _TOUCHSCREEN_FINGERReady = true; } return _TOUCHSCREEN_FINGERContent; } }
        private static int _TOUCHSCREEN_FINGERContent = default;
        private static bool _TOUCHSCREEN_FINGERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#TOUCHSCREEN_NOTOUCH"/>
        /// </summary>
        public static int TOUCHSCREEN_NOTOUCH { get { if (!_TOUCHSCREEN_NOTOUCHReady) { _TOUCHSCREEN_NOTOUCHContent = SGetField<int>(LocalBridgeClazz, "TOUCHSCREEN_NOTOUCH"); _TOUCHSCREEN_NOTOUCHReady = true; } return _TOUCHSCREEN_NOTOUCHContent; } }
        private static int _TOUCHSCREEN_NOTOUCHContent = default;
        private static bool _TOUCHSCREEN_NOTOUCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#TOUCHSCREEN_STYLUS"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int TOUCHSCREEN_STYLUS { get { if (!_TOUCHSCREEN_STYLUSReady) { _TOUCHSCREEN_STYLUSContent = SGetField<int>(LocalBridgeClazz, "TOUCHSCREEN_STYLUS"); _TOUCHSCREEN_STYLUSReady = true; } return _TOUCHSCREEN_STYLUSContent; } }
        private static int _TOUCHSCREEN_STYLUSContent = default;
        private static bool _TOUCHSCREEN_STYLUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#TOUCHSCREEN_UNDEFINED"/>
        /// </summary>
        public static int TOUCHSCREEN_UNDEFINED { get { if (!_TOUCHSCREEN_UNDEFINEDReady) { _TOUCHSCREEN_UNDEFINEDContent = SGetField<int>(LocalBridgeClazz, "TOUCHSCREEN_UNDEFINED"); _TOUCHSCREEN_UNDEFINEDReady = true; } return _TOUCHSCREEN_UNDEFINEDContent; } }
        private static int _TOUCHSCREEN_UNDEFINEDContent = default;
        private static bool _TOUCHSCREEN_UNDEFINEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#UI_MODE_NIGHT_MASK"/>
        /// </summary>
        public static int UI_MODE_NIGHT_MASK { get { if (!_UI_MODE_NIGHT_MASKReady) { _UI_MODE_NIGHT_MASKContent = SGetField<int>(LocalBridgeClazz, "UI_MODE_NIGHT_MASK"); _UI_MODE_NIGHT_MASKReady = true; } return _UI_MODE_NIGHT_MASKContent; } }
        private static int _UI_MODE_NIGHT_MASKContent = default;
        private static bool _UI_MODE_NIGHT_MASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#UI_MODE_NIGHT_NO"/>
        /// </summary>
        public static int UI_MODE_NIGHT_NO { get { if (!_UI_MODE_NIGHT_NOReady) { _UI_MODE_NIGHT_NOContent = SGetField<int>(LocalBridgeClazz, "UI_MODE_NIGHT_NO"); _UI_MODE_NIGHT_NOReady = true; } return _UI_MODE_NIGHT_NOContent; } }
        private static int _UI_MODE_NIGHT_NOContent = default;
        private static bool _UI_MODE_NIGHT_NOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#UI_MODE_NIGHT_UNDEFINED"/>
        /// </summary>
        public static int UI_MODE_NIGHT_UNDEFINED { get { if (!_UI_MODE_NIGHT_UNDEFINEDReady) { _UI_MODE_NIGHT_UNDEFINEDContent = SGetField<int>(LocalBridgeClazz, "UI_MODE_NIGHT_UNDEFINED"); _UI_MODE_NIGHT_UNDEFINEDReady = true; } return _UI_MODE_NIGHT_UNDEFINEDContent; } }
        private static int _UI_MODE_NIGHT_UNDEFINEDContent = default;
        private static bool _UI_MODE_NIGHT_UNDEFINEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#UI_MODE_NIGHT_YES"/>
        /// </summary>
        public static int UI_MODE_NIGHT_YES { get { if (!_UI_MODE_NIGHT_YESReady) { _UI_MODE_NIGHT_YESContent = SGetField<int>(LocalBridgeClazz, "UI_MODE_NIGHT_YES"); _UI_MODE_NIGHT_YESReady = true; } return _UI_MODE_NIGHT_YESContent; } }
        private static int _UI_MODE_NIGHT_YESContent = default;
        private static bool _UI_MODE_NIGHT_YESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#UI_MODE_TYPE_APPLIANCE"/>
        /// </summary>
        public static int UI_MODE_TYPE_APPLIANCE { get { if (!_UI_MODE_TYPE_APPLIANCEReady) { _UI_MODE_TYPE_APPLIANCEContent = SGetField<int>(LocalBridgeClazz, "UI_MODE_TYPE_APPLIANCE"); _UI_MODE_TYPE_APPLIANCEReady = true; } return _UI_MODE_TYPE_APPLIANCEContent; } }
        private static int _UI_MODE_TYPE_APPLIANCEContent = default;
        private static bool _UI_MODE_TYPE_APPLIANCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#UI_MODE_TYPE_CAR"/>
        /// </summary>
        public static int UI_MODE_TYPE_CAR { get { if (!_UI_MODE_TYPE_CARReady) { _UI_MODE_TYPE_CARContent = SGetField<int>(LocalBridgeClazz, "UI_MODE_TYPE_CAR"); _UI_MODE_TYPE_CARReady = true; } return _UI_MODE_TYPE_CARContent; } }
        private static int _UI_MODE_TYPE_CARContent = default;
        private static bool _UI_MODE_TYPE_CARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#UI_MODE_TYPE_DESK"/>
        /// </summary>
        public static int UI_MODE_TYPE_DESK { get { if (!_UI_MODE_TYPE_DESKReady) { _UI_MODE_TYPE_DESKContent = SGetField<int>(LocalBridgeClazz, "UI_MODE_TYPE_DESK"); _UI_MODE_TYPE_DESKReady = true; } return _UI_MODE_TYPE_DESKContent; } }
        private static int _UI_MODE_TYPE_DESKContent = default;
        private static bool _UI_MODE_TYPE_DESKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#UI_MODE_TYPE_MASK"/>
        /// </summary>
        public static int UI_MODE_TYPE_MASK { get { if (!_UI_MODE_TYPE_MASKReady) { _UI_MODE_TYPE_MASKContent = SGetField<int>(LocalBridgeClazz, "UI_MODE_TYPE_MASK"); _UI_MODE_TYPE_MASKReady = true; } return _UI_MODE_TYPE_MASKContent; } }
        private static int _UI_MODE_TYPE_MASKContent = default;
        private static bool _UI_MODE_TYPE_MASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#UI_MODE_TYPE_NORMAL"/>
        /// </summary>
        public static int UI_MODE_TYPE_NORMAL { get { if (!_UI_MODE_TYPE_NORMALReady) { _UI_MODE_TYPE_NORMALContent = SGetField<int>(LocalBridgeClazz, "UI_MODE_TYPE_NORMAL"); _UI_MODE_TYPE_NORMALReady = true; } return _UI_MODE_TYPE_NORMALContent; } }
        private static int _UI_MODE_TYPE_NORMALContent = default;
        private static bool _UI_MODE_TYPE_NORMALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#UI_MODE_TYPE_TELEVISION"/>
        /// </summary>
        public static int UI_MODE_TYPE_TELEVISION { get { if (!_UI_MODE_TYPE_TELEVISIONReady) { _UI_MODE_TYPE_TELEVISIONContent = SGetField<int>(LocalBridgeClazz, "UI_MODE_TYPE_TELEVISION"); _UI_MODE_TYPE_TELEVISIONReady = true; } return _UI_MODE_TYPE_TELEVISIONContent; } }
        private static int _UI_MODE_TYPE_TELEVISIONContent = default;
        private static bool _UI_MODE_TYPE_TELEVISIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#UI_MODE_TYPE_UNDEFINED"/>
        /// </summary>
        public static int UI_MODE_TYPE_UNDEFINED { get { if (!_UI_MODE_TYPE_UNDEFINEDReady) { _UI_MODE_TYPE_UNDEFINEDContent = SGetField<int>(LocalBridgeClazz, "UI_MODE_TYPE_UNDEFINED"); _UI_MODE_TYPE_UNDEFINEDReady = true; } return _UI_MODE_TYPE_UNDEFINEDContent; } }
        private static int _UI_MODE_TYPE_UNDEFINEDContent = default;
        private static bool _UI_MODE_TYPE_UNDEFINEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#UI_MODE_TYPE_VR_HEADSET"/>
        /// </summary>
        public static int UI_MODE_TYPE_VR_HEADSET { get { if (!_UI_MODE_TYPE_VR_HEADSETReady) { _UI_MODE_TYPE_VR_HEADSETContent = SGetField<int>(LocalBridgeClazz, "UI_MODE_TYPE_VR_HEADSET"); _UI_MODE_TYPE_VR_HEADSETReady = true; } return _UI_MODE_TYPE_VR_HEADSETContent; } }
        private static int _UI_MODE_TYPE_VR_HEADSETContent = default;
        private static bool _UI_MODE_TYPE_VR_HEADSETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#UI_MODE_TYPE_WATCH"/>
        /// </summary>
        public static int UI_MODE_TYPE_WATCH { get { if (!_UI_MODE_TYPE_WATCHReady) { _UI_MODE_TYPE_WATCHContent = SGetField<int>(LocalBridgeClazz, "UI_MODE_TYPE_WATCH"); _UI_MODE_TYPE_WATCHReady = true; } return _UI_MODE_TYPE_WATCHContent; } }
        private static int _UI_MODE_TYPE_WATCHContent = default;
        private static bool _UI_MODE_TYPE_WATCHReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#generateDelta(android.content.res.Configuration,android.content.res.Configuration)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Res.Configuration"/></param>
        /// <param name="arg1"><see cref="Android.Content.Res.Configuration"/></param>
        /// <returns><see cref="Android.Content.Res.Configuration"/></returns>
        public static Android.Content.Res.Configuration GenerateDelta(Android.Content.Res.Configuration arg0, Android.Content.Res.Configuration arg1)
        {
            return SExecute<Android.Content.Res.Configuration>(LocalBridgeClazz, "generateDelta", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#needNewResources(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool NeedNewResources(int arg0, int arg1)
        {
            return SExecute<bool>(LocalBridgeClazz, "needNewResources", arg0, arg1);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#getLocales()"/>
        /// </summary>
        /// <returns><see cref="Android.Os.LocaleList"/></returns>
        public Android.Os.LocaleList GetLocales()
        {
            return IExecuteWithSignature<Android.Os.LocaleList>("getLocales", "()Landroid/os/LocaleList;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#isLayoutSizeAtLeast(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsLayoutSizeAtLeast(int arg0)
        {
            return IExecuteWithSignature<bool>("isLayoutSizeAtLeast", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#isNightModeActive()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsNightModeActive()
        {
            return IExecuteWithSignature<bool>("isNightModeActive", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#isScreenHdr()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsScreenHdr()
        {
            return IExecuteWithSignature<bool>("isScreenHdr", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#isScreenRound()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsScreenRound()
        {
            return IExecuteWithSignature<bool>("isScreenRound", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#isScreenWideColorGamut()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsScreenWideColorGamut()
        {
            return IExecuteWithSignature<bool>("isScreenWideColorGamut", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#compareTo(android.content.res.Configuration)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Res.Configuration"/></param>
        /// <returns><see cref="int"/></returns>
        public int CompareTo(Android.Content.Res.Configuration arg0)
        {
            return IExecuteWithSignature<int>("compareTo", "(Landroid/content/res/Configuration;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#compareTo(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="int"/></returns>
        public int CompareTo(object arg0)
        {
            return IExecuteWithSignature<int>("compareTo", "(Ljava/lang/Object;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#diff(android.content.res.Configuration)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Res.Configuration"/></param>
        /// <returns><see cref="int"/></returns>
        public int Diff(Android.Content.Res.Configuration arg0)
        {
            return IExecuteWithSignature<int>("diff", "(Landroid/content/res/Configuration;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#getGrammaticalGender()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetGrammaticalGender()
        {
            return IExecuteWithSignature<int>("getGrammaticalGender", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#getLayoutDirection()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetLayoutDirection()
        {
            return IExecuteWithSignature<int>("getLayoutDirection", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#updateFrom(android.content.res.Configuration)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Res.Configuration"/></param>
        /// <returns><see cref="int"/></returns>
        public int UpdateFrom(Android.Content.Res.Configuration arg0)
        {
            return IExecuteWithSignature<int>("updateFrom", "(Landroid/content/res/Configuration;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#readFromParcel(android.os.Parcel)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        public void ReadFromParcel(Android.Os.Parcel arg0)
        {
            IExecuteWithSignature("readFromParcel", "(Landroid/os/Parcel;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#setLayoutDirection(java.util.Locale)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Locale"/></param>
        public void SetLayoutDirection(Java.Util.Locale arg0)
        {
            IExecuteWithSignature("setLayoutDirection", "(Ljava/util/Locale;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#setLocale(java.util.Locale)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Locale"/></param>
        public void SetLocale(Java.Util.Locale arg0)
        {
            IExecuteWithSignature("setLocale", "(Ljava/util/Locale;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#setLocales(android.os.LocaleList)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.LocaleList"/></param>
        public void SetLocales(Android.Os.LocaleList arg0)
        {
            IExecuteWithSignature("setLocales", "(Landroid/os/LocaleList;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#setTo(android.content.res.Configuration)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Res.Configuration"/></param>
        public void SetTo(Android.Content.Res.Configuration arg0)
        {
            IExecuteWithSignature("setTo", "(Landroid/content/res/Configuration;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#setToDefaults()"/>
        /// </summary>
        public void SetToDefaults()
        {
            IExecuteWithSignature("setToDefaults", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/res/Configuration.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecute("writeToParcel", arg0, arg1);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
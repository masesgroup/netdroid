/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Content.Pm
{
    #region PackageInstaller
    public partial class PackageInstaller
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#PACKAGE_SOURCE_DOWNLOADED_FILE"/>
        /// </summary>
        public static int PACKAGE_SOURCE_DOWNLOADED_FILE { get { if (!_PACKAGE_SOURCE_DOWNLOADED_FILEReady) { _PACKAGE_SOURCE_DOWNLOADED_FILEContent = SGetField<int>(LocalBridgeClazz, "PACKAGE_SOURCE_DOWNLOADED_FILE"); _PACKAGE_SOURCE_DOWNLOADED_FILEReady = true; } return _PACKAGE_SOURCE_DOWNLOADED_FILEContent; } }
        private static int _PACKAGE_SOURCE_DOWNLOADED_FILEContent = default;
        private static bool _PACKAGE_SOURCE_DOWNLOADED_FILEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#PACKAGE_SOURCE_LOCAL_FILE"/>
        /// </summary>
        public static int PACKAGE_SOURCE_LOCAL_FILE { get { if (!_PACKAGE_SOURCE_LOCAL_FILEReady) { _PACKAGE_SOURCE_LOCAL_FILEContent = SGetField<int>(LocalBridgeClazz, "PACKAGE_SOURCE_LOCAL_FILE"); _PACKAGE_SOURCE_LOCAL_FILEReady = true; } return _PACKAGE_SOURCE_LOCAL_FILEContent; } }
        private static int _PACKAGE_SOURCE_LOCAL_FILEContent = default;
        private static bool _PACKAGE_SOURCE_LOCAL_FILEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#PACKAGE_SOURCE_OTHER"/>
        /// </summary>
        public static int PACKAGE_SOURCE_OTHER { get { if (!_PACKAGE_SOURCE_OTHERReady) { _PACKAGE_SOURCE_OTHERContent = SGetField<int>(LocalBridgeClazz, "PACKAGE_SOURCE_OTHER"); _PACKAGE_SOURCE_OTHERReady = true; } return _PACKAGE_SOURCE_OTHERContent; } }
        private static int _PACKAGE_SOURCE_OTHERContent = default;
        private static bool _PACKAGE_SOURCE_OTHERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#PACKAGE_SOURCE_STORE"/>
        /// </summary>
        public static int PACKAGE_SOURCE_STORE { get { if (!_PACKAGE_SOURCE_STOREReady) { _PACKAGE_SOURCE_STOREContent = SGetField<int>(LocalBridgeClazz, "PACKAGE_SOURCE_STORE"); _PACKAGE_SOURCE_STOREReady = true; } return _PACKAGE_SOURCE_STOREContent; } }
        private static int _PACKAGE_SOURCE_STOREContent = default;
        private static bool _PACKAGE_SOURCE_STOREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#PACKAGE_SOURCE_UNSPECIFIED"/>
        /// </summary>
        public static int PACKAGE_SOURCE_UNSPECIFIED { get { if (!_PACKAGE_SOURCE_UNSPECIFIEDReady) { _PACKAGE_SOURCE_UNSPECIFIEDContent = SGetField<int>(LocalBridgeClazz, "PACKAGE_SOURCE_UNSPECIFIED"); _PACKAGE_SOURCE_UNSPECIFIEDReady = true; } return _PACKAGE_SOURCE_UNSPECIFIEDContent; } }
        private static int _PACKAGE_SOURCE_UNSPECIFIEDContent = default;
        private static bool _PACKAGE_SOURCE_UNSPECIFIEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#STATUS_FAILURE"/>
        /// </summary>
        public static int STATUS_FAILURE { get { if (!_STATUS_FAILUREReady) { _STATUS_FAILUREContent = SGetField<int>(LocalBridgeClazz, "STATUS_FAILURE"); _STATUS_FAILUREReady = true; } return _STATUS_FAILUREContent; } }
        private static int _STATUS_FAILUREContent = default;
        private static bool _STATUS_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#STATUS_FAILURE_ABORTED"/>
        /// </summary>
        public static int STATUS_FAILURE_ABORTED { get { if (!_STATUS_FAILURE_ABORTEDReady) { _STATUS_FAILURE_ABORTEDContent = SGetField<int>(LocalBridgeClazz, "STATUS_FAILURE_ABORTED"); _STATUS_FAILURE_ABORTEDReady = true; } return _STATUS_FAILURE_ABORTEDContent; } }
        private static int _STATUS_FAILURE_ABORTEDContent = default;
        private static bool _STATUS_FAILURE_ABORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#STATUS_FAILURE_BLOCKED"/>
        /// </summary>
        public static int STATUS_FAILURE_BLOCKED { get { if (!_STATUS_FAILURE_BLOCKEDReady) { _STATUS_FAILURE_BLOCKEDContent = SGetField<int>(LocalBridgeClazz, "STATUS_FAILURE_BLOCKED"); _STATUS_FAILURE_BLOCKEDReady = true; } return _STATUS_FAILURE_BLOCKEDContent; } }
        private static int _STATUS_FAILURE_BLOCKEDContent = default;
        private static bool _STATUS_FAILURE_BLOCKEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#STATUS_FAILURE_CONFLICT"/>
        /// </summary>
        public static int STATUS_FAILURE_CONFLICT { get { if (!_STATUS_FAILURE_CONFLICTReady) { _STATUS_FAILURE_CONFLICTContent = SGetField<int>(LocalBridgeClazz, "STATUS_FAILURE_CONFLICT"); _STATUS_FAILURE_CONFLICTReady = true; } return _STATUS_FAILURE_CONFLICTContent; } }
        private static int _STATUS_FAILURE_CONFLICTContent = default;
        private static bool _STATUS_FAILURE_CONFLICTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#STATUS_FAILURE_INCOMPATIBLE"/>
        /// </summary>
        public static int STATUS_FAILURE_INCOMPATIBLE { get { if (!_STATUS_FAILURE_INCOMPATIBLEReady) { _STATUS_FAILURE_INCOMPATIBLEContent = SGetField<int>(LocalBridgeClazz, "STATUS_FAILURE_INCOMPATIBLE"); _STATUS_FAILURE_INCOMPATIBLEReady = true; } return _STATUS_FAILURE_INCOMPATIBLEContent; } }
        private static int _STATUS_FAILURE_INCOMPATIBLEContent = default;
        private static bool _STATUS_FAILURE_INCOMPATIBLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#STATUS_FAILURE_INVALID"/>
        /// </summary>
        public static int STATUS_FAILURE_INVALID { get { if (!_STATUS_FAILURE_INVALIDReady) { _STATUS_FAILURE_INVALIDContent = SGetField<int>(LocalBridgeClazz, "STATUS_FAILURE_INVALID"); _STATUS_FAILURE_INVALIDReady = true; } return _STATUS_FAILURE_INVALIDContent; } }
        private static int _STATUS_FAILURE_INVALIDContent = default;
        private static bool _STATUS_FAILURE_INVALIDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#STATUS_FAILURE_STORAGE"/>
        /// </summary>
        public static int STATUS_FAILURE_STORAGE { get { if (!_STATUS_FAILURE_STORAGEReady) { _STATUS_FAILURE_STORAGEContent = SGetField<int>(LocalBridgeClazz, "STATUS_FAILURE_STORAGE"); _STATUS_FAILURE_STORAGEReady = true; } return _STATUS_FAILURE_STORAGEContent; } }
        private static int _STATUS_FAILURE_STORAGEContent = default;
        private static bool _STATUS_FAILURE_STORAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#STATUS_FAILURE_TIMEOUT"/>
        /// </summary>
        public static int STATUS_FAILURE_TIMEOUT { get { if (!_STATUS_FAILURE_TIMEOUTReady) { _STATUS_FAILURE_TIMEOUTContent = SGetField<int>(LocalBridgeClazz, "STATUS_FAILURE_TIMEOUT"); _STATUS_FAILURE_TIMEOUTReady = true; } return _STATUS_FAILURE_TIMEOUTContent; } }
        private static int _STATUS_FAILURE_TIMEOUTContent = default;
        private static bool _STATUS_FAILURE_TIMEOUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#STATUS_PENDING_USER_ACTION"/>
        /// </summary>
        public static int STATUS_PENDING_USER_ACTION { get { if (!_STATUS_PENDING_USER_ACTIONReady) { _STATUS_PENDING_USER_ACTIONContent = SGetField<int>(LocalBridgeClazz, "STATUS_PENDING_USER_ACTION"); _STATUS_PENDING_USER_ACTIONReady = true; } return _STATUS_PENDING_USER_ACTIONContent; } }
        private static int _STATUS_PENDING_USER_ACTIONContent = default;
        private static bool _STATUS_PENDING_USER_ACTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#STATUS_SUCCESS"/>
        /// </summary>
        public static int STATUS_SUCCESS { get { if (!_STATUS_SUCCESSReady) { _STATUS_SUCCESSContent = SGetField<int>(LocalBridgeClazz, "STATUS_SUCCESS"); _STATUS_SUCCESSReady = true; } return _STATUS_SUCCESSContent; } }
        private static int _STATUS_SUCCESSContent = default;
        private static bool _STATUS_SUCCESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#ACTION_SESSION_COMMITTED"/>
        /// </summary>
        public static Java.Lang.String ACTION_SESSION_COMMITTED { get { if (!_ACTION_SESSION_COMMITTEDReady) { _ACTION_SESSION_COMMITTEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_SESSION_COMMITTED"); _ACTION_SESSION_COMMITTEDReady = true; } return _ACTION_SESSION_COMMITTEDContent; } }
        private static Java.Lang.String _ACTION_SESSION_COMMITTEDContent = default;
        private static bool _ACTION_SESSION_COMMITTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#ACTION_SESSION_DETAILS"/>
        /// </summary>
        public static Java.Lang.String ACTION_SESSION_DETAILS { get { if (!_ACTION_SESSION_DETAILSReady) { _ACTION_SESSION_DETAILSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_SESSION_DETAILS"); _ACTION_SESSION_DETAILSReady = true; } return _ACTION_SESSION_DETAILSContent; } }
        private static Java.Lang.String _ACTION_SESSION_DETAILSContent = default;
        private static bool _ACTION_SESSION_DETAILSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#ACTION_SESSION_UPDATED"/>
        /// </summary>
        public static Java.Lang.String ACTION_SESSION_UPDATED { get { if (!_ACTION_SESSION_UPDATEDReady) { _ACTION_SESSION_UPDATEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_SESSION_UPDATED"); _ACTION_SESSION_UPDATEDReady = true; } return _ACTION_SESSION_UPDATEDContent; } }
        private static Java.Lang.String _ACTION_SESSION_UPDATEDContent = default;
        private static bool _ACTION_SESSION_UPDATEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#EXTRA_INSTALL_CONSTRAINTS"/>
        /// </summary>
        public static Java.Lang.String EXTRA_INSTALL_CONSTRAINTS { get { if (!_EXTRA_INSTALL_CONSTRAINTSReady) { _EXTRA_INSTALL_CONSTRAINTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_INSTALL_CONSTRAINTS"); _EXTRA_INSTALL_CONSTRAINTSReady = true; } return _EXTRA_INSTALL_CONSTRAINTSContent; } }
        private static Java.Lang.String _EXTRA_INSTALL_CONSTRAINTSContent = default;
        private static bool _EXTRA_INSTALL_CONSTRAINTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#EXTRA_INSTALL_CONSTRAINTS_RESULT"/>
        /// </summary>
        public static Java.Lang.String EXTRA_INSTALL_CONSTRAINTS_RESULT { get { if (!_EXTRA_INSTALL_CONSTRAINTS_RESULTReady) { _EXTRA_INSTALL_CONSTRAINTS_RESULTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_INSTALL_CONSTRAINTS_RESULT"); _EXTRA_INSTALL_CONSTRAINTS_RESULTReady = true; } return _EXTRA_INSTALL_CONSTRAINTS_RESULTContent; } }
        private static Java.Lang.String _EXTRA_INSTALL_CONSTRAINTS_RESULTContent = default;
        private static bool _EXTRA_INSTALL_CONSTRAINTS_RESULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#EXTRA_OTHER_PACKAGE_NAME"/>
        /// </summary>
        public static Java.Lang.String EXTRA_OTHER_PACKAGE_NAME { get { if (!_EXTRA_OTHER_PACKAGE_NAMEReady) { _EXTRA_OTHER_PACKAGE_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_OTHER_PACKAGE_NAME"); _EXTRA_OTHER_PACKAGE_NAMEReady = true; } return _EXTRA_OTHER_PACKAGE_NAMEContent; } }
        private static Java.Lang.String _EXTRA_OTHER_PACKAGE_NAMEContent = default;
        private static bool _EXTRA_OTHER_PACKAGE_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#EXTRA_PACKAGE_NAME"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PACKAGE_NAME { get { if (!_EXTRA_PACKAGE_NAMEReady) { _EXTRA_PACKAGE_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PACKAGE_NAME"); _EXTRA_PACKAGE_NAMEReady = true; } return _EXTRA_PACKAGE_NAMEContent; } }
        private static Java.Lang.String _EXTRA_PACKAGE_NAMEContent = default;
        private static bool _EXTRA_PACKAGE_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#EXTRA_PRE_APPROVAL"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PRE_APPROVAL { get { if (!_EXTRA_PRE_APPROVALReady) { _EXTRA_PRE_APPROVALContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PRE_APPROVAL"); _EXTRA_PRE_APPROVALReady = true; } return _EXTRA_PRE_APPROVALContent; } }
        private static Java.Lang.String _EXTRA_PRE_APPROVALContent = default;
        private static bool _EXTRA_PRE_APPROVALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#EXTRA_SESSION"/>
        /// </summary>
        public static Java.Lang.String EXTRA_SESSION { get { if (!_EXTRA_SESSIONReady) { _EXTRA_SESSIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_SESSION"); _EXTRA_SESSIONReady = true; } return _EXTRA_SESSIONContent; } }
        private static Java.Lang.String _EXTRA_SESSIONContent = default;
        private static bool _EXTRA_SESSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#EXTRA_SESSION_ID"/>
        /// </summary>
        public static Java.Lang.String EXTRA_SESSION_ID { get { if (!_EXTRA_SESSION_IDReady) { _EXTRA_SESSION_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_SESSION_ID"); _EXTRA_SESSION_IDReady = true; } return _EXTRA_SESSION_IDContent; } }
        private static Java.Lang.String _EXTRA_SESSION_IDContent = default;
        private static bool _EXTRA_SESSION_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#EXTRA_STATUS"/>
        /// </summary>
        public static Java.Lang.String EXTRA_STATUS { get { if (!_EXTRA_STATUSReady) { _EXTRA_STATUSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_STATUS"); _EXTRA_STATUSReady = true; } return _EXTRA_STATUSContent; } }
        private static Java.Lang.String _EXTRA_STATUSContent = default;
        private static bool _EXTRA_STATUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#EXTRA_STATUS_MESSAGE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_STATUS_MESSAGE { get { if (!_EXTRA_STATUS_MESSAGEReady) { _EXTRA_STATUS_MESSAGEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_STATUS_MESSAGE"); _EXTRA_STATUS_MESSAGEReady = true; } return _EXTRA_STATUS_MESSAGEContent; } }
        private static Java.Lang.String _EXTRA_STATUS_MESSAGEContent = default;
        private static bool _EXTRA_STATUS_MESSAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#EXTRA_STORAGE_PATH"/>
        /// </summary>
        public static Java.Lang.String EXTRA_STORAGE_PATH { get { if (!_EXTRA_STORAGE_PATHReady) { _EXTRA_STORAGE_PATHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_STORAGE_PATH"); _EXTRA_STORAGE_PATHReady = true; } return _EXTRA_STORAGE_PATHContent; } }
        private static Java.Lang.String _EXTRA_STORAGE_PATHContent = default;
        private static bool _EXTRA_STORAGE_PATHReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#openSession(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Content.Pm.PackageInstaller.Session"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public Android.Content.Pm.PackageInstaller.Session OpenSession(int arg0)
        {
            return IExecuteWithSignature<Android.Content.Pm.PackageInstaller.Session>("openSession", "(I)Landroid/content/pm/PackageInstaller$Session;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#getActiveStagedSession()"/>
        /// </summary>
        /// <returns><see cref="Android.Content.Pm.PackageInstaller.SessionInfo"/></returns>
        [global::System.Obsolete()]
        public Android.Content.Pm.PackageInstaller.SessionInfo GetActiveStagedSession()
        {
            return IExecuteWithSignature<Android.Content.Pm.PackageInstaller.SessionInfo>("getActiveStagedSession", "()Landroid/content/pm/PackageInstaller$SessionInfo;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#getSessionInfo(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Content.Pm.PackageInstaller.SessionInfo"/></returns>
        public Android.Content.Pm.PackageInstaller.SessionInfo GetSessionInfo(int arg0)
        {
            return IExecuteWithSignature<Android.Content.Pm.PackageInstaller.SessionInfo>("getSessionInfo", "(I)Landroid/content/pm/PackageInstaller$SessionInfo;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#createSession(android.content.pm.PackageInstaller.SessionParams)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Pm.PackageInstaller.SessionParams"/></param>
        /// <returns><see cref="int"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public int CreateSession(Android.Content.Pm.PackageInstaller.SessionParams arg0)
        {
            return IExecuteWithSignature<int>("createSession", "(Landroid/content/pm/PackageInstaller$SessionParams;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#getActiveStagedSessions()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Content.Pm.PackageInstaller.SessionInfo> GetActiveStagedSessions()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Content.Pm.PackageInstaller.SessionInfo>>("getActiveStagedSessions", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#getAllSessions()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Content.Pm.PackageInstaller.SessionInfo> GetAllSessions()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Content.Pm.PackageInstaller.SessionInfo>>("getAllSessions", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#getMySessions()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Content.Pm.PackageInstaller.SessionInfo> GetMySessions()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Content.Pm.PackageInstaller.SessionInfo>>("getMySessions", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#getStagedSessions()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Content.Pm.PackageInstaller.SessionInfo> GetStagedSessions()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Content.Pm.PackageInstaller.SessionInfo>>("getStagedSessions", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#abandonSession(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void AbandonSession(int arg0)
        {
            IExecuteWithSignature("abandonSession", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#checkInstallConstraints(java.util.List,android.content.pm.PackageInstaller.InstallConstraints,java.util.concurrent.Executor,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        /// <param name="arg1"><see cref="Android.Content.Pm.PackageInstaller.InstallConstraints"/></param>
        /// <param name="arg2"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg3"><see cref="Java.Util.Function.Consumer"/></param>
        public void CheckInstallConstraints(Java.Util.List<Java.Lang.String> arg0, Android.Content.Pm.PackageInstaller.InstallConstraints arg1, Java.Util.Concurrent.Executor arg2, Java.Util.Function.Consumer<Android.Content.Pm.PackageInstaller.InstallConstraintsResult> arg3)
        {
            IExecute("checkInstallConstraints", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#commitSessionAfterInstallConstraintsAreMet(int,android.content.IntentSender,android.content.pm.PackageInstaller.InstallConstraints,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Content.IntentSender"/></param>
        /// <param name="arg2"><see cref="Android.Content.Pm.PackageInstaller.InstallConstraints"/></param>
        /// <param name="arg3"><see cref="long"/></param>
        public void CommitSessionAfterInstallConstraintsAreMet(int arg0, Android.Content.IntentSender arg1, Android.Content.Pm.PackageInstaller.InstallConstraints arg2, long arg3)
        {
            IExecute("commitSessionAfterInstallConstraintsAreMet", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#installExistingPackage(java.lang.String,int,android.content.IntentSender)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Content.IntentSender"/></param>
        public void InstallExistingPackage(Java.Lang.String arg0, int arg1, Android.Content.IntentSender arg2)
        {
            IExecute("installExistingPackage", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#registerSessionCallback(android.content.pm.PackageInstaller.SessionCallback,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Pm.PackageInstaller.SessionCallback"/></param>
        /// <param name="arg1"><see cref="Android.Os.Handler"/></param>
        public void RegisterSessionCallback(Android.Content.Pm.PackageInstaller.SessionCallback arg0, Android.Os.Handler arg1)
        {
            IExecute("registerSessionCallback", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#registerSessionCallback(android.content.pm.PackageInstaller.SessionCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Pm.PackageInstaller.SessionCallback"/></param>
        public void RegisterSessionCallback(Android.Content.Pm.PackageInstaller.SessionCallback arg0)
        {
            IExecuteWithSignature("registerSessionCallback", "(Landroid/content/pm/PackageInstaller$SessionCallback;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#uninstall(android.content.pm.VersionedPackage,android.content.IntentSender)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Pm.VersionedPackage"/></param>
        /// <param name="arg1"><see cref="Android.Content.IntentSender"/></param>
        public void Uninstall(Android.Content.Pm.VersionedPackage arg0, Android.Content.IntentSender arg1)
        {
            IExecute("uninstall", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#uninstall(android.content.pm.VersionedPackage,int,android.content.IntentSender)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Pm.VersionedPackage"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Content.IntentSender"/></param>
        public void Uninstall(Android.Content.Pm.VersionedPackage arg0, int arg1, Android.Content.IntentSender arg2)
        {
            IExecute("uninstall", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#uninstall(java.lang.String,android.content.IntentSender)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Content.IntentSender"/></param>
        public void Uninstall(Java.Lang.String arg0, Android.Content.IntentSender arg1)
        {
            IExecute("uninstall", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#uninstallExistingPackage(java.lang.String,android.content.IntentSender)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Content.IntentSender"/></param>
        public void UninstallExistingPackage(Java.Lang.String arg0, Android.Content.IntentSender arg1)
        {
            IExecute("uninstallExistingPackage", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#unregisterSessionCallback(android.content.pm.PackageInstaller.SessionCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Pm.PackageInstaller.SessionCallback"/></param>
        public void UnregisterSessionCallback(Android.Content.Pm.PackageInstaller.SessionCallback arg0)
        {
            IExecuteWithSignature("unregisterSessionCallback", "(Landroid/content/pm/PackageInstaller$SessionCallback;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#updateSessionAppIcon(int,android.graphics.Bitmap)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Bitmap"/></param>
        public void UpdateSessionAppIcon(int arg0, Android.Graphics.Bitmap arg1)
        {
            IExecute("updateSessionAppIcon", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#updateSessionAppLabel(int,java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Lang.CharSequence"/></param>
        public void UpdateSessionAppLabel(int arg0, Java.Lang.CharSequence arg1)
        {
            IExecute("updateSessionAppLabel", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.html#waitForInstallConstraints(java.util.List,android.content.pm.PackageInstaller.InstallConstraints,android.content.IntentSender,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        /// <param name="arg1"><see cref="Android.Content.Pm.PackageInstaller.InstallConstraints"/></param>
        /// <param name="arg2"><see cref="Android.Content.IntentSender"/></param>
        /// <param name="arg3"><see cref="long"/></param>
        public void WaitForInstallConstraints(Java.Util.List<Java.Lang.String> arg0, Android.Content.Pm.PackageInstaller.InstallConstraints arg1, Android.Content.IntentSender arg2, long arg3)
        {
            IExecute("waitForInstallConstraints", arg0, arg1, arg2, arg3);
        }

        #endregion

        #region Nested classes
        #region InstallConstraints
        public partial class InstallConstraints
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.InstallConstraints.html#GENTLE_UPDATE"/>
            /// </summary>
            public static Android.Content.Pm.PackageInstaller.InstallConstraints GENTLE_UPDATE { get { if (!_GENTLE_UPDATEReady) { _GENTLE_UPDATEContent = SGetField<Android.Content.Pm.PackageInstaller.InstallConstraints>(LocalBridgeClazz, "GENTLE_UPDATE"); _GENTLE_UPDATEReady = true; } return _GENTLE_UPDATEContent; } }
            private static Android.Content.Pm.PackageInstaller.InstallConstraints _GENTLE_UPDATEContent = default;
            private static bool _GENTLE_UPDATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.InstallConstraints.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.InstallConstraints.html#isAppNotForegroundRequired()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsAppNotForegroundRequired()
            {
                return IExecuteWithSignature<bool>("isAppNotForegroundRequired", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.InstallConstraints.html#isAppNotInteractingRequired()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsAppNotInteractingRequired()
            {
                return IExecuteWithSignature<bool>("isAppNotInteractingRequired", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.InstallConstraints.html#isAppNotTopVisibleRequired()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsAppNotTopVisibleRequired()
            {
                return IExecuteWithSignature<bool>("isAppNotTopVisibleRequired", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.InstallConstraints.html#isDeviceIdleRequired()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsDeviceIdleRequired()
            {
                return IExecuteWithSignature<bool>("isDeviceIdleRequired", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.InstallConstraints.html#isNotInCallRequired()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsNotInCallRequired()
            {
                return IExecuteWithSignature<bool>("isNotInCallRequired", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.InstallConstraints.html#describeContents()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int DescribeContents()
            {
                return IExecuteWithSignature<int>("describeContents", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.InstallConstraints.html#writeToParcel(android.os.Parcel,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
            {
                IExecute("writeToParcel", arg0, arg1);
            }

            #endregion

            #region Nested classes
            #region Builder
            public partial class Builder
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields

                #endregion

                #region Static methods

                #endregion

                #region Instance methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.InstallConstraints.Builder.html#build()"/>
                /// </summary>
                /// <returns><see cref="Android.Content.Pm.PackageInstaller.InstallConstraints"/></returns>
                public Android.Content.Pm.PackageInstaller.InstallConstraints Build()
                {
                    return IExecuteWithSignature<Android.Content.Pm.PackageInstaller.InstallConstraints>("build", "()Landroid/content/pm/PackageInstaller$InstallConstraints;");
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.InstallConstraints.Builder.html#setAppNotForegroundRequired()"/>
                /// </summary>
                /// <returns><see cref="Android.Content.Pm.PackageInstaller.InstallConstraints.Builder"/></returns>
                public Android.Content.Pm.PackageInstaller.InstallConstraints.Builder SetAppNotForegroundRequired()
                {
                    return IExecuteWithSignature<Android.Content.Pm.PackageInstaller.InstallConstraints.Builder>("setAppNotForegroundRequired", "()Landroid/content/pm/PackageInstaller$InstallConstraints$Builder;");
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.InstallConstraints.Builder.html#setAppNotInteractingRequired()"/>
                /// </summary>
                /// <returns><see cref="Android.Content.Pm.PackageInstaller.InstallConstraints.Builder"/></returns>
                public Android.Content.Pm.PackageInstaller.InstallConstraints.Builder SetAppNotInteractingRequired()
                {
                    return IExecuteWithSignature<Android.Content.Pm.PackageInstaller.InstallConstraints.Builder>("setAppNotInteractingRequired", "()Landroid/content/pm/PackageInstaller$InstallConstraints$Builder;");
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.InstallConstraints.Builder.html#setAppNotTopVisibleRequired()"/>
                /// </summary>
                /// <returns><see cref="Android.Content.Pm.PackageInstaller.InstallConstraints.Builder"/></returns>
                public Android.Content.Pm.PackageInstaller.InstallConstraints.Builder SetAppNotTopVisibleRequired()
                {
                    return IExecuteWithSignature<Android.Content.Pm.PackageInstaller.InstallConstraints.Builder>("setAppNotTopVisibleRequired", "()Landroid/content/pm/PackageInstaller$InstallConstraints$Builder;");
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.InstallConstraints.Builder.html#setDeviceIdleRequired()"/>
                /// </summary>
                /// <returns><see cref="Android.Content.Pm.PackageInstaller.InstallConstraints.Builder"/></returns>
                public Android.Content.Pm.PackageInstaller.InstallConstraints.Builder SetDeviceIdleRequired()
                {
                    return IExecuteWithSignature<Android.Content.Pm.PackageInstaller.InstallConstraints.Builder>("setDeviceIdleRequired", "()Landroid/content/pm/PackageInstaller$InstallConstraints$Builder;");
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.InstallConstraints.Builder.html#setNotInCallRequired()"/>
                /// </summary>
                /// <returns><see cref="Android.Content.Pm.PackageInstaller.InstallConstraints.Builder"/></returns>
                public Android.Content.Pm.PackageInstaller.InstallConstraints.Builder SetNotInCallRequired()
                {
                    return IExecuteWithSignature<Android.Content.Pm.PackageInstaller.InstallConstraints.Builder>("setNotInCallRequired", "()Landroid/content/pm/PackageInstaller$InstallConstraints$Builder;");
                }

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

        
            #endregion

            // TODO: complete the class
        }
        #endregion

        #region InstallConstraintsResult
        public partial class InstallConstraintsResult
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.InstallConstraintsResult.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.InstallConstraintsResult.html#areAllConstraintsSatisfied()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool AreAllConstraintsSatisfied()
            {
                return IExecuteWithSignature<bool>("areAllConstraintsSatisfied", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.InstallConstraintsResult.html#describeContents()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int DescribeContents()
            {
                return IExecuteWithSignature<int>("describeContents", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.InstallConstraintsResult.html#writeToParcel(android.os.Parcel,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
            {
                IExecute("writeToParcel", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region PreapprovalDetails
        public partial class PreapprovalDetails
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.PreapprovalDetails.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.PreapprovalDetails.html#getIcon()"/>
            /// </summary>
            /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
            public Android.Graphics.Bitmap GetIcon()
            {
                return IExecuteWithSignature<Android.Graphics.Bitmap>("getIcon", "()Landroid/graphics/Bitmap;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.PreapprovalDetails.html#getLocale()"/>
            /// </summary>
            /// <returns><see cref="Android.Icu.Util.ULocale"/></returns>
            public Android.Icu.Util.ULocale GetLocale()
            {
                return IExecuteWithSignature<Android.Icu.Util.ULocale>("getLocale", "()Landroid/icu/util/ULocale;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.PreapprovalDetails.html#describeContents()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int DescribeContents()
            {
                return IExecuteWithSignature<int>("describeContents", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.PreapprovalDetails.html#getLabel()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.CharSequence"/></returns>
            public Java.Lang.CharSequence GetLabel()
            {
                return IExecuteWithSignature<Java.Lang.CharSequence>("getLabel", "()Ljava/lang/CharSequence;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.PreapprovalDetails.html#getPackageName()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetPackageName()
            {
                return IExecuteWithSignature<Java.Lang.String>("getPackageName", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.PreapprovalDetails.html#writeToParcel(android.os.Parcel,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
            {
                IExecute("writeToParcel", arg0, arg1);
            }

            #endregion

            #region Nested classes
            #region Builder
            public partial class Builder
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields

                #endregion

                #region Static methods

                #endregion

                #region Instance methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.PreapprovalDetails.Builder.html#build()"/>
                /// </summary>
                /// <returns><see cref="Android.Content.Pm.PackageInstaller.PreapprovalDetails"/></returns>
                public Android.Content.Pm.PackageInstaller.PreapprovalDetails Build()
                {
                    return IExecuteWithSignature<Android.Content.Pm.PackageInstaller.PreapprovalDetails>("build", "()Landroid/content/pm/PackageInstaller$PreapprovalDetails;");
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.PreapprovalDetails.Builder.html#setIcon(android.graphics.Bitmap)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Graphics.Bitmap"/></param>
                /// <returns><see cref="Android.Content.Pm.PackageInstaller.PreapprovalDetails.Builder"/></returns>
                public Android.Content.Pm.PackageInstaller.PreapprovalDetails.Builder SetIcon(Android.Graphics.Bitmap arg0)
                {
                    return IExecuteWithSignature<Android.Content.Pm.PackageInstaller.PreapprovalDetails.Builder>("setIcon", "(Landroid/graphics/Bitmap;)Landroid/content/pm/PackageInstaller$PreapprovalDetails$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.PreapprovalDetails.Builder.html#setLabel(java.lang.CharSequence)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
                /// <returns><see cref="Android.Content.Pm.PackageInstaller.PreapprovalDetails.Builder"/></returns>
                public Android.Content.Pm.PackageInstaller.PreapprovalDetails.Builder SetLabel(Java.Lang.CharSequence arg0)
                {
                    return IExecuteWithSignature<Android.Content.Pm.PackageInstaller.PreapprovalDetails.Builder>("setLabel", "(Ljava/lang/CharSequence;)Landroid/content/pm/PackageInstaller$PreapprovalDetails$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.PreapprovalDetails.Builder.html#setLocale(android.icu.util.ULocale)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Icu.Util.ULocale"/></param>
                /// <returns><see cref="Android.Content.Pm.PackageInstaller.PreapprovalDetails.Builder"/></returns>
                public Android.Content.Pm.PackageInstaller.PreapprovalDetails.Builder SetLocale(Android.Icu.Util.ULocale arg0)
                {
                    return IExecuteWithSignature<Android.Content.Pm.PackageInstaller.PreapprovalDetails.Builder>("setLocale", "(Landroid/icu/util/ULocale;)Landroid/content/pm/PackageInstaller$PreapprovalDetails$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.PreapprovalDetails.Builder.html#setPackageName(java.lang.String)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Java.Lang.String"/></param>
                /// <returns><see cref="Android.Content.Pm.PackageInstaller.PreapprovalDetails.Builder"/></returns>
                public Android.Content.Pm.PackageInstaller.PreapprovalDetails.Builder SetPackageName(Java.Lang.String arg0)
                {
                    return IExecuteWithSignature<Android.Content.Pm.PackageInstaller.PreapprovalDetails.Builder>("setPackageName", "(Ljava/lang/String;)Landroid/content/pm/PackageInstaller$PreapprovalDetails$Builder;", arg0);
                }

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

        
            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Session
        public partial class Session
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.Session.html#getAppMetadata()"/>
            /// </summary>
            /// <returns><see cref="Android.Os.PersistableBundle"/></returns>
            public Android.Os.PersistableBundle GetAppMetadata()
            {
                return IExecuteWithSignature<Android.Os.PersistableBundle>("getAppMetadata", "()Landroid/os/PersistableBundle;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.Session.html#isApplicationEnabledSettingPersistent()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsApplicationEnabledSettingPersistent()
            {
                return IExecuteWithSignature<bool>("isApplicationEnabledSettingPersistent", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.Session.html#isMultiPackage()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsMultiPackage()
            {
                return IExecuteWithSignature<bool>("isMultiPackage", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.Session.html#isRequestUpdateOwnership()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsRequestUpdateOwnership()
            {
                return IExecuteWithSignature<bool>("isRequestUpdateOwnership", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.Session.html#isStaged()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsStaged()
            {
                return IExecuteWithSignature<bool>("isStaged", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.Session.html#getParentSessionId()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetParentSessionId()
            {
                return IExecuteWithSignature<int>("getParentSessionId", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.Session.html#getChildSessionIds()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int[] GetChildSessionIds()
            {
                return IExecuteWithSignatureArray<int>("getChildSessionIds", "()[I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.Session.html#openRead(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Java.Io.InputStream"/></returns>
            /// <exception cref="Java.Io.IOException"/>
            public Java.Io.InputStream OpenRead(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Java.Io.InputStream>("openRead", "(Ljava/lang/String;)Ljava/io/InputStream;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.Session.html#openWrite(java.lang.String,long,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <param name="arg2"><see cref="long"/></param>
            /// <returns><see cref="Java.Io.OutputStream"/></returns>
            /// <exception cref="Java.Io.IOException"/>
            public Java.Io.OutputStream OpenWrite(Java.Lang.String arg0, long arg1, long arg2)
            {
                return IExecute<Java.Io.OutputStream>("openWrite", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.Session.html#getNames()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            /// <exception cref="Java.Io.IOException"/>
            public Java.Lang.String[] GetNames()
            {
                return IExecuteWithSignatureArray<Java.Lang.String>("getNames", "()[Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.Session.html#abandon()"/>
            /// </summary>
            public void Abandon()
            {
                IExecuteWithSignature("abandon", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.Session.html#addChildSessionId(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void AddChildSessionId(int arg0)
            {
                IExecuteWithSignature("addChildSessionId", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.Session.html#close()"/>
            /// </summary>
            public void Close()
            {
                IExecuteWithSignature("close", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.Session.html#commit(android.content.IntentSender)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.IntentSender"/></param>
            public void Commit(Android.Content.IntentSender arg0)
            {
                IExecuteWithSignature("commit", "(Landroid/content/IntentSender;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.Session.html#fsync(java.io.OutputStream)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Io.OutputStream"/></param>
            /// <exception cref="Java.Io.IOException"/>
            public void Fsync(Java.Io.OutputStream arg0)
            {
                IExecuteWithSignature("fsync", "(Ljava/io/OutputStream;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.Session.html#removeChildSessionId(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void RemoveChildSessionId(int arg0)
            {
                IExecuteWithSignature("removeChildSessionId", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.Session.html#removeSplit(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <exception cref="Java.Io.IOException"/>
            public void RemoveSplit(Java.Lang.String arg0)
            {
                IExecuteWithSignature("removeSplit", "(Ljava/lang/String;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.Session.html#requestChecksums(java.lang.String,int,java.util.List,java.util.concurrent.Executor,android.content.pm.PackageManager.OnChecksumsReadyListener)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="Java.Util.List"/></param>
            /// <param name="arg3"><see cref="Java.Util.Concurrent.Executor"/></param>
            /// <param name="arg4"><see cref="Android.Content.Pm.PackageManager.OnChecksumsReadyListener"/></param>
            /// <exception cref="Java.Security.Cert.CertificateEncodingException"/>
            /// <exception cref="Java.Io.FileNotFoundException"/>
            public void RequestChecksums(Java.Lang.String arg0, int arg1, Java.Util.List<Java.Security.Cert.Certificate> arg2, Java.Util.Concurrent.Executor arg3, Android.Content.Pm.PackageManager.OnChecksumsReadyListener arg4)
            {
                IExecute("requestChecksums", arg0, arg1, arg2, arg3, arg4);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.Session.html#requestUserPreapproval(android.content.pm.PackageInstaller.PreapprovalDetails,android.content.IntentSender)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.Pm.PackageInstaller.PreapprovalDetails"/></param>
            /// <param name="arg1"><see cref="Android.Content.IntentSender"/></param>
            public void RequestUserPreapproval(Android.Content.Pm.PackageInstaller.PreapprovalDetails arg0, Android.Content.IntentSender arg1)
            {
                IExecute("requestUserPreapproval", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.Session.html#setAppMetadata(android.os.PersistableBundle)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.PersistableBundle"/></param>
            /// <exception cref="Java.Io.IOException"/>
            public void SetAppMetadata(Android.Os.PersistableBundle arg0)
            {
                IExecuteWithSignature("setAppMetadata", "(Landroid/os/PersistableBundle;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.Session.html#setChecksums(java.lang.String,java.util.List,byte[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Java.Util.List"/></param>
            /// <param name="arg2"><see cref="byte"/></param>
            /// <exception cref="Java.Io.IOException"/>
            [global::System.Obsolete()]
            public void SetChecksums(Java.Lang.String arg0, Java.Util.List<Android.Content.Pm.Checksum> arg1, byte[] arg2)
            {
                IExecute("setChecksums", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.Session.html#setStagingProgress(float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            public void SetStagingProgress(float arg0)
            {
                IExecuteWithSignature("setStagingProgress", "(F)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.Session.html#transfer(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
            public void Transfer(Java.Lang.String arg0)
            {
                IExecuteWithSignature("transfer", "(Ljava/lang/String;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region SessionCallback
        public partial class SessionCallback
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionCallback.html#onActiveChanged(int,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="bool"/></param>
            public void OnActiveChanged(int arg0, bool arg1)
            {
                IExecute("onActiveChanged", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionCallback.html#onBadgingChanged(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void OnBadgingChanged(int arg0)
            {
                IExecuteWithSignature("onBadgingChanged", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionCallback.html#onCreated(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void OnCreated(int arg0)
            {
                IExecuteWithSignature("onCreated", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionCallback.html#onFinished(int,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="bool"/></param>
            public void OnFinished(int arg0, bool arg1)
            {
                IExecute("onFinished", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionCallback.html#onProgressChanged(int,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="float"/></param>
            public void OnProgressChanged(int arg0, float arg1)
            {
                IExecute("onProgressChanged", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region SessionInfo
        public partial class SessionInfo
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#INVALID_ID"/>
            /// </summary>
            public static int INVALID_ID { get { if (!_INVALID_IDReady) { _INVALID_IDContent = SGetField<int>(LocalBridgeClazz, "INVALID_ID"); _INVALID_IDReady = true; } return _INVALID_IDContent; } }
            private static int _INVALID_IDContent = default;
            private static bool _INVALID_IDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#SESSION_ACTIVATION_FAILED"/>
            /// </summary>
            public static int SESSION_ACTIVATION_FAILED { get { if (!_SESSION_ACTIVATION_FAILEDReady) { _SESSION_ACTIVATION_FAILEDContent = SGetField<int>(LocalBridgeClazz, "SESSION_ACTIVATION_FAILED"); _SESSION_ACTIVATION_FAILEDReady = true; } return _SESSION_ACTIVATION_FAILEDContent; } }
            private static int _SESSION_ACTIVATION_FAILEDContent = default;
            private static bool _SESSION_ACTIVATION_FAILEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#SESSION_CONFLICT"/>
            /// </summary>
            public static int SESSION_CONFLICT { get { if (!_SESSION_CONFLICTReady) { _SESSION_CONFLICTContent = SGetField<int>(LocalBridgeClazz, "SESSION_CONFLICT"); _SESSION_CONFLICTReady = true; } return _SESSION_CONFLICTContent; } }
            private static int _SESSION_CONFLICTContent = default;
            private static bool _SESSION_CONFLICTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#SESSION_NO_ERROR"/>
            /// </summary>
            public static int SESSION_NO_ERROR { get { if (!_SESSION_NO_ERRORReady) { _SESSION_NO_ERRORContent = SGetField<int>(LocalBridgeClazz, "SESSION_NO_ERROR"); _SESSION_NO_ERRORReady = true; } return _SESSION_NO_ERRORContent; } }
            private static int _SESSION_NO_ERRORContent = default;
            private static bool _SESSION_NO_ERRORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#SESSION_UNKNOWN_ERROR"/>
            /// </summary>
            public static int SESSION_UNKNOWN_ERROR { get { if (!_SESSION_UNKNOWN_ERRORReady) { _SESSION_UNKNOWN_ERRORContent = SGetField<int>(LocalBridgeClazz, "SESSION_UNKNOWN_ERROR"); _SESSION_UNKNOWN_ERRORReady = true; } return _SESSION_UNKNOWN_ERRORContent; } }
            private static int _SESSION_UNKNOWN_ERRORContent = default;
            private static bool _SESSION_UNKNOWN_ERRORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#SESSION_VERIFICATION_FAILED"/>
            /// </summary>
            public static int SESSION_VERIFICATION_FAILED { get { if (!_SESSION_VERIFICATION_FAILEDReady) { _SESSION_VERIFICATION_FAILEDContent = SGetField<int>(LocalBridgeClazz, "SESSION_VERIFICATION_FAILED"); _SESSION_VERIFICATION_FAILEDReady = true; } return _SESSION_VERIFICATION_FAILEDContent; } }
            private static int _SESSION_VERIFICATION_FAILEDContent = default;
            private static bool _SESSION_VERIFICATION_FAILEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#STAGED_SESSION_ACTIVATION_FAILED"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int STAGED_SESSION_ACTIVATION_FAILED { get { if (!_STAGED_SESSION_ACTIVATION_FAILEDReady) { _STAGED_SESSION_ACTIVATION_FAILEDContent = SGetField<int>(LocalBridgeClazz, "STAGED_SESSION_ACTIVATION_FAILED"); _STAGED_SESSION_ACTIVATION_FAILEDReady = true; } return _STAGED_SESSION_ACTIVATION_FAILEDContent; } }
            private static int _STAGED_SESSION_ACTIVATION_FAILEDContent = default;
            private static bool _STAGED_SESSION_ACTIVATION_FAILEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#STAGED_SESSION_CONFLICT"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int STAGED_SESSION_CONFLICT { get { if (!_STAGED_SESSION_CONFLICTReady) { _STAGED_SESSION_CONFLICTContent = SGetField<int>(LocalBridgeClazz, "STAGED_SESSION_CONFLICT"); _STAGED_SESSION_CONFLICTReady = true; } return _STAGED_SESSION_CONFLICTContent; } }
            private static int _STAGED_SESSION_CONFLICTContent = default;
            private static bool _STAGED_SESSION_CONFLICTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#STAGED_SESSION_NO_ERROR"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int STAGED_SESSION_NO_ERROR { get { if (!_STAGED_SESSION_NO_ERRORReady) { _STAGED_SESSION_NO_ERRORContent = SGetField<int>(LocalBridgeClazz, "STAGED_SESSION_NO_ERROR"); _STAGED_SESSION_NO_ERRORReady = true; } return _STAGED_SESSION_NO_ERRORContent; } }
            private static int _STAGED_SESSION_NO_ERRORContent = default;
            private static bool _STAGED_SESSION_NO_ERRORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#STAGED_SESSION_UNKNOWN"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int STAGED_SESSION_UNKNOWN { get { if (!_STAGED_SESSION_UNKNOWNReady) { _STAGED_SESSION_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "STAGED_SESSION_UNKNOWN"); _STAGED_SESSION_UNKNOWNReady = true; } return _STAGED_SESSION_UNKNOWNContent; } }
            private static int _STAGED_SESSION_UNKNOWNContent = default;
            private static bool _STAGED_SESSION_UNKNOWNReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#STAGED_SESSION_VERIFICATION_FAILED"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int STAGED_SESSION_VERIFICATION_FAILED { get { if (!_STAGED_SESSION_VERIFICATION_FAILEDReady) { _STAGED_SESSION_VERIFICATION_FAILEDContent = SGetField<int>(LocalBridgeClazz, "STAGED_SESSION_VERIFICATION_FAILED"); _STAGED_SESSION_VERIFICATION_FAILEDReady = true; } return _STAGED_SESSION_VERIFICATION_FAILEDContent; } }
            private static int _STAGED_SESSION_VERIFICATION_FAILEDContent = default;
            private static bool _STAGED_SESSION_VERIFICATION_FAILEDReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#createDetailsIntent()"/>
            /// </summary>
            /// <returns><see cref="Android.Content.Intent"/></returns>
            public Android.Content.Intent CreateDetailsIntent()
            {
                return IExecuteWithSignature<Android.Content.Intent>("createDetailsIntent", "()Landroid/content/Intent;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getAppIcon()"/>
            /// </summary>
            /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
            public Android.Graphics.Bitmap GetAppIcon()
            {
                return IExecuteWithSignature<Android.Graphics.Bitmap>("getAppIcon", "()Landroid/graphics/Bitmap;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getOriginatingUri()"/>
            /// </summary>
            /// <returns><see cref="Android.Net.Uri"/></returns>
            public Android.Net.Uri GetOriginatingUri()
            {
                return IExecuteWithSignature<Android.Net.Uri>("getOriginatingUri", "()Landroid/net/Uri;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getReferrerUri()"/>
            /// </summary>
            /// <returns><see cref="Android.Net.Uri"/></returns>
            public Android.Net.Uri GetReferrerUri()
            {
                return IExecuteWithSignature<Android.Net.Uri>("getReferrerUri", "()Landroid/net/Uri;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getUser()"/>
            /// </summary>
            /// <returns><see cref="Android.Os.UserHandle"/></returns>
            public Android.Os.UserHandle GetUser()
            {
                return IExecuteWithSignature<Android.Os.UserHandle>("getUser", "()Landroid/os/UserHandle;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getDontKillApp()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool GetDontKillApp()
            {
                return IExecuteWithSignature<bool>("getDontKillApp", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#hasParentSessionId()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool HasParentSessionId()
            {
                return IExecuteWithSignature<bool>("hasParentSessionId", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#isActive()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsActive()
            {
                return IExecuteWithSignature<bool>("isActive", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#isApplicationEnabledSettingPersistent()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsApplicationEnabledSettingPersistent()
            {
                return IExecuteWithSignature<bool>("isApplicationEnabledSettingPersistent", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#isCommitted()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsCommitted()
            {
                return IExecuteWithSignature<bool>("isCommitted", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#isMultiPackage()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsMultiPackage()
            {
                return IExecuteWithSignature<bool>("isMultiPackage", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#isPreApprovalRequested()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsPreApprovalRequested()
            {
                return IExecuteWithSignature<bool>("isPreApprovalRequested", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#isRequestUpdateOwnership()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsRequestUpdateOwnership()
            {
                return IExecuteWithSignature<bool>("isRequestUpdateOwnership", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#isSealed()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsSealed()
            {
                return IExecuteWithSignature<bool>("isSealed", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#isStaged()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsStaged()
            {
                return IExecuteWithSignature<bool>("isStaged", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#isStagedSessionActive()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsStagedSessionActive()
            {
                return IExecuteWithSignature<bool>("isStagedSessionActive", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#isStagedSessionApplied()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsStagedSessionApplied()
            {
                return IExecuteWithSignature<bool>("isStagedSessionApplied", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#isStagedSessionFailed()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsStagedSessionFailed()
            {
                return IExecuteWithSignature<bool>("isStagedSessionFailed", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#isStagedSessionReady()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsStagedSessionReady()
            {
                return IExecuteWithSignature<bool>("isStagedSessionReady", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getProgress()"/>
            /// </summary>
            /// <returns><see cref="float"/></returns>
            public float GetProgress()
            {
                return IExecuteWithSignature<float>("getProgress", "()F");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#describeContents()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int DescribeContents()
            {
                return IExecuteWithSignature<int>("describeContents", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getInstallerUid()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetInstallerUid()
            {
                return IExecuteWithSignature<int>("getInstallerUid", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getInstallLocation()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetInstallLocation()
            {
                return IExecuteWithSignature<int>("getInstallLocation", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getInstallReason()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetInstallReason()
            {
                return IExecuteWithSignature<int>("getInstallReason", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getMode()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetMode()
            {
                return IExecuteWithSignature<int>("getMode", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getOriginatingUid()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetOriginatingUid()
            {
                return IExecuteWithSignature<int>("getOriginatingUid", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getPackageSource()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetPackageSource()
            {
                return IExecuteWithSignature<int>("getPackageSource", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getParentSessionId()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetParentSessionId()
            {
                return IExecuteWithSignature<int>("getParentSessionId", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getRequireUserAction()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetRequireUserAction()
            {
                return IExecuteWithSignature<int>("getRequireUserAction", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getSessionId()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetSessionId()
            {
                return IExecuteWithSignature<int>("getSessionId", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getStagedSessionErrorCode()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetStagedSessionErrorCode()
            {
                return IExecuteWithSignature<int>("getStagedSessionErrorCode", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getChildSessionIds()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int[] GetChildSessionIds()
            {
                return IExecuteWithSignatureArray<int>("getChildSessionIds", "()[I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getAppLabel()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.CharSequence"/></returns>
            public Java.Lang.CharSequence GetAppLabel()
            {
                return IExecuteWithSignature<Java.Lang.CharSequence>("getAppLabel", "()Ljava/lang/CharSequence;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getAppPackageName()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetAppPackageName()
            {
                return IExecuteWithSignature<Java.Lang.String>("getAppPackageName", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getInstallerAttributionTag()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetInstallerAttributionTag()
            {
                return IExecuteWithSignature<Java.Lang.String>("getInstallerAttributionTag", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getInstallerPackageName()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetInstallerPackageName()
            {
                return IExecuteWithSignature<Java.Lang.String>("getInstallerPackageName", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getStagedSessionErrorMessage()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetStagedSessionErrorMessage()
            {
                return IExecuteWithSignature<Java.Lang.String>("getStagedSessionErrorMessage", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getCreatedMillis()"/>
            /// </summary>
            /// <returns><see cref="long"/></returns>
            public long GetCreatedMillis()
            {
                return IExecuteWithSignature<long>("getCreatedMillis", "()J");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getSize()"/>
            /// </summary>
            /// <returns><see cref="long"/></returns>
            public long GetSize()
            {
                return IExecuteWithSignature<long>("getSize", "()J");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getUpdatedMillis()"/>
            /// </summary>
            /// <returns><see cref="long"/></returns>
            public long GetUpdatedMillis()
            {
                return IExecuteWithSignature<long>("getUpdatedMillis", "()J");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#writeToParcel(android.os.Parcel,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
            {
                IExecute("writeToParcel", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region SessionParams
        public partial class SessionParams
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionParams.html#%3Cinit%3E(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public SessionParams(int arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionParams.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionParams.html#MODE_FULL_INSTALL"/>
            /// </summary>
            public static int MODE_FULL_INSTALL { get { if (!_MODE_FULL_INSTALLReady) { _MODE_FULL_INSTALLContent = SGetField<int>(LocalBridgeClazz, "MODE_FULL_INSTALL"); _MODE_FULL_INSTALLReady = true; } return _MODE_FULL_INSTALLContent; } }
            private static int _MODE_FULL_INSTALLContent = default;
            private static bool _MODE_FULL_INSTALLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionParams.html#MODE_INHERIT_EXISTING"/>
            /// </summary>
            public static int MODE_INHERIT_EXISTING { get { if (!_MODE_INHERIT_EXISTINGReady) { _MODE_INHERIT_EXISTINGContent = SGetField<int>(LocalBridgeClazz, "MODE_INHERIT_EXISTING"); _MODE_INHERIT_EXISTINGReady = true; } return _MODE_INHERIT_EXISTINGContent; } }
            private static int _MODE_INHERIT_EXISTINGContent = default;
            private static bool _MODE_INHERIT_EXISTINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionParams.html#PERMISSION_STATE_DEFAULT"/>
            /// </summary>
            public static int PERMISSION_STATE_DEFAULT { get { if (!_PERMISSION_STATE_DEFAULTReady) { _PERMISSION_STATE_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "PERMISSION_STATE_DEFAULT"); _PERMISSION_STATE_DEFAULTReady = true; } return _PERMISSION_STATE_DEFAULTContent; } }
            private static int _PERMISSION_STATE_DEFAULTContent = default;
            private static bool _PERMISSION_STATE_DEFAULTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionParams.html#PERMISSION_STATE_DENIED"/>
            /// </summary>
            public static int PERMISSION_STATE_DENIED { get { if (!_PERMISSION_STATE_DENIEDReady) { _PERMISSION_STATE_DENIEDContent = SGetField<int>(LocalBridgeClazz, "PERMISSION_STATE_DENIED"); _PERMISSION_STATE_DENIEDReady = true; } return _PERMISSION_STATE_DENIEDContent; } }
            private static int _PERMISSION_STATE_DENIEDContent = default;
            private static bool _PERMISSION_STATE_DENIEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionParams.html#PERMISSION_STATE_GRANTED"/>
            /// </summary>
            public static int PERMISSION_STATE_GRANTED { get { if (!_PERMISSION_STATE_GRANTEDReady) { _PERMISSION_STATE_GRANTEDContent = SGetField<int>(LocalBridgeClazz, "PERMISSION_STATE_GRANTED"); _PERMISSION_STATE_GRANTEDReady = true; } return _PERMISSION_STATE_GRANTEDContent; } }
            private static int _PERMISSION_STATE_GRANTEDContent = default;
            private static bool _PERMISSION_STATE_GRANTEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionParams.html#USER_ACTION_NOT_REQUIRED"/>
            /// </summary>
            public static int USER_ACTION_NOT_REQUIRED { get { if (!_USER_ACTION_NOT_REQUIREDReady) { _USER_ACTION_NOT_REQUIREDContent = SGetField<int>(LocalBridgeClazz, "USER_ACTION_NOT_REQUIRED"); _USER_ACTION_NOT_REQUIREDReady = true; } return _USER_ACTION_NOT_REQUIREDContent; } }
            private static int _USER_ACTION_NOT_REQUIREDContent = default;
            private static bool _USER_ACTION_NOT_REQUIREDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionParams.html#USER_ACTION_REQUIRED"/>
            /// </summary>
            public static int USER_ACTION_REQUIRED { get { if (!_USER_ACTION_REQUIREDReady) { _USER_ACTION_REQUIREDContent = SGetField<int>(LocalBridgeClazz, "USER_ACTION_REQUIRED"); _USER_ACTION_REQUIREDReady = true; } return _USER_ACTION_REQUIREDContent; } }
            private static int _USER_ACTION_REQUIREDContent = default;
            private static bool _USER_ACTION_REQUIREDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionParams.html#USER_ACTION_UNSPECIFIED"/>
            /// </summary>
            public static int USER_ACTION_UNSPECIFIED { get { if (!_USER_ACTION_UNSPECIFIEDReady) { _USER_ACTION_UNSPECIFIEDContent = SGetField<int>(LocalBridgeClazz, "USER_ACTION_UNSPECIFIED"); _USER_ACTION_UNSPECIFIEDReady = true; } return _USER_ACTION_UNSPECIFIEDContent; } }
            private static int _USER_ACTION_UNSPECIFIEDContent = default;
            private static bool _USER_ACTION_UNSPECIFIEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionParams.html#RESTRICTED_PERMISSIONS_ALL"/>
            /// </summary>
            public static Java.Util.Set RESTRICTED_PERMISSIONS_ALL { get { if (!_RESTRICTED_PERMISSIONS_ALLReady) { _RESTRICTED_PERMISSIONS_ALLContent = SGetField<Java.Util.Set>(LocalBridgeClazz, "RESTRICTED_PERMISSIONS_ALL"); _RESTRICTED_PERMISSIONS_ALLReady = true; } return _RESTRICTED_PERMISSIONS_ALLContent; } }
            private static Java.Util.Set _RESTRICTED_PERMISSIONS_ALLContent = default;
            private static bool _RESTRICTED_PERMISSIONS_ALLReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionParams.html#setPermissionState(java.lang.String,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <returns><see cref="Android.Content.Pm.PackageInstaller.SessionParams"/></returns>
            public Android.Content.Pm.PackageInstaller.SessionParams SetPermissionState(Java.Lang.String arg0, int arg1)
            {
                return IExecute<Android.Content.Pm.PackageInstaller.SessionParams>("setPermissionState", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionParams.html#describeContents()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int DescribeContents()
            {
                return IExecuteWithSignature<int>("describeContents", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionParams.html#setAppIcon(android.graphics.Bitmap)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.Bitmap"/></param>
            public void SetAppIcon(Android.Graphics.Bitmap arg0)
            {
                IExecuteWithSignature("setAppIcon", "(Landroid/graphics/Bitmap;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionParams.html#setAppLabel(java.lang.CharSequence)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
            public void SetAppLabel(Java.Lang.CharSequence arg0)
            {
                IExecuteWithSignature("setAppLabel", "(Ljava/lang/CharSequence;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionParams.html#setApplicationEnabledSettingPersistent()"/>
            /// </summary>
            public void SetApplicationEnabledSettingPersistent()
            {
                IExecuteWithSignature("setApplicationEnabledSettingPersistent", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionParams.html#setAppPackageName(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            public void SetAppPackageName(Java.Lang.String arg0)
            {
                IExecuteWithSignature("setAppPackageName", "(Ljava/lang/String;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionParams.html#setAutoRevokePermissionsMode(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            [global::System.Obsolete()]
            public void SetAutoRevokePermissionsMode(bool arg0)
            {
                IExecuteWithSignature("setAutoRevokePermissionsMode", "(Z)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionParams.html#setDontKillApp(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            public void SetDontKillApp(bool arg0)
            {
                IExecuteWithSignature("setDontKillApp", "(Z)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionParams.html#setInstallerPackageName(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            public void SetInstallerPackageName(Java.Lang.String arg0)
            {
                IExecuteWithSignature("setInstallerPackageName", "(Ljava/lang/String;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionParams.html#setInstallLocation(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void SetInstallLocation(int arg0)
            {
                IExecuteWithSignature("setInstallLocation", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionParams.html#setInstallReason(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void SetInstallReason(int arg0)
            {
                IExecuteWithSignature("setInstallReason", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionParams.html#setInstallScenario(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void SetInstallScenario(int arg0)
            {
                IExecuteWithSignature("setInstallScenario", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionParams.html#setMultiPackage()"/>
            /// </summary>
            public void SetMultiPackage()
            {
                IExecuteWithSignature("setMultiPackage", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionParams.html#setOriginatingUid(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void SetOriginatingUid(int arg0)
            {
                IExecuteWithSignature("setOriginatingUid", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionParams.html#setOriginatingUri(android.net.Uri)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
            public void SetOriginatingUri(Android.Net.Uri arg0)
            {
                IExecuteWithSignature("setOriginatingUri", "(Landroid/net/Uri;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionParams.html#setPackageSource(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void SetPackageSource(int arg0)
            {
                IExecuteWithSignature("setPackageSource", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionParams.html#setReferrerUri(android.net.Uri)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
            public void SetReferrerUri(Android.Net.Uri arg0)
            {
                IExecuteWithSignature("setReferrerUri", "(Landroid/net/Uri;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionParams.html#setRequestUpdateOwnership(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            public void SetRequestUpdateOwnership(bool arg0)
            {
                IExecuteWithSignature("setRequestUpdateOwnership", "(Z)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionParams.html#setRequireUserAction(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void SetRequireUserAction(int arg0)
            {
                IExecuteWithSignature("setRequireUserAction", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionParams.html#setSize(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            public void SetSize(long arg0)
            {
                IExecuteWithSignature("setSize", "(J)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionParams.html#setWhitelistedRestrictedPermissions(java.util.Set)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.Set"/></param>
            public void SetWhitelistedRestrictedPermissions(Java.Util.Set<Java.Lang.String> arg0)
            {
                IExecuteWithSignature("setWhitelistedRestrictedPermissions", "(Ljava/util/Set;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionParams.html#writeToParcel(android.os.Parcel,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
            {
                IExecute("writeToParcel", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
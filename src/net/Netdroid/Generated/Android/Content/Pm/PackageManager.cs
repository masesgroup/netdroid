/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Content.Pm
{
    #region PackageManager
    public partial class PackageManager
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#CERT_INPUT_RAW_X509"/>
        /// </summary>
        public static int CERT_INPUT_RAW_X509 { get { if (!_CERT_INPUT_RAW_X509Ready) { _CERT_INPUT_RAW_X509Content = SGetField<int>(LocalBridgeClazz, "CERT_INPUT_RAW_X509"); _CERT_INPUT_RAW_X509Ready = true; } return _CERT_INPUT_RAW_X509Content; } }
        private static int _CERT_INPUT_RAW_X509Content = default;
        private static bool _CERT_INPUT_RAW_X509Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#CERT_INPUT_SHA256"/>
        /// </summary>
        public static int CERT_INPUT_SHA256 { get { if (!_CERT_INPUT_SHA256Ready) { _CERT_INPUT_SHA256Content = SGetField<int>(LocalBridgeClazz, "CERT_INPUT_SHA256"); _CERT_INPUT_SHA256Ready = true; } return _CERT_INPUT_SHA256Content; } }
        private static int _CERT_INPUT_SHA256Content = default;
        private static bool _CERT_INPUT_SHA256Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#COMPONENT_ENABLED_STATE_DEFAULT"/>
        /// </summary>
        public static int COMPONENT_ENABLED_STATE_DEFAULT { get { if (!_COMPONENT_ENABLED_STATE_DEFAULTReady) { _COMPONENT_ENABLED_STATE_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "COMPONENT_ENABLED_STATE_DEFAULT"); _COMPONENT_ENABLED_STATE_DEFAULTReady = true; } return _COMPONENT_ENABLED_STATE_DEFAULTContent; } }
        private static int _COMPONENT_ENABLED_STATE_DEFAULTContent = default;
        private static bool _COMPONENT_ENABLED_STATE_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#COMPONENT_ENABLED_STATE_DISABLED"/>
        /// </summary>
        public static int COMPONENT_ENABLED_STATE_DISABLED { get { if (!_COMPONENT_ENABLED_STATE_DISABLEDReady) { _COMPONENT_ENABLED_STATE_DISABLEDContent = SGetField<int>(LocalBridgeClazz, "COMPONENT_ENABLED_STATE_DISABLED"); _COMPONENT_ENABLED_STATE_DISABLEDReady = true; } return _COMPONENT_ENABLED_STATE_DISABLEDContent; } }
        private static int _COMPONENT_ENABLED_STATE_DISABLEDContent = default;
        private static bool _COMPONENT_ENABLED_STATE_DISABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED"/>
        /// </summary>
        public static int COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED { get { if (!_COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USEDReady) { _COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USEDContent = SGetField<int>(LocalBridgeClazz, "COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED"); _COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USEDReady = true; } return _COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USEDContent; } }
        private static int _COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USEDContent = default;
        private static bool _COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#COMPONENT_ENABLED_STATE_DISABLED_USER"/>
        /// </summary>
        public static int COMPONENT_ENABLED_STATE_DISABLED_USER { get { if (!_COMPONENT_ENABLED_STATE_DISABLED_USERReady) { _COMPONENT_ENABLED_STATE_DISABLED_USERContent = SGetField<int>(LocalBridgeClazz, "COMPONENT_ENABLED_STATE_DISABLED_USER"); _COMPONENT_ENABLED_STATE_DISABLED_USERReady = true; } return _COMPONENT_ENABLED_STATE_DISABLED_USERContent; } }
        private static int _COMPONENT_ENABLED_STATE_DISABLED_USERContent = default;
        private static bool _COMPONENT_ENABLED_STATE_DISABLED_USERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#COMPONENT_ENABLED_STATE_ENABLED"/>
        /// </summary>
        public static int COMPONENT_ENABLED_STATE_ENABLED { get { if (!_COMPONENT_ENABLED_STATE_ENABLEDReady) { _COMPONENT_ENABLED_STATE_ENABLEDContent = SGetField<int>(LocalBridgeClazz, "COMPONENT_ENABLED_STATE_ENABLED"); _COMPONENT_ENABLED_STATE_ENABLEDReady = true; } return _COMPONENT_ENABLED_STATE_ENABLEDContent; } }
        private static int _COMPONENT_ENABLED_STATE_ENABLEDContent = default;
        private static bool _COMPONENT_ENABLED_STATE_ENABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#DONT_KILL_APP"/>
        /// </summary>
        public static int DONT_KILL_APP { get { if (!_DONT_KILL_APPReady) { _DONT_KILL_APPContent = SGetField<int>(LocalBridgeClazz, "DONT_KILL_APP"); _DONT_KILL_APPReady = true; } return _DONT_KILL_APPContent; } }
        private static int _DONT_KILL_APPContent = default;
        private static bool _DONT_KILL_APPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FLAG_PERMISSION_WHITELIST_INSTALLER"/>
        /// </summary>
        public static int FLAG_PERMISSION_WHITELIST_INSTALLER { get { if (!_FLAG_PERMISSION_WHITELIST_INSTALLERReady) { _FLAG_PERMISSION_WHITELIST_INSTALLERContent = SGetField<int>(LocalBridgeClazz, "FLAG_PERMISSION_WHITELIST_INSTALLER"); _FLAG_PERMISSION_WHITELIST_INSTALLERReady = true; } return _FLAG_PERMISSION_WHITELIST_INSTALLERContent; } }
        private static int _FLAG_PERMISSION_WHITELIST_INSTALLERContent = default;
        private static bool _FLAG_PERMISSION_WHITELIST_INSTALLERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FLAG_PERMISSION_WHITELIST_SYSTEM"/>
        /// </summary>
        public static int FLAG_PERMISSION_WHITELIST_SYSTEM { get { if (!_FLAG_PERMISSION_WHITELIST_SYSTEMReady) { _FLAG_PERMISSION_WHITELIST_SYSTEMContent = SGetField<int>(LocalBridgeClazz, "FLAG_PERMISSION_WHITELIST_SYSTEM"); _FLAG_PERMISSION_WHITELIST_SYSTEMReady = true; } return _FLAG_PERMISSION_WHITELIST_SYSTEMContent; } }
        private static int _FLAG_PERMISSION_WHITELIST_SYSTEMContent = default;
        private static bool _FLAG_PERMISSION_WHITELIST_SYSTEMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FLAG_PERMISSION_WHITELIST_UPGRADE"/>
        /// </summary>
        public static int FLAG_PERMISSION_WHITELIST_UPGRADE { get { if (!_FLAG_PERMISSION_WHITELIST_UPGRADEReady) { _FLAG_PERMISSION_WHITELIST_UPGRADEContent = SGetField<int>(LocalBridgeClazz, "FLAG_PERMISSION_WHITELIST_UPGRADE"); _FLAG_PERMISSION_WHITELIST_UPGRADEReady = true; } return _FLAG_PERMISSION_WHITELIST_UPGRADEContent; } }
        private static int _FLAG_PERMISSION_WHITELIST_UPGRADEContent = default;
        private static bool _FLAG_PERMISSION_WHITELIST_UPGRADEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#GET_ACTIVITIES"/>
        /// </summary>
        public static int GET_ACTIVITIES { get { if (!_GET_ACTIVITIESReady) { _GET_ACTIVITIESContent = SGetField<int>(LocalBridgeClazz, "GET_ACTIVITIES"); _GET_ACTIVITIESReady = true; } return _GET_ACTIVITIESContent; } }
        private static int _GET_ACTIVITIESContent = default;
        private static bool _GET_ACTIVITIESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#GET_ATTRIBUTIONS"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int GET_ATTRIBUTIONS { get { if (!_GET_ATTRIBUTIONSReady) { _GET_ATTRIBUTIONSContent = SGetField<int>(LocalBridgeClazz, "GET_ATTRIBUTIONS"); _GET_ATTRIBUTIONSReady = true; } return _GET_ATTRIBUTIONSContent; } }
        private static int _GET_ATTRIBUTIONSContent = default;
        private static bool _GET_ATTRIBUTIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#GET_CONFIGURATIONS"/>
        /// </summary>
        public static int GET_CONFIGURATIONS { get { if (!_GET_CONFIGURATIONSReady) { _GET_CONFIGURATIONSContent = SGetField<int>(LocalBridgeClazz, "GET_CONFIGURATIONS"); _GET_CONFIGURATIONSReady = true; } return _GET_CONFIGURATIONSContent; } }
        private static int _GET_CONFIGURATIONSContent = default;
        private static bool _GET_CONFIGURATIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#GET_DISABLED_COMPONENTS"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int GET_DISABLED_COMPONENTS { get { if (!_GET_DISABLED_COMPONENTSReady) { _GET_DISABLED_COMPONENTSContent = SGetField<int>(LocalBridgeClazz, "GET_DISABLED_COMPONENTS"); _GET_DISABLED_COMPONENTSReady = true; } return _GET_DISABLED_COMPONENTSContent; } }
        private static int _GET_DISABLED_COMPONENTSContent = default;
        private static bool _GET_DISABLED_COMPONENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#GET_DISABLED_UNTIL_USED_COMPONENTS"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int GET_DISABLED_UNTIL_USED_COMPONENTS { get { if (!_GET_DISABLED_UNTIL_USED_COMPONENTSReady) { _GET_DISABLED_UNTIL_USED_COMPONENTSContent = SGetField<int>(LocalBridgeClazz, "GET_DISABLED_UNTIL_USED_COMPONENTS"); _GET_DISABLED_UNTIL_USED_COMPONENTSReady = true; } return _GET_DISABLED_UNTIL_USED_COMPONENTSContent; } }
        private static int _GET_DISABLED_UNTIL_USED_COMPONENTSContent = default;
        private static bool _GET_DISABLED_UNTIL_USED_COMPONENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#GET_GIDS"/>
        /// </summary>
        public static int GET_GIDS { get { if (!_GET_GIDSReady) { _GET_GIDSContent = SGetField<int>(LocalBridgeClazz, "GET_GIDS"); _GET_GIDSReady = true; } return _GET_GIDSContent; } }
        private static int _GET_GIDSContent = default;
        private static bool _GET_GIDSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#GET_INSTRUMENTATION"/>
        /// </summary>
        public static int GET_INSTRUMENTATION { get { if (!_GET_INSTRUMENTATIONReady) { _GET_INSTRUMENTATIONContent = SGetField<int>(LocalBridgeClazz, "GET_INSTRUMENTATION"); _GET_INSTRUMENTATIONReady = true; } return _GET_INSTRUMENTATIONContent; } }
        private static int _GET_INSTRUMENTATIONContent = default;
        private static bool _GET_INSTRUMENTATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#GET_INTENT_FILTERS"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int GET_INTENT_FILTERS { get { if (!_GET_INTENT_FILTERSReady) { _GET_INTENT_FILTERSContent = SGetField<int>(LocalBridgeClazz, "GET_INTENT_FILTERS"); _GET_INTENT_FILTERSReady = true; } return _GET_INTENT_FILTERSContent; } }
        private static int _GET_INTENT_FILTERSContent = default;
        private static bool _GET_INTENT_FILTERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#GET_META_DATA"/>
        /// </summary>
        public static int GET_META_DATA { get { if (!_GET_META_DATAReady) { _GET_META_DATAContent = SGetField<int>(LocalBridgeClazz, "GET_META_DATA"); _GET_META_DATAReady = true; } return _GET_META_DATAContent; } }
        private static int _GET_META_DATAContent = default;
        private static bool _GET_META_DATAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#GET_PERMISSIONS"/>
        /// </summary>
        public static int GET_PERMISSIONS { get { if (!_GET_PERMISSIONSReady) { _GET_PERMISSIONSContent = SGetField<int>(LocalBridgeClazz, "GET_PERMISSIONS"); _GET_PERMISSIONSReady = true; } return _GET_PERMISSIONSContent; } }
        private static int _GET_PERMISSIONSContent = default;
        private static bool _GET_PERMISSIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#GET_PROVIDERS"/>
        /// </summary>
        public static int GET_PROVIDERS { get { if (!_GET_PROVIDERSReady) { _GET_PROVIDERSContent = SGetField<int>(LocalBridgeClazz, "GET_PROVIDERS"); _GET_PROVIDERSReady = true; } return _GET_PROVIDERSContent; } }
        private static int _GET_PROVIDERSContent = default;
        private static bool _GET_PROVIDERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#GET_RECEIVERS"/>
        /// </summary>
        public static int GET_RECEIVERS { get { if (!_GET_RECEIVERSReady) { _GET_RECEIVERSContent = SGetField<int>(LocalBridgeClazz, "GET_RECEIVERS"); _GET_RECEIVERSReady = true; } return _GET_RECEIVERSContent; } }
        private static int _GET_RECEIVERSContent = default;
        private static bool _GET_RECEIVERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#GET_RESOLVED_FILTER"/>
        /// </summary>
        public static int GET_RESOLVED_FILTER { get { if (!_GET_RESOLVED_FILTERReady) { _GET_RESOLVED_FILTERContent = SGetField<int>(LocalBridgeClazz, "GET_RESOLVED_FILTER"); _GET_RESOLVED_FILTERReady = true; } return _GET_RESOLVED_FILTERContent; } }
        private static int _GET_RESOLVED_FILTERContent = default;
        private static bool _GET_RESOLVED_FILTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#GET_SERVICES"/>
        /// </summary>
        public static int GET_SERVICES { get { if (!_GET_SERVICESReady) { _GET_SERVICESContent = SGetField<int>(LocalBridgeClazz, "GET_SERVICES"); _GET_SERVICESReady = true; } return _GET_SERVICESContent; } }
        private static int _GET_SERVICESContent = default;
        private static bool _GET_SERVICESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#GET_SHARED_LIBRARY_FILES"/>
        /// </summary>
        public static int GET_SHARED_LIBRARY_FILES { get { if (!_GET_SHARED_LIBRARY_FILESReady) { _GET_SHARED_LIBRARY_FILESContent = SGetField<int>(LocalBridgeClazz, "GET_SHARED_LIBRARY_FILES"); _GET_SHARED_LIBRARY_FILESReady = true; } return _GET_SHARED_LIBRARY_FILESContent; } }
        private static int _GET_SHARED_LIBRARY_FILESContent = default;
        private static bool _GET_SHARED_LIBRARY_FILESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#GET_SIGNATURES"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int GET_SIGNATURES { get { if (!_GET_SIGNATURESReady) { _GET_SIGNATURESContent = SGetField<int>(LocalBridgeClazz, "GET_SIGNATURES"); _GET_SIGNATURESReady = true; } return _GET_SIGNATURESContent; } }
        private static int _GET_SIGNATURESContent = default;
        private static bool _GET_SIGNATURESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#GET_SIGNING_CERTIFICATES"/>
        /// </summary>
        public static int GET_SIGNING_CERTIFICATES { get { if (!_GET_SIGNING_CERTIFICATESReady) { _GET_SIGNING_CERTIFICATESContent = SGetField<int>(LocalBridgeClazz, "GET_SIGNING_CERTIFICATES"); _GET_SIGNING_CERTIFICATESReady = true; } return _GET_SIGNING_CERTIFICATESContent; } }
        private static int _GET_SIGNING_CERTIFICATESContent = default;
        private static bool _GET_SIGNING_CERTIFICATESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#GET_UNINSTALLED_PACKAGES"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int GET_UNINSTALLED_PACKAGES { get { if (!_GET_UNINSTALLED_PACKAGESReady) { _GET_UNINSTALLED_PACKAGESContent = SGetField<int>(LocalBridgeClazz, "GET_UNINSTALLED_PACKAGES"); _GET_UNINSTALLED_PACKAGESReady = true; } return _GET_UNINSTALLED_PACKAGESContent; } }
        private static int _GET_UNINSTALLED_PACKAGESContent = default;
        private static bool _GET_UNINSTALLED_PACKAGESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#GET_URI_PERMISSION_PATTERNS"/>
        /// </summary>
        public static int GET_URI_PERMISSION_PATTERNS { get { if (!_GET_URI_PERMISSION_PATTERNSReady) { _GET_URI_PERMISSION_PATTERNSContent = SGetField<int>(LocalBridgeClazz, "GET_URI_PERMISSION_PATTERNS"); _GET_URI_PERMISSION_PATTERNSReady = true; } return _GET_URI_PERMISSION_PATTERNSContent; } }
        private static int _GET_URI_PERMISSION_PATTERNSContent = default;
        private static bool _GET_URI_PERMISSION_PATTERNSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#INSTALL_REASON_DEVICE_RESTORE"/>
        /// </summary>
        public static int INSTALL_REASON_DEVICE_RESTORE { get { if (!_INSTALL_REASON_DEVICE_RESTOREReady) { _INSTALL_REASON_DEVICE_RESTOREContent = SGetField<int>(LocalBridgeClazz, "INSTALL_REASON_DEVICE_RESTORE"); _INSTALL_REASON_DEVICE_RESTOREReady = true; } return _INSTALL_REASON_DEVICE_RESTOREContent; } }
        private static int _INSTALL_REASON_DEVICE_RESTOREContent = default;
        private static bool _INSTALL_REASON_DEVICE_RESTOREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#INSTALL_REASON_DEVICE_SETUP"/>
        /// </summary>
        public static int INSTALL_REASON_DEVICE_SETUP { get { if (!_INSTALL_REASON_DEVICE_SETUPReady) { _INSTALL_REASON_DEVICE_SETUPContent = SGetField<int>(LocalBridgeClazz, "INSTALL_REASON_DEVICE_SETUP"); _INSTALL_REASON_DEVICE_SETUPReady = true; } return _INSTALL_REASON_DEVICE_SETUPContent; } }
        private static int _INSTALL_REASON_DEVICE_SETUPContent = default;
        private static bool _INSTALL_REASON_DEVICE_SETUPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#INSTALL_REASON_POLICY"/>
        /// </summary>
        public static int INSTALL_REASON_POLICY { get { if (!_INSTALL_REASON_POLICYReady) { _INSTALL_REASON_POLICYContent = SGetField<int>(LocalBridgeClazz, "INSTALL_REASON_POLICY"); _INSTALL_REASON_POLICYReady = true; } return _INSTALL_REASON_POLICYContent; } }
        private static int _INSTALL_REASON_POLICYContent = default;
        private static bool _INSTALL_REASON_POLICYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#INSTALL_REASON_UNKNOWN"/>
        /// </summary>
        public static int INSTALL_REASON_UNKNOWN { get { if (!_INSTALL_REASON_UNKNOWNReady) { _INSTALL_REASON_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "INSTALL_REASON_UNKNOWN"); _INSTALL_REASON_UNKNOWNReady = true; } return _INSTALL_REASON_UNKNOWNContent; } }
        private static int _INSTALL_REASON_UNKNOWNContent = default;
        private static bool _INSTALL_REASON_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#INSTALL_REASON_USER"/>
        /// </summary>
        public static int INSTALL_REASON_USER { get { if (!_INSTALL_REASON_USERReady) { _INSTALL_REASON_USERContent = SGetField<int>(LocalBridgeClazz, "INSTALL_REASON_USER"); _INSTALL_REASON_USERReady = true; } return _INSTALL_REASON_USERContent; } }
        private static int _INSTALL_REASON_USERContent = default;
        private static bool _INSTALL_REASON_USERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#INSTALL_SCENARIO_BULK"/>
        /// </summary>
        public static int INSTALL_SCENARIO_BULK { get { if (!_INSTALL_SCENARIO_BULKReady) { _INSTALL_SCENARIO_BULKContent = SGetField<int>(LocalBridgeClazz, "INSTALL_SCENARIO_BULK"); _INSTALL_SCENARIO_BULKReady = true; } return _INSTALL_SCENARIO_BULKContent; } }
        private static int _INSTALL_SCENARIO_BULKContent = default;
        private static bool _INSTALL_SCENARIO_BULKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#INSTALL_SCENARIO_BULK_SECONDARY"/>
        /// </summary>
        public static int INSTALL_SCENARIO_BULK_SECONDARY { get { if (!_INSTALL_SCENARIO_BULK_SECONDARYReady) { _INSTALL_SCENARIO_BULK_SECONDARYContent = SGetField<int>(LocalBridgeClazz, "INSTALL_SCENARIO_BULK_SECONDARY"); _INSTALL_SCENARIO_BULK_SECONDARYReady = true; } return _INSTALL_SCENARIO_BULK_SECONDARYContent; } }
        private static int _INSTALL_SCENARIO_BULK_SECONDARYContent = default;
        private static bool _INSTALL_SCENARIO_BULK_SECONDARYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#INSTALL_SCENARIO_DEFAULT"/>
        /// </summary>
        public static int INSTALL_SCENARIO_DEFAULT { get { if (!_INSTALL_SCENARIO_DEFAULTReady) { _INSTALL_SCENARIO_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "INSTALL_SCENARIO_DEFAULT"); _INSTALL_SCENARIO_DEFAULTReady = true; } return _INSTALL_SCENARIO_DEFAULTContent; } }
        private static int _INSTALL_SCENARIO_DEFAULTContent = default;
        private static bool _INSTALL_SCENARIO_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#INSTALL_SCENARIO_FAST"/>
        /// </summary>
        public static int INSTALL_SCENARIO_FAST { get { if (!_INSTALL_SCENARIO_FASTReady) { _INSTALL_SCENARIO_FASTContent = SGetField<int>(LocalBridgeClazz, "INSTALL_SCENARIO_FAST"); _INSTALL_SCENARIO_FASTReady = true; } return _INSTALL_SCENARIO_FASTContent; } }
        private static int _INSTALL_SCENARIO_FASTContent = default;
        private static bool _INSTALL_SCENARIO_FASTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#MATCH_ALL"/>
        /// </summary>
        public static int MATCH_ALL { get { if (!_MATCH_ALLReady) { _MATCH_ALLContent = SGetField<int>(LocalBridgeClazz, "MATCH_ALL"); _MATCH_ALLReady = true; } return _MATCH_ALLContent; } }
        private static int _MATCH_ALLContent = default;
        private static bool _MATCH_ALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#MATCH_APEX"/>
        /// </summary>
        public static int MATCH_APEX { get { if (!_MATCH_APEXReady) { _MATCH_APEXContent = SGetField<int>(LocalBridgeClazz, "MATCH_APEX"); _MATCH_APEXReady = true; } return _MATCH_APEXContent; } }
        private static int _MATCH_APEXContent = default;
        private static bool _MATCH_APEXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#MATCH_DEFAULT_ONLY"/>
        /// </summary>
        public static int MATCH_DEFAULT_ONLY { get { if (!_MATCH_DEFAULT_ONLYReady) { _MATCH_DEFAULT_ONLYContent = SGetField<int>(LocalBridgeClazz, "MATCH_DEFAULT_ONLY"); _MATCH_DEFAULT_ONLYReady = true; } return _MATCH_DEFAULT_ONLYContent; } }
        private static int _MATCH_DEFAULT_ONLYContent = default;
        private static bool _MATCH_DEFAULT_ONLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#MATCH_DIRECT_BOOT_AUTO"/>
        /// </summary>
        public static int MATCH_DIRECT_BOOT_AUTO { get { if (!_MATCH_DIRECT_BOOT_AUTOReady) { _MATCH_DIRECT_BOOT_AUTOContent = SGetField<int>(LocalBridgeClazz, "MATCH_DIRECT_BOOT_AUTO"); _MATCH_DIRECT_BOOT_AUTOReady = true; } return _MATCH_DIRECT_BOOT_AUTOContent; } }
        private static int _MATCH_DIRECT_BOOT_AUTOContent = default;
        private static bool _MATCH_DIRECT_BOOT_AUTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#MATCH_DIRECT_BOOT_AWARE"/>
        /// </summary>
        public static int MATCH_DIRECT_BOOT_AWARE { get { if (!_MATCH_DIRECT_BOOT_AWAREReady) { _MATCH_DIRECT_BOOT_AWAREContent = SGetField<int>(LocalBridgeClazz, "MATCH_DIRECT_BOOT_AWARE"); _MATCH_DIRECT_BOOT_AWAREReady = true; } return _MATCH_DIRECT_BOOT_AWAREContent; } }
        private static int _MATCH_DIRECT_BOOT_AWAREContent = default;
        private static bool _MATCH_DIRECT_BOOT_AWAREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#MATCH_DIRECT_BOOT_UNAWARE"/>
        /// </summary>
        public static int MATCH_DIRECT_BOOT_UNAWARE { get { if (!_MATCH_DIRECT_BOOT_UNAWAREReady) { _MATCH_DIRECT_BOOT_UNAWAREContent = SGetField<int>(LocalBridgeClazz, "MATCH_DIRECT_BOOT_UNAWARE"); _MATCH_DIRECT_BOOT_UNAWAREReady = true; } return _MATCH_DIRECT_BOOT_UNAWAREContent; } }
        private static int _MATCH_DIRECT_BOOT_UNAWAREContent = default;
        private static bool _MATCH_DIRECT_BOOT_UNAWAREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#MATCH_DISABLED_COMPONENTS"/>
        /// </summary>
        public static int MATCH_DISABLED_COMPONENTS { get { if (!_MATCH_DISABLED_COMPONENTSReady) { _MATCH_DISABLED_COMPONENTSContent = SGetField<int>(LocalBridgeClazz, "MATCH_DISABLED_COMPONENTS"); _MATCH_DISABLED_COMPONENTSReady = true; } return _MATCH_DISABLED_COMPONENTSContent; } }
        private static int _MATCH_DISABLED_COMPONENTSContent = default;
        private static bool _MATCH_DISABLED_COMPONENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#MATCH_DISABLED_UNTIL_USED_COMPONENTS"/>
        /// </summary>
        public static int MATCH_DISABLED_UNTIL_USED_COMPONENTS { get { if (!_MATCH_DISABLED_UNTIL_USED_COMPONENTSReady) { _MATCH_DISABLED_UNTIL_USED_COMPONENTSContent = SGetField<int>(LocalBridgeClazz, "MATCH_DISABLED_UNTIL_USED_COMPONENTS"); _MATCH_DISABLED_UNTIL_USED_COMPONENTSReady = true; } return _MATCH_DISABLED_UNTIL_USED_COMPONENTSContent; } }
        private static int _MATCH_DISABLED_UNTIL_USED_COMPONENTSContent = default;
        private static bool _MATCH_DISABLED_UNTIL_USED_COMPONENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#MATCH_SYSTEM_ONLY"/>
        /// </summary>
        public static int MATCH_SYSTEM_ONLY { get { if (!_MATCH_SYSTEM_ONLYReady) { _MATCH_SYSTEM_ONLYContent = SGetField<int>(LocalBridgeClazz, "MATCH_SYSTEM_ONLY"); _MATCH_SYSTEM_ONLYReady = true; } return _MATCH_SYSTEM_ONLYContent; } }
        private static int _MATCH_SYSTEM_ONLYContent = default;
        private static bool _MATCH_SYSTEM_ONLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#MATCH_UNINSTALLED_PACKAGES"/>
        /// </summary>
        public static int MATCH_UNINSTALLED_PACKAGES { get { if (!_MATCH_UNINSTALLED_PACKAGESReady) { _MATCH_UNINSTALLED_PACKAGESContent = SGetField<int>(LocalBridgeClazz, "MATCH_UNINSTALLED_PACKAGES"); _MATCH_UNINSTALLED_PACKAGESReady = true; } return _MATCH_UNINSTALLED_PACKAGESContent; } }
        private static int _MATCH_UNINSTALLED_PACKAGESContent = default;
        private static bool _MATCH_UNINSTALLED_PACKAGESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#PERMISSION_DENIED"/>
        /// </summary>
        public static int PERMISSION_DENIED { get { if (!_PERMISSION_DENIEDReady) { _PERMISSION_DENIEDContent = SGetField<int>(LocalBridgeClazz, "PERMISSION_DENIED"); _PERMISSION_DENIEDReady = true; } return _PERMISSION_DENIEDContent; } }
        private static int _PERMISSION_DENIEDContent = default;
        private static bool _PERMISSION_DENIEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#PERMISSION_GRANTED"/>
        /// </summary>
        public static int PERMISSION_GRANTED { get { if (!_PERMISSION_GRANTEDReady) { _PERMISSION_GRANTEDContent = SGetField<int>(LocalBridgeClazz, "PERMISSION_GRANTED"); _PERMISSION_GRANTEDReady = true; } return _PERMISSION_GRANTEDContent; } }
        private static int _PERMISSION_GRANTEDContent = default;
        private static bool _PERMISSION_GRANTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#SIGNATURE_FIRST_NOT_SIGNED"/>
        /// </summary>
        public static int SIGNATURE_FIRST_NOT_SIGNED { get { if (!_SIGNATURE_FIRST_NOT_SIGNEDReady) { _SIGNATURE_FIRST_NOT_SIGNEDContent = SGetField<int>(LocalBridgeClazz, "SIGNATURE_FIRST_NOT_SIGNED"); _SIGNATURE_FIRST_NOT_SIGNEDReady = true; } return _SIGNATURE_FIRST_NOT_SIGNEDContent; } }
        private static int _SIGNATURE_FIRST_NOT_SIGNEDContent = default;
        private static bool _SIGNATURE_FIRST_NOT_SIGNEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#SIGNATURE_MATCH"/>
        /// </summary>
        public static int SIGNATURE_MATCH { get { if (!_SIGNATURE_MATCHReady) { _SIGNATURE_MATCHContent = SGetField<int>(LocalBridgeClazz, "SIGNATURE_MATCH"); _SIGNATURE_MATCHReady = true; } return _SIGNATURE_MATCHContent; } }
        private static int _SIGNATURE_MATCHContent = default;
        private static bool _SIGNATURE_MATCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#SIGNATURE_NEITHER_SIGNED"/>
        /// </summary>
        public static int SIGNATURE_NEITHER_SIGNED { get { if (!_SIGNATURE_NEITHER_SIGNEDReady) { _SIGNATURE_NEITHER_SIGNEDContent = SGetField<int>(LocalBridgeClazz, "SIGNATURE_NEITHER_SIGNED"); _SIGNATURE_NEITHER_SIGNEDReady = true; } return _SIGNATURE_NEITHER_SIGNEDContent; } }
        private static int _SIGNATURE_NEITHER_SIGNEDContent = default;
        private static bool _SIGNATURE_NEITHER_SIGNEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#SIGNATURE_NO_MATCH"/>
        /// </summary>
        public static int SIGNATURE_NO_MATCH { get { if (!_SIGNATURE_NO_MATCHReady) { _SIGNATURE_NO_MATCHContent = SGetField<int>(LocalBridgeClazz, "SIGNATURE_NO_MATCH"); _SIGNATURE_NO_MATCHReady = true; } return _SIGNATURE_NO_MATCHContent; } }
        private static int _SIGNATURE_NO_MATCHContent = default;
        private static bool _SIGNATURE_NO_MATCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#SIGNATURE_SECOND_NOT_SIGNED"/>
        /// </summary>
        public static int SIGNATURE_SECOND_NOT_SIGNED { get { if (!_SIGNATURE_SECOND_NOT_SIGNEDReady) { _SIGNATURE_SECOND_NOT_SIGNEDContent = SGetField<int>(LocalBridgeClazz, "SIGNATURE_SECOND_NOT_SIGNED"); _SIGNATURE_SECOND_NOT_SIGNEDReady = true; } return _SIGNATURE_SECOND_NOT_SIGNEDContent; } }
        private static int _SIGNATURE_SECOND_NOT_SIGNEDContent = default;
        private static bool _SIGNATURE_SECOND_NOT_SIGNEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#SIGNATURE_UNKNOWN_PACKAGE"/>
        /// </summary>
        public static int SIGNATURE_UNKNOWN_PACKAGE { get { if (!_SIGNATURE_UNKNOWN_PACKAGEReady) { _SIGNATURE_UNKNOWN_PACKAGEContent = SGetField<int>(LocalBridgeClazz, "SIGNATURE_UNKNOWN_PACKAGE"); _SIGNATURE_UNKNOWN_PACKAGEReady = true; } return _SIGNATURE_UNKNOWN_PACKAGEContent; } }
        private static int _SIGNATURE_UNKNOWN_PACKAGEContent = default;
        private static bool _SIGNATURE_UNKNOWN_PACKAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#SYNCHRONOUS"/>
        /// </summary>
        public static int SYNCHRONOUS { get { if (!_SYNCHRONOUSReady) { _SYNCHRONOUSContent = SGetField<int>(LocalBridgeClazz, "SYNCHRONOUS"); _SYNCHRONOUSReady = true; } return _SYNCHRONOUSContent; } }
        private static int _SYNCHRONOUSContent = default;
        private static bool _SYNCHRONOUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#VERIFICATION_ALLOW"/>
        /// </summary>
        public static int VERIFICATION_ALLOW { get { if (!_VERIFICATION_ALLOWReady) { _VERIFICATION_ALLOWContent = SGetField<int>(LocalBridgeClazz, "VERIFICATION_ALLOW"); _VERIFICATION_ALLOWReady = true; } return _VERIFICATION_ALLOWContent; } }
        private static int _VERIFICATION_ALLOWContent = default;
        private static bool _VERIFICATION_ALLOWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#VERIFICATION_REJECT"/>
        /// </summary>
        public static int VERIFICATION_REJECT { get { if (!_VERIFICATION_REJECTReady) { _VERIFICATION_REJECTContent = SGetField<int>(LocalBridgeClazz, "VERIFICATION_REJECT"); _VERIFICATION_REJECTReady = true; } return _VERIFICATION_REJECTContent; } }
        private static int _VERIFICATION_REJECTContent = default;
        private static bool _VERIFICATION_REJECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#VERSION_CODE_HIGHEST"/>
        /// </summary>
        public static int VERSION_CODE_HIGHEST { get { if (!_VERSION_CODE_HIGHESTReady) { _VERSION_CODE_HIGHESTContent = SGetField<int>(LocalBridgeClazz, "VERSION_CODE_HIGHEST"); _VERSION_CODE_HIGHESTReady = true; } return _VERSION_CODE_HIGHESTContent; } }
        private static int _VERSION_CODE_HIGHESTContent = default;
        private static bool _VERSION_CODE_HIGHESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#EXTRA_VERIFICATION_ID"/>
        /// </summary>
        public static Java.Lang.String EXTRA_VERIFICATION_ID { get { if (!_EXTRA_VERIFICATION_IDReady) { _EXTRA_VERIFICATION_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_VERIFICATION_ID"); _EXTRA_VERIFICATION_IDReady = true; } return _EXTRA_VERIFICATION_IDContent; } }
        private static Java.Lang.String _EXTRA_VERIFICATION_IDContent = default;
        private static bool _EXTRA_VERIFICATION_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#EXTRA_VERIFICATION_RESULT"/>
        /// </summary>
        public static Java.Lang.String EXTRA_VERIFICATION_RESULT { get { if (!_EXTRA_VERIFICATION_RESULTReady) { _EXTRA_VERIFICATION_RESULTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_VERIFICATION_RESULT"); _EXTRA_VERIFICATION_RESULTReady = true; } return _EXTRA_VERIFICATION_RESULTContent; } }
        private static Java.Lang.String _EXTRA_VERIFICATION_RESULTContent = default;
        private static bool _EXTRA_VERIFICATION_RESULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_ACTIVITIES_ON_SECONDARY_DISPLAYS"/>
        /// </summary>
        public static Java.Lang.String FEATURE_ACTIVITIES_ON_SECONDARY_DISPLAYS { get { if (!_FEATURE_ACTIVITIES_ON_SECONDARY_DISPLAYSReady) { _FEATURE_ACTIVITIES_ON_SECONDARY_DISPLAYSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_ACTIVITIES_ON_SECONDARY_DISPLAYS"); _FEATURE_ACTIVITIES_ON_SECONDARY_DISPLAYSReady = true; } return _FEATURE_ACTIVITIES_ON_SECONDARY_DISPLAYSContent; } }
        private static Java.Lang.String _FEATURE_ACTIVITIES_ON_SECONDARY_DISPLAYSContent = default;
        private static bool _FEATURE_ACTIVITIES_ON_SECONDARY_DISPLAYSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_APP_WIDGETS"/>
        /// </summary>
        public static Java.Lang.String FEATURE_APP_WIDGETS { get { if (!_FEATURE_APP_WIDGETSReady) { _FEATURE_APP_WIDGETSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_APP_WIDGETS"); _FEATURE_APP_WIDGETSReady = true; } return _FEATURE_APP_WIDGETSContent; } }
        private static Java.Lang.String _FEATURE_APP_WIDGETSContent = default;
        private static bool _FEATURE_APP_WIDGETSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_AUDIO_LOW_LATENCY"/>
        /// </summary>
        public static Java.Lang.String FEATURE_AUDIO_LOW_LATENCY { get { if (!_FEATURE_AUDIO_LOW_LATENCYReady) { _FEATURE_AUDIO_LOW_LATENCYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_AUDIO_LOW_LATENCY"); _FEATURE_AUDIO_LOW_LATENCYReady = true; } return _FEATURE_AUDIO_LOW_LATENCYContent; } }
        private static Java.Lang.String _FEATURE_AUDIO_LOW_LATENCYContent = default;
        private static bool _FEATURE_AUDIO_LOW_LATENCYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_AUDIO_OUTPUT"/>
        /// </summary>
        public static Java.Lang.String FEATURE_AUDIO_OUTPUT { get { if (!_FEATURE_AUDIO_OUTPUTReady) { _FEATURE_AUDIO_OUTPUTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_AUDIO_OUTPUT"); _FEATURE_AUDIO_OUTPUTReady = true; } return _FEATURE_AUDIO_OUTPUTContent; } }
        private static Java.Lang.String _FEATURE_AUDIO_OUTPUTContent = default;
        private static bool _FEATURE_AUDIO_OUTPUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_AUDIO_PRO"/>
        /// </summary>
        public static Java.Lang.String FEATURE_AUDIO_PRO { get { if (!_FEATURE_AUDIO_PROReady) { _FEATURE_AUDIO_PROContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_AUDIO_PRO"); _FEATURE_AUDIO_PROReady = true; } return _FEATURE_AUDIO_PROContent; } }
        private static Java.Lang.String _FEATURE_AUDIO_PROContent = default;
        private static bool _FEATURE_AUDIO_PROReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_AUTOFILL"/>
        /// </summary>
        public static Java.Lang.String FEATURE_AUTOFILL { get { if (!_FEATURE_AUTOFILLReady) { _FEATURE_AUTOFILLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_AUTOFILL"); _FEATURE_AUTOFILLReady = true; } return _FEATURE_AUTOFILLContent; } }
        private static Java.Lang.String _FEATURE_AUTOFILLContent = default;
        private static bool _FEATURE_AUTOFILLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_AUTOMOTIVE"/>
        /// </summary>
        public static Java.Lang.String FEATURE_AUTOMOTIVE { get { if (!_FEATURE_AUTOMOTIVEReady) { _FEATURE_AUTOMOTIVEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_AUTOMOTIVE"); _FEATURE_AUTOMOTIVEReady = true; } return _FEATURE_AUTOMOTIVEContent; } }
        private static Java.Lang.String _FEATURE_AUTOMOTIVEContent = default;
        private static bool _FEATURE_AUTOMOTIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_BACKUP"/>
        /// </summary>
        public static Java.Lang.String FEATURE_BACKUP { get { if (!_FEATURE_BACKUPReady) { _FEATURE_BACKUPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_BACKUP"); _FEATURE_BACKUPReady = true; } return _FEATURE_BACKUPContent; } }
        private static Java.Lang.String _FEATURE_BACKUPContent = default;
        private static bool _FEATURE_BACKUPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_BLUETOOTH"/>
        /// </summary>
        public static Java.Lang.String FEATURE_BLUETOOTH { get { if (!_FEATURE_BLUETOOTHReady) { _FEATURE_BLUETOOTHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_BLUETOOTH"); _FEATURE_BLUETOOTHReady = true; } return _FEATURE_BLUETOOTHContent; } }
        private static Java.Lang.String _FEATURE_BLUETOOTHContent = default;
        private static bool _FEATURE_BLUETOOTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_BLUETOOTH_LE"/>
        /// </summary>
        public static Java.Lang.String FEATURE_BLUETOOTH_LE { get { if (!_FEATURE_BLUETOOTH_LEReady) { _FEATURE_BLUETOOTH_LEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_BLUETOOTH_LE"); _FEATURE_BLUETOOTH_LEReady = true; } return _FEATURE_BLUETOOTH_LEContent; } }
        private static Java.Lang.String _FEATURE_BLUETOOTH_LEContent = default;
        private static bool _FEATURE_BLUETOOTH_LEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_CAMERA"/>
        /// </summary>
        public static Java.Lang.String FEATURE_CAMERA { get { if (!_FEATURE_CAMERAReady) { _FEATURE_CAMERAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_CAMERA"); _FEATURE_CAMERAReady = true; } return _FEATURE_CAMERAContent; } }
        private static Java.Lang.String _FEATURE_CAMERAContent = default;
        private static bool _FEATURE_CAMERAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_CAMERA_ANY"/>
        /// </summary>
        public static Java.Lang.String FEATURE_CAMERA_ANY { get { if (!_FEATURE_CAMERA_ANYReady) { _FEATURE_CAMERA_ANYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_CAMERA_ANY"); _FEATURE_CAMERA_ANYReady = true; } return _FEATURE_CAMERA_ANYContent; } }
        private static Java.Lang.String _FEATURE_CAMERA_ANYContent = default;
        private static bool _FEATURE_CAMERA_ANYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_CAMERA_AR"/>
        /// </summary>
        public static Java.Lang.String FEATURE_CAMERA_AR { get { if (!_FEATURE_CAMERA_ARReady) { _FEATURE_CAMERA_ARContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_CAMERA_AR"); _FEATURE_CAMERA_ARReady = true; } return _FEATURE_CAMERA_ARContent; } }
        private static Java.Lang.String _FEATURE_CAMERA_ARContent = default;
        private static bool _FEATURE_CAMERA_ARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_CAMERA_AUTOFOCUS"/>
        /// </summary>
        public static Java.Lang.String FEATURE_CAMERA_AUTOFOCUS { get { if (!_FEATURE_CAMERA_AUTOFOCUSReady) { _FEATURE_CAMERA_AUTOFOCUSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_CAMERA_AUTOFOCUS"); _FEATURE_CAMERA_AUTOFOCUSReady = true; } return _FEATURE_CAMERA_AUTOFOCUSContent; } }
        private static Java.Lang.String _FEATURE_CAMERA_AUTOFOCUSContent = default;
        private static bool _FEATURE_CAMERA_AUTOFOCUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSING"/>
        /// </summary>
        public static Java.Lang.String FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSING { get { if (!_FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSINGReady) { _FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSING"); _FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSINGReady = true; } return _FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSINGContent; } }
        private static Java.Lang.String _FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSINGContent = default;
        private static bool _FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_CAMERA_CAPABILITY_MANUAL_SENSOR"/>
        /// </summary>
        public static Java.Lang.String FEATURE_CAMERA_CAPABILITY_MANUAL_SENSOR { get { if (!_FEATURE_CAMERA_CAPABILITY_MANUAL_SENSORReady) { _FEATURE_CAMERA_CAPABILITY_MANUAL_SENSORContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_CAMERA_CAPABILITY_MANUAL_SENSOR"); _FEATURE_CAMERA_CAPABILITY_MANUAL_SENSORReady = true; } return _FEATURE_CAMERA_CAPABILITY_MANUAL_SENSORContent; } }
        private static Java.Lang.String _FEATURE_CAMERA_CAPABILITY_MANUAL_SENSORContent = default;
        private static bool _FEATURE_CAMERA_CAPABILITY_MANUAL_SENSORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_CAMERA_CAPABILITY_RAW"/>
        /// </summary>
        public static Java.Lang.String FEATURE_CAMERA_CAPABILITY_RAW { get { if (!_FEATURE_CAMERA_CAPABILITY_RAWReady) { _FEATURE_CAMERA_CAPABILITY_RAWContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_CAMERA_CAPABILITY_RAW"); _FEATURE_CAMERA_CAPABILITY_RAWReady = true; } return _FEATURE_CAMERA_CAPABILITY_RAWContent; } }
        private static Java.Lang.String _FEATURE_CAMERA_CAPABILITY_RAWContent = default;
        private static bool _FEATURE_CAMERA_CAPABILITY_RAWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_CAMERA_CONCURRENT"/>
        /// </summary>
        public static Java.Lang.String FEATURE_CAMERA_CONCURRENT { get { if (!_FEATURE_CAMERA_CONCURRENTReady) { _FEATURE_CAMERA_CONCURRENTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_CAMERA_CONCURRENT"); _FEATURE_CAMERA_CONCURRENTReady = true; } return _FEATURE_CAMERA_CONCURRENTContent; } }
        private static Java.Lang.String _FEATURE_CAMERA_CONCURRENTContent = default;
        private static bool _FEATURE_CAMERA_CONCURRENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_CAMERA_EXTERNAL"/>
        /// </summary>
        public static Java.Lang.String FEATURE_CAMERA_EXTERNAL { get { if (!_FEATURE_CAMERA_EXTERNALReady) { _FEATURE_CAMERA_EXTERNALContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_CAMERA_EXTERNAL"); _FEATURE_CAMERA_EXTERNALReady = true; } return _FEATURE_CAMERA_EXTERNALContent; } }
        private static Java.Lang.String _FEATURE_CAMERA_EXTERNALContent = default;
        private static bool _FEATURE_CAMERA_EXTERNALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_CAMERA_FLASH"/>
        /// </summary>
        public static Java.Lang.String FEATURE_CAMERA_FLASH { get { if (!_FEATURE_CAMERA_FLASHReady) { _FEATURE_CAMERA_FLASHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_CAMERA_FLASH"); _FEATURE_CAMERA_FLASHReady = true; } return _FEATURE_CAMERA_FLASHContent; } }
        private static Java.Lang.String _FEATURE_CAMERA_FLASHContent = default;
        private static bool _FEATURE_CAMERA_FLASHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_CAMERA_FRONT"/>
        /// </summary>
        public static Java.Lang.String FEATURE_CAMERA_FRONT { get { if (!_FEATURE_CAMERA_FRONTReady) { _FEATURE_CAMERA_FRONTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_CAMERA_FRONT"); _FEATURE_CAMERA_FRONTReady = true; } return _FEATURE_CAMERA_FRONTContent; } }
        private static Java.Lang.String _FEATURE_CAMERA_FRONTContent = default;
        private static bool _FEATURE_CAMERA_FRONTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_CAMERA_LEVEL_FULL"/>
        /// </summary>
        public static Java.Lang.String FEATURE_CAMERA_LEVEL_FULL { get { if (!_FEATURE_CAMERA_LEVEL_FULLReady) { _FEATURE_CAMERA_LEVEL_FULLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_CAMERA_LEVEL_FULL"); _FEATURE_CAMERA_LEVEL_FULLReady = true; } return _FEATURE_CAMERA_LEVEL_FULLContent; } }
        private static Java.Lang.String _FEATURE_CAMERA_LEVEL_FULLContent = default;
        private static bool _FEATURE_CAMERA_LEVEL_FULLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_CANT_SAVE_STATE"/>
        /// </summary>
        public static Java.Lang.String FEATURE_CANT_SAVE_STATE { get { if (!_FEATURE_CANT_SAVE_STATEReady) { _FEATURE_CANT_SAVE_STATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_CANT_SAVE_STATE"); _FEATURE_CANT_SAVE_STATEReady = true; } return _FEATURE_CANT_SAVE_STATEContent; } }
        private static Java.Lang.String _FEATURE_CANT_SAVE_STATEContent = default;
        private static bool _FEATURE_CANT_SAVE_STATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_COMPANION_DEVICE_SETUP"/>
        /// </summary>
        public static Java.Lang.String FEATURE_COMPANION_DEVICE_SETUP { get { if (!_FEATURE_COMPANION_DEVICE_SETUPReady) { _FEATURE_COMPANION_DEVICE_SETUPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_COMPANION_DEVICE_SETUP"); _FEATURE_COMPANION_DEVICE_SETUPReady = true; } return _FEATURE_COMPANION_DEVICE_SETUPContent; } }
        private static Java.Lang.String _FEATURE_COMPANION_DEVICE_SETUPContent = default;
        private static bool _FEATURE_COMPANION_DEVICE_SETUPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_CONNECTION_SERVICE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String FEATURE_CONNECTION_SERVICE { get { if (!_FEATURE_CONNECTION_SERVICEReady) { _FEATURE_CONNECTION_SERVICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_CONNECTION_SERVICE"); _FEATURE_CONNECTION_SERVICEReady = true; } return _FEATURE_CONNECTION_SERVICEContent; } }
        private static Java.Lang.String _FEATURE_CONNECTION_SERVICEContent = default;
        private static bool _FEATURE_CONNECTION_SERVICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_CONSUMER_IR"/>
        /// </summary>
        public static Java.Lang.String FEATURE_CONSUMER_IR { get { if (!_FEATURE_CONSUMER_IRReady) { _FEATURE_CONSUMER_IRContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_CONSUMER_IR"); _FEATURE_CONSUMER_IRReady = true; } return _FEATURE_CONSUMER_IRContent; } }
        private static Java.Lang.String _FEATURE_CONSUMER_IRContent = default;
        private static bool _FEATURE_CONSUMER_IRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_CONTROLS"/>
        /// </summary>
        public static Java.Lang.String FEATURE_CONTROLS { get { if (!_FEATURE_CONTROLSReady) { _FEATURE_CONTROLSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_CONTROLS"); _FEATURE_CONTROLSReady = true; } return _FEATURE_CONTROLSContent; } }
        private static Java.Lang.String _FEATURE_CONTROLSContent = default;
        private static bool _FEATURE_CONTROLSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_CREDENTIALS"/>
        /// </summary>
        public static Java.Lang.String FEATURE_CREDENTIALS { get { if (!_FEATURE_CREDENTIALSReady) { _FEATURE_CREDENTIALSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_CREDENTIALS"); _FEATURE_CREDENTIALSReady = true; } return _FEATURE_CREDENTIALSContent; } }
        private static Java.Lang.String _FEATURE_CREDENTIALSContent = default;
        private static bool _FEATURE_CREDENTIALSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_DEVICE_ADMIN"/>
        /// </summary>
        public static Java.Lang.String FEATURE_DEVICE_ADMIN { get { if (!_FEATURE_DEVICE_ADMINReady) { _FEATURE_DEVICE_ADMINContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_DEVICE_ADMIN"); _FEATURE_DEVICE_ADMINReady = true; } return _FEATURE_DEVICE_ADMINContent; } }
        private static Java.Lang.String _FEATURE_DEVICE_ADMINContent = default;
        private static bool _FEATURE_DEVICE_ADMINReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_DEVICE_LOCK"/>
        /// </summary>
        public static Java.Lang.String FEATURE_DEVICE_LOCK { get { if (!_FEATURE_DEVICE_LOCKReady) { _FEATURE_DEVICE_LOCKContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_DEVICE_LOCK"); _FEATURE_DEVICE_LOCKReady = true; } return _FEATURE_DEVICE_LOCKContent; } }
        private static Java.Lang.String _FEATURE_DEVICE_LOCKContent = default;
        private static bool _FEATURE_DEVICE_LOCKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_EMBEDDED"/>
        /// </summary>
        public static Java.Lang.String FEATURE_EMBEDDED { get { if (!_FEATURE_EMBEDDEDReady) { _FEATURE_EMBEDDEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_EMBEDDED"); _FEATURE_EMBEDDEDReady = true; } return _FEATURE_EMBEDDEDContent; } }
        private static Java.Lang.String _FEATURE_EMBEDDEDContent = default;
        private static bool _FEATURE_EMBEDDEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_ETHERNET"/>
        /// </summary>
        public static Java.Lang.String FEATURE_ETHERNET { get { if (!_FEATURE_ETHERNETReady) { _FEATURE_ETHERNETContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_ETHERNET"); _FEATURE_ETHERNETReady = true; } return _FEATURE_ETHERNETContent; } }
        private static Java.Lang.String _FEATURE_ETHERNETContent = default;
        private static bool _FEATURE_ETHERNETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_EXPANDED_PICTURE_IN_PICTURE"/>
        /// </summary>
        public static Java.Lang.String FEATURE_EXPANDED_PICTURE_IN_PICTURE { get { if (!_FEATURE_EXPANDED_PICTURE_IN_PICTUREReady) { _FEATURE_EXPANDED_PICTURE_IN_PICTUREContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_EXPANDED_PICTURE_IN_PICTURE"); _FEATURE_EXPANDED_PICTURE_IN_PICTUREReady = true; } return _FEATURE_EXPANDED_PICTURE_IN_PICTUREContent; } }
        private static Java.Lang.String _FEATURE_EXPANDED_PICTURE_IN_PICTUREContent = default;
        private static bool _FEATURE_EXPANDED_PICTURE_IN_PICTUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_FACE"/>
        /// </summary>
        public static Java.Lang.String FEATURE_FACE { get { if (!_FEATURE_FACEReady) { _FEATURE_FACEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_FACE"); _FEATURE_FACEReady = true; } return _FEATURE_FACEContent; } }
        private static Java.Lang.String _FEATURE_FACEContent = default;
        private static bool _FEATURE_FACEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_FAKETOUCH"/>
        /// </summary>
        public static Java.Lang.String FEATURE_FAKETOUCH { get { if (!_FEATURE_FAKETOUCHReady) { _FEATURE_FAKETOUCHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_FAKETOUCH"); _FEATURE_FAKETOUCHReady = true; } return _FEATURE_FAKETOUCHContent; } }
        private static Java.Lang.String _FEATURE_FAKETOUCHContent = default;
        private static bool _FEATURE_FAKETOUCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_FAKETOUCH_MULTITOUCH_DISTINCT"/>
        /// </summary>
        public static Java.Lang.String FEATURE_FAKETOUCH_MULTITOUCH_DISTINCT { get { if (!_FEATURE_FAKETOUCH_MULTITOUCH_DISTINCTReady) { _FEATURE_FAKETOUCH_MULTITOUCH_DISTINCTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_FAKETOUCH_MULTITOUCH_DISTINCT"); _FEATURE_FAKETOUCH_MULTITOUCH_DISTINCTReady = true; } return _FEATURE_FAKETOUCH_MULTITOUCH_DISTINCTContent; } }
        private static Java.Lang.String _FEATURE_FAKETOUCH_MULTITOUCH_DISTINCTContent = default;
        private static bool _FEATURE_FAKETOUCH_MULTITOUCH_DISTINCTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_FAKETOUCH_MULTITOUCH_JAZZHAND"/>
        /// </summary>
        public static Java.Lang.String FEATURE_FAKETOUCH_MULTITOUCH_JAZZHAND { get { if (!_FEATURE_FAKETOUCH_MULTITOUCH_JAZZHANDReady) { _FEATURE_FAKETOUCH_MULTITOUCH_JAZZHANDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_FAKETOUCH_MULTITOUCH_JAZZHAND"); _FEATURE_FAKETOUCH_MULTITOUCH_JAZZHANDReady = true; } return _FEATURE_FAKETOUCH_MULTITOUCH_JAZZHANDContent; } }
        private static Java.Lang.String _FEATURE_FAKETOUCH_MULTITOUCH_JAZZHANDContent = default;
        private static bool _FEATURE_FAKETOUCH_MULTITOUCH_JAZZHANDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_FINGERPRINT"/>
        /// </summary>
        public static Java.Lang.String FEATURE_FINGERPRINT { get { if (!_FEATURE_FINGERPRINTReady) { _FEATURE_FINGERPRINTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_FINGERPRINT"); _FEATURE_FINGERPRINTReady = true; } return _FEATURE_FINGERPRINTContent; } }
        private static Java.Lang.String _FEATURE_FINGERPRINTContent = default;
        private static bool _FEATURE_FINGERPRINTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_FREEFORM_WINDOW_MANAGEMENT"/>
        /// </summary>
        public static Java.Lang.String FEATURE_FREEFORM_WINDOW_MANAGEMENT { get { if (!_FEATURE_FREEFORM_WINDOW_MANAGEMENTReady) { _FEATURE_FREEFORM_WINDOW_MANAGEMENTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_FREEFORM_WINDOW_MANAGEMENT"); _FEATURE_FREEFORM_WINDOW_MANAGEMENTReady = true; } return _FEATURE_FREEFORM_WINDOW_MANAGEMENTContent; } }
        private static Java.Lang.String _FEATURE_FREEFORM_WINDOW_MANAGEMENTContent = default;
        private static bool _FEATURE_FREEFORM_WINDOW_MANAGEMENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_GAMEPAD"/>
        /// </summary>
        public static Java.Lang.String FEATURE_GAMEPAD { get { if (!_FEATURE_GAMEPADReady) { _FEATURE_GAMEPADContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_GAMEPAD"); _FEATURE_GAMEPADReady = true; } return _FEATURE_GAMEPADContent; } }
        private static Java.Lang.String _FEATURE_GAMEPADContent = default;
        private static bool _FEATURE_GAMEPADReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_HARDWARE_KEYSTORE"/>
        /// </summary>
        public static Java.Lang.String FEATURE_HARDWARE_KEYSTORE { get { if (!_FEATURE_HARDWARE_KEYSTOREReady) { _FEATURE_HARDWARE_KEYSTOREContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_HARDWARE_KEYSTORE"); _FEATURE_HARDWARE_KEYSTOREReady = true; } return _FEATURE_HARDWARE_KEYSTOREContent; } }
        private static Java.Lang.String _FEATURE_HARDWARE_KEYSTOREContent = default;
        private static bool _FEATURE_HARDWARE_KEYSTOREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_HIFI_SENSORS"/>
        /// </summary>
        public static Java.Lang.String FEATURE_HIFI_SENSORS { get { if (!_FEATURE_HIFI_SENSORSReady) { _FEATURE_HIFI_SENSORSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_HIFI_SENSORS"); _FEATURE_HIFI_SENSORSReady = true; } return _FEATURE_HIFI_SENSORSContent; } }
        private static Java.Lang.String _FEATURE_HIFI_SENSORSContent = default;
        private static bool _FEATURE_HIFI_SENSORSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_HOME_SCREEN"/>
        /// </summary>
        public static Java.Lang.String FEATURE_HOME_SCREEN { get { if (!_FEATURE_HOME_SCREENReady) { _FEATURE_HOME_SCREENContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_HOME_SCREEN"); _FEATURE_HOME_SCREENReady = true; } return _FEATURE_HOME_SCREENContent; } }
        private static Java.Lang.String _FEATURE_HOME_SCREENContent = default;
        private static bool _FEATURE_HOME_SCREENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_IDENTITY_CREDENTIAL_HARDWARE"/>
        /// </summary>
        public static Java.Lang.String FEATURE_IDENTITY_CREDENTIAL_HARDWARE { get { if (!_FEATURE_IDENTITY_CREDENTIAL_HARDWAREReady) { _FEATURE_IDENTITY_CREDENTIAL_HARDWAREContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_IDENTITY_CREDENTIAL_HARDWARE"); _FEATURE_IDENTITY_CREDENTIAL_HARDWAREReady = true; } return _FEATURE_IDENTITY_CREDENTIAL_HARDWAREContent; } }
        private static Java.Lang.String _FEATURE_IDENTITY_CREDENTIAL_HARDWAREContent = default;
        private static bool _FEATURE_IDENTITY_CREDENTIAL_HARDWAREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_IDENTITY_CREDENTIAL_HARDWARE_DIRECT_ACCESS"/>
        /// </summary>
        public static Java.Lang.String FEATURE_IDENTITY_CREDENTIAL_HARDWARE_DIRECT_ACCESS { get { if (!_FEATURE_IDENTITY_CREDENTIAL_HARDWARE_DIRECT_ACCESSReady) { _FEATURE_IDENTITY_CREDENTIAL_HARDWARE_DIRECT_ACCESSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_IDENTITY_CREDENTIAL_HARDWARE_DIRECT_ACCESS"); _FEATURE_IDENTITY_CREDENTIAL_HARDWARE_DIRECT_ACCESSReady = true; } return _FEATURE_IDENTITY_CREDENTIAL_HARDWARE_DIRECT_ACCESSContent; } }
        private static Java.Lang.String _FEATURE_IDENTITY_CREDENTIAL_HARDWARE_DIRECT_ACCESSContent = default;
        private static bool _FEATURE_IDENTITY_CREDENTIAL_HARDWARE_DIRECT_ACCESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_INPUT_METHODS"/>
        /// </summary>
        public static Java.Lang.String FEATURE_INPUT_METHODS { get { if (!_FEATURE_INPUT_METHODSReady) { _FEATURE_INPUT_METHODSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_INPUT_METHODS"); _FEATURE_INPUT_METHODSReady = true; } return _FEATURE_INPUT_METHODSContent; } }
        private static Java.Lang.String _FEATURE_INPUT_METHODSContent = default;
        private static bool _FEATURE_INPUT_METHODSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_IPSEC_TUNNEL_MIGRATION"/>
        /// </summary>
        public static Java.Lang.String FEATURE_IPSEC_TUNNEL_MIGRATION { get { if (!_FEATURE_IPSEC_TUNNEL_MIGRATIONReady) { _FEATURE_IPSEC_TUNNEL_MIGRATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_IPSEC_TUNNEL_MIGRATION"); _FEATURE_IPSEC_TUNNEL_MIGRATIONReady = true; } return _FEATURE_IPSEC_TUNNEL_MIGRATIONContent; } }
        private static Java.Lang.String _FEATURE_IPSEC_TUNNEL_MIGRATIONContent = default;
        private static bool _FEATURE_IPSEC_TUNNEL_MIGRATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_IPSEC_TUNNELS"/>
        /// </summary>
        public static Java.Lang.String FEATURE_IPSEC_TUNNELS { get { if (!_FEATURE_IPSEC_TUNNELSReady) { _FEATURE_IPSEC_TUNNELSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_IPSEC_TUNNELS"); _FEATURE_IPSEC_TUNNELSReady = true; } return _FEATURE_IPSEC_TUNNELSContent; } }
        private static Java.Lang.String _FEATURE_IPSEC_TUNNELSContent = default;
        private static bool _FEATURE_IPSEC_TUNNELSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_IRIS"/>
        /// </summary>
        public static Java.Lang.String FEATURE_IRIS { get { if (!_FEATURE_IRISReady) { _FEATURE_IRISContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_IRIS"); _FEATURE_IRISReady = true; } return _FEATURE_IRISContent; } }
        private static Java.Lang.String _FEATURE_IRISContent = default;
        private static bool _FEATURE_IRISReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_KEYSTORE_APP_ATTEST_KEY"/>
        /// </summary>
        public static Java.Lang.String FEATURE_KEYSTORE_APP_ATTEST_KEY { get { if (!_FEATURE_KEYSTORE_APP_ATTEST_KEYReady) { _FEATURE_KEYSTORE_APP_ATTEST_KEYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_KEYSTORE_APP_ATTEST_KEY"); _FEATURE_KEYSTORE_APP_ATTEST_KEYReady = true; } return _FEATURE_KEYSTORE_APP_ATTEST_KEYContent; } }
        private static Java.Lang.String _FEATURE_KEYSTORE_APP_ATTEST_KEYContent = default;
        private static bool _FEATURE_KEYSTORE_APP_ATTEST_KEYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_KEYSTORE_LIMITED_USE_KEY"/>
        /// </summary>
        public static Java.Lang.String FEATURE_KEYSTORE_LIMITED_USE_KEY { get { if (!_FEATURE_KEYSTORE_LIMITED_USE_KEYReady) { _FEATURE_KEYSTORE_LIMITED_USE_KEYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_KEYSTORE_LIMITED_USE_KEY"); _FEATURE_KEYSTORE_LIMITED_USE_KEYReady = true; } return _FEATURE_KEYSTORE_LIMITED_USE_KEYContent; } }
        private static Java.Lang.String _FEATURE_KEYSTORE_LIMITED_USE_KEYContent = default;
        private static bool _FEATURE_KEYSTORE_LIMITED_USE_KEYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_KEYSTORE_SINGLE_USE_KEY"/>
        /// </summary>
        public static Java.Lang.String FEATURE_KEYSTORE_SINGLE_USE_KEY { get { if (!_FEATURE_KEYSTORE_SINGLE_USE_KEYReady) { _FEATURE_KEYSTORE_SINGLE_USE_KEYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_KEYSTORE_SINGLE_USE_KEY"); _FEATURE_KEYSTORE_SINGLE_USE_KEYReady = true; } return _FEATURE_KEYSTORE_SINGLE_USE_KEYContent; } }
        private static Java.Lang.String _FEATURE_KEYSTORE_SINGLE_USE_KEYContent = default;
        private static bool _FEATURE_KEYSTORE_SINGLE_USE_KEYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_LEANBACK"/>
        /// </summary>
        public static Java.Lang.String FEATURE_LEANBACK { get { if (!_FEATURE_LEANBACKReady) { _FEATURE_LEANBACKContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_LEANBACK"); _FEATURE_LEANBACKReady = true; } return _FEATURE_LEANBACKContent; } }
        private static Java.Lang.String _FEATURE_LEANBACKContent = default;
        private static bool _FEATURE_LEANBACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_LEANBACK_ONLY"/>
        /// </summary>
        public static Java.Lang.String FEATURE_LEANBACK_ONLY { get { if (!_FEATURE_LEANBACK_ONLYReady) { _FEATURE_LEANBACK_ONLYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_LEANBACK_ONLY"); _FEATURE_LEANBACK_ONLYReady = true; } return _FEATURE_LEANBACK_ONLYContent; } }
        private static Java.Lang.String _FEATURE_LEANBACK_ONLYContent = default;
        private static bool _FEATURE_LEANBACK_ONLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_LIVE_TV"/>
        /// </summary>
        public static Java.Lang.String FEATURE_LIVE_TV { get { if (!_FEATURE_LIVE_TVReady) { _FEATURE_LIVE_TVContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_LIVE_TV"); _FEATURE_LIVE_TVReady = true; } return _FEATURE_LIVE_TVContent; } }
        private static Java.Lang.String _FEATURE_LIVE_TVContent = default;
        private static bool _FEATURE_LIVE_TVReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_LIVE_WALLPAPER"/>
        /// </summary>
        public static Java.Lang.String FEATURE_LIVE_WALLPAPER { get { if (!_FEATURE_LIVE_WALLPAPERReady) { _FEATURE_LIVE_WALLPAPERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_LIVE_WALLPAPER"); _FEATURE_LIVE_WALLPAPERReady = true; } return _FEATURE_LIVE_WALLPAPERContent; } }
        private static Java.Lang.String _FEATURE_LIVE_WALLPAPERContent = default;
        private static bool _FEATURE_LIVE_WALLPAPERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_LOCATION"/>
        /// </summary>
        public static Java.Lang.String FEATURE_LOCATION { get { if (!_FEATURE_LOCATIONReady) { _FEATURE_LOCATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_LOCATION"); _FEATURE_LOCATIONReady = true; } return _FEATURE_LOCATIONContent; } }
        private static Java.Lang.String _FEATURE_LOCATIONContent = default;
        private static bool _FEATURE_LOCATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_LOCATION_GPS"/>
        /// </summary>
        public static Java.Lang.String FEATURE_LOCATION_GPS { get { if (!_FEATURE_LOCATION_GPSReady) { _FEATURE_LOCATION_GPSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_LOCATION_GPS"); _FEATURE_LOCATION_GPSReady = true; } return _FEATURE_LOCATION_GPSContent; } }
        private static Java.Lang.String _FEATURE_LOCATION_GPSContent = default;
        private static bool _FEATURE_LOCATION_GPSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_LOCATION_NETWORK"/>
        /// </summary>
        public static Java.Lang.String FEATURE_LOCATION_NETWORK { get { if (!_FEATURE_LOCATION_NETWORKReady) { _FEATURE_LOCATION_NETWORKContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_LOCATION_NETWORK"); _FEATURE_LOCATION_NETWORKReady = true; } return _FEATURE_LOCATION_NETWORKContent; } }
        private static Java.Lang.String _FEATURE_LOCATION_NETWORKContent = default;
        private static bool _FEATURE_LOCATION_NETWORKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_MANAGED_USERS"/>
        /// </summary>
        public static Java.Lang.String FEATURE_MANAGED_USERS { get { if (!_FEATURE_MANAGED_USERSReady) { _FEATURE_MANAGED_USERSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_MANAGED_USERS"); _FEATURE_MANAGED_USERSReady = true; } return _FEATURE_MANAGED_USERSContent; } }
        private static Java.Lang.String _FEATURE_MANAGED_USERSContent = default;
        private static bool _FEATURE_MANAGED_USERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_MICROPHONE"/>
        /// </summary>
        public static Java.Lang.String FEATURE_MICROPHONE { get { if (!_FEATURE_MICROPHONEReady) { _FEATURE_MICROPHONEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_MICROPHONE"); _FEATURE_MICROPHONEReady = true; } return _FEATURE_MICROPHONEContent; } }
        private static Java.Lang.String _FEATURE_MICROPHONEContent = default;
        private static bool _FEATURE_MICROPHONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_MIDI"/>
        /// </summary>
        public static Java.Lang.String FEATURE_MIDI { get { if (!_FEATURE_MIDIReady) { _FEATURE_MIDIContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_MIDI"); _FEATURE_MIDIReady = true; } return _FEATURE_MIDIContent; } }
        private static Java.Lang.String _FEATURE_MIDIContent = default;
        private static bool _FEATURE_MIDIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_NFC"/>
        /// </summary>
        public static Java.Lang.String FEATURE_NFC { get { if (!_FEATURE_NFCReady) { _FEATURE_NFCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_NFC"); _FEATURE_NFCReady = true; } return _FEATURE_NFCContent; } }
        private static Java.Lang.String _FEATURE_NFCContent = default;
        private static bool _FEATURE_NFCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_NFC_BEAM"/>
        /// </summary>
        public static Java.Lang.String FEATURE_NFC_BEAM { get { if (!_FEATURE_NFC_BEAMReady) { _FEATURE_NFC_BEAMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_NFC_BEAM"); _FEATURE_NFC_BEAMReady = true; } return _FEATURE_NFC_BEAMContent; } }
        private static Java.Lang.String _FEATURE_NFC_BEAMContent = default;
        private static bool _FEATURE_NFC_BEAMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_NFC_HOST_CARD_EMULATION"/>
        /// </summary>
        public static Java.Lang.String FEATURE_NFC_HOST_CARD_EMULATION { get { if (!_FEATURE_NFC_HOST_CARD_EMULATIONReady) { _FEATURE_NFC_HOST_CARD_EMULATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_NFC_HOST_CARD_EMULATION"); _FEATURE_NFC_HOST_CARD_EMULATIONReady = true; } return _FEATURE_NFC_HOST_CARD_EMULATIONContent; } }
        private static Java.Lang.String _FEATURE_NFC_HOST_CARD_EMULATIONContent = default;
        private static bool _FEATURE_NFC_HOST_CARD_EMULATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_NFC_HOST_CARD_EMULATION_NFCF"/>
        /// </summary>
        public static Java.Lang.String FEATURE_NFC_HOST_CARD_EMULATION_NFCF { get { if (!_FEATURE_NFC_HOST_CARD_EMULATION_NFCFReady) { _FEATURE_NFC_HOST_CARD_EMULATION_NFCFContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_NFC_HOST_CARD_EMULATION_NFCF"); _FEATURE_NFC_HOST_CARD_EMULATION_NFCFReady = true; } return _FEATURE_NFC_HOST_CARD_EMULATION_NFCFContent; } }
        private static Java.Lang.String _FEATURE_NFC_HOST_CARD_EMULATION_NFCFContent = default;
        private static bool _FEATURE_NFC_HOST_CARD_EMULATION_NFCFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_NFC_OFF_HOST_CARD_EMULATION_ESE"/>
        /// </summary>
        public static Java.Lang.String FEATURE_NFC_OFF_HOST_CARD_EMULATION_ESE { get { if (!_FEATURE_NFC_OFF_HOST_CARD_EMULATION_ESEReady) { _FEATURE_NFC_OFF_HOST_CARD_EMULATION_ESEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_NFC_OFF_HOST_CARD_EMULATION_ESE"); _FEATURE_NFC_OFF_HOST_CARD_EMULATION_ESEReady = true; } return _FEATURE_NFC_OFF_HOST_CARD_EMULATION_ESEContent; } }
        private static Java.Lang.String _FEATURE_NFC_OFF_HOST_CARD_EMULATION_ESEContent = default;
        private static bool _FEATURE_NFC_OFF_HOST_CARD_EMULATION_ESEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_NFC_OFF_HOST_CARD_EMULATION_UICC"/>
        /// </summary>
        public static Java.Lang.String FEATURE_NFC_OFF_HOST_CARD_EMULATION_UICC { get { if (!_FEATURE_NFC_OFF_HOST_CARD_EMULATION_UICCReady) { _FEATURE_NFC_OFF_HOST_CARD_EMULATION_UICCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_NFC_OFF_HOST_CARD_EMULATION_UICC"); _FEATURE_NFC_OFF_HOST_CARD_EMULATION_UICCReady = true; } return _FEATURE_NFC_OFF_HOST_CARD_EMULATION_UICCContent; } }
        private static Java.Lang.String _FEATURE_NFC_OFF_HOST_CARD_EMULATION_UICCContent = default;
        private static bool _FEATURE_NFC_OFF_HOST_CARD_EMULATION_UICCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_OPENGLES_DEQP_LEVEL"/>
        /// </summary>
        public static Java.Lang.String FEATURE_OPENGLES_DEQP_LEVEL { get { if (!_FEATURE_OPENGLES_DEQP_LEVELReady) { _FEATURE_OPENGLES_DEQP_LEVELContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_OPENGLES_DEQP_LEVEL"); _FEATURE_OPENGLES_DEQP_LEVELReady = true; } return _FEATURE_OPENGLES_DEQP_LEVELContent; } }
        private static Java.Lang.String _FEATURE_OPENGLES_DEQP_LEVELContent = default;
        private static bool _FEATURE_OPENGLES_DEQP_LEVELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_OPENGLES_EXTENSION_PACK"/>
        /// </summary>
        public static Java.Lang.String FEATURE_OPENGLES_EXTENSION_PACK { get { if (!_FEATURE_OPENGLES_EXTENSION_PACKReady) { _FEATURE_OPENGLES_EXTENSION_PACKContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_OPENGLES_EXTENSION_PACK"); _FEATURE_OPENGLES_EXTENSION_PACKReady = true; } return _FEATURE_OPENGLES_EXTENSION_PACKContent; } }
        private static Java.Lang.String _FEATURE_OPENGLES_EXTENSION_PACKContent = default;
        private static bool _FEATURE_OPENGLES_EXTENSION_PACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_PC"/>
        /// </summary>
        public static Java.Lang.String FEATURE_PC { get { if (!_FEATURE_PCReady) { _FEATURE_PCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_PC"); _FEATURE_PCReady = true; } return _FEATURE_PCContent; } }
        private static Java.Lang.String _FEATURE_PCContent = default;
        private static bool _FEATURE_PCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_PICTURE_IN_PICTURE"/>
        /// </summary>
        public static Java.Lang.String FEATURE_PICTURE_IN_PICTURE { get { if (!_FEATURE_PICTURE_IN_PICTUREReady) { _FEATURE_PICTURE_IN_PICTUREContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_PICTURE_IN_PICTURE"); _FEATURE_PICTURE_IN_PICTUREReady = true; } return _FEATURE_PICTURE_IN_PICTUREContent; } }
        private static Java.Lang.String _FEATURE_PICTURE_IN_PICTUREContent = default;
        private static bool _FEATURE_PICTURE_IN_PICTUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_PRINTING"/>
        /// </summary>
        public static Java.Lang.String FEATURE_PRINTING { get { if (!_FEATURE_PRINTINGReady) { _FEATURE_PRINTINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_PRINTING"); _FEATURE_PRINTINGReady = true; } return _FEATURE_PRINTINGContent; } }
        private static Java.Lang.String _FEATURE_PRINTINGContent = default;
        private static bool _FEATURE_PRINTINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_RAM_LOW"/>
        /// </summary>
        public static Java.Lang.String FEATURE_RAM_LOW { get { if (!_FEATURE_RAM_LOWReady) { _FEATURE_RAM_LOWContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_RAM_LOW"); _FEATURE_RAM_LOWReady = true; } return _FEATURE_RAM_LOWContent; } }
        private static Java.Lang.String _FEATURE_RAM_LOWContent = default;
        private static bool _FEATURE_RAM_LOWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_RAM_NORMAL"/>
        /// </summary>
        public static Java.Lang.String FEATURE_RAM_NORMAL { get { if (!_FEATURE_RAM_NORMALReady) { _FEATURE_RAM_NORMALContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_RAM_NORMAL"); _FEATURE_RAM_NORMALReady = true; } return _FEATURE_RAM_NORMALContent; } }
        private static Java.Lang.String _FEATURE_RAM_NORMALContent = default;
        private static bool _FEATURE_RAM_NORMALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SCREEN_LANDSCAPE"/>
        /// </summary>
        public static Java.Lang.String FEATURE_SCREEN_LANDSCAPE { get { if (!_FEATURE_SCREEN_LANDSCAPEReady) { _FEATURE_SCREEN_LANDSCAPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_SCREEN_LANDSCAPE"); _FEATURE_SCREEN_LANDSCAPEReady = true; } return _FEATURE_SCREEN_LANDSCAPEContent; } }
        private static Java.Lang.String _FEATURE_SCREEN_LANDSCAPEContent = default;
        private static bool _FEATURE_SCREEN_LANDSCAPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SCREEN_PORTRAIT"/>
        /// </summary>
        public static Java.Lang.String FEATURE_SCREEN_PORTRAIT { get { if (!_FEATURE_SCREEN_PORTRAITReady) { _FEATURE_SCREEN_PORTRAITContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_SCREEN_PORTRAIT"); _FEATURE_SCREEN_PORTRAITReady = true; } return _FEATURE_SCREEN_PORTRAITContent; } }
        private static Java.Lang.String _FEATURE_SCREEN_PORTRAITContent = default;
        private static bool _FEATURE_SCREEN_PORTRAITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SE_OMAPI_ESE"/>
        /// </summary>
        public static Java.Lang.String FEATURE_SE_OMAPI_ESE { get { if (!_FEATURE_SE_OMAPI_ESEReady) { _FEATURE_SE_OMAPI_ESEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_SE_OMAPI_ESE"); _FEATURE_SE_OMAPI_ESEReady = true; } return _FEATURE_SE_OMAPI_ESEContent; } }
        private static Java.Lang.String _FEATURE_SE_OMAPI_ESEContent = default;
        private static bool _FEATURE_SE_OMAPI_ESEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SE_OMAPI_SD"/>
        /// </summary>
        public static Java.Lang.String FEATURE_SE_OMAPI_SD { get { if (!_FEATURE_SE_OMAPI_SDReady) { _FEATURE_SE_OMAPI_SDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_SE_OMAPI_SD"); _FEATURE_SE_OMAPI_SDReady = true; } return _FEATURE_SE_OMAPI_SDContent; } }
        private static Java.Lang.String _FEATURE_SE_OMAPI_SDContent = default;
        private static bool _FEATURE_SE_OMAPI_SDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SE_OMAPI_UICC"/>
        /// </summary>
        public static Java.Lang.String FEATURE_SE_OMAPI_UICC { get { if (!_FEATURE_SE_OMAPI_UICCReady) { _FEATURE_SE_OMAPI_UICCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_SE_OMAPI_UICC"); _FEATURE_SE_OMAPI_UICCReady = true; } return _FEATURE_SE_OMAPI_UICCContent; } }
        private static Java.Lang.String _FEATURE_SE_OMAPI_UICCContent = default;
        private static bool _FEATURE_SE_OMAPI_UICCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SECURE_LOCK_SCREEN"/>
        /// </summary>
        public static Java.Lang.String FEATURE_SECURE_LOCK_SCREEN { get { if (!_FEATURE_SECURE_LOCK_SCREENReady) { _FEATURE_SECURE_LOCK_SCREENContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_SECURE_LOCK_SCREEN"); _FEATURE_SECURE_LOCK_SCREENReady = true; } return _FEATURE_SECURE_LOCK_SCREENContent; } }
        private static Java.Lang.String _FEATURE_SECURE_LOCK_SCREENContent = default;
        private static bool _FEATURE_SECURE_LOCK_SCREENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SECURELY_REMOVES_USERS"/>
        /// </summary>
        public static Java.Lang.String FEATURE_SECURELY_REMOVES_USERS { get { if (!_FEATURE_SECURELY_REMOVES_USERSReady) { _FEATURE_SECURELY_REMOVES_USERSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_SECURELY_REMOVES_USERS"); _FEATURE_SECURELY_REMOVES_USERSReady = true; } return _FEATURE_SECURELY_REMOVES_USERSContent; } }
        private static Java.Lang.String _FEATURE_SECURELY_REMOVES_USERSContent = default;
        private static bool _FEATURE_SECURELY_REMOVES_USERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SECURITY_MODEL_COMPATIBLE"/>
        /// </summary>
        public static Java.Lang.String FEATURE_SECURITY_MODEL_COMPATIBLE { get { if (!_FEATURE_SECURITY_MODEL_COMPATIBLEReady) { _FEATURE_SECURITY_MODEL_COMPATIBLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_SECURITY_MODEL_COMPATIBLE"); _FEATURE_SECURITY_MODEL_COMPATIBLEReady = true; } return _FEATURE_SECURITY_MODEL_COMPATIBLEContent; } }
        private static Java.Lang.String _FEATURE_SECURITY_MODEL_COMPATIBLEContent = default;
        private static bool _FEATURE_SECURITY_MODEL_COMPATIBLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SENSOR_ACCELEROMETER"/>
        /// </summary>
        public static Java.Lang.String FEATURE_SENSOR_ACCELEROMETER { get { if (!_FEATURE_SENSOR_ACCELEROMETERReady) { _FEATURE_SENSOR_ACCELEROMETERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_SENSOR_ACCELEROMETER"); _FEATURE_SENSOR_ACCELEROMETERReady = true; } return _FEATURE_SENSOR_ACCELEROMETERContent; } }
        private static Java.Lang.String _FEATURE_SENSOR_ACCELEROMETERContent = default;
        private static bool _FEATURE_SENSOR_ACCELEROMETERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES"/>
        /// </summary>
        public static Java.Lang.String FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES { get { if (!_FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXESReady) { _FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES"); _FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXESReady = true; } return _FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXESContent; } }
        private static Java.Lang.String _FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXESContent = default;
        private static bool _FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES_UNCALIBRATED"/>
        /// </summary>
        public static Java.Lang.String FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES_UNCALIBRATED { get { if (!_FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES_UNCALIBRATEDReady) { _FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES_UNCALIBRATEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES_UNCALIBRATED"); _FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES_UNCALIBRATEDReady = true; } return _FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES_UNCALIBRATEDContent; } }
        private static Java.Lang.String _FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES_UNCALIBRATEDContent = default;
        private static bool _FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES_UNCALIBRATEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SENSOR_AMBIENT_TEMPERATURE"/>
        /// </summary>
        public static Java.Lang.String FEATURE_SENSOR_AMBIENT_TEMPERATURE { get { if (!_FEATURE_SENSOR_AMBIENT_TEMPERATUREReady) { _FEATURE_SENSOR_AMBIENT_TEMPERATUREContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_SENSOR_AMBIENT_TEMPERATURE"); _FEATURE_SENSOR_AMBIENT_TEMPERATUREReady = true; } return _FEATURE_SENSOR_AMBIENT_TEMPERATUREContent; } }
        private static Java.Lang.String _FEATURE_SENSOR_AMBIENT_TEMPERATUREContent = default;
        private static bool _FEATURE_SENSOR_AMBIENT_TEMPERATUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SENSOR_BAROMETER"/>
        /// </summary>
        public static Java.Lang.String FEATURE_SENSOR_BAROMETER { get { if (!_FEATURE_SENSOR_BAROMETERReady) { _FEATURE_SENSOR_BAROMETERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_SENSOR_BAROMETER"); _FEATURE_SENSOR_BAROMETERReady = true; } return _FEATURE_SENSOR_BAROMETERContent; } }
        private static Java.Lang.String _FEATURE_SENSOR_BAROMETERContent = default;
        private static bool _FEATURE_SENSOR_BAROMETERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SENSOR_COMPASS"/>
        /// </summary>
        public static Java.Lang.String FEATURE_SENSOR_COMPASS { get { if (!_FEATURE_SENSOR_COMPASSReady) { _FEATURE_SENSOR_COMPASSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_SENSOR_COMPASS"); _FEATURE_SENSOR_COMPASSReady = true; } return _FEATURE_SENSOR_COMPASSContent; } }
        private static Java.Lang.String _FEATURE_SENSOR_COMPASSContent = default;
        private static bool _FEATURE_SENSOR_COMPASSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SENSOR_DYNAMIC_HEAD_TRACKER"/>
        /// </summary>
        public static Java.Lang.String FEATURE_SENSOR_DYNAMIC_HEAD_TRACKER { get { if (!_FEATURE_SENSOR_DYNAMIC_HEAD_TRACKERReady) { _FEATURE_SENSOR_DYNAMIC_HEAD_TRACKERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_SENSOR_DYNAMIC_HEAD_TRACKER"); _FEATURE_SENSOR_DYNAMIC_HEAD_TRACKERReady = true; } return _FEATURE_SENSOR_DYNAMIC_HEAD_TRACKERContent; } }
        private static Java.Lang.String _FEATURE_SENSOR_DYNAMIC_HEAD_TRACKERContent = default;
        private static bool _FEATURE_SENSOR_DYNAMIC_HEAD_TRACKERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SENSOR_GYROSCOPE"/>
        /// </summary>
        public static Java.Lang.String FEATURE_SENSOR_GYROSCOPE { get { if (!_FEATURE_SENSOR_GYROSCOPEReady) { _FEATURE_SENSOR_GYROSCOPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_SENSOR_GYROSCOPE"); _FEATURE_SENSOR_GYROSCOPEReady = true; } return _FEATURE_SENSOR_GYROSCOPEContent; } }
        private static Java.Lang.String _FEATURE_SENSOR_GYROSCOPEContent = default;
        private static bool _FEATURE_SENSOR_GYROSCOPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES"/>
        /// </summary>
        public static Java.Lang.String FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES { get { if (!_FEATURE_SENSOR_GYROSCOPE_LIMITED_AXESReady) { _FEATURE_SENSOR_GYROSCOPE_LIMITED_AXESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES"); _FEATURE_SENSOR_GYROSCOPE_LIMITED_AXESReady = true; } return _FEATURE_SENSOR_GYROSCOPE_LIMITED_AXESContent; } }
        private static Java.Lang.String _FEATURE_SENSOR_GYROSCOPE_LIMITED_AXESContent = default;
        private static bool _FEATURE_SENSOR_GYROSCOPE_LIMITED_AXESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES_UNCALIBRATED"/>
        /// </summary>
        public static Java.Lang.String FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES_UNCALIBRATED { get { if (!_FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES_UNCALIBRATEDReady) { _FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES_UNCALIBRATEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES_UNCALIBRATED"); _FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES_UNCALIBRATEDReady = true; } return _FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES_UNCALIBRATEDContent; } }
        private static Java.Lang.String _FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES_UNCALIBRATEDContent = default;
        private static bool _FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES_UNCALIBRATEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SENSOR_HEADING"/>
        /// </summary>
        public static Java.Lang.String FEATURE_SENSOR_HEADING { get { if (!_FEATURE_SENSOR_HEADINGReady) { _FEATURE_SENSOR_HEADINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_SENSOR_HEADING"); _FEATURE_SENSOR_HEADINGReady = true; } return _FEATURE_SENSOR_HEADINGContent; } }
        private static Java.Lang.String _FEATURE_SENSOR_HEADINGContent = default;
        private static bool _FEATURE_SENSOR_HEADINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SENSOR_HEART_RATE"/>
        /// </summary>
        public static Java.Lang.String FEATURE_SENSOR_HEART_RATE { get { if (!_FEATURE_SENSOR_HEART_RATEReady) { _FEATURE_SENSOR_HEART_RATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_SENSOR_HEART_RATE"); _FEATURE_SENSOR_HEART_RATEReady = true; } return _FEATURE_SENSOR_HEART_RATEContent; } }
        private static Java.Lang.String _FEATURE_SENSOR_HEART_RATEContent = default;
        private static bool _FEATURE_SENSOR_HEART_RATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SENSOR_HEART_RATE_ECG"/>
        /// </summary>
        public static Java.Lang.String FEATURE_SENSOR_HEART_RATE_ECG { get { if (!_FEATURE_SENSOR_HEART_RATE_ECGReady) { _FEATURE_SENSOR_HEART_RATE_ECGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_SENSOR_HEART_RATE_ECG"); _FEATURE_SENSOR_HEART_RATE_ECGReady = true; } return _FEATURE_SENSOR_HEART_RATE_ECGContent; } }
        private static Java.Lang.String _FEATURE_SENSOR_HEART_RATE_ECGContent = default;
        private static bool _FEATURE_SENSOR_HEART_RATE_ECGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SENSOR_HINGE_ANGLE"/>
        /// </summary>
        public static Java.Lang.String FEATURE_SENSOR_HINGE_ANGLE { get { if (!_FEATURE_SENSOR_HINGE_ANGLEReady) { _FEATURE_SENSOR_HINGE_ANGLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_SENSOR_HINGE_ANGLE"); _FEATURE_SENSOR_HINGE_ANGLEReady = true; } return _FEATURE_SENSOR_HINGE_ANGLEContent; } }
        private static Java.Lang.String _FEATURE_SENSOR_HINGE_ANGLEContent = default;
        private static bool _FEATURE_SENSOR_HINGE_ANGLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SENSOR_LIGHT"/>
        /// </summary>
        public static Java.Lang.String FEATURE_SENSOR_LIGHT { get { if (!_FEATURE_SENSOR_LIGHTReady) { _FEATURE_SENSOR_LIGHTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_SENSOR_LIGHT"); _FEATURE_SENSOR_LIGHTReady = true; } return _FEATURE_SENSOR_LIGHTContent; } }
        private static Java.Lang.String _FEATURE_SENSOR_LIGHTContent = default;
        private static bool _FEATURE_SENSOR_LIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SENSOR_PROXIMITY"/>
        /// </summary>
        public static Java.Lang.String FEATURE_SENSOR_PROXIMITY { get { if (!_FEATURE_SENSOR_PROXIMITYReady) { _FEATURE_SENSOR_PROXIMITYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_SENSOR_PROXIMITY"); _FEATURE_SENSOR_PROXIMITYReady = true; } return _FEATURE_SENSOR_PROXIMITYContent; } }
        private static Java.Lang.String _FEATURE_SENSOR_PROXIMITYContent = default;
        private static bool _FEATURE_SENSOR_PROXIMITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SENSOR_RELATIVE_HUMIDITY"/>
        /// </summary>
        public static Java.Lang.String FEATURE_SENSOR_RELATIVE_HUMIDITY { get { if (!_FEATURE_SENSOR_RELATIVE_HUMIDITYReady) { _FEATURE_SENSOR_RELATIVE_HUMIDITYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_SENSOR_RELATIVE_HUMIDITY"); _FEATURE_SENSOR_RELATIVE_HUMIDITYReady = true; } return _FEATURE_SENSOR_RELATIVE_HUMIDITYContent; } }
        private static Java.Lang.String _FEATURE_SENSOR_RELATIVE_HUMIDITYContent = default;
        private static bool _FEATURE_SENSOR_RELATIVE_HUMIDITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SENSOR_STEP_COUNTER"/>
        /// </summary>
        public static Java.Lang.String FEATURE_SENSOR_STEP_COUNTER { get { if (!_FEATURE_SENSOR_STEP_COUNTERReady) { _FEATURE_SENSOR_STEP_COUNTERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_SENSOR_STEP_COUNTER"); _FEATURE_SENSOR_STEP_COUNTERReady = true; } return _FEATURE_SENSOR_STEP_COUNTERContent; } }
        private static Java.Lang.String _FEATURE_SENSOR_STEP_COUNTERContent = default;
        private static bool _FEATURE_SENSOR_STEP_COUNTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SENSOR_STEP_DETECTOR"/>
        /// </summary>
        public static Java.Lang.String FEATURE_SENSOR_STEP_DETECTOR { get { if (!_FEATURE_SENSOR_STEP_DETECTORReady) { _FEATURE_SENSOR_STEP_DETECTORContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_SENSOR_STEP_DETECTOR"); _FEATURE_SENSOR_STEP_DETECTORReady = true; } return _FEATURE_SENSOR_STEP_DETECTORContent; } }
        private static Java.Lang.String _FEATURE_SENSOR_STEP_DETECTORContent = default;
        private static bool _FEATURE_SENSOR_STEP_DETECTORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SIP"/>
        /// </summary>
        public static Java.Lang.String FEATURE_SIP { get { if (!_FEATURE_SIPReady) { _FEATURE_SIPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_SIP"); _FEATURE_SIPReady = true; } return _FEATURE_SIPContent; } }
        private static Java.Lang.String _FEATURE_SIPContent = default;
        private static bool _FEATURE_SIPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SIP_VOIP"/>
        /// </summary>
        public static Java.Lang.String FEATURE_SIP_VOIP { get { if (!_FEATURE_SIP_VOIPReady) { _FEATURE_SIP_VOIPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_SIP_VOIP"); _FEATURE_SIP_VOIPReady = true; } return _FEATURE_SIP_VOIPContent; } }
        private static Java.Lang.String _FEATURE_SIP_VOIPContent = default;
        private static bool _FEATURE_SIP_VOIPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_STRONGBOX_KEYSTORE"/>
        /// </summary>
        public static Java.Lang.String FEATURE_STRONGBOX_KEYSTORE { get { if (!_FEATURE_STRONGBOX_KEYSTOREReady) { _FEATURE_STRONGBOX_KEYSTOREContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_STRONGBOX_KEYSTORE"); _FEATURE_STRONGBOX_KEYSTOREReady = true; } return _FEATURE_STRONGBOX_KEYSTOREContent; } }
        private static Java.Lang.String _FEATURE_STRONGBOX_KEYSTOREContent = default;
        private static bool _FEATURE_STRONGBOX_KEYSTOREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_TELECOM"/>
        /// </summary>
        public static Java.Lang.String FEATURE_TELECOM { get { if (!_FEATURE_TELECOMReady) { _FEATURE_TELECOMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_TELECOM"); _FEATURE_TELECOMReady = true; } return _FEATURE_TELECOMContent; } }
        private static Java.Lang.String _FEATURE_TELECOMContent = default;
        private static bool _FEATURE_TELECOMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_TELEPHONY"/>
        /// </summary>
        public static Java.Lang.String FEATURE_TELEPHONY { get { if (!_FEATURE_TELEPHONYReady) { _FEATURE_TELEPHONYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_TELEPHONY"); _FEATURE_TELEPHONYReady = true; } return _FEATURE_TELEPHONYContent; } }
        private static Java.Lang.String _FEATURE_TELEPHONYContent = default;
        private static bool _FEATURE_TELEPHONYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_TELEPHONY_CALLING"/>
        /// </summary>
        public static Java.Lang.String FEATURE_TELEPHONY_CALLING { get { if (!_FEATURE_TELEPHONY_CALLINGReady) { _FEATURE_TELEPHONY_CALLINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_TELEPHONY_CALLING"); _FEATURE_TELEPHONY_CALLINGReady = true; } return _FEATURE_TELEPHONY_CALLINGContent; } }
        private static Java.Lang.String _FEATURE_TELEPHONY_CALLINGContent = default;
        private static bool _FEATURE_TELEPHONY_CALLINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_TELEPHONY_CDMA"/>
        /// </summary>
        public static Java.Lang.String FEATURE_TELEPHONY_CDMA { get { if (!_FEATURE_TELEPHONY_CDMAReady) { _FEATURE_TELEPHONY_CDMAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_TELEPHONY_CDMA"); _FEATURE_TELEPHONY_CDMAReady = true; } return _FEATURE_TELEPHONY_CDMAContent; } }
        private static Java.Lang.String _FEATURE_TELEPHONY_CDMAContent = default;
        private static bool _FEATURE_TELEPHONY_CDMAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_TELEPHONY_DATA"/>
        /// </summary>
        public static Java.Lang.String FEATURE_TELEPHONY_DATA { get { if (!_FEATURE_TELEPHONY_DATAReady) { _FEATURE_TELEPHONY_DATAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_TELEPHONY_DATA"); _FEATURE_TELEPHONY_DATAReady = true; } return _FEATURE_TELEPHONY_DATAContent; } }
        private static Java.Lang.String _FEATURE_TELEPHONY_DATAContent = default;
        private static bool _FEATURE_TELEPHONY_DATAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_TELEPHONY_EUICC"/>
        /// </summary>
        public static Java.Lang.String FEATURE_TELEPHONY_EUICC { get { if (!_FEATURE_TELEPHONY_EUICCReady) { _FEATURE_TELEPHONY_EUICCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_TELEPHONY_EUICC"); _FEATURE_TELEPHONY_EUICCReady = true; } return _FEATURE_TELEPHONY_EUICCContent; } }
        private static Java.Lang.String _FEATURE_TELEPHONY_EUICCContent = default;
        private static bool _FEATURE_TELEPHONY_EUICCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_TELEPHONY_EUICC_MEP"/>
        /// </summary>
        public static Java.Lang.String FEATURE_TELEPHONY_EUICC_MEP { get { if (!_FEATURE_TELEPHONY_EUICC_MEPReady) { _FEATURE_TELEPHONY_EUICC_MEPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_TELEPHONY_EUICC_MEP"); _FEATURE_TELEPHONY_EUICC_MEPReady = true; } return _FEATURE_TELEPHONY_EUICC_MEPContent; } }
        private static Java.Lang.String _FEATURE_TELEPHONY_EUICC_MEPContent = default;
        private static bool _FEATURE_TELEPHONY_EUICC_MEPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_TELEPHONY_GSM"/>
        /// </summary>
        public static Java.Lang.String FEATURE_TELEPHONY_GSM { get { if (!_FEATURE_TELEPHONY_GSMReady) { _FEATURE_TELEPHONY_GSMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_TELEPHONY_GSM"); _FEATURE_TELEPHONY_GSMReady = true; } return _FEATURE_TELEPHONY_GSMContent; } }
        private static Java.Lang.String _FEATURE_TELEPHONY_GSMContent = default;
        private static bool _FEATURE_TELEPHONY_GSMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_TELEPHONY_IMS"/>
        /// </summary>
        public static Java.Lang.String FEATURE_TELEPHONY_IMS { get { if (!_FEATURE_TELEPHONY_IMSReady) { _FEATURE_TELEPHONY_IMSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_TELEPHONY_IMS"); _FEATURE_TELEPHONY_IMSReady = true; } return _FEATURE_TELEPHONY_IMSContent; } }
        private static Java.Lang.String _FEATURE_TELEPHONY_IMSContent = default;
        private static bool _FEATURE_TELEPHONY_IMSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_TELEPHONY_MBMS"/>
        /// </summary>
        public static Java.Lang.String FEATURE_TELEPHONY_MBMS { get { if (!_FEATURE_TELEPHONY_MBMSReady) { _FEATURE_TELEPHONY_MBMSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_TELEPHONY_MBMS"); _FEATURE_TELEPHONY_MBMSReady = true; } return _FEATURE_TELEPHONY_MBMSContent; } }
        private static Java.Lang.String _FEATURE_TELEPHONY_MBMSContent = default;
        private static bool _FEATURE_TELEPHONY_MBMSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_TELEPHONY_MESSAGING"/>
        /// </summary>
        public static Java.Lang.String FEATURE_TELEPHONY_MESSAGING { get { if (!_FEATURE_TELEPHONY_MESSAGINGReady) { _FEATURE_TELEPHONY_MESSAGINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_TELEPHONY_MESSAGING"); _FEATURE_TELEPHONY_MESSAGINGReady = true; } return _FEATURE_TELEPHONY_MESSAGINGContent; } }
        private static Java.Lang.String _FEATURE_TELEPHONY_MESSAGINGContent = default;
        private static bool _FEATURE_TELEPHONY_MESSAGINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_TELEPHONY_RADIO_ACCESS"/>
        /// </summary>
        public static Java.Lang.String FEATURE_TELEPHONY_RADIO_ACCESS { get { if (!_FEATURE_TELEPHONY_RADIO_ACCESSReady) { _FEATURE_TELEPHONY_RADIO_ACCESSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_TELEPHONY_RADIO_ACCESS"); _FEATURE_TELEPHONY_RADIO_ACCESSReady = true; } return _FEATURE_TELEPHONY_RADIO_ACCESSContent; } }
        private static Java.Lang.String _FEATURE_TELEPHONY_RADIO_ACCESSContent = default;
        private static bool _FEATURE_TELEPHONY_RADIO_ACCESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_TELEPHONY_SUBSCRIPTION"/>
        /// </summary>
        public static Java.Lang.String FEATURE_TELEPHONY_SUBSCRIPTION { get { if (!_FEATURE_TELEPHONY_SUBSCRIPTIONReady) { _FEATURE_TELEPHONY_SUBSCRIPTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_TELEPHONY_SUBSCRIPTION"); _FEATURE_TELEPHONY_SUBSCRIPTIONReady = true; } return _FEATURE_TELEPHONY_SUBSCRIPTIONContent; } }
        private static Java.Lang.String _FEATURE_TELEPHONY_SUBSCRIPTIONContent = default;
        private static bool _FEATURE_TELEPHONY_SUBSCRIPTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_TELEVISION"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String FEATURE_TELEVISION { get { if (!_FEATURE_TELEVISIONReady) { _FEATURE_TELEVISIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_TELEVISION"); _FEATURE_TELEVISIONReady = true; } return _FEATURE_TELEVISIONContent; } }
        private static Java.Lang.String _FEATURE_TELEVISIONContent = default;
        private static bool _FEATURE_TELEVISIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_TOUCHSCREEN"/>
        /// </summary>
        public static Java.Lang.String FEATURE_TOUCHSCREEN { get { if (!_FEATURE_TOUCHSCREENReady) { _FEATURE_TOUCHSCREENContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_TOUCHSCREEN"); _FEATURE_TOUCHSCREENReady = true; } return _FEATURE_TOUCHSCREENContent; } }
        private static Java.Lang.String _FEATURE_TOUCHSCREENContent = default;
        private static bool _FEATURE_TOUCHSCREENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_TOUCHSCREEN_MULTITOUCH"/>
        /// </summary>
        public static Java.Lang.String FEATURE_TOUCHSCREEN_MULTITOUCH { get { if (!_FEATURE_TOUCHSCREEN_MULTITOUCHReady) { _FEATURE_TOUCHSCREEN_MULTITOUCHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_TOUCHSCREEN_MULTITOUCH"); _FEATURE_TOUCHSCREEN_MULTITOUCHReady = true; } return _FEATURE_TOUCHSCREEN_MULTITOUCHContent; } }
        private static Java.Lang.String _FEATURE_TOUCHSCREEN_MULTITOUCHContent = default;
        private static bool _FEATURE_TOUCHSCREEN_MULTITOUCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT"/>
        /// </summary>
        public static Java.Lang.String FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT { get { if (!_FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCTReady) { _FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT"); _FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCTReady = true; } return _FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCTContent; } }
        private static Java.Lang.String _FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCTContent = default;
        private static bool _FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND"/>
        /// </summary>
        public static Java.Lang.String FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND { get { if (!_FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHANDReady) { _FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHANDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND"); _FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHANDReady = true; } return _FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHANDContent; } }
        private static Java.Lang.String _FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHANDContent = default;
        private static bool _FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHANDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_USB_ACCESSORY"/>
        /// </summary>
        public static Java.Lang.String FEATURE_USB_ACCESSORY { get { if (!_FEATURE_USB_ACCESSORYReady) { _FEATURE_USB_ACCESSORYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_USB_ACCESSORY"); _FEATURE_USB_ACCESSORYReady = true; } return _FEATURE_USB_ACCESSORYContent; } }
        private static Java.Lang.String _FEATURE_USB_ACCESSORYContent = default;
        private static bool _FEATURE_USB_ACCESSORYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_USB_HOST"/>
        /// </summary>
        public static Java.Lang.String FEATURE_USB_HOST { get { if (!_FEATURE_USB_HOSTReady) { _FEATURE_USB_HOSTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_USB_HOST"); _FEATURE_USB_HOSTReady = true; } return _FEATURE_USB_HOSTContent; } }
        private static Java.Lang.String _FEATURE_USB_HOSTContent = default;
        private static bool _FEATURE_USB_HOSTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_UWB"/>
        /// </summary>
        public static Java.Lang.String FEATURE_UWB { get { if (!_FEATURE_UWBReady) { _FEATURE_UWBContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_UWB"); _FEATURE_UWBReady = true; } return _FEATURE_UWBContent; } }
        private static Java.Lang.String _FEATURE_UWBContent = default;
        private static bool _FEATURE_UWBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_VERIFIED_BOOT"/>
        /// </summary>
        public static Java.Lang.String FEATURE_VERIFIED_BOOT { get { if (!_FEATURE_VERIFIED_BOOTReady) { _FEATURE_VERIFIED_BOOTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_VERIFIED_BOOT"); _FEATURE_VERIFIED_BOOTReady = true; } return _FEATURE_VERIFIED_BOOTContent; } }
        private static Java.Lang.String _FEATURE_VERIFIED_BOOTContent = default;
        private static bool _FEATURE_VERIFIED_BOOTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_VR_HEADTRACKING"/>
        /// </summary>
        public static Java.Lang.String FEATURE_VR_HEADTRACKING { get { if (!_FEATURE_VR_HEADTRACKINGReady) { _FEATURE_VR_HEADTRACKINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_VR_HEADTRACKING"); _FEATURE_VR_HEADTRACKINGReady = true; } return _FEATURE_VR_HEADTRACKINGContent; } }
        private static Java.Lang.String _FEATURE_VR_HEADTRACKINGContent = default;
        private static bool _FEATURE_VR_HEADTRACKINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_VR_MODE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String FEATURE_VR_MODE { get { if (!_FEATURE_VR_MODEReady) { _FEATURE_VR_MODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_VR_MODE"); _FEATURE_VR_MODEReady = true; } return _FEATURE_VR_MODEContent; } }
        private static Java.Lang.String _FEATURE_VR_MODEContent = default;
        private static bool _FEATURE_VR_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_VR_MODE_HIGH_PERFORMANCE"/>
        /// </summary>
        public static Java.Lang.String FEATURE_VR_MODE_HIGH_PERFORMANCE { get { if (!_FEATURE_VR_MODE_HIGH_PERFORMANCEReady) { _FEATURE_VR_MODE_HIGH_PERFORMANCEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_VR_MODE_HIGH_PERFORMANCE"); _FEATURE_VR_MODE_HIGH_PERFORMANCEReady = true; } return _FEATURE_VR_MODE_HIGH_PERFORMANCEContent; } }
        private static Java.Lang.String _FEATURE_VR_MODE_HIGH_PERFORMANCEContent = default;
        private static bool _FEATURE_VR_MODE_HIGH_PERFORMANCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_VULKAN_DEQP_LEVEL"/>
        /// </summary>
        public static Java.Lang.String FEATURE_VULKAN_DEQP_LEVEL { get { if (!_FEATURE_VULKAN_DEQP_LEVELReady) { _FEATURE_VULKAN_DEQP_LEVELContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_VULKAN_DEQP_LEVEL"); _FEATURE_VULKAN_DEQP_LEVELReady = true; } return _FEATURE_VULKAN_DEQP_LEVELContent; } }
        private static Java.Lang.String _FEATURE_VULKAN_DEQP_LEVELContent = default;
        private static bool _FEATURE_VULKAN_DEQP_LEVELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_VULKAN_HARDWARE_COMPUTE"/>
        /// </summary>
        public static Java.Lang.String FEATURE_VULKAN_HARDWARE_COMPUTE { get { if (!_FEATURE_VULKAN_HARDWARE_COMPUTEReady) { _FEATURE_VULKAN_HARDWARE_COMPUTEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_VULKAN_HARDWARE_COMPUTE"); _FEATURE_VULKAN_HARDWARE_COMPUTEReady = true; } return _FEATURE_VULKAN_HARDWARE_COMPUTEContent; } }
        private static Java.Lang.String _FEATURE_VULKAN_HARDWARE_COMPUTEContent = default;
        private static bool _FEATURE_VULKAN_HARDWARE_COMPUTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_VULKAN_HARDWARE_LEVEL"/>
        /// </summary>
        public static Java.Lang.String FEATURE_VULKAN_HARDWARE_LEVEL { get { if (!_FEATURE_VULKAN_HARDWARE_LEVELReady) { _FEATURE_VULKAN_HARDWARE_LEVELContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_VULKAN_HARDWARE_LEVEL"); _FEATURE_VULKAN_HARDWARE_LEVELReady = true; } return _FEATURE_VULKAN_HARDWARE_LEVELContent; } }
        private static Java.Lang.String _FEATURE_VULKAN_HARDWARE_LEVELContent = default;
        private static bool _FEATURE_VULKAN_HARDWARE_LEVELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_VULKAN_HARDWARE_VERSION"/>
        /// </summary>
        public static Java.Lang.String FEATURE_VULKAN_HARDWARE_VERSION { get { if (!_FEATURE_VULKAN_HARDWARE_VERSIONReady) { _FEATURE_VULKAN_HARDWARE_VERSIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_VULKAN_HARDWARE_VERSION"); _FEATURE_VULKAN_HARDWARE_VERSIONReady = true; } return _FEATURE_VULKAN_HARDWARE_VERSIONContent; } }
        private static Java.Lang.String _FEATURE_VULKAN_HARDWARE_VERSIONContent = default;
        private static bool _FEATURE_VULKAN_HARDWARE_VERSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_WALLET_LOCATION_BASED_SUGGESTIONS"/>
        /// </summary>
        public static Java.Lang.String FEATURE_WALLET_LOCATION_BASED_SUGGESTIONS { get { if (!_FEATURE_WALLET_LOCATION_BASED_SUGGESTIONSReady) { _FEATURE_WALLET_LOCATION_BASED_SUGGESTIONSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_WALLET_LOCATION_BASED_SUGGESTIONS"); _FEATURE_WALLET_LOCATION_BASED_SUGGESTIONSReady = true; } return _FEATURE_WALLET_LOCATION_BASED_SUGGESTIONSContent; } }
        private static Java.Lang.String _FEATURE_WALLET_LOCATION_BASED_SUGGESTIONSContent = default;
        private static bool _FEATURE_WALLET_LOCATION_BASED_SUGGESTIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_WATCH"/>
        /// </summary>
        public static Java.Lang.String FEATURE_WATCH { get { if (!_FEATURE_WATCHReady) { _FEATURE_WATCHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_WATCH"); _FEATURE_WATCHReady = true; } return _FEATURE_WATCHContent; } }
        private static Java.Lang.String _FEATURE_WATCHContent = default;
        private static bool _FEATURE_WATCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_WEBVIEW"/>
        /// </summary>
        public static Java.Lang.String FEATURE_WEBVIEW { get { if (!_FEATURE_WEBVIEWReady) { _FEATURE_WEBVIEWContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_WEBVIEW"); _FEATURE_WEBVIEWReady = true; } return _FEATURE_WEBVIEWContent; } }
        private static Java.Lang.String _FEATURE_WEBVIEWContent = default;
        private static bool _FEATURE_WEBVIEWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_WIFI"/>
        /// </summary>
        public static Java.Lang.String FEATURE_WIFI { get { if (!_FEATURE_WIFIReady) { _FEATURE_WIFIContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_WIFI"); _FEATURE_WIFIReady = true; } return _FEATURE_WIFIContent; } }
        private static Java.Lang.String _FEATURE_WIFIContent = default;
        private static bool _FEATURE_WIFIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_WIFI_AWARE"/>
        /// </summary>
        public static Java.Lang.String FEATURE_WIFI_AWARE { get { if (!_FEATURE_WIFI_AWAREReady) { _FEATURE_WIFI_AWAREContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_WIFI_AWARE"); _FEATURE_WIFI_AWAREReady = true; } return _FEATURE_WIFI_AWAREContent; } }
        private static Java.Lang.String _FEATURE_WIFI_AWAREContent = default;
        private static bool _FEATURE_WIFI_AWAREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_WIFI_DIRECT"/>
        /// </summary>
        public static Java.Lang.String FEATURE_WIFI_DIRECT { get { if (!_FEATURE_WIFI_DIRECTReady) { _FEATURE_WIFI_DIRECTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_WIFI_DIRECT"); _FEATURE_WIFI_DIRECTReady = true; } return _FEATURE_WIFI_DIRECTContent; } }
        private static Java.Lang.String _FEATURE_WIFI_DIRECTContent = default;
        private static bool _FEATURE_WIFI_DIRECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_WIFI_PASSPOINT"/>
        /// </summary>
        public static Java.Lang.String FEATURE_WIFI_PASSPOINT { get { if (!_FEATURE_WIFI_PASSPOINTReady) { _FEATURE_WIFI_PASSPOINTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_WIFI_PASSPOINT"); _FEATURE_WIFI_PASSPOINTReady = true; } return _FEATURE_WIFI_PASSPOINTContent; } }
        private static Java.Lang.String _FEATURE_WIFI_PASSPOINTContent = default;
        private static bool _FEATURE_WIFI_PASSPOINTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_WIFI_RTT"/>
        /// </summary>
        public static Java.Lang.String FEATURE_WIFI_RTT { get { if (!_FEATURE_WIFI_RTTReady) { _FEATURE_WIFI_RTTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_WIFI_RTT"); _FEATURE_WIFI_RTTReady = true; } return _FEATURE_WIFI_RTTContent; } }
        private static Java.Lang.String _FEATURE_WIFI_RTTContent = default;
        private static bool _FEATURE_WIFI_RTTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_WINDOW_MAGNIFICATION"/>
        /// </summary>
        public static Java.Lang.String FEATURE_WINDOW_MAGNIFICATION { get { if (!_FEATURE_WINDOW_MAGNIFICATIONReady) { _FEATURE_WINDOW_MAGNIFICATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_WINDOW_MAGNIFICATION"); _FEATURE_WINDOW_MAGNIFICATIONReady = true; } return _FEATURE_WINDOW_MAGNIFICATIONContent; } }
        private static Java.Lang.String _FEATURE_WINDOW_MAGNIFICATIONContent = default;
        private static bool _FEATURE_WINDOW_MAGNIFICATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#PROPERTY_COMPAT_OVERRIDE_LANDSCAPE_TO_PORTRAIT"/>
        /// </summary>
        public static Java.Lang.String PROPERTY_COMPAT_OVERRIDE_LANDSCAPE_TO_PORTRAIT { get { if (!_PROPERTY_COMPAT_OVERRIDE_LANDSCAPE_TO_PORTRAITReady) { _PROPERTY_COMPAT_OVERRIDE_LANDSCAPE_TO_PORTRAITContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROPERTY_COMPAT_OVERRIDE_LANDSCAPE_TO_PORTRAIT"); _PROPERTY_COMPAT_OVERRIDE_LANDSCAPE_TO_PORTRAITReady = true; } return _PROPERTY_COMPAT_OVERRIDE_LANDSCAPE_TO_PORTRAITContent; } }
        private static Java.Lang.String _PROPERTY_COMPAT_OVERRIDE_LANDSCAPE_TO_PORTRAITContent = default;
        private static bool _PROPERTY_COMPAT_OVERRIDE_LANDSCAPE_TO_PORTRAITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#PROPERTY_MEDIA_CAPABILITIES"/>
        /// </summary>
        public static Java.Lang.String PROPERTY_MEDIA_CAPABILITIES { get { if (!_PROPERTY_MEDIA_CAPABILITIESReady) { _PROPERTY_MEDIA_CAPABILITIESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROPERTY_MEDIA_CAPABILITIES"); _PROPERTY_MEDIA_CAPABILITIESReady = true; } return _PROPERTY_MEDIA_CAPABILITIESContent; } }
        private static Java.Lang.String _PROPERTY_MEDIA_CAPABILITIESContent = default;
        private static bool _PROPERTY_MEDIA_CAPABILITIESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#PROPERTY_SELF_CERTIFIED_NETWORK_CAPABILITIES"/>
        /// </summary>
        public static Java.Lang.String PROPERTY_SELF_CERTIFIED_NETWORK_CAPABILITIES { get { if (!_PROPERTY_SELF_CERTIFIED_NETWORK_CAPABILITIESReady) { _PROPERTY_SELF_CERTIFIED_NETWORK_CAPABILITIESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROPERTY_SELF_CERTIFIED_NETWORK_CAPABILITIES"); _PROPERTY_SELF_CERTIFIED_NETWORK_CAPABILITIESReady = true; } return _PROPERTY_SELF_CERTIFIED_NETWORK_CAPABILITIESContent; } }
        private static Java.Lang.String _PROPERTY_SELF_CERTIFIED_NETWORK_CAPABILITIESContent = default;
        private static bool _PROPERTY_SELF_CERTIFIED_NETWORK_CAPABILITIESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#PROPERTY_SPECIAL_USE_FGS_SUBTYPE"/>
        /// </summary>
        public static Java.Lang.String PROPERTY_SPECIAL_USE_FGS_SUBTYPE { get { if (!_PROPERTY_SPECIAL_USE_FGS_SUBTYPEReady) { _PROPERTY_SPECIAL_USE_FGS_SUBTYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROPERTY_SPECIAL_USE_FGS_SUBTYPE"); _PROPERTY_SPECIAL_USE_FGS_SUBTYPEReady = true; } return _PROPERTY_SPECIAL_USE_FGS_SUBTYPEContent; } }
        private static Java.Lang.String _PROPERTY_SPECIAL_USE_FGS_SUBTYPEContent = default;
        private static bool _PROPERTY_SPECIAL_USE_FGS_SUBTYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#TRUST_ALL"/>
        /// </summary>
        public static Java.Util.List TRUST_ALL { get { if (!_TRUST_ALLReady) { _TRUST_ALLContent = SGetField<Java.Util.List>(LocalBridgeClazz, "TRUST_ALL"); _TRUST_ALLReady = true; } return _TRUST_ALLContent; } }
        private static Java.Util.List _TRUST_ALLContent = default;
        private static bool _TRUST_ALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#TRUST_NONE"/>
        /// </summary>
        public static Java.Util.List TRUST_NONE { get { if (!_TRUST_NONEReady) { _TRUST_NONEContent = SGetField<Java.Util.List>(LocalBridgeClazz, "TRUST_NONE"); _TRUST_NONEReady = true; } return _TRUST_NONEContent; } }
        private static Java.Util.List _TRUST_NONEContent = default;
        private static bool _TRUST_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#GET_ATTRIBUTIONS_LONG"/>
        /// </summary>
        public static long GET_ATTRIBUTIONS_LONG { get { if (!_GET_ATTRIBUTIONS_LONGReady) { _GET_ATTRIBUTIONS_LONGContent = SGetField<long>(LocalBridgeClazz, "GET_ATTRIBUTIONS_LONG"); _GET_ATTRIBUTIONS_LONGReady = true; } return _GET_ATTRIBUTIONS_LONGContent; } }
        private static long _GET_ATTRIBUTIONS_LONGContent = default;
        private static bool _GET_ATTRIBUTIONS_LONGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#MAXIMUM_VERIFICATION_TIMEOUT"/>
        /// </summary>
        public static long MAXIMUM_VERIFICATION_TIMEOUT { get { if (!_MAXIMUM_VERIFICATION_TIMEOUTReady) { _MAXIMUM_VERIFICATION_TIMEOUTContent = SGetField<long>(LocalBridgeClazz, "MAXIMUM_VERIFICATION_TIMEOUT"); _MAXIMUM_VERIFICATION_TIMEOUTReady = true; } return _MAXIMUM_VERIFICATION_TIMEOUTContent; } }
        private static long _MAXIMUM_VERIFICATION_TIMEOUTContent = default;
        private static bool _MAXIMUM_VERIFICATION_TIMEOUTReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getLaunchIntentForPackage(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Content.Intent"/></returns>
        public Android.Content.Intent GetLaunchIntentForPackage(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Android.Content.Intent>("getLaunchIntentForPackage", "(Ljava/lang/String;)Landroid/content/Intent;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getLeanbackLaunchIntentForPackage(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Content.Intent"/></returns>
        public Android.Content.Intent GetLeanbackLaunchIntentForPackage(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Android.Content.Intent>("getLeanbackLaunchIntentForPackage", "(Ljava/lang/String;)Landroid/content/Intent;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getActivityInfo(android.content.ComponentName,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.Content.Pm.ActivityInfo"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public Android.Content.Pm.ActivityInfo GetActivityInfo(Android.Content.ComponentName arg0, int arg1)
        {
            return IExecute<Android.Content.Pm.ActivityInfo>("getActivityInfo", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getReceiverInfo(android.content.ComponentName,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.Content.Pm.ActivityInfo"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public Android.Content.Pm.ActivityInfo GetReceiverInfo(Android.Content.ComponentName arg0, int arg1)
        {
            return IExecute<Android.Content.Pm.ActivityInfo>("getReceiverInfo", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getApplicationInfo(java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.Content.Pm.ApplicationInfo"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public Android.Content.Pm.ApplicationInfo GetApplicationInfo(Java.Lang.String arg0, int arg1)
        {
            return IExecute<Android.Content.Pm.ApplicationInfo>("getApplicationInfo", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getChangedPackages(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Content.Pm.ChangedPackages"/></returns>
        public Android.Content.Pm.ChangedPackages GetChangedPackages(int arg0)
        {
            return IExecuteWithSignature<Android.Content.Pm.ChangedPackages>("getChangedPackages", "(I)Landroid/content/pm/ChangedPackages;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getSystemAvailableFeatures()"/>
        /// </summary>
        /// <returns><see cref="Android.Content.Pm.FeatureInfo"/></returns>
        public Android.Content.Pm.FeatureInfo[] GetSystemAvailableFeatures()
        {
            return IExecuteWithSignatureArray<Android.Content.Pm.FeatureInfo>("getSystemAvailableFeatures", "()[Landroid/content/pm/FeatureInfo;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getInstrumentationInfo(android.content.ComponentName,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.Content.Pm.InstrumentationInfo"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public Android.Content.Pm.InstrumentationInfo GetInstrumentationInfo(Android.Content.ComponentName arg0, int arg1)
        {
            return IExecute<Android.Content.Pm.InstrumentationInfo>("getInstrumentationInfo", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getPackageInfo(android.content.pm.VersionedPackage,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Pm.VersionedPackage"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.Content.Pm.PackageInfo"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public Android.Content.Pm.PackageInfo GetPackageInfo(Android.Content.Pm.VersionedPackage arg0, int arg1)
        {
            return IExecute<Android.Content.Pm.PackageInfo>("getPackageInfo", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getPackageInfo(java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.Content.Pm.PackageInfo"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public Android.Content.Pm.PackageInfo GetPackageInfo(Java.Lang.String arg0, int arg1)
        {
            return IExecute<Android.Content.Pm.PackageInfo>("getPackageInfo", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getPackageInstaller()"/>
        /// </summary>
        /// <returns><see cref="Android.Content.Pm.PackageInstaller"/></returns>
        public Android.Content.Pm.PackageInstaller GetPackageInstaller()
        {
            return IExecuteWithSignature<Android.Content.Pm.PackageInstaller>("getPackageInstaller", "()Landroid/content/pm/PackageInstaller;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getPermissionGroupInfo(java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.Content.Pm.PermissionGroupInfo"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public Android.Content.Pm.PermissionGroupInfo GetPermissionGroupInfo(Java.Lang.String arg0, int arg1)
        {
            return IExecute<Android.Content.Pm.PermissionGroupInfo>("getPermissionGroupInfo", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getPermissionInfo(java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.Content.Pm.PermissionInfo"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public Android.Content.Pm.PermissionInfo GetPermissionInfo(Java.Lang.String arg0, int arg1)
        {
            return IExecute<Android.Content.Pm.PermissionInfo>("getPermissionInfo", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getProviderInfo(android.content.ComponentName,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.Content.Pm.ProviderInfo"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public Android.Content.Pm.ProviderInfo GetProviderInfo(Android.Content.ComponentName arg0, int arg1)
        {
            return IExecute<Android.Content.Pm.ProviderInfo>("getProviderInfo", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#resolveContentProvider(java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.Content.Pm.ProviderInfo"/></returns>
        public Android.Content.Pm.ProviderInfo ResolveContentProvider(Java.Lang.String arg0, int arg1)
        {
            return IExecute<Android.Content.Pm.ProviderInfo>("resolveContentProvider", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#resolveActivity(android.content.Intent,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Intent"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.Content.Pm.ResolveInfo"/></returns>
        public Android.Content.Pm.ResolveInfo ResolveActivity(Android.Content.Intent arg0, int arg1)
        {
            return IExecute<Android.Content.Pm.ResolveInfo>("resolveActivity", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#resolveService(android.content.Intent,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Intent"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.Content.Pm.ResolveInfo"/></returns>
        public Android.Content.Pm.ResolveInfo ResolveService(Android.Content.Intent arg0, int arg1)
        {
            return IExecute<Android.Content.Pm.ResolveInfo>("resolveService", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getServiceInfo(android.content.ComponentName,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.Content.Pm.ServiceInfo"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public Android.Content.Pm.ServiceInfo GetServiceInfo(Android.Content.ComponentName arg0, int arg1)
        {
            return IExecute<Android.Content.Pm.ServiceInfo>("getServiceInfo", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getResourcesForActivity(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="Android.Content.Res.Resources"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public Android.Content.Res.Resources GetResourcesForActivity(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<Android.Content.Res.Resources>("getResourcesForActivity", "(Landroid/content/ComponentName;)Landroid/content/res/Resources;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getResourcesForApplication(android.content.pm.ApplicationInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Pm.ApplicationInfo"/></param>
        /// <returns><see cref="Android.Content.Res.Resources"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public Android.Content.Res.Resources GetResourcesForApplication(Android.Content.Pm.ApplicationInfo arg0)
        {
            return IExecuteWithSignature<Android.Content.Res.Resources>("getResourcesForApplication", "(Landroid/content/pm/ApplicationInfo;)Landroid/content/res/Resources;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getResourcesForApplication(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Content.Res.Resources"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public Android.Content.Res.Resources GetResourcesForApplication(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Android.Content.Res.Resources>("getResourcesForApplication", "(Ljava/lang/String;)Landroid/content/res/Resources;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getXml(java.lang.String,int,android.content.pm.ApplicationInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Content.Pm.ApplicationInfo"/></param>
        /// <returns><see cref="Android.Content.Res.XmlResourceParser"/></returns>
        public Android.Content.Res.XmlResourceParser GetXml(Java.Lang.String arg0, int arg1, Android.Content.Pm.ApplicationInfo arg2)
        {
            return IExecute<Android.Content.Res.XmlResourceParser>("getXml", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getActivityBanner(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public Android.Graphics.Drawable.Drawable GetActivityBanner(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<Android.Graphics.Drawable.Drawable>("getActivityBanner", "(Landroid/content/ComponentName;)Landroid/graphics/drawable/Drawable;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getActivityBanner(android.content.Intent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Intent"/></param>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public Android.Graphics.Drawable.Drawable GetActivityBanner(Android.Content.Intent arg0)
        {
            return IExecuteWithSignature<Android.Graphics.Drawable.Drawable>("getActivityBanner", "(Landroid/content/Intent;)Landroid/graphics/drawable/Drawable;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getActivityIcon(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public Android.Graphics.Drawable.Drawable GetActivityIcon(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<Android.Graphics.Drawable.Drawable>("getActivityIcon", "(Landroid/content/ComponentName;)Landroid/graphics/drawable/Drawable;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getActivityIcon(android.content.Intent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Intent"/></param>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public Android.Graphics.Drawable.Drawable GetActivityIcon(Android.Content.Intent arg0)
        {
            return IExecuteWithSignature<Android.Graphics.Drawable.Drawable>("getActivityIcon", "(Landroid/content/Intent;)Landroid/graphics/drawable/Drawable;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getActivityLogo(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public Android.Graphics.Drawable.Drawable GetActivityLogo(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<Android.Graphics.Drawable.Drawable>("getActivityLogo", "(Landroid/content/ComponentName;)Landroid/graphics/drawable/Drawable;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getActivityLogo(android.content.Intent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Intent"/></param>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public Android.Graphics.Drawable.Drawable GetActivityLogo(Android.Content.Intent arg0)
        {
            return IExecuteWithSignature<Android.Graphics.Drawable.Drawable>("getActivityLogo", "(Landroid/content/Intent;)Landroid/graphics/drawable/Drawable;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getApplicationBanner(android.content.pm.ApplicationInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Pm.ApplicationInfo"/></param>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        public Android.Graphics.Drawable.Drawable GetApplicationBanner(Android.Content.Pm.ApplicationInfo arg0)
        {
            return IExecuteWithSignature<Android.Graphics.Drawable.Drawable>("getApplicationBanner", "(Landroid/content/pm/ApplicationInfo;)Landroid/graphics/drawable/Drawable;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getApplicationBanner(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public Android.Graphics.Drawable.Drawable GetApplicationBanner(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Android.Graphics.Drawable.Drawable>("getApplicationBanner", "(Ljava/lang/String;)Landroid/graphics/drawable/Drawable;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getApplicationIcon(android.content.pm.ApplicationInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Pm.ApplicationInfo"/></param>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        public Android.Graphics.Drawable.Drawable GetApplicationIcon(Android.Content.Pm.ApplicationInfo arg0)
        {
            return IExecuteWithSignature<Android.Graphics.Drawable.Drawable>("getApplicationIcon", "(Landroid/content/pm/ApplicationInfo;)Landroid/graphics/drawable/Drawable;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getApplicationIcon(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public Android.Graphics.Drawable.Drawable GetApplicationIcon(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Android.Graphics.Drawable.Drawable>("getApplicationIcon", "(Ljava/lang/String;)Landroid/graphics/drawable/Drawable;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getApplicationLogo(android.content.pm.ApplicationInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Pm.ApplicationInfo"/></param>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        public Android.Graphics.Drawable.Drawable GetApplicationLogo(Android.Content.Pm.ApplicationInfo arg0)
        {
            return IExecuteWithSignature<Android.Graphics.Drawable.Drawable>("getApplicationLogo", "(Landroid/content/pm/ApplicationInfo;)Landroid/graphics/drawable/Drawable;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getApplicationLogo(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public Android.Graphics.Drawable.Drawable GetApplicationLogo(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Android.Graphics.Drawable.Drawable>("getApplicationLogo", "(Ljava/lang/String;)Landroid/graphics/drawable/Drawable;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getDefaultActivityIcon()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        public Android.Graphics.Drawable.Drawable GetDefaultActivityIcon()
        {
            return IExecuteWithSignature<Android.Graphics.Drawable.Drawable>("getDefaultActivityIcon", "()Landroid/graphics/drawable/Drawable;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getDrawable(java.lang.String,int,android.content.pm.ApplicationInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Content.Pm.ApplicationInfo"/></param>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        public Android.Graphics.Drawable.Drawable GetDrawable(Java.Lang.String arg0, int arg1, Android.Content.Pm.ApplicationInfo arg2)
        {
            return IExecute<Android.Graphics.Drawable.Drawable>("getDrawable", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getUserBadgedDrawableForDensity(android.graphics.drawable.Drawable,android.os.UserHandle,android.graphics.Rect,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        /// <param name="arg1"><see cref="Android.Os.UserHandle"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.Rect"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        public Android.Graphics.Drawable.Drawable GetUserBadgedDrawableForDensity(Android.Graphics.Drawable.Drawable arg0, Android.Os.UserHandle arg1, Android.Graphics.Rect arg2, int arg3)
        {
            return IExecute<Android.Graphics.Drawable.Drawable>("getUserBadgedDrawableForDensity", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getUserBadgedIcon(android.graphics.drawable.Drawable,android.os.UserHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        /// <param name="arg1"><see cref="Android.Os.UserHandle"/></param>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        public Android.Graphics.Drawable.Drawable GetUserBadgedIcon(Android.Graphics.Drawable.Drawable arg0, Android.Os.UserHandle arg1)
        {
            return IExecute<Android.Graphics.Drawable.Drawable>("getUserBadgedIcon", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#addPermission(android.content.pm.PermissionInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Pm.PermissionInfo"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool AddPermission(Android.Content.Pm.PermissionInfo arg0)
        {
            return IExecuteWithSignature<bool>("addPermission", "(Landroid/content/pm/PermissionInfo;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#addPermissionAsync(android.content.pm.PermissionInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Pm.PermissionInfo"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool AddPermissionAsync(Android.Content.Pm.PermissionInfo arg0)
        {
            return IExecuteWithSignature<bool>("addPermissionAsync", "(Landroid/content/pm/PermissionInfo;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#canRequestPackageInstalls()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool CanRequestPackageInstalls()
        {
            return IExecuteWithSignature<bool>("canRequestPackageInstalls", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#hasSystemFeature(java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasSystemFeature(Java.Lang.String arg0, int arg1)
        {
            return IExecute<bool>("hasSystemFeature", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#hasSystemFeature(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasSystemFeature(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<bool>("hasSystemFeature", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#isInstantApp()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsInstantApp()
        {
            return IExecuteWithSignature<bool>("isInstantApp", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#isInstantApp(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsInstantApp(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<bool>("isInstantApp", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#isPermissionRevokedByPolicy(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsPermissionRevokedByPolicy(Java.Lang.String arg0, Java.Lang.String arg1)
        {
            return IExecute<bool>("isPermissionRevokedByPolicy", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#isSafeMode()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsSafeMode()
        {
            return IExecuteWithSignature<bool>("isSafeMode", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getInstantAppCookie()"/>
        /// </summary>
        /// <returns><see cref="byte"/></returns>
        public byte[] GetInstantAppCookie()
        {
            return IExecuteWithSignatureArray<byte>("getInstantAppCookie", "()[B");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#checkPermission(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public int CheckPermission(Java.Lang.String arg0, Java.Lang.String arg1)
        {
            return IExecute<int>("checkPermission", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#checkSignatures(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int CheckSignatures(int arg0, int arg1)
        {
            return IExecute<int>("checkSignatures", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#checkSignatures(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public int CheckSignatures(Java.Lang.String arg0, Java.Lang.String arg1)
        {
            return IExecute<int>("checkSignatures", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getApplicationEnabledSetting(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetApplicationEnabledSetting(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<int>("getApplicationEnabledSetting", "(Ljava/lang/String;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getComponentEnabledSetting(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetComponentEnabledSetting(Android.Content.ComponentName arg0)
        {
            return IExecuteWithSignature<int>("getComponentEnabledSetting", "(Landroid/content/ComponentName;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getInstantAppCookieMaxBytes()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetInstantAppCookieMaxBytes()
        {
            return IExecuteWithSignature<int>("getInstantAppCookieMaxBytes", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getPackageUid(java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public int GetPackageUid(Java.Lang.String arg0, int arg1)
        {
            return IExecute<int>("getPackageUid", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getPreferredActivities(java.util.List,java.util.List,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        /// <param name="arg1"><see cref="Java.Util.List"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetPreferredActivities(Java.Util.List<Android.Content.IntentFilter> arg0, Java.Util.List<Android.Content.ComponentName> arg1, Java.Lang.String arg2)
        {
            return IExecute<int>("getPreferredActivities", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getPackageGids(java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public int[] GetPackageGids(Java.Lang.String arg0, int arg1)
        {
            return IExecuteArray<int>("getPackageGids", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getPackageGids(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public int[] GetPackageGids(Java.Lang.String arg0)
        {
            return IExecuteWithSignatureArray<int>("getPackageGids", "(Ljava/lang/String;)[I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getApplicationLabel(android.content.pm.ApplicationInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Pm.ApplicationInfo"/></param>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetApplicationLabel(Android.Content.Pm.ApplicationInfo arg0)
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getApplicationLabel", "(Landroid/content/pm/ApplicationInfo;)Ljava/lang/CharSequence;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getText(java.lang.String,int,android.content.pm.ApplicationInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Content.Pm.ApplicationInfo"/></param>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetText(Java.Lang.String arg0, int arg1, Android.Content.Pm.ApplicationInfo arg2)
        {
            return IExecute<Java.Lang.CharSequence>("getText", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getUserBadgedLabel(java.lang.CharSequence,android.os.UserHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="Android.Os.UserHandle"/></param>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetUserBadgedLabel(Java.Lang.CharSequence arg0, Android.Os.UserHandle arg1)
        {
            return IExecute<Java.Lang.CharSequence>("getUserBadgedLabel", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getInstallerPackageName(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        [global::System.Obsolete()]
        public Java.Lang.String GetInstallerPackageName(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getInstallerPackageName", "(Ljava/lang/String;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getNameForUid(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetNameForUid(int arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getNameForUid", "(I)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#canonicalToCurrentPackageNames(java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String[] CanonicalToCurrentPackageNames(Java.Lang.String[] arg0)
        {
            return IExecuteWithSignatureArray<Java.Lang.String>("canonicalToCurrentPackageNames", "([Ljava/lang/String;)[Ljava/lang/String;", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#currentToCanonicalPackageNames(java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String[] CurrentToCanonicalPackageNames(Java.Lang.String[] arg0)
        {
            return IExecuteWithSignatureArray<Java.Lang.String>("currentToCanonicalPackageNames", "([Ljava/lang/String;)[Ljava/lang/String;", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getPackagesForUid(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String[] GetPackagesForUid(int arg0)
        {
            return IExecuteWithSignatureArray<Java.Lang.String>("getPackagesForUid", "(I)[Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getSystemSharedLibraryNames()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String[] GetSystemSharedLibraryNames()
        {
            return IExecuteWithSignatureArray<Java.Lang.String>("getSystemSharedLibraryNames", "()[Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getInstalledApplications(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Content.Pm.ApplicationInfo> GetInstalledApplications(int arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Android.Content.Pm.ApplicationInfo>>("getInstalledApplications", "(I)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#queryInstrumentation(java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Content.Pm.InstrumentationInfo> QueryInstrumentation(Java.Lang.String arg0, int arg1)
        {
            return IExecute<Java.Util.List<Android.Content.Pm.InstrumentationInfo>>("queryInstrumentation", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getInstalledPackages(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Content.Pm.PackageInfo> GetInstalledPackages(int arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Android.Content.Pm.PackageInfo>>("getInstalledPackages", "(I)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getPackagesHoldingPermissions(java.lang.String[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Content.Pm.PackageInfo> GetPackagesHoldingPermissions(Java.Lang.String[] arg0, int arg1)
        {
            return IExecute<Java.Util.List<Android.Content.Pm.PackageInfo>>("getPackagesHoldingPermissions", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getPreferredPackages(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        [global::System.Obsolete()]
        public Java.Util.List<Android.Content.Pm.PackageInfo> GetPreferredPackages(int arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Android.Content.Pm.PackageInfo>>("getPreferredPackages", "(I)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getAllPermissionGroups(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Content.Pm.PermissionGroupInfo> GetAllPermissionGroups(int arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Android.Content.Pm.PermissionGroupInfo>>("getAllPermissionGroups", "(I)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#queryPermissionsByGroup(java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public Java.Util.List<Android.Content.Pm.PermissionInfo> QueryPermissionsByGroup(Java.Lang.String arg0, int arg1)
        {
            return IExecute<Java.Util.List<Android.Content.Pm.PermissionInfo>>("queryPermissionsByGroup", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#queryContentProviders(java.lang.String,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Content.Pm.ProviderInfo> QueryContentProviders(Java.Lang.String arg0, int arg1, int arg2)
        {
            return IExecute<Java.Util.List<Android.Content.Pm.ProviderInfo>>("queryContentProviders", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#queryBroadcastReceivers(android.content.Intent,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Intent"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Content.Pm.ResolveInfo> QueryBroadcastReceivers(Android.Content.Intent arg0, int arg1)
        {
            return IExecute<Java.Util.List<Android.Content.Pm.ResolveInfo>>("queryBroadcastReceivers", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#queryIntentActivities(android.content.Intent,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Intent"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Content.Pm.ResolveInfo> QueryIntentActivities(Android.Content.Intent arg0, int arg1)
        {
            return IExecute<Java.Util.List<Android.Content.Pm.ResolveInfo>>("queryIntentActivities", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],android.content.Intent,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Android.Content.Intent"/></param>
        /// <param name="arg2"><see cref="Android.Content.Intent"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Content.Pm.ResolveInfo> QueryIntentActivityOptions(Android.Content.ComponentName arg0, Android.Content.Intent[] arg1, Android.Content.Intent arg2, int arg3)
        {
            return IExecute<Java.Util.List<Android.Content.Pm.ResolveInfo>>("queryIntentActivityOptions", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#queryIntentContentProviders(android.content.Intent,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Intent"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Content.Pm.ResolveInfo> QueryIntentContentProviders(Android.Content.Intent arg0, int arg1)
        {
            return IExecute<Java.Util.List<Android.Content.Pm.ResolveInfo>>("queryIntentContentProviders", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#queryIntentServices(android.content.Intent,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Intent"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Content.Pm.ResolveInfo> QueryIntentServices(Android.Content.Intent arg0, int arg1)
        {
            return IExecute<Java.Util.List<Android.Content.Pm.ResolveInfo>>("queryIntentServices", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getSharedLibraries(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Content.Pm.SharedLibraryInfo> GetSharedLibraries(int arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Android.Content.Pm.SharedLibraryInfo>>("getSharedLibraries", "(I)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#addPackageToPreferred(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        [global::System.Obsolete()]
        public void AddPackageToPreferred(Java.Lang.String arg0)
        {
            IExecuteWithSignature("addPackageToPreferred", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.IntentFilter"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg3"><see cref="Android.Content.ComponentName"/></param>
        [global::System.Obsolete()]
        public void AddPreferredActivity(Android.Content.IntentFilter arg0, int arg1, Android.Content.ComponentName[] arg2, Android.Content.ComponentName arg3)
        {
            IExecute("addPreferredActivity", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#clearInstantAppCookie()"/>
        /// </summary>
        public void ClearInstantAppCookie()
        {
            IExecuteWithSignature("clearInstantAppCookie", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#clearPackagePreferredActivities(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        [global::System.Obsolete()]
        public void ClearPackagePreferredActivities(Java.Lang.String arg0)
        {
            IExecuteWithSignature("clearPackagePreferredActivities", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#extendVerificationTimeout(int,int,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        public void ExtendVerificationTimeout(int arg0, int arg1, long arg2)
        {
            IExecute("extendVerificationTimeout", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#removePackageFromPreferred(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        [global::System.Obsolete()]
        public void RemovePackageFromPreferred(Java.Lang.String arg0)
        {
            IExecuteWithSignature("removePackageFromPreferred", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#removePermission(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void RemovePermission(Java.Lang.String arg0)
        {
            IExecuteWithSignature("removePermission", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#setApplicationCategoryHint(java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetApplicationCategoryHint(Java.Lang.String arg0, int arg1)
        {
            IExecute("setApplicationCategoryHint", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#setApplicationEnabledSetting(java.lang.String,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void SetApplicationEnabledSetting(Java.Lang.String arg0, int arg1, int arg2)
        {
            IExecute("setApplicationEnabledSetting", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#setComponentEnabledSetting(android.content.ComponentName,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void SetComponentEnabledSetting(Android.Content.ComponentName arg0, int arg1, int arg2)
        {
            IExecute("setComponentEnabledSetting", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#setInstallerPackageName(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        public void SetInstallerPackageName(Java.Lang.String arg0, Java.Lang.String arg1)
        {
            IExecute("setInstallerPackageName", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#updateInstantAppCookie(byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        public void UpdateInstantAppCookie(byte[] arg0)
        {
            IExecuteWithSignature("updateInstantAppCookie", "([B)V", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#verifyPendingInstall(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void VerifyPendingInstall(int arg0, int arg1)
        {
            IExecute("verifyPendingInstall", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getLaunchIntentSenderForPackage(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Content.IntentSender"/></returns>
        public Android.Content.IntentSender GetLaunchIntentSenderForPackage(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Android.Content.IntentSender>("getLaunchIntentSenderForPackage", "(Ljava/lang/String;)Landroid/content/IntentSender;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getActivityInfo(android.content.ComponentName,android.content.pm.PackageManager.ComponentInfoFlags)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Android.Content.Pm.PackageManager.ComponentInfoFlags"/></param>
        /// <returns><see cref="Android.Content.Pm.ActivityInfo"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public Android.Content.Pm.ActivityInfo GetActivityInfo(Android.Content.ComponentName arg0, Android.Content.Pm.PackageManager.ComponentInfoFlags arg1)
        {
            return IExecute<Android.Content.Pm.ActivityInfo>("getActivityInfo", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getReceiverInfo(android.content.ComponentName,android.content.pm.PackageManager.ComponentInfoFlags)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Android.Content.Pm.PackageManager.ComponentInfoFlags"/></param>
        /// <returns><see cref="Android.Content.Pm.ActivityInfo"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public Android.Content.Pm.ActivityInfo GetReceiverInfo(Android.Content.ComponentName arg0, Android.Content.Pm.PackageManager.ComponentInfoFlags arg1)
        {
            return IExecute<Android.Content.Pm.ActivityInfo>("getReceiverInfo", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getApplicationInfo(java.lang.String,android.content.pm.PackageManager.ApplicationInfoFlags)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Content.Pm.PackageManager.ApplicationInfoFlags"/></param>
        /// <returns><see cref="Android.Content.Pm.ApplicationInfo"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public Android.Content.Pm.ApplicationInfo GetApplicationInfo(Java.Lang.String arg0, Android.Content.Pm.PackageManager.ApplicationInfoFlags arg1)
        {
            return IExecute<Android.Content.Pm.ApplicationInfo>("getApplicationInfo", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getInstallSourceInfo(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Content.Pm.InstallSourceInfo"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public Android.Content.Pm.InstallSourceInfo GetInstallSourceInfo(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Android.Content.Pm.InstallSourceInfo>("getInstallSourceInfo", "(Ljava/lang/String;)Landroid/content/pm/InstallSourceInfo;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getModuleInfo(java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.Content.Pm.ModuleInfo"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public Android.Content.Pm.ModuleInfo GetModuleInfo(Java.Lang.String arg0, int arg1)
        {
            return IExecute<Android.Content.Pm.ModuleInfo>("getModuleInfo", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getPackageArchiveInfo(java.lang.String,android.content.pm.PackageManager.PackageInfoFlags)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Content.Pm.PackageManager.PackageInfoFlags"/></param>
        /// <returns><see cref="Android.Content.Pm.PackageInfo"/></returns>
        public Android.Content.Pm.PackageInfo GetPackageArchiveInfo(Java.Lang.String arg0, Android.Content.Pm.PackageManager.PackageInfoFlags arg1)
        {
            return IExecute<Android.Content.Pm.PackageInfo>("getPackageArchiveInfo", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getPackageArchiveInfo(java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.Content.Pm.PackageInfo"/></returns>
        public Android.Content.Pm.PackageInfo GetPackageArchiveInfo(Java.Lang.String arg0, int arg1)
        {
            return IExecute<Android.Content.Pm.PackageInfo>("getPackageArchiveInfo", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getPackageInfo(android.content.pm.VersionedPackage,android.content.pm.PackageManager.PackageInfoFlags)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Pm.VersionedPackage"/></param>
        /// <param name="arg1"><see cref="Android.Content.Pm.PackageManager.PackageInfoFlags"/></param>
        /// <returns><see cref="Android.Content.Pm.PackageInfo"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public Android.Content.Pm.PackageInfo GetPackageInfo(Android.Content.Pm.VersionedPackage arg0, Android.Content.Pm.PackageManager.PackageInfoFlags arg1)
        {
            return IExecute<Android.Content.Pm.PackageInfo>("getPackageInfo", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getPackageInfo(java.lang.String,android.content.pm.PackageManager.PackageInfoFlags)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Content.Pm.PackageManager.PackageInfoFlags"/></param>
        /// <returns><see cref="Android.Content.Pm.PackageInfo"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public Android.Content.Pm.PackageInfo GetPackageInfo(Java.Lang.String arg0, Android.Content.Pm.PackageManager.PackageInfoFlags arg1)
        {
            return IExecute<Android.Content.Pm.PackageInfo>("getPackageInfo", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getProperty(java.lang.String,android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="Android.Content.Pm.PackageManager.Property"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public Android.Content.Pm.PackageManager.Property GetProperty(Java.Lang.String arg0, Android.Content.ComponentName arg1)
        {
            return IExecute<Android.Content.Pm.PackageManager.Property>("getProperty", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getProperty(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Content.Pm.PackageManager.Property"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public Android.Content.Pm.PackageManager.Property GetProperty(Java.Lang.String arg0, Java.Lang.String arg1)
        {
            return IExecute<Android.Content.Pm.PackageManager.Property>("getProperty", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getProviderInfo(android.content.ComponentName,android.content.pm.PackageManager.ComponentInfoFlags)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Android.Content.Pm.PackageManager.ComponentInfoFlags"/></param>
        /// <returns><see cref="Android.Content.Pm.ProviderInfo"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public Android.Content.Pm.ProviderInfo GetProviderInfo(Android.Content.ComponentName arg0, Android.Content.Pm.PackageManager.ComponentInfoFlags arg1)
        {
            return IExecute<Android.Content.Pm.ProviderInfo>("getProviderInfo", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#resolveContentProvider(java.lang.String,android.content.pm.PackageManager.ComponentInfoFlags)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Content.Pm.PackageManager.ComponentInfoFlags"/></param>
        /// <returns><see cref="Android.Content.Pm.ProviderInfo"/></returns>
        public Android.Content.Pm.ProviderInfo ResolveContentProvider(Java.Lang.String arg0, Android.Content.Pm.PackageManager.ComponentInfoFlags arg1)
        {
            return IExecute<Android.Content.Pm.ProviderInfo>("resolveContentProvider", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#resolveActivity(android.content.Intent,android.content.pm.PackageManager.ResolveInfoFlags)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Intent"/></param>
        /// <param name="arg1"><see cref="Android.Content.Pm.PackageManager.ResolveInfoFlags"/></param>
        /// <returns><see cref="Android.Content.Pm.ResolveInfo"/></returns>
        public Android.Content.Pm.ResolveInfo ResolveActivity(Android.Content.Intent arg0, Android.Content.Pm.PackageManager.ResolveInfoFlags arg1)
        {
            return IExecute<Android.Content.Pm.ResolveInfo>("resolveActivity", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#resolveService(android.content.Intent,android.content.pm.PackageManager.ResolveInfoFlags)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Intent"/></param>
        /// <param name="arg1"><see cref="Android.Content.Pm.PackageManager.ResolveInfoFlags"/></param>
        /// <returns><see cref="Android.Content.Pm.ResolveInfo"/></returns>
        public Android.Content.Pm.ResolveInfo ResolveService(Android.Content.Intent arg0, Android.Content.Pm.PackageManager.ResolveInfoFlags arg1)
        {
            return IExecute<Android.Content.Pm.ResolveInfo>("resolveService", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getServiceInfo(android.content.ComponentName,android.content.pm.PackageManager.ComponentInfoFlags)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Android.Content.Pm.PackageManager.ComponentInfoFlags"/></param>
        /// <returns><see cref="Android.Content.Pm.ServiceInfo"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public Android.Content.Pm.ServiceInfo GetServiceInfo(Android.Content.ComponentName arg0, Android.Content.Pm.PackageManager.ComponentInfoFlags arg1)
        {
            return IExecute<Android.Content.Pm.ServiceInfo>("getServiceInfo", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getResourcesForApplication(android.content.pm.ApplicationInfo,android.content.res.Configuration)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Pm.ApplicationInfo"/></param>
        /// <param name="arg1"><see cref="Android.Content.Res.Configuration"/></param>
        /// <returns><see cref="Android.Content.Res.Resources"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public Android.Content.Res.Resources GetResourcesForApplication(Android.Content.Pm.ApplicationInfo arg0, Android.Content.Res.Configuration arg1)
        {
            return IExecute<Android.Content.Res.Resources>("getResourcesForApplication", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getSuspendedPackageAppExtras()"/>
        /// </summary>
        /// <returns><see cref="Android.Os.Bundle"/></returns>
        public Android.Os.Bundle GetSuspendedPackageAppExtras()
        {
            return IExecuteWithSignature<Android.Os.Bundle>("getSuspendedPackageAppExtras", "()Landroid/os/Bundle;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#addWhitelistedRestrictedPermission(java.lang.String,java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool AddWhitelistedRestrictedPermission(Java.Lang.String arg0, Java.Lang.String arg1, int arg2)
        {
            return IExecute<bool>("addWhitelistedRestrictedPermission", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#canPackageQuery(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public bool CanPackageQuery(Java.Lang.String arg0, Java.Lang.String arg1)
        {
            return IExecute<bool>("canPackageQuery", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getSyntheticAppDetailsActivityEnabled(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool GetSyntheticAppDetailsActivityEnabled(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<bool>("getSyntheticAppDetailsActivityEnabled", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#hasSigningCertificate(int,byte[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasSigningCertificate(int arg0, byte[] arg1, int arg2)
        {
            return IExecute<bool>("hasSigningCertificate", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#hasSigningCertificate(java.lang.String,byte[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasSigningCertificate(Java.Lang.String arg0, byte[] arg1, int arg2)
        {
            return IExecute<bool>("hasSigningCertificate", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#isAutoRevokeWhitelisted()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAutoRevokeWhitelisted()
        {
            return IExecuteWithSignature<bool>("isAutoRevokeWhitelisted", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#isAutoRevokeWhitelisted(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsAutoRevokeWhitelisted(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<bool>("isAutoRevokeWhitelisted", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#isDefaultApplicationIcon(android.graphics.drawable.Drawable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsDefaultApplicationIcon(Android.Graphics.Drawable.Drawable arg0)
        {
            return IExecuteWithSignature<bool>("isDefaultApplicationIcon", "(Landroid/graphics/drawable/Drawable;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#isDeviceUpgrading()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDeviceUpgrading()
        {
            return IExecuteWithSignature<bool>("isDeviceUpgrading", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#isPackageSuspended()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsPackageSuspended()
        {
            return IExecuteWithSignature<bool>("isPackageSuspended", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#isPackageSuspended(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public bool IsPackageSuspended(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<bool>("isPackageSuspended", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#removeWhitelistedRestrictedPermission(java.lang.String,java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RemoveWhitelistedRestrictedPermission(Java.Lang.String arg0, Java.Lang.String arg1, int arg2)
        {
            return IExecute<bool>("removeWhitelistedRestrictedPermission", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#setAutoRevokeWhitelisted(java.lang.String,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetAutoRevokeWhitelisted(Java.Lang.String arg0, bool arg1)
        {
            return IExecute<bool>("setAutoRevokeWhitelisted", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#canPackageQuery(java.lang.String,java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public bool[] CanPackageQuery(Java.Lang.String arg0, Java.Lang.String[] arg1)
        {
            return IExecuteArray<bool>("canPackageQuery", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getPackageUid(java.lang.String,android.content.pm.PackageManager.PackageInfoFlags)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Content.Pm.PackageManager.PackageInfoFlags"/></param>
        /// <returns><see cref="int"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public int GetPackageUid(Java.Lang.String arg0, Android.Content.Pm.PackageManager.PackageInfoFlags arg1)
        {
            return IExecute<int>("getPackageUid", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getTargetSdkVersion(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public int GetTargetSdkVersion(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<int>("getTargetSdkVersion", "(Ljava/lang/String;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getPackageGids(java.lang.String,android.content.pm.PackageManager.PackageInfoFlags)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Content.Pm.PackageManager.PackageInfoFlags"/></param>
        /// <returns><see cref="int"/></returns>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public int[] GetPackageGids(Java.Lang.String arg0, Android.Content.Pm.PackageManager.PackageInfoFlags arg1)
        {
            return IExecuteArray<int>("getPackageGids", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getBackgroundPermissionOptionLabel()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetBackgroundPermissionOptionLabel()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getBackgroundPermissionOptionLabel", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getInstalledApplications(android.content.pm.PackageManager.ApplicationInfoFlags)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Pm.PackageManager.ApplicationInfoFlags"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Content.Pm.ApplicationInfo> GetInstalledApplications(Android.Content.Pm.PackageManager.ApplicationInfoFlags arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Android.Content.Pm.ApplicationInfo>>("getInstalledApplications", "(Landroid/content/pm/PackageManager$ApplicationInfoFlags;)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getInstalledModules(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Content.Pm.ModuleInfo> GetInstalledModules(int arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Android.Content.Pm.ModuleInfo>>("getInstalledModules", "(I)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getInstalledPackages(android.content.pm.PackageManager.PackageInfoFlags)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Pm.PackageManager.PackageInfoFlags"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Content.Pm.PackageInfo> GetInstalledPackages(Android.Content.Pm.PackageManager.PackageInfoFlags arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Android.Content.Pm.PackageInfo>>("getInstalledPackages", "(Landroid/content/pm/PackageManager$PackageInfoFlags;)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getPackagesHoldingPermissions(java.lang.String[],android.content.pm.PackageManager.PackageInfoFlags)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Content.Pm.PackageManager.PackageInfoFlags"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Content.Pm.PackageInfo> GetPackagesHoldingPermissions(Java.Lang.String[] arg0, Android.Content.Pm.PackageManager.PackageInfoFlags arg1)
        {
            return IExecute<Java.Util.List<Android.Content.Pm.PackageInfo>>("getPackagesHoldingPermissions", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#queryActivityProperty(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Content.Pm.PackageManager.Property> QueryActivityProperty(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Android.Content.Pm.PackageManager.Property>>("queryActivityProperty", "(Ljava/lang/String;)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#queryApplicationProperty(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Content.Pm.PackageManager.Property> QueryApplicationProperty(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Android.Content.Pm.PackageManager.Property>>("queryApplicationProperty", "(Ljava/lang/String;)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#queryProviderProperty(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Content.Pm.PackageManager.Property> QueryProviderProperty(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Android.Content.Pm.PackageManager.Property>>("queryProviderProperty", "(Ljava/lang/String;)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#queryReceiverProperty(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Content.Pm.PackageManager.Property> QueryReceiverProperty(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Android.Content.Pm.PackageManager.Property>>("queryReceiverProperty", "(Ljava/lang/String;)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#queryServiceProperty(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Content.Pm.PackageManager.Property> QueryServiceProperty(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Android.Content.Pm.PackageManager.Property>>("queryServiceProperty", "(Ljava/lang/String;)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#queryContentProviders(java.lang.String,int,android.content.pm.PackageManager.ComponentInfoFlags)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Content.Pm.PackageManager.ComponentInfoFlags"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Content.Pm.ProviderInfo> QueryContentProviders(Java.Lang.String arg0, int arg1, Android.Content.Pm.PackageManager.ComponentInfoFlags arg2)
        {
            return IExecute<Java.Util.List<Android.Content.Pm.ProviderInfo>>("queryContentProviders", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#queryBroadcastReceivers(android.content.Intent,android.content.pm.PackageManager.ResolveInfoFlags)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Intent"/></param>
        /// <param name="arg1"><see cref="Android.Content.Pm.PackageManager.ResolveInfoFlags"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Content.Pm.ResolveInfo> QueryBroadcastReceivers(Android.Content.Intent arg0, Android.Content.Pm.PackageManager.ResolveInfoFlags arg1)
        {
            return IExecute<Java.Util.List<Android.Content.Pm.ResolveInfo>>("queryBroadcastReceivers", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#queryIntentActivities(android.content.Intent,android.content.pm.PackageManager.ResolveInfoFlags)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Intent"/></param>
        /// <param name="arg1"><see cref="Android.Content.Pm.PackageManager.ResolveInfoFlags"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Content.Pm.ResolveInfo> QueryIntentActivities(Android.Content.Intent arg0, Android.Content.Pm.PackageManager.ResolveInfoFlags arg1)
        {
            return IExecute<Java.Util.List<Android.Content.Pm.ResolveInfo>>("queryIntentActivities", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#queryIntentActivityOptions(android.content.ComponentName,java.util.List,android.content.Intent,android.content.pm.PackageManager.ResolveInfoFlags)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        /// <param name="arg1"><see cref="Java.Util.List"/></param>
        /// <param name="arg2"><see cref="Android.Content.Intent"/></param>
        /// <param name="arg3"><see cref="Android.Content.Pm.PackageManager.ResolveInfoFlags"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Content.Pm.ResolveInfo> QueryIntentActivityOptions(Android.Content.ComponentName arg0, Java.Util.List<Android.Content.Intent> arg1, Android.Content.Intent arg2, Android.Content.Pm.PackageManager.ResolveInfoFlags arg3)
        {
            return IExecute<Java.Util.List<Android.Content.Pm.ResolveInfo>>("queryIntentActivityOptions", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#queryIntentContentProviders(android.content.Intent,android.content.pm.PackageManager.ResolveInfoFlags)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Intent"/></param>
        /// <param name="arg1"><see cref="Android.Content.Pm.PackageManager.ResolveInfoFlags"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Content.Pm.ResolveInfo> QueryIntentContentProviders(Android.Content.Intent arg0, Android.Content.Pm.PackageManager.ResolveInfoFlags arg1)
        {
            return IExecute<Java.Util.List<Android.Content.Pm.ResolveInfo>>("queryIntentContentProviders", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#queryIntentServices(android.content.Intent,android.content.pm.PackageManager.ResolveInfoFlags)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Intent"/></param>
        /// <param name="arg1"><see cref="Android.Content.Pm.PackageManager.ResolveInfoFlags"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Content.Pm.ResolveInfo> QueryIntentServices(Android.Content.Intent arg0, Android.Content.Pm.PackageManager.ResolveInfoFlags arg1)
        {
            return IExecute<Java.Util.List<Android.Content.Pm.ResolveInfo>>("queryIntentServices", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getSharedLibraries(android.content.pm.PackageManager.PackageInfoFlags)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Pm.PackageManager.PackageInfoFlags"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Content.Pm.SharedLibraryInfo> GetSharedLibraries(Android.Content.Pm.PackageManager.PackageInfoFlags arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Android.Content.Pm.SharedLibraryInfo>>("getSharedLibraries", "(Landroid/content/pm/PackageManager$PackageInfoFlags;)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getMimeGroup(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Util.Set"/></returns>
        public Java.Util.Set<Java.Lang.String> GetMimeGroup(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Java.Util.Set<Java.Lang.String>>("getMimeGroup", "(Ljava/lang/String;)Ljava/util/Set;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getWhitelistedRestrictedPermissions(java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.Set"/></returns>
        public Java.Util.Set<Java.Lang.String> GetWhitelistedRestrictedPermissions(Java.Lang.String arg0, int arg1)
        {
            return IExecute<Java.Util.Set<Java.Lang.String>>("getWhitelistedRestrictedPermissions", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getGroupOfPlatformPermission(java.lang.String,java.util.concurrent.Executor,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg2"><see cref="Java.Util.Function.Consumer"/></param>
        public void GetGroupOfPlatformPermission(Java.Lang.String arg0, Java.Util.Concurrent.Executor arg1, Java.Util.Function.Consumer<Java.Lang.String> arg2)
        {
            IExecute("getGroupOfPlatformPermission", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#getPlatformPermissionsForGroup(java.lang.String,java.util.concurrent.Executor,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg2"><see cref="Java.Util.Function.Consumer"/></param>
        public void GetPlatformPermissionsForGroup(Java.Lang.String arg0, Java.Util.Concurrent.Executor arg1, Java.Util.Function.Consumer<Java.Util.List<Java.Lang.String>> arg2)
        {
            IExecute("getPlatformPermissionsForGroup", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#relinquishUpdateOwnership(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void RelinquishUpdateOwnership(Java.Lang.String arg0)
        {
            IExecuteWithSignature("relinquishUpdateOwnership", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#requestChecksums(java.lang.String,boolean,int,java.util.List,android.content.pm.PackageManager.OnChecksumsReadyListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Util.List"/></param>
        /// <param name="arg4"><see cref="Android.Content.Pm.PackageManager.OnChecksumsReadyListener"/></param>
        /// <exception cref="Java.Security.Cert.CertificateEncodingException"/>
        /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
        public void RequestChecksums(Java.Lang.String arg0, bool arg1, int arg2, Java.Util.List<Java.Security.Cert.Certificate> arg3, Android.Content.Pm.PackageManager.OnChecksumsReadyListener arg4)
        {
            IExecute("requestChecksums", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#setComponentEnabledSettings(java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        public void SetComponentEnabledSettings(Java.Util.List<Android.Content.Pm.PackageManager.ComponentEnabledSetting> arg0)
        {
            IExecuteWithSignature("setComponentEnabledSettings", "(Ljava/util/List;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.html#setMimeGroup(java.lang.String,java.util.Set)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Util.Set"/></param>
        public void SetMimeGroup(Java.Lang.String arg0, Java.Util.Set<Java.Lang.String> arg1)
        {
            IExecute("setMimeGroup", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region ApplicationInfoFlags
        public partial class ApplicationInfoFlags
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.ApplicationInfoFlags.html#of(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.Content.Pm.PackageManager.ApplicationInfoFlags"/></returns>
            public static Android.Content.Pm.PackageManager.ApplicationInfoFlags Of(long arg0)
            {
                return SExecuteWithSignature<Android.Content.Pm.PackageManager.ApplicationInfoFlags>(LocalBridgeClazz, "of", "(J)Landroid/content/pm/PackageManager$ApplicationInfoFlags;", arg0);
            }

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.ApplicationInfoFlags.html#getValue()"/>
            /// </summary>
            /// <returns><see cref="long"/></returns>
            public long GetValue()
            {
                return IExecuteWithSignature<long>("getValue", "()J");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ComponentEnabledSetting
        public partial class ComponentEnabledSetting
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.ComponentEnabledSetting.html#%3Cinit%3E(android.content.ComponentName,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            public ComponentEnabledSetting(Android.Content.ComponentName arg0, int arg1, int arg2)
                : base(arg0, arg1, arg2)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.ComponentEnabledSetting.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.ComponentEnabledSetting.html#getComponentName()"/>
            /// </summary>
            /// <returns><see cref="Android.Content.ComponentName"/></returns>
            public Android.Content.ComponentName GetComponentName()
            {
                return IExecuteWithSignature<Android.Content.ComponentName>("getComponentName", "()Landroid/content/ComponentName;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.ComponentEnabledSetting.html#describeContents()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int DescribeContents()
            {
                return IExecuteWithSignature<int>("describeContents", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.ComponentEnabledSetting.html#getEnabledFlags()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetEnabledFlags()
            {
                return IExecuteWithSignature<int>("getEnabledFlags", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.ComponentEnabledSetting.html#getEnabledState()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetEnabledState()
            {
                return IExecuteWithSignature<int>("getEnabledState", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.ComponentEnabledSetting.html#writeToParcel(android.os.Parcel,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
            {
                IExecute("writeToParcel", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ComponentInfoFlags
        public partial class ComponentInfoFlags
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.ComponentInfoFlags.html#of(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.Content.Pm.PackageManager.ComponentInfoFlags"/></returns>
            public static Android.Content.Pm.PackageManager.ComponentInfoFlags Of(long arg0)
            {
                return SExecuteWithSignature<Android.Content.Pm.PackageManager.ComponentInfoFlags>(LocalBridgeClazz, "of", "(J)Landroid/content/pm/PackageManager$ComponentInfoFlags;", arg0);
            }

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.ComponentInfoFlags.html#getValue()"/>
            /// </summary>
            /// <returns><see cref="long"/></returns>
            public long GetValue()
            {
                return IExecuteWithSignature<long>("getValue", "()J");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region NameNotFoundException
        public partial class NameNotFoundException
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnChecksumsReadyListener
        public partial class OnChecksumsReadyListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnChecksumsReadyListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onChecksumsReady", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Java.Util.List<Android.Content.Pm.ApkChecksum>>>>(OnChecksumsReadyEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/content/pm/PackageManager.OnChecksumsReadyListener.html#onChecksumsReady(java.util.List)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnChecksumsReady"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Java.Util.List<Android.Content.Pm.ApkChecksum>> OnOnChecksumsReady { get; set; } = null;

            void OnChecksumsReadyEventHandler(object sender, CLRListenerEventArgs<CLREventData<Java.Util.List<Android.Content.Pm.ApkChecksum>>> data)
            {
                var methodToExecute = (OnOnChecksumsReady != null) ? OnOnChecksumsReady : OnChecksumsReady;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.OnChecksumsReadyListener.html#onChecksumsReady(java.util.List)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.List"/></param>
            public virtual void OnChecksumsReady(Java.Util.List<Android.Content.Pm.ApkChecksum> arg0)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnChecksumsReadyListenerDirect
        public partial class OnChecksumsReadyListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.OnChecksumsReadyListener.html#onChecksumsReady(java.util.List)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.List"/></param>
            public override void OnChecksumsReady(Java.Util.List<Android.Content.Pm.ApkChecksum> arg0)
            {
                IExecuteWithSignature("onChecksumsReady", "(Ljava/util/List;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region PackageInfoFlags
        public partial class PackageInfoFlags
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.PackageInfoFlags.html#of(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.Content.Pm.PackageManager.PackageInfoFlags"/></returns>
            public static Android.Content.Pm.PackageManager.PackageInfoFlags Of(long arg0)
            {
                return SExecuteWithSignature<Android.Content.Pm.PackageManager.PackageInfoFlags>(LocalBridgeClazz, "of", "(J)Landroid/content/pm/PackageManager$PackageInfoFlags;", arg0);
            }

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.PackageInfoFlags.html#getValue()"/>
            /// </summary>
            /// <returns><see cref="long"/></returns>
            public long GetValue()
            {
                return IExecuteWithSignature<long>("getValue", "()J");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Property
        public partial class Property
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.Property.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.Property.html#getBoolean()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool GetBoolean()
            {
                return IExecuteWithSignature<bool>("getBoolean", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.Property.html#isBoolean()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsBoolean()
            {
                return IExecuteWithSignature<bool>("isBoolean", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.Property.html#isFloat()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsFloat()
            {
                return IExecuteWithSignature<bool>("isFloat", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.Property.html#isInteger()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsInteger()
            {
                return IExecuteWithSignature<bool>("isInteger", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.Property.html#isResourceId()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsResourceId()
            {
                return IExecuteWithSignature<bool>("isResourceId", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.Property.html#isString()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsString()
            {
                return IExecuteWithSignature<bool>("isString", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.Property.html#getFloat()"/>
            /// </summary>
            /// <returns><see cref="float"/></returns>
            public float GetFloat()
            {
                return IExecuteWithSignature<float>("getFloat", "()F");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.Property.html#describeContents()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int DescribeContents()
            {
                return IExecuteWithSignature<int>("describeContents", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.Property.html#getInteger()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetInteger()
            {
                return IExecuteWithSignature<int>("getInteger", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.Property.html#getResourceId()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetResourceId()
            {
                return IExecuteWithSignature<int>("getResourceId", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.Property.html#getClassName()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetClassName()
            {
                return IExecuteWithSignature<Java.Lang.String>("getClassName", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.Property.html#getName()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetName()
            {
                return IExecuteWithSignature<Java.Lang.String>("getName", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.Property.html#getPackageName()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetPackageName()
            {
                return IExecuteWithSignature<Java.Lang.String>("getPackageName", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.Property.html#getString()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetString()
            {
                return IExecuteWithSignature<Java.Lang.String>("getString", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.Property.html#writeToParcel(android.os.Parcel,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
            {
                IExecute("writeToParcel", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ResolveInfoFlags
        public partial class ResolveInfoFlags
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.ResolveInfoFlags.html#of(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.Content.Pm.PackageManager.ResolveInfoFlags"/></returns>
            public static Android.Content.Pm.PackageManager.ResolveInfoFlags Of(long arg0)
            {
                return SExecuteWithSignature<Android.Content.Pm.PackageManager.ResolveInfoFlags>(LocalBridgeClazz, "of", "(J)Landroid/content/pm/PackageManager$ResolveInfoFlags;", arg0);
            }

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/PackageManager.ResolveInfoFlags.html#getValue()"/>
            /// </summary>
            /// <returns><see cref="long"/></returns>
            public long GetValue()
            {
                return IExecuteWithSignature<long>("getValue", "()J");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright (c) 2022-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Content.Pm
{
    #region SigningInfo declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/content/pm/SigningInfo.html"/>
    /// </summary>
    public partial class SigningInfo : Android.Os.Parcelable
    {
        const string _bridgeClassName = "android.content.pm.SigningInfo";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public SigningInfo() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public SigningInfo(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public SigningInfo(params object[] args) : base(args) { }
    
        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region SigningInfo implementation
    public partial class SigningInfo
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/SigningInfo.html#%3Cinit%3E(android.content.pm.SigningInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Pm.SigningInfo"/></param>
        public SigningInfo(Android.Content.Pm.SigningInfo arg0)
            : base(arg0)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/SigningInfo.html#%3Cinit%3E(int,java.util.Collection,java.util.Collection,java.util.Collection)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Util.Collection"/></param>
        /// <param name="arg2"><see cref="Java.Util.Collection"/></param>
        /// <param name="arg3"><see cref="Java.Util.Collection"/></param>
        public SigningInfo(int arg0, Java.Util.Collection<Android.Content.Pm.Signature> arg1, Java.Util.Collection<Java.Security.PublicKey> arg2, Java.Util.Collection<Android.Content.Pm.Signature> arg3)
            : base(arg0, arg1, arg2, arg3)
        {
        }
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/SigningInfo.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/SigningInfo.html#getApkContentsSigners()"/>
        /// </summary>
        /// <returns><see cref="Android.Content.Pm.Signature"/></returns>
        public Android.Content.Pm.Signature[] GetApkContentsSigners()
        {
            return IExecuteWithSignatureArray<Android.Content.Pm.Signature>("getApkContentsSigners", "()[Landroid/content/pm/Signature;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/SigningInfo.html#getSigningCertificateHistory()"/>
        /// </summary>
        /// <returns><see cref="Android.Content.Pm.Signature"/></returns>
        public Android.Content.Pm.Signature[] GetSigningCertificateHistory()
        {
            return IExecuteWithSignatureArray<Android.Content.Pm.Signature>("getSigningCertificateHistory", "()[Landroid/content/pm/Signature;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/SigningInfo.html#hasMultipleSigners()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasMultipleSigners()
        {
            return IExecuteWithSignature<bool>("hasMultipleSigners", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/SigningInfo.html#hasPastSigningCertificates()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasPastSigningCertificates()
        {
            return IExecuteWithSignature<bool>("hasPastSigningCertificates", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/SigningInfo.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/SigningInfo.html#getSchemeVersion()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetSchemeVersion()
        {
            return IExecuteWithSignature<int>("getSchemeVersion", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/SigningInfo.html#getPublicKeys()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Collection"/></returns>
        public Java.Util.Collection<Java.Security.PublicKey> GetPublicKeys()
        {
            return IExecuteWithSignature<Java.Util.Collection<Java.Security.PublicKey>>("getPublicKeys", "()Ljava/util/Collection;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/SigningInfo.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
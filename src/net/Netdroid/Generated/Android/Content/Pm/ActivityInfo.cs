/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.5.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Content.Pm
{
    #region ActivityInfo
    public partial class ActivityInfo
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#%3Cinit%3E(android.content.pm.ActivityInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Pm.ActivityInfo"/></param>
        public ActivityInfo(Android.Content.Pm.ActivityInfo arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Android.Content.Pm.ActivityInfo"/> to <see cref="Android.Os.Parcelable"/>
        /// </summary>
        public static implicit operator Android.Os.Parcelable(Android.Content.Pm.ActivityInfo t) => t.Cast<Android.Os.Parcelable>();

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#windowLayout"/>
        /// </summary>
        public Android.Content.Pm.ActivityInfo.WindowLayout windowLayout { get { return IGetField<Android.Content.Pm.ActivityInfo.WindowLayout>("windowLayout"); } set { ISetField("windowLayout", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#colorMode"/>
        /// </summary>
        public int colorMode { get { return IGetField<int>("colorMode"); } set { ISetField("colorMode", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#configChanges"/>
        /// </summary>
        public int configChanges { get { return IGetField<int>("configChanges"); } set { ISetField("configChanges", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#documentLaunchMode"/>
        /// </summary>
        public int documentLaunchMode { get { return IGetField<int>("documentLaunchMode"); } set { ISetField("documentLaunchMode", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#flags"/>
        /// </summary>
        public int flags { get { return IGetField<int>("flags"); } set { ISetField("flags", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#launchMode"/>
        /// </summary>
        public int launchMode { get { return IGetField<int>("launchMode"); } set { ISetField("launchMode", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#maxRecents"/>
        /// </summary>
        public int maxRecents { get { return IGetField<int>("maxRecents"); } set { ISetField("maxRecents", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#persistableMode"/>
        /// </summary>
        public int persistableMode { get { return IGetField<int>("persistableMode"); } set { ISetField("persistableMode", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#screenOrientation"/>
        /// </summary>
        public int screenOrientation { get { return IGetField<int>("screenOrientation"); } set { ISetField("screenOrientation", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#softInputMode"/>
        /// </summary>
        public int softInputMode { get { return IGetField<int>("softInputMode"); } set { ISetField("softInputMode", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#theme"/>
        /// </summary>
        public int theme { get { return IGetField<int>("theme"); } set { ISetField("theme", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#uiOptions"/>
        /// </summary>
        public int uiOptions { get { return IGetField<int>("uiOptions"); } set { ISetField("uiOptions", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#parentActivityName"/>
        /// </summary>
        public Java.Lang.String parentActivityName { get { return IGetField<Java.Lang.String>("parentActivityName"); } set { ISetField("parentActivityName", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#permission"/>
        /// </summary>
        public Java.Lang.String permission { get { return IGetField<Java.Lang.String>("permission"); } set { ISetField("permission", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#requiredDisplayCategory"/>
        /// </summary>
        public Java.Lang.String requiredDisplayCategory { get { return IGetField<Java.Lang.String>("requiredDisplayCategory"); } set { ISetField("requiredDisplayCategory", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#targetActivity"/>
        /// </summary>
        public Java.Lang.String targetActivity { get { return IGetField<Java.Lang.String>("targetActivity"); } set { ISetField("targetActivity", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#taskAffinity"/>
        /// </summary>
        public Java.Lang.String taskAffinity { get { return IGetField<Java.Lang.String>("taskAffinity"); } set { ISetField("taskAffinity", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#COLOR_MODE_DEFAULT"/>
        /// </summary>
        public static int COLOR_MODE_DEFAULT { get { if (!_COLOR_MODE_DEFAULTReady) { _COLOR_MODE_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "COLOR_MODE_DEFAULT"); _COLOR_MODE_DEFAULTReady = true; } return _COLOR_MODE_DEFAULTContent; } }
        private static int _COLOR_MODE_DEFAULTContent = default;
        private static bool _COLOR_MODE_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#COLOR_MODE_HDR"/>
        /// </summary>
        public static int COLOR_MODE_HDR { get { if (!_COLOR_MODE_HDRReady) { _COLOR_MODE_HDRContent = SGetField<int>(LocalBridgeClazz, "COLOR_MODE_HDR"); _COLOR_MODE_HDRReady = true; } return _COLOR_MODE_HDRContent; } }
        private static int _COLOR_MODE_HDRContent = default;
        private static bool _COLOR_MODE_HDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#COLOR_MODE_WIDE_COLOR_GAMUT"/>
        /// </summary>
        public static int COLOR_MODE_WIDE_COLOR_GAMUT { get { if (!_COLOR_MODE_WIDE_COLOR_GAMUTReady) { _COLOR_MODE_WIDE_COLOR_GAMUTContent = SGetField<int>(LocalBridgeClazz, "COLOR_MODE_WIDE_COLOR_GAMUT"); _COLOR_MODE_WIDE_COLOR_GAMUTReady = true; } return _COLOR_MODE_WIDE_COLOR_GAMUTContent; } }
        private static int _COLOR_MODE_WIDE_COLOR_GAMUTContent = default;
        private static bool _COLOR_MODE_WIDE_COLOR_GAMUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#CONFIG_COLOR_MODE"/>
        /// </summary>
        public static int CONFIG_COLOR_MODE { get { if (!_CONFIG_COLOR_MODEReady) { _CONFIG_COLOR_MODEContent = SGetField<int>(LocalBridgeClazz, "CONFIG_COLOR_MODE"); _CONFIG_COLOR_MODEReady = true; } return _CONFIG_COLOR_MODEContent; } }
        private static int _CONFIG_COLOR_MODEContent = default;
        private static bool _CONFIG_COLOR_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#CONFIG_DENSITY"/>
        /// </summary>
        public static int CONFIG_DENSITY { get { if (!_CONFIG_DENSITYReady) { _CONFIG_DENSITYContent = SGetField<int>(LocalBridgeClazz, "CONFIG_DENSITY"); _CONFIG_DENSITYReady = true; } return _CONFIG_DENSITYContent; } }
        private static int _CONFIG_DENSITYContent = default;
        private static bool _CONFIG_DENSITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#CONFIG_FONT_SCALE"/>
        /// </summary>
        public static int CONFIG_FONT_SCALE { get { if (!_CONFIG_FONT_SCALEReady) { _CONFIG_FONT_SCALEContent = SGetField<int>(LocalBridgeClazz, "CONFIG_FONT_SCALE"); _CONFIG_FONT_SCALEReady = true; } return _CONFIG_FONT_SCALEContent; } }
        private static int _CONFIG_FONT_SCALEContent = default;
        private static bool _CONFIG_FONT_SCALEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#CONFIG_FONT_WEIGHT_ADJUSTMENT"/>
        /// </summary>
        public static int CONFIG_FONT_WEIGHT_ADJUSTMENT { get { if (!_CONFIG_FONT_WEIGHT_ADJUSTMENTReady) { _CONFIG_FONT_WEIGHT_ADJUSTMENTContent = SGetField<int>(LocalBridgeClazz, "CONFIG_FONT_WEIGHT_ADJUSTMENT"); _CONFIG_FONT_WEIGHT_ADJUSTMENTReady = true; } return _CONFIG_FONT_WEIGHT_ADJUSTMENTContent; } }
        private static int _CONFIG_FONT_WEIGHT_ADJUSTMENTContent = default;
        private static bool _CONFIG_FONT_WEIGHT_ADJUSTMENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#CONFIG_GRAMMATICAL_GENDER"/>
        /// </summary>
        public static int CONFIG_GRAMMATICAL_GENDER { get { if (!_CONFIG_GRAMMATICAL_GENDERReady) { _CONFIG_GRAMMATICAL_GENDERContent = SGetField<int>(LocalBridgeClazz, "CONFIG_GRAMMATICAL_GENDER"); _CONFIG_GRAMMATICAL_GENDERReady = true; } return _CONFIG_GRAMMATICAL_GENDERContent; } }
        private static int _CONFIG_GRAMMATICAL_GENDERContent = default;
        private static bool _CONFIG_GRAMMATICAL_GENDERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#CONFIG_KEYBOARD"/>
        /// </summary>
        public static int CONFIG_KEYBOARD { get { if (!_CONFIG_KEYBOARDReady) { _CONFIG_KEYBOARDContent = SGetField<int>(LocalBridgeClazz, "CONFIG_KEYBOARD"); _CONFIG_KEYBOARDReady = true; } return _CONFIG_KEYBOARDContent; } }
        private static int _CONFIG_KEYBOARDContent = default;
        private static bool _CONFIG_KEYBOARDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#CONFIG_KEYBOARD_HIDDEN"/>
        /// </summary>
        public static int CONFIG_KEYBOARD_HIDDEN { get { if (!_CONFIG_KEYBOARD_HIDDENReady) { _CONFIG_KEYBOARD_HIDDENContent = SGetField<int>(LocalBridgeClazz, "CONFIG_KEYBOARD_HIDDEN"); _CONFIG_KEYBOARD_HIDDENReady = true; } return _CONFIG_KEYBOARD_HIDDENContent; } }
        private static int _CONFIG_KEYBOARD_HIDDENContent = default;
        private static bool _CONFIG_KEYBOARD_HIDDENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#CONFIG_LAYOUT_DIRECTION"/>
        /// </summary>
        public static int CONFIG_LAYOUT_DIRECTION { get { if (!_CONFIG_LAYOUT_DIRECTIONReady) { _CONFIG_LAYOUT_DIRECTIONContent = SGetField<int>(LocalBridgeClazz, "CONFIG_LAYOUT_DIRECTION"); _CONFIG_LAYOUT_DIRECTIONReady = true; } return _CONFIG_LAYOUT_DIRECTIONContent; } }
        private static int _CONFIG_LAYOUT_DIRECTIONContent = default;
        private static bool _CONFIG_LAYOUT_DIRECTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#CONFIG_LOCALE"/>
        /// </summary>
        public static int CONFIG_LOCALE { get { if (!_CONFIG_LOCALEReady) { _CONFIG_LOCALEContent = SGetField<int>(LocalBridgeClazz, "CONFIG_LOCALE"); _CONFIG_LOCALEReady = true; } return _CONFIG_LOCALEContent; } }
        private static int _CONFIG_LOCALEContent = default;
        private static bool _CONFIG_LOCALEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#CONFIG_MCC"/>
        /// </summary>
        public static int CONFIG_MCC { get { if (!_CONFIG_MCCReady) { _CONFIG_MCCContent = SGetField<int>(LocalBridgeClazz, "CONFIG_MCC"); _CONFIG_MCCReady = true; } return _CONFIG_MCCContent; } }
        private static int _CONFIG_MCCContent = default;
        private static bool _CONFIG_MCCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#CONFIG_MNC"/>
        /// </summary>
        public static int CONFIG_MNC { get { if (!_CONFIG_MNCReady) { _CONFIG_MNCContent = SGetField<int>(LocalBridgeClazz, "CONFIG_MNC"); _CONFIG_MNCReady = true; } return _CONFIG_MNCContent; } }
        private static int _CONFIG_MNCContent = default;
        private static bool _CONFIG_MNCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#CONFIG_NAVIGATION"/>
        /// </summary>
        public static int CONFIG_NAVIGATION { get { if (!_CONFIG_NAVIGATIONReady) { _CONFIG_NAVIGATIONContent = SGetField<int>(LocalBridgeClazz, "CONFIG_NAVIGATION"); _CONFIG_NAVIGATIONReady = true; } return _CONFIG_NAVIGATIONContent; } }
        private static int _CONFIG_NAVIGATIONContent = default;
        private static bool _CONFIG_NAVIGATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#CONFIG_ORIENTATION"/>
        /// </summary>
        public static int CONFIG_ORIENTATION { get { if (!_CONFIG_ORIENTATIONReady) { _CONFIG_ORIENTATIONContent = SGetField<int>(LocalBridgeClazz, "CONFIG_ORIENTATION"); _CONFIG_ORIENTATIONReady = true; } return _CONFIG_ORIENTATIONContent; } }
        private static int _CONFIG_ORIENTATIONContent = default;
        private static bool _CONFIG_ORIENTATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#CONFIG_SCREEN_LAYOUT"/>
        /// </summary>
        public static int CONFIG_SCREEN_LAYOUT { get { if (!_CONFIG_SCREEN_LAYOUTReady) { _CONFIG_SCREEN_LAYOUTContent = SGetField<int>(LocalBridgeClazz, "CONFIG_SCREEN_LAYOUT"); _CONFIG_SCREEN_LAYOUTReady = true; } return _CONFIG_SCREEN_LAYOUTContent; } }
        private static int _CONFIG_SCREEN_LAYOUTContent = default;
        private static bool _CONFIG_SCREEN_LAYOUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#CONFIG_SCREEN_SIZE"/>
        /// </summary>
        public static int CONFIG_SCREEN_SIZE { get { if (!_CONFIG_SCREEN_SIZEReady) { _CONFIG_SCREEN_SIZEContent = SGetField<int>(LocalBridgeClazz, "CONFIG_SCREEN_SIZE"); _CONFIG_SCREEN_SIZEReady = true; } return _CONFIG_SCREEN_SIZEContent; } }
        private static int _CONFIG_SCREEN_SIZEContent = default;
        private static bool _CONFIG_SCREEN_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#CONFIG_SMALLEST_SCREEN_SIZE"/>
        /// </summary>
        public static int CONFIG_SMALLEST_SCREEN_SIZE { get { if (!_CONFIG_SMALLEST_SCREEN_SIZEReady) { _CONFIG_SMALLEST_SCREEN_SIZEContent = SGetField<int>(LocalBridgeClazz, "CONFIG_SMALLEST_SCREEN_SIZE"); _CONFIG_SMALLEST_SCREEN_SIZEReady = true; } return _CONFIG_SMALLEST_SCREEN_SIZEContent; } }
        private static int _CONFIG_SMALLEST_SCREEN_SIZEContent = default;
        private static bool _CONFIG_SMALLEST_SCREEN_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#CONFIG_TOUCHSCREEN"/>
        /// </summary>
        public static int CONFIG_TOUCHSCREEN { get { if (!_CONFIG_TOUCHSCREENReady) { _CONFIG_TOUCHSCREENContent = SGetField<int>(LocalBridgeClazz, "CONFIG_TOUCHSCREEN"); _CONFIG_TOUCHSCREENReady = true; } return _CONFIG_TOUCHSCREENContent; } }
        private static int _CONFIG_TOUCHSCREENContent = default;
        private static bool _CONFIG_TOUCHSCREENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#CONFIG_UI_MODE"/>
        /// </summary>
        public static int CONFIG_UI_MODE { get { if (!_CONFIG_UI_MODEReady) { _CONFIG_UI_MODEContent = SGetField<int>(LocalBridgeClazz, "CONFIG_UI_MODE"); _CONFIG_UI_MODEReady = true; } return _CONFIG_UI_MODEContent; } }
        private static int _CONFIG_UI_MODEContent = default;
        private static bool _CONFIG_UI_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#DOCUMENT_LAUNCH_ALWAYS"/>
        /// </summary>
        public static int DOCUMENT_LAUNCH_ALWAYS { get { if (!_DOCUMENT_LAUNCH_ALWAYSReady) { _DOCUMENT_LAUNCH_ALWAYSContent = SGetField<int>(LocalBridgeClazz, "DOCUMENT_LAUNCH_ALWAYS"); _DOCUMENT_LAUNCH_ALWAYSReady = true; } return _DOCUMENT_LAUNCH_ALWAYSContent; } }
        private static int _DOCUMENT_LAUNCH_ALWAYSContent = default;
        private static bool _DOCUMENT_LAUNCH_ALWAYSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#DOCUMENT_LAUNCH_INTO_EXISTING"/>
        /// </summary>
        public static int DOCUMENT_LAUNCH_INTO_EXISTING { get { if (!_DOCUMENT_LAUNCH_INTO_EXISTINGReady) { _DOCUMENT_LAUNCH_INTO_EXISTINGContent = SGetField<int>(LocalBridgeClazz, "DOCUMENT_LAUNCH_INTO_EXISTING"); _DOCUMENT_LAUNCH_INTO_EXISTINGReady = true; } return _DOCUMENT_LAUNCH_INTO_EXISTINGContent; } }
        private static int _DOCUMENT_LAUNCH_INTO_EXISTINGContent = default;
        private static bool _DOCUMENT_LAUNCH_INTO_EXISTINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#DOCUMENT_LAUNCH_NEVER"/>
        /// </summary>
        public static int DOCUMENT_LAUNCH_NEVER { get { if (!_DOCUMENT_LAUNCH_NEVERReady) { _DOCUMENT_LAUNCH_NEVERContent = SGetField<int>(LocalBridgeClazz, "DOCUMENT_LAUNCH_NEVER"); _DOCUMENT_LAUNCH_NEVERReady = true; } return _DOCUMENT_LAUNCH_NEVERContent; } }
        private static int _DOCUMENT_LAUNCH_NEVERContent = default;
        private static bool _DOCUMENT_LAUNCH_NEVERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#DOCUMENT_LAUNCH_NONE"/>
        /// </summary>
        public static int DOCUMENT_LAUNCH_NONE { get { if (!_DOCUMENT_LAUNCH_NONEReady) { _DOCUMENT_LAUNCH_NONEContent = SGetField<int>(LocalBridgeClazz, "DOCUMENT_LAUNCH_NONE"); _DOCUMENT_LAUNCH_NONEReady = true; } return _DOCUMENT_LAUNCH_NONEContent; } }
        private static int _DOCUMENT_LAUNCH_NONEContent = default;
        private static bool _DOCUMENT_LAUNCH_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#FLAG_ALLOW_TASK_REPARENTING"/>
        /// </summary>
        public static int FLAG_ALLOW_TASK_REPARENTING { get { if (!_FLAG_ALLOW_TASK_REPARENTINGReady) { _FLAG_ALLOW_TASK_REPARENTINGContent = SGetField<int>(LocalBridgeClazz, "FLAG_ALLOW_TASK_REPARENTING"); _FLAG_ALLOW_TASK_REPARENTINGReady = true; } return _FLAG_ALLOW_TASK_REPARENTINGContent; } }
        private static int _FLAG_ALLOW_TASK_REPARENTINGContent = default;
        private static bool _FLAG_ALLOW_TASK_REPARENTINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#FLAG_ALLOW_UNTRUSTED_ACTIVITY_EMBEDDING"/>
        /// </summary>
        public static int FLAG_ALLOW_UNTRUSTED_ACTIVITY_EMBEDDING { get { if (!_FLAG_ALLOW_UNTRUSTED_ACTIVITY_EMBEDDINGReady) { _FLAG_ALLOW_UNTRUSTED_ACTIVITY_EMBEDDINGContent = SGetField<int>(LocalBridgeClazz, "FLAG_ALLOW_UNTRUSTED_ACTIVITY_EMBEDDING"); _FLAG_ALLOW_UNTRUSTED_ACTIVITY_EMBEDDINGReady = true; } return _FLAG_ALLOW_UNTRUSTED_ACTIVITY_EMBEDDINGContent; } }
        private static int _FLAG_ALLOW_UNTRUSTED_ACTIVITY_EMBEDDINGContent = default;
        private static bool _FLAG_ALLOW_UNTRUSTED_ACTIVITY_EMBEDDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#FLAG_ALWAYS_RETAIN_TASK_STATE"/>
        /// </summary>
        public static int FLAG_ALWAYS_RETAIN_TASK_STATE { get { if (!_FLAG_ALWAYS_RETAIN_TASK_STATEReady) { _FLAG_ALWAYS_RETAIN_TASK_STATEContent = SGetField<int>(LocalBridgeClazz, "FLAG_ALWAYS_RETAIN_TASK_STATE"); _FLAG_ALWAYS_RETAIN_TASK_STATEReady = true; } return _FLAG_ALWAYS_RETAIN_TASK_STATEContent; } }
        private static int _FLAG_ALWAYS_RETAIN_TASK_STATEContent = default;
        private static bool _FLAG_ALWAYS_RETAIN_TASK_STATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#FLAG_AUTO_REMOVE_FROM_RECENTS"/>
        /// </summary>
        public static int FLAG_AUTO_REMOVE_FROM_RECENTS { get { if (!_FLAG_AUTO_REMOVE_FROM_RECENTSReady) { _FLAG_AUTO_REMOVE_FROM_RECENTSContent = SGetField<int>(LocalBridgeClazz, "FLAG_AUTO_REMOVE_FROM_RECENTS"); _FLAG_AUTO_REMOVE_FROM_RECENTSReady = true; } return _FLAG_AUTO_REMOVE_FROM_RECENTSContent; } }
        private static int _FLAG_AUTO_REMOVE_FROM_RECENTSContent = default;
        private static bool _FLAG_AUTO_REMOVE_FROM_RECENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#FLAG_CLEAR_TASK_ON_LAUNCH"/>
        /// </summary>
        public static int FLAG_CLEAR_TASK_ON_LAUNCH { get { if (!_FLAG_CLEAR_TASK_ON_LAUNCHReady) { _FLAG_CLEAR_TASK_ON_LAUNCHContent = SGetField<int>(LocalBridgeClazz, "FLAG_CLEAR_TASK_ON_LAUNCH"); _FLAG_CLEAR_TASK_ON_LAUNCHReady = true; } return _FLAG_CLEAR_TASK_ON_LAUNCHContent; } }
        private static int _FLAG_CLEAR_TASK_ON_LAUNCHContent = default;
        private static bool _FLAG_CLEAR_TASK_ON_LAUNCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#FLAG_ENABLE_VR_MODE"/>
        /// </summary>
        public static int FLAG_ENABLE_VR_MODE { get { if (!_FLAG_ENABLE_VR_MODEReady) { _FLAG_ENABLE_VR_MODEContent = SGetField<int>(LocalBridgeClazz, "FLAG_ENABLE_VR_MODE"); _FLAG_ENABLE_VR_MODEReady = true; } return _FLAG_ENABLE_VR_MODEContent; } }
        private static int _FLAG_ENABLE_VR_MODEContent = default;
        private static bool _FLAG_ENABLE_VR_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#FLAG_EXCLUDE_FROM_RECENTS"/>
        /// </summary>
        public static int FLAG_EXCLUDE_FROM_RECENTS { get { if (!_FLAG_EXCLUDE_FROM_RECENTSReady) { _FLAG_EXCLUDE_FROM_RECENTSContent = SGetField<int>(LocalBridgeClazz, "FLAG_EXCLUDE_FROM_RECENTS"); _FLAG_EXCLUDE_FROM_RECENTSReady = true; } return _FLAG_EXCLUDE_FROM_RECENTSContent; } }
        private static int _FLAG_EXCLUDE_FROM_RECENTSContent = default;
        private static bool _FLAG_EXCLUDE_FROM_RECENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS"/>
        /// </summary>
        public static int FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS { get { if (!_FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGSReady) { _FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGSContent = SGetField<int>(LocalBridgeClazz, "FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS"); _FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGSReady = true; } return _FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGSContent; } }
        private static int _FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGSContent = default;
        private static bool _FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#FLAG_FINISH_ON_TASK_LAUNCH"/>
        /// </summary>
        public static int FLAG_FINISH_ON_TASK_LAUNCH { get { if (!_FLAG_FINISH_ON_TASK_LAUNCHReady) { _FLAG_FINISH_ON_TASK_LAUNCHContent = SGetField<int>(LocalBridgeClazz, "FLAG_FINISH_ON_TASK_LAUNCH"); _FLAG_FINISH_ON_TASK_LAUNCHReady = true; } return _FLAG_FINISH_ON_TASK_LAUNCHContent; } }
        private static int _FLAG_FINISH_ON_TASK_LAUNCHContent = default;
        private static bool _FLAG_FINISH_ON_TASK_LAUNCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#FLAG_HARDWARE_ACCELERATED"/>
        /// </summary>
        public static int FLAG_HARDWARE_ACCELERATED { get { if (!_FLAG_HARDWARE_ACCELERATEDReady) { _FLAG_HARDWARE_ACCELERATEDContent = SGetField<int>(LocalBridgeClazz, "FLAG_HARDWARE_ACCELERATED"); _FLAG_HARDWARE_ACCELERATEDReady = true; } return _FLAG_HARDWARE_ACCELERATEDContent; } }
        private static int _FLAG_HARDWARE_ACCELERATEDContent = default;
        private static bool _FLAG_HARDWARE_ACCELERATEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#FLAG_IMMERSIVE"/>
        /// </summary>
        public static int FLAG_IMMERSIVE { get { if (!_FLAG_IMMERSIVEReady) { _FLAG_IMMERSIVEContent = SGetField<int>(LocalBridgeClazz, "FLAG_IMMERSIVE"); _FLAG_IMMERSIVEReady = true; } return _FLAG_IMMERSIVEContent; } }
        private static int _FLAG_IMMERSIVEContent = default;
        private static bool _FLAG_IMMERSIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#FLAG_MULTIPROCESS"/>
        /// </summary>
        public static int FLAG_MULTIPROCESS { get { if (!_FLAG_MULTIPROCESSReady) { _FLAG_MULTIPROCESSContent = SGetField<int>(LocalBridgeClazz, "FLAG_MULTIPROCESS"); _FLAG_MULTIPROCESSReady = true; } return _FLAG_MULTIPROCESSContent; } }
        private static int _FLAG_MULTIPROCESSContent = default;
        private static bool _FLAG_MULTIPROCESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#FLAG_NO_HISTORY"/>
        /// </summary>
        public static int FLAG_NO_HISTORY { get { if (!_FLAG_NO_HISTORYReady) { _FLAG_NO_HISTORYContent = SGetField<int>(LocalBridgeClazz, "FLAG_NO_HISTORY"); _FLAG_NO_HISTORYReady = true; } return _FLAG_NO_HISTORYContent; } }
        private static int _FLAG_NO_HISTORYContent = default;
        private static bool _FLAG_NO_HISTORYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#FLAG_PREFER_MINIMAL_POST_PROCESSING"/>
        /// </summary>
        public static int FLAG_PREFER_MINIMAL_POST_PROCESSING { get { if (!_FLAG_PREFER_MINIMAL_POST_PROCESSINGReady) { _FLAG_PREFER_MINIMAL_POST_PROCESSINGContent = SGetField<int>(LocalBridgeClazz, "FLAG_PREFER_MINIMAL_POST_PROCESSING"); _FLAG_PREFER_MINIMAL_POST_PROCESSINGReady = true; } return _FLAG_PREFER_MINIMAL_POST_PROCESSINGContent; } }
        private static int _FLAG_PREFER_MINIMAL_POST_PROCESSINGContent = default;
        private static bool _FLAG_PREFER_MINIMAL_POST_PROCESSINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#FLAG_RELINQUISH_TASK_IDENTITY"/>
        /// </summary>
        public static int FLAG_RELINQUISH_TASK_IDENTITY { get { if (!_FLAG_RELINQUISH_TASK_IDENTITYReady) { _FLAG_RELINQUISH_TASK_IDENTITYContent = SGetField<int>(LocalBridgeClazz, "FLAG_RELINQUISH_TASK_IDENTITY"); _FLAG_RELINQUISH_TASK_IDENTITYReady = true; } return _FLAG_RELINQUISH_TASK_IDENTITYContent; } }
        private static int _FLAG_RELINQUISH_TASK_IDENTITYContent = default;
        private static bool _FLAG_RELINQUISH_TASK_IDENTITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#FLAG_RESUME_WHILE_PAUSING"/>
        /// </summary>
        public static int FLAG_RESUME_WHILE_PAUSING { get { if (!_FLAG_RESUME_WHILE_PAUSINGReady) { _FLAG_RESUME_WHILE_PAUSINGContent = SGetField<int>(LocalBridgeClazz, "FLAG_RESUME_WHILE_PAUSING"); _FLAG_RESUME_WHILE_PAUSINGReady = true; } return _FLAG_RESUME_WHILE_PAUSINGContent; } }
        private static int _FLAG_RESUME_WHILE_PAUSINGContent = default;
        private static bool _FLAG_RESUME_WHILE_PAUSINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#FLAG_SINGLE_USER"/>
        /// </summary>
        public static int FLAG_SINGLE_USER { get { if (!_FLAG_SINGLE_USERReady) { _FLAG_SINGLE_USERContent = SGetField<int>(LocalBridgeClazz, "FLAG_SINGLE_USER"); _FLAG_SINGLE_USERReady = true; } return _FLAG_SINGLE_USERContent; } }
        private static int _FLAG_SINGLE_USERContent = default;
        private static bool _FLAG_SINGLE_USERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#FLAG_STATE_NOT_NEEDED"/>
        /// </summary>
        public static int FLAG_STATE_NOT_NEEDED { get { if (!_FLAG_STATE_NOT_NEEDEDReady) { _FLAG_STATE_NOT_NEEDEDContent = SGetField<int>(LocalBridgeClazz, "FLAG_STATE_NOT_NEEDED"); _FLAG_STATE_NOT_NEEDEDReady = true; } return _FLAG_STATE_NOT_NEEDEDContent; } }
        private static int _FLAG_STATE_NOT_NEEDEDContent = default;
        private static bool _FLAG_STATE_NOT_NEEDEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#LAUNCH_MULTIPLE"/>
        /// </summary>
        public static int LAUNCH_MULTIPLE { get { if (!_LAUNCH_MULTIPLEReady) { _LAUNCH_MULTIPLEContent = SGetField<int>(LocalBridgeClazz, "LAUNCH_MULTIPLE"); _LAUNCH_MULTIPLEReady = true; } return _LAUNCH_MULTIPLEContent; } }
        private static int _LAUNCH_MULTIPLEContent = default;
        private static bool _LAUNCH_MULTIPLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#LAUNCH_SINGLE_INSTANCE"/>
        /// </summary>
        public static int LAUNCH_SINGLE_INSTANCE { get { if (!_LAUNCH_SINGLE_INSTANCEReady) { _LAUNCH_SINGLE_INSTANCEContent = SGetField<int>(LocalBridgeClazz, "LAUNCH_SINGLE_INSTANCE"); _LAUNCH_SINGLE_INSTANCEReady = true; } return _LAUNCH_SINGLE_INSTANCEContent; } }
        private static int _LAUNCH_SINGLE_INSTANCEContent = default;
        private static bool _LAUNCH_SINGLE_INSTANCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#LAUNCH_SINGLE_INSTANCE_PER_TASK"/>
        /// </summary>
        public static int LAUNCH_SINGLE_INSTANCE_PER_TASK { get { if (!_LAUNCH_SINGLE_INSTANCE_PER_TASKReady) { _LAUNCH_SINGLE_INSTANCE_PER_TASKContent = SGetField<int>(LocalBridgeClazz, "LAUNCH_SINGLE_INSTANCE_PER_TASK"); _LAUNCH_SINGLE_INSTANCE_PER_TASKReady = true; } return _LAUNCH_SINGLE_INSTANCE_PER_TASKContent; } }
        private static int _LAUNCH_SINGLE_INSTANCE_PER_TASKContent = default;
        private static bool _LAUNCH_SINGLE_INSTANCE_PER_TASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#LAUNCH_SINGLE_TASK"/>
        /// </summary>
        public static int LAUNCH_SINGLE_TASK { get { if (!_LAUNCH_SINGLE_TASKReady) { _LAUNCH_SINGLE_TASKContent = SGetField<int>(LocalBridgeClazz, "LAUNCH_SINGLE_TASK"); _LAUNCH_SINGLE_TASKReady = true; } return _LAUNCH_SINGLE_TASKContent; } }
        private static int _LAUNCH_SINGLE_TASKContent = default;
        private static bool _LAUNCH_SINGLE_TASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#LAUNCH_SINGLE_TOP"/>
        /// </summary>
        public static int LAUNCH_SINGLE_TOP { get { if (!_LAUNCH_SINGLE_TOPReady) { _LAUNCH_SINGLE_TOPContent = SGetField<int>(LocalBridgeClazz, "LAUNCH_SINGLE_TOP"); _LAUNCH_SINGLE_TOPReady = true; } return _LAUNCH_SINGLE_TOPContent; } }
        private static int _LAUNCH_SINGLE_TOPContent = default;
        private static bool _LAUNCH_SINGLE_TOPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#PERSIST_ACROSS_REBOOTS"/>
        /// </summary>
        public static int PERSIST_ACROSS_REBOOTS { get { if (!_PERSIST_ACROSS_REBOOTSReady) { _PERSIST_ACROSS_REBOOTSContent = SGetField<int>(LocalBridgeClazz, "PERSIST_ACROSS_REBOOTS"); _PERSIST_ACROSS_REBOOTSReady = true; } return _PERSIST_ACROSS_REBOOTSContent; } }
        private static int _PERSIST_ACROSS_REBOOTSContent = default;
        private static bool _PERSIST_ACROSS_REBOOTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#PERSIST_NEVER"/>
        /// </summary>
        public static int PERSIST_NEVER { get { if (!_PERSIST_NEVERReady) { _PERSIST_NEVERContent = SGetField<int>(LocalBridgeClazz, "PERSIST_NEVER"); _PERSIST_NEVERReady = true; } return _PERSIST_NEVERContent; } }
        private static int _PERSIST_NEVERContent = default;
        private static bool _PERSIST_NEVERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#PERSIST_ROOT_ONLY"/>
        /// </summary>
        public static int PERSIST_ROOT_ONLY { get { if (!_PERSIST_ROOT_ONLYReady) { _PERSIST_ROOT_ONLYContent = SGetField<int>(LocalBridgeClazz, "PERSIST_ROOT_ONLY"); _PERSIST_ROOT_ONLYReady = true; } return _PERSIST_ROOT_ONLYContent; } }
        private static int _PERSIST_ROOT_ONLYContent = default;
        private static bool _PERSIST_ROOT_ONLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#SCREEN_ORIENTATION_BEHIND"/>
        /// </summary>
        public static int SCREEN_ORIENTATION_BEHIND { get { if (!_SCREEN_ORIENTATION_BEHINDReady) { _SCREEN_ORIENTATION_BEHINDContent = SGetField<int>(LocalBridgeClazz, "SCREEN_ORIENTATION_BEHIND"); _SCREEN_ORIENTATION_BEHINDReady = true; } return _SCREEN_ORIENTATION_BEHINDContent; } }
        private static int _SCREEN_ORIENTATION_BEHINDContent = default;
        private static bool _SCREEN_ORIENTATION_BEHINDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#SCREEN_ORIENTATION_FULL_SENSOR"/>
        /// </summary>
        public static int SCREEN_ORIENTATION_FULL_SENSOR { get { if (!_SCREEN_ORIENTATION_FULL_SENSORReady) { _SCREEN_ORIENTATION_FULL_SENSORContent = SGetField<int>(LocalBridgeClazz, "SCREEN_ORIENTATION_FULL_SENSOR"); _SCREEN_ORIENTATION_FULL_SENSORReady = true; } return _SCREEN_ORIENTATION_FULL_SENSORContent; } }
        private static int _SCREEN_ORIENTATION_FULL_SENSORContent = default;
        private static bool _SCREEN_ORIENTATION_FULL_SENSORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#SCREEN_ORIENTATION_FULL_USER"/>
        /// </summary>
        public static int SCREEN_ORIENTATION_FULL_USER { get { if (!_SCREEN_ORIENTATION_FULL_USERReady) { _SCREEN_ORIENTATION_FULL_USERContent = SGetField<int>(LocalBridgeClazz, "SCREEN_ORIENTATION_FULL_USER"); _SCREEN_ORIENTATION_FULL_USERReady = true; } return _SCREEN_ORIENTATION_FULL_USERContent; } }
        private static int _SCREEN_ORIENTATION_FULL_USERContent = default;
        private static bool _SCREEN_ORIENTATION_FULL_USERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#SCREEN_ORIENTATION_LANDSCAPE"/>
        /// </summary>
        public static int SCREEN_ORIENTATION_LANDSCAPE { get { if (!_SCREEN_ORIENTATION_LANDSCAPEReady) { _SCREEN_ORIENTATION_LANDSCAPEContent = SGetField<int>(LocalBridgeClazz, "SCREEN_ORIENTATION_LANDSCAPE"); _SCREEN_ORIENTATION_LANDSCAPEReady = true; } return _SCREEN_ORIENTATION_LANDSCAPEContent; } }
        private static int _SCREEN_ORIENTATION_LANDSCAPEContent = default;
        private static bool _SCREEN_ORIENTATION_LANDSCAPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#SCREEN_ORIENTATION_LOCKED"/>
        /// </summary>
        public static int SCREEN_ORIENTATION_LOCKED { get { if (!_SCREEN_ORIENTATION_LOCKEDReady) { _SCREEN_ORIENTATION_LOCKEDContent = SGetField<int>(LocalBridgeClazz, "SCREEN_ORIENTATION_LOCKED"); _SCREEN_ORIENTATION_LOCKEDReady = true; } return _SCREEN_ORIENTATION_LOCKEDContent; } }
        private static int _SCREEN_ORIENTATION_LOCKEDContent = default;
        private static bool _SCREEN_ORIENTATION_LOCKEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#SCREEN_ORIENTATION_NOSENSOR"/>
        /// </summary>
        public static int SCREEN_ORIENTATION_NOSENSOR { get { if (!_SCREEN_ORIENTATION_NOSENSORReady) { _SCREEN_ORIENTATION_NOSENSORContent = SGetField<int>(LocalBridgeClazz, "SCREEN_ORIENTATION_NOSENSOR"); _SCREEN_ORIENTATION_NOSENSORReady = true; } return _SCREEN_ORIENTATION_NOSENSORContent; } }
        private static int _SCREEN_ORIENTATION_NOSENSORContent = default;
        private static bool _SCREEN_ORIENTATION_NOSENSORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#SCREEN_ORIENTATION_PORTRAIT"/>
        /// </summary>
        public static int SCREEN_ORIENTATION_PORTRAIT { get { if (!_SCREEN_ORIENTATION_PORTRAITReady) { _SCREEN_ORIENTATION_PORTRAITContent = SGetField<int>(LocalBridgeClazz, "SCREEN_ORIENTATION_PORTRAIT"); _SCREEN_ORIENTATION_PORTRAITReady = true; } return _SCREEN_ORIENTATION_PORTRAITContent; } }
        private static int _SCREEN_ORIENTATION_PORTRAITContent = default;
        private static bool _SCREEN_ORIENTATION_PORTRAITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#SCREEN_ORIENTATION_REVERSE_LANDSCAPE"/>
        /// </summary>
        public static int SCREEN_ORIENTATION_REVERSE_LANDSCAPE { get { if (!_SCREEN_ORIENTATION_REVERSE_LANDSCAPEReady) { _SCREEN_ORIENTATION_REVERSE_LANDSCAPEContent = SGetField<int>(LocalBridgeClazz, "SCREEN_ORIENTATION_REVERSE_LANDSCAPE"); _SCREEN_ORIENTATION_REVERSE_LANDSCAPEReady = true; } return _SCREEN_ORIENTATION_REVERSE_LANDSCAPEContent; } }
        private static int _SCREEN_ORIENTATION_REVERSE_LANDSCAPEContent = default;
        private static bool _SCREEN_ORIENTATION_REVERSE_LANDSCAPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#SCREEN_ORIENTATION_REVERSE_PORTRAIT"/>
        /// </summary>
        public static int SCREEN_ORIENTATION_REVERSE_PORTRAIT { get { if (!_SCREEN_ORIENTATION_REVERSE_PORTRAITReady) { _SCREEN_ORIENTATION_REVERSE_PORTRAITContent = SGetField<int>(LocalBridgeClazz, "SCREEN_ORIENTATION_REVERSE_PORTRAIT"); _SCREEN_ORIENTATION_REVERSE_PORTRAITReady = true; } return _SCREEN_ORIENTATION_REVERSE_PORTRAITContent; } }
        private static int _SCREEN_ORIENTATION_REVERSE_PORTRAITContent = default;
        private static bool _SCREEN_ORIENTATION_REVERSE_PORTRAITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#SCREEN_ORIENTATION_SENSOR"/>
        /// </summary>
        public static int SCREEN_ORIENTATION_SENSOR { get { if (!_SCREEN_ORIENTATION_SENSORReady) { _SCREEN_ORIENTATION_SENSORContent = SGetField<int>(LocalBridgeClazz, "SCREEN_ORIENTATION_SENSOR"); _SCREEN_ORIENTATION_SENSORReady = true; } return _SCREEN_ORIENTATION_SENSORContent; } }
        private static int _SCREEN_ORIENTATION_SENSORContent = default;
        private static bool _SCREEN_ORIENTATION_SENSORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#SCREEN_ORIENTATION_SENSOR_LANDSCAPE"/>
        /// </summary>
        public static int SCREEN_ORIENTATION_SENSOR_LANDSCAPE { get { if (!_SCREEN_ORIENTATION_SENSOR_LANDSCAPEReady) { _SCREEN_ORIENTATION_SENSOR_LANDSCAPEContent = SGetField<int>(LocalBridgeClazz, "SCREEN_ORIENTATION_SENSOR_LANDSCAPE"); _SCREEN_ORIENTATION_SENSOR_LANDSCAPEReady = true; } return _SCREEN_ORIENTATION_SENSOR_LANDSCAPEContent; } }
        private static int _SCREEN_ORIENTATION_SENSOR_LANDSCAPEContent = default;
        private static bool _SCREEN_ORIENTATION_SENSOR_LANDSCAPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#SCREEN_ORIENTATION_SENSOR_PORTRAIT"/>
        /// </summary>
        public static int SCREEN_ORIENTATION_SENSOR_PORTRAIT { get { if (!_SCREEN_ORIENTATION_SENSOR_PORTRAITReady) { _SCREEN_ORIENTATION_SENSOR_PORTRAITContent = SGetField<int>(LocalBridgeClazz, "SCREEN_ORIENTATION_SENSOR_PORTRAIT"); _SCREEN_ORIENTATION_SENSOR_PORTRAITReady = true; } return _SCREEN_ORIENTATION_SENSOR_PORTRAITContent; } }
        private static int _SCREEN_ORIENTATION_SENSOR_PORTRAITContent = default;
        private static bool _SCREEN_ORIENTATION_SENSOR_PORTRAITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#SCREEN_ORIENTATION_UNSPECIFIED"/>
        /// </summary>
        public static int SCREEN_ORIENTATION_UNSPECIFIED { get { if (!_SCREEN_ORIENTATION_UNSPECIFIEDReady) { _SCREEN_ORIENTATION_UNSPECIFIEDContent = SGetField<int>(LocalBridgeClazz, "SCREEN_ORIENTATION_UNSPECIFIED"); _SCREEN_ORIENTATION_UNSPECIFIEDReady = true; } return _SCREEN_ORIENTATION_UNSPECIFIEDContent; } }
        private static int _SCREEN_ORIENTATION_UNSPECIFIEDContent = default;
        private static bool _SCREEN_ORIENTATION_UNSPECIFIEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#SCREEN_ORIENTATION_USER"/>
        /// </summary>
        public static int SCREEN_ORIENTATION_USER { get { if (!_SCREEN_ORIENTATION_USERReady) { _SCREEN_ORIENTATION_USERContent = SGetField<int>(LocalBridgeClazz, "SCREEN_ORIENTATION_USER"); _SCREEN_ORIENTATION_USERReady = true; } return _SCREEN_ORIENTATION_USERContent; } }
        private static int _SCREEN_ORIENTATION_USERContent = default;
        private static bool _SCREEN_ORIENTATION_USERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#SCREEN_ORIENTATION_USER_LANDSCAPE"/>
        /// </summary>
        public static int SCREEN_ORIENTATION_USER_LANDSCAPE { get { if (!_SCREEN_ORIENTATION_USER_LANDSCAPEReady) { _SCREEN_ORIENTATION_USER_LANDSCAPEContent = SGetField<int>(LocalBridgeClazz, "SCREEN_ORIENTATION_USER_LANDSCAPE"); _SCREEN_ORIENTATION_USER_LANDSCAPEReady = true; } return _SCREEN_ORIENTATION_USER_LANDSCAPEContent; } }
        private static int _SCREEN_ORIENTATION_USER_LANDSCAPEContent = default;
        private static bool _SCREEN_ORIENTATION_USER_LANDSCAPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#SCREEN_ORIENTATION_USER_PORTRAIT"/>
        /// </summary>
        public static int SCREEN_ORIENTATION_USER_PORTRAIT { get { if (!_SCREEN_ORIENTATION_USER_PORTRAITReady) { _SCREEN_ORIENTATION_USER_PORTRAITContent = SGetField<int>(LocalBridgeClazz, "SCREEN_ORIENTATION_USER_PORTRAIT"); _SCREEN_ORIENTATION_USER_PORTRAITReady = true; } return _SCREEN_ORIENTATION_USER_PORTRAITContent; } }
        private static int _SCREEN_ORIENTATION_USER_PORTRAITContent = default;
        private static bool _SCREEN_ORIENTATION_USER_PORTRAITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#UIOPTION_SPLIT_ACTION_BAR_WHEN_NARROW"/>
        /// </summary>
        public static int UIOPTION_SPLIT_ACTION_BAR_WHEN_NARROW { get { if (!_UIOPTION_SPLIT_ACTION_BAR_WHEN_NARROWReady) { _UIOPTION_SPLIT_ACTION_BAR_WHEN_NARROWContent = SGetField<int>(LocalBridgeClazz, "UIOPTION_SPLIT_ACTION_BAR_WHEN_NARROW"); _UIOPTION_SPLIT_ACTION_BAR_WHEN_NARROWReady = true; } return _UIOPTION_SPLIT_ACTION_BAR_WHEN_NARROWContent; } }
        private static int _UIOPTION_SPLIT_ACTION_BAR_WHEN_NARROWContent = default;
        private static bool _UIOPTION_SPLIT_ACTION_BAR_WHEN_NARROWReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#getThemeResource()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetThemeResource()
        {
            return IExecuteWithSignature<int>("getThemeResource", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#getKnownActivityEmbeddingCerts()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Set"/></returns>
        public Java.Util.Set<Java.Lang.String> GetKnownActivityEmbeddingCerts()
        {
            return IExecuteWithSignature<Java.Util.Set<Java.Lang.String>>("getKnownActivityEmbeddingCerts", "()Ljava/util/Set;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html#dump(android.util.Printer,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Util.Printer"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        public void Dump(Android.Util.Printer arg0, Java.Lang.String arg1)
        {
            IExecute("dump", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region WindowLayout
        public partial class WindowLayout
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.WindowLayout.html#%3Cinit%3E(int,float,int,float,int,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="float"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="float"/></param>
            /// <param name="arg4"><see cref="int"/></param>
            /// <param name="arg5"><see cref="int"/></param>
            /// <param name="arg6"><see cref="int"/></param>
            public WindowLayout(int arg0, float arg1, int arg2, float arg3, int arg4, int arg5, int arg6)
                : base(arg0, arg1, arg2, arg3, arg4, arg5, arg6)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.WindowLayout.html#heightFraction"/>
            /// </summary>
            public float heightFraction { get { if (!_heightFractionReady) { _heightFractionContent = IGetField<float>("heightFraction"); _heightFractionReady = true; } return _heightFractionContent; } }
            private float _heightFractionContent = default;
            private bool _heightFractionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.WindowLayout.html#widthFraction"/>
            /// </summary>
            public float widthFraction { get { if (!_widthFractionReady) { _widthFractionContent = IGetField<float>("widthFraction"); _widthFractionReady = true; } return _widthFractionContent; } }
            private float _widthFractionContent = default;
            private bool _widthFractionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.WindowLayout.html#gravity"/>
            /// </summary>
            public int gravity { get { if (!_gravityReady) { _gravityContent = IGetField<int>("gravity"); _gravityReady = true; } return _gravityContent; } }
            private int _gravityContent = default;
            private bool _gravityReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.WindowLayout.html#height"/>
            /// </summary>
            public int height { get { if (!_heightReady) { _heightContent = IGetField<int>("height"); _heightReady = true; } return _heightContent; } }
            private int _heightContent = default;
            private bool _heightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.WindowLayout.html#minHeight"/>
            /// </summary>
            public int minHeight { get { if (!_minHeightReady) { _minHeightContent = IGetField<int>("minHeight"); _minHeightReady = true; } return _minHeightContent; } }
            private int _minHeightContent = default;
            private bool _minHeightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.WindowLayout.html#minWidth"/>
            /// </summary>
            public int minWidth { get { if (!_minWidthReady) { _minWidthContent = IGetField<int>("minWidth"); _minWidthReady = true; } return _minWidthContent; } }
            private int _minWidthContent = default;
            private bool _minWidthReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/ActivityInfo.WindowLayout.html#width"/>
            /// </summary>
            public int width { get { if (!_widthReady) { _widthContent = IGetField<int>("width"); _widthReady = true; } return _widthContent; } }
            private int _widthContent = default;
            private bool _widthReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
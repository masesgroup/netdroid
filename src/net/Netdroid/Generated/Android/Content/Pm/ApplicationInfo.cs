/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.5.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Content.Pm
{
    #region ApplicationInfo
    public partial class ApplicationInfo
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#%3Cinit%3E(android.content.pm.ApplicationInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Pm.ApplicationInfo"/></param>
        public ApplicationInfo(Android.Content.Pm.ApplicationInfo arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Android.Content.Pm.ApplicationInfo"/> to <see cref="Android.Os.Parcelable"/>
        /// </summary>
        public static implicit operator Android.Os.Parcelable(Android.Content.Pm.ApplicationInfo t) => t.Cast<Android.Os.Parcelable>();

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#enabled"/>
        /// </summary>
        public bool enabled { get { return IGetField<bool>("enabled"); } set { ISetField("enabled", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#category"/>
        /// </summary>
        public int category { get { return IGetField<int>("category"); } set { ISetField("category", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#compatibleWidthLimitDp"/>
        /// </summary>
        public int compatibleWidthLimitDp { get { return IGetField<int>("compatibleWidthLimitDp"); } set { ISetField("compatibleWidthLimitDp", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#compileSdkVersion"/>
        /// </summary>
        public int compileSdkVersion { get { return IGetField<int>("compileSdkVersion"); } set { ISetField("compileSdkVersion", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#descriptionRes"/>
        /// </summary>
        public int descriptionRes { get { return IGetField<int>("descriptionRes"); } set { ISetField("descriptionRes", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#flags"/>
        /// </summary>
        public int flags { get { return IGetField<int>("flags"); } set { ISetField("flags", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#largestWidthLimitDp"/>
        /// </summary>
        public int largestWidthLimitDp { get { return IGetField<int>("largestWidthLimitDp"); } set { ISetField("largestWidthLimitDp", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#minSdkVersion"/>
        /// </summary>
        public int minSdkVersion { get { return IGetField<int>("minSdkVersion"); } set { ISetField("minSdkVersion", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#requiresSmallestWidthDp"/>
        /// </summary>
        public int requiresSmallestWidthDp { get { return IGetField<int>("requiresSmallestWidthDp"); } set { ISetField("requiresSmallestWidthDp", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#targetSdkVersion"/>
        /// </summary>
        public int targetSdkVersion { get { return IGetField<int>("targetSdkVersion"); } set { ISetField("targetSdkVersion", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#theme"/>
        /// </summary>
        public int theme { get { return IGetField<int>("theme"); } set { ISetField("theme", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#uid"/>
        /// </summary>
        public int uid { get { return IGetField<int>("uid"); } set { ISetField("uid", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#uiOptions"/>
        /// </summary>
        public int uiOptions { get { return IGetField<int>("uiOptions"); } set { ISetField("uiOptions", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#appComponentFactory"/>
        /// </summary>
        public Java.Lang.String appComponentFactory { get { return IGetField<Java.Lang.String>("appComponentFactory"); } set { ISetField("appComponentFactory", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#backupAgentName"/>
        /// </summary>
        public Java.Lang.String backupAgentName { get { return IGetField<Java.Lang.String>("backupAgentName"); } set { ISetField("backupAgentName", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#className"/>
        /// </summary>
        public Java.Lang.String className { get { return IGetField<Java.Lang.String>("className"); } set { ISetField("className", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#compileSdkVersionCodename"/>
        /// </summary>
        public Java.Lang.String compileSdkVersionCodename { get { return IGetField<Java.Lang.String>("compileSdkVersionCodename"); } set { ISetField("compileSdkVersionCodename", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#dataDir"/>
        /// </summary>
        public Java.Lang.String dataDir { get { return IGetField<Java.Lang.String>("dataDir"); } set { ISetField("dataDir", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#deviceProtectedDataDir"/>
        /// </summary>
        public Java.Lang.String deviceProtectedDataDir { get { return IGetField<Java.Lang.String>("deviceProtectedDataDir"); } set { ISetField("deviceProtectedDataDir", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#manageSpaceActivityName"/>
        /// </summary>
        public Java.Lang.String manageSpaceActivityName { get { return IGetField<Java.Lang.String>("manageSpaceActivityName"); } set { ISetField("manageSpaceActivityName", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#nativeLibraryDir"/>
        /// </summary>
        public Java.Lang.String nativeLibraryDir { get { return IGetField<Java.Lang.String>("nativeLibraryDir"); } set { ISetField("nativeLibraryDir", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#permission"/>
        /// </summary>
        public Java.Lang.String permission { get { return IGetField<Java.Lang.String>("permission"); } set { ISetField("permission", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#processName"/>
        /// </summary>
        public Java.Lang.String processName { get { return IGetField<Java.Lang.String>("processName"); } set { ISetField("processName", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#publicSourceDir"/>
        /// </summary>
        public Java.Lang.String publicSourceDir { get { return IGetField<Java.Lang.String>("publicSourceDir"); } set { ISetField("publicSourceDir", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#sourceDir"/>
        /// </summary>
        public Java.Lang.String sourceDir { get { return IGetField<Java.Lang.String>("sourceDir"); } set { ISetField("sourceDir", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#taskAffinity"/>
        /// </summary>
        public Java.Lang.String taskAffinity { get { return IGetField<Java.Lang.String>("taskAffinity"); } set { ISetField("taskAffinity", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#sharedLibraryFiles"/>
        /// </summary>
        public Java.Lang.String[] sharedLibraryFiles { get { return IGetFieldArray<Java.Lang.String>("sharedLibraryFiles"); } set { ISetField("sharedLibraryFiles", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#splitNames"/>
        /// </summary>
        public Java.Lang.String[] splitNames { get { return IGetFieldArray<Java.Lang.String>("splitNames"); } set { ISetField("splitNames", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#splitPublicSourceDirs"/>
        /// </summary>
        public Java.Lang.String[] splitPublicSourceDirs { get { return IGetFieldArray<Java.Lang.String>("splitPublicSourceDirs"); } set { ISetField("splitPublicSourceDirs", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#splitSourceDirs"/>
        /// </summary>
        public Java.Lang.String[] splitSourceDirs { get { return IGetFieldArray<Java.Lang.String>("splitSourceDirs"); } set { ISetField("splitSourceDirs", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#storageUuid"/>
        /// </summary>
        public Java.Util.UUID storageUuid { get { return IGetField<Java.Util.UUID>("storageUuid"); } set { ISetField("storageUuid", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#CATEGORY_ACCESSIBILITY"/>
        /// </summary>
        public static int CATEGORY_ACCESSIBILITY { get { if (!_CATEGORY_ACCESSIBILITYReady) { _CATEGORY_ACCESSIBILITYContent = SGetField<int>(LocalBridgeClazz, "CATEGORY_ACCESSIBILITY"); _CATEGORY_ACCESSIBILITYReady = true; } return _CATEGORY_ACCESSIBILITYContent; } }
        private static int _CATEGORY_ACCESSIBILITYContent = default;
        private static bool _CATEGORY_ACCESSIBILITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#CATEGORY_AUDIO"/>
        /// </summary>
        public static int CATEGORY_AUDIO { get { if (!_CATEGORY_AUDIOReady) { _CATEGORY_AUDIOContent = SGetField<int>(LocalBridgeClazz, "CATEGORY_AUDIO"); _CATEGORY_AUDIOReady = true; } return _CATEGORY_AUDIOContent; } }
        private static int _CATEGORY_AUDIOContent = default;
        private static bool _CATEGORY_AUDIOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#CATEGORY_GAME"/>
        /// </summary>
        public static int CATEGORY_GAME { get { if (!_CATEGORY_GAMEReady) { _CATEGORY_GAMEContent = SGetField<int>(LocalBridgeClazz, "CATEGORY_GAME"); _CATEGORY_GAMEReady = true; } return _CATEGORY_GAMEContent; } }
        private static int _CATEGORY_GAMEContent = default;
        private static bool _CATEGORY_GAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#CATEGORY_IMAGE"/>
        /// </summary>
        public static int CATEGORY_IMAGE { get { if (!_CATEGORY_IMAGEReady) { _CATEGORY_IMAGEContent = SGetField<int>(LocalBridgeClazz, "CATEGORY_IMAGE"); _CATEGORY_IMAGEReady = true; } return _CATEGORY_IMAGEContent; } }
        private static int _CATEGORY_IMAGEContent = default;
        private static bool _CATEGORY_IMAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#CATEGORY_MAPS"/>
        /// </summary>
        public static int CATEGORY_MAPS { get { if (!_CATEGORY_MAPSReady) { _CATEGORY_MAPSContent = SGetField<int>(LocalBridgeClazz, "CATEGORY_MAPS"); _CATEGORY_MAPSReady = true; } return _CATEGORY_MAPSContent; } }
        private static int _CATEGORY_MAPSContent = default;
        private static bool _CATEGORY_MAPSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#CATEGORY_NEWS"/>
        /// </summary>
        public static int CATEGORY_NEWS { get { if (!_CATEGORY_NEWSReady) { _CATEGORY_NEWSContent = SGetField<int>(LocalBridgeClazz, "CATEGORY_NEWS"); _CATEGORY_NEWSReady = true; } return _CATEGORY_NEWSContent; } }
        private static int _CATEGORY_NEWSContent = default;
        private static bool _CATEGORY_NEWSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#CATEGORY_PRODUCTIVITY"/>
        /// </summary>
        public static int CATEGORY_PRODUCTIVITY { get { if (!_CATEGORY_PRODUCTIVITYReady) { _CATEGORY_PRODUCTIVITYContent = SGetField<int>(LocalBridgeClazz, "CATEGORY_PRODUCTIVITY"); _CATEGORY_PRODUCTIVITYReady = true; } return _CATEGORY_PRODUCTIVITYContent; } }
        private static int _CATEGORY_PRODUCTIVITYContent = default;
        private static bool _CATEGORY_PRODUCTIVITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#CATEGORY_SOCIAL"/>
        /// </summary>
        public static int CATEGORY_SOCIAL { get { if (!_CATEGORY_SOCIALReady) { _CATEGORY_SOCIALContent = SGetField<int>(LocalBridgeClazz, "CATEGORY_SOCIAL"); _CATEGORY_SOCIALReady = true; } return _CATEGORY_SOCIALContent; } }
        private static int _CATEGORY_SOCIALContent = default;
        private static bool _CATEGORY_SOCIALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#CATEGORY_UNDEFINED"/>
        /// </summary>
        public static int CATEGORY_UNDEFINED { get { if (!_CATEGORY_UNDEFINEDReady) { _CATEGORY_UNDEFINEDContent = SGetField<int>(LocalBridgeClazz, "CATEGORY_UNDEFINED"); _CATEGORY_UNDEFINEDReady = true; } return _CATEGORY_UNDEFINEDContent; } }
        private static int _CATEGORY_UNDEFINEDContent = default;
        private static bool _CATEGORY_UNDEFINEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#CATEGORY_VIDEO"/>
        /// </summary>
        public static int CATEGORY_VIDEO { get { if (!_CATEGORY_VIDEOReady) { _CATEGORY_VIDEOContent = SGetField<int>(LocalBridgeClazz, "CATEGORY_VIDEO"); _CATEGORY_VIDEOReady = true; } return _CATEGORY_VIDEOContent; } }
        private static int _CATEGORY_VIDEOContent = default;
        private static bool _CATEGORY_VIDEOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_ALLOW_BACKUP"/>
        /// </summary>
        public static int FLAG_ALLOW_BACKUP { get { if (!_FLAG_ALLOW_BACKUPReady) { _FLAG_ALLOW_BACKUPContent = SGetField<int>(LocalBridgeClazz, "FLAG_ALLOW_BACKUP"); _FLAG_ALLOW_BACKUPReady = true; } return _FLAG_ALLOW_BACKUPContent; } }
        private static int _FLAG_ALLOW_BACKUPContent = default;
        private static bool _FLAG_ALLOW_BACKUPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_ALLOW_CLEAR_USER_DATA"/>
        /// </summary>
        public static int FLAG_ALLOW_CLEAR_USER_DATA { get { if (!_FLAG_ALLOW_CLEAR_USER_DATAReady) { _FLAG_ALLOW_CLEAR_USER_DATAContent = SGetField<int>(LocalBridgeClazz, "FLAG_ALLOW_CLEAR_USER_DATA"); _FLAG_ALLOW_CLEAR_USER_DATAReady = true; } return _FLAG_ALLOW_CLEAR_USER_DATAContent; } }
        private static int _FLAG_ALLOW_CLEAR_USER_DATAContent = default;
        private static bool _FLAG_ALLOW_CLEAR_USER_DATAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_ALLOW_TASK_REPARENTING"/>
        /// </summary>
        public static int FLAG_ALLOW_TASK_REPARENTING { get { if (!_FLAG_ALLOW_TASK_REPARENTINGReady) { _FLAG_ALLOW_TASK_REPARENTINGContent = SGetField<int>(LocalBridgeClazz, "FLAG_ALLOW_TASK_REPARENTING"); _FLAG_ALLOW_TASK_REPARENTINGReady = true; } return _FLAG_ALLOW_TASK_REPARENTINGContent; } }
        private static int _FLAG_ALLOW_TASK_REPARENTINGContent = default;
        private static bool _FLAG_ALLOW_TASK_REPARENTINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_DEBUGGABLE"/>
        /// </summary>
        public static int FLAG_DEBUGGABLE { get { if (!_FLAG_DEBUGGABLEReady) { _FLAG_DEBUGGABLEContent = SGetField<int>(LocalBridgeClazz, "FLAG_DEBUGGABLE"); _FLAG_DEBUGGABLEReady = true; } return _FLAG_DEBUGGABLEContent; } }
        private static int _FLAG_DEBUGGABLEContent = default;
        private static bool _FLAG_DEBUGGABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_EXTERNAL_STORAGE"/>
        /// </summary>
        public static int FLAG_EXTERNAL_STORAGE { get { if (!_FLAG_EXTERNAL_STORAGEReady) { _FLAG_EXTERNAL_STORAGEContent = SGetField<int>(LocalBridgeClazz, "FLAG_EXTERNAL_STORAGE"); _FLAG_EXTERNAL_STORAGEReady = true; } return _FLAG_EXTERNAL_STORAGEContent; } }
        private static int _FLAG_EXTERNAL_STORAGEContent = default;
        private static bool _FLAG_EXTERNAL_STORAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_EXTRACT_NATIVE_LIBS"/>
        /// </summary>
        public static int FLAG_EXTRACT_NATIVE_LIBS { get { if (!_FLAG_EXTRACT_NATIVE_LIBSReady) { _FLAG_EXTRACT_NATIVE_LIBSContent = SGetField<int>(LocalBridgeClazz, "FLAG_EXTRACT_NATIVE_LIBS"); _FLAG_EXTRACT_NATIVE_LIBSReady = true; } return _FLAG_EXTRACT_NATIVE_LIBSContent; } }
        private static int _FLAG_EXTRACT_NATIVE_LIBSContent = default;
        private static bool _FLAG_EXTRACT_NATIVE_LIBSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_FACTORY_TEST"/>
        /// </summary>
        public static int FLAG_FACTORY_TEST { get { if (!_FLAG_FACTORY_TESTReady) { _FLAG_FACTORY_TESTContent = SGetField<int>(LocalBridgeClazz, "FLAG_FACTORY_TEST"); _FLAG_FACTORY_TESTReady = true; } return _FLAG_FACTORY_TESTContent; } }
        private static int _FLAG_FACTORY_TESTContent = default;
        private static bool _FLAG_FACTORY_TESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_FULL_BACKUP_ONLY"/>
        /// </summary>
        public static int FLAG_FULL_BACKUP_ONLY { get { if (!_FLAG_FULL_BACKUP_ONLYReady) { _FLAG_FULL_BACKUP_ONLYContent = SGetField<int>(LocalBridgeClazz, "FLAG_FULL_BACKUP_ONLY"); _FLAG_FULL_BACKUP_ONLYReady = true; } return _FLAG_FULL_BACKUP_ONLYContent; } }
        private static int _FLAG_FULL_BACKUP_ONLYContent = default;
        private static bool _FLAG_FULL_BACKUP_ONLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_HARDWARE_ACCELERATED"/>
        /// </summary>
        public static int FLAG_HARDWARE_ACCELERATED { get { if (!_FLAG_HARDWARE_ACCELERATEDReady) { _FLAG_HARDWARE_ACCELERATEDContent = SGetField<int>(LocalBridgeClazz, "FLAG_HARDWARE_ACCELERATED"); _FLAG_HARDWARE_ACCELERATEDReady = true; } return _FLAG_HARDWARE_ACCELERATEDContent; } }
        private static int _FLAG_HARDWARE_ACCELERATEDContent = default;
        private static bool _FLAG_HARDWARE_ACCELERATEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_HAS_CODE"/>
        /// </summary>
        public static int FLAG_HAS_CODE { get { if (!_FLAG_HAS_CODEReady) { _FLAG_HAS_CODEContent = SGetField<int>(LocalBridgeClazz, "FLAG_HAS_CODE"); _FLAG_HAS_CODEReady = true; } return _FLAG_HAS_CODEContent; } }
        private static int _FLAG_HAS_CODEContent = default;
        private static bool _FLAG_HAS_CODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_INSTALLED"/>
        /// </summary>
        public static int FLAG_INSTALLED { get { if (!_FLAG_INSTALLEDReady) { _FLAG_INSTALLEDContent = SGetField<int>(LocalBridgeClazz, "FLAG_INSTALLED"); _FLAG_INSTALLEDReady = true; } return _FLAG_INSTALLEDContent; } }
        private static int _FLAG_INSTALLEDContent = default;
        private static bool _FLAG_INSTALLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_IS_DATA_ONLY"/>
        /// </summary>
        public static int FLAG_IS_DATA_ONLY { get { if (!_FLAG_IS_DATA_ONLYReady) { _FLAG_IS_DATA_ONLYContent = SGetField<int>(LocalBridgeClazz, "FLAG_IS_DATA_ONLY"); _FLAG_IS_DATA_ONLYReady = true; } return _FLAG_IS_DATA_ONLYContent; } }
        private static int _FLAG_IS_DATA_ONLYContent = default;
        private static bool _FLAG_IS_DATA_ONLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_IS_GAME"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int FLAG_IS_GAME { get { if (!_FLAG_IS_GAMEReady) { _FLAG_IS_GAMEContent = SGetField<int>(LocalBridgeClazz, "FLAG_IS_GAME"); _FLAG_IS_GAMEReady = true; } return _FLAG_IS_GAMEContent; } }
        private static int _FLAG_IS_GAMEContent = default;
        private static bool _FLAG_IS_GAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_KILL_AFTER_RESTORE"/>
        /// </summary>
        public static int FLAG_KILL_AFTER_RESTORE { get { if (!_FLAG_KILL_AFTER_RESTOREReady) { _FLAG_KILL_AFTER_RESTOREContent = SGetField<int>(LocalBridgeClazz, "FLAG_KILL_AFTER_RESTORE"); _FLAG_KILL_AFTER_RESTOREReady = true; } return _FLAG_KILL_AFTER_RESTOREContent; } }
        private static int _FLAG_KILL_AFTER_RESTOREContent = default;
        private static bool _FLAG_KILL_AFTER_RESTOREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_LARGE_HEAP"/>
        /// </summary>
        public static int FLAG_LARGE_HEAP { get { if (!_FLAG_LARGE_HEAPReady) { _FLAG_LARGE_HEAPContent = SGetField<int>(LocalBridgeClazz, "FLAG_LARGE_HEAP"); _FLAG_LARGE_HEAPReady = true; } return _FLAG_LARGE_HEAPContent; } }
        private static int _FLAG_LARGE_HEAPContent = default;
        private static bool _FLAG_LARGE_HEAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_MULTIARCH"/>
        /// </summary>
        public static int FLAG_MULTIARCH { get { if (!_FLAG_MULTIARCHReady) { _FLAG_MULTIARCHContent = SGetField<int>(LocalBridgeClazz, "FLAG_MULTIARCH"); _FLAG_MULTIARCHReady = true; } return _FLAG_MULTIARCHContent; } }
        private static int _FLAG_MULTIARCHContent = default;
        private static bool _FLAG_MULTIARCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_PERSISTENT"/>
        /// </summary>
        public static int FLAG_PERSISTENT { get { if (!_FLAG_PERSISTENTReady) { _FLAG_PERSISTENTContent = SGetField<int>(LocalBridgeClazz, "FLAG_PERSISTENT"); _FLAG_PERSISTENTReady = true; } return _FLAG_PERSISTENTContent; } }
        private static int _FLAG_PERSISTENTContent = default;
        private static bool _FLAG_PERSISTENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_RESIZEABLE_FOR_SCREENS"/>
        /// </summary>
        public static int FLAG_RESIZEABLE_FOR_SCREENS { get { if (!_FLAG_RESIZEABLE_FOR_SCREENSReady) { _FLAG_RESIZEABLE_FOR_SCREENSContent = SGetField<int>(LocalBridgeClazz, "FLAG_RESIZEABLE_FOR_SCREENS"); _FLAG_RESIZEABLE_FOR_SCREENSReady = true; } return _FLAG_RESIZEABLE_FOR_SCREENSContent; } }
        private static int _FLAG_RESIZEABLE_FOR_SCREENSContent = default;
        private static bool _FLAG_RESIZEABLE_FOR_SCREENSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_RESTORE_ANY_VERSION"/>
        /// </summary>
        public static int FLAG_RESTORE_ANY_VERSION { get { if (!_FLAG_RESTORE_ANY_VERSIONReady) { _FLAG_RESTORE_ANY_VERSIONContent = SGetField<int>(LocalBridgeClazz, "FLAG_RESTORE_ANY_VERSION"); _FLAG_RESTORE_ANY_VERSIONReady = true; } return _FLAG_RESTORE_ANY_VERSIONContent; } }
        private static int _FLAG_RESTORE_ANY_VERSIONContent = default;
        private static bool _FLAG_RESTORE_ANY_VERSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_STOPPED"/>
        /// </summary>
        public static int FLAG_STOPPED { get { if (!_FLAG_STOPPEDReady) { _FLAG_STOPPEDContent = SGetField<int>(LocalBridgeClazz, "FLAG_STOPPED"); _FLAG_STOPPEDReady = true; } return _FLAG_STOPPEDContent; } }
        private static int _FLAG_STOPPEDContent = default;
        private static bool _FLAG_STOPPEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_SUPPORTS_LARGE_SCREENS"/>
        /// </summary>
        public static int FLAG_SUPPORTS_LARGE_SCREENS { get { if (!_FLAG_SUPPORTS_LARGE_SCREENSReady) { _FLAG_SUPPORTS_LARGE_SCREENSContent = SGetField<int>(LocalBridgeClazz, "FLAG_SUPPORTS_LARGE_SCREENS"); _FLAG_SUPPORTS_LARGE_SCREENSReady = true; } return _FLAG_SUPPORTS_LARGE_SCREENSContent; } }
        private static int _FLAG_SUPPORTS_LARGE_SCREENSContent = default;
        private static bool _FLAG_SUPPORTS_LARGE_SCREENSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_SUPPORTS_NORMAL_SCREENS"/>
        /// </summary>
        public static int FLAG_SUPPORTS_NORMAL_SCREENS { get { if (!_FLAG_SUPPORTS_NORMAL_SCREENSReady) { _FLAG_SUPPORTS_NORMAL_SCREENSContent = SGetField<int>(LocalBridgeClazz, "FLAG_SUPPORTS_NORMAL_SCREENS"); _FLAG_SUPPORTS_NORMAL_SCREENSReady = true; } return _FLAG_SUPPORTS_NORMAL_SCREENSContent; } }
        private static int _FLAG_SUPPORTS_NORMAL_SCREENSContent = default;
        private static bool _FLAG_SUPPORTS_NORMAL_SCREENSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_SUPPORTS_RTL"/>
        /// </summary>
        public static int FLAG_SUPPORTS_RTL { get { if (!_FLAG_SUPPORTS_RTLReady) { _FLAG_SUPPORTS_RTLContent = SGetField<int>(LocalBridgeClazz, "FLAG_SUPPORTS_RTL"); _FLAG_SUPPORTS_RTLReady = true; } return _FLAG_SUPPORTS_RTLContent; } }
        private static int _FLAG_SUPPORTS_RTLContent = default;
        private static bool _FLAG_SUPPORTS_RTLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_SUPPORTS_SCREEN_DENSITIES"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int FLAG_SUPPORTS_SCREEN_DENSITIES { get { if (!_FLAG_SUPPORTS_SCREEN_DENSITIESReady) { _FLAG_SUPPORTS_SCREEN_DENSITIESContent = SGetField<int>(LocalBridgeClazz, "FLAG_SUPPORTS_SCREEN_DENSITIES"); _FLAG_SUPPORTS_SCREEN_DENSITIESReady = true; } return _FLAG_SUPPORTS_SCREEN_DENSITIESContent; } }
        private static int _FLAG_SUPPORTS_SCREEN_DENSITIESContent = default;
        private static bool _FLAG_SUPPORTS_SCREEN_DENSITIESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_SUPPORTS_SMALL_SCREENS"/>
        /// </summary>
        public static int FLAG_SUPPORTS_SMALL_SCREENS { get { if (!_FLAG_SUPPORTS_SMALL_SCREENSReady) { _FLAG_SUPPORTS_SMALL_SCREENSContent = SGetField<int>(LocalBridgeClazz, "FLAG_SUPPORTS_SMALL_SCREENS"); _FLAG_SUPPORTS_SMALL_SCREENSReady = true; } return _FLAG_SUPPORTS_SMALL_SCREENSContent; } }
        private static int _FLAG_SUPPORTS_SMALL_SCREENSContent = default;
        private static bool _FLAG_SUPPORTS_SMALL_SCREENSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_SUPPORTS_XLARGE_SCREENS"/>
        /// </summary>
        public static int FLAG_SUPPORTS_XLARGE_SCREENS { get { if (!_FLAG_SUPPORTS_XLARGE_SCREENSReady) { _FLAG_SUPPORTS_XLARGE_SCREENSContent = SGetField<int>(LocalBridgeClazz, "FLAG_SUPPORTS_XLARGE_SCREENS"); _FLAG_SUPPORTS_XLARGE_SCREENSReady = true; } return _FLAG_SUPPORTS_XLARGE_SCREENSContent; } }
        private static int _FLAG_SUPPORTS_XLARGE_SCREENSContent = default;
        private static bool _FLAG_SUPPORTS_XLARGE_SCREENSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_SUSPENDED"/>
        /// </summary>
        public static int FLAG_SUSPENDED { get { if (!_FLAG_SUSPENDEDReady) { _FLAG_SUSPENDEDContent = SGetField<int>(LocalBridgeClazz, "FLAG_SUSPENDED"); _FLAG_SUSPENDEDReady = true; } return _FLAG_SUSPENDEDContent; } }
        private static int _FLAG_SUSPENDEDContent = default;
        private static bool _FLAG_SUSPENDEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_SYSTEM"/>
        /// </summary>
        public static int FLAG_SYSTEM { get { if (!_FLAG_SYSTEMReady) { _FLAG_SYSTEMContent = SGetField<int>(LocalBridgeClazz, "FLAG_SYSTEM"); _FLAG_SYSTEMReady = true; } return _FLAG_SYSTEMContent; } }
        private static int _FLAG_SYSTEMContent = default;
        private static bool _FLAG_SYSTEMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_TEST_ONLY"/>
        /// </summary>
        public static int FLAG_TEST_ONLY { get { if (!_FLAG_TEST_ONLYReady) { _FLAG_TEST_ONLYContent = SGetField<int>(LocalBridgeClazz, "FLAG_TEST_ONLY"); _FLAG_TEST_ONLYReady = true; } return _FLAG_TEST_ONLYContent; } }
        private static int _FLAG_TEST_ONLYContent = default;
        private static bool _FLAG_TEST_ONLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_UPDATED_SYSTEM_APP"/>
        /// </summary>
        public static int FLAG_UPDATED_SYSTEM_APP { get { if (!_FLAG_UPDATED_SYSTEM_APPReady) { _FLAG_UPDATED_SYSTEM_APPContent = SGetField<int>(LocalBridgeClazz, "FLAG_UPDATED_SYSTEM_APP"); _FLAG_UPDATED_SYSTEM_APPReady = true; } return _FLAG_UPDATED_SYSTEM_APPContent; } }
        private static int _FLAG_UPDATED_SYSTEM_APPContent = default;
        private static bool _FLAG_UPDATED_SYSTEM_APPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_USES_CLEARTEXT_TRAFFIC"/>
        /// </summary>
        public static int FLAG_USES_CLEARTEXT_TRAFFIC { get { if (!_FLAG_USES_CLEARTEXT_TRAFFICReady) { _FLAG_USES_CLEARTEXT_TRAFFICContent = SGetField<int>(LocalBridgeClazz, "FLAG_USES_CLEARTEXT_TRAFFIC"); _FLAG_USES_CLEARTEXT_TRAFFICReady = true; } return _FLAG_USES_CLEARTEXT_TRAFFICContent; } }
        private static int _FLAG_USES_CLEARTEXT_TRAFFICContent = default;
        private static bool _FLAG_USES_CLEARTEXT_TRAFFICReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_VM_SAFE_MODE"/>
        /// </summary>
        public static int FLAG_VM_SAFE_MODE { get { if (!_FLAG_VM_SAFE_MODEReady) { _FLAG_VM_SAFE_MODEContent = SGetField<int>(LocalBridgeClazz, "FLAG_VM_SAFE_MODE"); _FLAG_VM_SAFE_MODEReady = true; } return _FLAG_VM_SAFE_MODEContent; } }
        private static int _FLAG_VM_SAFE_MODEContent = default;
        private static bool _FLAG_VM_SAFE_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#GWP_ASAN_ALWAYS"/>
        /// </summary>
        public static int GWP_ASAN_ALWAYS { get { if (!_GWP_ASAN_ALWAYSReady) { _GWP_ASAN_ALWAYSContent = SGetField<int>(LocalBridgeClazz, "GWP_ASAN_ALWAYS"); _GWP_ASAN_ALWAYSReady = true; } return _GWP_ASAN_ALWAYSContent; } }
        private static int _GWP_ASAN_ALWAYSContent = default;
        private static bool _GWP_ASAN_ALWAYSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#GWP_ASAN_DEFAULT"/>
        /// </summary>
        public static int GWP_ASAN_DEFAULT { get { if (!_GWP_ASAN_DEFAULTReady) { _GWP_ASAN_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "GWP_ASAN_DEFAULT"); _GWP_ASAN_DEFAULTReady = true; } return _GWP_ASAN_DEFAULTContent; } }
        private static int _GWP_ASAN_DEFAULTContent = default;
        private static bool _GWP_ASAN_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#GWP_ASAN_NEVER"/>
        /// </summary>
        public static int GWP_ASAN_NEVER { get { if (!_GWP_ASAN_NEVERReady) { _GWP_ASAN_NEVERContent = SGetField<int>(LocalBridgeClazz, "GWP_ASAN_NEVER"); _GWP_ASAN_NEVERReady = true; } return _GWP_ASAN_NEVERContent; } }
        private static int _GWP_ASAN_NEVERContent = default;
        private static bool _GWP_ASAN_NEVERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#MEMTAG_ASYNC"/>
        /// </summary>
        public static int MEMTAG_ASYNC { get { if (!_MEMTAG_ASYNCReady) { _MEMTAG_ASYNCContent = SGetField<int>(LocalBridgeClazz, "MEMTAG_ASYNC"); _MEMTAG_ASYNCReady = true; } return _MEMTAG_ASYNCContent; } }
        private static int _MEMTAG_ASYNCContent = default;
        private static bool _MEMTAG_ASYNCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#MEMTAG_DEFAULT"/>
        /// </summary>
        public static int MEMTAG_DEFAULT { get { if (!_MEMTAG_DEFAULTReady) { _MEMTAG_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "MEMTAG_DEFAULT"); _MEMTAG_DEFAULTReady = true; } return _MEMTAG_DEFAULTContent; } }
        private static int _MEMTAG_DEFAULTContent = default;
        private static bool _MEMTAG_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#MEMTAG_OFF"/>
        /// </summary>
        public static int MEMTAG_OFF { get { if (!_MEMTAG_OFFReady) { _MEMTAG_OFFContent = SGetField<int>(LocalBridgeClazz, "MEMTAG_OFF"); _MEMTAG_OFFReady = true; } return _MEMTAG_OFFContent; } }
        private static int _MEMTAG_OFFContent = default;
        private static bool _MEMTAG_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#MEMTAG_SYNC"/>
        /// </summary>
        public static int MEMTAG_SYNC { get { if (!_MEMTAG_SYNCReady) { _MEMTAG_SYNCContent = SGetField<int>(LocalBridgeClazz, "MEMTAG_SYNC"); _MEMTAG_SYNCReady = true; } return _MEMTAG_SYNCContent; } }
        private static int _MEMTAG_SYNCContent = default;
        private static bool _MEMTAG_SYNCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#RAW_EXTERNAL_STORAGE_ACCESS_DEFAULT"/>
        /// </summary>
        public static int RAW_EXTERNAL_STORAGE_ACCESS_DEFAULT { get { if (!_RAW_EXTERNAL_STORAGE_ACCESS_DEFAULTReady) { _RAW_EXTERNAL_STORAGE_ACCESS_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "RAW_EXTERNAL_STORAGE_ACCESS_DEFAULT"); _RAW_EXTERNAL_STORAGE_ACCESS_DEFAULTReady = true; } return _RAW_EXTERNAL_STORAGE_ACCESS_DEFAULTContent; } }
        private static int _RAW_EXTERNAL_STORAGE_ACCESS_DEFAULTContent = default;
        private static bool _RAW_EXTERNAL_STORAGE_ACCESS_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#RAW_EXTERNAL_STORAGE_ACCESS_NOT_REQUESTED"/>
        /// </summary>
        public static int RAW_EXTERNAL_STORAGE_ACCESS_NOT_REQUESTED { get { if (!_RAW_EXTERNAL_STORAGE_ACCESS_NOT_REQUESTEDReady) { _RAW_EXTERNAL_STORAGE_ACCESS_NOT_REQUESTEDContent = SGetField<int>(LocalBridgeClazz, "RAW_EXTERNAL_STORAGE_ACCESS_NOT_REQUESTED"); _RAW_EXTERNAL_STORAGE_ACCESS_NOT_REQUESTEDReady = true; } return _RAW_EXTERNAL_STORAGE_ACCESS_NOT_REQUESTEDContent; } }
        private static int _RAW_EXTERNAL_STORAGE_ACCESS_NOT_REQUESTEDContent = default;
        private static bool _RAW_EXTERNAL_STORAGE_ACCESS_NOT_REQUESTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#RAW_EXTERNAL_STORAGE_ACCESS_REQUESTED"/>
        /// </summary>
        public static int RAW_EXTERNAL_STORAGE_ACCESS_REQUESTED { get { if (!_RAW_EXTERNAL_STORAGE_ACCESS_REQUESTEDReady) { _RAW_EXTERNAL_STORAGE_ACCESS_REQUESTEDContent = SGetField<int>(LocalBridgeClazz, "RAW_EXTERNAL_STORAGE_ACCESS_REQUESTED"); _RAW_EXTERNAL_STORAGE_ACCESS_REQUESTEDReady = true; } return _RAW_EXTERNAL_STORAGE_ACCESS_REQUESTEDContent; } }
        private static int _RAW_EXTERNAL_STORAGE_ACCESS_REQUESTEDContent = default;
        private static bool _RAW_EXTERNAL_STORAGE_ACCESS_REQUESTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#ZEROINIT_DEFAULT"/>
        /// </summary>
        public static int ZEROINIT_DEFAULT { get { if (!_ZEROINIT_DEFAULTReady) { _ZEROINIT_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "ZEROINIT_DEFAULT"); _ZEROINIT_DEFAULTReady = true; } return _ZEROINIT_DEFAULTContent; } }
        private static int _ZEROINIT_DEFAULTContent = default;
        private static bool _ZEROINIT_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#ZEROINIT_DISABLED"/>
        /// </summary>
        public static int ZEROINIT_DISABLED { get { if (!_ZEROINIT_DISABLEDReady) { _ZEROINIT_DISABLEDContent = SGetField<int>(LocalBridgeClazz, "ZEROINIT_DISABLED"); _ZEROINIT_DISABLEDReady = true; } return _ZEROINIT_DISABLEDContent; } }
        private static int _ZEROINIT_DISABLEDContent = default;
        private static bool _ZEROINIT_DISABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#ZEROINIT_ENABLED"/>
        /// </summary>
        public static int ZEROINIT_ENABLED { get { if (!_ZEROINIT_ENABLEDReady) { _ZEROINIT_ENABLEDContent = SGetField<int>(LocalBridgeClazz, "ZEROINIT_ENABLED"); _ZEROINIT_ENABLEDReady = true; } return _ZEROINIT_ENABLEDContent; } }
        private static int _ZEROINIT_ENABLEDContent = default;
        private static bool _ZEROINIT_ENABLEDReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#getCategoryTitle(android.content.Context,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public static Java.Lang.CharSequence GetCategoryTitle(Android.Content.Context arg0, int arg1)
        {
            return SExecute<Java.Lang.CharSequence>(LocalBridgeClazz, "getCategoryTitle", arg0, arg1);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#areAttributionsUserVisible()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool AreAttributionsUserVisible()
        {
            return IExecuteWithSignature<bool>("areAttributionsUserVisible", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#isProfileable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsProfileable()
        {
            return IExecuteWithSignature<bool>("isProfileable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#isProfileableByShell()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsProfileableByShell()
        {
            return IExecuteWithSignature<bool>("isProfileableByShell", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#isResourceOverlay()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsResourceOverlay()
        {
            return IExecuteWithSignature<bool>("isResourceOverlay", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#isVirtualPreload()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsVirtualPreload()
        {
            return IExecuteWithSignature<bool>("isVirtualPreload", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#getGwpAsanMode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetGwpAsanMode()
        {
            return IExecuteWithSignature<int>("getGwpAsanMode", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#getMemtagMode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMemtagMode()
        {
            return IExecuteWithSignature<int>("getMemtagMode", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#getNativeHeapZeroInitialized()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetNativeHeapZeroInitialized()
        {
            return IExecuteWithSignature<int>("getNativeHeapZeroInitialized", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#getRequestRawExternalStorageAccess()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetRequestRawExternalStorageAccess()
        {
            return IExecuteWithSignature<int>("getRequestRawExternalStorageAccess", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#loadDescription(android.content.pm.PackageManager)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Pm.PackageManager"/></param>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence LoadDescription(Android.Content.Pm.PackageManager arg0)
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("loadDescription", "(Landroid/content/pm/PackageManager;)Ljava/lang/CharSequence;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#getKnownActivityEmbeddingCerts()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Set"/></returns>
        public Java.Util.Set<Java.Lang.String> GetKnownActivityEmbeddingCerts()
        {
            return IExecuteWithSignature<Java.Util.Set<Java.Lang.String>>("getKnownActivityEmbeddingCerts", "()Ljava/util/Set;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#dump(android.util.Printer,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Util.Printer"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        public void Dump(Android.Util.Printer arg0, Java.Lang.String arg1)
        {
            IExecute("dump", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region DisplayNameComparator
        public partial class DisplayNameComparator
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.DisplayNameComparator.html#%3Cinit%3E(android.content.pm.PackageManager)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.Pm.PackageManager"/></param>
            public DisplayNameComparator(Android.Content.Pm.PackageManager arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.DisplayNameComparator.html#compare(android.content.pm.ApplicationInfo,android.content.pm.ApplicationInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.Pm.ApplicationInfo"/></param>
            /// <param name="arg1"><see cref="Android.Content.Pm.ApplicationInfo"/></param>
            /// <returns><see cref="int"/></returns>
            public int Compare(Android.Content.Pm.ApplicationInfo arg0, Android.Content.Pm.ApplicationInfo arg1)
            {
                return IExecute<int>("compare", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/pm/ApplicationInfo.DisplayNameComparator.html#compare(java.lang.Object,java.lang.Object)"/>
            /// </summary>
            /// <param name="arg0"><see cref="object"/></param>
            /// <param name="arg1"><see cref="object"/></param>
            /// <returns><see cref="int"/></returns>
            public int Compare(object arg0, object arg1)
            {
                return IExecute<int>("compare", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
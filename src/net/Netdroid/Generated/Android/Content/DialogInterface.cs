/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Content
{
    #region IDialogInterface
    /// <summary>
    /// .NET interface for TO BE DEFINED FROM USER
    /// </summary>
    public partial interface IDialogInterface
    {
        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region DialogInterface
    public partial class DialogInterface : Android.Content.IDialogInterface
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/DialogInterface.html#BUTTON_NEGATIVE"/>
        /// </summary>
        public static int BUTTON_NEGATIVE { get { if (!_BUTTON_NEGATIVEReady) { _BUTTON_NEGATIVEContent = SGetField<int>(LocalBridgeClazz, "BUTTON_NEGATIVE"); _BUTTON_NEGATIVEReady = true; } return _BUTTON_NEGATIVEContent; } }
        private static int _BUTTON_NEGATIVEContent = default;
        private static bool _BUTTON_NEGATIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/DialogInterface.html#BUTTON_NEUTRAL"/>
        /// </summary>
        public static int BUTTON_NEUTRAL { get { if (!_BUTTON_NEUTRALReady) { _BUTTON_NEUTRALContent = SGetField<int>(LocalBridgeClazz, "BUTTON_NEUTRAL"); _BUTTON_NEUTRALReady = true; } return _BUTTON_NEUTRALContent; } }
        private static int _BUTTON_NEUTRALContent = default;
        private static bool _BUTTON_NEUTRALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/DialogInterface.html#BUTTON_POSITIVE"/>
        /// </summary>
        public static int BUTTON_POSITIVE { get { if (!_BUTTON_POSITIVEReady) { _BUTTON_POSITIVEContent = SGetField<int>(LocalBridgeClazz, "BUTTON_POSITIVE"); _BUTTON_POSITIVEReady = true; } return _BUTTON_POSITIVEContent; } }
        private static int _BUTTON_POSITIVEContent = default;
        private static bool _BUTTON_POSITIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/DialogInterface.html#BUTTON1"/>
        /// </summary>
        [System.Obsolete()]
        public static int BUTTON1 { get { if (!_BUTTON1Ready) { _BUTTON1Content = SGetField<int>(LocalBridgeClazz, "BUTTON1"); _BUTTON1Ready = true; } return _BUTTON1Content; } }
        private static int _BUTTON1Content = default;
        private static bool _BUTTON1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/DialogInterface.html#BUTTON2"/>
        /// </summary>
        [System.Obsolete()]
        public static int BUTTON2 { get { if (!_BUTTON2Ready) { _BUTTON2Content = SGetField<int>(LocalBridgeClazz, "BUTTON2"); _BUTTON2Ready = true; } return _BUTTON2Content; } }
        private static int _BUTTON2Content = default;
        private static bool _BUTTON2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/DialogInterface.html#BUTTON3"/>
        /// </summary>
        [System.Obsolete()]
        public static int BUTTON3 { get { if (!_BUTTON3Ready) { _BUTTON3Content = SGetField<int>(LocalBridgeClazz, "BUTTON3"); _BUTTON3Ready = true; } return _BUTTON3Content; } }
        private static int _BUTTON3Content = default;
        private static bool _BUTTON3Ready = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/DialogInterface.html#cancel()"/>
        /// </summary>
        public void Cancel()
        {
            IExecuteWithSignature("cancel", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/DialogInterface.html#dismiss()"/>
        /// </summary>
        public void Dismiss()
        {
            IExecuteWithSignature("dismiss", "()V");
        }

        #endregion

        #region Nested classes
        #region OnCancelListener
        public partial class OnCancelListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnCancelListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onCancel", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Content.DialogInterface>>>(OnCancelEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/content/DialogInterface.OnCancelListener.html#onCancel(android.content.DialogInterface)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnCancel"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Content.DialogInterface> OnOnCancel { get; set; } = null;

            void OnCancelEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Content.DialogInterface>> data)
            {
                var methodToExecute = (OnOnCancel != null) ? OnOnCancel : OnCancel;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/DialogInterface.OnCancelListener.html#onCancel(android.content.DialogInterface)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.DialogInterface"/></param>
            public virtual void OnCancel(Android.Content.DialogInterface arg0)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnCancelListenerDirect
        public partial class OnCancelListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/DialogInterface.OnCancelListener.html#onCancel(android.content.DialogInterface)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.DialogInterface"/></param>
            public override void OnCancel(Android.Content.DialogInterface arg0)
            {
                IExecuteWithSignature("onCancel", "(Landroid/content/DialogInterface;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnClickListener
        public partial class OnClickListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnClickListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onClick", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Content.DialogInterface>>>(OnClickEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/content/DialogInterface.OnClickListener.html#onClick(android.content.DialogInterface,int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnClick"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Content.DialogInterface, int> OnOnClick { get; set; } = null;

            void OnClickEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Content.DialogInterface>> data)
            {
                var methodToExecute = (OnOnClick != null) ? OnOnClick : OnClick;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/DialogInterface.OnClickListener.html#onClick(android.content.DialogInterface,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.DialogInterface"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public virtual void OnClick(Android.Content.DialogInterface arg0, int arg1)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnClickListenerDirect
        public partial class OnClickListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/DialogInterface.OnClickListener.html#onClick(android.content.DialogInterface,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.DialogInterface"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public override void OnClick(Android.Content.DialogInterface arg0, int arg1)
            {
                IExecute("onClick", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnDismissListener
        public partial class OnDismissListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnDismissListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onDismiss", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Content.DialogInterface>>>(OnDismissEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/content/DialogInterface.OnDismissListener.html#onDismiss(android.content.DialogInterface)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnDismiss"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Content.DialogInterface> OnOnDismiss { get; set; } = null;

            void OnDismissEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Content.DialogInterface>> data)
            {
                var methodToExecute = (OnOnDismiss != null) ? OnOnDismiss : OnDismiss;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/DialogInterface.OnDismissListener.html#onDismiss(android.content.DialogInterface)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.DialogInterface"/></param>
            public virtual void OnDismiss(Android.Content.DialogInterface arg0)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnDismissListenerDirect
        public partial class OnDismissListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/DialogInterface.OnDismissListener.html#onDismiss(android.content.DialogInterface)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.DialogInterface"/></param>
            public override void OnDismiss(Android.Content.DialogInterface arg0)
            {
                IExecuteWithSignature("onDismiss", "(Landroid/content/DialogInterface;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnKeyListener
        public partial class OnKeyListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnKeyListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onKey", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Content.DialogInterface>>>(OnKeyEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/content/DialogInterface.OnKeyListener.html#onKey(android.content.DialogInterface,int,android.view.KeyEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnKey"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Func<Android.Content.DialogInterface, int, Android.View.KeyEvent, bool> OnOnKey { get; set; } = null;

            void OnKeyEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Content.DialogInterface>> data)
            {
                var methodToExecute = (OnOnKey != null) ? OnOnKey : OnKey;
                var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<Android.View.KeyEvent>(1));
                data.SetReturnValue(executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/DialogInterface.OnKeyListener.html#onKey(android.content.DialogInterface,int,android.view.KeyEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.DialogInterface"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="Android.View.KeyEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnKey(Android.Content.DialogInterface arg0, int arg1, Android.View.KeyEvent arg2)
            {
                return default;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnKeyListenerDirect
        public partial class OnKeyListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/DialogInterface.OnKeyListener.html#onKey(android.content.DialogInterface,int,android.view.KeyEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.DialogInterface"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="Android.View.KeyEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnKey(Android.Content.DialogInterface arg0, int arg1, Android.View.KeyEvent arg2)
            {
                return IExecute<bool>("onKey", arg0, arg1, arg2);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnMultiChoiceClickListener
        public partial class OnMultiChoiceClickListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnMultiChoiceClickListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onClick", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Content.DialogInterface>>>(OnClickEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/content/DialogInterface.OnMultiChoiceClickListener.html#onClick(android.content.DialogInterface,int,boolean)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnClick"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Content.DialogInterface, int, bool> OnOnClick { get; set; } = null;

            void OnClickEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Content.DialogInterface>> data)
            {
                var methodToExecute = (OnOnClick != null) ? OnOnClick : OnClick;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<bool>(1));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/DialogInterface.OnMultiChoiceClickListener.html#onClick(android.content.DialogInterface,int,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.DialogInterface"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="bool"/></param>
            public virtual void OnClick(Android.Content.DialogInterface arg0, int arg1, bool arg2)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnMultiChoiceClickListenerDirect
        public partial class OnMultiChoiceClickListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/DialogInterface.OnMultiChoiceClickListener.html#onClick(android.content.DialogInterface,int,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.DialogInterface"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="bool"/></param>
            public override void OnClick(Android.Content.DialogInterface arg0, int arg1, bool arg2)
            {
                IExecute("onClick", arg0, arg1, arg2);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnShowListener
        public partial class OnShowListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnShowListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onShow", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Content.DialogInterface>>>(OnShowEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/content/DialogInterface.OnShowListener.html#onShow(android.content.DialogInterface)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnShow"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Content.DialogInterface> OnOnShow { get; set; } = null;

            void OnShowEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Content.DialogInterface>> data)
            {
                var methodToExecute = (OnOnShow != null) ? OnOnShow : OnShow;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/DialogInterface.OnShowListener.html#onShow(android.content.DialogInterface)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.DialogInterface"/></param>
            public virtual void OnShow(Android.Content.DialogInterface arg0)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnShowListenerDirect
        public partial class OnShowListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/content/DialogInterface.OnShowListener.html#onShow(android.content.DialogInterface)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.DialogInterface"/></param>
            public override void OnShow(Android.Content.DialogInterface arg0)
            {
                IExecuteWithSignature("onShow", "(Landroid/content/DialogInterface;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
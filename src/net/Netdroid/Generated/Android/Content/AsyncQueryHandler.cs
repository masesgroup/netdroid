/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Content
{
    #region AsyncQueryHandler declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/content/AsyncQueryHandler.html"/>
    /// </summary>
    public partial class AsyncQueryHandler : Android.Os.Handler
    {
        const string _bridgeClassName = "android.content.AsyncQueryHandler";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("AsyncQueryHandler class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public AsyncQueryHandler() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("AsyncQueryHandler class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public AsyncQueryHandler(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region AsyncQueryHandler implementation
    public partial class AsyncQueryHandler
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/AsyncQueryHandler.html#%3Cinit%3E(android.content.ContentResolver)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
        public AsyncQueryHandler(Android.Content.ContentResolver arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/AsyncQueryHandler.html#cancelOperation(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void CancelOperation(int arg0)
        {
            IExecuteWithSignature("cancelOperation", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/AsyncQueryHandler.html#startDelete(int,java.lang.Object,android.net.Uri,java.lang.String,java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="object"/></param>
        /// <param name="arg2"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <param name="arg4"><see cref="Java.Lang.String"/></param>
        public void StartDelete(int arg0, object arg1, Android.Net.Uri arg2, Java.Lang.String arg3, Java.Lang.String[] arg4)
        {
            IExecute("startDelete", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/AsyncQueryHandler.html#startInsert(int,java.lang.Object,android.net.Uri,android.content.ContentValues)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="object"/></param>
        /// <param name="arg2"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg3"><see cref="Android.Content.ContentValues"/></param>
        public void StartInsert(int arg0, object arg1, Android.Net.Uri arg2, Android.Content.ContentValues arg3)
        {
            IExecute("startInsert", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/AsyncQueryHandler.html#startUpdate(int,java.lang.Object,android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="object"/></param>
        /// <param name="arg2"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg3"><see cref="Android.Content.ContentValues"/></param>
        /// <param name="arg4"><see cref="Java.Lang.String"/></param>
        /// <param name="arg5"><see cref="Java.Lang.String"/></param>
        public void StartUpdate(int arg0, object arg1, Android.Net.Uri arg2, Android.Content.ContentValues arg3, Java.Lang.String arg4, Java.Lang.String[] arg5)
        {
            IExecute("startUpdate", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/content/AsyncQueryHandler.html#startQuery(int,java.lang.Object,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="object"/></param>
        /// <param name="arg2"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <param name="arg4"><see cref="Java.Lang.String"/></param>
        /// <param name="arg5"><see cref="Java.Lang.String"/></param>
        /// <param name="arg6"><see cref="Java.Lang.String"/></param>
        public void StartQuery(int arg0, object arg1, Android.Net.Uri arg2, Java.Lang.String[] arg3, Java.Lang.String arg4, Java.Lang.String[] arg5, Java.Lang.String arg6)
        {
            IExecute("startQuery", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Printservice
{
    #region PrinterDiscoverySession declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/printservice/PrinterDiscoverySession.html"/>
    /// </summary>
    public partial class PrinterDiscoverySession : MASES.JCOBridge.C2JBridge.JVMBridgeBase<PrinterDiscoverySession>
    {
        const string _bridgeClassName = "android.printservice.PrinterDiscoverySession";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("PrinterDiscoverySession class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public PrinterDiscoverySession() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("PrinterDiscoverySession class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public PrinterDiscoverySession(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region PrinterDiscoverySession implementation
    public partial class PrinterDiscoverySession
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/printservice/PrinterDiscoverySession.html#onDestroy()"/>
        /// </summary>
        public void OnDestroy()
        {
            IExecuteWithSignature("onDestroy", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/printservice/PrinterDiscoverySession.html#onStartPrinterDiscovery(java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        public void OnStartPrinterDiscovery(Java.Util.List<Android.Print.PrinterId> arg0)
        {
            IExecuteWithSignature("onStartPrinterDiscovery", "(Ljava/util/List;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/printservice/PrinterDiscoverySession.html#onStartPrinterStateTracking(android.print.PrinterId)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Print.PrinterId"/></param>
        public void OnStartPrinterStateTracking(Android.Print.PrinterId arg0)
        {
            IExecuteWithSignature("onStartPrinterStateTracking", "(Landroid/print/PrinterId;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/printservice/PrinterDiscoverySession.html#onStopPrinterDiscovery()"/>
        /// </summary>
        public void OnStopPrinterDiscovery()
        {
            IExecuteWithSignature("onStopPrinterDiscovery", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/printservice/PrinterDiscoverySession.html#onStopPrinterStateTracking(android.print.PrinterId)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Print.PrinterId"/></param>
        public void OnStopPrinterStateTracking(Android.Print.PrinterId arg0)
        {
            IExecuteWithSignature("onStopPrinterStateTracking", "(Landroid/print/PrinterId;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/printservice/PrinterDiscoverySession.html#onValidatePrinters(java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        public void OnValidatePrinters(Java.Util.List<Android.Print.PrinterId> arg0)
        {
            IExecuteWithSignature("onValidatePrinters", "(Ljava/util/List;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/printservice/PrinterDiscoverySession.html#isDestroyed()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDestroyed()
        {
            return IExecuteWithSignature<bool>("isDestroyed", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/printservice/PrinterDiscoverySession.html#isPrinterDiscoveryStarted()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsPrinterDiscoveryStarted()
        {
            return IExecuteWithSignature<bool>("isPrinterDiscoveryStarted", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/printservice/PrinterDiscoverySession.html#getTrackedPrinters()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Print.PrinterId> GetTrackedPrinters()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Print.PrinterId>>("getTrackedPrinters", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/printservice/PrinterDiscoverySession.html#getPrinters()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Print.PrinterInfo> GetPrinters()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Print.PrinterInfo>>("getPrinters", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/printservice/PrinterDiscoverySession.html#addPrinters(java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        public void AddPrinters(Java.Util.List<Android.Print.PrinterInfo> arg0)
        {
            IExecuteWithSignature("addPrinters", "(Ljava/util/List;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/printservice/PrinterDiscoverySession.html#removePrinters(java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        public void RemovePrinters(Java.Util.List<Android.Print.PrinterId> arg0)
        {
            IExecuteWithSignature("removePrinters", "(Ljava/util/List;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/printservice/PrinterDiscoverySession.html#onRequestCustomPrinterIcon(android.print.PrinterId,android.os.CancellationSignal,android.printservice.CustomPrinterIconCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Print.PrinterId"/></param>
        /// <param name="arg1"><see cref="Android.Os.CancellationSignal"/></param>
        /// <param name="arg2"><see cref="Android.Printservice.CustomPrinterIconCallback"/></param>
        public void OnRequestCustomPrinterIcon(Android.Print.PrinterId arg0, Android.Os.CancellationSignal arg1, Android.Printservice.CustomPrinterIconCallback arg2)
        {
            IExecuteWithSignature("onRequestCustomPrinterIcon", "(Landroid/print/PrinterId;Landroid/os/CancellationSignal;Landroid/printservice/CustomPrinterIconCallback;)V", arg0, arg1, arg2);
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
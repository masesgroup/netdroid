/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Renderscript
{
    #region RenderScript declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/renderscript/RenderScript.html"/>
    /// </summary>
    [global::System.Obsolete()]
    public partial class RenderScript : MASES.JCOBridge.C2JBridge.JVMBridgeBase<RenderScript>
    {
        const string _bridgeClassName = "android.renderscript.RenderScript";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public RenderScript() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public RenderScript(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region ContextType declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/RenderScript.ContextType.html"/>
        /// </summary>
        [global::System.Obsolete()]
        public partial class ContextType : Java.Lang.Enum<Android.Renderscript.RenderScript.ContextType>
        {
            const string _bridgeClassName = "android.renderscript.RenderScript$ContextType";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public ContextType() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public ContextType(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region Priority declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/RenderScript.Priority.html"/>
        /// </summary>
        [global::System.Obsolete()]
        public partial class Priority : Java.Lang.Enum<Android.Renderscript.RenderScript.Priority>
        {
            const string _bridgeClassName = "android.renderscript.RenderScript$Priority";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Priority() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Priority(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region RSErrorHandler declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/RenderScript.RSErrorHandler.html"/>
        /// </summary>
        [global::System.Obsolete()]
        public partial class RSErrorHandler : Java.Lang.Runnable
        {
            const string _bridgeClassName = "android.renderscript.RenderScript$RSErrorHandler";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public RSErrorHandler() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public RSErrorHandler(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region RSMessageHandler declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/RenderScript.RSMessageHandler.html"/>
        /// </summary>
        [global::System.Obsolete()]
        public partial class RSMessageHandler : Java.Lang.Runnable
        {
            const string _bridgeClassName = "android.renderscript.RenderScript$RSMessageHandler";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public RSMessageHandler() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public RSMessageHandler(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region RenderScript implementation
    public partial class RenderScript
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/RenderScript.html#CREATE_FLAG_LOW_LATENCY"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int CREATE_FLAG_LOW_LATENCY { get { if (!_CREATE_FLAG_LOW_LATENCYReady) { _CREATE_FLAG_LOW_LATENCYContent = SGetField<int>(LocalBridgeClazz, "CREATE_FLAG_LOW_LATENCY"); _CREATE_FLAG_LOW_LATENCYReady = true; } return _CREATE_FLAG_LOW_LATENCYContent; } }
        private static int _CREATE_FLAG_LOW_LATENCYContent = default;
        private static bool _CREATE_FLAG_LOW_LATENCYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/RenderScript.html#CREATE_FLAG_LOW_POWER"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int CREATE_FLAG_LOW_POWER { get { if (!_CREATE_FLAG_LOW_POWERReady) { _CREATE_FLAG_LOW_POWERContent = SGetField<int>(LocalBridgeClazz, "CREATE_FLAG_LOW_POWER"); _CREATE_FLAG_LOW_POWERReady = true; } return _CREATE_FLAG_LOW_POWERContent; } }
        private static int _CREATE_FLAG_LOW_POWERContent = default;
        private static bool _CREATE_FLAG_LOW_POWERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/RenderScript.html#CREATE_FLAG_NONE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int CREATE_FLAG_NONE { get { if (!_CREATE_FLAG_NONEReady) { _CREATE_FLAG_NONEContent = SGetField<int>(LocalBridgeClazz, "CREATE_FLAG_NONE"); _CREATE_FLAG_NONEReady = true; } return _CREATE_FLAG_NONEContent; } }
        private static int _CREATE_FLAG_NONEContent = default;
        private static bool _CREATE_FLAG_NONEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/RenderScript.html#create(android.content.Context,android.renderscript.RenderScript.ContextType,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Renderscript.RenderScript.ContextType"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="Android.Renderscript.RenderScript"/></returns>
        [global::System.Obsolete()]
        public static Android.Renderscript.RenderScript Create(Android.Content.Context arg0, Android.Renderscript.RenderScript.ContextType arg1, int arg2)
        {
            return SExecute<Android.Renderscript.RenderScript>(LocalBridgeClazz, "create", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/RenderScript.html#create(android.content.Context,android.renderscript.RenderScript.ContextType)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Renderscript.RenderScript.ContextType"/></param>
        /// <returns><see cref="Android.Renderscript.RenderScript"/></returns>
        [global::System.Obsolete()]
        public static Android.Renderscript.RenderScript Create(Android.Content.Context arg0, Android.Renderscript.RenderScript.ContextType arg1)
        {
            return SExecute<Android.Renderscript.RenderScript>(LocalBridgeClazz, "create", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/RenderScript.html#create(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <returns><see cref="Android.Renderscript.RenderScript"/></returns>
        [global::System.Obsolete()]
        public static Android.Renderscript.RenderScript Create(Android.Content.Context arg0)
        {
            return SExecuteWithSignature<Android.Renderscript.RenderScript>(LocalBridgeClazz, "create", "(Landroid/content/Context;)Landroid/renderscript/RenderScript;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/RenderScript.html#createMultiContext(android.content.Context,android.renderscript.RenderScript.ContextType,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Renderscript.RenderScript.ContextType"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="Android.Renderscript.RenderScript"/></returns>
        [global::System.Obsolete()]
        public static Android.Renderscript.RenderScript CreateMultiContext(Android.Content.Context arg0, Android.Renderscript.RenderScript.ContextType arg1, int arg2, int arg3)
        {
            return SExecute<Android.Renderscript.RenderScript>(LocalBridgeClazz, "createMultiContext", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/RenderScript.html#getMinorVersion()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        [global::System.Obsolete()]
        public static long GetMinorVersion()
        {
            return SExecuteWithSignature<long>(LocalBridgeClazz, "getMinorVersion", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/RenderScript.html#releaseAllContexts()"/>
        /// </summary>
        [global::System.Obsolete()]
        public static void ReleaseAllContexts()
        {
            SExecuteWithSignature(LocalBridgeClazz, "releaseAllContexts", "()V");
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/RenderScript.html#getErrorHandler()"/>
        /// </summary>
        /// <returns><see cref="Android.Renderscript.RenderScript.RSErrorHandler"/></returns>
        [global::System.Obsolete()]
        public Android.Renderscript.RenderScript.RSErrorHandler GetErrorHandler()
        {
            return IExecuteWithSignature<Android.Renderscript.RenderScript.RSErrorHandler>("getErrorHandler", "()Landroid/renderscript/RenderScript$RSErrorHandler;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/RenderScript.html#getMessageHandler()"/>
        /// </summary>
        /// <returns><see cref="Android.Renderscript.RenderScript.RSMessageHandler"/></returns>
        [global::System.Obsolete()]
        public Android.Renderscript.RenderScript.RSMessageHandler GetMessageHandler()
        {
            return IExecuteWithSignature<Android.Renderscript.RenderScript.RSMessageHandler>("getMessageHandler", "()Landroid/renderscript/RenderScript$RSMessageHandler;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/RenderScript.html#getApplicationContext()"/>
        /// </summary>
        /// <returns><see cref="Android.Content.Context"/></returns>
        [global::System.Obsolete()]
        public Android.Content.Context GetApplicationContext()
        {
            return IExecuteWithSignature<Android.Content.Context>("getApplicationContext", "()Landroid/content/Context;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/RenderScript.html#contextDump()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void ContextDump()
        {
            IExecuteWithSignature("contextDump", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/RenderScript.html#destroy()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void Destroy()
        {
            IExecuteWithSignature("destroy", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/RenderScript.html#finish()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void Finish()
        {
            IExecuteWithSignature("finish", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/RenderScript.html#sendMessage(int,int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void SendMessage(int arg0, int[] arg1)
        {
            IExecute("sendMessage", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/RenderScript.html#setErrorHandler(android.renderscript.RenderScript.RSErrorHandler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript.RSErrorHandler"/></param>
        [global::System.Obsolete()]
        public void SetErrorHandler(Android.Renderscript.RenderScript.RSErrorHandler arg0)
        {
            IExecuteWithSignature("setErrorHandler", "(Landroid/renderscript/RenderScript$RSErrorHandler;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/RenderScript.html#setMessageHandler(android.renderscript.RenderScript.RSMessageHandler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript.RSMessageHandler"/></param>
        [global::System.Obsolete()]
        public void SetMessageHandler(Android.Renderscript.RenderScript.RSMessageHandler arg0)
        {
            IExecuteWithSignature("setMessageHandler", "(Landroid/renderscript/RenderScript$RSMessageHandler;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/RenderScript.html#setPriority(android.renderscript.RenderScript.Priority)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript.Priority"/></param>
        [global::System.Obsolete()]
        public void SetPriority(Android.Renderscript.RenderScript.Priority arg0)
        {
            IExecuteWithSignature("setPriority", "(Landroid/renderscript/RenderScript$Priority;)V", arg0);
        }

        #endregion

        #region Nested classes
        #region ContextType implementation
        public partial class ContextType
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/renderscript/RenderScript.ContextType.html#DEBUG"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.Renderscript.RenderScript.ContextType DEBUG { get { if (!_DEBUGReady) { _DEBUGContent = SGetField<Android.Renderscript.RenderScript.ContextType>(LocalBridgeClazz, "DEBUG"); _DEBUGReady = true; } return _DEBUGContent; } }
            private static Android.Renderscript.RenderScript.ContextType _DEBUGContent = default;
            private static bool _DEBUGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/renderscript/RenderScript.ContextType.html#NORMAL"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.Renderscript.RenderScript.ContextType NORMAL { get { if (!_NORMALReady) { _NORMALContent = SGetField<Android.Renderscript.RenderScript.ContextType>(LocalBridgeClazz, "NORMAL"); _NORMALReady = true; } return _NORMALContent; } }
            private static Android.Renderscript.RenderScript.ContextType _NORMALContent = default;
            private static bool _NORMALReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/renderscript/RenderScript.ContextType.html#PROFILE"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.Renderscript.RenderScript.ContextType PROFILE { get { if (!_PROFILEReady) { _PROFILEContent = SGetField<Android.Renderscript.RenderScript.ContextType>(LocalBridgeClazz, "PROFILE"); _PROFILEReady = true; } return _PROFILEContent; } }
            private static Android.Renderscript.RenderScript.ContextType _PROFILEContent = default;
            private static bool _PROFILEReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/renderscript/RenderScript.ContextType.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Renderscript.RenderScript.ContextType"/></returns>
            public static Android.Renderscript.RenderScript.ContextType ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Renderscript.RenderScript.ContextType>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/renderscript/RenderScript$ContextType;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/renderscript/RenderScript.ContextType.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.Renderscript.RenderScript.ContextType"/></returns>
            public static Android.Renderscript.RenderScript.ContextType[] Values()
            {
                return SExecuteWithSignatureArray<Android.Renderscript.RenderScript.ContextType>(LocalBridgeClazz, "values", "()[Landroid/renderscript/RenderScript$ContextType;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Priority implementation
        public partial class Priority
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/renderscript/RenderScript.Priority.html#LOW"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.Renderscript.RenderScript.Priority LOW { get { if (!_LOWReady) { _LOWContent = SGetField<Android.Renderscript.RenderScript.Priority>(LocalBridgeClazz, "LOW"); _LOWReady = true; } return _LOWContent; } }
            private static Android.Renderscript.RenderScript.Priority _LOWContent = default;
            private static bool _LOWReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/renderscript/RenderScript.Priority.html#NORMAL"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.Renderscript.RenderScript.Priority NORMAL { get { if (!_NORMALReady) { _NORMALContent = SGetField<Android.Renderscript.RenderScript.Priority>(LocalBridgeClazz, "NORMAL"); _NORMALReady = true; } return _NORMALContent; } }
            private static Android.Renderscript.RenderScript.Priority _NORMALContent = default;
            private static bool _NORMALReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/renderscript/RenderScript.Priority.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Renderscript.RenderScript.Priority"/></returns>
            public static Android.Renderscript.RenderScript.Priority ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Renderscript.RenderScript.Priority>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/renderscript/RenderScript$Priority;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/renderscript/RenderScript.Priority.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.Renderscript.RenderScript.Priority"/></returns>
            public static Android.Renderscript.RenderScript.Priority[] Values()
            {
                return SExecuteWithSignatureArray<Android.Renderscript.RenderScript.Priority>(LocalBridgeClazz, "values", "()[Landroid/renderscript/RenderScript$Priority;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region RSErrorHandler implementation
        public partial class RSErrorHandler
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/renderscript/RenderScript.RSErrorHandler.html#run()"/>
            /// </summary>
            [global::System.Obsolete()]
            public void Run()
            {
                IExecuteWithSignature("run", "()V");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region RSMessageHandler implementation
        public partial class RSMessageHandler
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/renderscript/RenderScript.RSMessageHandler.html#run()"/>
            /// </summary>
            [global::System.Obsolete()]
            public void Run()
            {
                IExecuteWithSignature("run", "()V");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
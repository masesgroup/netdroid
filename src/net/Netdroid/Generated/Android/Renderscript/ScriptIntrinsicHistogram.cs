/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.5.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Renderscript
{
    #region ScriptIntrinsicHistogram
    public partial class ScriptIntrinsicHistogram
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/ScriptIntrinsicHistogram.html#create(android.renderscript.RenderScript,android.renderscript.Element)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <param name="arg1"><see cref="Android.Renderscript.Element"/></param>
        /// <returns><see cref="Android.Renderscript.ScriptIntrinsicHistogram"/></returns>
        [global::System.Obsolete()]
        public static Android.Renderscript.ScriptIntrinsicHistogram Create(Android.Renderscript.RenderScript arg0, Android.Renderscript.Element arg1)
        {
            return SExecute<Android.Renderscript.ScriptIntrinsicHistogram>(LocalBridgeClazz, "create", arg0, arg1);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/ScriptIntrinsicHistogram.html#getFieldID_Input()"/>
        /// </summary>
        /// <returns><see cref="Android.Renderscript.Script.FieldID"/></returns>
        [global::System.Obsolete()]
        public Android.Renderscript.Script.FieldID GetFieldID_Input()
        {
            return IExecuteWithSignature<Android.Renderscript.Script.FieldID>("getFieldID_Input", "()Landroid/renderscript/Script$FieldID;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/ScriptIntrinsicHistogram.html#getKernelID_Separate()"/>
        /// </summary>
        /// <returns><see cref="Android.Renderscript.Script.KernelID"/></returns>
        [global::System.Obsolete()]
        public Android.Renderscript.Script.KernelID GetKernelID_Separate()
        {
            return IExecuteWithSignature<Android.Renderscript.Script.KernelID>("getKernelID_Separate", "()Landroid/renderscript/Script$KernelID;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/ScriptIntrinsicHistogram.html#forEach_Dot(android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.Allocation"/></param>
        /// <param name="arg1"><see cref="Android.Renderscript.Script.LaunchOptions"/></param>
        [global::System.Obsolete()]
        public void ForEach_Dot(Android.Renderscript.Allocation arg0, Android.Renderscript.Script.LaunchOptions arg1)
        {
            IExecute("forEach_Dot", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/ScriptIntrinsicHistogram.html#forEach_Dot(android.renderscript.Allocation)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.Allocation"/></param>
        [global::System.Obsolete()]
        public void ForEach_Dot(Android.Renderscript.Allocation arg0)
        {
            IExecuteWithSignature("forEach_Dot", "(Landroid/renderscript/Allocation;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/ScriptIntrinsicHistogram.html#forEach(android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.Allocation"/></param>
        /// <param name="arg1"><see cref="Android.Renderscript.Script.LaunchOptions"/></param>
        [global::System.Obsolete()]
        public void ForEach(Android.Renderscript.Allocation arg0, Android.Renderscript.Script.LaunchOptions arg1)
        {
            IExecute("forEach", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/ScriptIntrinsicHistogram.html#forEach(android.renderscript.Allocation)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.Allocation"/></param>
        [global::System.Obsolete()]
        public void ForEach(Android.Renderscript.Allocation arg0)
        {
            IExecuteWithSignature("forEach", "(Landroid/renderscript/Allocation;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/ScriptIntrinsicHistogram.html#setDotCoefficients(float,float,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        [global::System.Obsolete()]
        public void SetDotCoefficients(float arg0, float arg1, float arg2, float arg3)
        {
            IExecute("setDotCoefficients", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/ScriptIntrinsicHistogram.html#setOutput(android.renderscript.Allocation)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.Allocation"/></param>
        [global::System.Obsolete()]
        public void SetOutput(Android.Renderscript.Allocation arg0)
        {
            IExecuteWithSignature("setOutput", "(Landroid/renderscript/Allocation;)V", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
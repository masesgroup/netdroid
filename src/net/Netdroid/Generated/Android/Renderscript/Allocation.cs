/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.5.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Renderscript
{
    #region Allocation
    public partial class Allocation
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#USAGE_GRAPHICS_CONSTANTS"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int USAGE_GRAPHICS_CONSTANTS { get { if (!_USAGE_GRAPHICS_CONSTANTSReady) { _USAGE_GRAPHICS_CONSTANTSContent = SGetField<int>(LocalBridgeClazz, "USAGE_GRAPHICS_CONSTANTS"); _USAGE_GRAPHICS_CONSTANTSReady = true; } return _USAGE_GRAPHICS_CONSTANTSContent; } }
        private static int _USAGE_GRAPHICS_CONSTANTSContent = default;
        private static bool _USAGE_GRAPHICS_CONSTANTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#USAGE_GRAPHICS_RENDER_TARGET"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int USAGE_GRAPHICS_RENDER_TARGET { get { if (!_USAGE_GRAPHICS_RENDER_TARGETReady) { _USAGE_GRAPHICS_RENDER_TARGETContent = SGetField<int>(LocalBridgeClazz, "USAGE_GRAPHICS_RENDER_TARGET"); _USAGE_GRAPHICS_RENDER_TARGETReady = true; } return _USAGE_GRAPHICS_RENDER_TARGETContent; } }
        private static int _USAGE_GRAPHICS_RENDER_TARGETContent = default;
        private static bool _USAGE_GRAPHICS_RENDER_TARGETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#USAGE_GRAPHICS_TEXTURE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int USAGE_GRAPHICS_TEXTURE { get { if (!_USAGE_GRAPHICS_TEXTUREReady) { _USAGE_GRAPHICS_TEXTUREContent = SGetField<int>(LocalBridgeClazz, "USAGE_GRAPHICS_TEXTURE"); _USAGE_GRAPHICS_TEXTUREReady = true; } return _USAGE_GRAPHICS_TEXTUREContent; } }
        private static int _USAGE_GRAPHICS_TEXTUREContent = default;
        private static bool _USAGE_GRAPHICS_TEXTUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#USAGE_GRAPHICS_VERTEX"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int USAGE_GRAPHICS_VERTEX { get { if (!_USAGE_GRAPHICS_VERTEXReady) { _USAGE_GRAPHICS_VERTEXContent = SGetField<int>(LocalBridgeClazz, "USAGE_GRAPHICS_VERTEX"); _USAGE_GRAPHICS_VERTEXReady = true; } return _USAGE_GRAPHICS_VERTEXContent; } }
        private static int _USAGE_GRAPHICS_VERTEXContent = default;
        private static bool _USAGE_GRAPHICS_VERTEXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#USAGE_IO_INPUT"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int USAGE_IO_INPUT { get { if (!_USAGE_IO_INPUTReady) { _USAGE_IO_INPUTContent = SGetField<int>(LocalBridgeClazz, "USAGE_IO_INPUT"); _USAGE_IO_INPUTReady = true; } return _USAGE_IO_INPUTContent; } }
        private static int _USAGE_IO_INPUTContent = default;
        private static bool _USAGE_IO_INPUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#USAGE_IO_OUTPUT"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int USAGE_IO_OUTPUT { get { if (!_USAGE_IO_OUTPUTReady) { _USAGE_IO_OUTPUTContent = SGetField<int>(LocalBridgeClazz, "USAGE_IO_OUTPUT"); _USAGE_IO_OUTPUTReady = true; } return _USAGE_IO_OUTPUTContent; } }
        private static int _USAGE_IO_OUTPUTContent = default;
        private static bool _USAGE_IO_OUTPUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#USAGE_SCRIPT"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int USAGE_SCRIPT { get { if (!_USAGE_SCRIPTReady) { _USAGE_SCRIPTContent = SGetField<int>(LocalBridgeClazz, "USAGE_SCRIPT"); _USAGE_SCRIPTReady = true; } return _USAGE_SCRIPTContent; } }
        private static int _USAGE_SCRIPTContent = default;
        private static bool _USAGE_SCRIPTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#USAGE_SHARED"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int USAGE_SHARED { get { if (!_USAGE_SHAREDReady) { _USAGE_SHAREDContent = SGetField<int>(LocalBridgeClazz, "USAGE_SHARED"); _USAGE_SHAREDReady = true; } return _USAGE_SHAREDContent; } }
        private static int _USAGE_SHAREDContent = default;
        private static bool _USAGE_SHAREDReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createCubemapFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation.MipmapControl,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Bitmap"/></param>
        /// <param name="arg2"><see cref="Android.Renderscript.Allocation.MipmapControl"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="Android.Renderscript.Allocation"/></returns>
        [global::System.Obsolete()]
        public static Android.Renderscript.Allocation CreateCubemapFromBitmap(Android.Renderscript.RenderScript arg0, Android.Graphics.Bitmap arg1, Android.Renderscript.Allocation.MipmapControl arg2, int arg3)
        {
            return SExecute<Android.Renderscript.Allocation>(LocalBridgeClazz, "createCubemapFromBitmap", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createCubemapFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Bitmap"/></param>
        /// <returns><see cref="Android.Renderscript.Allocation"/></returns>
        [global::System.Obsolete()]
        public static Android.Renderscript.Allocation CreateCubemapFromBitmap(Android.Renderscript.RenderScript arg0, Android.Graphics.Bitmap arg1)
        {
            return SExecute<Android.Renderscript.Allocation>(LocalBridgeClazz, "createCubemapFromBitmap", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createCubemapFromCubeFaces(android.renderscript.RenderScript,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.renderscript.Allocation.MipmapControl,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Bitmap"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.Bitmap"/></param>
        /// <param name="arg3"><see cref="Android.Graphics.Bitmap"/></param>
        /// <param name="arg4"><see cref="Android.Graphics.Bitmap"/></param>
        /// <param name="arg5"><see cref="Android.Graphics.Bitmap"/></param>
        /// <param name="arg6"><see cref="Android.Graphics.Bitmap"/></param>
        /// <param name="arg7"><see cref="Android.Renderscript.Allocation.MipmapControl"/></param>
        /// <param name="arg8"><see cref="int"/></param>
        /// <returns><see cref="Android.Renderscript.Allocation"/></returns>
        [global::System.Obsolete()]
        public static Android.Renderscript.Allocation CreateCubemapFromCubeFaces(Android.Renderscript.RenderScript arg0, Android.Graphics.Bitmap arg1, Android.Graphics.Bitmap arg2, Android.Graphics.Bitmap arg3, Android.Graphics.Bitmap arg4, Android.Graphics.Bitmap arg5, Android.Graphics.Bitmap arg6, Android.Renderscript.Allocation.MipmapControl arg7, int arg8)
        {
            return SExecute<Android.Renderscript.Allocation>(LocalBridgeClazz, "createCubemapFromCubeFaces", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createCubemapFromCubeFaces(android.renderscript.RenderScript,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Bitmap"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.Bitmap"/></param>
        /// <param name="arg3"><see cref="Android.Graphics.Bitmap"/></param>
        /// <param name="arg4"><see cref="Android.Graphics.Bitmap"/></param>
        /// <param name="arg5"><see cref="Android.Graphics.Bitmap"/></param>
        /// <param name="arg6"><see cref="Android.Graphics.Bitmap"/></param>
        /// <returns><see cref="Android.Renderscript.Allocation"/></returns>
        [global::System.Obsolete()]
        public static Android.Renderscript.Allocation CreateCubemapFromCubeFaces(Android.Renderscript.RenderScript arg0, Android.Graphics.Bitmap arg1, Android.Graphics.Bitmap arg2, Android.Graphics.Bitmap arg3, Android.Graphics.Bitmap arg4, Android.Graphics.Bitmap arg5, Android.Graphics.Bitmap arg6)
        {
            return SExecute<Android.Renderscript.Allocation>(LocalBridgeClazz, "createCubemapFromCubeFaces", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation.MipmapControl,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Bitmap"/></param>
        /// <param name="arg2"><see cref="Android.Renderscript.Allocation.MipmapControl"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="Android.Renderscript.Allocation"/></returns>
        [global::System.Obsolete()]
        public static Android.Renderscript.Allocation CreateFromBitmap(Android.Renderscript.RenderScript arg0, Android.Graphics.Bitmap arg1, Android.Renderscript.Allocation.MipmapControl arg2, int arg3)
        {
            return SExecute<Android.Renderscript.Allocation>(LocalBridgeClazz, "createFromBitmap", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Bitmap"/></param>
        /// <returns><see cref="Android.Renderscript.Allocation"/></returns>
        [global::System.Obsolete()]
        public static Android.Renderscript.Allocation CreateFromBitmap(Android.Renderscript.RenderScript arg0, Android.Graphics.Bitmap arg1)
        {
            return SExecute<Android.Renderscript.Allocation>(LocalBridgeClazz, "createFromBitmap", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createFromBitmapResource(android.renderscript.RenderScript,android.content.res.Resources,int,android.renderscript.Allocation.MipmapControl,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <param name="arg1"><see cref="Android.Content.Res.Resources"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Android.Renderscript.Allocation.MipmapControl"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <returns><see cref="Android.Renderscript.Allocation"/></returns>
        [global::System.Obsolete()]
        public static Android.Renderscript.Allocation CreateFromBitmapResource(Android.Renderscript.RenderScript arg0, Android.Content.Res.Resources arg1, int arg2, Android.Renderscript.Allocation.MipmapControl arg3, int arg4)
        {
            return SExecute<Android.Renderscript.Allocation>(LocalBridgeClazz, "createFromBitmapResource", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createFromBitmapResource(android.renderscript.RenderScript,android.content.res.Resources,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <param name="arg1"><see cref="Android.Content.Res.Resources"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="Android.Renderscript.Allocation"/></returns>
        [global::System.Obsolete()]
        public static Android.Renderscript.Allocation CreateFromBitmapResource(Android.Renderscript.RenderScript arg0, Android.Content.Res.Resources arg1, int arg2)
        {
            return SExecute<Android.Renderscript.Allocation>(LocalBridgeClazz, "createFromBitmapResource", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createFromString(android.renderscript.RenderScript,java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="Android.Renderscript.Allocation"/></returns>
        [global::System.Obsolete()]
        public static Android.Renderscript.Allocation CreateFromString(Android.Renderscript.RenderScript arg0, Java.Lang.String arg1, int arg2)
        {
            return SExecute<Android.Renderscript.Allocation>(LocalBridgeClazz, "createFromString", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createSized(android.renderscript.RenderScript,android.renderscript.Element,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <param name="arg1"><see cref="Android.Renderscript.Element"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="Android.Renderscript.Allocation"/></returns>
        [global::System.Obsolete()]
        public static Android.Renderscript.Allocation CreateSized(Android.Renderscript.RenderScript arg0, Android.Renderscript.Element arg1, int arg2, int arg3)
        {
            return SExecute<Android.Renderscript.Allocation>(LocalBridgeClazz, "createSized", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createSized(android.renderscript.RenderScript,android.renderscript.Element,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <param name="arg1"><see cref="Android.Renderscript.Element"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="Android.Renderscript.Allocation"/></returns>
        [global::System.Obsolete()]
        public static Android.Renderscript.Allocation CreateSized(Android.Renderscript.RenderScript arg0, Android.Renderscript.Element arg1, int arg2)
        {
            return SExecute<Android.Renderscript.Allocation>(LocalBridgeClazz, "createSized", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createTyped(android.renderscript.RenderScript,android.renderscript.Type,android.renderscript.Allocation.MipmapControl,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <param name="arg1"><see cref="Android.Renderscript.Type"/></param>
        /// <param name="arg2"><see cref="Android.Renderscript.Allocation.MipmapControl"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="Android.Renderscript.Allocation"/></returns>
        [global::System.Obsolete()]
        public static Android.Renderscript.Allocation CreateTyped(Android.Renderscript.RenderScript arg0, Android.Renderscript.Type arg1, Android.Renderscript.Allocation.MipmapControl arg2, int arg3)
        {
            return SExecute<Android.Renderscript.Allocation>(LocalBridgeClazz, "createTyped", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createTyped(android.renderscript.RenderScript,android.renderscript.Type,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <param name="arg1"><see cref="Android.Renderscript.Type"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="Android.Renderscript.Allocation"/></returns>
        [global::System.Obsolete()]
        public static Android.Renderscript.Allocation CreateTyped(Android.Renderscript.RenderScript arg0, Android.Renderscript.Type arg1, int arg2)
        {
            return SExecute<Android.Renderscript.Allocation>(LocalBridgeClazz, "createTyped", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createTyped(android.renderscript.RenderScript,android.renderscript.Type)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <param name="arg1"><see cref="Android.Renderscript.Type"/></param>
        /// <returns><see cref="Android.Renderscript.Allocation"/></returns>
        [global::System.Obsolete()]
        public static Android.Renderscript.Allocation CreateTyped(Android.Renderscript.RenderScript arg0, Android.Renderscript.Type arg1)
        {
            return SExecute<Android.Renderscript.Allocation>(LocalBridgeClazz, "createTyped", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createAllocations(android.renderscript.RenderScript,android.renderscript.Type,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <param name="arg1"><see cref="Android.Renderscript.Type"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="Android.Renderscript.Allocation"/></returns>
        [global::System.Obsolete()]
        public static Android.Renderscript.Allocation[] CreateAllocations(Android.Renderscript.RenderScript arg0, Android.Renderscript.Type arg1, int arg2, int arg3)
        {
            return SExecuteArray<Android.Renderscript.Allocation>(LocalBridgeClazz, "createAllocations", arg0, arg1, arg2, arg3);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#getElement()"/>
        /// </summary>
        /// <returns><see cref="Android.Renderscript.Element"/></returns>
        [global::System.Obsolete()]
        public Android.Renderscript.Element GetElement()
        {
            return IExecuteWithSignature<Android.Renderscript.Element>("getElement", "()Landroid/renderscript/Element;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#getType()"/>
        /// </summary>
        /// <returns><see cref="Android.Renderscript.Type"/></returns>
        [global::System.Obsolete()]
        public Android.Renderscript.Type GetType()
        {
            return IExecuteWithSignature<Android.Renderscript.Type>("getType", "()Landroid/renderscript/Type;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#getSurface()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Surface"/></returns>
        [global::System.Obsolete()]
        public Android.View.Surface GetSurface()
        {
            return IExecuteWithSignature<Android.View.Surface>("getSurface", "()Landroid/view/Surface;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#getBytesSize()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetBytesSize()
        {
            return IExecuteWithSignature<int>("getBytesSize", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#getUsage()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetUsage()
        {
            return IExecuteWithSignature<int>("getUsage", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#getByteBuffer()"/>
        /// </summary>
        /// <returns><see cref="Java.Nio.ByteBuffer"/></returns>
        [global::System.Obsolete()]
        public Java.Nio.ByteBuffer GetByteBuffer()
        {
            return IExecuteWithSignature<Java.Nio.ByteBuffer>("getByteBuffer", "()Ljava/nio/ByteBuffer;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#getStride()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        [global::System.Obsolete()]
        public long GetStride()
        {
            return IExecuteWithSignature<long>("getStride", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#getTimeStamp()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        [global::System.Obsolete()]
        public long GetTimeStamp()
        {
            return IExecuteWithSignature<long>("getTimeStamp", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#resize(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void Resize(int arg0)
        {
            IExecuteWithSignature("resize", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFrom(int,int,android.renderscript.Allocation,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Renderscript.Allocation"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void Copy1DRangeFrom(int arg0, int arg1, Android.Renderscript.Allocation arg2, int arg3)
        {
            IExecute("copy1DRangeFrom", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFrom(int,int,byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="byte"/></param>
        [global::System.Obsolete()]
        public void Copy1DRangeFrom(int arg0, int arg1, byte[] arg2)
        {
            IExecute("copy1DRangeFrom", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFrom(int,int,float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        [global::System.Obsolete()]
        public void Copy1DRangeFrom(int arg0, int arg1, float[] arg2)
        {
            IExecute("copy1DRangeFrom", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFrom(int,int,int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void Copy1DRangeFrom(int arg0, int arg1, int[] arg2)
        {
            IExecute("copy1DRangeFrom", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFrom(int,int,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="object"/></param>
        [global::System.Obsolete()]
        public void Copy1DRangeFrom(int arg0, int arg1, object arg2)
        {
            IExecute("copy1DRangeFrom", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFrom(int,int,short[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="short"/></param>
        [global::System.Obsolete()]
        public void Copy1DRangeFrom(int arg0, int arg1, short[] arg2)
        {
            IExecute("copy1DRangeFrom", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFromUnchecked(int,int,byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="byte"/></param>
        [global::System.Obsolete()]
        public void Copy1DRangeFromUnchecked(int arg0, int arg1, byte[] arg2)
        {
            IExecute("copy1DRangeFromUnchecked", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFromUnchecked(int,int,float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        [global::System.Obsolete()]
        public void Copy1DRangeFromUnchecked(int arg0, int arg1, float[] arg2)
        {
            IExecute("copy1DRangeFromUnchecked", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFromUnchecked(int,int,int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void Copy1DRangeFromUnchecked(int arg0, int arg1, int[] arg2)
        {
            IExecute("copy1DRangeFromUnchecked", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFromUnchecked(int,int,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="object"/></param>
        [global::System.Obsolete()]
        public void Copy1DRangeFromUnchecked(int arg0, int arg1, object arg2)
        {
            IExecute("copy1DRangeFromUnchecked", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFromUnchecked(int,int,short[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="short"/></param>
        [global::System.Obsolete()]
        public void Copy1DRangeFromUnchecked(int arg0, int arg1, short[] arg2)
        {
            IExecute("copy1DRangeFromUnchecked", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeTo(int,int,byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="byte"/></param>
        [global::System.Obsolete()]
        public void Copy1DRangeTo(int arg0, int arg1, byte[] arg2)
        {
            IExecute("copy1DRangeTo", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeTo(int,int,float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        [global::System.Obsolete()]
        public void Copy1DRangeTo(int arg0, int arg1, float[] arg2)
        {
            IExecute("copy1DRangeTo", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeTo(int,int,int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void Copy1DRangeTo(int arg0, int arg1, int[] arg2)
        {
            IExecute("copy1DRangeTo", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeTo(int,int,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="object"/></param>
        [global::System.Obsolete()]
        public void Copy1DRangeTo(int arg0, int arg1, object arg2)
        {
            IExecute("copy1DRangeTo", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeTo(int,int,short[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="short"/></param>
        [global::System.Obsolete()]
        public void Copy1DRangeTo(int arg0, int arg1, short[] arg2)
        {
            IExecute("copy1DRangeTo", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeToUnchecked(int,int,byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="byte"/></param>
        [global::System.Obsolete()]
        public void Copy1DRangeToUnchecked(int arg0, int arg1, byte[] arg2)
        {
            IExecute("copy1DRangeToUnchecked", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeToUnchecked(int,int,float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        [global::System.Obsolete()]
        public void Copy1DRangeToUnchecked(int arg0, int arg1, float[] arg2)
        {
            IExecute("copy1DRangeToUnchecked", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeToUnchecked(int,int,int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void Copy1DRangeToUnchecked(int arg0, int arg1, int[] arg2)
        {
            IExecute("copy1DRangeToUnchecked", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeToUnchecked(int,int,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="object"/></param>
        [global::System.Obsolete()]
        public void Copy1DRangeToUnchecked(int arg0, int arg1, object arg2)
        {
            IExecute("copy1DRangeToUnchecked", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeToUnchecked(int,int,short[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="short"/></param>
        [global::System.Obsolete()]
        public void Copy1DRangeToUnchecked(int arg0, int arg1, short[] arg2)
        {
            IExecute("copy1DRangeToUnchecked", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeFrom(int,int,android.graphics.Bitmap)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.Bitmap"/></param>
        [global::System.Obsolete()]
        public void Copy2DRangeFrom(int arg0, int arg1, Android.Graphics.Bitmap arg2)
        {
            IExecute("copy2DRangeFrom", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeFrom(int,int,int,int,android.renderscript.Allocation,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="Android.Renderscript.Allocation"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void Copy2DRangeFrom(int arg0, int arg1, int arg2, int arg3, Android.Renderscript.Allocation arg4, int arg5, int arg6)
        {
            IExecute("copy2DRangeFrom", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeFrom(int,int,int,int,byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="byte"/></param>
        [global::System.Obsolete()]
        public void Copy2DRangeFrom(int arg0, int arg1, int arg2, int arg3, byte[] arg4)
        {
            IExecute("copy2DRangeFrom", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeFrom(int,int,int,int,float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        [global::System.Obsolete()]
        public void Copy2DRangeFrom(int arg0, int arg1, int arg2, int arg3, float[] arg4)
        {
            IExecute("copy2DRangeFrom", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeFrom(int,int,int,int,int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void Copy2DRangeFrom(int arg0, int arg1, int arg2, int arg3, int[] arg4)
        {
            IExecute("copy2DRangeFrom", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeFrom(int,int,int,int,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="object"/></param>
        [global::System.Obsolete()]
        public void Copy2DRangeFrom(int arg0, int arg1, int arg2, int arg3, object arg4)
        {
            IExecute("copy2DRangeFrom", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeFrom(int,int,int,int,short[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="short"/></param>
        [global::System.Obsolete()]
        public void Copy2DRangeFrom(int arg0, int arg1, int arg2, int arg3, short[] arg4)
        {
            IExecute("copy2DRangeFrom", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeTo(int,int,int,int,byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="byte"/></param>
        [global::System.Obsolete()]
        public void Copy2DRangeTo(int arg0, int arg1, int arg2, int arg3, byte[] arg4)
        {
            IExecute("copy2DRangeTo", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeTo(int,int,int,int,float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        [global::System.Obsolete()]
        public void Copy2DRangeTo(int arg0, int arg1, int arg2, int arg3, float[] arg4)
        {
            IExecute("copy2DRangeTo", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeTo(int,int,int,int,int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void Copy2DRangeTo(int arg0, int arg1, int arg2, int arg3, int[] arg4)
        {
            IExecute("copy2DRangeTo", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeTo(int,int,int,int,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="object"/></param>
        [global::System.Obsolete()]
        public void Copy2DRangeTo(int arg0, int arg1, int arg2, int arg3, object arg4)
        {
            IExecute("copy2DRangeTo", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeTo(int,int,int,int,short[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="short"/></param>
        [global::System.Obsolete()]
        public void Copy2DRangeTo(int arg0, int arg1, int arg2, int arg3, short[] arg4)
        {
            IExecute("copy2DRangeTo", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy3DRangeFrom(int,int,int,int,int,int,android.renderscript.Allocation,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="Android.Renderscript.Allocation"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        /// <param name="arg8"><see cref="int"/></param>
        /// <param name="arg9"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void Copy3DRangeFrom(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, Android.Renderscript.Allocation arg6, int arg7, int arg8, int arg9)
        {
            IExecute("copy3DRangeFrom", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy3DRangeFrom(int,int,int,int,int,int,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="object"/></param>
        [global::System.Obsolete()]
        public void Copy3DRangeFrom(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, object arg6)
        {
            IExecute("copy3DRangeFrom", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy3DRangeTo(int,int,int,int,int,int,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="object"/></param>
        [global::System.Obsolete()]
        public void Copy3DRangeTo(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, object arg6)
        {
            IExecute("copy3DRangeTo", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFrom(android.graphics.Bitmap)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Bitmap"/></param>
        [global::System.Obsolete()]
        public void CopyFrom(Android.Graphics.Bitmap arg0)
        {
            IExecuteWithSignature("copyFrom", "(Landroid/graphics/Bitmap;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFrom(android.renderscript.Allocation)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.Allocation"/></param>
        [global::System.Obsolete()]
        public void CopyFrom(Android.Renderscript.Allocation arg0)
        {
            IExecuteWithSignature("copyFrom", "(Landroid/renderscript/Allocation;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFrom(android.renderscript.BaseObj[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.BaseObj"/></param>
        [global::System.Obsolete()]
        public void CopyFrom(Android.Renderscript.BaseObj[] arg0)
        {
            IExecuteWithSignature("copyFrom", "([Landroid/renderscript/BaseObj;)V", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFrom(byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        [global::System.Obsolete()]
        public void CopyFrom(byte[] arg0)
        {
            IExecuteWithSignature("copyFrom", "([B)V", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFrom(float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        [global::System.Obsolete()]
        public void CopyFrom(float[] arg0)
        {
            IExecuteWithSignature("copyFrom", "([F)V", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFrom(int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void CopyFrom(int[] arg0)
        {
            IExecuteWithSignature("copyFrom", "([I)V", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFrom(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        [global::System.Obsolete()]
        public void CopyFrom(object arg0)
        {
            IExecuteWithSignature("copyFrom", "(Ljava/lang/Object;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFrom(short[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="short"/></param>
        [global::System.Obsolete()]
        public void CopyFrom(short[] arg0)
        {
            IExecuteWithSignature("copyFrom", "([S)V", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFromUnchecked(byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        [global::System.Obsolete()]
        public void CopyFromUnchecked(byte[] arg0)
        {
            IExecuteWithSignature("copyFromUnchecked", "([B)V", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFromUnchecked(float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        [global::System.Obsolete()]
        public void CopyFromUnchecked(float[] arg0)
        {
            IExecuteWithSignature("copyFromUnchecked", "([F)V", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFromUnchecked(int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void CopyFromUnchecked(int[] arg0)
        {
            IExecuteWithSignature("copyFromUnchecked", "([I)V", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFromUnchecked(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        [global::System.Obsolete()]
        public void CopyFromUnchecked(object arg0)
        {
            IExecuteWithSignature("copyFromUnchecked", "(Ljava/lang/Object;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFromUnchecked(short[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="short"/></param>
        [global::System.Obsolete()]
        public void CopyFromUnchecked(short[] arg0)
        {
            IExecuteWithSignature("copyFromUnchecked", "([S)V", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyTo(android.graphics.Bitmap)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Bitmap"/></param>
        [global::System.Obsolete()]
        public void CopyTo(Android.Graphics.Bitmap arg0)
        {
            IExecuteWithSignature("copyTo", "(Landroid/graphics/Bitmap;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyTo(byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        [global::System.Obsolete()]
        public void CopyTo(byte[] arg0)
        {
            IExecuteWithSignature("copyTo", "([B)V", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyTo(float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        [global::System.Obsolete()]
        public void CopyTo(float[] arg0)
        {
            IExecuteWithSignature("copyTo", "([F)V", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyTo(int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void CopyTo(int[] arg0)
        {
            IExecuteWithSignature("copyTo", "([I)V", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyTo(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        [global::System.Obsolete()]
        public void CopyTo(object arg0)
        {
            IExecuteWithSignature("copyTo", "(Ljava/lang/Object;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyTo(short[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="short"/></param>
        [global::System.Obsolete()]
        public void CopyTo(short[] arg0)
        {
            IExecuteWithSignature("copyTo", "([S)V", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#generateMipmaps()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void GenerateMipmaps()
        {
            IExecuteWithSignature("generateMipmaps", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#ioReceive()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void IoReceive()
        {
            IExecuteWithSignature("ioReceive", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#ioSend()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void IoSend()
        {
            IExecuteWithSignature("ioSend", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#setAutoPadding(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void SetAutoPadding(bool arg0)
        {
            IExecuteWithSignature("setAutoPadding", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#setFromFieldPacker(int,android.renderscript.FieldPacker)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Renderscript.FieldPacker"/></param>
        [global::System.Obsolete()]
        public void SetFromFieldPacker(int arg0, Android.Renderscript.FieldPacker arg1)
        {
            IExecute("setFromFieldPacker", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#setFromFieldPacker(int,int,android.renderscript.FieldPacker)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Renderscript.FieldPacker"/></param>
        [global::System.Obsolete()]
        public void SetFromFieldPacker(int arg0, int arg1, Android.Renderscript.FieldPacker arg2)
        {
            IExecute("setFromFieldPacker", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#setFromFieldPacker(int,int,int,int,android.renderscript.FieldPacker)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="Android.Renderscript.FieldPacker"/></param>
        [global::System.Obsolete()]
        public void SetFromFieldPacker(int arg0, int arg1, int arg2, int arg3, Android.Renderscript.FieldPacker arg4)
        {
            IExecute("setFromFieldPacker", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#setOnBufferAvailableListener(android.renderscript.Allocation.OnBufferAvailableListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.Allocation.OnBufferAvailableListener"/></param>
        [global::System.Obsolete()]
        public void SetOnBufferAvailableListener(Android.Renderscript.Allocation.OnBufferAvailableListener arg0)
        {
            IExecuteWithSignature("setOnBufferAvailableListener", "(Landroid/renderscript/Allocation$OnBufferAvailableListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#setSurface(android.view.Surface)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Surface"/></param>
        [global::System.Obsolete()]
        public void SetSurface(Android.View.Surface arg0)
        {
            IExecuteWithSignature("setSurface", "(Landroid/view/Surface;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#syncAll(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void SyncAll(int arg0)
        {
            IExecuteWithSignature("syncAll", "(I)V", arg0);
        }

        #endregion

        #region Nested classes
        #region MipmapControl
        public partial class MipmapControl
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.MipmapControl.html#MIPMAP_FULL"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.Renderscript.Allocation.MipmapControl MIPMAP_FULL { get { if (!_MIPMAP_FULLReady) { _MIPMAP_FULLContent = SGetField<Android.Renderscript.Allocation.MipmapControl>(LocalBridgeClazz, "MIPMAP_FULL"); _MIPMAP_FULLReady = true; } return _MIPMAP_FULLContent; } }
            private static Android.Renderscript.Allocation.MipmapControl _MIPMAP_FULLContent = default;
            private static bool _MIPMAP_FULLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.MipmapControl.html#MIPMAP_NONE"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.Renderscript.Allocation.MipmapControl MIPMAP_NONE { get { if (!_MIPMAP_NONEReady) { _MIPMAP_NONEContent = SGetField<Android.Renderscript.Allocation.MipmapControl>(LocalBridgeClazz, "MIPMAP_NONE"); _MIPMAP_NONEReady = true; } return _MIPMAP_NONEContent; } }
            private static Android.Renderscript.Allocation.MipmapControl _MIPMAP_NONEContent = default;
            private static bool _MIPMAP_NONEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.MipmapControl.html#MIPMAP_ON_SYNC_TO_TEXTURE"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.Renderscript.Allocation.MipmapControl MIPMAP_ON_SYNC_TO_TEXTURE { get { if (!_MIPMAP_ON_SYNC_TO_TEXTUREReady) { _MIPMAP_ON_SYNC_TO_TEXTUREContent = SGetField<Android.Renderscript.Allocation.MipmapControl>(LocalBridgeClazz, "MIPMAP_ON_SYNC_TO_TEXTURE"); _MIPMAP_ON_SYNC_TO_TEXTUREReady = true; } return _MIPMAP_ON_SYNC_TO_TEXTUREContent; } }
            private static Android.Renderscript.Allocation.MipmapControl _MIPMAP_ON_SYNC_TO_TEXTUREContent = default;
            private static bool _MIPMAP_ON_SYNC_TO_TEXTUREReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.MipmapControl.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Renderscript.Allocation.MipmapControl"/></returns>
            public static Android.Renderscript.Allocation.MipmapControl ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Renderscript.Allocation.MipmapControl>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/renderscript/Allocation$MipmapControl;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.MipmapControl.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.Renderscript.Allocation.MipmapControl"/></returns>
            public static Android.Renderscript.Allocation.MipmapControl[] Values()
            {
                return SExecuteWithSignatureArray<Android.Renderscript.Allocation.MipmapControl>(LocalBridgeClazz, "values", "()[Landroid/renderscript/Allocation$MipmapControl;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnBufferAvailableListener
        public partial class OnBufferAvailableListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnBufferAvailableListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onBufferAvailable", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Renderscript.Allocation>>>(OnBufferAvailableEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.OnBufferAvailableListener.html#onBufferAvailable(android.renderscript.Allocation)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnBufferAvailable"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Renderscript.Allocation> OnOnBufferAvailable { get; set; } = null;

            void OnBufferAvailableEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Renderscript.Allocation>> data)
            {
                var methodToExecute = (OnOnBufferAvailable != null) ? OnOnBufferAvailable : OnBufferAvailable;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.OnBufferAvailableListener.html#onBufferAvailable(android.renderscript.Allocation)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Renderscript.Allocation"/></param>
            [global::System.Obsolete()]
            public virtual void OnBufferAvailable(Android.Renderscript.Allocation arg0)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnBufferAvailableListenerDirect
        public partial class OnBufferAvailableListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.OnBufferAvailableListener.html#onBufferAvailable(android.renderscript.Allocation)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Renderscript.Allocation"/></param>
            [global::System.Obsolete()]
            public override void OnBufferAvailable(Android.Renderscript.Allocation arg0)
            {
                IExecuteWithSignature("onBufferAvailable", "(Landroid/renderscript/Allocation;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Renderscript
{
    #region AllocationAdapter
    public partial class AllocationAdapter
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        
        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createCubemapFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation.MipmapControl,int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnCreateCubemapFromBitmap"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Android.Renderscript.RenderScript, Android.Graphics.Bitmap, Android.Renderscript.Allocation.MipmapControl, int, Android.Renderscript.Allocation> OnCreateCubemapFromBitmap { get; set; } = null;

        void CreateCubemapFromBitmapEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Renderscript.RenderScript>> data)
        {
            var methodToExecute = (OnCreateCubemapFromBitmap != null) ? OnCreateCubemapFromBitmap : CreateCubemapFromBitmap;
            var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.Graphics.Bitmap>(0), data.EventData.GetAt<Android.Renderscript.Allocation.MipmapControl>(1), data.EventData.GetAt<int>(2));
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createCubemapFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation.MipmapControl,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Bitmap"/></param>
        /// <param name="arg2"><see cref="Android.Renderscript.Allocation.MipmapControl"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="Android.Renderscript.Allocation"/></returns>
        [System.Obsolete()]
        public virtual Android.Renderscript.Allocation CreateCubemapFromBitmap(Android.Renderscript.RenderScript arg0, Android.Graphics.Bitmap arg1, Android.Renderscript.Allocation.MipmapControl arg2, int arg3)
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createCubemapFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)"/>
        /// </summary>
        /// <remarks>If <see cref="OnCreateCubemapFromBitmap2"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Android.Renderscript.RenderScript, Android.Graphics.Bitmap, Android.Renderscript.Allocation> OnCreateCubemapFromBitmap2 { get; set; } = null;

        void CreateCubemapFromBitmap2EventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Renderscript.RenderScript>> data)
        {
            var methodToExecute = (OnCreateCubemapFromBitmap2 != null) ? OnCreateCubemapFromBitmap2 : CreateCubemapFromBitmap;
            var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.Graphics.Bitmap>(0));
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createCubemapFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Bitmap"/></param>
        /// <returns><see cref="Android.Renderscript.Allocation"/></returns>
        [System.Obsolete()]
        public virtual Android.Renderscript.Allocation CreateCubemapFromBitmap(Android.Renderscript.RenderScript arg0, Android.Graphics.Bitmap arg1)
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createCubemapFromCubeFaces(android.renderscript.RenderScript,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.renderscript.Allocation.MipmapControl,int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnCreateCubemapFromCubeFaces"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Android.Renderscript.RenderScript, Android.Graphics.Bitmap, Android.Graphics.Bitmap, Android.Graphics.Bitmap, Android.Graphics.Bitmap, Android.Graphics.Bitmap, Android.Graphics.Bitmap, Android.Renderscript.Allocation.MipmapControl, int, Android.Renderscript.Allocation> OnCreateCubemapFromCubeFaces { get; set; } = null;

        void CreateCubemapFromCubeFacesEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Renderscript.RenderScript>> data)
        {
            var methodToExecute = (OnCreateCubemapFromCubeFaces != null) ? OnCreateCubemapFromCubeFaces : CreateCubemapFromCubeFaces;
            var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.Graphics.Bitmap>(0), data.EventData.GetAt<Android.Graphics.Bitmap>(1), data.EventData.GetAt<Android.Graphics.Bitmap>(2), data.EventData.GetAt<Android.Graphics.Bitmap>(3), data.EventData.GetAt<Android.Graphics.Bitmap>(4), data.EventData.GetAt<Android.Graphics.Bitmap>(5), data.EventData.GetAt<Android.Renderscript.Allocation.MipmapControl>(6), data.EventData.GetAt<int>(7));
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createCubemapFromCubeFaces(android.renderscript.RenderScript,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.renderscript.Allocation.MipmapControl,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Bitmap"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.Bitmap"/></param>
        /// <param name="arg3"><see cref="Android.Graphics.Bitmap"/></param>
        /// <param name="arg4"><see cref="Android.Graphics.Bitmap"/></param>
        /// <param name="arg5"><see cref="Android.Graphics.Bitmap"/></param>
        /// <param name="arg6"><see cref="Android.Graphics.Bitmap"/></param>
        /// <param name="arg7"><see cref="Android.Renderscript.Allocation.MipmapControl"/></param>
        /// <param name="arg8"><see cref="int"/></param>
        /// <returns><see cref="Android.Renderscript.Allocation"/></returns>
        [System.Obsolete()]
        public virtual Android.Renderscript.Allocation CreateCubemapFromCubeFaces(Android.Renderscript.RenderScript arg0, Android.Graphics.Bitmap arg1, Android.Graphics.Bitmap arg2, Android.Graphics.Bitmap arg3, Android.Graphics.Bitmap arg4, Android.Graphics.Bitmap arg5, Android.Graphics.Bitmap arg6, Android.Renderscript.Allocation.MipmapControl arg7, int arg8)
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createCubemapFromCubeFaces(android.renderscript.RenderScript,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap)"/>
        /// </summary>
        /// <remarks>If <see cref="OnCreateCubemapFromCubeFaces7"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Android.Renderscript.RenderScript, Android.Graphics.Bitmap, Android.Graphics.Bitmap, Android.Graphics.Bitmap, Android.Graphics.Bitmap, Android.Graphics.Bitmap, Android.Graphics.Bitmap, Android.Renderscript.Allocation> OnCreateCubemapFromCubeFaces7 { get; set; } = null;

        void CreateCubemapFromCubeFaces7EventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Renderscript.RenderScript>> data)
        {
            var methodToExecute = (OnCreateCubemapFromCubeFaces7 != null) ? OnCreateCubemapFromCubeFaces7 : CreateCubemapFromCubeFaces;
            var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.Graphics.Bitmap>(0), data.EventData.GetAt<Android.Graphics.Bitmap>(1), data.EventData.GetAt<Android.Graphics.Bitmap>(2), data.EventData.GetAt<Android.Graphics.Bitmap>(3), data.EventData.GetAt<Android.Graphics.Bitmap>(4), data.EventData.GetAt<Android.Graphics.Bitmap>(5));
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createCubemapFromCubeFaces(android.renderscript.RenderScript,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Bitmap"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.Bitmap"/></param>
        /// <param name="arg3"><see cref="Android.Graphics.Bitmap"/></param>
        /// <param name="arg4"><see cref="Android.Graphics.Bitmap"/></param>
        /// <param name="arg5"><see cref="Android.Graphics.Bitmap"/></param>
        /// <param name="arg6"><see cref="Android.Graphics.Bitmap"/></param>
        /// <returns><see cref="Android.Renderscript.Allocation"/></returns>
        [System.Obsolete()]
        public virtual Android.Renderscript.Allocation CreateCubemapFromCubeFaces(Android.Renderscript.RenderScript arg0, Android.Graphics.Bitmap arg1, Android.Graphics.Bitmap arg2, Android.Graphics.Bitmap arg3, Android.Graphics.Bitmap arg4, Android.Graphics.Bitmap arg5, Android.Graphics.Bitmap arg6)
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation.MipmapControl,int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnCreateFromBitmap"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Android.Renderscript.RenderScript, Android.Graphics.Bitmap, Android.Renderscript.Allocation.MipmapControl, int, Android.Renderscript.Allocation> OnCreateFromBitmap { get; set; } = null;

        void CreateFromBitmapEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Renderscript.RenderScript>> data)
        {
            var methodToExecute = (OnCreateFromBitmap != null) ? OnCreateFromBitmap : CreateFromBitmap;
            var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.Graphics.Bitmap>(0), data.EventData.GetAt<Android.Renderscript.Allocation.MipmapControl>(1), data.EventData.GetAt<int>(2));
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation.MipmapControl,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Bitmap"/></param>
        /// <param name="arg2"><see cref="Android.Renderscript.Allocation.MipmapControl"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="Android.Renderscript.Allocation"/></returns>
        [System.Obsolete()]
        public virtual Android.Renderscript.Allocation CreateFromBitmap(Android.Renderscript.RenderScript arg0, Android.Graphics.Bitmap arg1, Android.Renderscript.Allocation.MipmapControl arg2, int arg3)
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)"/>
        /// </summary>
        /// <remarks>If <see cref="OnCreateFromBitmap2"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Android.Renderscript.RenderScript, Android.Graphics.Bitmap, Android.Renderscript.Allocation> OnCreateFromBitmap2 { get; set; } = null;

        void CreateFromBitmap2EventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Renderscript.RenderScript>> data)
        {
            var methodToExecute = (OnCreateFromBitmap2 != null) ? OnCreateFromBitmap2 : CreateFromBitmap;
            var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.Graphics.Bitmap>(0));
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Bitmap"/></param>
        /// <returns><see cref="Android.Renderscript.Allocation"/></returns>
        [System.Obsolete()]
        public virtual Android.Renderscript.Allocation CreateFromBitmap(Android.Renderscript.RenderScript arg0, Android.Graphics.Bitmap arg1)
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createFromBitmapResource(android.renderscript.RenderScript,android.content.res.Resources,int,android.renderscript.Allocation.MipmapControl,int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnCreateFromBitmapResource"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Android.Renderscript.RenderScript, Android.Content.Res.Resources, int, Android.Renderscript.Allocation.MipmapControl, int, Android.Renderscript.Allocation> OnCreateFromBitmapResource { get; set; } = null;

        void CreateFromBitmapResourceEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Renderscript.RenderScript>> data)
        {
            var methodToExecute = (OnCreateFromBitmapResource != null) ? OnCreateFromBitmapResource : CreateFromBitmapResource;
            var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.Content.Res.Resources>(0), data.EventData.GetAt<int>(1), data.EventData.GetAt<Android.Renderscript.Allocation.MipmapControl>(2), data.EventData.GetAt<int>(3));
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createFromBitmapResource(android.renderscript.RenderScript,android.content.res.Resources,int,android.renderscript.Allocation.MipmapControl,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <param name="arg1"><see cref="Android.Content.Res.Resources"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Android.Renderscript.Allocation.MipmapControl"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <returns><see cref="Android.Renderscript.Allocation"/></returns>
        [System.Obsolete()]
        public virtual Android.Renderscript.Allocation CreateFromBitmapResource(Android.Renderscript.RenderScript arg0, Android.Content.Res.Resources arg1, int arg2, Android.Renderscript.Allocation.MipmapControl arg3, int arg4)
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createFromBitmapResource(android.renderscript.RenderScript,android.content.res.Resources,int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnCreateFromBitmapResource3"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Android.Renderscript.RenderScript, Android.Content.Res.Resources, int, Android.Renderscript.Allocation> OnCreateFromBitmapResource3 { get; set; } = null;

        void CreateFromBitmapResource3EventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Renderscript.RenderScript>> data)
        {
            var methodToExecute = (OnCreateFromBitmapResource3 != null) ? OnCreateFromBitmapResource3 : CreateFromBitmapResource;
            var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.Content.Res.Resources>(0), data.EventData.GetAt<int>(1));
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createFromBitmapResource(android.renderscript.RenderScript,android.content.res.Resources,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <param name="arg1"><see cref="Android.Content.Res.Resources"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="Android.Renderscript.Allocation"/></returns>
        [System.Obsolete()]
        public virtual Android.Renderscript.Allocation CreateFromBitmapResource(Android.Renderscript.RenderScript arg0, Android.Content.Res.Resources arg1, int arg2)
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createFromString(android.renderscript.RenderScript,java.lang.String,int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnCreateFromString"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Android.Renderscript.RenderScript, Java.Lang.String, int, Android.Renderscript.Allocation> OnCreateFromString { get; set; } = null;

        void CreateFromStringEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Renderscript.RenderScript>> data)
        {
            var methodToExecute = (OnCreateFromString != null) ? OnCreateFromString : CreateFromString;
            var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Java.Lang.String>(0), data.EventData.GetAt<int>(1));
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createFromString(android.renderscript.RenderScript,java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="Android.Renderscript.Allocation"/></returns>
        [System.Obsolete()]
        public virtual Android.Renderscript.Allocation CreateFromString(Android.Renderscript.RenderScript arg0, Java.Lang.String arg1, int arg2)
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createSized(android.renderscript.RenderScript,android.renderscript.Element,int,int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnCreateSized"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Android.Renderscript.RenderScript, Android.Renderscript.Element, int, int, Android.Renderscript.Allocation> OnCreateSized { get; set; } = null;

        void CreateSizedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Renderscript.RenderScript>> data)
        {
            var methodToExecute = (OnCreateSized != null) ? OnCreateSized : CreateSized;
            var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.Renderscript.Element>(0), data.EventData.GetAt<int>(1), data.EventData.GetAt<int>(2));
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createSized(android.renderscript.RenderScript,android.renderscript.Element,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <param name="arg1"><see cref="Android.Renderscript.Element"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="Android.Renderscript.Allocation"/></returns>
        [System.Obsolete()]
        public virtual Android.Renderscript.Allocation CreateSized(Android.Renderscript.RenderScript arg0, Android.Renderscript.Element arg1, int arg2, int arg3)
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createSized(android.renderscript.RenderScript,android.renderscript.Element,int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnCreateSized3"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Android.Renderscript.RenderScript, Android.Renderscript.Element, int, Android.Renderscript.Allocation> OnCreateSized3 { get; set; } = null;

        void CreateSized3EventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Renderscript.RenderScript>> data)
        {
            var methodToExecute = (OnCreateSized3 != null) ? OnCreateSized3 : CreateSized;
            var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.Renderscript.Element>(0), data.EventData.GetAt<int>(1));
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createSized(android.renderscript.RenderScript,android.renderscript.Element,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <param name="arg1"><see cref="Android.Renderscript.Element"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="Android.Renderscript.Allocation"/></returns>
        [System.Obsolete()]
        public virtual Android.Renderscript.Allocation CreateSized(Android.Renderscript.RenderScript arg0, Android.Renderscript.Element arg1, int arg2)
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createTyped(android.renderscript.RenderScript,android.renderscript.Type,android.renderscript.Allocation.MipmapControl,int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnCreateTyped"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Android.Renderscript.RenderScript, Android.Renderscript.Type, Android.Renderscript.Allocation.MipmapControl, int, Android.Renderscript.Allocation> OnCreateTyped { get; set; } = null;

        void CreateTypedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Renderscript.RenderScript>> data)
        {
            var methodToExecute = (OnCreateTyped != null) ? OnCreateTyped : CreateTyped;
            var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.Renderscript.Type>(0), data.EventData.GetAt<Android.Renderscript.Allocation.MipmapControl>(1), data.EventData.GetAt<int>(2));
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createTyped(android.renderscript.RenderScript,android.renderscript.Type,android.renderscript.Allocation.MipmapControl,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <param name="arg1"><see cref="Android.Renderscript.Type"/></param>
        /// <param name="arg2"><see cref="Android.Renderscript.Allocation.MipmapControl"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="Android.Renderscript.Allocation"/></returns>
        [System.Obsolete()]
        public virtual Android.Renderscript.Allocation CreateTyped(Android.Renderscript.RenderScript arg0, Android.Renderscript.Type arg1, Android.Renderscript.Allocation.MipmapControl arg2, int arg3)
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createTyped(android.renderscript.RenderScript,android.renderscript.Type,int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnCreateTyped3"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Android.Renderscript.RenderScript, Android.Renderscript.Type, int, Android.Renderscript.Allocation> OnCreateTyped3 { get; set; } = null;

        void CreateTyped3EventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Renderscript.RenderScript>> data)
        {
            var methodToExecute = (OnCreateTyped3 != null) ? OnCreateTyped3 : CreateTyped;
            var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.Renderscript.Type>(0), data.EventData.GetAt<int>(1));
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createTyped(android.renderscript.RenderScript,android.renderscript.Type,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <param name="arg1"><see cref="Android.Renderscript.Type"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="Android.Renderscript.Allocation"/></returns>
        [System.Obsolete()]
        public virtual Android.Renderscript.Allocation CreateTyped(Android.Renderscript.RenderScript arg0, Android.Renderscript.Type arg1, int arg2)
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createTyped(android.renderscript.RenderScript,android.renderscript.Type)"/>
        /// </summary>
        /// <remarks>If <see cref="OnCreateTyped2_2"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Android.Renderscript.RenderScript, Android.Renderscript.Type, Android.Renderscript.Allocation> OnCreateTyped2_2 { get; set; } = null;

        void CreateTyped2_2EventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Renderscript.RenderScript>> data)
        {
            var methodToExecute = (OnCreateTyped2_2 != null) ? OnCreateTyped2_2 : CreateTyped;
            var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.Renderscript.Type>(0));
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createTyped(android.renderscript.RenderScript,android.renderscript.Type)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <param name="arg1"><see cref="Android.Renderscript.Type"/></param>
        /// <returns><see cref="Android.Renderscript.Allocation"/></returns>
        [System.Obsolete()]
        public virtual Android.Renderscript.Allocation CreateTyped(Android.Renderscript.RenderScript arg0, Android.Renderscript.Type arg1)
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createAllocations(android.renderscript.RenderScript,android.renderscript.Type,int,int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnCreateAllocations"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Android.Renderscript.RenderScript, Android.Renderscript.Type, int, int, Android.Renderscript.Allocation[]> OnCreateAllocations { get; set; } = null;

        void CreateAllocationsEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Renderscript.RenderScript>> data)
        {
            var methodToExecute = (OnCreateAllocations != null) ? OnCreateAllocations : CreateAllocations;
            var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.Renderscript.Type>(0), data.EventData.GetAt<int>(1), data.EventData.GetAt<int>(2));
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#createAllocations(android.renderscript.RenderScript,android.renderscript.Type,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <param name="arg1"><see cref="Android.Renderscript.Type"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="Android.Renderscript.Allocation"/></returns>
        [System.Obsolete()]
        public virtual Android.Renderscript.Allocation[] CreateAllocations(Android.Renderscript.RenderScript arg0, Android.Renderscript.Type arg1, int arg2, int arg3)
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/AllocationAdapter.html#create1D(android.renderscript.RenderScript,android.renderscript.Allocation)"/>
        /// </summary>
        /// <remarks>If <see cref="OnCreate1D"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Android.Renderscript.RenderScript, Android.Renderscript.Allocation, Android.Renderscript.AllocationAdapter> OnCreate1D { get; set; } = null;

        void Create1DEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Renderscript.RenderScript>> data)
        {
            var methodToExecute = (OnCreate1D != null) ? OnCreate1D : Create1D;
            var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.Renderscript.Allocation>(0));
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/AllocationAdapter.html#create1D(android.renderscript.RenderScript,android.renderscript.Allocation)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <param name="arg1"><see cref="Android.Renderscript.Allocation"/></param>
        /// <returns><see cref="Android.Renderscript.AllocationAdapter"/></returns>
        [System.Obsolete()]
        public virtual Android.Renderscript.AllocationAdapter Create1D(Android.Renderscript.RenderScript arg0, Android.Renderscript.Allocation arg1)
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/AllocationAdapter.html#create2D(android.renderscript.RenderScript,android.renderscript.Allocation)"/>
        /// </summary>
        /// <remarks>If <see cref="OnCreate2D"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Android.Renderscript.RenderScript, Android.Renderscript.Allocation, Android.Renderscript.AllocationAdapter> OnCreate2D { get; set; } = null;

        void Create2DEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Renderscript.RenderScript>> data)
        {
            var methodToExecute = (OnCreate2D != null) ? OnCreate2D : Create2D;
            var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.Renderscript.Allocation>(0));
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/AllocationAdapter.html#create2D(android.renderscript.RenderScript,android.renderscript.Allocation)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <param name="arg1"><see cref="Android.Renderscript.Allocation"/></param>
        /// <returns><see cref="Android.Renderscript.AllocationAdapter"/></returns>
        [System.Obsolete()]
        public virtual Android.Renderscript.AllocationAdapter Create2D(Android.Renderscript.RenderScript arg0, Android.Renderscript.Allocation arg1)
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/AllocationAdapter.html#createTyped(android.renderscript.RenderScript,android.renderscript.Allocation,android.renderscript.Type)"/>
        /// </summary>
        /// <remarks>If <see cref="OnCreateTyped3_3"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Android.Renderscript.RenderScript, Android.Renderscript.Allocation, Android.Renderscript.Type, Android.Renderscript.AllocationAdapter> OnCreateTyped3_3 { get; set; } = null;

        void CreateTyped3_3EventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Renderscript.RenderScript>> data)
        {
            var methodToExecute = (OnCreateTyped3_3 != null) ? OnCreateTyped3_3 : CreateTyped;
            var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.Renderscript.Allocation>(0), data.EventData.GetAt<Android.Renderscript.Type>(1));
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/AllocationAdapter.html#createTyped(android.renderscript.RenderScript,android.renderscript.Allocation,android.renderscript.Type)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <param name="arg1"><see cref="Android.Renderscript.Allocation"/></param>
        /// <param name="arg2"><see cref="Android.Renderscript.Type"/></param>
        /// <returns><see cref="Android.Renderscript.AllocationAdapter"/></returns>
        [System.Obsolete()]
        public virtual Android.Renderscript.AllocationAdapter CreateTyped(Android.Renderscript.RenderScript arg0, Android.Renderscript.Allocation arg1, Android.Renderscript.Type arg2)
        {
            return default;
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// Handlers initializer for <see cref="AllocationAdapter"/>
        /// </summary>
        protected virtual void InitializeHandlers()
        {
            AddEventHandler("getElement", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(GetElementEventHandler));
            AddEventHandler("getType", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(GetTypeEventHandler));
            AddEventHandler("getSurface", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(GetSurfaceEventHandler));
            AddEventHandler("getBytesSize", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(GetBytesSizeEventHandler));
            AddEventHandler("getUsage", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(GetUsageEventHandler));
            AddEventHandler("getName", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(GetNameEventHandler));
            AddEventHandler("getByteBuffer", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(GetByteBufferEventHandler));
            AddEventHandler("getStride", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(GetStrideEventHandler));
            AddEventHandler("getTimeStamp", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(GetTimeStampEventHandler));
            AddEventHandler("copy1DRangeFrom", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(Copy1DRangeFromEventHandler));
            AddEventHandler("copy1DRangeFrom3", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(Copy1DRangeFrom3EventHandler));
            AddEventHandler("copy1DRangeFrom3_2", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(Copy1DRangeFrom3_2EventHandler));
            AddEventHandler("copy1DRangeFrom3_3", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(Copy1DRangeFrom3_3EventHandler));
            AddEventHandler("copy1DRangeFrom3_4", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(Copy1DRangeFrom3_4EventHandler));
            AddEventHandler("copy1DRangeFrom3_5", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(Copy1DRangeFrom3_5EventHandler));
            AddEventHandler("copy1DRangeFromUnchecked", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(Copy1DRangeFromUncheckedEventHandler));
            AddEventHandler("copy1DRangeFromUnchecked3", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(Copy1DRangeFromUnchecked3EventHandler));
            AddEventHandler("copy1DRangeFromUnchecked3_2", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(Copy1DRangeFromUnchecked3_2EventHandler));
            AddEventHandler("copy1DRangeFromUnchecked3_3", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(Copy1DRangeFromUnchecked3_3EventHandler));
            AddEventHandler("copy1DRangeFromUnchecked3_4", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(Copy1DRangeFromUnchecked3_4EventHandler));
            AddEventHandler("copy1DRangeTo", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(Copy1DRangeToEventHandler));
            AddEventHandler("copy1DRangeTo3", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(Copy1DRangeTo3EventHandler));
            AddEventHandler("copy1DRangeTo3_2", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(Copy1DRangeTo3_2EventHandler));
            AddEventHandler("copy1DRangeTo3_3", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(Copy1DRangeTo3_3EventHandler));
            AddEventHandler("copy1DRangeTo3_4", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(Copy1DRangeTo3_4EventHandler));
            AddEventHandler("copy1DRangeToUnchecked", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(Copy1DRangeToUncheckedEventHandler));
            AddEventHandler("copy1DRangeToUnchecked3", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(Copy1DRangeToUnchecked3EventHandler));
            AddEventHandler("copy1DRangeToUnchecked3_2", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(Copy1DRangeToUnchecked3_2EventHandler));
            AddEventHandler("copy1DRangeToUnchecked3_3", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(Copy1DRangeToUnchecked3_3EventHandler));
            AddEventHandler("copy1DRangeToUnchecked3_4", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(Copy1DRangeToUnchecked3_4EventHandler));
            AddEventHandler("copy2DRangeFrom", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(Copy2DRangeFromEventHandler));
            AddEventHandler("copy2DRangeFrom7", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(Copy2DRangeFrom7EventHandler));
            AddEventHandler("copy2DRangeFrom5_2", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(Copy2DRangeFrom5_2EventHandler));
            AddEventHandler("copy2DRangeFrom5_3", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(Copy2DRangeFrom5_3EventHandler));
            AddEventHandler("copy2DRangeFrom5_4", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(Copy2DRangeFrom5_4EventHandler));
            AddEventHandler("copy2DRangeFrom5_5", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(Copy2DRangeFrom5_5EventHandler));
            AddEventHandler("copy2DRangeFrom5_6", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(Copy2DRangeFrom5_6EventHandler));
            AddEventHandler("copy2DRangeTo", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(Copy2DRangeToEventHandler));
            AddEventHandler("copy2DRangeTo5", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(Copy2DRangeTo5EventHandler));
            AddEventHandler("copy2DRangeTo5_2", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(Copy2DRangeTo5_2EventHandler));
            AddEventHandler("copy2DRangeTo5_3", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(Copy2DRangeTo5_3EventHandler));
            AddEventHandler("copy2DRangeTo5_4", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(Copy2DRangeTo5_4EventHandler));
            AddEventHandler("copy3DRangeFrom", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(Copy3DRangeFromEventHandler));
            AddEventHandler("copy3DRangeFrom7", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(Copy3DRangeFrom7EventHandler));
            AddEventHandler("copy3DRangeTo", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(Copy3DRangeToEventHandler));
            AddEventHandler("copyFrom", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Graphics.Bitmap>>>(CopyFromEventHandler));
            AddEventHandler("copyFrom1", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Renderscript.Allocation>>>(CopyFrom1EventHandler));
            AddEventHandler("copyFrom1_2", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Renderscript.BaseObj[]>>>(CopyFrom1_2EventHandler));
            AddEventHandler("copyFrom1_3", new System.EventHandler<CLRListenerEventArgs<CLREventData<byte[]>>>(CopyFrom1_3EventHandler));
            AddEventHandler("copyFrom1_4", new System.EventHandler<CLRListenerEventArgs<CLREventData<float[]>>>(CopyFrom1_4EventHandler));
            AddEventHandler("copyFrom1_5", new System.EventHandler<CLRListenerEventArgs<CLREventData<int[]>>>(CopyFrom1_5EventHandler));
            AddEventHandler("copyFrom1_6", new System.EventHandler<CLRListenerEventArgs<CLREventData<object>>>(CopyFrom1_6EventHandler));
            AddEventHandler("copyFrom1_7", new System.EventHandler<CLRListenerEventArgs<CLREventData<short[]>>>(CopyFrom1_7EventHandler));
            AddEventHandler("copyFromUnchecked", new System.EventHandler<CLRListenerEventArgs<CLREventData<byte[]>>>(CopyFromUncheckedEventHandler));
            AddEventHandler("copyFromUnchecked1", new System.EventHandler<CLRListenerEventArgs<CLREventData<float[]>>>(CopyFromUnchecked1EventHandler));
            AddEventHandler("copyFromUnchecked1_2", new System.EventHandler<CLRListenerEventArgs<CLREventData<int[]>>>(CopyFromUnchecked1_2EventHandler));
            AddEventHandler("copyFromUnchecked1_3", new System.EventHandler<CLRListenerEventArgs<CLREventData<object>>>(CopyFromUnchecked1_3EventHandler));
            AddEventHandler("copyFromUnchecked1_4", new System.EventHandler<CLRListenerEventArgs<CLREventData<short[]>>>(CopyFromUnchecked1_4EventHandler));
            AddEventHandler("copyTo", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Graphics.Bitmap>>>(CopyToEventHandler));
            AddEventHandler("copyTo1", new System.EventHandler<CLRListenerEventArgs<CLREventData<byte[]>>>(CopyTo1EventHandler));
            AddEventHandler("copyTo1_2", new System.EventHandler<CLRListenerEventArgs<CLREventData<float[]>>>(CopyTo1_2EventHandler));
            AddEventHandler("copyTo1_3", new System.EventHandler<CLRListenerEventArgs<CLREventData<int[]>>>(CopyTo1_3EventHandler));
            AddEventHandler("copyTo1_4", new System.EventHandler<CLRListenerEventArgs<CLREventData<object>>>(CopyTo1_4EventHandler));
            AddEventHandler("copyTo1_5", new System.EventHandler<CLRListenerEventArgs<CLREventData<short[]>>>(CopyTo1_5EventHandler));
            AddEventHandler("generateMipmaps", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(GenerateMipmapsEventHandler));
            AddEventHandler("ioReceive", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(IoReceiveEventHandler));
            AddEventHandler("ioSend", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(IoSendEventHandler));
            AddEventHandler("setAutoPadding", new System.EventHandler<CLRListenerEventArgs<CLREventData<bool>>>(SetAutoPaddingEventHandler));
            AddEventHandler("setFromFieldPacker", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(SetFromFieldPackerEventHandler));
            AddEventHandler("setFromFieldPacker3", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(SetFromFieldPacker3EventHandler));
            AddEventHandler("setFromFieldPacker5_2", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(SetFromFieldPacker5_2EventHandler));
            AddEventHandler("setOnBufferAvailableListener", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Renderscript.Allocation.OnBufferAvailableListener>>>(SetOnBufferAvailableListenerEventHandler));
            AddEventHandler("setSurface", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.Surface>>>(SetSurfaceEventHandler));
            AddEventHandler("syncAll", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(SyncAllEventHandler));
            AddEventHandler("setFace", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Renderscript.Type.CubemapFace>>>(SetFaceEventHandler));
            AddEventHandler("setLOD", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(SetLODEventHandler));
            AddEventHandler("setX", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(SetXEventHandler));
            AddEventHandler("setY", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(SetYEventHandler));
            AddEventHandler("setZ", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(SetZEventHandler));
            AddEventHandler("setName", new System.EventHandler<CLRListenerEventArgs<CLREventData<Java.Lang.String>>>(SetNameEventHandler));

        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#getElement()"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetElement"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Android.Renderscript.Element> OnGetElement { get; set; } = null;

        void GetElementEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnGetElement != null) ? OnGetElement : GetElement;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#getElement()"/>
        /// </summary>
        /// <returns><see cref="Android.Renderscript.Element"/></returns>
        [System.Obsolete()]
        public virtual Android.Renderscript.Element GetElement()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#getType()"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetType"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Android.Renderscript.Type> OnGetType { get; set; } = null;

        void GetTypeEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnGetType != null) ? OnGetType : GetType;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#getType()"/>
        /// </summary>
        /// <returns><see cref="Android.Renderscript.Type"/></returns>
        [System.Obsolete()]
        public virtual Android.Renderscript.Type GetType()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#getSurface()"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetSurface"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Android.View.Surface> OnGetSurface { get; set; } = null;

        void GetSurfaceEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnGetSurface != null) ? OnGetSurface : GetSurface;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#getSurface()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Surface"/></returns>
        [System.Obsolete()]
        public virtual Android.View.Surface GetSurface()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#getBytesSize()"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetBytesSize"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<int> OnGetBytesSize { get; set; } = null;

        void GetBytesSizeEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnGetBytesSize != null) ? OnGetBytesSize : GetBytesSize;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#getBytesSize()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [System.Obsolete()]
        public virtual int GetBytesSize()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#getUsage()"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetUsage"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<int> OnGetUsage { get; set; } = null;

        void GetUsageEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnGetUsage != null) ? OnGetUsage : GetUsage;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#getUsage()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [System.Obsolete()]
        public virtual int GetUsage()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/BaseObj.html#getName()"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetName"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Java.Lang.String> OnGetName { get; set; } = null;

        void GetNameEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnGetName != null) ? OnGetName : GetName;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/BaseObj.html#getName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        [System.Obsolete()]
        public virtual Java.Lang.String GetName()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#getByteBuffer()"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetByteBuffer"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Java.Nio.ByteBuffer> OnGetByteBuffer { get; set; } = null;

        void GetByteBufferEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnGetByteBuffer != null) ? OnGetByteBuffer : GetByteBuffer;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#getByteBuffer()"/>
        /// </summary>
        /// <returns><see cref="Java.Nio.ByteBuffer"/></returns>
        [System.Obsolete()]
        public virtual Java.Nio.ByteBuffer GetByteBuffer()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#getStride()"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetStride"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<long> OnGetStride { get; set; } = null;

        void GetStrideEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnGetStride != null) ? OnGetStride : GetStride;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#getStride()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        [System.Obsolete()]
        public virtual long GetStride()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#getTimeStamp()"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetTimeStamp"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<long> OnGetTimeStamp { get; set; } = null;

        void GetTimeStampEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnGetTimeStamp != null) ? OnGetTimeStamp : GetTimeStamp;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#getTimeStamp()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        [System.Obsolete()]
        public virtual long GetTimeStamp()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFrom(int,int,android.renderscript.Allocation,int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopy1DRangeFrom"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, int, Android.Renderscript.Allocation, int> OnCopy1DRangeFrom { get; set; } = null;

        void Copy1DRangeFromEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnCopy1DRangeFrom != null) ? OnCopy1DRangeFrom : Copy1DRangeFrom;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<Android.Renderscript.Allocation>(1), data.EventData.GetAt<int>(2));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFrom(int,int,android.renderscript.Allocation,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Renderscript.Allocation"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        [System.Obsolete()]
        public virtual void Copy1DRangeFrom(int arg0, int arg1, Android.Renderscript.Allocation arg2, int arg3)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFrom(int,int,byte[])"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopy1DRangeFrom3"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, int, byte[]> OnCopy1DRangeFrom3 { get; set; } = null;

        void Copy1DRangeFrom3EventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnCopy1DRangeFrom3 != null) ? OnCopy1DRangeFrom3 : Copy1DRangeFrom;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<byte[]>(1));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFrom(int,int,byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="byte"/></param>
        [System.Obsolete()]
        public virtual void Copy1DRangeFrom(int arg0, int arg1, byte[] arg2)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFrom(int,int,float[])"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopy1DRangeFrom3_2"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, int, float[]> OnCopy1DRangeFrom3_2 { get; set; } = null;

        void Copy1DRangeFrom3_2EventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnCopy1DRangeFrom3_2 != null) ? OnCopy1DRangeFrom3_2 : Copy1DRangeFrom;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<float[]>(1));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFrom(int,int,float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        [System.Obsolete()]
        public virtual void Copy1DRangeFrom(int arg0, int arg1, float[] arg2)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFrom(int,int,int[])"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopy1DRangeFrom3_3"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, int, int[]> OnCopy1DRangeFrom3_3 { get; set; } = null;

        void Copy1DRangeFrom3_3EventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnCopy1DRangeFrom3_3 != null) ? OnCopy1DRangeFrom3_3 : Copy1DRangeFrom;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<int[]>(1));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFrom(int,int,int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        [System.Obsolete()]
        public virtual void Copy1DRangeFrom(int arg0, int arg1, int[] arg2)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFrom(int,int,java.lang.Object)"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopy1DRangeFrom3_4"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, int, object> OnCopy1DRangeFrom3_4 { get; set; } = null;

        void Copy1DRangeFrom3_4EventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnCopy1DRangeFrom3_4 != null) ? OnCopy1DRangeFrom3_4 : Copy1DRangeFrom;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<object>(1));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFrom(int,int,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="object"/></param>
        [System.Obsolete()]
        public virtual void Copy1DRangeFrom(int arg0, int arg1, object arg2)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFrom(int,int,short[])"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopy1DRangeFrom3_5"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, int, short[]> OnCopy1DRangeFrom3_5 { get; set; } = null;

        void Copy1DRangeFrom3_5EventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnCopy1DRangeFrom3_5 != null) ? OnCopy1DRangeFrom3_5 : Copy1DRangeFrom;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<short[]>(1));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFrom(int,int,short[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="short"/></param>
        [System.Obsolete()]
        public virtual void Copy1DRangeFrom(int arg0, int arg1, short[] arg2)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFromUnchecked(int,int,byte[])"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopy1DRangeFromUnchecked"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, int, byte[]> OnCopy1DRangeFromUnchecked { get; set; } = null;

        void Copy1DRangeFromUncheckedEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnCopy1DRangeFromUnchecked != null) ? OnCopy1DRangeFromUnchecked : Copy1DRangeFromUnchecked;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<byte[]>(1));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFromUnchecked(int,int,byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="byte"/></param>
        [System.Obsolete()]
        public virtual void Copy1DRangeFromUnchecked(int arg0, int arg1, byte[] arg2)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFromUnchecked(int,int,float[])"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopy1DRangeFromUnchecked3"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, int, float[]> OnCopy1DRangeFromUnchecked3 { get; set; } = null;

        void Copy1DRangeFromUnchecked3EventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnCopy1DRangeFromUnchecked3 != null) ? OnCopy1DRangeFromUnchecked3 : Copy1DRangeFromUnchecked;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<float[]>(1));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFromUnchecked(int,int,float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        [System.Obsolete()]
        public virtual void Copy1DRangeFromUnchecked(int arg0, int arg1, float[] arg2)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFromUnchecked(int,int,int[])"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopy1DRangeFromUnchecked3_2"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, int, int[]> OnCopy1DRangeFromUnchecked3_2 { get; set; } = null;

        void Copy1DRangeFromUnchecked3_2EventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnCopy1DRangeFromUnchecked3_2 != null) ? OnCopy1DRangeFromUnchecked3_2 : Copy1DRangeFromUnchecked;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<int[]>(1));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFromUnchecked(int,int,int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        [System.Obsolete()]
        public virtual void Copy1DRangeFromUnchecked(int arg0, int arg1, int[] arg2)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFromUnchecked(int,int,java.lang.Object)"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopy1DRangeFromUnchecked3_3"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, int, object> OnCopy1DRangeFromUnchecked3_3 { get; set; } = null;

        void Copy1DRangeFromUnchecked3_3EventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnCopy1DRangeFromUnchecked3_3 != null) ? OnCopy1DRangeFromUnchecked3_3 : Copy1DRangeFromUnchecked;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<object>(1));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFromUnchecked(int,int,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="object"/></param>
        [System.Obsolete()]
        public virtual void Copy1DRangeFromUnchecked(int arg0, int arg1, object arg2)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFromUnchecked(int,int,short[])"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopy1DRangeFromUnchecked3_4"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, int, short[]> OnCopy1DRangeFromUnchecked3_4 { get; set; } = null;

        void Copy1DRangeFromUnchecked3_4EventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnCopy1DRangeFromUnchecked3_4 != null) ? OnCopy1DRangeFromUnchecked3_4 : Copy1DRangeFromUnchecked;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<short[]>(1));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFromUnchecked(int,int,short[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="short"/></param>
        [System.Obsolete()]
        public virtual void Copy1DRangeFromUnchecked(int arg0, int arg1, short[] arg2)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeTo(int,int,byte[])"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopy1DRangeTo"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, int, byte[]> OnCopy1DRangeTo { get; set; } = null;

        void Copy1DRangeToEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnCopy1DRangeTo != null) ? OnCopy1DRangeTo : Copy1DRangeTo;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<byte[]>(1));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeTo(int,int,byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="byte"/></param>
        [System.Obsolete()]
        public virtual void Copy1DRangeTo(int arg0, int arg1, byte[] arg2)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeTo(int,int,float[])"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopy1DRangeTo3"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, int, float[]> OnCopy1DRangeTo3 { get; set; } = null;

        void Copy1DRangeTo3EventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnCopy1DRangeTo3 != null) ? OnCopy1DRangeTo3 : Copy1DRangeTo;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<float[]>(1));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeTo(int,int,float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        [System.Obsolete()]
        public virtual void Copy1DRangeTo(int arg0, int arg1, float[] arg2)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeTo(int,int,int[])"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopy1DRangeTo3_2"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, int, int[]> OnCopy1DRangeTo3_2 { get; set; } = null;

        void Copy1DRangeTo3_2EventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnCopy1DRangeTo3_2 != null) ? OnCopy1DRangeTo3_2 : Copy1DRangeTo;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<int[]>(1));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeTo(int,int,int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        [System.Obsolete()]
        public virtual void Copy1DRangeTo(int arg0, int arg1, int[] arg2)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeTo(int,int,java.lang.Object)"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopy1DRangeTo3_3"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, int, object> OnCopy1DRangeTo3_3 { get; set; } = null;

        void Copy1DRangeTo3_3EventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnCopy1DRangeTo3_3 != null) ? OnCopy1DRangeTo3_3 : Copy1DRangeTo;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<object>(1));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeTo(int,int,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="object"/></param>
        [System.Obsolete()]
        public virtual void Copy1DRangeTo(int arg0, int arg1, object arg2)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeTo(int,int,short[])"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopy1DRangeTo3_4"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, int, short[]> OnCopy1DRangeTo3_4 { get; set; } = null;

        void Copy1DRangeTo3_4EventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnCopy1DRangeTo3_4 != null) ? OnCopy1DRangeTo3_4 : Copy1DRangeTo;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<short[]>(1));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeTo(int,int,short[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="short"/></param>
        [System.Obsolete()]
        public virtual void Copy1DRangeTo(int arg0, int arg1, short[] arg2)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeToUnchecked(int,int,byte[])"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopy1DRangeToUnchecked"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, int, byte[]> OnCopy1DRangeToUnchecked { get; set; } = null;

        void Copy1DRangeToUncheckedEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnCopy1DRangeToUnchecked != null) ? OnCopy1DRangeToUnchecked : Copy1DRangeToUnchecked;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<byte[]>(1));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeToUnchecked(int,int,byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="byte"/></param>
        [System.Obsolete()]
        public virtual void Copy1DRangeToUnchecked(int arg0, int arg1, byte[] arg2)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeToUnchecked(int,int,float[])"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopy1DRangeToUnchecked3"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, int, float[]> OnCopy1DRangeToUnchecked3 { get; set; } = null;

        void Copy1DRangeToUnchecked3EventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnCopy1DRangeToUnchecked3 != null) ? OnCopy1DRangeToUnchecked3 : Copy1DRangeToUnchecked;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<float[]>(1));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeToUnchecked(int,int,float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        [System.Obsolete()]
        public virtual void Copy1DRangeToUnchecked(int arg0, int arg1, float[] arg2)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeToUnchecked(int,int,int[])"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopy1DRangeToUnchecked3_2"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, int, int[]> OnCopy1DRangeToUnchecked3_2 { get; set; } = null;

        void Copy1DRangeToUnchecked3_2EventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnCopy1DRangeToUnchecked3_2 != null) ? OnCopy1DRangeToUnchecked3_2 : Copy1DRangeToUnchecked;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<int[]>(1));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeToUnchecked(int,int,int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        [System.Obsolete()]
        public virtual void Copy1DRangeToUnchecked(int arg0, int arg1, int[] arg2)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeToUnchecked(int,int,java.lang.Object)"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopy1DRangeToUnchecked3_3"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, int, object> OnCopy1DRangeToUnchecked3_3 { get; set; } = null;

        void Copy1DRangeToUnchecked3_3EventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnCopy1DRangeToUnchecked3_3 != null) ? OnCopy1DRangeToUnchecked3_3 : Copy1DRangeToUnchecked;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<object>(1));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeToUnchecked(int,int,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="object"/></param>
        [System.Obsolete()]
        public virtual void Copy1DRangeToUnchecked(int arg0, int arg1, object arg2)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeToUnchecked(int,int,short[])"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopy1DRangeToUnchecked3_4"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, int, short[]> OnCopy1DRangeToUnchecked3_4 { get; set; } = null;

        void Copy1DRangeToUnchecked3_4EventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnCopy1DRangeToUnchecked3_4 != null) ? OnCopy1DRangeToUnchecked3_4 : Copy1DRangeToUnchecked;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<short[]>(1));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeToUnchecked(int,int,short[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="short"/></param>
        [System.Obsolete()]
        public virtual void Copy1DRangeToUnchecked(int arg0, int arg1, short[] arg2)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeFrom(int,int,android.graphics.Bitmap)"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopy2DRangeFrom"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, int, Android.Graphics.Bitmap> OnCopy2DRangeFrom { get; set; } = null;

        void Copy2DRangeFromEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnCopy2DRangeFrom != null) ? OnCopy2DRangeFrom : Copy2DRangeFrom;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<Android.Graphics.Bitmap>(1));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeFrom(int,int,android.graphics.Bitmap)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.Bitmap"/></param>
        [System.Obsolete()]
        public virtual void Copy2DRangeFrom(int arg0, int arg1, Android.Graphics.Bitmap arg2)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeFrom(int,int,int,int,android.renderscript.Allocation,int,int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopy2DRangeFrom7"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, int, int, int, Android.Renderscript.Allocation, int, int> OnCopy2DRangeFrom7 { get; set; } = null;

        void Copy2DRangeFrom7EventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnCopy2DRangeFrom7 != null) ? OnCopy2DRangeFrom7 : Copy2DRangeFrom;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<int>(1), data.EventData.GetAt<int>(2), data.EventData.GetAt<Android.Renderscript.Allocation>(3), data.EventData.GetAt<int>(4), data.EventData.GetAt<int>(5));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeFrom(int,int,int,int,android.renderscript.Allocation,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="Android.Renderscript.Allocation"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        [System.Obsolete()]
        public virtual void Copy2DRangeFrom(int arg0, int arg1, int arg2, int arg3, Android.Renderscript.Allocation arg4, int arg5, int arg6)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeFrom(int,int,int,int,byte[])"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopy2DRangeFrom5_2"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, int, int, int, byte[]> OnCopy2DRangeFrom5_2 { get; set; } = null;

        void Copy2DRangeFrom5_2EventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnCopy2DRangeFrom5_2 != null) ? OnCopy2DRangeFrom5_2 : Copy2DRangeFrom;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<int>(1), data.EventData.GetAt<int>(2), data.EventData.GetAt<byte[]>(3));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeFrom(int,int,int,int,byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="byte"/></param>
        [System.Obsolete()]
        public virtual void Copy2DRangeFrom(int arg0, int arg1, int arg2, int arg3, byte[] arg4)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeFrom(int,int,int,int,float[])"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopy2DRangeFrom5_3"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, int, int, int, float[]> OnCopy2DRangeFrom5_3 { get; set; } = null;

        void Copy2DRangeFrom5_3EventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnCopy2DRangeFrom5_3 != null) ? OnCopy2DRangeFrom5_3 : Copy2DRangeFrom;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<int>(1), data.EventData.GetAt<int>(2), data.EventData.GetAt<float[]>(3));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeFrom(int,int,int,int,float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        [System.Obsolete()]
        public virtual void Copy2DRangeFrom(int arg0, int arg1, int arg2, int arg3, float[] arg4)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeFrom(int,int,int,int,int[])"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopy2DRangeFrom5_4"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, int, int, int, int[]> OnCopy2DRangeFrom5_4 { get; set; } = null;

        void Copy2DRangeFrom5_4EventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnCopy2DRangeFrom5_4 != null) ? OnCopy2DRangeFrom5_4 : Copy2DRangeFrom;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<int>(1), data.EventData.GetAt<int>(2), data.EventData.GetAt<int[]>(3));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeFrom(int,int,int,int,int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        [System.Obsolete()]
        public virtual void Copy2DRangeFrom(int arg0, int arg1, int arg2, int arg3, int[] arg4)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeFrom(int,int,int,int,java.lang.Object)"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopy2DRangeFrom5_5"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, int, int, int, object> OnCopy2DRangeFrom5_5 { get; set; } = null;

        void Copy2DRangeFrom5_5EventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnCopy2DRangeFrom5_5 != null) ? OnCopy2DRangeFrom5_5 : Copy2DRangeFrom;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<int>(1), data.EventData.GetAt<int>(2), data.EventData.GetAt<object>(3));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeFrom(int,int,int,int,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="object"/></param>
        [System.Obsolete()]
        public virtual void Copy2DRangeFrom(int arg0, int arg1, int arg2, int arg3, object arg4)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeFrom(int,int,int,int,short[])"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopy2DRangeFrom5_6"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, int, int, int, short[]> OnCopy2DRangeFrom5_6 { get; set; } = null;

        void Copy2DRangeFrom5_6EventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnCopy2DRangeFrom5_6 != null) ? OnCopy2DRangeFrom5_6 : Copy2DRangeFrom;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<int>(1), data.EventData.GetAt<int>(2), data.EventData.GetAt<short[]>(3));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeFrom(int,int,int,int,short[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="short"/></param>
        [System.Obsolete()]
        public virtual void Copy2DRangeFrom(int arg0, int arg1, int arg2, int arg3, short[] arg4)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeTo(int,int,int,int,byte[])"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopy2DRangeTo"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, int, int, int, byte[]> OnCopy2DRangeTo { get; set; } = null;

        void Copy2DRangeToEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnCopy2DRangeTo != null) ? OnCopy2DRangeTo : Copy2DRangeTo;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<int>(1), data.EventData.GetAt<int>(2), data.EventData.GetAt<byte[]>(3));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeTo(int,int,int,int,byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="byte"/></param>
        [System.Obsolete()]
        public virtual void Copy2DRangeTo(int arg0, int arg1, int arg2, int arg3, byte[] arg4)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeTo(int,int,int,int,float[])"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopy2DRangeTo5"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, int, int, int, float[]> OnCopy2DRangeTo5 { get; set; } = null;

        void Copy2DRangeTo5EventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnCopy2DRangeTo5 != null) ? OnCopy2DRangeTo5 : Copy2DRangeTo;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<int>(1), data.EventData.GetAt<int>(2), data.EventData.GetAt<float[]>(3));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeTo(int,int,int,int,float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        [System.Obsolete()]
        public virtual void Copy2DRangeTo(int arg0, int arg1, int arg2, int arg3, float[] arg4)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeTo(int,int,int,int,int[])"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopy2DRangeTo5_2"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, int, int, int, int[]> OnCopy2DRangeTo5_2 { get; set; } = null;

        void Copy2DRangeTo5_2EventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnCopy2DRangeTo5_2 != null) ? OnCopy2DRangeTo5_2 : Copy2DRangeTo;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<int>(1), data.EventData.GetAt<int>(2), data.EventData.GetAt<int[]>(3));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeTo(int,int,int,int,int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        [System.Obsolete()]
        public virtual void Copy2DRangeTo(int arg0, int arg1, int arg2, int arg3, int[] arg4)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeTo(int,int,int,int,java.lang.Object)"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopy2DRangeTo5_3"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, int, int, int, object> OnCopy2DRangeTo5_3 { get; set; } = null;

        void Copy2DRangeTo5_3EventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnCopy2DRangeTo5_3 != null) ? OnCopy2DRangeTo5_3 : Copy2DRangeTo;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<int>(1), data.EventData.GetAt<int>(2), data.EventData.GetAt<object>(3));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeTo(int,int,int,int,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="object"/></param>
        [System.Obsolete()]
        public virtual void Copy2DRangeTo(int arg0, int arg1, int arg2, int arg3, object arg4)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeTo(int,int,int,int,short[])"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopy2DRangeTo5_4"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, int, int, int, short[]> OnCopy2DRangeTo5_4 { get; set; } = null;

        void Copy2DRangeTo5_4EventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnCopy2DRangeTo5_4 != null) ? OnCopy2DRangeTo5_4 : Copy2DRangeTo;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<int>(1), data.EventData.GetAt<int>(2), data.EventData.GetAt<short[]>(3));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeTo(int,int,int,int,short[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="short"/></param>
        [System.Obsolete()]
        public virtual void Copy2DRangeTo(int arg0, int arg1, int arg2, int arg3, short[] arg4)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy3DRangeFrom(int,int,int,int,int,int,android.renderscript.Allocation,int,int,int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopy3DRangeFrom"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, int, int, int, int, int, Android.Renderscript.Allocation, int, int, int> OnCopy3DRangeFrom { get; set; } = null;

        void Copy3DRangeFromEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnCopy3DRangeFrom != null) ? OnCopy3DRangeFrom : Copy3DRangeFrom;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<int>(1), data.EventData.GetAt<int>(2), data.EventData.GetAt<int>(3), data.EventData.GetAt<int>(4), data.EventData.GetAt<Android.Renderscript.Allocation>(5), data.EventData.GetAt<int>(6), data.EventData.GetAt<int>(7), data.EventData.GetAt<int>(8));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy3DRangeFrom(int,int,int,int,int,int,android.renderscript.Allocation,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="Android.Renderscript.Allocation"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        /// <param name="arg8"><see cref="int"/></param>
        /// <param name="arg9"><see cref="int"/></param>
        [System.Obsolete()]
        public virtual void Copy3DRangeFrom(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, Android.Renderscript.Allocation arg6, int arg7, int arg8, int arg9)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy3DRangeFrom(int,int,int,int,int,int,java.lang.Object)"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopy3DRangeFrom7"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, int, int, int, int, int, object> OnCopy3DRangeFrom7 { get; set; } = null;

        void Copy3DRangeFrom7EventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnCopy3DRangeFrom7 != null) ? OnCopy3DRangeFrom7 : Copy3DRangeFrom;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<int>(1), data.EventData.GetAt<int>(2), data.EventData.GetAt<int>(3), data.EventData.GetAt<int>(4), data.EventData.GetAt<object>(5));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy3DRangeFrom(int,int,int,int,int,int,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="object"/></param>
        [System.Obsolete()]
        public virtual void Copy3DRangeFrom(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, object arg6)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy3DRangeTo(int,int,int,int,int,int,java.lang.Object)"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopy3DRangeTo"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, int, int, int, int, int, object> OnCopy3DRangeTo { get; set; } = null;

        void Copy3DRangeToEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnCopy3DRangeTo != null) ? OnCopy3DRangeTo : Copy3DRangeTo;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<int>(1), data.EventData.GetAt<int>(2), data.EventData.GetAt<int>(3), data.EventData.GetAt<int>(4), data.EventData.GetAt<object>(5));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy3DRangeTo(int,int,int,int,int,int,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="object"/></param>
        [System.Obsolete()]
        public virtual void Copy3DRangeTo(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, object arg6)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFrom(android.graphics.Bitmap)"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopyFrom"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<Android.Graphics.Bitmap> OnCopyFrom { get; set; } = null;

        void CopyFromEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Graphics.Bitmap>> data)
        {
            var methodToExecute = (OnCopyFrom != null) ? OnCopyFrom : CopyFrom;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFrom(android.graphics.Bitmap)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Bitmap"/></param>
        [System.Obsolete()]
        public virtual void CopyFrom(Android.Graphics.Bitmap arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFrom(android.renderscript.Allocation)"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopyFrom1"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<Android.Renderscript.Allocation> OnCopyFrom1 { get; set; } = null;

        void CopyFrom1EventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Renderscript.Allocation>> data)
        {
            var methodToExecute = (OnCopyFrom1 != null) ? OnCopyFrom1 : CopyFrom;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFrom(android.renderscript.Allocation)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.Allocation"/></param>
        [System.Obsolete()]
        public virtual void CopyFrom(Android.Renderscript.Allocation arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFrom(android.renderscript.BaseObj[])"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopyFrom1_2"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<Android.Renderscript.BaseObj[]> OnCopyFrom1_2 { get; set; } = null;

        void CopyFrom1_2EventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Renderscript.BaseObj[]>> data)
        {
            var methodToExecute = (OnCopyFrom1_2 != null) ? OnCopyFrom1_2 : CopyFrom;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFrom(android.renderscript.BaseObj[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.BaseObj"/></param>
        [System.Obsolete()]
        public virtual void CopyFrom(Android.Renderscript.BaseObj[] arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFrom(byte[])"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopyFrom1_3"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<byte[]> OnCopyFrom1_3 { get; set; } = null;

        void CopyFrom1_3EventHandler(object sender, CLRListenerEventArgs<CLREventData<byte[]>> data)
        {
            var methodToExecute = (OnCopyFrom1_3 != null) ? OnCopyFrom1_3 : CopyFrom;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFrom(byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        [System.Obsolete()]
        public virtual void CopyFrom(byte[] arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFrom(float[])"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopyFrom1_4"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<float[]> OnCopyFrom1_4 { get; set; } = null;

        void CopyFrom1_4EventHandler(object sender, CLRListenerEventArgs<CLREventData<float[]>> data)
        {
            var methodToExecute = (OnCopyFrom1_4 != null) ? OnCopyFrom1_4 : CopyFrom;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFrom(float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        [System.Obsolete()]
        public virtual void CopyFrom(float[] arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFrom(int[])"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopyFrom1_5"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int[]> OnCopyFrom1_5 { get; set; } = null;

        void CopyFrom1_5EventHandler(object sender, CLRListenerEventArgs<CLREventData<int[]>> data)
        {
            var methodToExecute = (OnCopyFrom1_5 != null) ? OnCopyFrom1_5 : CopyFrom;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFrom(int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [System.Obsolete()]
        public virtual void CopyFrom(int[] arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFrom(java.lang.Object)"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopyFrom1_6"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<object> OnCopyFrom1_6 { get; set; } = null;

        void CopyFrom1_6EventHandler(object sender, CLRListenerEventArgs<CLREventData<object>> data)
        {
            var methodToExecute = (OnCopyFrom1_6 != null) ? OnCopyFrom1_6 : CopyFrom;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFrom(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        [System.Obsolete()]
        public virtual void CopyFrom(object arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFrom(short[])"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopyFrom1_7"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<short[]> OnCopyFrom1_7 { get; set; } = null;

        void CopyFrom1_7EventHandler(object sender, CLRListenerEventArgs<CLREventData<short[]>> data)
        {
            var methodToExecute = (OnCopyFrom1_7 != null) ? OnCopyFrom1_7 : CopyFrom;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFrom(short[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="short"/></param>
        [System.Obsolete()]
        public virtual void CopyFrom(short[] arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFromUnchecked(byte[])"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopyFromUnchecked"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<byte[]> OnCopyFromUnchecked { get; set; } = null;

        void CopyFromUncheckedEventHandler(object sender, CLRListenerEventArgs<CLREventData<byte[]>> data)
        {
            var methodToExecute = (OnCopyFromUnchecked != null) ? OnCopyFromUnchecked : CopyFromUnchecked;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFromUnchecked(byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        [System.Obsolete()]
        public virtual void CopyFromUnchecked(byte[] arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFromUnchecked(float[])"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopyFromUnchecked1"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<float[]> OnCopyFromUnchecked1 { get; set; } = null;

        void CopyFromUnchecked1EventHandler(object sender, CLRListenerEventArgs<CLREventData<float[]>> data)
        {
            var methodToExecute = (OnCopyFromUnchecked1 != null) ? OnCopyFromUnchecked1 : CopyFromUnchecked;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFromUnchecked(float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        [System.Obsolete()]
        public virtual void CopyFromUnchecked(float[] arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFromUnchecked(int[])"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopyFromUnchecked1_2"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int[]> OnCopyFromUnchecked1_2 { get; set; } = null;

        void CopyFromUnchecked1_2EventHandler(object sender, CLRListenerEventArgs<CLREventData<int[]>> data)
        {
            var methodToExecute = (OnCopyFromUnchecked1_2 != null) ? OnCopyFromUnchecked1_2 : CopyFromUnchecked;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFromUnchecked(int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [System.Obsolete()]
        public virtual void CopyFromUnchecked(int[] arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFromUnchecked(java.lang.Object)"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopyFromUnchecked1_3"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<object> OnCopyFromUnchecked1_3 { get; set; } = null;

        void CopyFromUnchecked1_3EventHandler(object sender, CLRListenerEventArgs<CLREventData<object>> data)
        {
            var methodToExecute = (OnCopyFromUnchecked1_3 != null) ? OnCopyFromUnchecked1_3 : CopyFromUnchecked;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFromUnchecked(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        [System.Obsolete()]
        public virtual void CopyFromUnchecked(object arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFromUnchecked(short[])"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopyFromUnchecked1_4"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<short[]> OnCopyFromUnchecked1_4 { get; set; } = null;

        void CopyFromUnchecked1_4EventHandler(object sender, CLRListenerEventArgs<CLREventData<short[]>> data)
        {
            var methodToExecute = (OnCopyFromUnchecked1_4 != null) ? OnCopyFromUnchecked1_4 : CopyFromUnchecked;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFromUnchecked(short[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="short"/></param>
        [System.Obsolete()]
        public virtual void CopyFromUnchecked(short[] arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyTo(android.graphics.Bitmap)"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopyTo"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<Android.Graphics.Bitmap> OnCopyTo { get; set; } = null;

        void CopyToEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Graphics.Bitmap>> data)
        {
            var methodToExecute = (OnCopyTo != null) ? OnCopyTo : CopyTo;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyTo(android.graphics.Bitmap)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Bitmap"/></param>
        [System.Obsolete()]
        public virtual void CopyTo(Android.Graphics.Bitmap arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyTo(byte[])"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopyTo1"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<byte[]> OnCopyTo1 { get; set; } = null;

        void CopyTo1EventHandler(object sender, CLRListenerEventArgs<CLREventData<byte[]>> data)
        {
            var methodToExecute = (OnCopyTo1 != null) ? OnCopyTo1 : CopyTo;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyTo(byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        [System.Obsolete()]
        public virtual void CopyTo(byte[] arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyTo(float[])"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopyTo1_2"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<float[]> OnCopyTo1_2 { get; set; } = null;

        void CopyTo1_2EventHandler(object sender, CLRListenerEventArgs<CLREventData<float[]>> data)
        {
            var methodToExecute = (OnCopyTo1_2 != null) ? OnCopyTo1_2 : CopyTo;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyTo(float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        [System.Obsolete()]
        public virtual void CopyTo(float[] arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyTo(int[])"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopyTo1_3"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int[]> OnCopyTo1_3 { get; set; } = null;

        void CopyTo1_3EventHandler(object sender, CLRListenerEventArgs<CLREventData<int[]>> data)
        {
            var methodToExecute = (OnCopyTo1_3 != null) ? OnCopyTo1_3 : CopyTo;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyTo(int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [System.Obsolete()]
        public virtual void CopyTo(int[] arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyTo(java.lang.Object)"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopyTo1_4"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<object> OnCopyTo1_4 { get; set; } = null;

        void CopyTo1_4EventHandler(object sender, CLRListenerEventArgs<CLREventData<object>> data)
        {
            var methodToExecute = (OnCopyTo1_4 != null) ? OnCopyTo1_4 : CopyTo;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyTo(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        [System.Obsolete()]
        public virtual void CopyTo(object arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyTo(short[])"/>
        /// </summary>
        /// <remarks>If <see cref="OnCopyTo1_5"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<short[]> OnCopyTo1_5 { get; set; } = null;

        void CopyTo1_5EventHandler(object sender, CLRListenerEventArgs<CLREventData<short[]>> data)
        {
            var methodToExecute = (OnCopyTo1_5 != null) ? OnCopyTo1_5 : CopyTo;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyTo(short[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="short"/></param>
        [System.Obsolete()]
        public virtual void CopyTo(short[] arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#generateMipmaps()"/>
        /// </summary>
        /// <remarks>If <see cref="OnGenerateMipmaps"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action OnGenerateMipmaps { get; set; } = null;

        void GenerateMipmapsEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnGenerateMipmaps != null) ? OnGenerateMipmaps : GenerateMipmaps;
            methodToExecute.Invoke();
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#generateMipmaps()"/>
        /// </summary>
        [System.Obsolete()]
        public virtual void GenerateMipmaps()
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#ioReceive()"/>
        /// </summary>
        /// <remarks>If <see cref="OnIoReceive"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action OnIoReceive { get; set; } = null;

        void IoReceiveEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnIoReceive != null) ? OnIoReceive : IoReceive;
            methodToExecute.Invoke();
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#ioReceive()"/>
        /// </summary>
        [System.Obsolete()]
        public virtual void IoReceive()
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#ioSend()"/>
        /// </summary>
        /// <remarks>If <see cref="OnIoSend"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action OnIoSend { get; set; } = null;

        void IoSendEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnIoSend != null) ? OnIoSend : IoSend;
            methodToExecute.Invoke();
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#ioSend()"/>
        /// </summary>
        [System.Obsolete()]
        public virtual void IoSend()
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#setAutoPadding(boolean)"/>
        /// </summary>
        /// <remarks>If <see cref="OnSetAutoPadding"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<bool> OnSetAutoPadding { get; set; } = null;

        void SetAutoPaddingEventHandler(object sender, CLRListenerEventArgs<CLREventData<bool>> data)
        {
            var methodToExecute = (OnSetAutoPadding != null) ? OnSetAutoPadding : SetAutoPadding;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#setAutoPadding(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        [System.Obsolete()]
        public virtual void SetAutoPadding(bool arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#setFromFieldPacker(int,android.renderscript.FieldPacker)"/>
        /// </summary>
        /// <remarks>If <see cref="OnSetFromFieldPacker"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, Android.Renderscript.FieldPacker> OnSetFromFieldPacker { get; set; } = null;

        void SetFromFieldPackerEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnSetFromFieldPacker != null) ? OnSetFromFieldPacker : SetFromFieldPacker;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.Renderscript.FieldPacker>(0));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#setFromFieldPacker(int,android.renderscript.FieldPacker)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Renderscript.FieldPacker"/></param>
        [System.Obsolete()]
        public virtual void SetFromFieldPacker(int arg0, Android.Renderscript.FieldPacker arg1)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#setFromFieldPacker(int,int,android.renderscript.FieldPacker)"/>
        /// </summary>
        /// <remarks>If <see cref="OnSetFromFieldPacker3"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, int, Android.Renderscript.FieldPacker> OnSetFromFieldPacker3 { get; set; } = null;

        void SetFromFieldPacker3EventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnSetFromFieldPacker3 != null) ? OnSetFromFieldPacker3 : SetFromFieldPacker;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<Android.Renderscript.FieldPacker>(1));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#setFromFieldPacker(int,int,android.renderscript.FieldPacker)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Renderscript.FieldPacker"/></param>
        [System.Obsolete()]
        public virtual void SetFromFieldPacker(int arg0, int arg1, Android.Renderscript.FieldPacker arg2)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#setFromFieldPacker(int,int,int,int,android.renderscript.FieldPacker)"/>
        /// </summary>
        /// <remarks>If <see cref="OnSetFromFieldPacker5_2"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, int, int, int, Android.Renderscript.FieldPacker> OnSetFromFieldPacker5_2 { get; set; } = null;

        void SetFromFieldPacker5_2EventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnSetFromFieldPacker5_2 != null) ? OnSetFromFieldPacker5_2 : SetFromFieldPacker;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<int>(1), data.EventData.GetAt<int>(2), data.EventData.GetAt<Android.Renderscript.FieldPacker>(3));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#setFromFieldPacker(int,int,int,int,android.renderscript.FieldPacker)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="Android.Renderscript.FieldPacker"/></param>
        [System.Obsolete()]
        public virtual void SetFromFieldPacker(int arg0, int arg1, int arg2, int arg3, Android.Renderscript.FieldPacker arg4)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#setOnBufferAvailableListener(android.renderscript.Allocation.OnBufferAvailableListener)"/>
        /// </summary>
        /// <remarks>If <see cref="OnSetOnBufferAvailableListener"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<Android.Renderscript.Allocation.OnBufferAvailableListener> OnSetOnBufferAvailableListener { get; set; } = null;

        void SetOnBufferAvailableListenerEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Renderscript.Allocation.OnBufferAvailableListener>> data)
        {
            var methodToExecute = (OnSetOnBufferAvailableListener != null) ? OnSetOnBufferAvailableListener : SetOnBufferAvailableListener;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#setOnBufferAvailableListener(android.renderscript.Allocation.OnBufferAvailableListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.Allocation.OnBufferAvailableListener"/></param>
        [System.Obsolete()]
        public virtual void SetOnBufferAvailableListener(Android.Renderscript.Allocation.OnBufferAvailableListener arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#setSurface(android.view.Surface)"/>
        /// </summary>
        /// <remarks>If <see cref="OnSetSurface"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<Android.View.Surface> OnSetSurface { get; set; } = null;

        void SetSurfaceEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.Surface>> data)
        {
            var methodToExecute = (OnSetSurface != null) ? OnSetSurface : SetSurface;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#setSurface(android.view.Surface)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Surface"/></param>
        [System.Obsolete()]
        public virtual void SetSurface(Android.View.Surface arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#syncAll(int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnSyncAll"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int> OnSyncAll { get; set; } = null;

        void SyncAllEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnSyncAll != null) ? OnSyncAll : SyncAll;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#syncAll(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [System.Obsolete()]
        public virtual void SyncAll(int arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/AllocationAdapter.html#setFace(android.renderscript.Type.CubemapFace)"/>
        /// </summary>
        /// <remarks>If <see cref="OnSetFace"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<Android.Renderscript.Type.CubemapFace> OnSetFace { get; set; } = null;

        void SetFaceEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Renderscript.Type.CubemapFace>> data)
        {
            var methodToExecute = (OnSetFace != null) ? OnSetFace : SetFace;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/AllocationAdapter.html#setFace(android.renderscript.Type.CubemapFace)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.Type.CubemapFace"/></param>
        [System.Obsolete()]
        public virtual void SetFace(Android.Renderscript.Type.CubemapFace arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/AllocationAdapter.html#setLOD(int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnSetLOD"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int> OnSetLOD { get; set; } = null;

        void SetLODEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnSetLOD != null) ? OnSetLOD : SetLOD;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/AllocationAdapter.html#setLOD(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [System.Obsolete()]
        public virtual void SetLOD(int arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/AllocationAdapter.html#setX(int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnSetX"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int> OnSetX { get; set; } = null;

        void SetXEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnSetX != null) ? OnSetX : SetX;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/AllocationAdapter.html#setX(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [System.Obsolete()]
        public virtual void SetX(int arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/AllocationAdapter.html#setY(int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnSetY"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int> OnSetY { get; set; } = null;

        void SetYEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnSetY != null) ? OnSetY : SetY;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/AllocationAdapter.html#setY(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [System.Obsolete()]
        public virtual void SetY(int arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/AllocationAdapter.html#setZ(int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnSetZ"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int> OnSetZ { get; set; } = null;

        void SetZEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnSetZ != null) ? OnSetZ : SetZ;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/AllocationAdapter.html#setZ(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [System.Obsolete()]
        public virtual void SetZ(int arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/renderscript/BaseObj.html#setName(java.lang.String)"/>
        /// </summary>
        /// <remarks>If <see cref="OnSetName"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<Java.Lang.String> OnSetName { get; set; } = null;

        void SetNameEventHandler(object sender, CLRListenerEventArgs<CLREventData<Java.Lang.String>> data)
        {
            var methodToExecute = (OnSetName != null) ? OnSetName : SetName;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/BaseObj.html#setName(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        [System.Obsolete()]
        public virtual void SetName(Java.Lang.String arg0)
        {
            
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region AllocationAdapterDirect
    public partial class AllocationAdapterDirect
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#getByteBuffer()"/> 
        /// </summary>
        [System.Obsolete()]
        public Java.Nio.ByteBuffer ByteBuffer
        {
            get { return IExecute<Java.Nio.ByteBuffer>("getByteBuffer"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#getBytesSize()"/> 
        /// </summary>
        [System.Obsolete()]
        public int BytesSize
        {
            get { return IExecute<int>("getBytesSize"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#getElement()"/> 
        /// </summary>
        [System.Obsolete()]
        public Android.Renderscript.Element Element
        {
            get { return IExecute<Android.Renderscript.Element>("getElement"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/BaseObj.html#getName()"/> <see href="https://developer.android.com/reference/android/renderscript/BaseObj.html#setName(java.lang.String)"/>
        /// </summary>
        [System.Obsolete()]
        public Java.Lang.String Name
        {
            get { return IExecute<Java.Lang.String>("getName"); } set { IExecute("setName", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#getStride()"/> 
        /// </summary>
        [System.Obsolete()]
        public long Stride
        {
            get { return IExecute<long>("getStride"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#getSurface()"/> <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#setSurface(android.view.Surface)"/>
        /// </summary>
        [System.Obsolete()]
        public Android.View.Surface Surface
        {
            get { return IExecute<Android.View.Surface>("getSurface"); } set { IExecute("setSurface", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#getTimeStamp()"/> 
        /// </summary>
        [System.Obsolete()]
        public long TimeStamp
        {
            get { return IExecute<long>("getTimeStamp"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#getType()"/> 
        /// </summary>
        [System.Obsolete()]
        public Android.Renderscript.Type Type
        {
            get { return IExecute<Android.Renderscript.Type>("getType"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#getUsage()"/> 
        /// </summary>
        [System.Obsolete()]
        public int Usage
        {
            get { return IExecute<int>("getUsage"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFrom(int,int,android.renderscript.Allocation,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Renderscript.Allocation"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        [System.Obsolete()]
        public override void Copy1DRangeFrom(int arg0, int arg1, Android.Renderscript.Allocation arg2, int arg3)
        {
            IExecute("copy1DRangeFrom", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFrom(int,int,byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="byte"/></param>
        [System.Obsolete()]
        public override void Copy1DRangeFrom(int arg0, int arg1, byte[] arg2)
        {
            IExecute("copy1DRangeFrom", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFrom(int,int,float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        [System.Obsolete()]
        public override void Copy1DRangeFrom(int arg0, int arg1, float[] arg2)
        {
            IExecute("copy1DRangeFrom", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFrom(int,int,int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        [System.Obsolete()]
        public override void Copy1DRangeFrom(int arg0, int arg1, int[] arg2)
        {
            IExecute("copy1DRangeFrom", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFrom(int,int,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="object"/></param>
        [System.Obsolete()]
        public override void Copy1DRangeFrom(int arg0, int arg1, object arg2)
        {
            IExecute("copy1DRangeFrom", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFrom(int,int,short[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="short"/></param>
        [System.Obsolete()]
        public override void Copy1DRangeFrom(int arg0, int arg1, short[] arg2)
        {
            IExecute("copy1DRangeFrom", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFromUnchecked(int,int,byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="byte"/></param>
        [System.Obsolete()]
        public override void Copy1DRangeFromUnchecked(int arg0, int arg1, byte[] arg2)
        {
            IExecute("copy1DRangeFromUnchecked", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFromUnchecked(int,int,float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        [System.Obsolete()]
        public override void Copy1DRangeFromUnchecked(int arg0, int arg1, float[] arg2)
        {
            IExecute("copy1DRangeFromUnchecked", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFromUnchecked(int,int,int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        [System.Obsolete()]
        public override void Copy1DRangeFromUnchecked(int arg0, int arg1, int[] arg2)
        {
            IExecute("copy1DRangeFromUnchecked", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFromUnchecked(int,int,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="object"/></param>
        [System.Obsolete()]
        public override void Copy1DRangeFromUnchecked(int arg0, int arg1, object arg2)
        {
            IExecute("copy1DRangeFromUnchecked", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeFromUnchecked(int,int,short[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="short"/></param>
        [System.Obsolete()]
        public override void Copy1DRangeFromUnchecked(int arg0, int arg1, short[] arg2)
        {
            IExecute("copy1DRangeFromUnchecked", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeTo(int,int,byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="byte"/></param>
        [System.Obsolete()]
        public override void Copy1DRangeTo(int arg0, int arg1, byte[] arg2)
        {
            IExecute("copy1DRangeTo", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeTo(int,int,float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        [System.Obsolete()]
        public override void Copy1DRangeTo(int arg0, int arg1, float[] arg2)
        {
            IExecute("copy1DRangeTo", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeTo(int,int,int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        [System.Obsolete()]
        public override void Copy1DRangeTo(int arg0, int arg1, int[] arg2)
        {
            IExecute("copy1DRangeTo", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeTo(int,int,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="object"/></param>
        [System.Obsolete()]
        public override void Copy1DRangeTo(int arg0, int arg1, object arg2)
        {
            IExecute("copy1DRangeTo", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeTo(int,int,short[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="short"/></param>
        [System.Obsolete()]
        public override void Copy1DRangeTo(int arg0, int arg1, short[] arg2)
        {
            IExecute("copy1DRangeTo", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeToUnchecked(int,int,byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="byte"/></param>
        [System.Obsolete()]
        public override void Copy1DRangeToUnchecked(int arg0, int arg1, byte[] arg2)
        {
            IExecute("copy1DRangeToUnchecked", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeToUnchecked(int,int,float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        [System.Obsolete()]
        public override void Copy1DRangeToUnchecked(int arg0, int arg1, float[] arg2)
        {
            IExecute("copy1DRangeToUnchecked", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeToUnchecked(int,int,int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        [System.Obsolete()]
        public override void Copy1DRangeToUnchecked(int arg0, int arg1, int[] arg2)
        {
            IExecute("copy1DRangeToUnchecked", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeToUnchecked(int,int,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="object"/></param>
        [System.Obsolete()]
        public override void Copy1DRangeToUnchecked(int arg0, int arg1, object arg2)
        {
            IExecute("copy1DRangeToUnchecked", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy1DRangeToUnchecked(int,int,short[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="short"/></param>
        [System.Obsolete()]
        public override void Copy1DRangeToUnchecked(int arg0, int arg1, short[] arg2)
        {
            IExecute("copy1DRangeToUnchecked", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeFrom(int,int,android.graphics.Bitmap)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.Bitmap"/></param>
        [System.Obsolete()]
        public override void Copy2DRangeFrom(int arg0, int arg1, Android.Graphics.Bitmap arg2)
        {
            IExecute("copy2DRangeFrom", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeFrom(int,int,int,int,android.renderscript.Allocation,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="Android.Renderscript.Allocation"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        [System.Obsolete()]
        public override void Copy2DRangeFrom(int arg0, int arg1, int arg2, int arg3, Android.Renderscript.Allocation arg4, int arg5, int arg6)
        {
            IExecute("copy2DRangeFrom", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeFrom(int,int,int,int,byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="byte"/></param>
        [System.Obsolete()]
        public override void Copy2DRangeFrom(int arg0, int arg1, int arg2, int arg3, byte[] arg4)
        {
            IExecute("copy2DRangeFrom", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeFrom(int,int,int,int,float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        [System.Obsolete()]
        public override void Copy2DRangeFrom(int arg0, int arg1, int arg2, int arg3, float[] arg4)
        {
            IExecute("copy2DRangeFrom", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeFrom(int,int,int,int,int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        [System.Obsolete()]
        public override void Copy2DRangeFrom(int arg0, int arg1, int arg2, int arg3, int[] arg4)
        {
            IExecute("copy2DRangeFrom", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeFrom(int,int,int,int,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="object"/></param>
        [System.Obsolete()]
        public override void Copy2DRangeFrom(int arg0, int arg1, int arg2, int arg3, object arg4)
        {
            IExecute("copy2DRangeFrom", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeFrom(int,int,int,int,short[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="short"/></param>
        [System.Obsolete()]
        public override void Copy2DRangeFrom(int arg0, int arg1, int arg2, int arg3, short[] arg4)
        {
            IExecute("copy2DRangeFrom", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeTo(int,int,int,int,byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="byte"/></param>
        [System.Obsolete()]
        public override void Copy2DRangeTo(int arg0, int arg1, int arg2, int arg3, byte[] arg4)
        {
            IExecute("copy2DRangeTo", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeTo(int,int,int,int,float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        [System.Obsolete()]
        public override void Copy2DRangeTo(int arg0, int arg1, int arg2, int arg3, float[] arg4)
        {
            IExecute("copy2DRangeTo", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeTo(int,int,int,int,int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        [System.Obsolete()]
        public override void Copy2DRangeTo(int arg0, int arg1, int arg2, int arg3, int[] arg4)
        {
            IExecute("copy2DRangeTo", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeTo(int,int,int,int,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="object"/></param>
        [System.Obsolete()]
        public override void Copy2DRangeTo(int arg0, int arg1, int arg2, int arg3, object arg4)
        {
            IExecute("copy2DRangeTo", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy2DRangeTo(int,int,int,int,short[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="short"/></param>
        [System.Obsolete()]
        public override void Copy2DRangeTo(int arg0, int arg1, int arg2, int arg3, short[] arg4)
        {
            IExecute("copy2DRangeTo", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy3DRangeFrom(int,int,int,int,int,int,android.renderscript.Allocation,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="Android.Renderscript.Allocation"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        /// <param name="arg8"><see cref="int"/></param>
        /// <param name="arg9"><see cref="int"/></param>
        [System.Obsolete()]
        public override void Copy3DRangeFrom(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, Android.Renderscript.Allocation arg6, int arg7, int arg8, int arg9)
        {
            IExecute("copy3DRangeFrom", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy3DRangeFrom(int,int,int,int,int,int,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="object"/></param>
        [System.Obsolete()]
        public override void Copy3DRangeFrom(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, object arg6)
        {
            IExecute("copy3DRangeFrom", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copy3DRangeTo(int,int,int,int,int,int,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="object"/></param>
        [System.Obsolete()]
        public override void Copy3DRangeTo(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, object arg6)
        {
            IExecute("copy3DRangeTo", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFrom(android.graphics.Bitmap)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Bitmap"/></param>
        [System.Obsolete()]
        public override void CopyFrom(Android.Graphics.Bitmap arg0)
        {
            IExecute("copyFrom", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFrom(android.renderscript.Allocation)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.Allocation"/></param>
        [System.Obsolete()]
        public override void CopyFrom(Android.Renderscript.Allocation arg0)
        {
            IExecute("copyFrom", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFrom(android.renderscript.BaseObj[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.BaseObj"/></param>
        [System.Obsolete()]
        public override void CopyFrom(Android.Renderscript.BaseObj[] arg0)
        {
            IExecute("copyFrom", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFrom(byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        [System.Obsolete()]
        public override void CopyFrom(byte[] arg0)
        {
            IExecute("copyFrom", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFrom(float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        [System.Obsolete()]
        public override void CopyFrom(float[] arg0)
        {
            IExecute("copyFrom", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFrom(int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [System.Obsolete()]
        public override void CopyFrom(int[] arg0)
        {
            IExecute("copyFrom", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFrom(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        [System.Obsolete()]
        public override void CopyFrom(object arg0)
        {
            IExecute("copyFrom", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFrom(short[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="short"/></param>
        [System.Obsolete()]
        public override void CopyFrom(short[] arg0)
        {
            IExecute("copyFrom", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFromUnchecked(byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        [System.Obsolete()]
        public override void CopyFromUnchecked(byte[] arg0)
        {
            IExecute("copyFromUnchecked", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFromUnchecked(float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        [System.Obsolete()]
        public override void CopyFromUnchecked(float[] arg0)
        {
            IExecute("copyFromUnchecked", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFromUnchecked(int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [System.Obsolete()]
        public override void CopyFromUnchecked(int[] arg0)
        {
            IExecute("copyFromUnchecked", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFromUnchecked(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        [System.Obsolete()]
        public override void CopyFromUnchecked(object arg0)
        {
            IExecute("copyFromUnchecked", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyFromUnchecked(short[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="short"/></param>
        [System.Obsolete()]
        public override void CopyFromUnchecked(short[] arg0)
        {
            IExecute("copyFromUnchecked", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyTo(android.graphics.Bitmap)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Bitmap"/></param>
        [System.Obsolete()]
        public override void CopyTo(Android.Graphics.Bitmap arg0)
        {
            IExecute("copyTo", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyTo(byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        [System.Obsolete()]
        public override void CopyTo(byte[] arg0)
        {
            IExecute("copyTo", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyTo(float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        [System.Obsolete()]
        public override void CopyTo(float[] arg0)
        {
            IExecute("copyTo", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyTo(int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [System.Obsolete()]
        public override void CopyTo(int[] arg0)
        {
            IExecute("copyTo", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyTo(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        [System.Obsolete()]
        public override void CopyTo(object arg0)
        {
            IExecute("copyTo", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#copyTo(short[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="short"/></param>
        [System.Obsolete()]
        public override void CopyTo(short[] arg0)
        {
            IExecute("copyTo", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#generateMipmaps()"/>
        /// </summary>
        [System.Obsolete()]
        public override void GenerateMipmaps()
        {
            IExecute("generateMipmaps");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#ioReceive()"/>
        /// </summary>
        [System.Obsolete()]
        public override void IoReceive()
        {
            IExecute("ioReceive");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#ioSend()"/>
        /// </summary>
        [System.Obsolete()]
        public override void IoSend()
        {
            IExecute("ioSend");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#setAutoPadding(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        [System.Obsolete()]
        public override void SetAutoPadding(bool arg0)
        {
            IExecute("setAutoPadding", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#setFromFieldPacker(int,android.renderscript.FieldPacker)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Renderscript.FieldPacker"/></param>
        [System.Obsolete()]
        public override void SetFromFieldPacker(int arg0, Android.Renderscript.FieldPacker arg1)
        {
            IExecute("setFromFieldPacker", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#setFromFieldPacker(int,int,android.renderscript.FieldPacker)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Renderscript.FieldPacker"/></param>
        [System.Obsolete()]
        public override void SetFromFieldPacker(int arg0, int arg1, Android.Renderscript.FieldPacker arg2)
        {
            IExecute("setFromFieldPacker", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#setFromFieldPacker(int,int,int,int,android.renderscript.FieldPacker)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="Android.Renderscript.FieldPacker"/></param>
        [System.Obsolete()]
        public override void SetFromFieldPacker(int arg0, int arg1, int arg2, int arg3, Android.Renderscript.FieldPacker arg4)
        {
            IExecute("setFromFieldPacker", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#setOnBufferAvailableListener(android.renderscript.Allocation.OnBufferAvailableListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.Allocation.OnBufferAvailableListener"/></param>
        [System.Obsolete()]
        public override void SetOnBufferAvailableListener(Android.Renderscript.Allocation.OnBufferAvailableListener arg0)
        {
            IExecute("setOnBufferAvailableListener", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Allocation.html#syncAll(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [System.Obsolete()]
        public override void SyncAll(int arg0)
        {
            IExecute("syncAll", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/AllocationAdapter.html#setFace(android.renderscript.Type.CubemapFace)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.Type.CubemapFace"/></param>
        [System.Obsolete()]
        public override void SetFace(Android.Renderscript.Type.CubemapFace arg0)
        {
            IExecuteWithSignature("setFace", "(Landroid/renderscript/Type$CubemapFace;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/AllocationAdapter.html#setLOD(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [System.Obsolete()]
        public override void SetLOD(int arg0)
        {
            IExecuteWithSignature("setLOD", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/AllocationAdapter.html#setX(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [System.Obsolete()]
        public override void SetX(int arg0)
        {
            IExecuteWithSignature("setX", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/AllocationAdapter.html#setY(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [System.Obsolete()]
        public override void SetY(int arg0)
        {
            IExecuteWithSignature("setY", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/AllocationAdapter.html#setZ(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [System.Obsolete()]
        public override void SetZ(int arg0)
        {
            IExecuteWithSignature("setZ", "(I)V", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
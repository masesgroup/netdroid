/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Renderscript
{
    #region Sampler declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/renderscript/Sampler.html"/>
    /// </summary>
    [global::System.Obsolete()]
    public partial class Sampler : Android.Renderscript.BaseObj
    {
        const string _bridgeClassName = "android.renderscript.Sampler";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public Sampler() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public Sampler(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region Builder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Sampler.Builder.html"/>
        /// </summary>
        [global::System.Obsolete()]
        public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
        {
            const string _bridgeClassName = "android.renderscript.Sampler$Builder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Builder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Builder(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region Value declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Sampler.Value.html"/>
        /// </summary>
        [global::System.Obsolete()]
        public partial class Value : Java.Lang.Enum<Android.Renderscript.Sampler.Value>
        {
            const string _bridgeClassName = "android.renderscript.Sampler$Value";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Value() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Value(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region Sampler implementation
    public partial class Sampler
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
    
        #endregion
    
        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Sampler.html#CLAMP_LINEAR_MIP_LINEAR(android.renderscript.RenderScript)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <returns><see cref="Android.Renderscript.Sampler"/></returns>
        [global::System.Obsolete()]
        public static Android.Renderscript.Sampler CLAMP_LINEAR_MIP_LINEAR(Android.Renderscript.RenderScript arg0)
        {
            return SExecuteWithSignature<Android.Renderscript.Sampler>(LocalBridgeClazz, "CLAMP_LINEAR_MIP_LINEAR", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Sampler;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Sampler.html#CLAMP_LINEAR(android.renderscript.RenderScript)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <returns><see cref="Android.Renderscript.Sampler"/></returns>
        [global::System.Obsolete()]
        public static Android.Renderscript.Sampler CLAMP_LINEAR(Android.Renderscript.RenderScript arg0)
        {
            return SExecuteWithSignature<Android.Renderscript.Sampler>(LocalBridgeClazz, "CLAMP_LINEAR", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Sampler;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Sampler.html#CLAMP_NEAREST(android.renderscript.RenderScript)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <returns><see cref="Android.Renderscript.Sampler"/></returns>
        [global::System.Obsolete()]
        public static Android.Renderscript.Sampler CLAMP_NEAREST(Android.Renderscript.RenderScript arg0)
        {
            return SExecuteWithSignature<Android.Renderscript.Sampler>(LocalBridgeClazz, "CLAMP_NEAREST", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Sampler;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Sampler.html#MIRRORED_REPEAT_LINEAR_MIP_LINEAR(android.renderscript.RenderScript)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <returns><see cref="Android.Renderscript.Sampler"/></returns>
        [global::System.Obsolete()]
        public static Android.Renderscript.Sampler MIRRORED_REPEAT_LINEAR_MIP_LINEAR(Android.Renderscript.RenderScript arg0)
        {
            return SExecuteWithSignature<Android.Renderscript.Sampler>(LocalBridgeClazz, "MIRRORED_REPEAT_LINEAR_MIP_LINEAR", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Sampler;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Sampler.html#MIRRORED_REPEAT_LINEAR(android.renderscript.RenderScript)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <returns><see cref="Android.Renderscript.Sampler"/></returns>
        [global::System.Obsolete()]
        public static Android.Renderscript.Sampler MIRRORED_REPEAT_LINEAR(Android.Renderscript.RenderScript arg0)
        {
            return SExecuteWithSignature<Android.Renderscript.Sampler>(LocalBridgeClazz, "MIRRORED_REPEAT_LINEAR", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Sampler;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Sampler.html#MIRRORED_REPEAT_NEAREST(android.renderscript.RenderScript)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <returns><see cref="Android.Renderscript.Sampler"/></returns>
        [global::System.Obsolete()]
        public static Android.Renderscript.Sampler MIRRORED_REPEAT_NEAREST(Android.Renderscript.RenderScript arg0)
        {
            return SExecuteWithSignature<Android.Renderscript.Sampler>(LocalBridgeClazz, "MIRRORED_REPEAT_NEAREST", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Sampler;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Sampler.html#WRAP_LINEAR_MIP_LINEAR(android.renderscript.RenderScript)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <returns><see cref="Android.Renderscript.Sampler"/></returns>
        [global::System.Obsolete()]
        public static Android.Renderscript.Sampler WRAP_LINEAR_MIP_LINEAR(Android.Renderscript.RenderScript arg0)
        {
            return SExecuteWithSignature<Android.Renderscript.Sampler>(LocalBridgeClazz, "WRAP_LINEAR_MIP_LINEAR", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Sampler;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Sampler.html#WRAP_LINEAR(android.renderscript.RenderScript)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <returns><see cref="Android.Renderscript.Sampler"/></returns>
        [global::System.Obsolete()]
        public static Android.Renderscript.Sampler WRAP_LINEAR(Android.Renderscript.RenderScript arg0)
        {
            return SExecuteWithSignature<Android.Renderscript.Sampler>(LocalBridgeClazz, "WRAP_LINEAR", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Sampler;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Sampler.html#WRAP_NEAREST(android.renderscript.RenderScript)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
        /// <returns><see cref="Android.Renderscript.Sampler"/></returns>
        [global::System.Obsolete()]
        public static Android.Renderscript.Sampler WRAP_NEAREST(Android.Renderscript.RenderScript arg0)
        {
            return SExecuteWithSignature<Android.Renderscript.Sampler>(LocalBridgeClazz, "WRAP_NEAREST", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Sampler;", arg0);
        }
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Sampler.html#getMagnification()"/>
        /// </summary>
        /// <returns><see cref="Android.Renderscript.Sampler.Value"/></returns>
        [global::System.Obsolete()]
        public Android.Renderscript.Sampler.Value GetMagnification()
        {
            return IExecuteWithSignature<Android.Renderscript.Sampler.Value>("getMagnification", "()Landroid/renderscript/Sampler$Value;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Sampler.html#getMinification()"/>
        /// </summary>
        /// <returns><see cref="Android.Renderscript.Sampler.Value"/></returns>
        [global::System.Obsolete()]
        public Android.Renderscript.Sampler.Value GetMinification()
        {
            return IExecuteWithSignature<Android.Renderscript.Sampler.Value>("getMinification", "()Landroid/renderscript/Sampler$Value;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Sampler.html#getWrapS()"/>
        /// </summary>
        /// <returns><see cref="Android.Renderscript.Sampler.Value"/></returns>
        [global::System.Obsolete()]
        public Android.Renderscript.Sampler.Value GetWrapS()
        {
            return IExecuteWithSignature<Android.Renderscript.Sampler.Value>("getWrapS", "()Landroid/renderscript/Sampler$Value;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Sampler.html#getWrapT()"/>
        /// </summary>
        /// <returns><see cref="Android.Renderscript.Sampler.Value"/></returns>
        [global::System.Obsolete()]
        public Android.Renderscript.Sampler.Value GetWrapT()
        {
            return IExecuteWithSignature<Android.Renderscript.Sampler.Value>("getWrapT", "()Landroid/renderscript/Sampler$Value;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/renderscript/Sampler.html#getAnisotropy()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        [global::System.Obsolete()]
        public float GetAnisotropy()
        {
            return IExecuteWithSignature<float>("getAnisotropy", "()F");
        }
    
        #endregion
    
        #region Nested classes
        #region Builder implementation
        public partial class Builder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/renderscript/Sampler.Builder.html#%3Cinit%3E(android.renderscript.RenderScript)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Renderscript.RenderScript"/></param>
            [global::System.Obsolete()]
            public Builder(Android.Renderscript.RenderScript arg0)
                : base(arg0)
            {
            }
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/renderscript/Sampler.Builder.html#create()"/>
            /// </summary>
            /// <returns><see cref="Android.Renderscript.Sampler"/></returns>
            [global::System.Obsolete()]
            public Android.Renderscript.Sampler Create()
            {
                return IExecuteWithSignature<Android.Renderscript.Sampler>("create", "()Landroid/renderscript/Sampler;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/renderscript/Sampler.Builder.html#setAnisotropy(float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            [global::System.Obsolete()]
            public void SetAnisotropy(float arg0)
            {
                IExecuteWithSignature("setAnisotropy", "(F)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/renderscript/Sampler.Builder.html#setMagnification(android.renderscript.Sampler.Value)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Renderscript.Sampler.Value"/></param>
            [global::System.Obsolete()]
            public void SetMagnification(Android.Renderscript.Sampler.Value arg0)
            {
                IExecuteWithSignature("setMagnification", "(Landroid/renderscript/Sampler$Value;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/renderscript/Sampler.Builder.html#setMinification(android.renderscript.Sampler.Value)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Renderscript.Sampler.Value"/></param>
            [global::System.Obsolete()]
            public void SetMinification(Android.Renderscript.Sampler.Value arg0)
            {
                IExecuteWithSignature("setMinification", "(Landroid/renderscript/Sampler$Value;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/renderscript/Sampler.Builder.html#setWrapS(android.renderscript.Sampler.Value)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Renderscript.Sampler.Value"/></param>
            [global::System.Obsolete()]
            public void SetWrapS(Android.Renderscript.Sampler.Value arg0)
            {
                IExecuteWithSignature("setWrapS", "(Landroid/renderscript/Sampler$Value;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/renderscript/Sampler.Builder.html#setWrapT(android.renderscript.Sampler.Value)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Renderscript.Sampler.Value"/></param>
            [global::System.Obsolete()]
            public void SetWrapT(Android.Renderscript.Sampler.Value arg0)
            {
                IExecuteWithSignature("setWrapT", "(Landroid/renderscript/Sampler$Value;)V", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region Value implementation
        public partial class Value
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/renderscript/Sampler.Value.html#CLAMP"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.Renderscript.Sampler.Value CLAMP { get { if (!_CLAMPReady) { _CLAMPContent = SGetField<Android.Renderscript.Sampler.Value>(LocalBridgeClazz, "CLAMP"); _CLAMPReady = true; } return _CLAMPContent; } }
            private static Android.Renderscript.Sampler.Value _CLAMPContent = default;
            private static bool _CLAMPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/renderscript/Sampler.Value.html#LINEAR"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.Renderscript.Sampler.Value LINEAR { get { if (!_LINEARReady) { _LINEARContent = SGetField<Android.Renderscript.Sampler.Value>(LocalBridgeClazz, "LINEAR"); _LINEARReady = true; } return _LINEARContent; } }
            private static Android.Renderscript.Sampler.Value _LINEARContent = default;
            private static bool _LINEARReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/renderscript/Sampler.Value.html#LINEAR_MIP_LINEAR"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.Renderscript.Sampler.Value LINEAR_MIP_LINEAR { get { if (!_LINEAR_MIP_LINEARReady) { _LINEAR_MIP_LINEARContent = SGetField<Android.Renderscript.Sampler.Value>(LocalBridgeClazz, "LINEAR_MIP_LINEAR"); _LINEAR_MIP_LINEARReady = true; } return _LINEAR_MIP_LINEARContent; } }
            private static Android.Renderscript.Sampler.Value _LINEAR_MIP_LINEARContent = default;
            private static bool _LINEAR_MIP_LINEARReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/renderscript/Sampler.Value.html#LINEAR_MIP_NEAREST"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.Renderscript.Sampler.Value LINEAR_MIP_NEAREST { get { if (!_LINEAR_MIP_NEARESTReady) { _LINEAR_MIP_NEARESTContent = SGetField<Android.Renderscript.Sampler.Value>(LocalBridgeClazz, "LINEAR_MIP_NEAREST"); _LINEAR_MIP_NEARESTReady = true; } return _LINEAR_MIP_NEARESTContent; } }
            private static Android.Renderscript.Sampler.Value _LINEAR_MIP_NEARESTContent = default;
            private static bool _LINEAR_MIP_NEARESTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/renderscript/Sampler.Value.html#MIRRORED_REPEAT"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.Renderscript.Sampler.Value MIRRORED_REPEAT { get { if (!_MIRRORED_REPEATReady) { _MIRRORED_REPEATContent = SGetField<Android.Renderscript.Sampler.Value>(LocalBridgeClazz, "MIRRORED_REPEAT"); _MIRRORED_REPEATReady = true; } return _MIRRORED_REPEATContent; } }
            private static Android.Renderscript.Sampler.Value _MIRRORED_REPEATContent = default;
            private static bool _MIRRORED_REPEATReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/renderscript/Sampler.Value.html#NEAREST"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.Renderscript.Sampler.Value NEAREST { get { if (!_NEARESTReady) { _NEARESTContent = SGetField<Android.Renderscript.Sampler.Value>(LocalBridgeClazz, "NEAREST"); _NEARESTReady = true; } return _NEARESTContent; } }
            private static Android.Renderscript.Sampler.Value _NEARESTContent = default;
            private static bool _NEARESTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/renderscript/Sampler.Value.html#WRAP"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.Renderscript.Sampler.Value WRAP { get { if (!_WRAPReady) { _WRAPContent = SGetField<Android.Renderscript.Sampler.Value>(LocalBridgeClazz, "WRAP"); _WRAPReady = true; } return _WRAPContent; } }
            private static Android.Renderscript.Sampler.Value _WRAPContent = default;
            private static bool _WRAPReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/renderscript/Sampler.Value.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Renderscript.Sampler.Value"/></returns>
            public static Android.Renderscript.Sampler.Value ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Renderscript.Sampler.Value>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/renderscript/Sampler$Value;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/renderscript/Sampler.Value.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.Renderscript.Sampler.Value"/></returns>
            public static Android.Renderscript.Sampler.Value[] Values()
            {
                return SExecuteWithSignatureArray<Android.Renderscript.Sampler.Value>(LocalBridgeClazz, "values", "()[Landroid/renderscript/Sampler$Value;");
            }
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
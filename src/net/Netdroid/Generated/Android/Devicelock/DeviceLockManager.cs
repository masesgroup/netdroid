/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Devicelock
{
    #region DeviceLockManager declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/devicelock/DeviceLockManager.html"/>
    /// </summary>
    public partial class DeviceLockManager : MASES.JCOBridge.C2JBridge.JVMBridgeBase<DeviceLockManager>
    {
        const string _bridgeClassName = "android.devicelock.DeviceLockManager";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public DeviceLockManager() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public DeviceLockManager(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region DeviceLockManager implementation
    public partial class DeviceLockManager
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/devicelock/DeviceLockManager.html#DEVICE_LOCK_ROLE_FINANCING"/>
        /// </summary>
        public static int DEVICE_LOCK_ROLE_FINANCING { get { if (!_DEVICE_LOCK_ROLE_FINANCINGReady) { _DEVICE_LOCK_ROLE_FINANCINGContent = SGetField<int>(LocalBridgeClazz, "DEVICE_LOCK_ROLE_FINANCING"); _DEVICE_LOCK_ROLE_FINANCINGReady = true; } return _DEVICE_LOCK_ROLE_FINANCINGContent; } }
        private static int _DEVICE_LOCK_ROLE_FINANCINGContent = default;
        private static bool _DEVICE_LOCK_ROLE_FINANCINGReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/devicelock/DeviceLockManager.html#getDeviceId(java.util.concurrent.Executor,android.os.OutcomeReceiver)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Os.OutcomeReceiver"/></param>
        public void GetDeviceId(Java.Util.Concurrent.Executor arg0, Android.Os.OutcomeReceiver<Android.Devicelock.DeviceId, Java.Lang.Exception> arg1)
        {
            IExecuteWithSignature("getDeviceId", "(Ljava/util/concurrent/Executor;Landroid/os/OutcomeReceiver;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/devicelock/DeviceLockManager.html#getKioskApps(java.util.concurrent.Executor,android.os.OutcomeReceiver)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Os.OutcomeReceiver"/></param>
        public void GetKioskApps(Java.Util.Concurrent.Executor arg0, Android.Os.OutcomeReceiver<Java.Util.Map<Java.Lang.Integer, Java.Lang.String>, Java.Lang.Exception> arg1)
        {
            IExecuteWithSignature("getKioskApps", "(Ljava/util/concurrent/Executor;Landroid/os/OutcomeReceiver;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/devicelock/DeviceLockManager.html#isDeviceLocked(java.util.concurrent.Executor,android.os.OutcomeReceiver)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Os.OutcomeReceiver"/></param>
        public void IsDeviceLocked(Java.Util.Concurrent.Executor arg0, Android.Os.OutcomeReceiver<Java.Lang.Boolean, Java.Lang.Exception> arg1)
        {
            IExecuteWithSignature("isDeviceLocked", "(Ljava/util/concurrent/Executor;Landroid/os/OutcomeReceiver;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/devicelock/DeviceLockManager.html#lockDevice(java.util.concurrent.Executor,android.os.OutcomeReceiver)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Os.OutcomeReceiver"/></param>
        public void LockDevice(Java.Util.Concurrent.Executor arg0, Android.Os.OutcomeReceiver<Java.Lang.Void, Java.Lang.Exception> arg1)
        {
            IExecuteWithSignature("lockDevice", "(Ljava/util/concurrent/Executor;Landroid/os/OutcomeReceiver;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/devicelock/DeviceLockManager.html#unlockDevice(java.util.concurrent.Executor,android.os.OutcomeReceiver)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Os.OutcomeReceiver"/></param>
        public void UnlockDevice(Java.Util.Concurrent.Executor arg0, Android.Os.OutcomeReceiver<Java.Lang.Void, Java.Lang.Exception> arg1)
        {
            IExecuteWithSignature("unlockDevice", "(Ljava/util/concurrent/Executor;Landroid/os/OutcomeReceiver;)V", arg0, arg1);
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
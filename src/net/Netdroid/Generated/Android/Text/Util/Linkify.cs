/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Text.Util
{
    #region Linkify declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/text/util/Linkify.html"/>
    /// </summary>
    public partial class Linkify : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Linkify>
    {
        const string _bridgeClassName = "android.text.util.Linkify";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public Linkify() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public Linkify(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region MatchFilter declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/util/Linkify.MatchFilter.html"/>
        /// </summary>
        public partial class MatchFilter : MASES.JCOBridge.C2JBridge.JVMBridgeBase<MatchFilter>
        {
            const string _bridgeClassName = "android.text.util.Linkify$MatchFilter";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("MatchFilter class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public MatchFilter() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("MatchFilter class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public MatchFilter(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region TransformFilter declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/util/Linkify.TransformFilter.html"/>
        /// </summary>
        public partial class TransformFilter : MASES.JCOBridge.C2JBridge.JVMBridgeBase<TransformFilter>
        {
            const string _bridgeClassName = "android.text.util.Linkify$TransformFilter";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("TransformFilter class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public TransformFilter() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("TransformFilter class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public TransformFilter(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region Linkify implementation
    public partial class Linkify
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/util/Linkify.html#sPhoneNumberMatchFilter"/>
        /// </summary>
        public static Android.Text.Util.Linkify.MatchFilter sPhoneNumberMatchFilter { get { if (!_sPhoneNumberMatchFilterReady) { _sPhoneNumberMatchFilterContent = SGetField<Android.Text.Util.Linkify.MatchFilter>(LocalBridgeClazz, "sPhoneNumberMatchFilter"); _sPhoneNumberMatchFilterReady = true; } return _sPhoneNumberMatchFilterContent; } }
        private static Android.Text.Util.Linkify.MatchFilter _sPhoneNumberMatchFilterContent = default;
        private static bool _sPhoneNumberMatchFilterReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/util/Linkify.html#sUrlMatchFilter"/>
        /// </summary>
        public static Android.Text.Util.Linkify.MatchFilter sUrlMatchFilter { get { if (!_sUrlMatchFilterReady) { _sUrlMatchFilterContent = SGetField<Android.Text.Util.Linkify.MatchFilter>(LocalBridgeClazz, "sUrlMatchFilter"); _sUrlMatchFilterReady = true; } return _sUrlMatchFilterContent; } }
        private static Android.Text.Util.Linkify.MatchFilter _sUrlMatchFilterContent = default;
        private static bool _sUrlMatchFilterReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/util/Linkify.html#sPhoneNumberTransformFilter"/>
        /// </summary>
        public static Android.Text.Util.Linkify.TransformFilter sPhoneNumberTransformFilter { get { if (!_sPhoneNumberTransformFilterReady) { _sPhoneNumberTransformFilterContent = SGetField<Android.Text.Util.Linkify.TransformFilter>(LocalBridgeClazz, "sPhoneNumberTransformFilter"); _sPhoneNumberTransformFilterReady = true; } return _sPhoneNumberTransformFilterContent; } }
        private static Android.Text.Util.Linkify.TransformFilter _sPhoneNumberTransformFilterContent = default;
        private static bool _sPhoneNumberTransformFilterReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/util/Linkify.html#ALL"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int ALL { get { if (!_ALLReady) { _ALLContent = SGetField<int>(LocalBridgeClazz, "ALL"); _ALLReady = true; } return _ALLContent; } }
        private static int _ALLContent = default;
        private static bool _ALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/util/Linkify.html#EMAIL_ADDRESSES"/>
        /// </summary>
        public static int EMAIL_ADDRESSES { get { if (!_EMAIL_ADDRESSESReady) { _EMAIL_ADDRESSESContent = SGetField<int>(LocalBridgeClazz, "EMAIL_ADDRESSES"); _EMAIL_ADDRESSESReady = true; } return _EMAIL_ADDRESSESContent; } }
        private static int _EMAIL_ADDRESSESContent = default;
        private static bool _EMAIL_ADDRESSESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/util/Linkify.html#MAP_ADDRESSES"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int MAP_ADDRESSES { get { if (!_MAP_ADDRESSESReady) { _MAP_ADDRESSESContent = SGetField<int>(LocalBridgeClazz, "MAP_ADDRESSES"); _MAP_ADDRESSESReady = true; } return _MAP_ADDRESSESContent; } }
        private static int _MAP_ADDRESSESContent = default;
        private static bool _MAP_ADDRESSESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/util/Linkify.html#PHONE_NUMBERS"/>
        /// </summary>
        public static int PHONE_NUMBERS { get { if (!_PHONE_NUMBERSReady) { _PHONE_NUMBERSContent = SGetField<int>(LocalBridgeClazz, "PHONE_NUMBERS"); _PHONE_NUMBERSReady = true; } return _PHONE_NUMBERSContent; } }
        private static int _PHONE_NUMBERSContent = default;
        private static bool _PHONE_NUMBERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/util/Linkify.html#WEB_URLS"/>
        /// </summary>
        public static int WEB_URLS { get { if (!_WEB_URLSReady) { _WEB_URLSContent = SGetField<int>(LocalBridgeClazz, "WEB_URLS"); _WEB_URLSReady = true; } return _WEB_URLSContent; } }
        private static int _WEB_URLSContent = default;
        private static bool _WEB_URLSReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/util/Linkify.html#addLinks(android.text.Spannable,int,java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Text.Spannable"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Util.Function.Function"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool AddLinks(Android.Text.Spannable arg0, int arg1, Java.Util.Function.Function<Java.Lang.String, Android.Text.Style.URLSpan> arg2)
        {
            return SExecute<bool>(LocalBridgeClazz, "addLinks", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/util/Linkify.html#addLinks(android.text.Spannable,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Text.Spannable"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool AddLinks(Android.Text.Spannable arg0, int arg1)
        {
            return SExecute<bool>(LocalBridgeClazz, "addLinks", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/util/Linkify.html#addLinks(android.text.Spannable,java.util.regex.Pattern,java.lang.String,android.text.util.Linkify.MatchFilter,android.text.util.Linkify.TransformFilter)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Text.Spannable"/></param>
        /// <param name="arg1"><see cref="Java.Util.Regex.Pattern"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Android.Text.Util.Linkify.MatchFilter"/></param>
        /// <param name="arg4"><see cref="Android.Text.Util.Linkify.TransformFilter"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool AddLinks(Android.Text.Spannable arg0, Java.Util.Regex.Pattern arg1, Java.Lang.String arg2, Android.Text.Util.Linkify.MatchFilter arg3, Android.Text.Util.Linkify.TransformFilter arg4)
        {
            return SExecute<bool>(LocalBridgeClazz, "addLinks", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/util/Linkify.html#addLinks(android.text.Spannable,java.util.regex.Pattern,java.lang.String,java.lang.String[],android.text.util.Linkify.MatchFilter,android.text.util.Linkify.TransformFilter,java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Text.Spannable"/></param>
        /// <param name="arg1"><see cref="Java.Util.Regex.Pattern"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <param name="arg4"><see cref="Android.Text.Util.Linkify.MatchFilter"/></param>
        /// <param name="arg5"><see cref="Android.Text.Util.Linkify.TransformFilter"/></param>
        /// <param name="arg6"><see cref="Java.Util.Function.Function"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool AddLinks(Android.Text.Spannable arg0, Java.Util.Regex.Pattern arg1, Java.Lang.String arg2, Java.Lang.String[] arg3, Android.Text.Util.Linkify.MatchFilter arg4, Android.Text.Util.Linkify.TransformFilter arg5, Java.Util.Function.Function<Java.Lang.String, Android.Text.Style.URLSpan> arg6)
        {
            return SExecute<bool>(LocalBridgeClazz, "addLinks", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/util/Linkify.html#addLinks(android.text.Spannable,java.util.regex.Pattern,java.lang.String,java.lang.String[],android.text.util.Linkify.MatchFilter,android.text.util.Linkify.TransformFilter)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Text.Spannable"/></param>
        /// <param name="arg1"><see cref="Java.Util.Regex.Pattern"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <param name="arg4"><see cref="Android.Text.Util.Linkify.MatchFilter"/></param>
        /// <param name="arg5"><see cref="Android.Text.Util.Linkify.TransformFilter"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool AddLinks(Android.Text.Spannable arg0, Java.Util.Regex.Pattern arg1, Java.Lang.String arg2, Java.Lang.String[] arg3, Android.Text.Util.Linkify.MatchFilter arg4, Android.Text.Util.Linkify.TransformFilter arg5)
        {
            return SExecute<bool>(LocalBridgeClazz, "addLinks", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/util/Linkify.html#addLinks(android.text.Spannable,java.util.regex.Pattern,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Text.Spannable"/></param>
        /// <param name="arg1"><see cref="Java.Util.Regex.Pattern"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool AddLinks(Android.Text.Spannable arg0, Java.Util.Regex.Pattern arg1, Java.Lang.String arg2)
        {
            return SExecute<bool>(LocalBridgeClazz, "addLinks", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/util/Linkify.html#addLinks(android.widget.TextView,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Widget.TextView"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool AddLinks(Android.Widget.TextView arg0, int arg1)
        {
            return SExecute<bool>(LocalBridgeClazz, "addLinks", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/util/Linkify.html#addLinks(android.widget.TextView,java.util.regex.Pattern,java.lang.String,android.text.util.Linkify.MatchFilter,android.text.util.Linkify.TransformFilter)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Widget.TextView"/></param>
        /// <param name="arg1"><see cref="Java.Util.Regex.Pattern"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Android.Text.Util.Linkify.MatchFilter"/></param>
        /// <param name="arg4"><see cref="Android.Text.Util.Linkify.TransformFilter"/></param>
        public static void AddLinks(Android.Widget.TextView arg0, Java.Util.Regex.Pattern arg1, Java.Lang.String arg2, Android.Text.Util.Linkify.MatchFilter arg3, Android.Text.Util.Linkify.TransformFilter arg4)
        {
            SExecute(LocalBridgeClazz, "addLinks", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/util/Linkify.html#addLinks(android.widget.TextView,java.util.regex.Pattern,java.lang.String,java.lang.String[],android.text.util.Linkify.MatchFilter,android.text.util.Linkify.TransformFilter)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Widget.TextView"/></param>
        /// <param name="arg1"><see cref="Java.Util.Regex.Pattern"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <param name="arg4"><see cref="Android.Text.Util.Linkify.MatchFilter"/></param>
        /// <param name="arg5"><see cref="Android.Text.Util.Linkify.TransformFilter"/></param>
        public static void AddLinks(Android.Widget.TextView arg0, Java.Util.Regex.Pattern arg1, Java.Lang.String arg2, Java.Lang.String[] arg3, Android.Text.Util.Linkify.MatchFilter arg4, Android.Text.Util.Linkify.TransformFilter arg5)
        {
            SExecute(LocalBridgeClazz, "addLinks", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/util/Linkify.html#addLinks(android.widget.TextView,java.util.regex.Pattern,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Widget.TextView"/></param>
        /// <param name="arg1"><see cref="Java.Util.Regex.Pattern"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        public static void AddLinks(Android.Widget.TextView arg0, Java.Util.Regex.Pattern arg1, Java.Lang.String arg2)
        {
            SExecute(LocalBridgeClazz, "addLinks", arg0, arg1, arg2);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes
        #region MatchFilter implementation
        public partial class MatchFilter
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/util/Linkify.MatchFilter.html#acceptMatch(java.lang.CharSequence,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool AcceptMatch(Java.Lang.CharSequence arg0, int arg1, int arg2)
            {
                return IExecute<bool>("acceptMatch", arg0, arg1, arg2);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region TransformFilter implementation
        public partial class TransformFilter
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/util/Linkify.TransformFilter.html#transformUrl(java.util.regex.Matcher,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.Regex.Matcher"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String TransformUrl(Java.Util.Regex.Matcher arg0, Java.Lang.String arg1)
            {
                return IExecute<Java.Lang.String>("transformUrl", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
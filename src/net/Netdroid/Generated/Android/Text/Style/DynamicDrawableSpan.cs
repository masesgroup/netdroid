/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.6.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Text.Style
{
    #region DynamicDrawableSpan
    public partial class DynamicDrawableSpan
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/DynamicDrawableSpan.html#ALIGN_BASELINE"/>
        /// </summary>
        public static int ALIGN_BASELINE { get { if (!_ALIGN_BASELINEReady) { _ALIGN_BASELINEContent = SGetField<int>(LocalBridgeClazz, "ALIGN_BASELINE"); _ALIGN_BASELINEReady = true; } return _ALIGN_BASELINEContent; } }
        private static int _ALIGN_BASELINEContent = default;
        private static bool _ALIGN_BASELINEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/DynamicDrawableSpan.html#ALIGN_BOTTOM"/>
        /// </summary>
        public static int ALIGN_BOTTOM { get { if (!_ALIGN_BOTTOMReady) { _ALIGN_BOTTOMContent = SGetField<int>(LocalBridgeClazz, "ALIGN_BOTTOM"); _ALIGN_BOTTOMReady = true; } return _ALIGN_BOTTOMContent; } }
        private static int _ALIGN_BOTTOMContent = default;
        private static bool _ALIGN_BOTTOMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/DynamicDrawableSpan.html#ALIGN_CENTER"/>
        /// </summary>
        public static int ALIGN_CENTER { get { if (!_ALIGN_CENTERReady) { _ALIGN_CENTERContent = SGetField<int>(LocalBridgeClazz, "ALIGN_CENTER"); _ALIGN_CENTERReady = true; } return _ALIGN_CENTERContent; } }
        private static int _ALIGN_CENTERContent = default;
        private static bool _ALIGN_CENTERReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/DynamicDrawableSpan.html#getDrawable()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        public Android.Graphics.Drawable.Drawable GetDrawable()
        {
            return IExecuteWithSignature<Android.Graphics.Drawable.Drawable>("getDrawable", "()Landroid/graphics/drawable/Drawable;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/DynamicDrawableSpan.html#getVerticalAlignment()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetVerticalAlignment()
        {
            return IExecuteWithSignature<int>("getVerticalAlignment", "()I");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
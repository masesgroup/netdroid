/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Text.Style
{
    #region TtsSpan declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html"/>
    /// </summary>
    public partial class TtsSpan : Android.Text.ParcelableSpan
    {
        const string _bridgeClassName = "android.text.style.TtsSpan";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public TtsSpan() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public TtsSpan(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region Builder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.Builder.html"/>
        /// </summary>
        public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
        {
            const string _bridgeClassName = "android.text.style.TtsSpan$Builder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Builder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Builder(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region Builder<C> declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.Builder.html"/>
        /// </summary>
        /// <typeparam name="C"></typeparam>
        public partial class Builder<C> : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder<C>> where C : Android.Text.Style.TtsSpan.Builder<C>
        {
            const string _bridgeClassName = "android.text.style.TtsSpan$Builder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Builder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Builder(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region CardinalBuilder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.CardinalBuilder.html"/>
        /// </summary>
        public partial class CardinalBuilder : Android.Text.Style.TtsSpan.SemioticClassBuilder<Android.Text.Style.TtsSpan.CardinalBuilder>
        {
            const string _bridgeClassName = "android.text.style.TtsSpan$CardinalBuilder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public CardinalBuilder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public CardinalBuilder(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region DateBuilder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.DateBuilder.html"/>
        /// </summary>
        public partial class DateBuilder : Android.Text.Style.TtsSpan.SemioticClassBuilder<Android.Text.Style.TtsSpan.DateBuilder>
        {
            const string _bridgeClassName = "android.text.style.TtsSpan$DateBuilder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public DateBuilder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public DateBuilder(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region DecimalBuilder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.DecimalBuilder.html"/>
        /// </summary>
        public partial class DecimalBuilder : Android.Text.Style.TtsSpan.SemioticClassBuilder<Android.Text.Style.TtsSpan.DecimalBuilder>
        {
            const string _bridgeClassName = "android.text.style.TtsSpan$DecimalBuilder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public DecimalBuilder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public DecimalBuilder(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region DigitsBuilder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.DigitsBuilder.html"/>
        /// </summary>
        public partial class DigitsBuilder : Android.Text.Style.TtsSpan.SemioticClassBuilder<Android.Text.Style.TtsSpan.DigitsBuilder>
        {
            const string _bridgeClassName = "android.text.style.TtsSpan$DigitsBuilder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public DigitsBuilder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public DigitsBuilder(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region ElectronicBuilder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.ElectronicBuilder.html"/>
        /// </summary>
        public partial class ElectronicBuilder : Android.Text.Style.TtsSpan.SemioticClassBuilder<Android.Text.Style.TtsSpan.ElectronicBuilder>
        {
            const string _bridgeClassName = "android.text.style.TtsSpan$ElectronicBuilder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public ElectronicBuilder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public ElectronicBuilder(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region FractionBuilder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.FractionBuilder.html"/>
        /// </summary>
        public partial class FractionBuilder : Android.Text.Style.TtsSpan.SemioticClassBuilder<Android.Text.Style.TtsSpan.FractionBuilder>
        {
            const string _bridgeClassName = "android.text.style.TtsSpan$FractionBuilder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public FractionBuilder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public FractionBuilder(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region MeasureBuilder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.MeasureBuilder.html"/>
        /// </summary>
        public partial class MeasureBuilder : Android.Text.Style.TtsSpan.SemioticClassBuilder<Android.Text.Style.TtsSpan.MeasureBuilder>
        {
            const string _bridgeClassName = "android.text.style.TtsSpan$MeasureBuilder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public MeasureBuilder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public MeasureBuilder(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region MoneyBuilder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.MoneyBuilder.html"/>
        /// </summary>
        public partial class MoneyBuilder : Android.Text.Style.TtsSpan.SemioticClassBuilder<Android.Text.Style.TtsSpan.MoneyBuilder>
        {
            const string _bridgeClassName = "android.text.style.TtsSpan$MoneyBuilder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public MoneyBuilder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public MoneyBuilder(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region OrdinalBuilder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.OrdinalBuilder.html"/>
        /// </summary>
        public partial class OrdinalBuilder : Android.Text.Style.TtsSpan.SemioticClassBuilder<Android.Text.Style.TtsSpan.OrdinalBuilder>
        {
            const string _bridgeClassName = "android.text.style.TtsSpan$OrdinalBuilder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OrdinalBuilder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public OrdinalBuilder(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region SemioticClassBuilder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.SemioticClassBuilder.html"/>
        /// </summary>
        public partial class SemioticClassBuilder : Android.Text.Style.TtsSpan.Builder
        {
            const string _bridgeClassName = "android.text.style.TtsSpan$SemioticClassBuilder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public SemioticClassBuilder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public SemioticClassBuilder(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region SemioticClassBuilder<C> declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.SemioticClassBuilder.html"/>
        /// </summary>
        /// <typeparam name="C"></typeparam>
        public partial class SemioticClassBuilder<C> : Android.Text.Style.TtsSpan.Builder<C> where C : Android.Text.Style.TtsSpan.SemioticClassBuilder<C>
        {
            const string _bridgeClassName = "android.text.style.TtsSpan$SemioticClassBuilder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public SemioticClassBuilder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public SemioticClassBuilder(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region TelephoneBuilder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.TelephoneBuilder.html"/>
        /// </summary>
        public partial class TelephoneBuilder : Android.Text.Style.TtsSpan.SemioticClassBuilder<Android.Text.Style.TtsSpan.TelephoneBuilder>
        {
            const string _bridgeClassName = "android.text.style.TtsSpan$TelephoneBuilder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public TelephoneBuilder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public TelephoneBuilder(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region TextBuilder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.TextBuilder.html"/>
        /// </summary>
        public partial class TextBuilder : Android.Text.Style.TtsSpan.SemioticClassBuilder<Android.Text.Style.TtsSpan.TextBuilder>
        {
            const string _bridgeClassName = "android.text.style.TtsSpan$TextBuilder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public TextBuilder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public TextBuilder(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region TimeBuilder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.TimeBuilder.html"/>
        /// </summary>
        public partial class TimeBuilder : Android.Text.Style.TtsSpan.SemioticClassBuilder<Android.Text.Style.TtsSpan.TimeBuilder>
        {
            const string _bridgeClassName = "android.text.style.TtsSpan$TimeBuilder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public TimeBuilder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public TimeBuilder(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region VerbatimBuilder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.VerbatimBuilder.html"/>
        /// </summary>
        public partial class VerbatimBuilder : Android.Text.Style.TtsSpan.SemioticClassBuilder<Android.Text.Style.TtsSpan.VerbatimBuilder>
        {
            const string _bridgeClassName = "android.text.style.TtsSpan$VerbatimBuilder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public VerbatimBuilder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public VerbatimBuilder(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region TtsSpan implementation
    public partial class TtsSpan
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#%3Cinit%3E(android.os.Parcel)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        public TtsSpan(Android.Os.Parcel arg0)
            : base(arg0)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#%3Cinit%3E(java.lang.String,android.os.PersistableBundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Os.PersistableBundle"/></param>
        public TtsSpan(Java.Lang.String arg0, Android.Os.PersistableBundle arg1)
            : base(arg0, arg1)
        {
        }
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#MONTH_APRIL"/>
        /// </summary>
        public static int MONTH_APRIL { get { if (!_MONTH_APRILReady) { _MONTH_APRILContent = SGetField<int>(LocalBridgeClazz, "MONTH_APRIL"); _MONTH_APRILReady = true; } return _MONTH_APRILContent; } }
        private static int _MONTH_APRILContent = default;
        private static bool _MONTH_APRILReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#MONTH_AUGUST"/>
        /// </summary>
        public static int MONTH_AUGUST { get { if (!_MONTH_AUGUSTReady) { _MONTH_AUGUSTContent = SGetField<int>(LocalBridgeClazz, "MONTH_AUGUST"); _MONTH_AUGUSTReady = true; } return _MONTH_AUGUSTContent; } }
        private static int _MONTH_AUGUSTContent = default;
        private static bool _MONTH_AUGUSTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#MONTH_DECEMBER"/>
        /// </summary>
        public static int MONTH_DECEMBER { get { if (!_MONTH_DECEMBERReady) { _MONTH_DECEMBERContent = SGetField<int>(LocalBridgeClazz, "MONTH_DECEMBER"); _MONTH_DECEMBERReady = true; } return _MONTH_DECEMBERContent; } }
        private static int _MONTH_DECEMBERContent = default;
        private static bool _MONTH_DECEMBERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#MONTH_FEBRUARY"/>
        /// </summary>
        public static int MONTH_FEBRUARY { get { if (!_MONTH_FEBRUARYReady) { _MONTH_FEBRUARYContent = SGetField<int>(LocalBridgeClazz, "MONTH_FEBRUARY"); _MONTH_FEBRUARYReady = true; } return _MONTH_FEBRUARYContent; } }
        private static int _MONTH_FEBRUARYContent = default;
        private static bool _MONTH_FEBRUARYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#MONTH_JANUARY"/>
        /// </summary>
        public static int MONTH_JANUARY { get { if (!_MONTH_JANUARYReady) { _MONTH_JANUARYContent = SGetField<int>(LocalBridgeClazz, "MONTH_JANUARY"); _MONTH_JANUARYReady = true; } return _MONTH_JANUARYContent; } }
        private static int _MONTH_JANUARYContent = default;
        private static bool _MONTH_JANUARYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#MONTH_JULY"/>
        /// </summary>
        public static int MONTH_JULY { get { if (!_MONTH_JULYReady) { _MONTH_JULYContent = SGetField<int>(LocalBridgeClazz, "MONTH_JULY"); _MONTH_JULYReady = true; } return _MONTH_JULYContent; } }
        private static int _MONTH_JULYContent = default;
        private static bool _MONTH_JULYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#MONTH_JUNE"/>
        /// </summary>
        public static int MONTH_JUNE { get { if (!_MONTH_JUNEReady) { _MONTH_JUNEContent = SGetField<int>(LocalBridgeClazz, "MONTH_JUNE"); _MONTH_JUNEReady = true; } return _MONTH_JUNEContent; } }
        private static int _MONTH_JUNEContent = default;
        private static bool _MONTH_JUNEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#MONTH_MARCH"/>
        /// </summary>
        public static int MONTH_MARCH { get { if (!_MONTH_MARCHReady) { _MONTH_MARCHContent = SGetField<int>(LocalBridgeClazz, "MONTH_MARCH"); _MONTH_MARCHReady = true; } return _MONTH_MARCHContent; } }
        private static int _MONTH_MARCHContent = default;
        private static bool _MONTH_MARCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#MONTH_MAY"/>
        /// </summary>
        public static int MONTH_MAY { get { if (!_MONTH_MAYReady) { _MONTH_MAYContent = SGetField<int>(LocalBridgeClazz, "MONTH_MAY"); _MONTH_MAYReady = true; } return _MONTH_MAYContent; } }
        private static int _MONTH_MAYContent = default;
        private static bool _MONTH_MAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#MONTH_NOVEMBER"/>
        /// </summary>
        public static int MONTH_NOVEMBER { get { if (!_MONTH_NOVEMBERReady) { _MONTH_NOVEMBERContent = SGetField<int>(LocalBridgeClazz, "MONTH_NOVEMBER"); _MONTH_NOVEMBERReady = true; } return _MONTH_NOVEMBERContent; } }
        private static int _MONTH_NOVEMBERContent = default;
        private static bool _MONTH_NOVEMBERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#MONTH_OCTOBER"/>
        /// </summary>
        public static int MONTH_OCTOBER { get { if (!_MONTH_OCTOBERReady) { _MONTH_OCTOBERContent = SGetField<int>(LocalBridgeClazz, "MONTH_OCTOBER"); _MONTH_OCTOBERReady = true; } return _MONTH_OCTOBERContent; } }
        private static int _MONTH_OCTOBERContent = default;
        private static bool _MONTH_OCTOBERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#MONTH_SEPTEMBER"/>
        /// </summary>
        public static int MONTH_SEPTEMBER { get { if (!_MONTH_SEPTEMBERReady) { _MONTH_SEPTEMBERContent = SGetField<int>(LocalBridgeClazz, "MONTH_SEPTEMBER"); _MONTH_SEPTEMBERReady = true; } return _MONTH_SEPTEMBERContent; } }
        private static int _MONTH_SEPTEMBERContent = default;
        private static bool _MONTH_SEPTEMBERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#WEEKDAY_FRIDAY"/>
        /// </summary>
        public static int WEEKDAY_FRIDAY { get { if (!_WEEKDAY_FRIDAYReady) { _WEEKDAY_FRIDAYContent = SGetField<int>(LocalBridgeClazz, "WEEKDAY_FRIDAY"); _WEEKDAY_FRIDAYReady = true; } return _WEEKDAY_FRIDAYContent; } }
        private static int _WEEKDAY_FRIDAYContent = default;
        private static bool _WEEKDAY_FRIDAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#WEEKDAY_MONDAY"/>
        /// </summary>
        public static int WEEKDAY_MONDAY { get { if (!_WEEKDAY_MONDAYReady) { _WEEKDAY_MONDAYContent = SGetField<int>(LocalBridgeClazz, "WEEKDAY_MONDAY"); _WEEKDAY_MONDAYReady = true; } return _WEEKDAY_MONDAYContent; } }
        private static int _WEEKDAY_MONDAYContent = default;
        private static bool _WEEKDAY_MONDAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#WEEKDAY_SATURDAY"/>
        /// </summary>
        public static int WEEKDAY_SATURDAY { get { if (!_WEEKDAY_SATURDAYReady) { _WEEKDAY_SATURDAYContent = SGetField<int>(LocalBridgeClazz, "WEEKDAY_SATURDAY"); _WEEKDAY_SATURDAYReady = true; } return _WEEKDAY_SATURDAYContent; } }
        private static int _WEEKDAY_SATURDAYContent = default;
        private static bool _WEEKDAY_SATURDAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#WEEKDAY_SUNDAY"/>
        /// </summary>
        public static int WEEKDAY_SUNDAY { get { if (!_WEEKDAY_SUNDAYReady) { _WEEKDAY_SUNDAYContent = SGetField<int>(LocalBridgeClazz, "WEEKDAY_SUNDAY"); _WEEKDAY_SUNDAYReady = true; } return _WEEKDAY_SUNDAYContent; } }
        private static int _WEEKDAY_SUNDAYContent = default;
        private static bool _WEEKDAY_SUNDAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#WEEKDAY_THURSDAY"/>
        /// </summary>
        public static int WEEKDAY_THURSDAY { get { if (!_WEEKDAY_THURSDAYReady) { _WEEKDAY_THURSDAYContent = SGetField<int>(LocalBridgeClazz, "WEEKDAY_THURSDAY"); _WEEKDAY_THURSDAYReady = true; } return _WEEKDAY_THURSDAYContent; } }
        private static int _WEEKDAY_THURSDAYContent = default;
        private static bool _WEEKDAY_THURSDAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#WEEKDAY_TUESDAY"/>
        /// </summary>
        public static int WEEKDAY_TUESDAY { get { if (!_WEEKDAY_TUESDAYReady) { _WEEKDAY_TUESDAYContent = SGetField<int>(LocalBridgeClazz, "WEEKDAY_TUESDAY"); _WEEKDAY_TUESDAYReady = true; } return _WEEKDAY_TUESDAYContent; } }
        private static int _WEEKDAY_TUESDAYContent = default;
        private static bool _WEEKDAY_TUESDAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#WEEKDAY_WEDNESDAY"/>
        /// </summary>
        public static int WEEKDAY_WEDNESDAY { get { if (!_WEEKDAY_WEDNESDAYReady) { _WEEKDAY_WEDNESDAYContent = SGetField<int>(LocalBridgeClazz, "WEEKDAY_WEDNESDAY"); _WEEKDAY_WEDNESDAYReady = true; } return _WEEKDAY_WEDNESDAYContent; } }
        private static int _WEEKDAY_WEDNESDAYContent = default;
        private static bool _WEEKDAY_WEDNESDAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#ANIMACY_ANIMATE"/>
        /// </summary>
        public static Java.Lang.String ANIMACY_ANIMATE { get { if (!_ANIMACY_ANIMATEReady) { _ANIMACY_ANIMATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ANIMACY_ANIMATE"); _ANIMACY_ANIMATEReady = true; } return _ANIMACY_ANIMATEContent; } }
        private static Java.Lang.String _ANIMACY_ANIMATEContent = default;
        private static bool _ANIMACY_ANIMATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#ANIMACY_INANIMATE"/>
        /// </summary>
        public static Java.Lang.String ANIMACY_INANIMATE { get { if (!_ANIMACY_INANIMATEReady) { _ANIMACY_INANIMATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ANIMACY_INANIMATE"); _ANIMACY_INANIMATEReady = true; } return _ANIMACY_INANIMATEContent; } }
        private static Java.Lang.String _ANIMACY_INANIMATEContent = default;
        private static bool _ANIMACY_INANIMATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#ARG_ANIMACY"/>
        /// </summary>
        public static Java.Lang.String ARG_ANIMACY { get { if (!_ARG_ANIMACYReady) { _ARG_ANIMACYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ARG_ANIMACY"); _ARG_ANIMACYReady = true; } return _ARG_ANIMACYContent; } }
        private static Java.Lang.String _ARG_ANIMACYContent = default;
        private static bool _ARG_ANIMACYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#ARG_CASE"/>
        /// </summary>
        public static Java.Lang.String ARG_CASE { get { if (!_ARG_CASEReady) { _ARG_CASEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ARG_CASE"); _ARG_CASEReady = true; } return _ARG_CASEContent; } }
        private static Java.Lang.String _ARG_CASEContent = default;
        private static bool _ARG_CASEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#ARG_COUNTRY_CODE"/>
        /// </summary>
        public static Java.Lang.String ARG_COUNTRY_CODE { get { if (!_ARG_COUNTRY_CODEReady) { _ARG_COUNTRY_CODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ARG_COUNTRY_CODE"); _ARG_COUNTRY_CODEReady = true; } return _ARG_COUNTRY_CODEContent; } }
        private static Java.Lang.String _ARG_COUNTRY_CODEContent = default;
        private static bool _ARG_COUNTRY_CODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#ARG_CURRENCY"/>
        /// </summary>
        public static Java.Lang.String ARG_CURRENCY { get { if (!_ARG_CURRENCYReady) { _ARG_CURRENCYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ARG_CURRENCY"); _ARG_CURRENCYReady = true; } return _ARG_CURRENCYContent; } }
        private static Java.Lang.String _ARG_CURRENCYContent = default;
        private static bool _ARG_CURRENCYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#ARG_DAY"/>
        /// </summary>
        public static Java.Lang.String ARG_DAY { get { if (!_ARG_DAYReady) { _ARG_DAYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ARG_DAY"); _ARG_DAYReady = true; } return _ARG_DAYContent; } }
        private static Java.Lang.String _ARG_DAYContent = default;
        private static bool _ARG_DAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#ARG_DENOMINATOR"/>
        /// </summary>
        public static Java.Lang.String ARG_DENOMINATOR { get { if (!_ARG_DENOMINATORReady) { _ARG_DENOMINATORContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ARG_DENOMINATOR"); _ARG_DENOMINATORReady = true; } return _ARG_DENOMINATORContent; } }
        private static Java.Lang.String _ARG_DENOMINATORContent = default;
        private static bool _ARG_DENOMINATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#ARG_DIGITS"/>
        /// </summary>
        public static Java.Lang.String ARG_DIGITS { get { if (!_ARG_DIGITSReady) { _ARG_DIGITSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ARG_DIGITS"); _ARG_DIGITSReady = true; } return _ARG_DIGITSContent; } }
        private static Java.Lang.String _ARG_DIGITSContent = default;
        private static bool _ARG_DIGITSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#ARG_DOMAIN"/>
        /// </summary>
        public static Java.Lang.String ARG_DOMAIN { get { if (!_ARG_DOMAINReady) { _ARG_DOMAINContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ARG_DOMAIN"); _ARG_DOMAINReady = true; } return _ARG_DOMAINContent; } }
        private static Java.Lang.String _ARG_DOMAINContent = default;
        private static bool _ARG_DOMAINReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#ARG_EXTENSION"/>
        /// </summary>
        public static Java.Lang.String ARG_EXTENSION { get { if (!_ARG_EXTENSIONReady) { _ARG_EXTENSIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ARG_EXTENSION"); _ARG_EXTENSIONReady = true; } return _ARG_EXTENSIONContent; } }
        private static Java.Lang.String _ARG_EXTENSIONContent = default;
        private static bool _ARG_EXTENSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#ARG_FRACTIONAL_PART"/>
        /// </summary>
        public static Java.Lang.String ARG_FRACTIONAL_PART { get { if (!_ARG_FRACTIONAL_PARTReady) { _ARG_FRACTIONAL_PARTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ARG_FRACTIONAL_PART"); _ARG_FRACTIONAL_PARTReady = true; } return _ARG_FRACTIONAL_PARTContent; } }
        private static Java.Lang.String _ARG_FRACTIONAL_PARTContent = default;
        private static bool _ARG_FRACTIONAL_PARTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#ARG_FRAGMENT_ID"/>
        /// </summary>
        public static Java.Lang.String ARG_FRAGMENT_ID { get { if (!_ARG_FRAGMENT_IDReady) { _ARG_FRAGMENT_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ARG_FRAGMENT_ID"); _ARG_FRAGMENT_IDReady = true; } return _ARG_FRAGMENT_IDContent; } }
        private static Java.Lang.String _ARG_FRAGMENT_IDContent = default;
        private static bool _ARG_FRAGMENT_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#ARG_GENDER"/>
        /// </summary>
        public static Java.Lang.String ARG_GENDER { get { if (!_ARG_GENDERReady) { _ARG_GENDERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ARG_GENDER"); _ARG_GENDERReady = true; } return _ARG_GENDERContent; } }
        private static Java.Lang.String _ARG_GENDERContent = default;
        private static bool _ARG_GENDERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#ARG_HOURS"/>
        /// </summary>
        public static Java.Lang.String ARG_HOURS { get { if (!_ARG_HOURSReady) { _ARG_HOURSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ARG_HOURS"); _ARG_HOURSReady = true; } return _ARG_HOURSContent; } }
        private static Java.Lang.String _ARG_HOURSContent = default;
        private static bool _ARG_HOURSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#ARG_INTEGER_PART"/>
        /// </summary>
        public static Java.Lang.String ARG_INTEGER_PART { get { if (!_ARG_INTEGER_PARTReady) { _ARG_INTEGER_PARTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ARG_INTEGER_PART"); _ARG_INTEGER_PARTReady = true; } return _ARG_INTEGER_PARTContent; } }
        private static Java.Lang.String _ARG_INTEGER_PARTContent = default;
        private static bool _ARG_INTEGER_PARTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#ARG_MINUTES"/>
        /// </summary>
        public static Java.Lang.String ARG_MINUTES { get { if (!_ARG_MINUTESReady) { _ARG_MINUTESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ARG_MINUTES"); _ARG_MINUTESReady = true; } return _ARG_MINUTESContent; } }
        private static Java.Lang.String _ARG_MINUTESContent = default;
        private static bool _ARG_MINUTESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#ARG_MONTH"/>
        /// </summary>
        public static Java.Lang.String ARG_MONTH { get { if (!_ARG_MONTHReady) { _ARG_MONTHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ARG_MONTH"); _ARG_MONTHReady = true; } return _ARG_MONTHContent; } }
        private static Java.Lang.String _ARG_MONTHContent = default;
        private static bool _ARG_MONTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#ARG_MULTIPLICITY"/>
        /// </summary>
        public static Java.Lang.String ARG_MULTIPLICITY { get { if (!_ARG_MULTIPLICITYReady) { _ARG_MULTIPLICITYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ARG_MULTIPLICITY"); _ARG_MULTIPLICITYReady = true; } return _ARG_MULTIPLICITYContent; } }
        private static Java.Lang.String _ARG_MULTIPLICITYContent = default;
        private static bool _ARG_MULTIPLICITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#ARG_NUMBER"/>
        /// </summary>
        public static Java.Lang.String ARG_NUMBER { get { if (!_ARG_NUMBERReady) { _ARG_NUMBERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ARG_NUMBER"); _ARG_NUMBERReady = true; } return _ARG_NUMBERContent; } }
        private static Java.Lang.String _ARG_NUMBERContent = default;
        private static bool _ARG_NUMBERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#ARG_NUMBER_PARTS"/>
        /// </summary>
        public static Java.Lang.String ARG_NUMBER_PARTS { get { if (!_ARG_NUMBER_PARTSReady) { _ARG_NUMBER_PARTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ARG_NUMBER_PARTS"); _ARG_NUMBER_PARTSReady = true; } return _ARG_NUMBER_PARTSContent; } }
        private static Java.Lang.String _ARG_NUMBER_PARTSContent = default;
        private static bool _ARG_NUMBER_PARTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#ARG_NUMERATOR"/>
        /// </summary>
        public static Java.Lang.String ARG_NUMERATOR { get { if (!_ARG_NUMERATORReady) { _ARG_NUMERATORContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ARG_NUMERATOR"); _ARG_NUMERATORReady = true; } return _ARG_NUMERATORContent; } }
        private static Java.Lang.String _ARG_NUMERATORContent = default;
        private static bool _ARG_NUMERATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#ARG_PASSWORD"/>
        /// </summary>
        public static Java.Lang.String ARG_PASSWORD { get { if (!_ARG_PASSWORDReady) { _ARG_PASSWORDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ARG_PASSWORD"); _ARG_PASSWORDReady = true; } return _ARG_PASSWORDContent; } }
        private static Java.Lang.String _ARG_PASSWORDContent = default;
        private static bool _ARG_PASSWORDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#ARG_PATH"/>
        /// </summary>
        public static Java.Lang.String ARG_PATH { get { if (!_ARG_PATHReady) { _ARG_PATHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ARG_PATH"); _ARG_PATHReady = true; } return _ARG_PATHContent; } }
        private static Java.Lang.String _ARG_PATHContent = default;
        private static bool _ARG_PATHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#ARG_PORT"/>
        /// </summary>
        public static Java.Lang.String ARG_PORT { get { if (!_ARG_PORTReady) { _ARG_PORTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ARG_PORT"); _ARG_PORTReady = true; } return _ARG_PORTContent; } }
        private static Java.Lang.String _ARG_PORTContent = default;
        private static bool _ARG_PORTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#ARG_PROTOCOL"/>
        /// </summary>
        public static Java.Lang.String ARG_PROTOCOL { get { if (!_ARG_PROTOCOLReady) { _ARG_PROTOCOLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ARG_PROTOCOL"); _ARG_PROTOCOLReady = true; } return _ARG_PROTOCOLContent; } }
        private static Java.Lang.String _ARG_PROTOCOLContent = default;
        private static bool _ARG_PROTOCOLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#ARG_QUANTITY"/>
        /// </summary>
        public static Java.Lang.String ARG_QUANTITY { get { if (!_ARG_QUANTITYReady) { _ARG_QUANTITYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ARG_QUANTITY"); _ARG_QUANTITYReady = true; } return _ARG_QUANTITYContent; } }
        private static Java.Lang.String _ARG_QUANTITYContent = default;
        private static bool _ARG_QUANTITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#ARG_QUERY_STRING"/>
        /// </summary>
        public static Java.Lang.String ARG_QUERY_STRING { get { if (!_ARG_QUERY_STRINGReady) { _ARG_QUERY_STRINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ARG_QUERY_STRING"); _ARG_QUERY_STRINGReady = true; } return _ARG_QUERY_STRINGContent; } }
        private static Java.Lang.String _ARG_QUERY_STRINGContent = default;
        private static bool _ARG_QUERY_STRINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#ARG_TEXT"/>
        /// </summary>
        public static Java.Lang.String ARG_TEXT { get { if (!_ARG_TEXTReady) { _ARG_TEXTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ARG_TEXT"); _ARG_TEXTReady = true; } return _ARG_TEXTContent; } }
        private static Java.Lang.String _ARG_TEXTContent = default;
        private static bool _ARG_TEXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#ARG_UNIT"/>
        /// </summary>
        public static Java.Lang.String ARG_UNIT { get { if (!_ARG_UNITReady) { _ARG_UNITContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ARG_UNIT"); _ARG_UNITReady = true; } return _ARG_UNITContent; } }
        private static Java.Lang.String _ARG_UNITContent = default;
        private static bool _ARG_UNITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#ARG_USERNAME"/>
        /// </summary>
        public static Java.Lang.String ARG_USERNAME { get { if (!_ARG_USERNAMEReady) { _ARG_USERNAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ARG_USERNAME"); _ARG_USERNAMEReady = true; } return _ARG_USERNAMEContent; } }
        private static Java.Lang.String _ARG_USERNAMEContent = default;
        private static bool _ARG_USERNAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#ARG_VERBATIM"/>
        /// </summary>
        public static Java.Lang.String ARG_VERBATIM { get { if (!_ARG_VERBATIMReady) { _ARG_VERBATIMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ARG_VERBATIM"); _ARG_VERBATIMReady = true; } return _ARG_VERBATIMContent; } }
        private static Java.Lang.String _ARG_VERBATIMContent = default;
        private static bool _ARG_VERBATIMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#ARG_WEEKDAY"/>
        /// </summary>
        public static Java.Lang.String ARG_WEEKDAY { get { if (!_ARG_WEEKDAYReady) { _ARG_WEEKDAYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ARG_WEEKDAY"); _ARG_WEEKDAYReady = true; } return _ARG_WEEKDAYContent; } }
        private static Java.Lang.String _ARG_WEEKDAYContent = default;
        private static bool _ARG_WEEKDAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#ARG_YEAR"/>
        /// </summary>
        public static Java.Lang.String ARG_YEAR { get { if (!_ARG_YEARReady) { _ARG_YEARContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ARG_YEAR"); _ARG_YEARReady = true; } return _ARG_YEARContent; } }
        private static Java.Lang.String _ARG_YEARContent = default;
        private static bool _ARG_YEARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#CASE_ABLATIVE"/>
        /// </summary>
        public static Java.Lang.String CASE_ABLATIVE { get { if (!_CASE_ABLATIVEReady) { _CASE_ABLATIVEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CASE_ABLATIVE"); _CASE_ABLATIVEReady = true; } return _CASE_ABLATIVEContent; } }
        private static Java.Lang.String _CASE_ABLATIVEContent = default;
        private static bool _CASE_ABLATIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#CASE_ACCUSATIVE"/>
        /// </summary>
        public static Java.Lang.String CASE_ACCUSATIVE { get { if (!_CASE_ACCUSATIVEReady) { _CASE_ACCUSATIVEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CASE_ACCUSATIVE"); _CASE_ACCUSATIVEReady = true; } return _CASE_ACCUSATIVEContent; } }
        private static Java.Lang.String _CASE_ACCUSATIVEContent = default;
        private static bool _CASE_ACCUSATIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#CASE_DATIVE"/>
        /// </summary>
        public static Java.Lang.String CASE_DATIVE { get { if (!_CASE_DATIVEReady) { _CASE_DATIVEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CASE_DATIVE"); _CASE_DATIVEReady = true; } return _CASE_DATIVEContent; } }
        private static Java.Lang.String _CASE_DATIVEContent = default;
        private static bool _CASE_DATIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#CASE_GENITIVE"/>
        /// </summary>
        public static Java.Lang.String CASE_GENITIVE { get { if (!_CASE_GENITIVEReady) { _CASE_GENITIVEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CASE_GENITIVE"); _CASE_GENITIVEReady = true; } return _CASE_GENITIVEContent; } }
        private static Java.Lang.String _CASE_GENITIVEContent = default;
        private static bool _CASE_GENITIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#CASE_INSTRUMENTAL"/>
        /// </summary>
        public static Java.Lang.String CASE_INSTRUMENTAL { get { if (!_CASE_INSTRUMENTALReady) { _CASE_INSTRUMENTALContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CASE_INSTRUMENTAL"); _CASE_INSTRUMENTALReady = true; } return _CASE_INSTRUMENTALContent; } }
        private static Java.Lang.String _CASE_INSTRUMENTALContent = default;
        private static bool _CASE_INSTRUMENTALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#CASE_LOCATIVE"/>
        /// </summary>
        public static Java.Lang.String CASE_LOCATIVE { get { if (!_CASE_LOCATIVEReady) { _CASE_LOCATIVEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CASE_LOCATIVE"); _CASE_LOCATIVEReady = true; } return _CASE_LOCATIVEContent; } }
        private static Java.Lang.String _CASE_LOCATIVEContent = default;
        private static bool _CASE_LOCATIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#CASE_NOMINATIVE"/>
        /// </summary>
        public static Java.Lang.String CASE_NOMINATIVE { get { if (!_CASE_NOMINATIVEReady) { _CASE_NOMINATIVEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CASE_NOMINATIVE"); _CASE_NOMINATIVEReady = true; } return _CASE_NOMINATIVEContent; } }
        private static Java.Lang.String _CASE_NOMINATIVEContent = default;
        private static bool _CASE_NOMINATIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#CASE_VOCATIVE"/>
        /// </summary>
        public static Java.Lang.String CASE_VOCATIVE { get { if (!_CASE_VOCATIVEReady) { _CASE_VOCATIVEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CASE_VOCATIVE"); _CASE_VOCATIVEReady = true; } return _CASE_VOCATIVEContent; } }
        private static Java.Lang.String _CASE_VOCATIVEContent = default;
        private static bool _CASE_VOCATIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#GENDER_FEMALE"/>
        /// </summary>
        public static Java.Lang.String GENDER_FEMALE { get { if (!_GENDER_FEMALEReady) { _GENDER_FEMALEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GENDER_FEMALE"); _GENDER_FEMALEReady = true; } return _GENDER_FEMALEContent; } }
        private static Java.Lang.String _GENDER_FEMALEContent = default;
        private static bool _GENDER_FEMALEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#GENDER_MALE"/>
        /// </summary>
        public static Java.Lang.String GENDER_MALE { get { if (!_GENDER_MALEReady) { _GENDER_MALEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GENDER_MALE"); _GENDER_MALEReady = true; } return _GENDER_MALEContent; } }
        private static Java.Lang.String _GENDER_MALEContent = default;
        private static bool _GENDER_MALEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#GENDER_NEUTRAL"/>
        /// </summary>
        public static Java.Lang.String GENDER_NEUTRAL { get { if (!_GENDER_NEUTRALReady) { _GENDER_NEUTRALContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GENDER_NEUTRAL"); _GENDER_NEUTRALReady = true; } return _GENDER_NEUTRALContent; } }
        private static Java.Lang.String _GENDER_NEUTRALContent = default;
        private static bool _GENDER_NEUTRALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#MULTIPLICITY_DUAL"/>
        /// </summary>
        public static Java.Lang.String MULTIPLICITY_DUAL { get { if (!_MULTIPLICITY_DUALReady) { _MULTIPLICITY_DUALContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MULTIPLICITY_DUAL"); _MULTIPLICITY_DUALReady = true; } return _MULTIPLICITY_DUALContent; } }
        private static Java.Lang.String _MULTIPLICITY_DUALContent = default;
        private static bool _MULTIPLICITY_DUALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#MULTIPLICITY_PLURAL"/>
        /// </summary>
        public static Java.Lang.String MULTIPLICITY_PLURAL { get { if (!_MULTIPLICITY_PLURALReady) { _MULTIPLICITY_PLURALContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MULTIPLICITY_PLURAL"); _MULTIPLICITY_PLURALReady = true; } return _MULTIPLICITY_PLURALContent; } }
        private static Java.Lang.String _MULTIPLICITY_PLURALContent = default;
        private static bool _MULTIPLICITY_PLURALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#MULTIPLICITY_SINGLE"/>
        /// </summary>
        public static Java.Lang.String MULTIPLICITY_SINGLE { get { if (!_MULTIPLICITY_SINGLEReady) { _MULTIPLICITY_SINGLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MULTIPLICITY_SINGLE"); _MULTIPLICITY_SINGLEReady = true; } return _MULTIPLICITY_SINGLEContent; } }
        private static Java.Lang.String _MULTIPLICITY_SINGLEContent = default;
        private static bool _MULTIPLICITY_SINGLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#TYPE_CARDINAL"/>
        /// </summary>
        public static Java.Lang.String TYPE_CARDINAL { get { if (!_TYPE_CARDINALReady) { _TYPE_CARDINALContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TYPE_CARDINAL"); _TYPE_CARDINALReady = true; } return _TYPE_CARDINALContent; } }
        private static Java.Lang.String _TYPE_CARDINALContent = default;
        private static bool _TYPE_CARDINALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#TYPE_DATE"/>
        /// </summary>
        public static Java.Lang.String TYPE_DATE { get { if (!_TYPE_DATEReady) { _TYPE_DATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TYPE_DATE"); _TYPE_DATEReady = true; } return _TYPE_DATEContent; } }
        private static Java.Lang.String _TYPE_DATEContent = default;
        private static bool _TYPE_DATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#TYPE_DECIMAL"/>
        /// </summary>
        public static Java.Lang.String TYPE_DECIMAL { get { if (!_TYPE_DECIMALReady) { _TYPE_DECIMALContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TYPE_DECIMAL"); _TYPE_DECIMALReady = true; } return _TYPE_DECIMALContent; } }
        private static Java.Lang.String _TYPE_DECIMALContent = default;
        private static bool _TYPE_DECIMALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#TYPE_DIGITS"/>
        /// </summary>
        public static Java.Lang.String TYPE_DIGITS { get { if (!_TYPE_DIGITSReady) { _TYPE_DIGITSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TYPE_DIGITS"); _TYPE_DIGITSReady = true; } return _TYPE_DIGITSContent; } }
        private static Java.Lang.String _TYPE_DIGITSContent = default;
        private static bool _TYPE_DIGITSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#TYPE_ELECTRONIC"/>
        /// </summary>
        public static Java.Lang.String TYPE_ELECTRONIC { get { if (!_TYPE_ELECTRONICReady) { _TYPE_ELECTRONICContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TYPE_ELECTRONIC"); _TYPE_ELECTRONICReady = true; } return _TYPE_ELECTRONICContent; } }
        private static Java.Lang.String _TYPE_ELECTRONICContent = default;
        private static bool _TYPE_ELECTRONICReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#TYPE_FRACTION"/>
        /// </summary>
        public static Java.Lang.String TYPE_FRACTION { get { if (!_TYPE_FRACTIONReady) { _TYPE_FRACTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TYPE_FRACTION"); _TYPE_FRACTIONReady = true; } return _TYPE_FRACTIONContent; } }
        private static Java.Lang.String _TYPE_FRACTIONContent = default;
        private static bool _TYPE_FRACTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#TYPE_MEASURE"/>
        /// </summary>
        public static Java.Lang.String TYPE_MEASURE { get { if (!_TYPE_MEASUREReady) { _TYPE_MEASUREContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TYPE_MEASURE"); _TYPE_MEASUREReady = true; } return _TYPE_MEASUREContent; } }
        private static Java.Lang.String _TYPE_MEASUREContent = default;
        private static bool _TYPE_MEASUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#TYPE_MONEY"/>
        /// </summary>
        public static Java.Lang.String TYPE_MONEY { get { if (!_TYPE_MONEYReady) { _TYPE_MONEYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TYPE_MONEY"); _TYPE_MONEYReady = true; } return _TYPE_MONEYContent; } }
        private static Java.Lang.String _TYPE_MONEYContent = default;
        private static bool _TYPE_MONEYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#TYPE_ORDINAL"/>
        /// </summary>
        public static Java.Lang.String TYPE_ORDINAL { get { if (!_TYPE_ORDINALReady) { _TYPE_ORDINALContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TYPE_ORDINAL"); _TYPE_ORDINALReady = true; } return _TYPE_ORDINALContent; } }
        private static Java.Lang.String _TYPE_ORDINALContent = default;
        private static bool _TYPE_ORDINALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#TYPE_TELEPHONE"/>
        /// </summary>
        public static Java.Lang.String TYPE_TELEPHONE { get { if (!_TYPE_TELEPHONEReady) { _TYPE_TELEPHONEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TYPE_TELEPHONE"); _TYPE_TELEPHONEReady = true; } return _TYPE_TELEPHONEContent; } }
        private static Java.Lang.String _TYPE_TELEPHONEContent = default;
        private static bool _TYPE_TELEPHONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#TYPE_TEXT"/>
        /// </summary>
        public static Java.Lang.String TYPE_TEXT { get { if (!_TYPE_TEXTReady) { _TYPE_TEXTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TYPE_TEXT"); _TYPE_TEXTReady = true; } return _TYPE_TEXTContent; } }
        private static Java.Lang.String _TYPE_TEXTContent = default;
        private static bool _TYPE_TEXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#TYPE_TIME"/>
        /// </summary>
        public static Java.Lang.String TYPE_TIME { get { if (!_TYPE_TIMEReady) { _TYPE_TIMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TYPE_TIME"); _TYPE_TIMEReady = true; } return _TYPE_TIMEContent; } }
        private static Java.Lang.String _TYPE_TIMEContent = default;
        private static bool _TYPE_TIMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#TYPE_VERBATIM"/>
        /// </summary>
        public static Java.Lang.String TYPE_VERBATIM { get { if (!_TYPE_VERBATIMReady) { _TYPE_VERBATIMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TYPE_VERBATIM"); _TYPE_VERBATIMReady = true; } return _TYPE_VERBATIMContent; } }
        private static Java.Lang.String _TYPE_VERBATIMContent = default;
        private static bool _TYPE_VERBATIMReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#getArgs()"/>
        /// </summary>
        /// <returns><see cref="Android.Os.PersistableBundle"/></returns>
        public Android.Os.PersistableBundle GetArgs()
        {
            return IExecuteWithSignature<Android.Os.PersistableBundle>("getArgs", "()Landroid/os/PersistableBundle;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#getSpanTypeId()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetSpanTypeId()
        {
            return IExecuteWithSignature<int>("getSpanTypeId", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#getType()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetType()
        {
            return IExecuteWithSignature<Java.Lang.String>("getType", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecute("writeToParcel", arg0, arg1);
        }
    
        #endregion
    
        #region Nested classes
        #region Builder implementation
        public partial class Builder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.Builder.html#%3Cinit%3E(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            public Builder(Java.Lang.String arg0)
                : base(arg0)
            {
            }
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Text.Style.TtsSpan"/></returns>
            public Android.Text.Style.TtsSpan Build()
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan>("build", "()Landroid/text/style/TtsSpan;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.Builder.html#setIntArgument(java.lang.String,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.Builder"/></returns>
            public Android.Text.Style.TtsSpan.Builder SetIntArgument(Java.Lang.String arg0, int arg1)
            {
                return IExecute<Android.Text.Style.TtsSpan.Builder>("setIntArgument", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.Builder.html#setLongArgument(java.lang.String,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.Builder"/></returns>
            public Android.Text.Style.TtsSpan.Builder SetLongArgument(Java.Lang.String arg0, long arg1)
            {
                return IExecute<Android.Text.Style.TtsSpan.Builder>("setLongArgument", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.Builder.html#setStringArgument(java.lang.String,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.Builder"/></returns>
            public Android.Text.Style.TtsSpan.Builder SetStringArgument(Java.Lang.String arg0, Java.Lang.String arg1)
            {
                return IExecute<Android.Text.Style.TtsSpan.Builder>("setStringArgument", arg0, arg1);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region Builder<C> implementation
        public partial class Builder<C>
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.Builder.html#%3Cinit%3E(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            public Builder(Java.Lang.String arg0)
                : base(arg0)
            {
            }
        
            #endregion
        
            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Android.Text.Style.TtsSpan.Builder{C}"/> to <see cref="Android.Text.Style.TtsSpan.Builder"/>
            /// </summary>
            public static implicit operator Android.Text.Style.TtsSpan.Builder(Android.Text.Style.TtsSpan.Builder<C> t) => t.Cast<Android.Text.Style.TtsSpan.Builder>();
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Text.Style.TtsSpan"/></returns>
            public Android.Text.Style.TtsSpan Build()
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan>("build", "()Landroid/text/style/TtsSpan;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.Builder.html#setIntArgument(java.lang.String,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <returns><typeparamref name="C"/></returns>
            public C SetIntArgument(Java.Lang.String arg0, int arg1)
            {
                return IExecute<C>("setIntArgument", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.Builder.html#setLongArgument(java.lang.String,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <returns><typeparamref name="C"/></returns>
            public C SetLongArgument(Java.Lang.String arg0, long arg1)
            {
                return IExecute<C>("setLongArgument", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.Builder.html#setStringArgument(java.lang.String,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <returns><typeparamref name="C"/></returns>
            public C SetStringArgument(Java.Lang.String arg0, Java.Lang.String arg1)
            {
                return IExecute<C>("setStringArgument", arg0, arg1);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region CardinalBuilder implementation
        public partial class CardinalBuilder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.CardinalBuilder.html#%3Cinit%3E(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            public CardinalBuilder(Java.Lang.String arg0)
                : base(arg0)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.CardinalBuilder.html#%3Cinit%3E(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            public CardinalBuilder(long arg0)
                : base(arg0)
            {
            }
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.CardinalBuilder.html#setNumber(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.CardinalBuilder"/></returns>
            public Android.Text.Style.TtsSpan.CardinalBuilder SetNumber(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.CardinalBuilder>("setNumber", "(Ljava/lang/String;)Landroid/text/style/TtsSpan$CardinalBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.CardinalBuilder.html#setNumber(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.CardinalBuilder"/></returns>
            public Android.Text.Style.TtsSpan.CardinalBuilder SetNumber(long arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.CardinalBuilder>("setNumber", "(J)Landroid/text/style/TtsSpan$CardinalBuilder;", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region DateBuilder implementation
        public partial class DateBuilder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.DateBuilder.html#%3Cinit%3E(java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.Integer"/></param>
            /// <param name="arg1"><see cref="Java.Lang.Integer"/></param>
            /// <param name="arg2"><see cref="Java.Lang.Integer"/></param>
            /// <param name="arg3"><see cref="Java.Lang.Integer"/></param>
            public DateBuilder(Java.Lang.Integer arg0, Java.Lang.Integer arg1, Java.Lang.Integer arg2, Java.Lang.Integer arg3)
                : base(arg0, arg1, arg2, arg3)
            {
            }
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.DateBuilder.html#setDay(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.DateBuilder"/></returns>
            public Android.Text.Style.TtsSpan.DateBuilder SetDay(int arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.DateBuilder>("setDay", "(I)Landroid/text/style/TtsSpan$DateBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.DateBuilder.html#setMonth(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.DateBuilder"/></returns>
            public Android.Text.Style.TtsSpan.DateBuilder SetMonth(int arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.DateBuilder>("setMonth", "(I)Landroid/text/style/TtsSpan$DateBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.DateBuilder.html#setWeekday(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.DateBuilder"/></returns>
            public Android.Text.Style.TtsSpan.DateBuilder SetWeekday(int arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.DateBuilder>("setWeekday", "(I)Landroid/text/style/TtsSpan$DateBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.DateBuilder.html#setYear(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.DateBuilder"/></returns>
            public Android.Text.Style.TtsSpan.DateBuilder SetYear(int arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.DateBuilder>("setYear", "(I)Landroid/text/style/TtsSpan$DateBuilder;", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region DecimalBuilder implementation
        public partial class DecimalBuilder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.DecimalBuilder.html#%3Cinit%3E(double,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="double"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            public DecimalBuilder(double arg0, int arg1, int arg2)
                : base(arg0, arg1, arg2)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.DecimalBuilder.html#%3Cinit%3E(java.lang.String,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            public DecimalBuilder(Java.Lang.String arg0, Java.Lang.String arg1)
                : base(arg0, arg1)
            {
            }
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.DecimalBuilder.html#setArgumentsFromDouble(double,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="double"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.DecimalBuilder"/></returns>
            public Android.Text.Style.TtsSpan.DecimalBuilder SetArgumentsFromDouble(double arg0, int arg1, int arg2)
            {
                return IExecute<Android.Text.Style.TtsSpan.DecimalBuilder>("setArgumentsFromDouble", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.DecimalBuilder.html#setFractionalPart(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.DecimalBuilder"/></returns>
            public Android.Text.Style.TtsSpan.DecimalBuilder SetFractionalPart(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.DecimalBuilder>("setFractionalPart", "(Ljava/lang/String;)Landroid/text/style/TtsSpan$DecimalBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.DecimalBuilder.html#setIntegerPart(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.DecimalBuilder"/></returns>
            public Android.Text.Style.TtsSpan.DecimalBuilder SetIntegerPart(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.DecimalBuilder>("setIntegerPart", "(Ljava/lang/String;)Landroid/text/style/TtsSpan$DecimalBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.DecimalBuilder.html#setIntegerPart(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.DecimalBuilder"/></returns>
            public Android.Text.Style.TtsSpan.DecimalBuilder SetIntegerPart(long arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.DecimalBuilder>("setIntegerPart", "(J)Landroid/text/style/TtsSpan$DecimalBuilder;", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region DigitsBuilder implementation
        public partial class DigitsBuilder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.DigitsBuilder.html#%3Cinit%3E(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            public DigitsBuilder(Java.Lang.String arg0)
                : base(arg0)
            {
            }
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.DigitsBuilder.html#setDigits(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.DigitsBuilder"/></returns>
            public Android.Text.Style.TtsSpan.DigitsBuilder SetDigits(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.DigitsBuilder>("setDigits", "(Ljava/lang/String;)Landroid/text/style/TtsSpan$DigitsBuilder;", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region ElectronicBuilder implementation
        public partial class ElectronicBuilder
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.ElectronicBuilder.html#setDomain(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.ElectronicBuilder"/></returns>
            public Android.Text.Style.TtsSpan.ElectronicBuilder SetDomain(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.ElectronicBuilder>("setDomain", "(Ljava/lang/String;)Landroid/text/style/TtsSpan$ElectronicBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.ElectronicBuilder.html#setEmailArguments(java.lang.String,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.ElectronicBuilder"/></returns>
            public Android.Text.Style.TtsSpan.ElectronicBuilder SetEmailArguments(Java.Lang.String arg0, Java.Lang.String arg1)
            {
                return IExecute<Android.Text.Style.TtsSpan.ElectronicBuilder>("setEmailArguments", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.ElectronicBuilder.html#setFragmentId(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.ElectronicBuilder"/></returns>
            public Android.Text.Style.TtsSpan.ElectronicBuilder SetFragmentId(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.ElectronicBuilder>("setFragmentId", "(Ljava/lang/String;)Landroid/text/style/TtsSpan$ElectronicBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.ElectronicBuilder.html#setPassword(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.ElectronicBuilder"/></returns>
            public Android.Text.Style.TtsSpan.ElectronicBuilder SetPassword(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.ElectronicBuilder>("setPassword", "(Ljava/lang/String;)Landroid/text/style/TtsSpan$ElectronicBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.ElectronicBuilder.html#setPath(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.ElectronicBuilder"/></returns>
            public Android.Text.Style.TtsSpan.ElectronicBuilder SetPath(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.ElectronicBuilder>("setPath", "(Ljava/lang/String;)Landroid/text/style/TtsSpan$ElectronicBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.ElectronicBuilder.html#setPort(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.ElectronicBuilder"/></returns>
            public Android.Text.Style.TtsSpan.ElectronicBuilder SetPort(int arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.ElectronicBuilder>("setPort", "(I)Landroid/text/style/TtsSpan$ElectronicBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.ElectronicBuilder.html#setProtocol(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.ElectronicBuilder"/></returns>
            public Android.Text.Style.TtsSpan.ElectronicBuilder SetProtocol(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.ElectronicBuilder>("setProtocol", "(Ljava/lang/String;)Landroid/text/style/TtsSpan$ElectronicBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.ElectronicBuilder.html#setQueryString(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.ElectronicBuilder"/></returns>
            public Android.Text.Style.TtsSpan.ElectronicBuilder SetQueryString(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.ElectronicBuilder>("setQueryString", "(Ljava/lang/String;)Landroid/text/style/TtsSpan$ElectronicBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.ElectronicBuilder.html#setUsername(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.ElectronicBuilder"/></returns>
            public Android.Text.Style.TtsSpan.ElectronicBuilder SetUsername(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.ElectronicBuilder>("setUsername", "(Ljava/lang/String;)Landroid/text/style/TtsSpan$ElectronicBuilder;", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region FractionBuilder implementation
        public partial class FractionBuilder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.FractionBuilder.html#%3Cinit%3E(long,long,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <param name="arg2"><see cref="long"/></param>
            public FractionBuilder(long arg0, long arg1, long arg2)
                : base(arg0, arg1, arg2)
            {
            }
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.FractionBuilder.html#setDenominator(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.FractionBuilder"/></returns>
            public Android.Text.Style.TtsSpan.FractionBuilder SetDenominator(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.FractionBuilder>("setDenominator", "(Ljava/lang/String;)Landroid/text/style/TtsSpan$FractionBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.FractionBuilder.html#setDenominator(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.FractionBuilder"/></returns>
            public Android.Text.Style.TtsSpan.FractionBuilder SetDenominator(long arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.FractionBuilder>("setDenominator", "(J)Landroid/text/style/TtsSpan$FractionBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.FractionBuilder.html#setIntegerPart(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.FractionBuilder"/></returns>
            public Android.Text.Style.TtsSpan.FractionBuilder SetIntegerPart(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.FractionBuilder>("setIntegerPart", "(Ljava/lang/String;)Landroid/text/style/TtsSpan$FractionBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.FractionBuilder.html#setIntegerPart(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.FractionBuilder"/></returns>
            public Android.Text.Style.TtsSpan.FractionBuilder SetIntegerPart(long arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.FractionBuilder>("setIntegerPart", "(J)Landroid/text/style/TtsSpan$FractionBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.FractionBuilder.html#setNumerator(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.FractionBuilder"/></returns>
            public Android.Text.Style.TtsSpan.FractionBuilder SetNumerator(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.FractionBuilder>("setNumerator", "(Ljava/lang/String;)Landroid/text/style/TtsSpan$FractionBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.FractionBuilder.html#setNumerator(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.FractionBuilder"/></returns>
            public Android.Text.Style.TtsSpan.FractionBuilder SetNumerator(long arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.FractionBuilder>("setNumerator", "(J)Landroid/text/style/TtsSpan$FractionBuilder;", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region MeasureBuilder implementation
        public partial class MeasureBuilder
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.MeasureBuilder.html#setDenominator(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.MeasureBuilder"/></returns>
            public Android.Text.Style.TtsSpan.MeasureBuilder SetDenominator(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.MeasureBuilder>("setDenominator", "(Ljava/lang/String;)Landroid/text/style/TtsSpan$MeasureBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.MeasureBuilder.html#setDenominator(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.MeasureBuilder"/></returns>
            public Android.Text.Style.TtsSpan.MeasureBuilder SetDenominator(long arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.MeasureBuilder>("setDenominator", "(J)Landroid/text/style/TtsSpan$MeasureBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.MeasureBuilder.html#setFractionalPart(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.MeasureBuilder"/></returns>
            public Android.Text.Style.TtsSpan.MeasureBuilder SetFractionalPart(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.MeasureBuilder>("setFractionalPart", "(Ljava/lang/String;)Landroid/text/style/TtsSpan$MeasureBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.MeasureBuilder.html#setIntegerPart(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.MeasureBuilder"/></returns>
            public Android.Text.Style.TtsSpan.MeasureBuilder SetIntegerPart(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.MeasureBuilder>("setIntegerPart", "(Ljava/lang/String;)Landroid/text/style/TtsSpan$MeasureBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.MeasureBuilder.html#setIntegerPart(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.MeasureBuilder"/></returns>
            public Android.Text.Style.TtsSpan.MeasureBuilder SetIntegerPart(long arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.MeasureBuilder>("setIntegerPart", "(J)Landroid/text/style/TtsSpan$MeasureBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.MeasureBuilder.html#setNumber(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.MeasureBuilder"/></returns>
            public Android.Text.Style.TtsSpan.MeasureBuilder SetNumber(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.MeasureBuilder>("setNumber", "(Ljava/lang/String;)Landroid/text/style/TtsSpan$MeasureBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.MeasureBuilder.html#setNumber(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.MeasureBuilder"/></returns>
            public Android.Text.Style.TtsSpan.MeasureBuilder SetNumber(long arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.MeasureBuilder>("setNumber", "(J)Landroid/text/style/TtsSpan$MeasureBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.MeasureBuilder.html#setNumerator(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.MeasureBuilder"/></returns>
            public Android.Text.Style.TtsSpan.MeasureBuilder SetNumerator(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.MeasureBuilder>("setNumerator", "(Ljava/lang/String;)Landroid/text/style/TtsSpan$MeasureBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.MeasureBuilder.html#setNumerator(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.MeasureBuilder"/></returns>
            public Android.Text.Style.TtsSpan.MeasureBuilder SetNumerator(long arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.MeasureBuilder>("setNumerator", "(J)Landroid/text/style/TtsSpan$MeasureBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.MeasureBuilder.html#setUnit(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.MeasureBuilder"/></returns>
            public Android.Text.Style.TtsSpan.MeasureBuilder SetUnit(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.MeasureBuilder>("setUnit", "(Ljava/lang/String;)Landroid/text/style/TtsSpan$MeasureBuilder;", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region MoneyBuilder implementation
        public partial class MoneyBuilder
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.MoneyBuilder.html#setCurrency(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.MoneyBuilder"/></returns>
            public Android.Text.Style.TtsSpan.MoneyBuilder SetCurrency(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.MoneyBuilder>("setCurrency", "(Ljava/lang/String;)Landroid/text/style/TtsSpan$MoneyBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.MoneyBuilder.html#setFractionalPart(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.MoneyBuilder"/></returns>
            public Android.Text.Style.TtsSpan.MoneyBuilder SetFractionalPart(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.MoneyBuilder>("setFractionalPart", "(Ljava/lang/String;)Landroid/text/style/TtsSpan$MoneyBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.MoneyBuilder.html#setIntegerPart(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.MoneyBuilder"/></returns>
            public Android.Text.Style.TtsSpan.MoneyBuilder SetIntegerPart(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.MoneyBuilder>("setIntegerPart", "(Ljava/lang/String;)Landroid/text/style/TtsSpan$MoneyBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.MoneyBuilder.html#setIntegerPart(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.MoneyBuilder"/></returns>
            public Android.Text.Style.TtsSpan.MoneyBuilder SetIntegerPart(long arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.MoneyBuilder>("setIntegerPart", "(J)Landroid/text/style/TtsSpan$MoneyBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.MoneyBuilder.html#setQuantity(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.MoneyBuilder"/></returns>
            public Android.Text.Style.TtsSpan.MoneyBuilder SetQuantity(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.MoneyBuilder>("setQuantity", "(Ljava/lang/String;)Landroid/text/style/TtsSpan$MoneyBuilder;", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region OrdinalBuilder implementation
        public partial class OrdinalBuilder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.OrdinalBuilder.html#%3Cinit%3E(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            public OrdinalBuilder(Java.Lang.String arg0)
                : base(arg0)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.OrdinalBuilder.html#%3Cinit%3E(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            public OrdinalBuilder(long arg0)
                : base(arg0)
            {
            }
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.OrdinalBuilder.html#setNumber(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.OrdinalBuilder"/></returns>
            public Android.Text.Style.TtsSpan.OrdinalBuilder SetNumber(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.OrdinalBuilder>("setNumber", "(Ljava/lang/String;)Landroid/text/style/TtsSpan$OrdinalBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.OrdinalBuilder.html#setNumber(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.OrdinalBuilder"/></returns>
            public Android.Text.Style.TtsSpan.OrdinalBuilder SetNumber(long arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.OrdinalBuilder>("setNumber", "(J)Landroid/text/style/TtsSpan$OrdinalBuilder;", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region SemioticClassBuilder implementation
        public partial class SemioticClassBuilder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.SemioticClassBuilder.html#%3Cinit%3E(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            public SemioticClassBuilder(Java.Lang.String arg0)
                : base(arg0)
            {
            }
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.SemioticClassBuilder.html#setAnimacy(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.SemioticClassBuilder"/></returns>
            public Android.Text.Style.TtsSpan.SemioticClassBuilder SetAnimacy(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.SemioticClassBuilder>("setAnimacy", "(Ljava/lang/String;)Landroid/text/style/TtsSpan$SemioticClassBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.SemioticClassBuilder.html#setCase(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.SemioticClassBuilder"/></returns>
            public Android.Text.Style.TtsSpan.SemioticClassBuilder SetCase(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.SemioticClassBuilder>("setCase", "(Ljava/lang/String;)Landroid/text/style/TtsSpan$SemioticClassBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.SemioticClassBuilder.html#setGender(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.SemioticClassBuilder"/></returns>
            public Android.Text.Style.TtsSpan.SemioticClassBuilder SetGender(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.SemioticClassBuilder>("setGender", "(Ljava/lang/String;)Landroid/text/style/TtsSpan$SemioticClassBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.SemioticClassBuilder.html#setMultiplicity(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.SemioticClassBuilder"/></returns>
            public Android.Text.Style.TtsSpan.SemioticClassBuilder SetMultiplicity(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.SemioticClassBuilder>("setMultiplicity", "(Ljava/lang/String;)Landroid/text/style/TtsSpan$SemioticClassBuilder;", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region SemioticClassBuilder<C> implementation
        public partial class SemioticClassBuilder<C>
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.SemioticClassBuilder.html#%3Cinit%3E(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            public SemioticClassBuilder(Java.Lang.String arg0)
                : base(arg0)
            {
            }
        
            #endregion
        
            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Android.Text.Style.TtsSpan.SemioticClassBuilder{C}"/> to <see cref="Android.Text.Style.TtsSpan.SemioticClassBuilder"/>
            /// </summary>
            public static implicit operator Android.Text.Style.TtsSpan.SemioticClassBuilder(Android.Text.Style.TtsSpan.SemioticClassBuilder<C> t) => t.Cast<Android.Text.Style.TtsSpan.SemioticClassBuilder>();
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.SemioticClassBuilder.html#setAnimacy(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><typeparamref name="C"/></returns>
            public C SetAnimacy(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<C>("setAnimacy", "(Ljava/lang/String;)Landroid/text/style/TtsSpan$SemioticClassBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.SemioticClassBuilder.html#setCase(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><typeparamref name="C"/></returns>
            public C SetCase(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<C>("setCase", "(Ljava/lang/String;)Landroid/text/style/TtsSpan$SemioticClassBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.SemioticClassBuilder.html#setGender(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><typeparamref name="C"/></returns>
            public C SetGender(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<C>("setGender", "(Ljava/lang/String;)Landroid/text/style/TtsSpan$SemioticClassBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.SemioticClassBuilder.html#setMultiplicity(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><typeparamref name="C"/></returns>
            public C SetMultiplicity(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<C>("setMultiplicity", "(Ljava/lang/String;)Landroid/text/style/TtsSpan$SemioticClassBuilder;", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region TelephoneBuilder implementation
        public partial class TelephoneBuilder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.TelephoneBuilder.html#%3Cinit%3E(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            public TelephoneBuilder(Java.Lang.String arg0)
                : base(arg0)
            {
            }
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.TelephoneBuilder.html#setCountryCode(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.TelephoneBuilder"/></returns>
            public Android.Text.Style.TtsSpan.TelephoneBuilder SetCountryCode(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.TelephoneBuilder>("setCountryCode", "(Ljava/lang/String;)Landroid/text/style/TtsSpan$TelephoneBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.TelephoneBuilder.html#setExtension(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.TelephoneBuilder"/></returns>
            public Android.Text.Style.TtsSpan.TelephoneBuilder SetExtension(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.TelephoneBuilder>("setExtension", "(Ljava/lang/String;)Landroid/text/style/TtsSpan$TelephoneBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.TelephoneBuilder.html#setNumberParts(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.TelephoneBuilder"/></returns>
            public Android.Text.Style.TtsSpan.TelephoneBuilder SetNumberParts(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.TelephoneBuilder>("setNumberParts", "(Ljava/lang/String;)Landroid/text/style/TtsSpan$TelephoneBuilder;", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region TextBuilder implementation
        public partial class TextBuilder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.TextBuilder.html#%3Cinit%3E(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            public TextBuilder(Java.Lang.String arg0)
                : base(arg0)
            {
            }
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.TextBuilder.html#setText(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.TextBuilder"/></returns>
            public Android.Text.Style.TtsSpan.TextBuilder SetText(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.TextBuilder>("setText", "(Ljava/lang/String;)Landroid/text/style/TtsSpan$TextBuilder;", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region TimeBuilder implementation
        public partial class TimeBuilder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.TimeBuilder.html#%3Cinit%3E(int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public TimeBuilder(int arg0, int arg1)
                : base(arg0, arg1)
            {
            }
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.TimeBuilder.html#setHours(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.TimeBuilder"/></returns>
            public Android.Text.Style.TtsSpan.TimeBuilder SetHours(int arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.TimeBuilder>("setHours", "(I)Landroid/text/style/TtsSpan$TimeBuilder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.TimeBuilder.html#setMinutes(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.TimeBuilder"/></returns>
            public Android.Text.Style.TtsSpan.TimeBuilder SetMinutes(int arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.TimeBuilder>("setMinutes", "(I)Landroid/text/style/TtsSpan$TimeBuilder;", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region VerbatimBuilder implementation
        public partial class VerbatimBuilder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.VerbatimBuilder.html#%3Cinit%3E(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            public VerbatimBuilder(Java.Lang.String arg0)
                : base(arg0)
            {
            }
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/style/TtsSpan.VerbatimBuilder.html#setVerbatim(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Text.Style.TtsSpan.VerbatimBuilder"/></returns>
            public Android.Text.Style.TtsSpan.VerbatimBuilder SetVerbatim(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Text.Style.TtsSpan.VerbatimBuilder>("setVerbatim", "(Ljava/lang/String;)Landroid/text/style/TtsSpan$VerbatimBuilder;", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
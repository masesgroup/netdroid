/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Text.Format
{
    #region DateUtils
    public partial class DateUtils
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#FORMAT_12HOUR"/>
        /// </summary>
        [System.Obsolete()]
        public static int FORMAT_12HOUR { get { if (!_FORMAT_12HOURReady) { _FORMAT_12HOURContent = SGetField<int>(LocalBridgeClazz, "FORMAT_12HOUR"); _FORMAT_12HOURReady = true; } return _FORMAT_12HOURContent; } }
        private static int _FORMAT_12HOURContent = default;
        private static bool _FORMAT_12HOURReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#FORMAT_24HOUR"/>
        /// </summary>
        [System.Obsolete()]
        public static int FORMAT_24HOUR { get { if (!_FORMAT_24HOURReady) { _FORMAT_24HOURContent = SGetField<int>(LocalBridgeClazz, "FORMAT_24HOUR"); _FORMAT_24HOURReady = true; } return _FORMAT_24HOURContent; } }
        private static int _FORMAT_24HOURContent = default;
        private static bool _FORMAT_24HOURReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#FORMAT_ABBREV_ALL"/>
        /// </summary>
        public static int FORMAT_ABBREV_ALL { get { if (!_FORMAT_ABBREV_ALLReady) { _FORMAT_ABBREV_ALLContent = SGetField<int>(LocalBridgeClazz, "FORMAT_ABBREV_ALL"); _FORMAT_ABBREV_ALLReady = true; } return _FORMAT_ABBREV_ALLContent; } }
        private static int _FORMAT_ABBREV_ALLContent = default;
        private static bool _FORMAT_ABBREV_ALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#FORMAT_ABBREV_MONTH"/>
        /// </summary>
        public static int FORMAT_ABBREV_MONTH { get { if (!_FORMAT_ABBREV_MONTHReady) { _FORMAT_ABBREV_MONTHContent = SGetField<int>(LocalBridgeClazz, "FORMAT_ABBREV_MONTH"); _FORMAT_ABBREV_MONTHReady = true; } return _FORMAT_ABBREV_MONTHContent; } }
        private static int _FORMAT_ABBREV_MONTHContent = default;
        private static bool _FORMAT_ABBREV_MONTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#FORMAT_ABBREV_RELATIVE"/>
        /// </summary>
        public static int FORMAT_ABBREV_RELATIVE { get { if (!_FORMAT_ABBREV_RELATIVEReady) { _FORMAT_ABBREV_RELATIVEContent = SGetField<int>(LocalBridgeClazz, "FORMAT_ABBREV_RELATIVE"); _FORMAT_ABBREV_RELATIVEReady = true; } return _FORMAT_ABBREV_RELATIVEContent; } }
        private static int _FORMAT_ABBREV_RELATIVEContent = default;
        private static bool _FORMAT_ABBREV_RELATIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#FORMAT_ABBREV_TIME"/>
        /// </summary>
        public static int FORMAT_ABBREV_TIME { get { if (!_FORMAT_ABBREV_TIMEReady) { _FORMAT_ABBREV_TIMEContent = SGetField<int>(LocalBridgeClazz, "FORMAT_ABBREV_TIME"); _FORMAT_ABBREV_TIMEReady = true; } return _FORMAT_ABBREV_TIMEContent; } }
        private static int _FORMAT_ABBREV_TIMEContent = default;
        private static bool _FORMAT_ABBREV_TIMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#FORMAT_ABBREV_WEEKDAY"/>
        /// </summary>
        public static int FORMAT_ABBREV_WEEKDAY { get { if (!_FORMAT_ABBREV_WEEKDAYReady) { _FORMAT_ABBREV_WEEKDAYContent = SGetField<int>(LocalBridgeClazz, "FORMAT_ABBREV_WEEKDAY"); _FORMAT_ABBREV_WEEKDAYReady = true; } return _FORMAT_ABBREV_WEEKDAYContent; } }
        private static int _FORMAT_ABBREV_WEEKDAYContent = default;
        private static bool _FORMAT_ABBREV_WEEKDAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#FORMAT_CAP_AMPM"/>
        /// </summary>
        [System.Obsolete()]
        public static int FORMAT_CAP_AMPM { get { if (!_FORMAT_CAP_AMPMReady) { _FORMAT_CAP_AMPMContent = SGetField<int>(LocalBridgeClazz, "FORMAT_CAP_AMPM"); _FORMAT_CAP_AMPMReady = true; } return _FORMAT_CAP_AMPMContent; } }
        private static int _FORMAT_CAP_AMPMContent = default;
        private static bool _FORMAT_CAP_AMPMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#FORMAT_CAP_MIDNIGHT"/>
        /// </summary>
        [System.Obsolete()]
        public static int FORMAT_CAP_MIDNIGHT { get { if (!_FORMAT_CAP_MIDNIGHTReady) { _FORMAT_CAP_MIDNIGHTContent = SGetField<int>(LocalBridgeClazz, "FORMAT_CAP_MIDNIGHT"); _FORMAT_CAP_MIDNIGHTReady = true; } return _FORMAT_CAP_MIDNIGHTContent; } }
        private static int _FORMAT_CAP_MIDNIGHTContent = default;
        private static bool _FORMAT_CAP_MIDNIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#FORMAT_CAP_NOON"/>
        /// </summary>
        [System.Obsolete()]
        public static int FORMAT_CAP_NOON { get { if (!_FORMAT_CAP_NOONReady) { _FORMAT_CAP_NOONContent = SGetField<int>(LocalBridgeClazz, "FORMAT_CAP_NOON"); _FORMAT_CAP_NOONReady = true; } return _FORMAT_CAP_NOONContent; } }
        private static int _FORMAT_CAP_NOONContent = default;
        private static bool _FORMAT_CAP_NOONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#FORMAT_CAP_NOON_MIDNIGHT"/>
        /// </summary>
        [System.Obsolete()]
        public static int FORMAT_CAP_NOON_MIDNIGHT { get { if (!_FORMAT_CAP_NOON_MIDNIGHTReady) { _FORMAT_CAP_NOON_MIDNIGHTContent = SGetField<int>(LocalBridgeClazz, "FORMAT_CAP_NOON_MIDNIGHT"); _FORMAT_CAP_NOON_MIDNIGHTReady = true; } return _FORMAT_CAP_NOON_MIDNIGHTContent; } }
        private static int _FORMAT_CAP_NOON_MIDNIGHTContent = default;
        private static bool _FORMAT_CAP_NOON_MIDNIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#FORMAT_NO_MIDNIGHT"/>
        /// </summary>
        public static int FORMAT_NO_MIDNIGHT { get { if (!_FORMAT_NO_MIDNIGHTReady) { _FORMAT_NO_MIDNIGHTContent = SGetField<int>(LocalBridgeClazz, "FORMAT_NO_MIDNIGHT"); _FORMAT_NO_MIDNIGHTReady = true; } return _FORMAT_NO_MIDNIGHTContent; } }
        private static int _FORMAT_NO_MIDNIGHTContent = default;
        private static bool _FORMAT_NO_MIDNIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#FORMAT_NO_MONTH_DAY"/>
        /// </summary>
        public static int FORMAT_NO_MONTH_DAY { get { if (!_FORMAT_NO_MONTH_DAYReady) { _FORMAT_NO_MONTH_DAYContent = SGetField<int>(LocalBridgeClazz, "FORMAT_NO_MONTH_DAY"); _FORMAT_NO_MONTH_DAYReady = true; } return _FORMAT_NO_MONTH_DAYContent; } }
        private static int _FORMAT_NO_MONTH_DAYContent = default;
        private static bool _FORMAT_NO_MONTH_DAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#FORMAT_NO_NOON"/>
        /// </summary>
        public static int FORMAT_NO_NOON { get { if (!_FORMAT_NO_NOONReady) { _FORMAT_NO_NOONContent = SGetField<int>(LocalBridgeClazz, "FORMAT_NO_NOON"); _FORMAT_NO_NOONReady = true; } return _FORMAT_NO_NOONContent; } }
        private static int _FORMAT_NO_NOONContent = default;
        private static bool _FORMAT_NO_NOONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#FORMAT_NO_NOON_MIDNIGHT"/>
        /// </summary>
        [System.Obsolete()]
        public static int FORMAT_NO_NOON_MIDNIGHT { get { if (!_FORMAT_NO_NOON_MIDNIGHTReady) { _FORMAT_NO_NOON_MIDNIGHTContent = SGetField<int>(LocalBridgeClazz, "FORMAT_NO_NOON_MIDNIGHT"); _FORMAT_NO_NOON_MIDNIGHTReady = true; } return _FORMAT_NO_NOON_MIDNIGHTContent; } }
        private static int _FORMAT_NO_NOON_MIDNIGHTContent = default;
        private static bool _FORMAT_NO_NOON_MIDNIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#FORMAT_NO_YEAR"/>
        /// </summary>
        public static int FORMAT_NO_YEAR { get { if (!_FORMAT_NO_YEARReady) { _FORMAT_NO_YEARContent = SGetField<int>(LocalBridgeClazz, "FORMAT_NO_YEAR"); _FORMAT_NO_YEARReady = true; } return _FORMAT_NO_YEARContent; } }
        private static int _FORMAT_NO_YEARContent = default;
        private static bool _FORMAT_NO_YEARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#FORMAT_NUMERIC_DATE"/>
        /// </summary>
        public static int FORMAT_NUMERIC_DATE { get { if (!_FORMAT_NUMERIC_DATEReady) { _FORMAT_NUMERIC_DATEContent = SGetField<int>(LocalBridgeClazz, "FORMAT_NUMERIC_DATE"); _FORMAT_NUMERIC_DATEReady = true; } return _FORMAT_NUMERIC_DATEContent; } }
        private static int _FORMAT_NUMERIC_DATEContent = default;
        private static bool _FORMAT_NUMERIC_DATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#FORMAT_SHOW_DATE"/>
        /// </summary>
        public static int FORMAT_SHOW_DATE { get { if (!_FORMAT_SHOW_DATEReady) { _FORMAT_SHOW_DATEContent = SGetField<int>(LocalBridgeClazz, "FORMAT_SHOW_DATE"); _FORMAT_SHOW_DATEReady = true; } return _FORMAT_SHOW_DATEContent; } }
        private static int _FORMAT_SHOW_DATEContent = default;
        private static bool _FORMAT_SHOW_DATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#FORMAT_SHOW_TIME"/>
        /// </summary>
        public static int FORMAT_SHOW_TIME { get { if (!_FORMAT_SHOW_TIMEReady) { _FORMAT_SHOW_TIMEContent = SGetField<int>(LocalBridgeClazz, "FORMAT_SHOW_TIME"); _FORMAT_SHOW_TIMEReady = true; } return _FORMAT_SHOW_TIMEContent; } }
        private static int _FORMAT_SHOW_TIMEContent = default;
        private static bool _FORMAT_SHOW_TIMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#FORMAT_SHOW_WEEKDAY"/>
        /// </summary>
        public static int FORMAT_SHOW_WEEKDAY { get { if (!_FORMAT_SHOW_WEEKDAYReady) { _FORMAT_SHOW_WEEKDAYContent = SGetField<int>(LocalBridgeClazz, "FORMAT_SHOW_WEEKDAY"); _FORMAT_SHOW_WEEKDAYReady = true; } return _FORMAT_SHOW_WEEKDAYContent; } }
        private static int _FORMAT_SHOW_WEEKDAYContent = default;
        private static bool _FORMAT_SHOW_WEEKDAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#FORMAT_SHOW_YEAR"/>
        /// </summary>
        public static int FORMAT_SHOW_YEAR { get { if (!_FORMAT_SHOW_YEARReady) { _FORMAT_SHOW_YEARContent = SGetField<int>(LocalBridgeClazz, "FORMAT_SHOW_YEAR"); _FORMAT_SHOW_YEARReady = true; } return _FORMAT_SHOW_YEARContent; } }
        private static int _FORMAT_SHOW_YEARContent = default;
        private static bool _FORMAT_SHOW_YEARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#FORMAT_UTC"/>
        /// </summary>
        [System.Obsolete()]
        public static int FORMAT_UTC { get { if (!_FORMAT_UTCReady) { _FORMAT_UTCContent = SGetField<int>(LocalBridgeClazz, "FORMAT_UTC"); _FORMAT_UTCReady = true; } return _FORMAT_UTCContent; } }
        private static int _FORMAT_UTCContent = default;
        private static bool _FORMAT_UTCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#LENGTH_LONG"/>
        /// </summary>
        [System.Obsolete()]
        public static int LENGTH_LONG { get { if (!_LENGTH_LONGReady) { _LENGTH_LONGContent = SGetField<int>(LocalBridgeClazz, "LENGTH_LONG"); _LENGTH_LONGReady = true; } return _LENGTH_LONGContent; } }
        private static int _LENGTH_LONGContent = default;
        private static bool _LENGTH_LONGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#LENGTH_MEDIUM"/>
        /// </summary>
        [System.Obsolete()]
        public static int LENGTH_MEDIUM { get { if (!_LENGTH_MEDIUMReady) { _LENGTH_MEDIUMContent = SGetField<int>(LocalBridgeClazz, "LENGTH_MEDIUM"); _LENGTH_MEDIUMReady = true; } return _LENGTH_MEDIUMContent; } }
        private static int _LENGTH_MEDIUMContent = default;
        private static bool _LENGTH_MEDIUMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#LENGTH_SHORT"/>
        /// </summary>
        [System.Obsolete()]
        public static int LENGTH_SHORT { get { if (!_LENGTH_SHORTReady) { _LENGTH_SHORTContent = SGetField<int>(LocalBridgeClazz, "LENGTH_SHORT"); _LENGTH_SHORTReady = true; } return _LENGTH_SHORTContent; } }
        private static int _LENGTH_SHORTContent = default;
        private static bool _LENGTH_SHORTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#LENGTH_SHORTER"/>
        /// </summary>
        [System.Obsolete()]
        public static int LENGTH_SHORTER { get { if (!_LENGTH_SHORTERReady) { _LENGTH_SHORTERContent = SGetField<int>(LocalBridgeClazz, "LENGTH_SHORTER"); _LENGTH_SHORTERReady = true; } return _LENGTH_SHORTERContent; } }
        private static int _LENGTH_SHORTERContent = default;
        private static bool _LENGTH_SHORTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#LENGTH_SHORTEST"/>
        /// </summary>
        [System.Obsolete()]
        public static int LENGTH_SHORTEST { get { if (!_LENGTH_SHORTESTReady) { _LENGTH_SHORTESTContent = SGetField<int>(LocalBridgeClazz, "LENGTH_SHORTEST"); _LENGTH_SHORTESTReady = true; } return _LENGTH_SHORTESTContent; } }
        private static int _LENGTH_SHORTESTContent = default;
        private static bool _LENGTH_SHORTESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#sameMonthTable"/>
        /// </summary>
        [System.Obsolete()]
        public static int[] sameMonthTable { get { if (!_sameMonthTableReady) { _sameMonthTableContent = SGetFieldArray<int>(LocalBridgeClazz, "sameMonthTable"); _sameMonthTableReady = true; } return _sameMonthTableContent; } }
        private static int[] _sameMonthTableContent = default;
        private static bool _sameMonthTableReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#sameYearTable"/>
        /// </summary>
        [System.Obsolete()]
        public static int[] sameYearTable { get { if (!_sameYearTableReady) { _sameYearTableContent = SGetFieldArray<int>(LocalBridgeClazz, "sameYearTable"); _sameYearTableReady = true; } return _sameYearTableContent; } }
        private static int[] _sameYearTableContent = default;
        private static bool _sameYearTableReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#ABBREV_MONTH_FORMAT"/>
        /// </summary>
        [System.Obsolete()]
        public static Java.Lang.String ABBREV_MONTH_FORMAT { get { if (!_ABBREV_MONTH_FORMATReady) { _ABBREV_MONTH_FORMATContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ABBREV_MONTH_FORMAT"); _ABBREV_MONTH_FORMATReady = true; } return _ABBREV_MONTH_FORMATContent; } }
        private static Java.Lang.String _ABBREV_MONTH_FORMATContent = default;
        private static bool _ABBREV_MONTH_FORMATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#ABBREV_WEEKDAY_FORMAT"/>
        /// </summary>
        public static Java.Lang.String ABBREV_WEEKDAY_FORMAT { get { if (!_ABBREV_WEEKDAY_FORMATReady) { _ABBREV_WEEKDAY_FORMATContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ABBREV_WEEKDAY_FORMAT"); _ABBREV_WEEKDAY_FORMATReady = true; } return _ABBREV_WEEKDAY_FORMATContent; } }
        private static Java.Lang.String _ABBREV_WEEKDAY_FORMATContent = default;
        private static bool _ABBREV_WEEKDAY_FORMATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#HOUR_MINUTE_24"/>
        /// </summary>
        [System.Obsolete()]
        public static Java.Lang.String HOUR_MINUTE_24 { get { if (!_HOUR_MINUTE_24Ready) { _HOUR_MINUTE_24Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "HOUR_MINUTE_24"); _HOUR_MINUTE_24Ready = true; } return _HOUR_MINUTE_24Content; } }
        private static Java.Lang.String _HOUR_MINUTE_24Content = default;
        private static bool _HOUR_MINUTE_24Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#MONTH_DAY_FORMAT"/>
        /// </summary>
        public static Java.Lang.String MONTH_DAY_FORMAT { get { if (!_MONTH_DAY_FORMATReady) { _MONTH_DAY_FORMATContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MONTH_DAY_FORMAT"); _MONTH_DAY_FORMATReady = true; } return _MONTH_DAY_FORMATContent; } }
        private static Java.Lang.String _MONTH_DAY_FORMATContent = default;
        private static bool _MONTH_DAY_FORMATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#MONTH_FORMAT"/>
        /// </summary>
        public static Java.Lang.String MONTH_FORMAT { get { if (!_MONTH_FORMATReady) { _MONTH_FORMATContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MONTH_FORMAT"); _MONTH_FORMATReady = true; } return _MONTH_FORMATContent; } }
        private static Java.Lang.String _MONTH_FORMATContent = default;
        private static bool _MONTH_FORMATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#NUMERIC_MONTH_FORMAT"/>
        /// </summary>
        public static Java.Lang.String NUMERIC_MONTH_FORMAT { get { if (!_NUMERIC_MONTH_FORMATReady) { _NUMERIC_MONTH_FORMATContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NUMERIC_MONTH_FORMAT"); _NUMERIC_MONTH_FORMATReady = true; } return _NUMERIC_MONTH_FORMATContent; } }
        private static Java.Lang.String _NUMERIC_MONTH_FORMATContent = default;
        private static bool _NUMERIC_MONTH_FORMATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#WEEKDAY_FORMAT"/>
        /// </summary>
        public static Java.Lang.String WEEKDAY_FORMAT { get { if (!_WEEKDAY_FORMATReady) { _WEEKDAY_FORMATContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WEEKDAY_FORMAT"); _WEEKDAY_FORMATReady = true; } return _WEEKDAY_FORMATContent; } }
        private static Java.Lang.String _WEEKDAY_FORMATContent = default;
        private static bool _WEEKDAY_FORMATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#YEAR_FORMAT"/>
        /// </summary>
        public static Java.Lang.String YEAR_FORMAT { get { if (!_YEAR_FORMATReady) { _YEAR_FORMATContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "YEAR_FORMAT"); _YEAR_FORMATReady = true; } return _YEAR_FORMATContent; } }
        private static Java.Lang.String _YEAR_FORMATContent = default;
        private static bool _YEAR_FORMATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#YEAR_FORMAT_TWO_DIGITS"/>
        /// </summary>
        public static Java.Lang.String YEAR_FORMAT_TWO_DIGITS { get { if (!_YEAR_FORMAT_TWO_DIGITSReady) { _YEAR_FORMAT_TWO_DIGITSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "YEAR_FORMAT_TWO_DIGITS"); _YEAR_FORMAT_TWO_DIGITSReady = true; } return _YEAR_FORMAT_TWO_DIGITSContent; } }
        private static Java.Lang.String _YEAR_FORMAT_TWO_DIGITSContent = default;
        private static bool _YEAR_FORMAT_TWO_DIGITSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#DAY_IN_MILLIS"/>
        /// </summary>
        public static long DAY_IN_MILLIS { get { if (!_DAY_IN_MILLISReady) { _DAY_IN_MILLISContent = SGetField<long>(LocalBridgeClazz, "DAY_IN_MILLIS"); _DAY_IN_MILLISReady = true; } return _DAY_IN_MILLISContent; } }
        private static long _DAY_IN_MILLISContent = default;
        private static bool _DAY_IN_MILLISReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#HOUR_IN_MILLIS"/>
        /// </summary>
        public static long HOUR_IN_MILLIS { get { if (!_HOUR_IN_MILLISReady) { _HOUR_IN_MILLISContent = SGetField<long>(LocalBridgeClazz, "HOUR_IN_MILLIS"); _HOUR_IN_MILLISReady = true; } return _HOUR_IN_MILLISContent; } }
        private static long _HOUR_IN_MILLISContent = default;
        private static bool _HOUR_IN_MILLISReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#MINUTE_IN_MILLIS"/>
        /// </summary>
        public static long MINUTE_IN_MILLIS { get { if (!_MINUTE_IN_MILLISReady) { _MINUTE_IN_MILLISContent = SGetField<long>(LocalBridgeClazz, "MINUTE_IN_MILLIS"); _MINUTE_IN_MILLISReady = true; } return _MINUTE_IN_MILLISContent; } }
        private static long _MINUTE_IN_MILLISContent = default;
        private static bool _MINUTE_IN_MILLISReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#SECOND_IN_MILLIS"/>
        /// </summary>
        public static long SECOND_IN_MILLIS { get { if (!_SECOND_IN_MILLISReady) { _SECOND_IN_MILLISContent = SGetField<long>(LocalBridgeClazz, "SECOND_IN_MILLIS"); _SECOND_IN_MILLISReady = true; } return _SECOND_IN_MILLISContent; } }
        private static long _SECOND_IN_MILLISContent = default;
        private static bool _SECOND_IN_MILLISReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#WEEK_IN_MILLIS"/>
        /// </summary>
        public static long WEEK_IN_MILLIS { get { if (!_WEEK_IN_MILLISReady) { _WEEK_IN_MILLISContent = SGetField<long>(LocalBridgeClazz, "WEEK_IN_MILLIS"); _WEEK_IN_MILLISReady = true; } return _WEEK_IN_MILLISContent; } }
        private static long _WEEK_IN_MILLISContent = default;
        private static bool _WEEK_IN_MILLISReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#YEAR_IN_MILLIS"/>
        /// </summary>
        [System.Obsolete()]
        public static long YEAR_IN_MILLIS { get { if (!_YEAR_IN_MILLISReady) { _YEAR_IN_MILLISContent = SGetField<long>(LocalBridgeClazz, "YEAR_IN_MILLIS"); _YEAR_IN_MILLISReady = true; } return _YEAR_IN_MILLISContent; } }
        private static long _YEAR_IN_MILLISContent = default;
        private static bool _YEAR_IN_MILLISReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#isToday(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsToday(long arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isToday", "(J)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#formatSameDayTime(long,long,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public static Java.Lang.CharSequence FormatSameDayTime(long arg0, long arg1, int arg2, int arg3)
        {
            return SExecute<Java.Lang.CharSequence>(LocalBridgeClazz, "formatSameDayTime", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#getRelativeDateTimeString(android.content.Context,long,long,long,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <param name="arg3"><see cref="long"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public static Java.Lang.CharSequence GetRelativeDateTimeString(Android.Content.Context arg0, long arg1, long arg2, long arg3, int arg4)
        {
            return SExecute<Java.Lang.CharSequence>(LocalBridgeClazz, "getRelativeDateTimeString", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#getRelativeTimeSpanString(android.content.Context,long,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public static Java.Lang.CharSequence GetRelativeTimeSpanString(Android.Content.Context arg0, long arg1, bool arg2)
        {
            return SExecute<Java.Lang.CharSequence>(LocalBridgeClazz, "getRelativeTimeSpanString", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#getRelativeTimeSpanString(android.content.Context,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public static Java.Lang.CharSequence GetRelativeTimeSpanString(Android.Content.Context arg0, long arg1)
        {
            return SExecute<Java.Lang.CharSequence>(LocalBridgeClazz, "getRelativeTimeSpanString", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#getRelativeTimeSpanString(long,long,long,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public static Java.Lang.CharSequence GetRelativeTimeSpanString(long arg0, long arg1, long arg2, int arg3)
        {
            return SExecute<Java.Lang.CharSequence>(LocalBridgeClazz, "getRelativeTimeSpanString", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#getRelativeTimeSpanString(long,long,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public static Java.Lang.CharSequence GetRelativeTimeSpanString(long arg0, long arg1, long arg2)
        {
            return SExecute<Java.Lang.CharSequence>(LocalBridgeClazz, "getRelativeTimeSpanString", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#getRelativeTimeSpanString(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public static Java.Lang.CharSequence GetRelativeTimeSpanString(long arg0)
        {
            return SExecuteWithSignature<Java.Lang.CharSequence>(LocalBridgeClazz, "getRelativeTimeSpanString", "(J)Ljava/lang/CharSequence;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#formatDateRange(android.content.Context,long,long,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String FormatDateRange(Android.Content.Context arg0, long arg1, long arg2, int arg3)
        {
            return SExecute<Java.Lang.String>(LocalBridgeClazz, "formatDateRange", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#formatDateTime(android.content.Context,long,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String FormatDateTime(Android.Content.Context arg0, long arg1, int arg2)
        {
            return SExecute<Java.Lang.String>(LocalBridgeClazz, "formatDateTime", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#formatElapsedTime(java.lang.StringBuilder,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.StringBuilder"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String FormatElapsedTime(Java.Lang.StringBuilder arg0, long arg1)
        {
            return SExecute<Java.Lang.String>(LocalBridgeClazz, "formatElapsedTime", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#formatElapsedTime(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String FormatElapsedTime(long arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "formatElapsedTime", "(J)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#getAMPMString(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        [System.Obsolete()]
        public static Java.Lang.String GetAMPMString(int arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "getAMPMString", "(I)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#getDayOfWeekString(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        [System.Obsolete()]
        public static Java.Lang.String GetDayOfWeekString(int arg0, int arg1)
        {
            return SExecute<Java.Lang.String>(LocalBridgeClazz, "getDayOfWeekString", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#getMonthString(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        [System.Obsolete()]
        public static Java.Lang.String GetMonthString(int arg0, int arg1)
        {
            return SExecute<Java.Lang.String>(LocalBridgeClazz, "getMonthString", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#formatDateRange(android.content.Context,java.util.Formatter,long,long,int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Java.Util.Formatter"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <param name="arg3"><see cref="long"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Util.Formatter"/></returns>
        public static Java.Util.Formatter FormatDateRange(Android.Content.Context arg0, Java.Util.Formatter arg1, long arg2, long arg3, int arg4, Java.Lang.String arg5)
        {
            return SExecute<Java.Util.Formatter>(LocalBridgeClazz, "formatDateRange", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/format/DateUtils.html#formatDateRange(android.content.Context,java.util.Formatter,long,long,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Java.Util.Formatter"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <param name="arg3"><see cref="long"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.Formatter"/></returns>
        public static Java.Util.Formatter FormatDateRange(Android.Content.Context arg0, Java.Util.Formatter arg1, long arg2, long arg3, int arg4)
        {
            return SExecute<Java.Util.Formatter>(LocalBridgeClazz, "formatDateRange", arg0, arg1, arg2, arg3, arg4);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Text
{
    #region Html declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/text/Html.html"/>
    /// </summary>
    public partial class Html : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Html>
    {
        const string _bridgeClassName = "android.text.Html";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public Html() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public Html(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region ImageGetter declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Html.ImageGetter.html"/>
        /// </summary>
        public partial class ImageGetter : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ImageGetter>
        {
            const string _bridgeClassName = "android.text.Html$ImageGetter";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("ImageGetter class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public ImageGetter() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("ImageGetter class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public ImageGetter(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region TagHandler declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Html.TagHandler.html"/>
        /// </summary>
        public partial class TagHandler : MASES.JCOBridge.C2JBridge.JVMBridgeBase<TagHandler>
        {
            const string _bridgeClassName = "android.text.Html$TagHandler";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("TagHandler class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public TagHandler() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("TagHandler class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public TagHandler(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region Html implementation
    public partial class Html
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Html.html#FROM_HTML_MODE_COMPACT"/>
        /// </summary>
        public static int FROM_HTML_MODE_COMPACT { get { if (!_FROM_HTML_MODE_COMPACTReady) { _FROM_HTML_MODE_COMPACTContent = SGetField<int>(LocalBridgeClazz, "FROM_HTML_MODE_COMPACT"); _FROM_HTML_MODE_COMPACTReady = true; } return _FROM_HTML_MODE_COMPACTContent; } }
        private static int _FROM_HTML_MODE_COMPACTContent = default;
        private static bool _FROM_HTML_MODE_COMPACTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Html.html#FROM_HTML_MODE_LEGACY"/>
        /// </summary>
        public static int FROM_HTML_MODE_LEGACY { get { if (!_FROM_HTML_MODE_LEGACYReady) { _FROM_HTML_MODE_LEGACYContent = SGetField<int>(LocalBridgeClazz, "FROM_HTML_MODE_LEGACY"); _FROM_HTML_MODE_LEGACYReady = true; } return _FROM_HTML_MODE_LEGACYContent; } }
        private static int _FROM_HTML_MODE_LEGACYContent = default;
        private static bool _FROM_HTML_MODE_LEGACYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Html.html#FROM_HTML_OPTION_USE_CSS_COLORS"/>
        /// </summary>
        public static int FROM_HTML_OPTION_USE_CSS_COLORS { get { if (!_FROM_HTML_OPTION_USE_CSS_COLORSReady) { _FROM_HTML_OPTION_USE_CSS_COLORSContent = SGetField<int>(LocalBridgeClazz, "FROM_HTML_OPTION_USE_CSS_COLORS"); _FROM_HTML_OPTION_USE_CSS_COLORSReady = true; } return _FROM_HTML_OPTION_USE_CSS_COLORSContent; } }
        private static int _FROM_HTML_OPTION_USE_CSS_COLORSContent = default;
        private static bool _FROM_HTML_OPTION_USE_CSS_COLORSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Html.html#FROM_HTML_SEPARATOR_LINE_BREAK_BLOCKQUOTE"/>
        /// </summary>
        public static int FROM_HTML_SEPARATOR_LINE_BREAK_BLOCKQUOTE { get { if (!_FROM_HTML_SEPARATOR_LINE_BREAK_BLOCKQUOTEReady) { _FROM_HTML_SEPARATOR_LINE_BREAK_BLOCKQUOTEContent = SGetField<int>(LocalBridgeClazz, "FROM_HTML_SEPARATOR_LINE_BREAK_BLOCKQUOTE"); _FROM_HTML_SEPARATOR_LINE_BREAK_BLOCKQUOTEReady = true; } return _FROM_HTML_SEPARATOR_LINE_BREAK_BLOCKQUOTEContent; } }
        private static int _FROM_HTML_SEPARATOR_LINE_BREAK_BLOCKQUOTEContent = default;
        private static bool _FROM_HTML_SEPARATOR_LINE_BREAK_BLOCKQUOTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Html.html#FROM_HTML_SEPARATOR_LINE_BREAK_DIV"/>
        /// </summary>
        public static int FROM_HTML_SEPARATOR_LINE_BREAK_DIV { get { if (!_FROM_HTML_SEPARATOR_LINE_BREAK_DIVReady) { _FROM_HTML_SEPARATOR_LINE_BREAK_DIVContent = SGetField<int>(LocalBridgeClazz, "FROM_HTML_SEPARATOR_LINE_BREAK_DIV"); _FROM_HTML_SEPARATOR_LINE_BREAK_DIVReady = true; } return _FROM_HTML_SEPARATOR_LINE_BREAK_DIVContent; } }
        private static int _FROM_HTML_SEPARATOR_LINE_BREAK_DIVContent = default;
        private static bool _FROM_HTML_SEPARATOR_LINE_BREAK_DIVReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Html.html#FROM_HTML_SEPARATOR_LINE_BREAK_HEADING"/>
        /// </summary>
        public static int FROM_HTML_SEPARATOR_LINE_BREAK_HEADING { get { if (!_FROM_HTML_SEPARATOR_LINE_BREAK_HEADINGReady) { _FROM_HTML_SEPARATOR_LINE_BREAK_HEADINGContent = SGetField<int>(LocalBridgeClazz, "FROM_HTML_SEPARATOR_LINE_BREAK_HEADING"); _FROM_HTML_SEPARATOR_LINE_BREAK_HEADINGReady = true; } return _FROM_HTML_SEPARATOR_LINE_BREAK_HEADINGContent; } }
        private static int _FROM_HTML_SEPARATOR_LINE_BREAK_HEADINGContent = default;
        private static bool _FROM_HTML_SEPARATOR_LINE_BREAK_HEADINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Html.html#FROM_HTML_SEPARATOR_LINE_BREAK_LIST"/>
        /// </summary>
        public static int FROM_HTML_SEPARATOR_LINE_BREAK_LIST { get { if (!_FROM_HTML_SEPARATOR_LINE_BREAK_LISTReady) { _FROM_HTML_SEPARATOR_LINE_BREAK_LISTContent = SGetField<int>(LocalBridgeClazz, "FROM_HTML_SEPARATOR_LINE_BREAK_LIST"); _FROM_HTML_SEPARATOR_LINE_BREAK_LISTReady = true; } return _FROM_HTML_SEPARATOR_LINE_BREAK_LISTContent; } }
        private static int _FROM_HTML_SEPARATOR_LINE_BREAK_LISTContent = default;
        private static bool _FROM_HTML_SEPARATOR_LINE_BREAK_LISTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Html.html#FROM_HTML_SEPARATOR_LINE_BREAK_LIST_ITEM"/>
        /// </summary>
        public static int FROM_HTML_SEPARATOR_LINE_BREAK_LIST_ITEM { get { if (!_FROM_HTML_SEPARATOR_LINE_BREAK_LIST_ITEMReady) { _FROM_HTML_SEPARATOR_LINE_BREAK_LIST_ITEMContent = SGetField<int>(LocalBridgeClazz, "FROM_HTML_SEPARATOR_LINE_BREAK_LIST_ITEM"); _FROM_HTML_SEPARATOR_LINE_BREAK_LIST_ITEMReady = true; } return _FROM_HTML_SEPARATOR_LINE_BREAK_LIST_ITEMContent; } }
        private static int _FROM_HTML_SEPARATOR_LINE_BREAK_LIST_ITEMContent = default;
        private static bool _FROM_HTML_SEPARATOR_LINE_BREAK_LIST_ITEMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Html.html#FROM_HTML_SEPARATOR_LINE_BREAK_PARAGRAPH"/>
        /// </summary>
        public static int FROM_HTML_SEPARATOR_LINE_BREAK_PARAGRAPH { get { if (!_FROM_HTML_SEPARATOR_LINE_BREAK_PARAGRAPHReady) { _FROM_HTML_SEPARATOR_LINE_BREAK_PARAGRAPHContent = SGetField<int>(LocalBridgeClazz, "FROM_HTML_SEPARATOR_LINE_BREAK_PARAGRAPH"); _FROM_HTML_SEPARATOR_LINE_BREAK_PARAGRAPHReady = true; } return _FROM_HTML_SEPARATOR_LINE_BREAK_PARAGRAPHContent; } }
        private static int _FROM_HTML_SEPARATOR_LINE_BREAK_PARAGRAPHContent = default;
        private static bool _FROM_HTML_SEPARATOR_LINE_BREAK_PARAGRAPHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Html.html#TO_HTML_PARAGRAPH_LINES_CONSECUTIVE"/>
        /// </summary>
        public static int TO_HTML_PARAGRAPH_LINES_CONSECUTIVE { get { if (!_TO_HTML_PARAGRAPH_LINES_CONSECUTIVEReady) { _TO_HTML_PARAGRAPH_LINES_CONSECUTIVEContent = SGetField<int>(LocalBridgeClazz, "TO_HTML_PARAGRAPH_LINES_CONSECUTIVE"); _TO_HTML_PARAGRAPH_LINES_CONSECUTIVEReady = true; } return _TO_HTML_PARAGRAPH_LINES_CONSECUTIVEContent; } }
        private static int _TO_HTML_PARAGRAPH_LINES_CONSECUTIVEContent = default;
        private static bool _TO_HTML_PARAGRAPH_LINES_CONSECUTIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Html.html#TO_HTML_PARAGRAPH_LINES_INDIVIDUAL"/>
        /// </summary>
        public static int TO_HTML_PARAGRAPH_LINES_INDIVIDUAL { get { if (!_TO_HTML_PARAGRAPH_LINES_INDIVIDUALReady) { _TO_HTML_PARAGRAPH_LINES_INDIVIDUALContent = SGetField<int>(LocalBridgeClazz, "TO_HTML_PARAGRAPH_LINES_INDIVIDUAL"); _TO_HTML_PARAGRAPH_LINES_INDIVIDUALReady = true; } return _TO_HTML_PARAGRAPH_LINES_INDIVIDUALContent; } }
        private static int _TO_HTML_PARAGRAPH_LINES_INDIVIDUALContent = default;
        private static bool _TO_HTML_PARAGRAPH_LINES_INDIVIDUALReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Html.html#fromHtml(java.lang.String,android.text.Html.ImageGetter,android.text.Html.TagHandler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Text.Html.ImageGetter"/></param>
        /// <param name="arg2"><see cref="Android.Text.Html.TagHandler"/></param>
        /// <returns><see cref="Android.Text.Spanned"/></returns>
        [global::System.Obsolete()]
        public static Android.Text.Spanned FromHtml(Java.Lang.String arg0, Android.Text.Html.ImageGetter arg1, Android.Text.Html.TagHandler arg2)
        {
            return SExecuteWithSignature<Android.Text.Spanned>(LocalBridgeClazz, "fromHtml", "(Ljava/lang/String;Landroid/text/Html$ImageGetter;Landroid/text/Html$TagHandler;)Landroid/text/Spanned;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Html.html#fromHtml(java.lang.String,int,android.text.Html.ImageGetter,android.text.Html.TagHandler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Text.Html.ImageGetter"/></param>
        /// <param name="arg3"><see cref="Android.Text.Html.TagHandler"/></param>
        /// <returns><see cref="Android.Text.Spanned"/></returns>
        public static Android.Text.Spanned FromHtml(Java.Lang.String arg0, int arg1, Android.Text.Html.ImageGetter arg2, Android.Text.Html.TagHandler arg3)
        {
            return SExecuteWithSignature<Android.Text.Spanned>(LocalBridgeClazz, "fromHtml", "(Ljava/lang/String;ILandroid/text/Html$ImageGetter;Landroid/text/Html$TagHandler;)Landroid/text/Spanned;", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Html.html#fromHtml(java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.Text.Spanned"/></returns>
        public static Android.Text.Spanned FromHtml(Java.Lang.String arg0, int arg1)
        {
            return SExecuteWithSignature<Android.Text.Spanned>(LocalBridgeClazz, "fromHtml", "(Ljava/lang/String;I)Landroid/text/Spanned;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Html.html#fromHtml(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Text.Spanned"/></returns>
        [global::System.Obsolete()]
        public static Android.Text.Spanned FromHtml(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<Android.Text.Spanned>(LocalBridgeClazz, "fromHtml", "(Ljava/lang/String;)Landroid/text/Spanned;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Html.html#escapeHtml(java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String EscapeHtml(Java.Lang.CharSequence arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "escapeHtml", "(Ljava/lang/CharSequence;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Html.html#toHtml(android.text.Spanned,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Text.Spanned"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String ToHtml(Android.Text.Spanned arg0, int arg1)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "toHtml", "(Landroid/text/Spanned;I)Ljava/lang/String;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Html.html#toHtml(android.text.Spanned)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Text.Spanned"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        [global::System.Obsolete()]
        public static Java.Lang.String ToHtml(Android.Text.Spanned arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "toHtml", "(Landroid/text/Spanned;)Ljava/lang/String;", arg0);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes
        #region ImageGetter implementation
        public partial class ImageGetter
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/Html.ImageGetter.html#getDrawable(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
            public Android.Graphics.Drawable.Drawable GetDrawable(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Graphics.Drawable.Drawable>("getDrawable", "(Ljava/lang/String;)Landroid/graphics/drawable/Drawable;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region TagHandler implementation
        public partial class TagHandler
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/Html.TagHandler.html#handleTag(boolean,java.lang.String,android.text.Editable,org.xml.sax.XMLReader)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <param name="arg2"><see cref="Android.Text.Editable"/></param>
            /// <param name="arg3"><see cref="Org.Xml.Sax.XMLReader"/></param>
            public void HandleTag(bool arg0, Java.Lang.String arg1, Android.Text.Editable arg2, Org.Xml.Sax.XMLReader arg3)
            {
                IExecuteWithSignature("handleTag", "(ZLjava/lang/String;Landroid/text/Editable;Lorg/xml/sax/XMLReader;)V", arg0, arg1, arg2, arg3);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Text
{
    #region IInputType
    /// <summary>
    /// .NET interface for TO BE DEFINED FROM USER
    /// </summary>
    public partial interface IInputType
    {
        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region InputType
    public partial class InputType : Android.Text.IInputType
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/InputType.html#TYPE_CLASS_DATETIME"/>
        /// </summary>
        public static int TYPE_CLASS_DATETIME { get { if (!_TYPE_CLASS_DATETIMEReady) { _TYPE_CLASS_DATETIMEContent = SGetField<int>(LocalBridgeClazz, "TYPE_CLASS_DATETIME"); _TYPE_CLASS_DATETIMEReady = true; } return _TYPE_CLASS_DATETIMEContent; } }
        private static int _TYPE_CLASS_DATETIMEContent = default;
        private static bool _TYPE_CLASS_DATETIMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/InputType.html#TYPE_CLASS_NUMBER"/>
        /// </summary>
        public static int TYPE_CLASS_NUMBER { get { if (!_TYPE_CLASS_NUMBERReady) { _TYPE_CLASS_NUMBERContent = SGetField<int>(LocalBridgeClazz, "TYPE_CLASS_NUMBER"); _TYPE_CLASS_NUMBERReady = true; } return _TYPE_CLASS_NUMBERContent; } }
        private static int _TYPE_CLASS_NUMBERContent = default;
        private static bool _TYPE_CLASS_NUMBERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/InputType.html#TYPE_CLASS_PHONE"/>
        /// </summary>
        public static int TYPE_CLASS_PHONE { get { if (!_TYPE_CLASS_PHONEReady) { _TYPE_CLASS_PHONEContent = SGetField<int>(LocalBridgeClazz, "TYPE_CLASS_PHONE"); _TYPE_CLASS_PHONEReady = true; } return _TYPE_CLASS_PHONEContent; } }
        private static int _TYPE_CLASS_PHONEContent = default;
        private static bool _TYPE_CLASS_PHONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/InputType.html#TYPE_CLASS_TEXT"/>
        /// </summary>
        public static int TYPE_CLASS_TEXT { get { if (!_TYPE_CLASS_TEXTReady) { _TYPE_CLASS_TEXTContent = SGetField<int>(LocalBridgeClazz, "TYPE_CLASS_TEXT"); _TYPE_CLASS_TEXTReady = true; } return _TYPE_CLASS_TEXTContent; } }
        private static int _TYPE_CLASS_TEXTContent = default;
        private static bool _TYPE_CLASS_TEXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/InputType.html#TYPE_DATETIME_VARIATION_DATE"/>
        /// </summary>
        public static int TYPE_DATETIME_VARIATION_DATE { get { if (!_TYPE_DATETIME_VARIATION_DATEReady) { _TYPE_DATETIME_VARIATION_DATEContent = SGetField<int>(LocalBridgeClazz, "TYPE_DATETIME_VARIATION_DATE"); _TYPE_DATETIME_VARIATION_DATEReady = true; } return _TYPE_DATETIME_VARIATION_DATEContent; } }
        private static int _TYPE_DATETIME_VARIATION_DATEContent = default;
        private static bool _TYPE_DATETIME_VARIATION_DATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/InputType.html#TYPE_DATETIME_VARIATION_NORMAL"/>
        /// </summary>
        public static int TYPE_DATETIME_VARIATION_NORMAL { get { if (!_TYPE_DATETIME_VARIATION_NORMALReady) { _TYPE_DATETIME_VARIATION_NORMALContent = SGetField<int>(LocalBridgeClazz, "TYPE_DATETIME_VARIATION_NORMAL"); _TYPE_DATETIME_VARIATION_NORMALReady = true; } return _TYPE_DATETIME_VARIATION_NORMALContent; } }
        private static int _TYPE_DATETIME_VARIATION_NORMALContent = default;
        private static bool _TYPE_DATETIME_VARIATION_NORMALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/InputType.html#TYPE_DATETIME_VARIATION_TIME"/>
        /// </summary>
        public static int TYPE_DATETIME_VARIATION_TIME { get { if (!_TYPE_DATETIME_VARIATION_TIMEReady) { _TYPE_DATETIME_VARIATION_TIMEContent = SGetField<int>(LocalBridgeClazz, "TYPE_DATETIME_VARIATION_TIME"); _TYPE_DATETIME_VARIATION_TIMEReady = true; } return _TYPE_DATETIME_VARIATION_TIMEContent; } }
        private static int _TYPE_DATETIME_VARIATION_TIMEContent = default;
        private static bool _TYPE_DATETIME_VARIATION_TIMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/InputType.html#TYPE_MASK_CLASS"/>
        /// </summary>
        public static int TYPE_MASK_CLASS { get { if (!_TYPE_MASK_CLASSReady) { _TYPE_MASK_CLASSContent = SGetField<int>(LocalBridgeClazz, "TYPE_MASK_CLASS"); _TYPE_MASK_CLASSReady = true; } return _TYPE_MASK_CLASSContent; } }
        private static int _TYPE_MASK_CLASSContent = default;
        private static bool _TYPE_MASK_CLASSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/InputType.html#TYPE_MASK_FLAGS"/>
        /// </summary>
        public static int TYPE_MASK_FLAGS { get { if (!_TYPE_MASK_FLAGSReady) { _TYPE_MASK_FLAGSContent = SGetField<int>(LocalBridgeClazz, "TYPE_MASK_FLAGS"); _TYPE_MASK_FLAGSReady = true; } return _TYPE_MASK_FLAGSContent; } }
        private static int _TYPE_MASK_FLAGSContent = default;
        private static bool _TYPE_MASK_FLAGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/InputType.html#TYPE_MASK_VARIATION"/>
        /// </summary>
        public static int TYPE_MASK_VARIATION { get { if (!_TYPE_MASK_VARIATIONReady) { _TYPE_MASK_VARIATIONContent = SGetField<int>(LocalBridgeClazz, "TYPE_MASK_VARIATION"); _TYPE_MASK_VARIATIONReady = true; } return _TYPE_MASK_VARIATIONContent; } }
        private static int _TYPE_MASK_VARIATIONContent = default;
        private static bool _TYPE_MASK_VARIATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/InputType.html#TYPE_NULL"/>
        /// </summary>
        public static int TYPE_NULL { get { if (!_TYPE_NULLReady) { _TYPE_NULLContent = SGetField<int>(LocalBridgeClazz, "TYPE_NULL"); _TYPE_NULLReady = true; } return _TYPE_NULLContent; } }
        private static int _TYPE_NULLContent = default;
        private static bool _TYPE_NULLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/InputType.html#TYPE_NUMBER_FLAG_DECIMAL"/>
        /// </summary>
        public static int TYPE_NUMBER_FLAG_DECIMAL { get { if (!_TYPE_NUMBER_FLAG_DECIMALReady) { _TYPE_NUMBER_FLAG_DECIMALContent = SGetField<int>(LocalBridgeClazz, "TYPE_NUMBER_FLAG_DECIMAL"); _TYPE_NUMBER_FLAG_DECIMALReady = true; } return _TYPE_NUMBER_FLAG_DECIMALContent; } }
        private static int _TYPE_NUMBER_FLAG_DECIMALContent = default;
        private static bool _TYPE_NUMBER_FLAG_DECIMALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/InputType.html#TYPE_NUMBER_FLAG_SIGNED"/>
        /// </summary>
        public static int TYPE_NUMBER_FLAG_SIGNED { get { if (!_TYPE_NUMBER_FLAG_SIGNEDReady) { _TYPE_NUMBER_FLAG_SIGNEDContent = SGetField<int>(LocalBridgeClazz, "TYPE_NUMBER_FLAG_SIGNED"); _TYPE_NUMBER_FLAG_SIGNEDReady = true; } return _TYPE_NUMBER_FLAG_SIGNEDContent; } }
        private static int _TYPE_NUMBER_FLAG_SIGNEDContent = default;
        private static bool _TYPE_NUMBER_FLAG_SIGNEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/InputType.html#TYPE_NUMBER_VARIATION_NORMAL"/>
        /// </summary>
        public static int TYPE_NUMBER_VARIATION_NORMAL { get { if (!_TYPE_NUMBER_VARIATION_NORMALReady) { _TYPE_NUMBER_VARIATION_NORMALContent = SGetField<int>(LocalBridgeClazz, "TYPE_NUMBER_VARIATION_NORMAL"); _TYPE_NUMBER_VARIATION_NORMALReady = true; } return _TYPE_NUMBER_VARIATION_NORMALContent; } }
        private static int _TYPE_NUMBER_VARIATION_NORMALContent = default;
        private static bool _TYPE_NUMBER_VARIATION_NORMALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/InputType.html#TYPE_NUMBER_VARIATION_PASSWORD"/>
        /// </summary>
        public static int TYPE_NUMBER_VARIATION_PASSWORD { get { if (!_TYPE_NUMBER_VARIATION_PASSWORDReady) { _TYPE_NUMBER_VARIATION_PASSWORDContent = SGetField<int>(LocalBridgeClazz, "TYPE_NUMBER_VARIATION_PASSWORD"); _TYPE_NUMBER_VARIATION_PASSWORDReady = true; } return _TYPE_NUMBER_VARIATION_PASSWORDContent; } }
        private static int _TYPE_NUMBER_VARIATION_PASSWORDContent = default;
        private static bool _TYPE_NUMBER_VARIATION_PASSWORDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/InputType.html#TYPE_TEXT_FLAG_AUTO_COMPLETE"/>
        /// </summary>
        public static int TYPE_TEXT_FLAG_AUTO_COMPLETE { get { if (!_TYPE_TEXT_FLAG_AUTO_COMPLETEReady) { _TYPE_TEXT_FLAG_AUTO_COMPLETEContent = SGetField<int>(LocalBridgeClazz, "TYPE_TEXT_FLAG_AUTO_COMPLETE"); _TYPE_TEXT_FLAG_AUTO_COMPLETEReady = true; } return _TYPE_TEXT_FLAG_AUTO_COMPLETEContent; } }
        private static int _TYPE_TEXT_FLAG_AUTO_COMPLETEContent = default;
        private static bool _TYPE_TEXT_FLAG_AUTO_COMPLETEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/InputType.html#TYPE_TEXT_FLAG_AUTO_CORRECT"/>
        /// </summary>
        public static int TYPE_TEXT_FLAG_AUTO_CORRECT { get { if (!_TYPE_TEXT_FLAG_AUTO_CORRECTReady) { _TYPE_TEXT_FLAG_AUTO_CORRECTContent = SGetField<int>(LocalBridgeClazz, "TYPE_TEXT_FLAG_AUTO_CORRECT"); _TYPE_TEXT_FLAG_AUTO_CORRECTReady = true; } return _TYPE_TEXT_FLAG_AUTO_CORRECTContent; } }
        private static int _TYPE_TEXT_FLAG_AUTO_CORRECTContent = default;
        private static bool _TYPE_TEXT_FLAG_AUTO_CORRECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/InputType.html#TYPE_TEXT_FLAG_CAP_CHARACTERS"/>
        /// </summary>
        public static int TYPE_TEXT_FLAG_CAP_CHARACTERS { get { if (!_TYPE_TEXT_FLAG_CAP_CHARACTERSReady) { _TYPE_TEXT_FLAG_CAP_CHARACTERSContent = SGetField<int>(LocalBridgeClazz, "TYPE_TEXT_FLAG_CAP_CHARACTERS"); _TYPE_TEXT_FLAG_CAP_CHARACTERSReady = true; } return _TYPE_TEXT_FLAG_CAP_CHARACTERSContent; } }
        private static int _TYPE_TEXT_FLAG_CAP_CHARACTERSContent = default;
        private static bool _TYPE_TEXT_FLAG_CAP_CHARACTERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/InputType.html#TYPE_TEXT_FLAG_CAP_SENTENCES"/>
        /// </summary>
        public static int TYPE_TEXT_FLAG_CAP_SENTENCES { get { if (!_TYPE_TEXT_FLAG_CAP_SENTENCESReady) { _TYPE_TEXT_FLAG_CAP_SENTENCESContent = SGetField<int>(LocalBridgeClazz, "TYPE_TEXT_FLAG_CAP_SENTENCES"); _TYPE_TEXT_FLAG_CAP_SENTENCESReady = true; } return _TYPE_TEXT_FLAG_CAP_SENTENCESContent; } }
        private static int _TYPE_TEXT_FLAG_CAP_SENTENCESContent = default;
        private static bool _TYPE_TEXT_FLAG_CAP_SENTENCESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/InputType.html#TYPE_TEXT_FLAG_CAP_WORDS"/>
        /// </summary>
        public static int TYPE_TEXT_FLAG_CAP_WORDS { get { if (!_TYPE_TEXT_FLAG_CAP_WORDSReady) { _TYPE_TEXT_FLAG_CAP_WORDSContent = SGetField<int>(LocalBridgeClazz, "TYPE_TEXT_FLAG_CAP_WORDS"); _TYPE_TEXT_FLAG_CAP_WORDSReady = true; } return _TYPE_TEXT_FLAG_CAP_WORDSContent; } }
        private static int _TYPE_TEXT_FLAG_CAP_WORDSContent = default;
        private static bool _TYPE_TEXT_FLAG_CAP_WORDSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/InputType.html#TYPE_TEXT_FLAG_ENABLE_TEXT_CONVERSION_SUGGESTIONS"/>
        /// </summary>
        public static int TYPE_TEXT_FLAG_ENABLE_TEXT_CONVERSION_SUGGESTIONS { get { if (!_TYPE_TEXT_FLAG_ENABLE_TEXT_CONVERSION_SUGGESTIONSReady) { _TYPE_TEXT_FLAG_ENABLE_TEXT_CONVERSION_SUGGESTIONSContent = SGetField<int>(LocalBridgeClazz, "TYPE_TEXT_FLAG_ENABLE_TEXT_CONVERSION_SUGGESTIONS"); _TYPE_TEXT_FLAG_ENABLE_TEXT_CONVERSION_SUGGESTIONSReady = true; } return _TYPE_TEXT_FLAG_ENABLE_TEXT_CONVERSION_SUGGESTIONSContent; } }
        private static int _TYPE_TEXT_FLAG_ENABLE_TEXT_CONVERSION_SUGGESTIONSContent = default;
        private static bool _TYPE_TEXT_FLAG_ENABLE_TEXT_CONVERSION_SUGGESTIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/InputType.html#TYPE_TEXT_FLAG_IME_MULTI_LINE"/>
        /// </summary>
        public static int TYPE_TEXT_FLAG_IME_MULTI_LINE { get { if (!_TYPE_TEXT_FLAG_IME_MULTI_LINEReady) { _TYPE_TEXT_FLAG_IME_MULTI_LINEContent = SGetField<int>(LocalBridgeClazz, "TYPE_TEXT_FLAG_IME_MULTI_LINE"); _TYPE_TEXT_FLAG_IME_MULTI_LINEReady = true; } return _TYPE_TEXT_FLAG_IME_MULTI_LINEContent; } }
        private static int _TYPE_TEXT_FLAG_IME_MULTI_LINEContent = default;
        private static bool _TYPE_TEXT_FLAG_IME_MULTI_LINEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/InputType.html#TYPE_TEXT_FLAG_MULTI_LINE"/>
        /// </summary>
        public static int TYPE_TEXT_FLAG_MULTI_LINE { get { if (!_TYPE_TEXT_FLAG_MULTI_LINEReady) { _TYPE_TEXT_FLAG_MULTI_LINEContent = SGetField<int>(LocalBridgeClazz, "TYPE_TEXT_FLAG_MULTI_LINE"); _TYPE_TEXT_FLAG_MULTI_LINEReady = true; } return _TYPE_TEXT_FLAG_MULTI_LINEContent; } }
        private static int _TYPE_TEXT_FLAG_MULTI_LINEContent = default;
        private static bool _TYPE_TEXT_FLAG_MULTI_LINEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/InputType.html#TYPE_TEXT_FLAG_NO_SUGGESTIONS"/>
        /// </summary>
        public static int TYPE_TEXT_FLAG_NO_SUGGESTIONS { get { if (!_TYPE_TEXT_FLAG_NO_SUGGESTIONSReady) { _TYPE_TEXT_FLAG_NO_SUGGESTIONSContent = SGetField<int>(LocalBridgeClazz, "TYPE_TEXT_FLAG_NO_SUGGESTIONS"); _TYPE_TEXT_FLAG_NO_SUGGESTIONSReady = true; } return _TYPE_TEXT_FLAG_NO_SUGGESTIONSContent; } }
        private static int _TYPE_TEXT_FLAG_NO_SUGGESTIONSContent = default;
        private static bool _TYPE_TEXT_FLAG_NO_SUGGESTIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/InputType.html#TYPE_TEXT_VARIATION_EMAIL_ADDRESS"/>
        /// </summary>
        public static int TYPE_TEXT_VARIATION_EMAIL_ADDRESS { get { if (!_TYPE_TEXT_VARIATION_EMAIL_ADDRESSReady) { _TYPE_TEXT_VARIATION_EMAIL_ADDRESSContent = SGetField<int>(LocalBridgeClazz, "TYPE_TEXT_VARIATION_EMAIL_ADDRESS"); _TYPE_TEXT_VARIATION_EMAIL_ADDRESSReady = true; } return _TYPE_TEXT_VARIATION_EMAIL_ADDRESSContent; } }
        private static int _TYPE_TEXT_VARIATION_EMAIL_ADDRESSContent = default;
        private static bool _TYPE_TEXT_VARIATION_EMAIL_ADDRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/InputType.html#TYPE_TEXT_VARIATION_EMAIL_SUBJECT"/>
        /// </summary>
        public static int TYPE_TEXT_VARIATION_EMAIL_SUBJECT { get { if (!_TYPE_TEXT_VARIATION_EMAIL_SUBJECTReady) { _TYPE_TEXT_VARIATION_EMAIL_SUBJECTContent = SGetField<int>(LocalBridgeClazz, "TYPE_TEXT_VARIATION_EMAIL_SUBJECT"); _TYPE_TEXT_VARIATION_EMAIL_SUBJECTReady = true; } return _TYPE_TEXT_VARIATION_EMAIL_SUBJECTContent; } }
        private static int _TYPE_TEXT_VARIATION_EMAIL_SUBJECTContent = default;
        private static bool _TYPE_TEXT_VARIATION_EMAIL_SUBJECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/InputType.html#TYPE_TEXT_VARIATION_FILTER"/>
        /// </summary>
        public static int TYPE_TEXT_VARIATION_FILTER { get { if (!_TYPE_TEXT_VARIATION_FILTERReady) { _TYPE_TEXT_VARIATION_FILTERContent = SGetField<int>(LocalBridgeClazz, "TYPE_TEXT_VARIATION_FILTER"); _TYPE_TEXT_VARIATION_FILTERReady = true; } return _TYPE_TEXT_VARIATION_FILTERContent; } }
        private static int _TYPE_TEXT_VARIATION_FILTERContent = default;
        private static bool _TYPE_TEXT_VARIATION_FILTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/InputType.html#TYPE_TEXT_VARIATION_LONG_MESSAGE"/>
        /// </summary>
        public static int TYPE_TEXT_VARIATION_LONG_MESSAGE { get { if (!_TYPE_TEXT_VARIATION_LONG_MESSAGEReady) { _TYPE_TEXT_VARIATION_LONG_MESSAGEContent = SGetField<int>(LocalBridgeClazz, "TYPE_TEXT_VARIATION_LONG_MESSAGE"); _TYPE_TEXT_VARIATION_LONG_MESSAGEReady = true; } return _TYPE_TEXT_VARIATION_LONG_MESSAGEContent; } }
        private static int _TYPE_TEXT_VARIATION_LONG_MESSAGEContent = default;
        private static bool _TYPE_TEXT_VARIATION_LONG_MESSAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/InputType.html#TYPE_TEXT_VARIATION_NORMAL"/>
        /// </summary>
        public static int TYPE_TEXT_VARIATION_NORMAL { get { if (!_TYPE_TEXT_VARIATION_NORMALReady) { _TYPE_TEXT_VARIATION_NORMALContent = SGetField<int>(LocalBridgeClazz, "TYPE_TEXT_VARIATION_NORMAL"); _TYPE_TEXT_VARIATION_NORMALReady = true; } return _TYPE_TEXT_VARIATION_NORMALContent; } }
        private static int _TYPE_TEXT_VARIATION_NORMALContent = default;
        private static bool _TYPE_TEXT_VARIATION_NORMALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/InputType.html#TYPE_TEXT_VARIATION_PASSWORD"/>
        /// </summary>
        public static int TYPE_TEXT_VARIATION_PASSWORD { get { if (!_TYPE_TEXT_VARIATION_PASSWORDReady) { _TYPE_TEXT_VARIATION_PASSWORDContent = SGetField<int>(LocalBridgeClazz, "TYPE_TEXT_VARIATION_PASSWORD"); _TYPE_TEXT_VARIATION_PASSWORDReady = true; } return _TYPE_TEXT_VARIATION_PASSWORDContent; } }
        private static int _TYPE_TEXT_VARIATION_PASSWORDContent = default;
        private static bool _TYPE_TEXT_VARIATION_PASSWORDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/InputType.html#TYPE_TEXT_VARIATION_PERSON_NAME"/>
        /// </summary>
        public static int TYPE_TEXT_VARIATION_PERSON_NAME { get { if (!_TYPE_TEXT_VARIATION_PERSON_NAMEReady) { _TYPE_TEXT_VARIATION_PERSON_NAMEContent = SGetField<int>(LocalBridgeClazz, "TYPE_TEXT_VARIATION_PERSON_NAME"); _TYPE_TEXT_VARIATION_PERSON_NAMEReady = true; } return _TYPE_TEXT_VARIATION_PERSON_NAMEContent; } }
        private static int _TYPE_TEXT_VARIATION_PERSON_NAMEContent = default;
        private static bool _TYPE_TEXT_VARIATION_PERSON_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/InputType.html#TYPE_TEXT_VARIATION_PHONETIC"/>
        /// </summary>
        public static int TYPE_TEXT_VARIATION_PHONETIC { get { if (!_TYPE_TEXT_VARIATION_PHONETICReady) { _TYPE_TEXT_VARIATION_PHONETICContent = SGetField<int>(LocalBridgeClazz, "TYPE_TEXT_VARIATION_PHONETIC"); _TYPE_TEXT_VARIATION_PHONETICReady = true; } return _TYPE_TEXT_VARIATION_PHONETICContent; } }
        private static int _TYPE_TEXT_VARIATION_PHONETICContent = default;
        private static bool _TYPE_TEXT_VARIATION_PHONETICReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/InputType.html#TYPE_TEXT_VARIATION_POSTAL_ADDRESS"/>
        /// </summary>
        public static int TYPE_TEXT_VARIATION_POSTAL_ADDRESS { get { if (!_TYPE_TEXT_VARIATION_POSTAL_ADDRESSReady) { _TYPE_TEXT_VARIATION_POSTAL_ADDRESSContent = SGetField<int>(LocalBridgeClazz, "TYPE_TEXT_VARIATION_POSTAL_ADDRESS"); _TYPE_TEXT_VARIATION_POSTAL_ADDRESSReady = true; } return _TYPE_TEXT_VARIATION_POSTAL_ADDRESSContent; } }
        private static int _TYPE_TEXT_VARIATION_POSTAL_ADDRESSContent = default;
        private static bool _TYPE_TEXT_VARIATION_POSTAL_ADDRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/InputType.html#TYPE_TEXT_VARIATION_SHORT_MESSAGE"/>
        /// </summary>
        public static int TYPE_TEXT_VARIATION_SHORT_MESSAGE { get { if (!_TYPE_TEXT_VARIATION_SHORT_MESSAGEReady) { _TYPE_TEXT_VARIATION_SHORT_MESSAGEContent = SGetField<int>(LocalBridgeClazz, "TYPE_TEXT_VARIATION_SHORT_MESSAGE"); _TYPE_TEXT_VARIATION_SHORT_MESSAGEReady = true; } return _TYPE_TEXT_VARIATION_SHORT_MESSAGEContent; } }
        private static int _TYPE_TEXT_VARIATION_SHORT_MESSAGEContent = default;
        private static bool _TYPE_TEXT_VARIATION_SHORT_MESSAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/InputType.html#TYPE_TEXT_VARIATION_URI"/>
        /// </summary>
        public static int TYPE_TEXT_VARIATION_URI { get { if (!_TYPE_TEXT_VARIATION_URIReady) { _TYPE_TEXT_VARIATION_URIContent = SGetField<int>(LocalBridgeClazz, "TYPE_TEXT_VARIATION_URI"); _TYPE_TEXT_VARIATION_URIReady = true; } return _TYPE_TEXT_VARIATION_URIContent; } }
        private static int _TYPE_TEXT_VARIATION_URIContent = default;
        private static bool _TYPE_TEXT_VARIATION_URIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/InputType.html#TYPE_TEXT_VARIATION_VISIBLE_PASSWORD"/>
        /// </summary>
        public static int TYPE_TEXT_VARIATION_VISIBLE_PASSWORD { get { if (!_TYPE_TEXT_VARIATION_VISIBLE_PASSWORDReady) { _TYPE_TEXT_VARIATION_VISIBLE_PASSWORDContent = SGetField<int>(LocalBridgeClazz, "TYPE_TEXT_VARIATION_VISIBLE_PASSWORD"); _TYPE_TEXT_VARIATION_VISIBLE_PASSWORDReady = true; } return _TYPE_TEXT_VARIATION_VISIBLE_PASSWORDContent; } }
        private static int _TYPE_TEXT_VARIATION_VISIBLE_PASSWORDContent = default;
        private static bool _TYPE_TEXT_VARIATION_VISIBLE_PASSWORDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/InputType.html#TYPE_TEXT_VARIATION_WEB_EDIT_TEXT"/>
        /// </summary>
        public static int TYPE_TEXT_VARIATION_WEB_EDIT_TEXT { get { if (!_TYPE_TEXT_VARIATION_WEB_EDIT_TEXTReady) { _TYPE_TEXT_VARIATION_WEB_EDIT_TEXTContent = SGetField<int>(LocalBridgeClazz, "TYPE_TEXT_VARIATION_WEB_EDIT_TEXT"); _TYPE_TEXT_VARIATION_WEB_EDIT_TEXTReady = true; } return _TYPE_TEXT_VARIATION_WEB_EDIT_TEXTContent; } }
        private static int _TYPE_TEXT_VARIATION_WEB_EDIT_TEXTContent = default;
        private static bool _TYPE_TEXT_VARIATION_WEB_EDIT_TEXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/InputType.html#TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS"/>
        /// </summary>
        public static int TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS { get { if (!_TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESSReady) { _TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESSContent = SGetField<int>(LocalBridgeClazz, "TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS"); _TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESSReady = true; } return _TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESSContent; } }
        private static int _TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESSContent = default;
        private static bool _TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/InputType.html#TYPE_TEXT_VARIATION_WEB_PASSWORD"/>
        /// </summary>
        public static int TYPE_TEXT_VARIATION_WEB_PASSWORD { get { if (!_TYPE_TEXT_VARIATION_WEB_PASSWORDReady) { _TYPE_TEXT_VARIATION_WEB_PASSWORDContent = SGetField<int>(LocalBridgeClazz, "TYPE_TEXT_VARIATION_WEB_PASSWORD"); _TYPE_TEXT_VARIATION_WEB_PASSWORDReady = true; } return _TYPE_TEXT_VARIATION_WEB_PASSWORDContent; } }
        private static int _TYPE_TEXT_VARIATION_WEB_PASSWORDContent = default;
        private static bool _TYPE_TEXT_VARIATION_WEB_PASSWORDReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
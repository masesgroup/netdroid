/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Text
{
    #region Layout
    public partial class Layout
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#INCLUSION_STRATEGY_ANY_OVERLAP"/>
        /// </summary>
        public static Android.Text.Layout.TextInclusionStrategy INCLUSION_STRATEGY_ANY_OVERLAP { get { if (!_INCLUSION_STRATEGY_ANY_OVERLAPReady) { _INCLUSION_STRATEGY_ANY_OVERLAPContent = SGetField<Android.Text.Layout.TextInclusionStrategy>(LocalBridgeClazz, "INCLUSION_STRATEGY_ANY_OVERLAP"); _INCLUSION_STRATEGY_ANY_OVERLAPReady = true; } return _INCLUSION_STRATEGY_ANY_OVERLAPContent; } }
        private static Android.Text.Layout.TextInclusionStrategy _INCLUSION_STRATEGY_ANY_OVERLAPContent = default;
        private static bool _INCLUSION_STRATEGY_ANY_OVERLAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#INCLUSION_STRATEGY_CONTAINS_ALL"/>
        /// </summary>
        public static Android.Text.Layout.TextInclusionStrategy INCLUSION_STRATEGY_CONTAINS_ALL { get { if (!_INCLUSION_STRATEGY_CONTAINS_ALLReady) { _INCLUSION_STRATEGY_CONTAINS_ALLContent = SGetField<Android.Text.Layout.TextInclusionStrategy>(LocalBridgeClazz, "INCLUSION_STRATEGY_CONTAINS_ALL"); _INCLUSION_STRATEGY_CONTAINS_ALLReady = true; } return _INCLUSION_STRATEGY_CONTAINS_ALLContent; } }
        private static Android.Text.Layout.TextInclusionStrategy _INCLUSION_STRATEGY_CONTAINS_ALLContent = default;
        private static bool _INCLUSION_STRATEGY_CONTAINS_ALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#INCLUSION_STRATEGY_CONTAINS_CENTER"/>
        /// </summary>
        public static Android.Text.Layout.TextInclusionStrategy INCLUSION_STRATEGY_CONTAINS_CENTER { get { if (!_INCLUSION_STRATEGY_CONTAINS_CENTERReady) { _INCLUSION_STRATEGY_CONTAINS_CENTERContent = SGetField<Android.Text.Layout.TextInclusionStrategy>(LocalBridgeClazz, "INCLUSION_STRATEGY_CONTAINS_CENTER"); _INCLUSION_STRATEGY_CONTAINS_CENTERReady = true; } return _INCLUSION_STRATEGY_CONTAINS_CENTERContent; } }
        private static Android.Text.Layout.TextInclusionStrategy _INCLUSION_STRATEGY_CONTAINS_CENTERContent = default;
        private static bool _INCLUSION_STRATEGY_CONTAINS_CENTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#DEFAULT_LINESPACING_ADDITION"/>
        /// </summary>
        public static float DEFAULT_LINESPACING_ADDITION { get { if (!_DEFAULT_LINESPACING_ADDITIONReady) { _DEFAULT_LINESPACING_ADDITIONContent = SGetField<float>(LocalBridgeClazz, "DEFAULT_LINESPACING_ADDITION"); _DEFAULT_LINESPACING_ADDITIONReady = true; } return _DEFAULT_LINESPACING_ADDITIONContent; } }
        private static float _DEFAULT_LINESPACING_ADDITIONContent = default;
        private static bool _DEFAULT_LINESPACING_ADDITIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#DEFAULT_LINESPACING_MULTIPLIER"/>
        /// </summary>
        public static float DEFAULT_LINESPACING_MULTIPLIER { get { if (!_DEFAULT_LINESPACING_MULTIPLIERReady) { _DEFAULT_LINESPACING_MULTIPLIERContent = SGetField<float>(LocalBridgeClazz, "DEFAULT_LINESPACING_MULTIPLIER"); _DEFAULT_LINESPACING_MULTIPLIERReady = true; } return _DEFAULT_LINESPACING_MULTIPLIERContent; } }
        private static float _DEFAULT_LINESPACING_MULTIPLIERContent = default;
        private static bool _DEFAULT_LINESPACING_MULTIPLIERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#BREAK_STRATEGY_BALANCED"/>
        /// </summary>
        public static int BREAK_STRATEGY_BALANCED { get { if (!_BREAK_STRATEGY_BALANCEDReady) { _BREAK_STRATEGY_BALANCEDContent = SGetField<int>(LocalBridgeClazz, "BREAK_STRATEGY_BALANCED"); _BREAK_STRATEGY_BALANCEDReady = true; } return _BREAK_STRATEGY_BALANCEDContent; } }
        private static int _BREAK_STRATEGY_BALANCEDContent = default;
        private static bool _BREAK_STRATEGY_BALANCEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#BREAK_STRATEGY_HIGH_QUALITY"/>
        /// </summary>
        public static int BREAK_STRATEGY_HIGH_QUALITY { get { if (!_BREAK_STRATEGY_HIGH_QUALITYReady) { _BREAK_STRATEGY_HIGH_QUALITYContent = SGetField<int>(LocalBridgeClazz, "BREAK_STRATEGY_HIGH_QUALITY"); _BREAK_STRATEGY_HIGH_QUALITYReady = true; } return _BREAK_STRATEGY_HIGH_QUALITYContent; } }
        private static int _BREAK_STRATEGY_HIGH_QUALITYContent = default;
        private static bool _BREAK_STRATEGY_HIGH_QUALITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#BREAK_STRATEGY_SIMPLE"/>
        /// </summary>
        public static int BREAK_STRATEGY_SIMPLE { get { if (!_BREAK_STRATEGY_SIMPLEReady) { _BREAK_STRATEGY_SIMPLEContent = SGetField<int>(LocalBridgeClazz, "BREAK_STRATEGY_SIMPLE"); _BREAK_STRATEGY_SIMPLEReady = true; } return _BREAK_STRATEGY_SIMPLEContent; } }
        private static int _BREAK_STRATEGY_SIMPLEContent = default;
        private static bool _BREAK_STRATEGY_SIMPLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#DIR_LEFT_TO_RIGHT"/>
        /// </summary>
        public static int DIR_LEFT_TO_RIGHT { get { if (!_DIR_LEFT_TO_RIGHTReady) { _DIR_LEFT_TO_RIGHTContent = SGetField<int>(LocalBridgeClazz, "DIR_LEFT_TO_RIGHT"); _DIR_LEFT_TO_RIGHTReady = true; } return _DIR_LEFT_TO_RIGHTContent; } }
        private static int _DIR_LEFT_TO_RIGHTContent = default;
        private static bool _DIR_LEFT_TO_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#DIR_RIGHT_TO_LEFT"/>
        /// </summary>
        public static int DIR_RIGHT_TO_LEFT { get { if (!_DIR_RIGHT_TO_LEFTReady) { _DIR_RIGHT_TO_LEFTContent = SGetField<int>(LocalBridgeClazz, "DIR_RIGHT_TO_LEFT"); _DIR_RIGHT_TO_LEFTReady = true; } return _DIR_RIGHT_TO_LEFTContent; } }
        private static int _DIR_RIGHT_TO_LEFTContent = default;
        private static bool _DIR_RIGHT_TO_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#HYPHENATION_FREQUENCY_FULL"/>
        /// </summary>
        public static int HYPHENATION_FREQUENCY_FULL { get { if (!_HYPHENATION_FREQUENCY_FULLReady) { _HYPHENATION_FREQUENCY_FULLContent = SGetField<int>(LocalBridgeClazz, "HYPHENATION_FREQUENCY_FULL"); _HYPHENATION_FREQUENCY_FULLReady = true; } return _HYPHENATION_FREQUENCY_FULLContent; } }
        private static int _HYPHENATION_FREQUENCY_FULLContent = default;
        private static bool _HYPHENATION_FREQUENCY_FULLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#HYPHENATION_FREQUENCY_FULL_FAST"/>
        /// </summary>
        public static int HYPHENATION_FREQUENCY_FULL_FAST { get { if (!_HYPHENATION_FREQUENCY_FULL_FASTReady) { _HYPHENATION_FREQUENCY_FULL_FASTContent = SGetField<int>(LocalBridgeClazz, "HYPHENATION_FREQUENCY_FULL_FAST"); _HYPHENATION_FREQUENCY_FULL_FASTReady = true; } return _HYPHENATION_FREQUENCY_FULL_FASTContent; } }
        private static int _HYPHENATION_FREQUENCY_FULL_FASTContent = default;
        private static bool _HYPHENATION_FREQUENCY_FULL_FASTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#HYPHENATION_FREQUENCY_NONE"/>
        /// </summary>
        public static int HYPHENATION_FREQUENCY_NONE { get { if (!_HYPHENATION_FREQUENCY_NONEReady) { _HYPHENATION_FREQUENCY_NONEContent = SGetField<int>(LocalBridgeClazz, "HYPHENATION_FREQUENCY_NONE"); _HYPHENATION_FREQUENCY_NONEReady = true; } return _HYPHENATION_FREQUENCY_NONEContent; } }
        private static int _HYPHENATION_FREQUENCY_NONEContent = default;
        private static bool _HYPHENATION_FREQUENCY_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#HYPHENATION_FREQUENCY_NORMAL"/>
        /// </summary>
        public static int HYPHENATION_FREQUENCY_NORMAL { get { if (!_HYPHENATION_FREQUENCY_NORMALReady) { _HYPHENATION_FREQUENCY_NORMALContent = SGetField<int>(LocalBridgeClazz, "HYPHENATION_FREQUENCY_NORMAL"); _HYPHENATION_FREQUENCY_NORMALReady = true; } return _HYPHENATION_FREQUENCY_NORMALContent; } }
        private static int _HYPHENATION_FREQUENCY_NORMALContent = default;
        private static bool _HYPHENATION_FREQUENCY_NORMALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#HYPHENATION_FREQUENCY_NORMAL_FAST"/>
        /// </summary>
        public static int HYPHENATION_FREQUENCY_NORMAL_FAST { get { if (!_HYPHENATION_FREQUENCY_NORMAL_FASTReady) { _HYPHENATION_FREQUENCY_NORMAL_FASTContent = SGetField<int>(LocalBridgeClazz, "HYPHENATION_FREQUENCY_NORMAL_FAST"); _HYPHENATION_FREQUENCY_NORMAL_FASTReady = true; } return _HYPHENATION_FREQUENCY_NORMAL_FASTContent; } }
        private static int _HYPHENATION_FREQUENCY_NORMAL_FASTContent = default;
        private static bool _HYPHENATION_FREQUENCY_NORMAL_FASTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#JUSTIFICATION_MODE_INTER_WORD"/>
        /// </summary>
        public static int JUSTIFICATION_MODE_INTER_WORD { get { if (!_JUSTIFICATION_MODE_INTER_WORDReady) { _JUSTIFICATION_MODE_INTER_WORDContent = SGetField<int>(LocalBridgeClazz, "JUSTIFICATION_MODE_INTER_WORD"); _JUSTIFICATION_MODE_INTER_WORDReady = true; } return _JUSTIFICATION_MODE_INTER_WORDContent; } }
        private static int _JUSTIFICATION_MODE_INTER_WORDContent = default;
        private static bool _JUSTIFICATION_MODE_INTER_WORDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#JUSTIFICATION_MODE_NONE"/>
        /// </summary>
        public static int JUSTIFICATION_MODE_NONE { get { if (!_JUSTIFICATION_MODE_NONEReady) { _JUSTIFICATION_MODE_NONEContent = SGetField<int>(LocalBridgeClazz, "JUSTIFICATION_MODE_NONE"); _JUSTIFICATION_MODE_NONEReady = true; } return _JUSTIFICATION_MODE_NONEContent; } }
        private static int _JUSTIFICATION_MODE_NONEContent = default;
        private static bool _JUSTIFICATION_MODE_NONEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getDesiredWidth(java.lang.CharSequence,android.text.TextPaint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="Android.Text.TextPaint"/></param>
        /// <returns><see cref="float"/></returns>
        public static float GetDesiredWidth(Java.Lang.CharSequence arg0, Android.Text.TextPaint arg1)
        {
            return SExecute<float>(LocalBridgeClazz, "getDesiredWidth", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getDesiredWidth(java.lang.CharSequence,int,int,android.text.TextPaint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Android.Text.TextPaint"/></param>
        /// <returns><see cref="float"/></returns>
        public static float GetDesiredWidth(Java.Lang.CharSequence arg0, int arg1, int arg2, Android.Text.TextPaint arg3)
        {
            return SExecute<float>(LocalBridgeClazz, "getDesiredWidth", arg0, arg1, arg2, arg3);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getLineDirections(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Text.Layout.Directions"/></returns>
        public Android.Text.Layout.Directions GetLineDirections(int arg0)
        {
            return IExecuteWithSignature<Android.Text.Layout.Directions>("getLineDirections", "(I)Landroid/text/Layout$Directions;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getLineContainsTab(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool GetLineContainsTab(int arg0)
        {
            return IExecuteWithSignature<bool>("getLineContainsTab", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getBottomPadding()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetBottomPadding()
        {
            return IExecuteWithSignature<int>("getBottomPadding", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getEllipsisCount(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetEllipsisCount(int arg0)
        {
            return IExecuteWithSignature<int>("getEllipsisCount", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getEllipsisStart(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetEllipsisStart(int arg0)
        {
            return IExecuteWithSignature<int>("getEllipsisStart", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getLineCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetLineCount()
        {
            return IExecuteWithSignature<int>("getLineCount", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getLineDescent(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetLineDescent(int arg0)
        {
            return IExecuteWithSignature<int>("getLineDescent", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getLineStart(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetLineStart(int arg0)
        {
            return IExecuteWithSignature<int>("getLineStart", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getLineTop(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetLineTop(int arg0)
        {
            return IExecuteWithSignature<int>("getLineTop", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getParagraphDirection(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetParagraphDirection(int arg0)
        {
            return IExecuteWithSignature<int>("getParagraphDirection", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getTopPadding()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetTopPadding()
        {
            return IExecuteWithSignature<int>("getTopPadding", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#isFallbackLineSpacingEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsFallbackLineSpacingEnabled()
        {
            return IExecuteWithSignature<bool>("isFallbackLineSpacingEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#isRtlCharAt(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsRtlCharAt(int arg0)
        {
            return IExecuteWithSignature<bool>("isRtlCharAt", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getAlignment()"/>
        /// </summary>
        /// <returns><see cref="Android.Text.Layout.Alignment"/></returns>
        public Android.Text.Layout.Alignment GetAlignment()
        {
            return IExecuteWithSignature<Android.Text.Layout.Alignment>("getAlignment", "()Landroid/text/Layout$Alignment;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getParagraphAlignment(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Text.Layout.Alignment"/></returns>
        public Android.Text.Layout.Alignment GetParagraphAlignment(int arg0)
        {
            return IExecuteWithSignature<Android.Text.Layout.Alignment>("getParagraphAlignment", "(I)Landroid/text/Layout$Alignment;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getPaint()"/>
        /// </summary>
        /// <returns><see cref="Android.Text.TextPaint"/></returns>
        public Android.Text.TextPaint GetPaint()
        {
            return IExecuteWithSignature<Android.Text.TextPaint>("getPaint", "()Landroid/text/TextPaint;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getSpacingAdd()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetSpacingAdd()
        {
            return IExecuteWithSignature<float>("getSpacingAdd", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getSpacingMultiplier()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetSpacingMultiplier()
        {
            return IExecuteWithSignature<float>("getSpacingMultiplier", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getLineAscent(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetLineAscent(int arg0)
        {
            return IExecuteWithSignature<int>("getLineAscent", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getLineBaseline(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetLineBaseline(int arg0)
        {
            return IExecuteWithSignature<int>("getLineBaseline", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getLineBottom(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetLineBottom(int arg0)
        {
            return IExecuteWithSignature<int>("getLineBottom", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getLineEnd(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetLineEnd(int arg0)
        {
            return IExecuteWithSignature<int>("getLineEnd", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getParagraphLeft(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetParagraphLeft(int arg0)
        {
            return IExecuteWithSignature<int>("getParagraphLeft", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getParagraphRight(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetParagraphRight(int arg0)
        {
            return IExecuteWithSignature<int>("getParagraphRight", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getWidth()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetWidth()
        {
            return IExecuteWithSignature<int>("getWidth", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getText()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetText()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getText", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#increaseWidthTo(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void IncreaseWidthTo(int arg0)
        {
            IExecuteWithSignature("increaseWidthTo", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getLineLeft(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetLineLeft(int arg0)
        {
            return IExecuteWithSignature<float>("getLineLeft", "(I)F", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getLineMax(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetLineMax(int arg0)
        {
            return IExecuteWithSignature<float>("getLineMax", "(I)F", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getLineRight(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetLineRight(int arg0)
        {
            return IExecuteWithSignature<float>("getLineRight", "(I)F", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getLineWidth(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetLineWidth(int arg0)
        {
            return IExecuteWithSignature<float>("getLineWidth", "(I)F", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getPrimaryHorizontal(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetPrimaryHorizontal(int arg0)
        {
            return IExecuteWithSignature<float>("getPrimaryHorizontal", "(I)F", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getSecondaryHorizontal(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetSecondaryHorizontal(int arg0)
        {
            return IExecuteWithSignature<float>("getSecondaryHorizontal", "(I)F", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getEllipsizedWidth()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetEllipsizedWidth()
        {
            return IExecuteWithSignature<int>("getEllipsizedWidth", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getHeight()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetHeight()
        {
            return IExecuteWithSignature<int>("getHeight", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getLineBottom(int,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetLineBottom(int arg0, bool arg1)
        {
            return IExecute<int>("getLineBottom", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getLineBounds(int,android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Rect"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetLineBounds(int arg0, Android.Graphics.Rect arg1)
        {
            return IExecute<int>("getLineBounds", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getLineForOffset(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetLineForOffset(int arg0)
        {
            return IExecuteWithSignature<int>("getLineForOffset", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getLineForVertical(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetLineForVertical(int arg0)
        {
            return IExecuteWithSignature<int>("getLineForVertical", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getLineVisibleEnd(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetLineVisibleEnd(int arg0)
        {
            return IExecuteWithSignature<int>("getLineVisibleEnd", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getOffsetForHorizontal(int,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetOffsetForHorizontal(int arg0, float arg1)
        {
            return IExecute<int>("getOffsetForHorizontal", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getOffsetToLeftOf(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetOffsetToLeftOf(int arg0)
        {
            return IExecuteWithSignature<int>("getOffsetToLeftOf", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getOffsetToRightOf(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetOffsetToRightOf(int arg0)
        {
            return IExecuteWithSignature<int>("getOffsetToRightOf", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getRangeForRect(android.graphics.RectF,android.text.SegmentFinder,android.text.Layout.TextInclusionStrategy)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.RectF"/></param>
        /// <param name="arg1"><see cref="Android.Text.SegmentFinder"/></param>
        /// <param name="arg2"><see cref="Android.Text.Layout.TextInclusionStrategy"/></param>
        /// <returns><see cref="int"/></returns>
        public int[] GetRangeForRect(Android.Graphics.RectF arg0, Android.Text.SegmentFinder arg1, Android.Text.Layout.TextInclusionStrategy arg2)
        {
            return IExecuteArray<int>("getRangeForRect", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#draw(android.graphics.Canvas,android.graphics.Path,android.graphics.Paint,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Canvas"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Path"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.Paint"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void Draw(Android.Graphics.Canvas arg0, Android.Graphics.Path arg1, Android.Graphics.Paint arg2, int arg3)
        {
            IExecute("draw", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#draw(android.graphics.Canvas,java.util.List,java.util.List,android.graphics.Path,android.graphics.Paint,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Canvas"/></param>
        /// <param name="arg1"><see cref="Java.Util.List"/></param>
        /// <param name="arg2"><see cref="Java.Util.List"/></param>
        /// <param name="arg3"><see cref="Android.Graphics.Path"/></param>
        /// <param name="arg4"><see cref="Android.Graphics.Paint"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        public void Draw(Android.Graphics.Canvas arg0, Java.Util.List<Android.Graphics.Path> arg1, Java.Util.List<Android.Graphics.Paint> arg2, Android.Graphics.Path arg3, Android.Graphics.Paint arg4, int arg5)
        {
            IExecute("draw", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#draw(android.graphics.Canvas)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Canvas"/></param>
        public void Draw(Android.Graphics.Canvas arg0)
        {
            IExecuteWithSignature("draw", "(Landroid/graphics/Canvas;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#drawBackground(android.graphics.Canvas)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Canvas"/></param>
        public void DrawBackground(Android.Graphics.Canvas arg0)
        {
            IExecuteWithSignature("drawBackground", "(Landroid/graphics/Canvas;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#drawText(android.graphics.Canvas)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Canvas"/></param>
        public void DrawText(Android.Graphics.Canvas arg0)
        {
            IExecuteWithSignature("drawText", "(Landroid/graphics/Canvas;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#fillCharacterBounds(int,int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void FillCharacterBounds(int arg0, int arg1, float[] arg2, int arg3)
        {
            IExecute("fillCharacterBounds", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getCursorPath(int,android.graphics.Path,java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Path"/></param>
        /// <param name="arg2"><see cref="Java.Lang.CharSequence"/></param>
        public void GetCursorPath(int arg0, Android.Graphics.Path arg1, Java.Lang.CharSequence arg2)
        {
            IExecute("getCursorPath", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/Layout.html#getSelectionPath(int,int,android.graphics.Path)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.Path"/></param>
        public void GetSelectionPath(int arg0, int arg1, Android.Graphics.Path arg2)
        {
            IExecute("getSelectionPath", arg0, arg1, arg2);
        }

        #endregion

        #region Nested classes
        #region Alignment
        public partial class Alignment
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/Layout.Alignment.html#ALIGN_CENTER"/>
            /// </summary>
            public static Android.Text.Layout.Alignment ALIGN_CENTER { get { if (!_ALIGN_CENTERReady) { _ALIGN_CENTERContent = SGetField<Android.Text.Layout.Alignment>(LocalBridgeClazz, "ALIGN_CENTER"); _ALIGN_CENTERReady = true; } return _ALIGN_CENTERContent; } }
            private static Android.Text.Layout.Alignment _ALIGN_CENTERContent = default;
            private static bool _ALIGN_CENTERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/Layout.Alignment.html#ALIGN_NORMAL"/>
            /// </summary>
            public static Android.Text.Layout.Alignment ALIGN_NORMAL { get { if (!_ALIGN_NORMALReady) { _ALIGN_NORMALContent = SGetField<Android.Text.Layout.Alignment>(LocalBridgeClazz, "ALIGN_NORMAL"); _ALIGN_NORMALReady = true; } return _ALIGN_NORMALContent; } }
            private static Android.Text.Layout.Alignment _ALIGN_NORMALContent = default;
            private static bool _ALIGN_NORMALReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/Layout.Alignment.html#ALIGN_OPPOSITE"/>
            /// </summary>
            public static Android.Text.Layout.Alignment ALIGN_OPPOSITE { get { if (!_ALIGN_OPPOSITEReady) { _ALIGN_OPPOSITEContent = SGetField<Android.Text.Layout.Alignment>(LocalBridgeClazz, "ALIGN_OPPOSITE"); _ALIGN_OPPOSITEReady = true; } return _ALIGN_OPPOSITEContent; } }
            private static Android.Text.Layout.Alignment _ALIGN_OPPOSITEContent = default;
            private static bool _ALIGN_OPPOSITEReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/Layout.Alignment.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Text.Layout.Alignment"/></returns>
            public static Android.Text.Layout.Alignment ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Text.Layout.Alignment>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/text/Layout$Alignment;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/Layout.Alignment.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.Text.Layout.Alignment"/></returns>
            public static Android.Text.Layout.Alignment[] Values()
            {
                return SExecuteWithSignatureArray<Android.Text.Layout.Alignment>(LocalBridgeClazz, "values", "()[Landroid/text/Layout$Alignment;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Directions
        public partial class Directions
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region TextInclusionStrategy
        public partial class TextInclusionStrategy
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/Layout.TextInclusionStrategy.html#isSegmentInside(android.graphics.RectF,android.graphics.RectF)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.RectF"/></param>
            /// <param name="arg1"><see cref="Android.Graphics.RectF"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool IsSegmentInside(Android.Graphics.RectF arg0, Android.Graphics.RectF arg1)
            {
                return IExecute<bool>("isSegmentInside", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
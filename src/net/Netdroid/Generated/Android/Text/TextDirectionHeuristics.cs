/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.8.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Text
{
    #region TextDirectionHeuristics
    public partial class TextDirectionHeuristics
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextDirectionHeuristics.html#ANYRTL_LTR"/>
        /// </summary>
        public static Android.Text.TextDirectionHeuristic ANYRTL_LTR { get { if (!_ANYRTL_LTRReady) { _ANYRTL_LTRContent = SGetField<Android.Text.TextDirectionHeuristic>(LocalBridgeClazz, "ANYRTL_LTR"); _ANYRTL_LTRReady = true; } return _ANYRTL_LTRContent; } }
        private static Android.Text.TextDirectionHeuristic _ANYRTL_LTRContent = default;
        private static bool _ANYRTL_LTRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextDirectionHeuristics.html#FIRSTSTRONG_LTR"/>
        /// </summary>
        public static Android.Text.TextDirectionHeuristic FIRSTSTRONG_LTR { get { if (!_FIRSTSTRONG_LTRReady) { _FIRSTSTRONG_LTRContent = SGetField<Android.Text.TextDirectionHeuristic>(LocalBridgeClazz, "FIRSTSTRONG_LTR"); _FIRSTSTRONG_LTRReady = true; } return _FIRSTSTRONG_LTRContent; } }
        private static Android.Text.TextDirectionHeuristic _FIRSTSTRONG_LTRContent = default;
        private static bool _FIRSTSTRONG_LTRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextDirectionHeuristics.html#FIRSTSTRONG_RTL"/>
        /// </summary>
        public static Android.Text.TextDirectionHeuristic FIRSTSTRONG_RTL { get { if (!_FIRSTSTRONG_RTLReady) { _FIRSTSTRONG_RTLContent = SGetField<Android.Text.TextDirectionHeuristic>(LocalBridgeClazz, "FIRSTSTRONG_RTL"); _FIRSTSTRONG_RTLReady = true; } return _FIRSTSTRONG_RTLContent; } }
        private static Android.Text.TextDirectionHeuristic _FIRSTSTRONG_RTLContent = default;
        private static bool _FIRSTSTRONG_RTLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextDirectionHeuristics.html#LOCALE"/>
        /// </summary>
        public static Android.Text.TextDirectionHeuristic LOCALE { get { if (!_LOCALEReady) { _LOCALEContent = SGetField<Android.Text.TextDirectionHeuristic>(LocalBridgeClazz, "LOCALE"); _LOCALEReady = true; } return _LOCALEContent; } }
        private static Android.Text.TextDirectionHeuristic _LOCALEContent = default;
        private static bool _LOCALEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextDirectionHeuristics.html#LTR"/>
        /// </summary>
        public static Android.Text.TextDirectionHeuristic LTR { get { if (!_LTRReady) { _LTRContent = SGetField<Android.Text.TextDirectionHeuristic>(LocalBridgeClazz, "LTR"); _LTRReady = true; } return _LTRContent; } }
        private static Android.Text.TextDirectionHeuristic _LTRContent = default;
        private static bool _LTRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextDirectionHeuristics.html#RTL"/>
        /// </summary>
        public static Android.Text.TextDirectionHeuristic RTL { get { if (!_RTLReady) { _RTLContent = SGetField<Android.Text.TextDirectionHeuristic>(LocalBridgeClazz, "RTL"); _RTLReady = true; } return _RTLContent; } }
        private static Android.Text.TextDirectionHeuristic _RTLContent = default;
        private static bool _RTLReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
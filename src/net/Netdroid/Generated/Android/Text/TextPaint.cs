/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Text
{
    #region TextPaint declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/text/TextPaint.html"/>
    /// </summary>
    public partial class TextPaint : Android.Graphics.Paint
    {
        const string _bridgeClassName = "android.text.TextPaint";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public TextPaint() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public TextPaint(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region TextPaint implementation
    public partial class TextPaint
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextPaint.html#%3Cinit%3E(android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Paint"/></param>
        public TextPaint(Android.Graphics.Paint arg0)
            : base(arg0)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextPaint.html#%3Cinit%3E(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public TextPaint(int arg0)
            : base(arg0)
        {
        }
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextPaint.html#density"/>
        /// </summary>
        public float density { get { return IGetField<float>("density"); } set { ISetField("density", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextPaint.html#underlineThickness"/>
        /// </summary>
        public float underlineThickness { get { return IGetField<float>("underlineThickness"); } set { ISetField("underlineThickness", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextPaint.html#baselineShift"/>
        /// </summary>
        public int baselineShift { get { return IGetField<int>("baselineShift"); } set { ISetField("baselineShift", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextPaint.html#bgColor"/>
        /// </summary>
        public int bgColor { get { return IGetField<int>("bgColor"); } set { ISetField("bgColor", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextPaint.html#linkColor"/>
        /// </summary>
        public int linkColor { get { return IGetField<int>("linkColor"); } set { ISetField("linkColor", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextPaint.html#underlineColor"/>
        /// </summary>
        public int underlineColor { get { return IGetField<int>("underlineColor"); } set { ISetField("underlineColor", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextPaint.html#drawableState"/>
        /// </summary>
        public int[] drawableState { get { return IGetFieldArray<int>("drawableState"); } set { ISetField("drawableState", value); } }
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextPaint.html#set(android.text.TextPaint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Text.TextPaint"/></param>
        public void Set(Android.Text.TextPaint arg0)
        {
            IExecuteWithSignature("set", "(Landroid/text/TextPaint;)V", arg0);
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
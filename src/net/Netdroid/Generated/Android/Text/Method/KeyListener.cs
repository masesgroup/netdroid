/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Text.Method
{
    #region KeyListener declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/text/method/KeyListener.html"/>
    /// </summary>
    public partial class KeyListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
    {
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public KeyListener() { InitializeHandlers(); }
    
        const string _bridgeClassName = "org.mases.netdroid.generated.android.text.method.KeyListener";
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
    
    
        // TODO: complete the class
    
    }
    #endregion
    
    #region KeyListenerDirect declaration
    /// <summary>
    /// Direct override of <see cref="KeyListener"/> or its generic type if there is one
    /// </summary>
    public partial class KeyListenerDirect : KeyListener
    {
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
        /// </summary>
        public override bool AutoInit => false;
    
        /// <inheritdoc />
        protected override void InitializeHandlers() { }
    
        const string _bridgeClassName = "android.text.method.KeyListener";
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    }
    #endregion

    #region IKeyListener
    /// <summary>
    /// .NET interface for org.mases.netdroid.generated.android.text.method.KeyListener implementing <see href="https://developer.android.com/reference/android/text/method/KeyListener.html"/>
    /// </summary>
    public partial interface IKeyListener
    {
        #region Instance methods
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion

    #region KeyListener implementation
    public partial class KeyListener : Android.Text.Method.IKeyListener
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// Handlers initializer for <see cref="KeyListener"/>
        /// </summary>
        protected virtual void InitializeHandlers()
        {
            AddEventHandler("onKeyDown", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnKeyDownEventHandler));
            AddEventHandler("onKeyOther", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnKeyOtherEventHandler));
            AddEventHandler("onKeyUp", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnKeyUpEventHandler));
            AddEventHandler("getInputType", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(GetInputTypeEventHandler));
            AddEventHandler("clearMetaKeyState", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(ClearMetaKeyStateEventHandler));

        }
        
        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/text/method/KeyListener.html#onKeyDown(android.view.View,android.text.Editable,int,android.view.KeyEvent)"/>
        /// </summary>
        /// <remarks>If <see cref="OnOnKeyDown"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Func<Android.View.View, Android.Text.Editable, int, Android.View.KeyEvent, bool> OnOnKeyDown { get; set; } = null;
        
        bool hasOverrideOnKeyDown = true;
        void OnKeyDownEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
        {
            hasOverrideOnKeyDown = true;
            var methodToExecute = (OnOnKeyDown != null) ? OnOnKeyDown : OnKeyDown;
            var executionResult = methodToExecute.Invoke(data.EventData.GetAt<Android.View.View>(0), data.EventData.GetAt<Android.Text.Editable>(1), data.EventData.GetAt<int>(2), data.EventData.GetAt<Android.View.KeyEvent>(3));
            data.EventData.TypedEventData.SetReturnData(hasOverrideOnKeyDown, executionResult);
        }
        
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/method/KeyListener.html#onKeyDown(android.view.View,android.text.Editable,int,android.view.KeyEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Android.Text.Editable"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Android.View.KeyEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public virtual bool OnKeyDown(Android.View.View arg0, Android.Text.Editable arg1, int arg2, Android.View.KeyEvent arg3)
        {
            hasOverrideOnKeyDown = false; return default;
        }
        
        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/text/method/KeyListener.html#onKeyOther(android.view.View,android.text.Editable,android.view.KeyEvent)"/>
        /// </summary>
        /// <remarks>If <see cref="OnOnKeyOther"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Func<Android.View.View, Android.Text.Editable, Android.View.KeyEvent, bool> OnOnKeyOther { get; set; } = null;
        
        bool hasOverrideOnKeyOther = true;
        void OnKeyOtherEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
        {
            hasOverrideOnKeyOther = true;
            var methodToExecute = (OnOnKeyOther != null) ? OnOnKeyOther : OnKeyOther;
            var executionResult = methodToExecute.Invoke(data.EventData.GetAt<Android.View.View>(0), data.EventData.GetAt<Android.Text.Editable>(1), data.EventData.GetAt<Android.View.KeyEvent>(2));
            data.EventData.TypedEventData.SetReturnData(hasOverrideOnKeyOther, executionResult);
        }
        
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/method/KeyListener.html#onKeyOther(android.view.View,android.text.Editable,android.view.KeyEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Android.Text.Editable"/></param>
        /// <param name="arg2"><see cref="Android.View.KeyEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public virtual bool OnKeyOther(Android.View.View arg0, Android.Text.Editable arg1, Android.View.KeyEvent arg2)
        {
            hasOverrideOnKeyOther = false; return default;
        }
        
        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/text/method/KeyListener.html#onKeyUp(android.view.View,android.text.Editable,int,android.view.KeyEvent)"/>
        /// </summary>
        /// <remarks>If <see cref="OnOnKeyUp"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Func<Android.View.View, Android.Text.Editable, int, Android.View.KeyEvent, bool> OnOnKeyUp { get; set; } = null;
        
        bool hasOverrideOnKeyUp = true;
        void OnKeyUpEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
        {
            hasOverrideOnKeyUp = true;
            var methodToExecute = (OnOnKeyUp != null) ? OnOnKeyUp : OnKeyUp;
            var executionResult = methodToExecute.Invoke(data.EventData.GetAt<Android.View.View>(0), data.EventData.GetAt<Android.Text.Editable>(1), data.EventData.GetAt<int>(2), data.EventData.GetAt<Android.View.KeyEvent>(3));
            data.EventData.TypedEventData.SetReturnData(hasOverrideOnKeyUp, executionResult);
        }
        
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/method/KeyListener.html#onKeyUp(android.view.View,android.text.Editable,int,android.view.KeyEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Android.Text.Editable"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Android.View.KeyEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public virtual bool OnKeyUp(Android.View.View arg0, Android.Text.Editable arg1, int arg2, Android.View.KeyEvent arg3)
        {
            hasOverrideOnKeyUp = false; return default;
        }
        
        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/text/method/KeyListener.html#getInputType()"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetInputType"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Func<int> OnGetInputType { get; set; } = null;
        
        bool hasOverrideGetInputType = true;
        void GetInputTypeEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
        {
            hasOverrideGetInputType = true;
            var methodToExecute = (OnGetInputType != null) ? OnGetInputType : GetInputType;
            var executionResult = methodToExecute.Invoke();
            data.EventData.TypedEventData.SetReturnData(hasOverrideGetInputType, executionResult);
        }
        
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/method/KeyListener.html#getInputType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public virtual int GetInputType()
        {
            hasOverrideGetInputType = false; return default;
        }
        
        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/text/method/KeyListener.html#clearMetaKeyState(android.view.View,android.text.Editable,int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnClearMetaKeyState"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Action<Android.View.View, Android.Text.Editable, int> OnClearMetaKeyState { get; set; } = null;
        
        bool hasOverrideClearMetaKeyState = true;
        void ClearMetaKeyStateEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
        {
            hasOverrideClearMetaKeyState = true;
            var methodToExecute = (OnClearMetaKeyState != null) ? OnClearMetaKeyState : ClearMetaKeyState;
            methodToExecute.Invoke(data.EventData.GetAt<Android.View.View>(0), data.EventData.GetAt<Android.Text.Editable>(1), data.EventData.GetAt<int>(2));
            data.EventData.TypedEventData.HasOverride = hasOverrideClearMetaKeyState;
        }
        
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/method/KeyListener.html#clearMetaKeyState(android.view.View,android.text.Editable,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Android.Text.Editable"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public virtual void ClearMetaKeyState(Android.View.View arg0, Android.Text.Editable arg1, int arg2)
        {
            hasOverrideClearMetaKeyState = false;
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion

    #region KeyListenerDirect implementation
    public partial class KeyListenerDirect : Android.Text.Method.IKeyListener
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/method/KeyListener.html#onKeyDown(android.view.View,android.text.Editable,int,android.view.KeyEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Android.Text.Editable"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Android.View.KeyEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public override bool OnKeyDown(Android.View.View arg0, Android.Text.Editable arg1, int arg2, Android.View.KeyEvent arg3)
        {
            return IExecuteWithSignature<bool>("onKeyDown", "(Landroid/view/View;Landroid/text/Editable;ILandroid/view/KeyEvent;)Z", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/method/KeyListener.html#onKeyOther(android.view.View,android.text.Editable,android.view.KeyEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Android.Text.Editable"/></param>
        /// <param name="arg2"><see cref="Android.View.KeyEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public override bool OnKeyOther(Android.View.View arg0, Android.Text.Editable arg1, Android.View.KeyEvent arg2)
        {
            return IExecuteWithSignature<bool>("onKeyOther", "(Landroid/view/View;Landroid/text/Editable;Landroid/view/KeyEvent;)Z", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/method/KeyListener.html#onKeyUp(android.view.View,android.text.Editable,int,android.view.KeyEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Android.Text.Editable"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Android.View.KeyEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public override bool OnKeyUp(Android.View.View arg0, Android.Text.Editable arg1, int arg2, Android.View.KeyEvent arg3)
        {
            return IExecuteWithSignature<bool>("onKeyUp", "(Landroid/view/View;Landroid/text/Editable;ILandroid/view/KeyEvent;)Z", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/method/KeyListener.html#getInputType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public override int GetInputType()
        {
            return IExecuteWithSignature<int>("getInputType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/method/KeyListener.html#clearMetaKeyState(android.view.View,android.text.Editable,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Android.Text.Editable"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public override void ClearMetaKeyState(Android.View.View arg0, Android.Text.Editable arg1, int arg2)
        {
            IExecuteWithSignature("clearMetaKeyState", "(Landroid/view/View;Landroid/text/Editable;I)V", arg0, arg1, arg2);
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
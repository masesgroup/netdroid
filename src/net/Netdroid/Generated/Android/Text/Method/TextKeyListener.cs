/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Text.Method
{
    #region TextKeyListener declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/text/method/TextKeyListener.html"/>
    /// </summary>
    public partial class TextKeyListener : MASES.JCOBridge.C2JBridge.JVMBridgeBase<TextKeyListener>
    {
        const string _bridgeClassName = "android.text.method.TextKeyListener";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public TextKeyListener() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public TextKeyListener(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region Capitalize declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/method/TextKeyListener.Capitalize.html"/>
        /// </summary>
        public partial class Capitalize : Java.Lang.Enum<Android.Text.Method.TextKeyListener.Capitalize>
        {
            const string _bridgeClassName = "android.text.method.TextKeyListener$Capitalize";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Capitalize() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Capitalize(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region TextKeyListener implementation
    public partial class TextKeyListener
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/method/TextKeyListener.html#%3Cinit%3E(android.text.method.TextKeyListener.Capitalize,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Text.Method.TextKeyListener.Capitalize"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public TextKeyListener(Android.Text.Method.TextKeyListener.Capitalize arg0, bool arg1)
            : base(arg0, arg1)
        {
        }
    
        #endregion
    
        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Android.Text.Method.TextKeyListener"/> to <see cref="Android.Text.SpanWatcher"/>
        /// </summary>
        public static implicit operator Android.Text.SpanWatcher(Android.Text.Method.TextKeyListener t) => t.Cast<Android.Text.SpanWatcher>();
    
        #endregion
    
        #region Fields
    
        #endregion
    
        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/method/TextKeyListener.html#getInstance()"/>
        /// </summary>
        /// <returns><see cref="Android.Text.Method.TextKeyListener"/></returns>
        public static Android.Text.Method.TextKeyListener GetInstance()
        {
            return SExecuteWithSignature<Android.Text.Method.TextKeyListener>(LocalBridgeClazz, "getInstance", "()Landroid/text/method/TextKeyListener;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/method/TextKeyListener.html#getInstance(boolean,android.text.method.TextKeyListener.Capitalize)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        /// <param name="arg1"><see cref="Android.Text.Method.TextKeyListener.Capitalize"/></param>
        /// <returns><see cref="Android.Text.Method.TextKeyListener"/></returns>
        public static Android.Text.Method.TextKeyListener GetInstance(bool arg0, Android.Text.Method.TextKeyListener.Capitalize arg1)
        {
            return SExecute<Android.Text.Method.TextKeyListener>(LocalBridgeClazz, "getInstance", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/method/TextKeyListener.html#shouldCap(android.text.method.TextKeyListener.Capitalize,java.lang.CharSequence,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Text.Method.TextKeyListener.Capitalize"/></param>
        /// <param name="arg1"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool ShouldCap(Android.Text.Method.TextKeyListener.Capitalize arg0, Java.Lang.CharSequence arg1, int arg2)
        {
            return SExecute<bool>(LocalBridgeClazz, "shouldCap", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/method/TextKeyListener.html#clear(android.text.Editable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Text.Editable"/></param>
        public static void Clear(Android.Text.Editable arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "clear", "(Landroid/text/Editable;)V", arg0);
        }
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/method/TextKeyListener.html#onSpanAdded(android.text.Spannable,java.lang.Object,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Text.Spannable"/></param>
        /// <param name="arg1"><see cref="object"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void OnSpanAdded(Android.Text.Spannable arg0, object arg1, int arg2, int arg3)
        {
            IExecute("onSpanAdded", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/method/TextKeyListener.html#onSpanChanged(android.text.Spannable,java.lang.Object,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Text.Spannable"/></param>
        /// <param name="arg1"><see cref="object"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        public void OnSpanChanged(Android.Text.Spannable arg0, object arg1, int arg2, int arg3, int arg4, int arg5)
        {
            IExecute("onSpanChanged", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/method/TextKeyListener.html#onSpanRemoved(android.text.Spannable,java.lang.Object,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Text.Spannable"/></param>
        /// <param name="arg1"><see cref="object"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void OnSpanRemoved(Android.Text.Spannable arg0, object arg1, int arg2, int arg3)
        {
            IExecute("onSpanRemoved", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/method/TextKeyListener.html#release()"/>
        /// </summary>
        public void Release()
        {
            IExecuteWithSignature("release", "()V");
        }
    
        #endregion
    
        #region Nested classes
        #region Capitalize implementation
        public partial class Capitalize
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/method/TextKeyListener.Capitalize.html#CHARACTERS"/>
            /// </summary>
            public static Android.Text.Method.TextKeyListener.Capitalize CHARACTERS { get { if (!_CHARACTERSReady) { _CHARACTERSContent = SGetField<Android.Text.Method.TextKeyListener.Capitalize>(LocalBridgeClazz, "CHARACTERS"); _CHARACTERSReady = true; } return _CHARACTERSContent; } }
            private static Android.Text.Method.TextKeyListener.Capitalize _CHARACTERSContent = default;
            private static bool _CHARACTERSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/method/TextKeyListener.Capitalize.html#NONE"/>
            /// </summary>
            public static Android.Text.Method.TextKeyListener.Capitalize NONE { get { if (!_NONEReady) { _NONEContent = SGetField<Android.Text.Method.TextKeyListener.Capitalize>(LocalBridgeClazz, "NONE"); _NONEReady = true; } return _NONEContent; } }
            private static Android.Text.Method.TextKeyListener.Capitalize _NONEContent = default;
            private static bool _NONEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/method/TextKeyListener.Capitalize.html#SENTENCES"/>
            /// </summary>
            public static Android.Text.Method.TextKeyListener.Capitalize SENTENCES { get { if (!_SENTENCESReady) { _SENTENCESContent = SGetField<Android.Text.Method.TextKeyListener.Capitalize>(LocalBridgeClazz, "SENTENCES"); _SENTENCESReady = true; } return _SENTENCESContent; } }
            private static Android.Text.Method.TextKeyListener.Capitalize _SENTENCESContent = default;
            private static bool _SENTENCESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/method/TextKeyListener.Capitalize.html#WORDS"/>
            /// </summary>
            public static Android.Text.Method.TextKeyListener.Capitalize WORDS { get { if (!_WORDSReady) { _WORDSContent = SGetField<Android.Text.Method.TextKeyListener.Capitalize>(LocalBridgeClazz, "WORDS"); _WORDSReady = true; } return _WORDSContent; } }
            private static Android.Text.Method.TextKeyListener.Capitalize _WORDSContent = default;
            private static bool _WORDSReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/method/TextKeyListener.Capitalize.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Text.Method.TextKeyListener.Capitalize"/></returns>
            public static Android.Text.Method.TextKeyListener.Capitalize ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Text.Method.TextKeyListener.Capitalize>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/text/method/TextKeyListener$Capitalize;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/method/TextKeyListener.Capitalize.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.Text.Method.TextKeyListener.Capitalize"/></returns>
            public static Android.Text.Method.TextKeyListener.Capitalize[] Values()
            {
                return SExecuteWithSignatureArray<Android.Text.Method.TextKeyListener.Capitalize>(LocalBridgeClazz, "values", "()[Landroid/text/method/TextKeyListener$Capitalize;");
            }
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
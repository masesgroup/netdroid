/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Text
{
    #region DynamicLayout declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/text/DynamicLayout.html"/>
    /// </summary>
    public partial class DynamicLayout : Android.Text.Layout
    {
        const string _bridgeClassName = "android.text.DynamicLayout";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public DynamicLayout() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public DynamicLayout(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region Builder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/DynamicLayout.Builder.html"/>
        /// </summary>
        public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
        {
            const string _bridgeClassName = "android.text.DynamicLayout$Builder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Builder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Builder(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region DynamicLayout implementation
    public partial class DynamicLayout
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/DynamicLayout.html#%3Cinit%3E(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="Android.Text.TextPaint"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Android.Text.Layout.Alignment"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        /// <param name="arg5"><see cref="float"/></param>
        /// <param name="arg6"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public DynamicLayout(Java.Lang.CharSequence arg0, Android.Text.TextPaint arg1, int arg2, Android.Text.Layout.Alignment arg3, float arg4, float arg5, bool arg6)
            : base(arg0, arg1, arg2, arg3, arg4, arg5, arg6)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/DynamicLayout.html#%3Cinit%3E(java.lang.CharSequence,java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,boolean,android.text.TextUtils.TruncateAt,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg2"><see cref="Android.Text.TextPaint"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="Android.Text.Layout.Alignment"/></param>
        /// <param name="arg5"><see cref="float"/></param>
        /// <param name="arg6"><see cref="float"/></param>
        /// <param name="arg7"><see cref="bool"/></param>
        /// <param name="arg8"><see cref="Android.Text.TextUtils.TruncateAt"/></param>
        /// <param name="arg9"><see cref="int"/></param>
        [global::System.Obsolete()]
        public DynamicLayout(Java.Lang.CharSequence arg0, Java.Lang.CharSequence arg1, Android.Text.TextPaint arg2, int arg3, Android.Text.Layout.Alignment arg4, float arg5, float arg6, bool arg7, Android.Text.TextUtils.TruncateAt arg8, int arg9)
            : base(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/DynamicLayout.html#%3Cinit%3E(java.lang.CharSequence,java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg2"><see cref="Android.Text.TextPaint"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="Android.Text.Layout.Alignment"/></param>
        /// <param name="arg5"><see cref="float"/></param>
        /// <param name="arg6"><see cref="float"/></param>
        /// <param name="arg7"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public DynamicLayout(Java.Lang.CharSequence arg0, Java.Lang.CharSequence arg1, Android.Text.TextPaint arg2, int arg3, Android.Text.Layout.Alignment arg4, float arg5, float arg6, bool arg7)
            : base(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
        {
        }
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
    
        #endregion
    
        #region Nested classes
        #region Builder implementation
        public partial class Builder
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/DynamicLayout.Builder.html#obtain(java.lang.CharSequence,android.text.TextPaint,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
            /// <param name="arg1"><see cref="Android.Text.TextPaint"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <returns><see cref="Android.Text.DynamicLayout.Builder"/></returns>
            public static Android.Text.DynamicLayout.Builder Obtain(Java.Lang.CharSequence arg0, Android.Text.TextPaint arg1, int arg2)
            {
                return SExecuteWithSignature<Android.Text.DynamicLayout.Builder>(LocalBridgeClazz, "obtain", "(Ljava/lang/CharSequence;Landroid/text/TextPaint;I)Landroid/text/DynamicLayout$Builder;", arg0, arg1, arg2);
            }
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/DynamicLayout.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Text.DynamicLayout"/></returns>
            public Android.Text.DynamicLayout Build()
            {
                return IExecuteWithSignature<Android.Text.DynamicLayout>("build", "()Landroid/text/DynamicLayout;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/DynamicLayout.Builder.html#setAlignment(android.text.Layout.Alignment)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Text.Layout.Alignment"/></param>
            /// <returns><see cref="Android.Text.DynamicLayout.Builder"/></returns>
            public Android.Text.DynamicLayout.Builder SetAlignment(Android.Text.Layout.Alignment arg0)
            {
                return IExecuteWithSignature<Android.Text.DynamicLayout.Builder>("setAlignment", "(Landroid/text/Layout$Alignment;)Landroid/text/DynamicLayout$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/DynamicLayout.Builder.html#setBreakStrategy(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Text.DynamicLayout.Builder"/></returns>
            public Android.Text.DynamicLayout.Builder SetBreakStrategy(int arg0)
            {
                return IExecuteWithSignature<Android.Text.DynamicLayout.Builder>("setBreakStrategy", "(I)Landroid/text/DynamicLayout$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/DynamicLayout.Builder.html#setDisplayText(java.lang.CharSequence)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
            /// <returns><see cref="Android.Text.DynamicLayout.Builder"/></returns>
            public Android.Text.DynamicLayout.Builder SetDisplayText(Java.Lang.CharSequence arg0)
            {
                return IExecuteWithSignature<Android.Text.DynamicLayout.Builder>("setDisplayText", "(Ljava/lang/CharSequence;)Landroid/text/DynamicLayout$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/DynamicLayout.Builder.html#setEllipsize(android.text.TextUtils.TruncateAt)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Text.TextUtils.TruncateAt"/></param>
            /// <returns><see cref="Android.Text.DynamicLayout.Builder"/></returns>
            public Android.Text.DynamicLayout.Builder SetEllipsize(Android.Text.TextUtils.TruncateAt arg0)
            {
                return IExecuteWithSignature<Android.Text.DynamicLayout.Builder>("setEllipsize", "(Landroid/text/TextUtils$TruncateAt;)Landroid/text/DynamicLayout$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/DynamicLayout.Builder.html#setEllipsizedWidth(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Text.DynamicLayout.Builder"/></returns>
            public Android.Text.DynamicLayout.Builder SetEllipsizedWidth(int arg0)
            {
                return IExecuteWithSignature<Android.Text.DynamicLayout.Builder>("setEllipsizedWidth", "(I)Landroid/text/DynamicLayout$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/DynamicLayout.Builder.html#setHyphenationFrequency(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Text.DynamicLayout.Builder"/></returns>
            public Android.Text.DynamicLayout.Builder SetHyphenationFrequency(int arg0)
            {
                return IExecuteWithSignature<Android.Text.DynamicLayout.Builder>("setHyphenationFrequency", "(I)Landroid/text/DynamicLayout$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/DynamicLayout.Builder.html#setIncludePad(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Text.DynamicLayout.Builder"/></returns>
            public Android.Text.DynamicLayout.Builder SetIncludePad(bool arg0)
            {
                return IExecuteWithSignature<Android.Text.DynamicLayout.Builder>("setIncludePad", "(Z)Landroid/text/DynamicLayout$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/DynamicLayout.Builder.html#setJustificationMode(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Text.DynamicLayout.Builder"/></returns>
            public Android.Text.DynamicLayout.Builder SetJustificationMode(int arg0)
            {
                return IExecuteWithSignature<Android.Text.DynamicLayout.Builder>("setJustificationMode", "(I)Landroid/text/DynamicLayout$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/DynamicLayout.Builder.html#setLineBreakConfig(android.graphics.text.LineBreakConfig)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.Text.LineBreakConfig"/></param>
            /// <returns><see cref="Android.Text.DynamicLayout.Builder"/></returns>
            public Android.Text.DynamicLayout.Builder SetLineBreakConfig(Android.Graphics.Text.LineBreakConfig arg0)
            {
                return IExecuteWithSignature<Android.Text.DynamicLayout.Builder>("setLineBreakConfig", "(Landroid/graphics/text/LineBreakConfig;)Landroid/text/DynamicLayout$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/DynamicLayout.Builder.html#setLineSpacing(float,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            /// <param name="arg1"><see cref="float"/></param>
            /// <returns><see cref="Android.Text.DynamicLayout.Builder"/></returns>
            public Android.Text.DynamicLayout.Builder SetLineSpacing(float arg0, float arg1)
            {
                return IExecuteWithSignature<Android.Text.DynamicLayout.Builder>("setLineSpacing", "(FF)Landroid/text/DynamicLayout$Builder;", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/DynamicLayout.Builder.html#setMinimumFontMetrics(android.graphics.Paint.FontMetrics)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.Paint.FontMetrics"/></param>
            /// <returns><see cref="Android.Text.DynamicLayout.Builder"/></returns>
            public Android.Text.DynamicLayout.Builder SetMinimumFontMetrics(Android.Graphics.Paint.FontMetrics arg0)
            {
                return IExecuteWithSignature<Android.Text.DynamicLayout.Builder>("setMinimumFontMetrics", "(Landroid/graphics/Paint$FontMetrics;)Landroid/text/DynamicLayout$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/DynamicLayout.Builder.html#setShiftDrawingOffsetForStartOverhang(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Text.DynamicLayout.Builder"/></returns>
            public Android.Text.DynamicLayout.Builder SetShiftDrawingOffsetForStartOverhang(bool arg0)
            {
                return IExecuteWithSignature<Android.Text.DynamicLayout.Builder>("setShiftDrawingOffsetForStartOverhang", "(Z)Landroid/text/DynamicLayout$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/DynamicLayout.Builder.html#setTextDirection(android.text.TextDirectionHeuristic)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Text.TextDirectionHeuristic"/></param>
            /// <returns><see cref="Android.Text.DynamicLayout.Builder"/></returns>
            public Android.Text.DynamicLayout.Builder SetTextDirection(Android.Text.TextDirectionHeuristic arg0)
            {
                return IExecuteWithSignature<Android.Text.DynamicLayout.Builder>("setTextDirection", "(Landroid/text/TextDirectionHeuristic;)Landroid/text/DynamicLayout$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/DynamicLayout.Builder.html#setUseBoundsForWidth(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Text.DynamicLayout.Builder"/></returns>
            public Android.Text.DynamicLayout.Builder SetUseBoundsForWidth(bool arg0)
            {
                return IExecuteWithSignature<Android.Text.DynamicLayout.Builder>("setUseBoundsForWidth", "(Z)Landroid/text/DynamicLayout$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/DynamicLayout.Builder.html#setUseLineSpacingFromFallbacks(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Text.DynamicLayout.Builder"/></returns>
            public Android.Text.DynamicLayout.Builder SetUseLineSpacingFromFallbacks(bool arg0)
            {
                return IExecuteWithSignature<Android.Text.DynamicLayout.Builder>("setUseLineSpacingFromFallbacks", "(Z)Landroid/text/DynamicLayout$Builder;", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
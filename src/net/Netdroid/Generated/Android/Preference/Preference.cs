/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Preference
{
    #region Preference declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/preference/Preference.html"/>
    /// </summary>
    [global::System.Obsolete()]
    public partial class Preference : Java.Lang.Comparable<Android.Preference.Preference>
    {
        const string _bridgeClassName = "android.preference.Preference";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public Preference() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public Preference(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region BaseSavedState declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.BaseSavedState.html"/>
        /// </summary>
        [global::System.Obsolete()]
        public partial class BaseSavedState : Android.View.AbsSavedState
        {
            const string _bridgeClassName = "android.preference.Preference$BaseSavedState";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public BaseSavedState() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public BaseSavedState(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region OnPreferenceChangeListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.OnPreferenceChangeListener.html"/>
        /// </summary>
        [global::System.Obsolete()]
        public partial class OnPreferenceChangeListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnPreferenceChangeListener() { InitializeHandlers(); }

            const string _bridgeClassName = "org.mases.netdroid.generated.android.preference.Preference_OnPreferenceChangeListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

        
            // TODO: complete the class

        }
        #endregion

        #region OnPreferenceChangeListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="OnPreferenceChangeListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnPreferenceChangeListenerDirect : OnPreferenceChangeListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;

            /// <inheritdoc />
            protected override void InitializeHandlers() { }

            const string _bridgeClassName = "android.preference.Preference$OnPreferenceChangeListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region OnPreferenceClickListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.OnPreferenceClickListener.html"/>
        /// </summary>
        [global::System.Obsolete()]
        public partial class OnPreferenceClickListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnPreferenceClickListener() { InitializeHandlers(); }

            const string _bridgeClassName = "org.mases.netdroid.generated.android.preference.Preference_OnPreferenceClickListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

        
            // TODO: complete the class

        }
        #endregion

        #region OnPreferenceClickListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="OnPreferenceClickListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnPreferenceClickListenerDirect : OnPreferenceClickListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;

            /// <inheritdoc />
            protected override void InitializeHandlers() { }

            const string _bridgeClassName = "android.preference.Preference$OnPreferenceClickListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

    
    }
    #endregion

    #region Preference implementation
    public partial class Preference
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#%3Cinit%3E(android.content.Context,android.util.AttributeSet,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Util.AttributeSet"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        [global::System.Obsolete()]
        public Preference(Android.Content.Context arg0, Android.Util.AttributeSet arg1, int arg2, int arg3)
            : base(arg0, arg1, arg2, arg3)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#%3Cinit%3E(android.content.Context,android.util.AttributeSet,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Util.AttributeSet"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        [global::System.Obsolete()]
        public Preference(Android.Content.Context arg0, Android.Util.AttributeSet arg1, int arg2)
            : base(arg0, arg1, arg2)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#%3Cinit%3E(android.content.Context,android.util.AttributeSet)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Util.AttributeSet"/></param>
        [global::System.Obsolete()]
        public Preference(Android.Content.Context arg0, Android.Util.AttributeSet arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#%3Cinit%3E(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        [global::System.Obsolete()]
        public Preference(Android.Content.Context arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#DEFAULT_ORDER"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int DEFAULT_ORDER { get { if (!_DEFAULT_ORDERReady) { _DEFAULT_ORDERContent = SGetField<int>(LocalBridgeClazz, "DEFAULT_ORDER"); _DEFAULT_ORDERReady = true; } return _DEFAULT_ORDERContent; } }
        private static int _DEFAULT_ORDERContent = default;
        private static bool _DEFAULT_ORDERReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#getContext()"/>
        /// </summary>
        /// <returns><see cref="Android.Content.Context"/></returns>
        [global::System.Obsolete()]
        public Android.Content.Context GetContext()
        {
            return IExecuteWithSignature<Android.Content.Context>("getContext", "()Landroid/content/Context;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#getIntent()"/>
        /// </summary>
        /// <returns><see cref="Android.Content.Intent"/></returns>
        [global::System.Obsolete()]
        public Android.Content.Intent GetIntent()
        {
            return IExecuteWithSignature<Android.Content.Intent>("getIntent", "()Landroid/content/Intent;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#getSharedPreferences()"/>
        /// </summary>
        /// <returns><see cref="Android.Content.SharedPreferences"/></returns>
        [global::System.Obsolete()]
        public Android.Content.SharedPreferences GetSharedPreferences()
        {
            return IExecuteWithSignature<Android.Content.SharedPreferences>("getSharedPreferences", "()Landroid/content/SharedPreferences;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#getEditor()"/>
        /// </summary>
        /// <returns><see cref="Android.Content.SharedPreferences.Editor"/></returns>
        [global::System.Obsolete()]
        public Android.Content.SharedPreferences.Editor GetEditor()
        {
            return IExecuteWithSignature<Android.Content.SharedPreferences.Editor>("getEditor", "()Landroid/content/SharedPreferences$Editor;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#getIcon()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        [global::System.Obsolete()]
        public Android.Graphics.Drawable.Drawable GetIcon()
        {
            return IExecuteWithSignature<Android.Graphics.Drawable.Drawable>("getIcon", "()Landroid/graphics/drawable/Drawable;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#getExtras()"/>
        /// </summary>
        /// <returns><see cref="Android.Os.Bundle"/></returns>
        [global::System.Obsolete()]
        public Android.Os.Bundle GetExtras()
        {
            return IExecuteWithSignature<Android.Os.Bundle>("getExtras", "()Landroid/os/Bundle;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#peekExtras()"/>
        /// </summary>
        /// <returns><see cref="Android.Os.Bundle"/></returns>
        [global::System.Obsolete()]
        public Android.Os.Bundle PeekExtras()
        {
            return IExecuteWithSignature<Android.Os.Bundle>("peekExtras", "()Landroid/os/Bundle;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#getOnPreferenceChangeListener()"/>
        /// </summary>
        /// <returns><see cref="Android.Preference.Preference.OnPreferenceChangeListener"/></returns>
        [global::System.Obsolete()]
        public Android.Preference.Preference.OnPreferenceChangeListener GetOnPreferenceChangeListener()
        {
            return IExecuteWithSignature<Android.Preference.Preference.OnPreferenceChangeListener>("getOnPreferenceChangeListener", "()Landroid/preference/Preference$OnPreferenceChangeListener;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#getOnPreferenceChangeListener()"/>
        /// </summary>
        /// <returns><see cref="Android.Preference.Preference.OnPreferenceChangeListener"/></returns>
        [global::System.Obsolete()]
        public Android.Preference.Preference.OnPreferenceChangeListener GetOnPreferenceChangeListenerDirect()
        {
            return IExecuteWithSignature<Android.Preference.Preference.OnPreferenceChangeListenerDirect, Android.Preference.Preference.OnPreferenceChangeListener>("getOnPreferenceChangeListener", "()Landroid/preference/Preference$OnPreferenceChangeListener;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#getOnPreferenceClickListener()"/>
        /// </summary>
        /// <returns><see cref="Android.Preference.Preference.OnPreferenceClickListener"/></returns>
        [global::System.Obsolete()]
        public Android.Preference.Preference.OnPreferenceClickListener GetOnPreferenceClickListener()
        {
            return IExecuteWithSignature<Android.Preference.Preference.OnPreferenceClickListener>("getOnPreferenceClickListener", "()Landroid/preference/Preference$OnPreferenceClickListener;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#getOnPreferenceClickListener()"/>
        /// </summary>
        /// <returns><see cref="Android.Preference.Preference.OnPreferenceClickListener"/></returns>
        [global::System.Obsolete()]
        public Android.Preference.Preference.OnPreferenceClickListener GetOnPreferenceClickListenerDirect()
        {
            return IExecuteWithSignature<Android.Preference.Preference.OnPreferenceClickListenerDirect, Android.Preference.Preference.OnPreferenceClickListener>("getOnPreferenceClickListener", "()Landroid/preference/Preference$OnPreferenceClickListener;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#getPreferenceDataStore()"/>
        /// </summary>
        /// <returns><see cref="Android.Preference.PreferenceDataStore"/></returns>
        [global::System.Obsolete()]
        public Android.Preference.PreferenceDataStore GetPreferenceDataStore()
        {
            return IExecuteWithSignature<Android.Preference.PreferenceDataStore>("getPreferenceDataStore", "()Landroid/preference/PreferenceDataStore;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#getParent()"/>
        /// </summary>
        /// <returns><see cref="Android.Preference.PreferenceGroup"/></returns>
        [global::System.Obsolete()]
        public Android.Preference.PreferenceGroup GetParent()
        {
            return IExecuteWithSignature<Android.Preference.PreferenceGroup>("getParent", "()Landroid/preference/PreferenceGroup;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#getPreferenceManager()"/>
        /// </summary>
        /// <returns><see cref="Android.Preference.PreferenceManager"/></returns>
        [global::System.Obsolete()]
        public Android.Preference.PreferenceManager GetPreferenceManager()
        {
            return IExecuteWithSignature<Android.Preference.PreferenceManager>("getPreferenceManager", "()Landroid/preference/PreferenceManager;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#getView(android.view.View,android.view.ViewGroup)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Android.View.ViewGroup"/></param>
        /// <returns><see cref="Android.View.View"/></returns>
        [global::System.Obsolete()]
        public Android.View.View GetView(Android.View.View arg0, Android.View.ViewGroup arg1)
        {
            return IExecuteWithSignature<Android.View.View>("getView", "(Landroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#getShouldDisableView()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool GetShouldDisableView()
        {
            return IExecuteWithSignature<bool>("getShouldDisableView", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#hasKey()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool HasKey()
        {
            return IExecuteWithSignature<bool>("hasKey", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#isEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool IsEnabled()
        {
            return IExecuteWithSignature<bool>("isEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#isIconSpaceReserved()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool IsIconSpaceReserved()
        {
            return IExecuteWithSignature<bool>("isIconSpaceReserved", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#isPersistent()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool IsPersistent()
        {
            return IExecuteWithSignature<bool>("isPersistent", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#isRecycleEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool IsRecycleEnabled()
        {
            return IExecuteWithSignature<bool>("isRecycleEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#isSelectable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool IsSelectable()
        {
            return IExecuteWithSignature<bool>("isSelectable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#isSingleLineTitle()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool IsSingleLineTitle()
        {
            return IExecuteWithSignature<bool>("isSingleLineTitle", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#persistStringSet(java.util.Set)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Set"/></param>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool PersistStringSet(Java.Util.Set<Java.Lang.String> arg0)
        {
            return IExecuteWithSignature<bool>("persistStringSet", "(Ljava/util/Set;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#shouldCommit()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool ShouldCommit()
        {
            return IExecuteWithSignature<bool>("shouldCommit", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#shouldDisableDependents()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool ShouldDisableDependents()
        {
            return IExecuteWithSignature<bool>("shouldDisableDependents", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#compareTo(android.preference.Preference)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Preference.Preference"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int CompareTo(Android.Preference.Preference arg0)
        {
            return IExecuteWithSignature<int>("compareTo", "(Landroid/preference/Preference;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#compareTo(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int CompareTo(object arg0)
        {
            return IExecuteWithSignature<int>("compareTo", "(Ljava/lang/Object;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#getLayoutResource()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetLayoutResource()
        {
            return IExecuteWithSignature<int>("getLayoutResource", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#getOrder()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetOrder()
        {
            return IExecuteWithSignature<int>("getOrder", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#getTitleRes()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetTitleRes()
        {
            return IExecuteWithSignature<int>("getTitleRes", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#getWidgetLayoutResource()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetWidgetLayoutResource()
        {
            return IExecuteWithSignature<int>("getWidgetLayoutResource", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#getSummary()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        [global::System.Obsolete()]
        public Java.Lang.CharSequence GetSummary()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getSummary", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#getTitle()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        [global::System.Obsolete()]
        public Java.Lang.CharSequence GetTitle()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getTitle", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#getDependency()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        [global::System.Obsolete()]
        public Java.Lang.String GetDependency()
        {
            return IExecuteWithSignature<Java.Lang.String>("getDependency", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#getFragment()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        [global::System.Obsolete()]
        public Java.Lang.String GetFragment()
        {
            return IExecuteWithSignature<Java.Lang.String>("getFragment", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#getKey()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        [global::System.Obsolete()]
        public Java.Lang.String GetKey()
        {
            return IExecuteWithSignature<Java.Lang.String>("getKey", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#getPersistedStringSet(java.util.Set)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Set"/></param>
        /// <returns><see cref="Java.Util.Set"/></returns>
        [global::System.Obsolete()]
        public Java.Util.Set<Java.Lang.String> GetPersistedStringSet(Java.Util.Set<Java.Lang.String> arg0)
        {
            return IExecuteWithSignature<Java.Util.Set<Java.Lang.String>>("getPersistedStringSet", "(Ljava/util/Set;)Ljava/util/Set;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#notifyDependencyChange(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void NotifyDependencyChange(bool arg0)
        {
            IExecuteWithSignature("notifyDependencyChange", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#onDependencyChanged(android.preference.Preference,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Preference.Preference"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void OnDependencyChanged(Android.Preference.Preference arg0, bool arg1)
        {
            IExecuteWithSignature("onDependencyChanged", "(Landroid/preference/Preference;Z)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#onParentChanged(android.preference.Preference,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Preference.Preference"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void OnParentChanged(Android.Preference.Preference arg0, bool arg1)
        {
            IExecuteWithSignature("onParentChanged", "(Landroid/preference/Preference;Z)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#restoreHierarchyState(android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Bundle"/></param>
        [global::System.Obsolete()]
        public void RestoreHierarchyState(Android.Os.Bundle arg0)
        {
            IExecuteWithSignature("restoreHierarchyState", "(Landroid/os/Bundle;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#saveHierarchyState(android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Bundle"/></param>
        [global::System.Obsolete()]
        public void SaveHierarchyState(Android.Os.Bundle arg0)
        {
            IExecuteWithSignature("saveHierarchyState", "(Landroid/os/Bundle;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#setDefaultValue(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        [global::System.Obsolete()]
        public void SetDefaultValue(object arg0)
        {
            IExecuteWithSignature("setDefaultValue", "(Ljava/lang/Object;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#setDependency(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        [global::System.Obsolete()]
        public void SetDependency(Java.Lang.String arg0)
        {
            IExecuteWithSignature("setDependency", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#setEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void SetEnabled(bool arg0)
        {
            IExecuteWithSignature("setEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#setFragment(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        [global::System.Obsolete()]
        public void SetFragment(Java.Lang.String arg0)
        {
            IExecuteWithSignature("setFragment", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#setIcon(android.graphics.drawable.Drawable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        [global::System.Obsolete()]
        public void SetIcon(Android.Graphics.Drawable.Drawable arg0)
        {
            IExecuteWithSignature("setIcon", "(Landroid/graphics/drawable/Drawable;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#setIcon(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void SetIcon(int arg0)
        {
            IExecuteWithSignature("setIcon", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#setIconSpaceReserved(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void SetIconSpaceReserved(bool arg0)
        {
            IExecuteWithSignature("setIconSpaceReserved", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#setIntent(android.content.Intent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Intent"/></param>
        [global::System.Obsolete()]
        public void SetIntent(Android.Content.Intent arg0)
        {
            IExecuteWithSignature("setIntent", "(Landroid/content/Intent;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#setKey(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        [global::System.Obsolete()]
        public void SetKey(Java.Lang.String arg0)
        {
            IExecuteWithSignature("setKey", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#setLayoutResource(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void SetLayoutResource(int arg0)
        {
            IExecuteWithSignature("setLayoutResource", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#setOnPreferenceChangeListener(android.preference.Preference.OnPreferenceChangeListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Preference.Preference.OnPreferenceChangeListener"/></param>
        [global::System.Obsolete()]
        public void SetOnPreferenceChangeListener(Android.Preference.Preference.OnPreferenceChangeListener arg0)
        {
            IExecuteWithSignature("setOnPreferenceChangeListener", "(Landroid/preference/Preference$OnPreferenceChangeListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#setOnPreferenceClickListener(android.preference.Preference.OnPreferenceClickListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Preference.Preference.OnPreferenceClickListener"/></param>
        [global::System.Obsolete()]
        public void SetOnPreferenceClickListener(Android.Preference.Preference.OnPreferenceClickListener arg0)
        {
            IExecuteWithSignature("setOnPreferenceClickListener", "(Landroid/preference/Preference$OnPreferenceClickListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#setOrder(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void SetOrder(int arg0)
        {
            IExecuteWithSignature("setOrder", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#setPersistent(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void SetPersistent(bool arg0)
        {
            IExecuteWithSignature("setPersistent", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#setPreferenceDataStore(android.preference.PreferenceDataStore)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Preference.PreferenceDataStore"/></param>
        [global::System.Obsolete()]
        public void SetPreferenceDataStore(Android.Preference.PreferenceDataStore arg0)
        {
            IExecuteWithSignature("setPreferenceDataStore", "(Landroid/preference/PreferenceDataStore;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#setRecycleEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void SetRecycleEnabled(bool arg0)
        {
            IExecuteWithSignature("setRecycleEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#setSelectable(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void SetSelectable(bool arg0)
        {
            IExecuteWithSignature("setSelectable", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#setShouldDisableView(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void SetShouldDisableView(bool arg0)
        {
            IExecuteWithSignature("setShouldDisableView", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#setSingleLineTitle(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void SetSingleLineTitle(bool arg0)
        {
            IExecuteWithSignature("setSingleLineTitle", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#setSummary(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void SetSummary(int arg0)
        {
            IExecuteWithSignature("setSummary", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#setSummary(java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        [global::System.Obsolete()]
        public void SetSummary(Java.Lang.CharSequence arg0)
        {
            IExecuteWithSignature("setSummary", "(Ljava/lang/CharSequence;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#setTitle(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void SetTitle(int arg0)
        {
            IExecuteWithSignature("setTitle", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#setTitle(java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        [global::System.Obsolete()]
        public void SetTitle(Java.Lang.CharSequence arg0)
        {
            IExecuteWithSignature("setTitle", "(Ljava/lang/CharSequence;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/Preference.html#setWidgetLayoutResource(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void SetWidgetLayoutResource(int arg0)
        {
            IExecuteWithSignature("setWidgetLayoutResource", "(I)V", arg0);
        }

        #endregion

        #region Nested classes
        #region BaseSavedState implementation
        public partial class BaseSavedState
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/preference/Preference.BaseSavedState.html#%3Cinit%3E(android.os.Parcel)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            [global::System.Obsolete()]
            public BaseSavedState(Android.Os.Parcel arg0)
                : base(arg0)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/preference/Preference.BaseSavedState.html#%3Cinit%3E(android.os.Parcelable)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcelable"/></param>
            [global::System.Obsolete()]
            public BaseSavedState(Android.Os.Parcelable arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/preference/Preference.BaseSavedState.html#CREATOR"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnPreferenceChangeListener implementation
        public partial class OnPreferenceChangeListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnPreferenceChangeListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onPreferenceChange", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnPreferenceChangeEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/preference/Preference.OnPreferenceChangeListener.html#onPreferenceChange(android.preference.Preference,java.lang.Object)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnPreferenceChange"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<Android.Preference.Preference, object, bool> OnOnPreferenceChange { get; set; } = null;

            bool hasOverrideOnPreferenceChange = true;
            void OnPreferenceChangeEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnPreferenceChange = true;
                var methodToExecute = (OnOnPreferenceChange != null) ? OnOnPreferenceChange : OnPreferenceChange;
                var executionResult = methodToExecute.Invoke(data.EventData.GetAt<Android.Preference.Preference>(0), data.EventData.GetAt<object>(1));
                data.EventData.TypedEventData.SetReturnData(hasOverrideOnPreferenceChange, executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/preference/Preference.OnPreferenceChangeListener.html#onPreferenceChange(android.preference.Preference,java.lang.Object)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Preference.Preference"/></param>
            /// <param name="arg1"><see cref="object"/></param>
            /// <returns><see cref="bool"/></returns>
            [global::System.Obsolete()]
            public virtual bool OnPreferenceChange(Android.Preference.Preference arg0, object arg1)
            {
                hasOverrideOnPreferenceChange = false; return default;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnPreferenceChangeListenerDirect implementation
        public partial class OnPreferenceChangeListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/preference/Preference.OnPreferenceChangeListener.html#onPreferenceChange(android.preference.Preference,java.lang.Object)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Preference.Preference"/></param>
            /// <param name="arg1"><see cref="object"/></param>
            /// <returns><see cref="bool"/></returns>
            [global::System.Obsolete()]
            public override bool OnPreferenceChange(Android.Preference.Preference arg0, object arg1)
            {
                return IExecuteWithSignature<bool>("onPreferenceChange", "(Landroid/preference/Preference;Ljava/lang/Object;)Z", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnPreferenceClickListener implementation
        public partial class OnPreferenceClickListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnPreferenceClickListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onPreferenceClick", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnPreferenceClickEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/preference/Preference.OnPreferenceClickListener.html#onPreferenceClick(android.preference.Preference)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnPreferenceClick"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<Android.Preference.Preference, bool> OnOnPreferenceClick { get; set; } = null;

            bool hasOverrideOnPreferenceClick = true;
            void OnPreferenceClickEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnPreferenceClick = true;
                var methodToExecute = (OnOnPreferenceClick != null) ? OnOnPreferenceClick : OnPreferenceClick;
                var executionResult = methodToExecute.Invoke(data.EventData.GetAt<Android.Preference.Preference>(0));
                data.EventData.TypedEventData.SetReturnData(hasOverrideOnPreferenceClick, executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/preference/Preference.OnPreferenceClickListener.html#onPreferenceClick(android.preference.Preference)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Preference.Preference"/></param>
            /// <returns><see cref="bool"/></returns>
            [global::System.Obsolete()]
            public virtual bool OnPreferenceClick(Android.Preference.Preference arg0)
            {
                hasOverrideOnPreferenceClick = false; return default;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnPreferenceClickListenerDirect implementation
        public partial class OnPreferenceClickListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/preference/Preference.OnPreferenceClickListener.html#onPreferenceClick(android.preference.Preference)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Preference.Preference"/></param>
            /// <returns><see cref="bool"/></returns>
            [global::System.Obsolete()]
            public override bool OnPreferenceClick(Android.Preference.Preference arg0)
            {
                return IExecuteWithSignature<bool>("onPreferenceClick", "(Landroid/preference/Preference;)Z", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
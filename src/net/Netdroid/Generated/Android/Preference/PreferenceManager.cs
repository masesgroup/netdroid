/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Preference
{
    #region PreferenceManager declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/preference/PreferenceManager.html"/>
    /// </summary>
    [global::System.Obsolete()]
    public partial class PreferenceManager : MASES.JCOBridge.C2JBridge.JVMBridgeBase<PreferenceManager>
    {
        const string _bridgeClassName = "android.preference.PreferenceManager";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public PreferenceManager() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public PreferenceManager(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region OnActivityDestroyListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/PreferenceManager.OnActivityDestroyListener.html"/>
        /// </summary>
        [global::System.Obsolete()]
        public partial class OnActivityDestroyListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnActivityDestroyListener() { InitializeHandlers(); }
        
            const string _bridgeClassName = "org.mases.netdroid.generated.android.preference.PreferenceManager_OnActivityDestroyListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
        
        
            // TODO: complete the class
        
        }
        #endregion
        
        #region OnActivityDestroyListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="OnActivityDestroyListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnActivityDestroyListenerDirect : OnActivityDestroyListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;
        
            /// <inheritdoc />
            protected override void InitializeHandlers() { }
        
            const string _bridgeClassName = "android.preference.PreferenceManager$OnActivityDestroyListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region OnActivityResultListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/PreferenceManager.OnActivityResultListener.html"/>
        /// </summary>
        [global::System.Obsolete()]
        public partial class OnActivityResultListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnActivityResultListener() { InitializeHandlers(); }
        
            const string _bridgeClassName = "org.mases.netdroid.generated.android.preference.PreferenceManager_OnActivityResultListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
        
        
            // TODO: complete the class
        
        }
        #endregion
        
        #region OnActivityResultListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="OnActivityResultListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnActivityResultListenerDirect : OnActivityResultListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;
        
            /// <inheritdoc />
            protected override void InitializeHandlers() { }
        
            const string _bridgeClassName = "android.preference.PreferenceManager$OnActivityResultListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region OnActivityStopListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/PreferenceManager.OnActivityStopListener.html"/>
        /// </summary>
        [global::System.Obsolete()]
        public partial class OnActivityStopListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnActivityStopListener() { InitializeHandlers(); }
        
            const string _bridgeClassName = "org.mases.netdroid.generated.android.preference.PreferenceManager_OnActivityStopListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
        
        
            // TODO: complete the class
        
        }
        #endregion
        
        #region OnActivityStopListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="OnActivityStopListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnActivityStopListenerDirect : OnActivityStopListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;
        
            /// <inheritdoc />
            protected override void InitializeHandlers() { }
        
            const string _bridgeClassName = "android.preference.PreferenceManager$OnActivityStopListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

    
    }
    #endregion

    #region PreferenceManager implementation
    public partial class PreferenceManager
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/PreferenceManager.html#KEY_HAS_SET_DEFAULT_VALUES"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String KEY_HAS_SET_DEFAULT_VALUES { get { if (!_KEY_HAS_SET_DEFAULT_VALUESReady) { _KEY_HAS_SET_DEFAULT_VALUESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_HAS_SET_DEFAULT_VALUES"); _KEY_HAS_SET_DEFAULT_VALUESReady = true; } return _KEY_HAS_SET_DEFAULT_VALUESContent; } }
        private static Java.Lang.String _KEY_HAS_SET_DEFAULT_VALUESContent = default;
        private static bool _KEY_HAS_SET_DEFAULT_VALUESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/PreferenceManager.html#METADATA_KEY_PREFERENCES"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String METADATA_KEY_PREFERENCES { get { if (!_METADATA_KEY_PREFERENCESReady) { _METADATA_KEY_PREFERENCESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METADATA_KEY_PREFERENCES"); _METADATA_KEY_PREFERENCESReady = true; } return _METADATA_KEY_PREFERENCESContent; } }
        private static Java.Lang.String _METADATA_KEY_PREFERENCESContent = default;
        private static bool _METADATA_KEY_PREFERENCESReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/PreferenceManager.html#getDefaultSharedPreferences(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <returns><see cref="Android.Content.SharedPreferences"/></returns>
        [global::System.Obsolete()]
        public static Android.Content.SharedPreferences GetDefaultSharedPreferences(Android.Content.Context arg0)
        {
            return SExecuteWithSignature<Android.Content.SharedPreferences>(LocalBridgeClazz, "getDefaultSharedPreferences", "(Landroid/content/Context;)Landroid/content/SharedPreferences;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/PreferenceManager.html#getDefaultSharedPreferencesName(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        [global::System.Obsolete()]
        public static Java.Lang.String GetDefaultSharedPreferencesName(Android.Content.Context arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "getDefaultSharedPreferencesName", "(Landroid/content/Context;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/PreferenceManager.html#setDefaultValues(android.content.Context,int,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public static void SetDefaultValues(Android.Content.Context arg0, int arg1, bool arg2)
        {
            SExecuteWithSignature(LocalBridgeClazz, "setDefaultValues", "(Landroid/content/Context;IZ)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/PreferenceManager.html#setDefaultValues(android.content.Context,java.lang.String,int,int,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public static void SetDefaultValues(Android.Content.Context arg0, Java.Lang.String arg1, int arg2, int arg3, bool arg4)
        {
            SExecuteWithSignature(LocalBridgeClazz, "setDefaultValues", "(Landroid/content/Context;Ljava/lang/String;IIZ)V", arg0, arg1, arg2, arg3, arg4);
        }
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/PreferenceManager.html#getSharedPreferences()"/>
        /// </summary>
        /// <returns><see cref="Android.Content.SharedPreferences"/></returns>
        [global::System.Obsolete()]
        public Android.Content.SharedPreferences GetSharedPreferences()
        {
            return IExecuteWithSignature<Android.Content.SharedPreferences>("getSharedPreferences", "()Landroid/content/SharedPreferences;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/PreferenceManager.html#findPreference(java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <returns><see cref="Android.Preference.Preference"/></returns>
        [global::System.Obsolete()]
        public Android.Preference.Preference FindPreference(Java.Lang.CharSequence arg0)
        {
            return IExecuteWithSignature<Android.Preference.Preference>("findPreference", "(Ljava/lang/CharSequence;)Landroid/preference/Preference;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/PreferenceManager.html#getPreferenceDataStore()"/>
        /// </summary>
        /// <returns><see cref="Android.Preference.PreferenceDataStore"/></returns>
        [global::System.Obsolete()]
        public Android.Preference.PreferenceDataStore GetPreferenceDataStore()
        {
            return IExecuteWithSignature<Android.Preference.PreferenceDataStore>("getPreferenceDataStore", "()Landroid/preference/PreferenceDataStore;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/PreferenceManager.html#createPreferenceScreen(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <returns><see cref="Android.Preference.PreferenceScreen"/></returns>
        [global::System.Obsolete()]
        public Android.Preference.PreferenceScreen CreatePreferenceScreen(Android.Content.Context arg0)
        {
            return IExecuteWithSignature<Android.Preference.PreferenceScreen>("createPreferenceScreen", "(Landroid/content/Context;)Landroid/preference/PreferenceScreen;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/PreferenceManager.html#isStorageDefault()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool IsStorageDefault()
        {
            return IExecuteWithSignature<bool>("isStorageDefault", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/PreferenceManager.html#isStorageDeviceProtected()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool IsStorageDeviceProtected()
        {
            return IExecuteWithSignature<bool>("isStorageDeviceProtected", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/PreferenceManager.html#getSharedPreferencesMode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetSharedPreferencesMode()
        {
            return IExecuteWithSignature<int>("getSharedPreferencesMode", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/PreferenceManager.html#getSharedPreferencesName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        [global::System.Obsolete()]
        public Java.Lang.String GetSharedPreferencesName()
        {
            return IExecuteWithSignature<Java.Lang.String>("getSharedPreferencesName", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/PreferenceManager.html#setPreferenceDataStore(android.preference.PreferenceDataStore)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Preference.PreferenceDataStore"/></param>
        [global::System.Obsolete()]
        public void SetPreferenceDataStore(Android.Preference.PreferenceDataStore arg0)
        {
            IExecuteWithSignature("setPreferenceDataStore", "(Landroid/preference/PreferenceDataStore;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/PreferenceManager.html#setSharedPreferencesMode(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void SetSharedPreferencesMode(int arg0)
        {
            IExecuteWithSignature("setSharedPreferencesMode", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/PreferenceManager.html#setSharedPreferencesName(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        [global::System.Obsolete()]
        public void SetSharedPreferencesName(Java.Lang.String arg0)
        {
            IExecuteWithSignature("setSharedPreferencesName", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/PreferenceManager.html#setStorageDefault()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void SetStorageDefault()
        {
            IExecuteWithSignature("setStorageDefault", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/preference/PreferenceManager.html#setStorageDeviceProtected()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void SetStorageDeviceProtected()
        {
            IExecuteWithSignature("setStorageDeviceProtected", "()V");
        }
    
        #endregion
    
        #region Nested classes
        #region OnActivityDestroyListener implementation
        public partial class OnActivityDestroyListener
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnActivityDestroyListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onActivityDestroy", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnActivityDestroyEventHandler));

            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/preference/PreferenceManager.OnActivityDestroyListener.html#onActivityDestroy()"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnActivityDestroy"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action OnOnActivityDestroy { get; set; } = null;
            
            bool hasOverrideOnActivityDestroy = true;
            void OnActivityDestroyEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnActivityDestroy = true;
                var methodToExecute = (OnOnActivityDestroy != null) ? OnOnActivityDestroy : OnActivityDestroy;
                methodToExecute.Invoke();
                data.EventData.TypedEventData.HasOverride = hasOverrideOnActivityDestroy;
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/preference/PreferenceManager.OnActivityDestroyListener.html#onActivityDestroy()"/>
            /// </summary>
            [global::System.Obsolete()]
            public virtual void OnActivityDestroy()
            {
                hasOverrideOnActivityDestroy = false;
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region OnActivityDestroyListenerDirect implementation
        public partial class OnActivityDestroyListenerDirect
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/preference/PreferenceManager.OnActivityDestroyListener.html#onActivityDestroy()"/>
            /// </summary>
            [global::System.Obsolete()]
            public override void OnActivityDestroy()
            {
                IExecuteWithSignature("onActivityDestroy", "()V");
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region OnActivityResultListener implementation
        public partial class OnActivityResultListener
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnActivityResultListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onActivityResult", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnActivityResultEventHandler));

            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/preference/PreferenceManager.OnActivityResultListener.html#onActivityResult(int,int,android.content.Intent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnActivityResult"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<int, int, Android.Content.Intent, bool> OnOnActivityResult { get; set; } = null;
            
            bool hasOverrideOnActivityResult = true;
            void OnActivityResultEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnActivityResult = true;
                var methodToExecute = (OnOnActivityResult != null) ? OnOnActivityResult : OnActivityResult;
                var executionResult = methodToExecute.Invoke(data.EventData.GetAt<int>(0), data.EventData.GetAt<int>(1), data.EventData.GetAt<Android.Content.Intent>(2));
                data.EventData.TypedEventData.SetReturnData(hasOverrideOnActivityResult, executionResult);
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/preference/PreferenceManager.OnActivityResultListener.html#onActivityResult(int,int,android.content.Intent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="Android.Content.Intent"/></param>
            /// <returns><see cref="bool"/></returns>
            [global::System.Obsolete()]
            public virtual bool OnActivityResult(int arg0, int arg1, Android.Content.Intent arg2)
            {
                hasOverrideOnActivityResult = false; return default;
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region OnActivityResultListenerDirect implementation
        public partial class OnActivityResultListenerDirect
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/preference/PreferenceManager.OnActivityResultListener.html#onActivityResult(int,int,android.content.Intent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="Android.Content.Intent"/></param>
            /// <returns><see cref="bool"/></returns>
            [global::System.Obsolete()]
            public override bool OnActivityResult(int arg0, int arg1, Android.Content.Intent arg2)
            {
                return IExecuteWithSignature<bool>("onActivityResult", "(IILandroid/content/Intent;)Z", arg0, arg1, arg2);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region OnActivityStopListener implementation
        public partial class OnActivityStopListener
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnActivityStopListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onActivityStop", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnActivityStopEventHandler));

            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/preference/PreferenceManager.OnActivityStopListener.html#onActivityStop()"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnActivityStop"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action OnOnActivityStop { get; set; } = null;
            
            bool hasOverrideOnActivityStop = true;
            void OnActivityStopEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnActivityStop = true;
                var methodToExecute = (OnOnActivityStop != null) ? OnOnActivityStop : OnActivityStop;
                methodToExecute.Invoke();
                data.EventData.TypedEventData.HasOverride = hasOverrideOnActivityStop;
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/preference/PreferenceManager.OnActivityStopListener.html#onActivityStop()"/>
            /// </summary>
            [global::System.Obsolete()]
            public virtual void OnActivityStop()
            {
                hasOverrideOnActivityStop = false;
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region OnActivityStopListenerDirect implementation
        public partial class OnActivityStopListenerDirect
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/preference/PreferenceManager.OnActivityStopListener.html#onActivityStop()"/>
            /// </summary>
            [global::System.Obsolete()]
            public override void OnActivityStop()
            {
                IExecuteWithSignature("onActivityStop", "()V");
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
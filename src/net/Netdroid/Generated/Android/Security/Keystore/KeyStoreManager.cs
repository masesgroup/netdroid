/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Security.Keystore
{
    #region KeyStoreManager declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/security/keystore/KeyStoreManager.html"/>
    /// </summary>
    public partial class KeyStoreManager : MASES.JCOBridge.C2JBridge.JVMBridgeBase<KeyStoreManager>
    {
        const string _bridgeClassName = "android.security.keystore.KeyStoreManager";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public KeyStoreManager() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public KeyStoreManager(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public KeyStoreManager(params object[] args) : base(args) { }
    
        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region KeyStoreManager implementation
    public partial class KeyStoreManager
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyStoreManager.html#MODULE_HASH"/>
        /// </summary>
        public static int MODULE_HASH { get { if (!_MODULE_HASHReady) { _MODULE_HASHContent = SGetField<int>(LocalBridgeClazz, "MODULE_HASH"); _MODULE_HASHReady = true; } return _MODULE_HASHContent; } }
        private static int _MODULE_HASHContent = default;
        private static bool _MODULE_HASHReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyStoreManager.html#getSupplementaryAttestationInfo(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="byte"/></returns>
        /// <exception cref="Android.Security.KeyStoreException"/>
        public byte[] GetSupplementaryAttestationInfo(int arg0)
        {
            return IExecuteWithSignatureArray<byte>("getSupplementaryAttestationInfo", "(I)[B", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyStoreManager.html#getGrantedKeyFromId(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="Java.Security.Key"/></returns>
        /// <exception cref="Android.Security.Keystore.KeyPermanentlyInvalidatedException"/>
        /// <exception cref="Java.Security.UnrecoverableKeyException"/>
        public Java.Security.Key GetGrantedKeyFromId(long arg0)
        {
            return IExecuteWithSignature<Java.Security.Key>("getGrantedKeyFromId", "(J)Ljava/security/Key;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyStoreManager.html#getGrantedKeyPairFromId(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="Java.Security.KeyPair"/></returns>
        /// <exception cref="Android.Security.Keystore.KeyPermanentlyInvalidatedException"/>
        /// <exception cref="Java.Security.UnrecoverableKeyException"/>
        public Java.Security.KeyPair GetGrantedKeyPairFromId(long arg0)
        {
            return IExecuteWithSignature<Java.Security.KeyPair>("getGrantedKeyPairFromId", "(J)Ljava/security/KeyPair;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyStoreManager.html#getGrantedCertificateChainFromId(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        /// <exception cref="Android.Security.Keystore.KeyPermanentlyInvalidatedException"/>
        /// <exception cref="Java.Security.UnrecoverableKeyException"/>
        public Java.Util.List<Java.Security.Cert.X509Certificate> GetGrantedCertificateChainFromId(long arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Java.Security.Cert.X509Certificate>>("getGrantedCertificateChainFromId", "(J)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyStoreManager.html#grantKeyAccess(java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="long"/></returns>
        /// <exception cref="Android.Security.KeyStoreException"/>
        /// <exception cref="Java.Security.UnrecoverableKeyException"/>
        public long GrantKeyAccess(Java.Lang.String arg0, int arg1)
        {
            return IExecuteWithSignature<long>("grantKeyAccess", "(Ljava/lang/String;I)J", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyStoreManager.html#revokeKeyAccess(java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <exception cref="Android.Security.KeyStoreException"/>
        /// <exception cref="Java.Security.UnrecoverableKeyException"/>
        public void RevokeKeyAccess(Java.Lang.String arg0, int arg1)
        {
            IExecuteWithSignature("revokeKeyAccess", "(Ljava/lang/String;I)V", arg0, arg1);
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Security.Keystore
{
    #region KeyProperties
    public partial class KeyProperties
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#AUTH_BIOMETRIC_STRONG"/>
        /// </summary>
        public static int AUTH_BIOMETRIC_STRONG { get { if (!_AUTH_BIOMETRIC_STRONGReady) { _AUTH_BIOMETRIC_STRONGContent = SGetField<int>(LocalBridgeClazz, "AUTH_BIOMETRIC_STRONG"); _AUTH_BIOMETRIC_STRONGReady = true; } return _AUTH_BIOMETRIC_STRONGContent; } }
        private static int _AUTH_BIOMETRIC_STRONGContent = default;
        private static bool _AUTH_BIOMETRIC_STRONGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#AUTH_DEVICE_CREDENTIAL"/>
        /// </summary>
        public static int AUTH_DEVICE_CREDENTIAL { get { if (!_AUTH_DEVICE_CREDENTIALReady) { _AUTH_DEVICE_CREDENTIALContent = SGetField<int>(LocalBridgeClazz, "AUTH_DEVICE_CREDENTIAL"); _AUTH_DEVICE_CREDENTIALReady = true; } return _AUTH_DEVICE_CREDENTIALContent; } }
        private static int _AUTH_DEVICE_CREDENTIALContent = default;
        private static bool _AUTH_DEVICE_CREDENTIALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#ORIGIN_GENERATED"/>
        /// </summary>
        public static int ORIGIN_GENERATED { get { if (!_ORIGIN_GENERATEDReady) { _ORIGIN_GENERATEDContent = SGetField<int>(LocalBridgeClazz, "ORIGIN_GENERATED"); _ORIGIN_GENERATEDReady = true; } return _ORIGIN_GENERATEDContent; } }
        private static int _ORIGIN_GENERATEDContent = default;
        private static bool _ORIGIN_GENERATEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#ORIGIN_IMPORTED"/>
        /// </summary>
        public static int ORIGIN_IMPORTED { get { if (!_ORIGIN_IMPORTEDReady) { _ORIGIN_IMPORTEDContent = SGetField<int>(LocalBridgeClazz, "ORIGIN_IMPORTED"); _ORIGIN_IMPORTEDReady = true; } return _ORIGIN_IMPORTEDContent; } }
        private static int _ORIGIN_IMPORTEDContent = default;
        private static bool _ORIGIN_IMPORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#ORIGIN_SECURELY_IMPORTED"/>
        /// </summary>
        public static int ORIGIN_SECURELY_IMPORTED { get { if (!_ORIGIN_SECURELY_IMPORTEDReady) { _ORIGIN_SECURELY_IMPORTEDContent = SGetField<int>(LocalBridgeClazz, "ORIGIN_SECURELY_IMPORTED"); _ORIGIN_SECURELY_IMPORTEDReady = true; } return _ORIGIN_SECURELY_IMPORTEDContent; } }
        private static int _ORIGIN_SECURELY_IMPORTEDContent = default;
        private static bool _ORIGIN_SECURELY_IMPORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#ORIGIN_UNKNOWN"/>
        /// </summary>
        public static int ORIGIN_UNKNOWN { get { if (!_ORIGIN_UNKNOWNReady) { _ORIGIN_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "ORIGIN_UNKNOWN"); _ORIGIN_UNKNOWNReady = true; } return _ORIGIN_UNKNOWNContent; } }
        private static int _ORIGIN_UNKNOWNContent = default;
        private static bool _ORIGIN_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#PURPOSE_AGREE_KEY"/>
        /// </summary>
        public static int PURPOSE_AGREE_KEY { get { if (!_PURPOSE_AGREE_KEYReady) { _PURPOSE_AGREE_KEYContent = SGetField<int>(LocalBridgeClazz, "PURPOSE_AGREE_KEY"); _PURPOSE_AGREE_KEYReady = true; } return _PURPOSE_AGREE_KEYContent; } }
        private static int _PURPOSE_AGREE_KEYContent = default;
        private static bool _PURPOSE_AGREE_KEYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#PURPOSE_ATTEST_KEY"/>
        /// </summary>
        public static int PURPOSE_ATTEST_KEY { get { if (!_PURPOSE_ATTEST_KEYReady) { _PURPOSE_ATTEST_KEYContent = SGetField<int>(LocalBridgeClazz, "PURPOSE_ATTEST_KEY"); _PURPOSE_ATTEST_KEYReady = true; } return _PURPOSE_ATTEST_KEYContent; } }
        private static int _PURPOSE_ATTEST_KEYContent = default;
        private static bool _PURPOSE_ATTEST_KEYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#PURPOSE_DECRYPT"/>
        /// </summary>
        public static int PURPOSE_DECRYPT { get { if (!_PURPOSE_DECRYPTReady) { _PURPOSE_DECRYPTContent = SGetField<int>(LocalBridgeClazz, "PURPOSE_DECRYPT"); _PURPOSE_DECRYPTReady = true; } return _PURPOSE_DECRYPTContent; } }
        private static int _PURPOSE_DECRYPTContent = default;
        private static bool _PURPOSE_DECRYPTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#PURPOSE_ENCRYPT"/>
        /// </summary>
        public static int PURPOSE_ENCRYPT { get { if (!_PURPOSE_ENCRYPTReady) { _PURPOSE_ENCRYPTContent = SGetField<int>(LocalBridgeClazz, "PURPOSE_ENCRYPT"); _PURPOSE_ENCRYPTReady = true; } return _PURPOSE_ENCRYPTContent; } }
        private static int _PURPOSE_ENCRYPTContent = default;
        private static bool _PURPOSE_ENCRYPTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#PURPOSE_SIGN"/>
        /// </summary>
        public static int PURPOSE_SIGN { get { if (!_PURPOSE_SIGNReady) { _PURPOSE_SIGNContent = SGetField<int>(LocalBridgeClazz, "PURPOSE_SIGN"); _PURPOSE_SIGNReady = true; } return _PURPOSE_SIGNContent; } }
        private static int _PURPOSE_SIGNContent = default;
        private static bool _PURPOSE_SIGNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#PURPOSE_VERIFY"/>
        /// </summary>
        public static int PURPOSE_VERIFY { get { if (!_PURPOSE_VERIFYReady) { _PURPOSE_VERIFYContent = SGetField<int>(LocalBridgeClazz, "PURPOSE_VERIFY"); _PURPOSE_VERIFYReady = true; } return _PURPOSE_VERIFYContent; } }
        private static int _PURPOSE_VERIFYContent = default;
        private static bool _PURPOSE_VERIFYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#PURPOSE_WRAP_KEY"/>
        /// </summary>
        public static int PURPOSE_WRAP_KEY { get { if (!_PURPOSE_WRAP_KEYReady) { _PURPOSE_WRAP_KEYContent = SGetField<int>(LocalBridgeClazz, "PURPOSE_WRAP_KEY"); _PURPOSE_WRAP_KEYReady = true; } return _PURPOSE_WRAP_KEYContent; } }
        private static int _PURPOSE_WRAP_KEYContent = default;
        private static bool _PURPOSE_WRAP_KEYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#SECURITY_LEVEL_SOFTWARE"/>
        /// </summary>
        public static int SECURITY_LEVEL_SOFTWARE { get { if (!_SECURITY_LEVEL_SOFTWAREReady) { _SECURITY_LEVEL_SOFTWAREContent = SGetField<int>(LocalBridgeClazz, "SECURITY_LEVEL_SOFTWARE"); _SECURITY_LEVEL_SOFTWAREReady = true; } return _SECURITY_LEVEL_SOFTWAREContent; } }
        private static int _SECURITY_LEVEL_SOFTWAREContent = default;
        private static bool _SECURITY_LEVEL_SOFTWAREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#SECURITY_LEVEL_STRONGBOX"/>
        /// </summary>
        public static int SECURITY_LEVEL_STRONGBOX { get { if (!_SECURITY_LEVEL_STRONGBOXReady) { _SECURITY_LEVEL_STRONGBOXContent = SGetField<int>(LocalBridgeClazz, "SECURITY_LEVEL_STRONGBOX"); _SECURITY_LEVEL_STRONGBOXReady = true; } return _SECURITY_LEVEL_STRONGBOXContent; } }
        private static int _SECURITY_LEVEL_STRONGBOXContent = default;
        private static bool _SECURITY_LEVEL_STRONGBOXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#SECURITY_LEVEL_TRUSTED_ENVIRONMENT"/>
        /// </summary>
        public static int SECURITY_LEVEL_TRUSTED_ENVIRONMENT { get { if (!_SECURITY_LEVEL_TRUSTED_ENVIRONMENTReady) { _SECURITY_LEVEL_TRUSTED_ENVIRONMENTContent = SGetField<int>(LocalBridgeClazz, "SECURITY_LEVEL_TRUSTED_ENVIRONMENT"); _SECURITY_LEVEL_TRUSTED_ENVIRONMENTReady = true; } return _SECURITY_LEVEL_TRUSTED_ENVIRONMENTContent; } }
        private static int _SECURITY_LEVEL_TRUSTED_ENVIRONMENTContent = default;
        private static bool _SECURITY_LEVEL_TRUSTED_ENVIRONMENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#SECURITY_LEVEL_UNKNOWN"/>
        /// </summary>
        public static int SECURITY_LEVEL_UNKNOWN { get { if (!_SECURITY_LEVEL_UNKNOWNReady) { _SECURITY_LEVEL_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "SECURITY_LEVEL_UNKNOWN"); _SECURITY_LEVEL_UNKNOWNReady = true; } return _SECURITY_LEVEL_UNKNOWNContent; } }
        private static int _SECURITY_LEVEL_UNKNOWNContent = default;
        private static bool _SECURITY_LEVEL_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#SECURITY_LEVEL_UNKNOWN_SECURE"/>
        /// </summary>
        public static int SECURITY_LEVEL_UNKNOWN_SECURE { get { if (!_SECURITY_LEVEL_UNKNOWN_SECUREReady) { _SECURITY_LEVEL_UNKNOWN_SECUREContent = SGetField<int>(LocalBridgeClazz, "SECURITY_LEVEL_UNKNOWN_SECURE"); _SECURITY_LEVEL_UNKNOWN_SECUREReady = true; } return _SECURITY_LEVEL_UNKNOWN_SECUREContent; } }
        private static int _SECURITY_LEVEL_UNKNOWN_SECUREContent = default;
        private static bool _SECURITY_LEVEL_UNKNOWN_SECUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#UNRESTRICTED_USAGE_COUNT"/>
        /// </summary>
        public static int UNRESTRICTED_USAGE_COUNT { get { if (!_UNRESTRICTED_USAGE_COUNTReady) { _UNRESTRICTED_USAGE_COUNTContent = SGetField<int>(LocalBridgeClazz, "UNRESTRICTED_USAGE_COUNT"); _UNRESTRICTED_USAGE_COUNTReady = true; } return _UNRESTRICTED_USAGE_COUNTContent; } }
        private static int _UNRESTRICTED_USAGE_COUNTContent = default;
        private static bool _UNRESTRICTED_USAGE_COUNTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#BLOCK_MODE_CBC"/>
        /// </summary>
        public static Java.Lang.String BLOCK_MODE_CBC { get { if (!_BLOCK_MODE_CBCReady) { _BLOCK_MODE_CBCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BLOCK_MODE_CBC"); _BLOCK_MODE_CBCReady = true; } return _BLOCK_MODE_CBCContent; } }
        private static Java.Lang.String _BLOCK_MODE_CBCContent = default;
        private static bool _BLOCK_MODE_CBCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#BLOCK_MODE_CTR"/>
        /// </summary>
        public static Java.Lang.String BLOCK_MODE_CTR { get { if (!_BLOCK_MODE_CTRReady) { _BLOCK_MODE_CTRContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BLOCK_MODE_CTR"); _BLOCK_MODE_CTRReady = true; } return _BLOCK_MODE_CTRContent; } }
        private static Java.Lang.String _BLOCK_MODE_CTRContent = default;
        private static bool _BLOCK_MODE_CTRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#BLOCK_MODE_ECB"/>
        /// </summary>
        public static Java.Lang.String BLOCK_MODE_ECB { get { if (!_BLOCK_MODE_ECBReady) { _BLOCK_MODE_ECBContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BLOCK_MODE_ECB"); _BLOCK_MODE_ECBReady = true; } return _BLOCK_MODE_ECBContent; } }
        private static Java.Lang.String _BLOCK_MODE_ECBContent = default;
        private static bool _BLOCK_MODE_ECBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#BLOCK_MODE_GCM"/>
        /// </summary>
        public static Java.Lang.String BLOCK_MODE_GCM { get { if (!_BLOCK_MODE_GCMReady) { _BLOCK_MODE_GCMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BLOCK_MODE_GCM"); _BLOCK_MODE_GCMReady = true; } return _BLOCK_MODE_GCMContent; } }
        private static Java.Lang.String _BLOCK_MODE_GCMContent = default;
        private static bool _BLOCK_MODE_GCMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#DIGEST_MD5"/>
        /// </summary>
        public static Java.Lang.String DIGEST_MD5 { get { if (!_DIGEST_MD5Ready) { _DIGEST_MD5Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "DIGEST_MD5"); _DIGEST_MD5Ready = true; } return _DIGEST_MD5Content; } }
        private static Java.Lang.String _DIGEST_MD5Content = default;
        private static bool _DIGEST_MD5Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#DIGEST_NONE"/>
        /// </summary>
        public static Java.Lang.String DIGEST_NONE { get { if (!_DIGEST_NONEReady) { _DIGEST_NONEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DIGEST_NONE"); _DIGEST_NONEReady = true; } return _DIGEST_NONEContent; } }
        private static Java.Lang.String _DIGEST_NONEContent = default;
        private static bool _DIGEST_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#DIGEST_SHA1"/>
        /// </summary>
        public static Java.Lang.String DIGEST_SHA1 { get { if (!_DIGEST_SHA1Ready) { _DIGEST_SHA1Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "DIGEST_SHA1"); _DIGEST_SHA1Ready = true; } return _DIGEST_SHA1Content; } }
        private static Java.Lang.String _DIGEST_SHA1Content = default;
        private static bool _DIGEST_SHA1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#DIGEST_SHA224"/>
        /// </summary>
        public static Java.Lang.String DIGEST_SHA224 { get { if (!_DIGEST_SHA224Ready) { _DIGEST_SHA224Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "DIGEST_SHA224"); _DIGEST_SHA224Ready = true; } return _DIGEST_SHA224Content; } }
        private static Java.Lang.String _DIGEST_SHA224Content = default;
        private static bool _DIGEST_SHA224Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#DIGEST_SHA256"/>
        /// </summary>
        public static Java.Lang.String DIGEST_SHA256 { get { if (!_DIGEST_SHA256Ready) { _DIGEST_SHA256Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "DIGEST_SHA256"); _DIGEST_SHA256Ready = true; } return _DIGEST_SHA256Content; } }
        private static Java.Lang.String _DIGEST_SHA256Content = default;
        private static bool _DIGEST_SHA256Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#DIGEST_SHA384"/>
        /// </summary>
        public static Java.Lang.String DIGEST_SHA384 { get { if (!_DIGEST_SHA384Ready) { _DIGEST_SHA384Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "DIGEST_SHA384"); _DIGEST_SHA384Ready = true; } return _DIGEST_SHA384Content; } }
        private static Java.Lang.String _DIGEST_SHA384Content = default;
        private static bool _DIGEST_SHA384Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#DIGEST_SHA512"/>
        /// </summary>
        public static Java.Lang.String DIGEST_SHA512 { get { if (!_DIGEST_SHA512Ready) { _DIGEST_SHA512Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "DIGEST_SHA512"); _DIGEST_SHA512Ready = true; } return _DIGEST_SHA512Content; } }
        private static Java.Lang.String _DIGEST_SHA512Content = default;
        private static bool _DIGEST_SHA512Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#ENCRYPTION_PADDING_NONE"/>
        /// </summary>
        public static Java.Lang.String ENCRYPTION_PADDING_NONE { get { if (!_ENCRYPTION_PADDING_NONEReady) { _ENCRYPTION_PADDING_NONEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ENCRYPTION_PADDING_NONE"); _ENCRYPTION_PADDING_NONEReady = true; } return _ENCRYPTION_PADDING_NONEContent; } }
        private static Java.Lang.String _ENCRYPTION_PADDING_NONEContent = default;
        private static bool _ENCRYPTION_PADDING_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#ENCRYPTION_PADDING_PKCS7"/>
        /// </summary>
        public static Java.Lang.String ENCRYPTION_PADDING_PKCS7 { get { if (!_ENCRYPTION_PADDING_PKCS7Ready) { _ENCRYPTION_PADDING_PKCS7Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "ENCRYPTION_PADDING_PKCS7"); _ENCRYPTION_PADDING_PKCS7Ready = true; } return _ENCRYPTION_PADDING_PKCS7Content; } }
        private static Java.Lang.String _ENCRYPTION_PADDING_PKCS7Content = default;
        private static bool _ENCRYPTION_PADDING_PKCS7Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#ENCRYPTION_PADDING_RSA_OAEP"/>
        /// </summary>
        public static Java.Lang.String ENCRYPTION_PADDING_RSA_OAEP { get { if (!_ENCRYPTION_PADDING_RSA_OAEPReady) { _ENCRYPTION_PADDING_RSA_OAEPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ENCRYPTION_PADDING_RSA_OAEP"); _ENCRYPTION_PADDING_RSA_OAEPReady = true; } return _ENCRYPTION_PADDING_RSA_OAEPContent; } }
        private static Java.Lang.String _ENCRYPTION_PADDING_RSA_OAEPContent = default;
        private static bool _ENCRYPTION_PADDING_RSA_OAEPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#ENCRYPTION_PADDING_RSA_PKCS1"/>
        /// </summary>
        public static Java.Lang.String ENCRYPTION_PADDING_RSA_PKCS1 { get { if (!_ENCRYPTION_PADDING_RSA_PKCS1Ready) { _ENCRYPTION_PADDING_RSA_PKCS1Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "ENCRYPTION_PADDING_RSA_PKCS1"); _ENCRYPTION_PADDING_RSA_PKCS1Ready = true; } return _ENCRYPTION_PADDING_RSA_PKCS1Content; } }
        private static Java.Lang.String _ENCRYPTION_PADDING_RSA_PKCS1Content = default;
        private static bool _ENCRYPTION_PADDING_RSA_PKCS1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#KEY_ALGORITHM_AES"/>
        /// </summary>
        public static Java.Lang.String KEY_ALGORITHM_AES { get { if (!_KEY_ALGORITHM_AESReady) { _KEY_ALGORITHM_AESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_ALGORITHM_AES"); _KEY_ALGORITHM_AESReady = true; } return _KEY_ALGORITHM_AESContent; } }
        private static Java.Lang.String _KEY_ALGORITHM_AESContent = default;
        private static bool _KEY_ALGORITHM_AESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#KEY_ALGORITHM_EC"/>
        /// </summary>
        public static Java.Lang.String KEY_ALGORITHM_EC { get { if (!_KEY_ALGORITHM_ECReady) { _KEY_ALGORITHM_ECContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_ALGORITHM_EC"); _KEY_ALGORITHM_ECReady = true; } return _KEY_ALGORITHM_ECContent; } }
        private static Java.Lang.String _KEY_ALGORITHM_ECContent = default;
        private static bool _KEY_ALGORITHM_ECReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#KEY_ALGORITHM_HMAC_SHA1"/>
        /// </summary>
        public static Java.Lang.String KEY_ALGORITHM_HMAC_SHA1 { get { if (!_KEY_ALGORITHM_HMAC_SHA1Ready) { _KEY_ALGORITHM_HMAC_SHA1Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_ALGORITHM_HMAC_SHA1"); _KEY_ALGORITHM_HMAC_SHA1Ready = true; } return _KEY_ALGORITHM_HMAC_SHA1Content; } }
        private static Java.Lang.String _KEY_ALGORITHM_HMAC_SHA1Content = default;
        private static bool _KEY_ALGORITHM_HMAC_SHA1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#KEY_ALGORITHM_HMAC_SHA224"/>
        /// </summary>
        public static Java.Lang.String KEY_ALGORITHM_HMAC_SHA224 { get { if (!_KEY_ALGORITHM_HMAC_SHA224Ready) { _KEY_ALGORITHM_HMAC_SHA224Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_ALGORITHM_HMAC_SHA224"); _KEY_ALGORITHM_HMAC_SHA224Ready = true; } return _KEY_ALGORITHM_HMAC_SHA224Content; } }
        private static Java.Lang.String _KEY_ALGORITHM_HMAC_SHA224Content = default;
        private static bool _KEY_ALGORITHM_HMAC_SHA224Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#KEY_ALGORITHM_HMAC_SHA256"/>
        /// </summary>
        public static Java.Lang.String KEY_ALGORITHM_HMAC_SHA256 { get { if (!_KEY_ALGORITHM_HMAC_SHA256Ready) { _KEY_ALGORITHM_HMAC_SHA256Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_ALGORITHM_HMAC_SHA256"); _KEY_ALGORITHM_HMAC_SHA256Ready = true; } return _KEY_ALGORITHM_HMAC_SHA256Content; } }
        private static Java.Lang.String _KEY_ALGORITHM_HMAC_SHA256Content = default;
        private static bool _KEY_ALGORITHM_HMAC_SHA256Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#KEY_ALGORITHM_HMAC_SHA384"/>
        /// </summary>
        public static Java.Lang.String KEY_ALGORITHM_HMAC_SHA384 { get { if (!_KEY_ALGORITHM_HMAC_SHA384Ready) { _KEY_ALGORITHM_HMAC_SHA384Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_ALGORITHM_HMAC_SHA384"); _KEY_ALGORITHM_HMAC_SHA384Ready = true; } return _KEY_ALGORITHM_HMAC_SHA384Content; } }
        private static Java.Lang.String _KEY_ALGORITHM_HMAC_SHA384Content = default;
        private static bool _KEY_ALGORITHM_HMAC_SHA384Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#KEY_ALGORITHM_HMAC_SHA512"/>
        /// </summary>
        public static Java.Lang.String KEY_ALGORITHM_HMAC_SHA512 { get { if (!_KEY_ALGORITHM_HMAC_SHA512Ready) { _KEY_ALGORITHM_HMAC_SHA512Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_ALGORITHM_HMAC_SHA512"); _KEY_ALGORITHM_HMAC_SHA512Ready = true; } return _KEY_ALGORITHM_HMAC_SHA512Content; } }
        private static Java.Lang.String _KEY_ALGORITHM_HMAC_SHA512Content = default;
        private static bool _KEY_ALGORITHM_HMAC_SHA512Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#KEY_ALGORITHM_RSA"/>
        /// </summary>
        public static Java.Lang.String KEY_ALGORITHM_RSA { get { if (!_KEY_ALGORITHM_RSAReady) { _KEY_ALGORITHM_RSAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_ALGORITHM_RSA"); _KEY_ALGORITHM_RSAReady = true; } return _KEY_ALGORITHM_RSAContent; } }
        private static Java.Lang.String _KEY_ALGORITHM_RSAContent = default;
        private static bool _KEY_ALGORITHM_RSAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#SIGNATURE_PADDING_RSA_PKCS1"/>
        /// </summary>
        public static Java.Lang.String SIGNATURE_PADDING_RSA_PKCS1 { get { if (!_SIGNATURE_PADDING_RSA_PKCS1Ready) { _SIGNATURE_PADDING_RSA_PKCS1Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "SIGNATURE_PADDING_RSA_PKCS1"); _SIGNATURE_PADDING_RSA_PKCS1Ready = true; } return _SIGNATURE_PADDING_RSA_PKCS1Content; } }
        private static Java.Lang.String _SIGNATURE_PADDING_RSA_PKCS1Content = default;
        private static bool _SIGNATURE_PADDING_RSA_PKCS1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#SIGNATURE_PADDING_RSA_PSS"/>
        /// </summary>
        public static Java.Lang.String SIGNATURE_PADDING_RSA_PSS { get { if (!_SIGNATURE_PADDING_RSA_PSSReady) { _SIGNATURE_PADDING_RSA_PSSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SIGNATURE_PADDING_RSA_PSS"); _SIGNATURE_PADDING_RSA_PSSReady = true; } return _SIGNATURE_PADDING_RSA_PSSContent; } }
        private static Java.Lang.String _SIGNATURE_PADDING_RSA_PSSContent = default;
        private static bool _SIGNATURE_PADDING_RSA_PSSReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.8.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Speech.Tts
{
    #region TextToSpeech
    public partial class TextToSpeech
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#%3Cinit%3E(android.content.Context,android.speech.tts.TextToSpeech.OnInitListener,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Speech.Tts.TextToSpeech.OnInitListener"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        public TextToSpeech(Android.Content.Context arg0, Android.Speech.Tts.TextToSpeech.OnInitListener arg1, Java.Lang.String arg2)
            : base(arg0, arg1, arg2)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#%3Cinit%3E(android.content.Context,android.speech.tts.TextToSpeech.OnInitListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Speech.Tts.TextToSpeech.OnInitListener"/></param>
        public TextToSpeech(Android.Content.Context arg0, Android.Speech.Tts.TextToSpeech.OnInitListener arg1)
            : base(arg0, arg1)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#ERROR"/>
        /// </summary>
        public static int ERROR { get { if (!_ERRORReady) { _ERRORContent = SGetField<int>(LocalBridgeClazz, "ERROR"); _ERRORReady = true; } return _ERRORContent; } }
        private static int _ERRORContent = default;
        private static bool _ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#ERROR_INVALID_REQUEST"/>
        /// </summary>
        public static int ERROR_INVALID_REQUEST { get { if (!_ERROR_INVALID_REQUESTReady) { _ERROR_INVALID_REQUESTContent = SGetField<int>(LocalBridgeClazz, "ERROR_INVALID_REQUEST"); _ERROR_INVALID_REQUESTReady = true; } return _ERROR_INVALID_REQUESTContent; } }
        private static int _ERROR_INVALID_REQUESTContent = default;
        private static bool _ERROR_INVALID_REQUESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#ERROR_NETWORK"/>
        /// </summary>
        public static int ERROR_NETWORK { get { if (!_ERROR_NETWORKReady) { _ERROR_NETWORKContent = SGetField<int>(LocalBridgeClazz, "ERROR_NETWORK"); _ERROR_NETWORKReady = true; } return _ERROR_NETWORKContent; } }
        private static int _ERROR_NETWORKContent = default;
        private static bool _ERROR_NETWORKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#ERROR_NETWORK_TIMEOUT"/>
        /// </summary>
        public static int ERROR_NETWORK_TIMEOUT { get { if (!_ERROR_NETWORK_TIMEOUTReady) { _ERROR_NETWORK_TIMEOUTContent = SGetField<int>(LocalBridgeClazz, "ERROR_NETWORK_TIMEOUT"); _ERROR_NETWORK_TIMEOUTReady = true; } return _ERROR_NETWORK_TIMEOUTContent; } }
        private static int _ERROR_NETWORK_TIMEOUTContent = default;
        private static bool _ERROR_NETWORK_TIMEOUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#ERROR_NOT_INSTALLED_YET"/>
        /// </summary>
        public static int ERROR_NOT_INSTALLED_YET { get { if (!_ERROR_NOT_INSTALLED_YETReady) { _ERROR_NOT_INSTALLED_YETContent = SGetField<int>(LocalBridgeClazz, "ERROR_NOT_INSTALLED_YET"); _ERROR_NOT_INSTALLED_YETReady = true; } return _ERROR_NOT_INSTALLED_YETContent; } }
        private static int _ERROR_NOT_INSTALLED_YETContent = default;
        private static bool _ERROR_NOT_INSTALLED_YETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#ERROR_OUTPUT"/>
        /// </summary>
        public static int ERROR_OUTPUT { get { if (!_ERROR_OUTPUTReady) { _ERROR_OUTPUTContent = SGetField<int>(LocalBridgeClazz, "ERROR_OUTPUT"); _ERROR_OUTPUTReady = true; } return _ERROR_OUTPUTContent; } }
        private static int _ERROR_OUTPUTContent = default;
        private static bool _ERROR_OUTPUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#ERROR_SERVICE"/>
        /// </summary>
        public static int ERROR_SERVICE { get { if (!_ERROR_SERVICEReady) { _ERROR_SERVICEContent = SGetField<int>(LocalBridgeClazz, "ERROR_SERVICE"); _ERROR_SERVICEReady = true; } return _ERROR_SERVICEContent; } }
        private static int _ERROR_SERVICEContent = default;
        private static bool _ERROR_SERVICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#ERROR_SYNTHESIS"/>
        /// </summary>
        public static int ERROR_SYNTHESIS { get { if (!_ERROR_SYNTHESISReady) { _ERROR_SYNTHESISContent = SGetField<int>(LocalBridgeClazz, "ERROR_SYNTHESIS"); _ERROR_SYNTHESISReady = true; } return _ERROR_SYNTHESISContent; } }
        private static int _ERROR_SYNTHESISContent = default;
        private static bool _ERROR_SYNTHESISReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#LANG_AVAILABLE"/>
        /// </summary>
        public static int LANG_AVAILABLE { get { if (!_LANG_AVAILABLEReady) { _LANG_AVAILABLEContent = SGetField<int>(LocalBridgeClazz, "LANG_AVAILABLE"); _LANG_AVAILABLEReady = true; } return _LANG_AVAILABLEContent; } }
        private static int _LANG_AVAILABLEContent = default;
        private static bool _LANG_AVAILABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#LANG_COUNTRY_AVAILABLE"/>
        /// </summary>
        public static int LANG_COUNTRY_AVAILABLE { get { if (!_LANG_COUNTRY_AVAILABLEReady) { _LANG_COUNTRY_AVAILABLEContent = SGetField<int>(LocalBridgeClazz, "LANG_COUNTRY_AVAILABLE"); _LANG_COUNTRY_AVAILABLEReady = true; } return _LANG_COUNTRY_AVAILABLEContent; } }
        private static int _LANG_COUNTRY_AVAILABLEContent = default;
        private static bool _LANG_COUNTRY_AVAILABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#LANG_COUNTRY_VAR_AVAILABLE"/>
        /// </summary>
        public static int LANG_COUNTRY_VAR_AVAILABLE { get { if (!_LANG_COUNTRY_VAR_AVAILABLEReady) { _LANG_COUNTRY_VAR_AVAILABLEContent = SGetField<int>(LocalBridgeClazz, "LANG_COUNTRY_VAR_AVAILABLE"); _LANG_COUNTRY_VAR_AVAILABLEReady = true; } return _LANG_COUNTRY_VAR_AVAILABLEContent; } }
        private static int _LANG_COUNTRY_VAR_AVAILABLEContent = default;
        private static bool _LANG_COUNTRY_VAR_AVAILABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#LANG_MISSING_DATA"/>
        /// </summary>
        public static int LANG_MISSING_DATA { get { if (!_LANG_MISSING_DATAReady) { _LANG_MISSING_DATAContent = SGetField<int>(LocalBridgeClazz, "LANG_MISSING_DATA"); _LANG_MISSING_DATAReady = true; } return _LANG_MISSING_DATAContent; } }
        private static int _LANG_MISSING_DATAContent = default;
        private static bool _LANG_MISSING_DATAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#LANG_NOT_SUPPORTED"/>
        /// </summary>
        public static int LANG_NOT_SUPPORTED { get { if (!_LANG_NOT_SUPPORTEDReady) { _LANG_NOT_SUPPORTEDContent = SGetField<int>(LocalBridgeClazz, "LANG_NOT_SUPPORTED"); _LANG_NOT_SUPPORTEDReady = true; } return _LANG_NOT_SUPPORTEDContent; } }
        private static int _LANG_NOT_SUPPORTEDContent = default;
        private static bool _LANG_NOT_SUPPORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#QUEUE_ADD"/>
        /// </summary>
        public static int QUEUE_ADD { get { if (!_QUEUE_ADDReady) { _QUEUE_ADDContent = SGetField<int>(LocalBridgeClazz, "QUEUE_ADD"); _QUEUE_ADDReady = true; } return _QUEUE_ADDContent; } }
        private static int _QUEUE_ADDContent = default;
        private static bool _QUEUE_ADDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#QUEUE_FLUSH"/>
        /// </summary>
        public static int QUEUE_FLUSH { get { if (!_QUEUE_FLUSHReady) { _QUEUE_FLUSHContent = SGetField<int>(LocalBridgeClazz, "QUEUE_FLUSH"); _QUEUE_FLUSHReady = true; } return _QUEUE_FLUSHContent; } }
        private static int _QUEUE_FLUSHContent = default;
        private static bool _QUEUE_FLUSHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#STOPPED"/>
        /// </summary>
        public static int STOPPED { get { if (!_STOPPEDReady) { _STOPPEDContent = SGetField<int>(LocalBridgeClazz, "STOPPED"); _STOPPEDReady = true; } return _STOPPEDContent; } }
        private static int _STOPPEDContent = default;
        private static bool _STOPPEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#SUCCESS"/>
        /// </summary>
        public static int SUCCESS { get { if (!_SUCCESSReady) { _SUCCESSContent = SGetField<int>(LocalBridgeClazz, "SUCCESS"); _SUCCESSReady = true; } return _SUCCESSContent; } }
        private static int _SUCCESSContent = default;
        private static bool _SUCCESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#ACTION_TTS_QUEUE_PROCESSING_COMPLETED"/>
        /// </summary>
        public static Java.Lang.String ACTION_TTS_QUEUE_PROCESSING_COMPLETED { get { if (!_ACTION_TTS_QUEUE_PROCESSING_COMPLETEDReady) { _ACTION_TTS_QUEUE_PROCESSING_COMPLETEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_TTS_QUEUE_PROCESSING_COMPLETED"); _ACTION_TTS_QUEUE_PROCESSING_COMPLETEDReady = true; } return _ACTION_TTS_QUEUE_PROCESSING_COMPLETEDContent; } }
        private static Java.Lang.String _ACTION_TTS_QUEUE_PROCESSING_COMPLETEDContent = default;
        private static bool _ACTION_TTS_QUEUE_PROCESSING_COMPLETEDReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#getMaxSpeechInputLength()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public static int GetMaxSpeechInputLength()
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "getMaxSpeechInputLength", "()I");
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#getDefaultVoice()"/>
        /// </summary>
        /// <returns><see cref="Android.Speech.Tts.Voice"/></returns>
        public Android.Speech.Tts.Voice GetDefaultVoice()
        {
            return IExecuteWithSignature<Android.Speech.Tts.Voice>("getDefaultVoice", "()Landroid/speech/tts/Voice;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#getVoice()"/>
        /// </summary>
        /// <returns><see cref="Android.Speech.Tts.Voice"/></returns>
        public Android.Speech.Tts.Voice GetVoice()
        {
            return IExecuteWithSignature<Android.Speech.Tts.Voice>("getVoice", "()Landroid/speech/tts/Voice;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#areDefaultsEnforced()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool AreDefaultsEnforced()
        {
            return IExecuteWithSignature<bool>("areDefaultsEnforced", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#isSpeaking()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsSpeaking()
        {
            return IExecuteWithSignature<bool>("isSpeaking", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#addEarcon(java.lang.String,android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
        /// <returns><see cref="int"/></returns>
        public int AddEarcon(Java.Lang.String arg0, Android.Net.Uri arg1)
        {
            return IExecute<int>("addEarcon", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#addEarcon(java.lang.String,java.io.File)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Io.File"/></param>
        /// <returns><see cref="int"/></returns>
        public int AddEarcon(Java.Lang.String arg0, Java.Io.File arg1)
        {
            return IExecute<int>("addEarcon", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#addEarcon(java.lang.String,java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int AddEarcon(Java.Lang.String arg0, Java.Lang.String arg1, int arg2)
        {
            return IExecute<int>("addEarcon", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#addEarcon(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int AddEarcon(Java.Lang.String arg0, Java.Lang.String arg1)
        {
            return IExecute<int>("addEarcon", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#addSpeech(java.lang.CharSequence,android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
        /// <returns><see cref="int"/></returns>
        public int AddSpeech(Java.Lang.CharSequence arg0, Android.Net.Uri arg1)
        {
            return IExecute<int>("addSpeech", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#addSpeech(java.lang.CharSequence,java.io.File)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="Java.Io.File"/></param>
        /// <returns><see cref="int"/></returns>
        public int AddSpeech(Java.Lang.CharSequence arg0, Java.Io.File arg1)
        {
            return IExecute<int>("addSpeech", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#addSpeech(java.lang.CharSequence,java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int AddSpeech(Java.Lang.CharSequence arg0, Java.Lang.String arg1, int arg2)
        {
            return IExecute<int>("addSpeech", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#addSpeech(java.lang.String,java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int AddSpeech(Java.Lang.String arg0, Java.Lang.String arg1, int arg2)
        {
            return IExecute<int>("addSpeech", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#addSpeech(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public int AddSpeech(Java.Lang.String arg0, Java.Lang.String arg1)
        {
            return IExecute<int>("addSpeech", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#isLanguageAvailable(java.util.Locale)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Locale"/></param>
        /// <returns><see cref="int"/></returns>
        public int IsLanguageAvailable(Java.Util.Locale arg0)
        {
            return IExecuteWithSignature<int>("isLanguageAvailable", "(Ljava/util/Locale;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#playEarcon(java.lang.String,int,android.os.Bundle,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Os.Bundle"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public int PlayEarcon(Java.Lang.String arg0, int arg1, Android.Os.Bundle arg2, Java.Lang.String arg3)
        {
            return IExecute<int>("playEarcon", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#playEarcon(java.lang.String,int,java.util.HashMap)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Util.HashMap"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int PlayEarcon(Java.Lang.String arg0, int arg1, Java.Util.HashMap<Java.Lang.String, Java.Lang.String> arg2)
        {
            return IExecute<int>("playEarcon", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#playSilence(long,int,java.util.HashMap)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Util.HashMap"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int PlaySilence(long arg0, int arg1, Java.Util.HashMap<Java.Lang.String, Java.Lang.String> arg2)
        {
            return IExecute<int>("playSilence", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#playSilentUtterance(long,int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public int PlaySilentUtterance(long arg0, int arg1, Java.Lang.String arg2)
        {
            return IExecute<int>("playSilentUtterance", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#setAudioAttributes(android.media.AudioAttributes)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioAttributes"/></param>
        /// <returns><see cref="int"/></returns>
        public int SetAudioAttributes(Android.Media.AudioAttributes arg0)
        {
            return IExecuteWithSignature<int>("setAudioAttributes", "(Landroid/media/AudioAttributes;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#setEngineByPackageName(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int SetEngineByPackageName(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<int>("setEngineByPackageName", "(Ljava/lang/String;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#setLanguage(java.util.Locale)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Locale"/></param>
        /// <returns><see cref="int"/></returns>
        public int SetLanguage(Java.Util.Locale arg0)
        {
            return IExecuteWithSignature<int>("setLanguage", "(Ljava/util/Locale;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#setOnUtteranceCompletedListener(android.speech.tts.TextToSpeech.OnUtteranceCompletedListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Speech.Tts.TextToSpeech.OnUtteranceCompletedListener"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int SetOnUtteranceCompletedListener(Android.Speech.Tts.TextToSpeech.OnUtteranceCompletedListener arg0)
        {
            return IExecuteWithSignature<int>("setOnUtteranceCompletedListener", "(Landroid/speech/tts/TextToSpeech$OnUtteranceCompletedListener;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#setOnUtteranceProgressListener(android.speech.tts.UtteranceProgressListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Speech.Tts.UtteranceProgressListener"/></param>
        /// <returns><see cref="int"/></returns>
        public int SetOnUtteranceProgressListener(Android.Speech.Tts.UtteranceProgressListener arg0)
        {
            return IExecuteWithSignature<int>("setOnUtteranceProgressListener", "(Landroid/speech/tts/UtteranceProgressListener;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#setPitch(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <returns><see cref="int"/></returns>
        public int SetPitch(float arg0)
        {
            return IExecuteWithSignature<int>("setPitch", "(F)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#setSpeechRate(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <returns><see cref="int"/></returns>
        public int SetSpeechRate(float arg0)
        {
            return IExecuteWithSignature<int>("setSpeechRate", "(F)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#setVoice(android.speech.tts.Voice)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Speech.Tts.Voice"/></param>
        /// <returns><see cref="int"/></returns>
        public int SetVoice(Android.Speech.Tts.Voice arg0)
        {
            return IExecuteWithSignature<int>("setVoice", "(Landroid/speech/tts/Voice;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#speak(java.lang.CharSequence,int,android.os.Bundle,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Os.Bundle"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public int Speak(Java.Lang.CharSequence arg0, int arg1, Android.Os.Bundle arg2, Java.Lang.String arg3)
        {
            return IExecute<int>("speak", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#speak(java.lang.String,int,java.util.HashMap)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Util.HashMap"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int Speak(Java.Lang.String arg0, int arg1, Java.Util.HashMap<Java.Lang.String, Java.Lang.String> arg2)
        {
            return IExecute<int>("speak", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#stop()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int Stop()
        {
            return IExecuteWithSignature<int>("stop", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#synthesizeToFile(java.lang.CharSequence,android.os.Bundle,android.os.ParcelFileDescriptor,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="Android.Os.Bundle"/></param>
        /// <param name="arg2"><see cref="Android.Os.ParcelFileDescriptor"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public int SynthesizeToFile(Java.Lang.CharSequence arg0, Android.Os.Bundle arg1, Android.Os.ParcelFileDescriptor arg2, Java.Lang.String arg3)
        {
            return IExecute<int>("synthesizeToFile", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#synthesizeToFile(java.lang.CharSequence,android.os.Bundle,java.io.File,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="Android.Os.Bundle"/></param>
        /// <param name="arg2"><see cref="Java.Io.File"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public int SynthesizeToFile(Java.Lang.CharSequence arg0, Android.Os.Bundle arg1, Java.Io.File arg2, Java.Lang.String arg3)
        {
            return IExecute<int>("synthesizeToFile", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#synthesizeToFile(java.lang.String,java.util.HashMap,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Util.HashMap"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int SynthesizeToFile(Java.Lang.String arg0, Java.Util.HashMap<Java.Lang.String, Java.Lang.String> arg1, Java.Lang.String arg2)
        {
            return IExecute<int>("synthesizeToFile", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#getDefaultEngine()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetDefaultEngine()
        {
            return IExecuteWithSignature<Java.Lang.String>("getDefaultEngine", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#getEngines()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Speech.Tts.TextToSpeech.EngineInfo> GetEngines()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Speech.Tts.TextToSpeech.EngineInfo>>("getEngines", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#getDefaultLanguage()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Locale"/></returns>
        [global::System.Obsolete()]
        public Java.Util.Locale GetDefaultLanguage()
        {
            return IExecuteWithSignature<Java.Util.Locale>("getDefaultLanguage", "()Ljava/util/Locale;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#getLanguage()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Locale"/></returns>
        [global::System.Obsolete()]
        public Java.Util.Locale GetLanguage()
        {
            return IExecuteWithSignature<Java.Util.Locale>("getLanguage", "()Ljava/util/Locale;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#getVoices()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Set"/></returns>
        public Java.Util.Set<Android.Speech.Tts.Voice> GetVoices()
        {
            return IExecuteWithSignature<Java.Util.Set<Android.Speech.Tts.Voice>>("getVoices", "()Ljava/util/Set;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#getFeatures(java.util.Locale)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Locale"/></param>
        /// <returns><see cref="Java.Util.Set"/></returns>
        [global::System.Obsolete()]
        public Java.Util.Set<Java.Lang.String> GetFeatures(Java.Util.Locale arg0)
        {
            return IExecuteWithSignature<Java.Util.Set<Java.Lang.String>>("getFeatures", "(Ljava/util/Locale;)Ljava/util/Set;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#getAvailableLanguages()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Set"/></returns>
        public Java.Util.Set<Java.Util.Locale> GetAvailableLanguages()
        {
            return IExecuteWithSignature<Java.Util.Set<Java.Util.Locale>>("getAvailableLanguages", "()Ljava/util/Set;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#shutdown()"/>
        /// </summary>
        public void Shutdown()
        {
            IExecuteWithSignature("shutdown", "()V");
        }

        #endregion

        #region Nested classes
        #region Engine
        public partial class Engine
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.Engine.html#%3Cinit%3E(android.speech.tts.TextToSpeech)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Speech.Tts.TextToSpeech"/></param>
            public Engine(Android.Speech.Tts.TextToSpeech arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.Engine.html#CHECK_VOICE_DATA_BAD_DATA"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int CHECK_VOICE_DATA_BAD_DATA { get { if (!_CHECK_VOICE_DATA_BAD_DATAReady) { _CHECK_VOICE_DATA_BAD_DATAContent = SGetField<int>(LocalBridgeClazz, "CHECK_VOICE_DATA_BAD_DATA"); _CHECK_VOICE_DATA_BAD_DATAReady = true; } return _CHECK_VOICE_DATA_BAD_DATAContent; } }
            private static int _CHECK_VOICE_DATA_BAD_DATAContent = default;
            private static bool _CHECK_VOICE_DATA_BAD_DATAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.Engine.html#CHECK_VOICE_DATA_FAIL"/>
            /// </summary>
            public static int CHECK_VOICE_DATA_FAIL { get { if (!_CHECK_VOICE_DATA_FAILReady) { _CHECK_VOICE_DATA_FAILContent = SGetField<int>(LocalBridgeClazz, "CHECK_VOICE_DATA_FAIL"); _CHECK_VOICE_DATA_FAILReady = true; } return _CHECK_VOICE_DATA_FAILContent; } }
            private static int _CHECK_VOICE_DATA_FAILContent = default;
            private static bool _CHECK_VOICE_DATA_FAILReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.Engine.html#CHECK_VOICE_DATA_MISSING_DATA"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int CHECK_VOICE_DATA_MISSING_DATA { get { if (!_CHECK_VOICE_DATA_MISSING_DATAReady) { _CHECK_VOICE_DATA_MISSING_DATAContent = SGetField<int>(LocalBridgeClazz, "CHECK_VOICE_DATA_MISSING_DATA"); _CHECK_VOICE_DATA_MISSING_DATAReady = true; } return _CHECK_VOICE_DATA_MISSING_DATAContent; } }
            private static int _CHECK_VOICE_DATA_MISSING_DATAContent = default;
            private static bool _CHECK_VOICE_DATA_MISSING_DATAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.Engine.html#CHECK_VOICE_DATA_MISSING_VOLUME"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int CHECK_VOICE_DATA_MISSING_VOLUME { get { if (!_CHECK_VOICE_DATA_MISSING_VOLUMEReady) { _CHECK_VOICE_DATA_MISSING_VOLUMEContent = SGetField<int>(LocalBridgeClazz, "CHECK_VOICE_DATA_MISSING_VOLUME"); _CHECK_VOICE_DATA_MISSING_VOLUMEReady = true; } return _CHECK_VOICE_DATA_MISSING_VOLUMEContent; } }
            private static int _CHECK_VOICE_DATA_MISSING_VOLUMEContent = default;
            private static bool _CHECK_VOICE_DATA_MISSING_VOLUMEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.Engine.html#CHECK_VOICE_DATA_PASS"/>
            /// </summary>
            public static int CHECK_VOICE_DATA_PASS { get { if (!_CHECK_VOICE_DATA_PASSReady) { _CHECK_VOICE_DATA_PASSContent = SGetField<int>(LocalBridgeClazz, "CHECK_VOICE_DATA_PASS"); _CHECK_VOICE_DATA_PASSReady = true; } return _CHECK_VOICE_DATA_PASSContent; } }
            private static int _CHECK_VOICE_DATA_PASSContent = default;
            private static bool _CHECK_VOICE_DATA_PASSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.Engine.html#DEFAULT_STREAM"/>
            /// </summary>
            public static int DEFAULT_STREAM { get { if (!_DEFAULT_STREAMReady) { _DEFAULT_STREAMContent = SGetField<int>(LocalBridgeClazz, "DEFAULT_STREAM"); _DEFAULT_STREAMReady = true; } return _DEFAULT_STREAMContent; } }
            private static int _DEFAULT_STREAMContent = default;
            private static bool _DEFAULT_STREAMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.Engine.html#ACTION_CHECK_TTS_DATA"/>
            /// </summary>
            public static Java.Lang.String ACTION_CHECK_TTS_DATA { get { if (!_ACTION_CHECK_TTS_DATAReady) { _ACTION_CHECK_TTS_DATAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_CHECK_TTS_DATA"); _ACTION_CHECK_TTS_DATAReady = true; } return _ACTION_CHECK_TTS_DATAContent; } }
            private static Java.Lang.String _ACTION_CHECK_TTS_DATAContent = default;
            private static bool _ACTION_CHECK_TTS_DATAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.Engine.html#ACTION_GET_SAMPLE_TEXT"/>
            /// </summary>
            public static Java.Lang.String ACTION_GET_SAMPLE_TEXT { get { if (!_ACTION_GET_SAMPLE_TEXTReady) { _ACTION_GET_SAMPLE_TEXTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_GET_SAMPLE_TEXT"); _ACTION_GET_SAMPLE_TEXTReady = true; } return _ACTION_GET_SAMPLE_TEXTContent; } }
            private static Java.Lang.String _ACTION_GET_SAMPLE_TEXTContent = default;
            private static bool _ACTION_GET_SAMPLE_TEXTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.Engine.html#ACTION_INSTALL_TTS_DATA"/>
            /// </summary>
            public static Java.Lang.String ACTION_INSTALL_TTS_DATA { get { if (!_ACTION_INSTALL_TTS_DATAReady) { _ACTION_INSTALL_TTS_DATAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_INSTALL_TTS_DATA"); _ACTION_INSTALL_TTS_DATAReady = true; } return _ACTION_INSTALL_TTS_DATAContent; } }
            private static Java.Lang.String _ACTION_INSTALL_TTS_DATAContent = default;
            private static bool _ACTION_INSTALL_TTS_DATAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.Engine.html#ACTION_TTS_DATA_INSTALLED"/>
            /// </summary>
            public static Java.Lang.String ACTION_TTS_DATA_INSTALLED { get { if (!_ACTION_TTS_DATA_INSTALLEDReady) { _ACTION_TTS_DATA_INSTALLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_TTS_DATA_INSTALLED"); _ACTION_TTS_DATA_INSTALLEDReady = true; } return _ACTION_TTS_DATA_INSTALLEDContent; } }
            private static Java.Lang.String _ACTION_TTS_DATA_INSTALLEDContent = default;
            private static bool _ACTION_TTS_DATA_INSTALLEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.Engine.html#EXTRA_AVAILABLE_VOICES"/>
            /// </summary>
            public static Java.Lang.String EXTRA_AVAILABLE_VOICES { get { if (!_EXTRA_AVAILABLE_VOICESReady) { _EXTRA_AVAILABLE_VOICESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_AVAILABLE_VOICES"); _EXTRA_AVAILABLE_VOICESReady = true; } return _EXTRA_AVAILABLE_VOICESContent; } }
            private static Java.Lang.String _EXTRA_AVAILABLE_VOICESContent = default;
            private static bool _EXTRA_AVAILABLE_VOICESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.Engine.html#EXTRA_CHECK_VOICE_DATA_FOR"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String EXTRA_CHECK_VOICE_DATA_FOR { get { if (!_EXTRA_CHECK_VOICE_DATA_FORReady) { _EXTRA_CHECK_VOICE_DATA_FORContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_CHECK_VOICE_DATA_FOR"); _EXTRA_CHECK_VOICE_DATA_FORReady = true; } return _EXTRA_CHECK_VOICE_DATA_FORContent; } }
            private static Java.Lang.String _EXTRA_CHECK_VOICE_DATA_FORContent = default;
            private static bool _EXTRA_CHECK_VOICE_DATA_FORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.Engine.html#EXTRA_SAMPLE_TEXT"/>
            /// </summary>
            public static Java.Lang.String EXTRA_SAMPLE_TEXT { get { if (!_EXTRA_SAMPLE_TEXTReady) { _EXTRA_SAMPLE_TEXTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_SAMPLE_TEXT"); _EXTRA_SAMPLE_TEXTReady = true; } return _EXTRA_SAMPLE_TEXTContent; } }
            private static Java.Lang.String _EXTRA_SAMPLE_TEXTContent = default;
            private static bool _EXTRA_SAMPLE_TEXTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.Engine.html#EXTRA_TTS_DATA_INSTALLED"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String EXTRA_TTS_DATA_INSTALLED { get { if (!_EXTRA_TTS_DATA_INSTALLEDReady) { _EXTRA_TTS_DATA_INSTALLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_TTS_DATA_INSTALLED"); _EXTRA_TTS_DATA_INSTALLEDReady = true; } return _EXTRA_TTS_DATA_INSTALLEDContent; } }
            private static Java.Lang.String _EXTRA_TTS_DATA_INSTALLEDContent = default;
            private static bool _EXTRA_TTS_DATA_INSTALLEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.Engine.html#EXTRA_UNAVAILABLE_VOICES"/>
            /// </summary>
            public static Java.Lang.String EXTRA_UNAVAILABLE_VOICES { get { if (!_EXTRA_UNAVAILABLE_VOICESReady) { _EXTRA_UNAVAILABLE_VOICESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_UNAVAILABLE_VOICES"); _EXTRA_UNAVAILABLE_VOICESReady = true; } return _EXTRA_UNAVAILABLE_VOICESContent; } }
            private static Java.Lang.String _EXTRA_UNAVAILABLE_VOICESContent = default;
            private static bool _EXTRA_UNAVAILABLE_VOICESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.Engine.html#EXTRA_VOICE_DATA_FILES"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String EXTRA_VOICE_DATA_FILES { get { if (!_EXTRA_VOICE_DATA_FILESReady) { _EXTRA_VOICE_DATA_FILESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_VOICE_DATA_FILES"); _EXTRA_VOICE_DATA_FILESReady = true; } return _EXTRA_VOICE_DATA_FILESContent; } }
            private static Java.Lang.String _EXTRA_VOICE_DATA_FILESContent = default;
            private static bool _EXTRA_VOICE_DATA_FILESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.Engine.html#EXTRA_VOICE_DATA_FILES_INFO"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String EXTRA_VOICE_DATA_FILES_INFO { get { if (!_EXTRA_VOICE_DATA_FILES_INFOReady) { _EXTRA_VOICE_DATA_FILES_INFOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_VOICE_DATA_FILES_INFO"); _EXTRA_VOICE_DATA_FILES_INFOReady = true; } return _EXTRA_VOICE_DATA_FILES_INFOContent; } }
            private static Java.Lang.String _EXTRA_VOICE_DATA_FILES_INFOContent = default;
            private static bool _EXTRA_VOICE_DATA_FILES_INFOReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.Engine.html#EXTRA_VOICE_DATA_ROOT_DIRECTORY"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String EXTRA_VOICE_DATA_ROOT_DIRECTORY { get { if (!_EXTRA_VOICE_DATA_ROOT_DIRECTORYReady) { _EXTRA_VOICE_DATA_ROOT_DIRECTORYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_VOICE_DATA_ROOT_DIRECTORY"); _EXTRA_VOICE_DATA_ROOT_DIRECTORYReady = true; } return _EXTRA_VOICE_DATA_ROOT_DIRECTORYContent; } }
            private static Java.Lang.String _EXTRA_VOICE_DATA_ROOT_DIRECTORYContent = default;
            private static bool _EXTRA_VOICE_DATA_ROOT_DIRECTORYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.Engine.html#INTENT_ACTION_TTS_SERVICE"/>
            /// </summary>
            public static Java.Lang.String INTENT_ACTION_TTS_SERVICE { get { if (!_INTENT_ACTION_TTS_SERVICEReady) { _INTENT_ACTION_TTS_SERVICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "INTENT_ACTION_TTS_SERVICE"); _INTENT_ACTION_TTS_SERVICEReady = true; } return _INTENT_ACTION_TTS_SERVICEContent; } }
            private static Java.Lang.String _INTENT_ACTION_TTS_SERVICEContent = default;
            private static bool _INTENT_ACTION_TTS_SERVICEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.Engine.html#KEY_FEATURE_EMBEDDED_SYNTHESIS"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String KEY_FEATURE_EMBEDDED_SYNTHESIS { get { if (!_KEY_FEATURE_EMBEDDED_SYNTHESISReady) { _KEY_FEATURE_EMBEDDED_SYNTHESISContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_FEATURE_EMBEDDED_SYNTHESIS"); _KEY_FEATURE_EMBEDDED_SYNTHESISReady = true; } return _KEY_FEATURE_EMBEDDED_SYNTHESISContent; } }
            private static Java.Lang.String _KEY_FEATURE_EMBEDDED_SYNTHESISContent = default;
            private static bool _KEY_FEATURE_EMBEDDED_SYNTHESISReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.Engine.html#KEY_FEATURE_NETWORK_RETRIES_COUNT"/>
            /// </summary>
            public static Java.Lang.String KEY_FEATURE_NETWORK_RETRIES_COUNT { get { if (!_KEY_FEATURE_NETWORK_RETRIES_COUNTReady) { _KEY_FEATURE_NETWORK_RETRIES_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_FEATURE_NETWORK_RETRIES_COUNT"); _KEY_FEATURE_NETWORK_RETRIES_COUNTReady = true; } return _KEY_FEATURE_NETWORK_RETRIES_COUNTContent; } }
            private static Java.Lang.String _KEY_FEATURE_NETWORK_RETRIES_COUNTContent = default;
            private static bool _KEY_FEATURE_NETWORK_RETRIES_COUNTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.Engine.html#KEY_FEATURE_NETWORK_SYNTHESIS"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String KEY_FEATURE_NETWORK_SYNTHESIS { get { if (!_KEY_FEATURE_NETWORK_SYNTHESISReady) { _KEY_FEATURE_NETWORK_SYNTHESISContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_FEATURE_NETWORK_SYNTHESIS"); _KEY_FEATURE_NETWORK_SYNTHESISReady = true; } return _KEY_FEATURE_NETWORK_SYNTHESISContent; } }
            private static Java.Lang.String _KEY_FEATURE_NETWORK_SYNTHESISContent = default;
            private static bool _KEY_FEATURE_NETWORK_SYNTHESISReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.Engine.html#KEY_FEATURE_NETWORK_TIMEOUT_MS"/>
            /// </summary>
            public static Java.Lang.String KEY_FEATURE_NETWORK_TIMEOUT_MS { get { if (!_KEY_FEATURE_NETWORK_TIMEOUT_MSReady) { _KEY_FEATURE_NETWORK_TIMEOUT_MSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_FEATURE_NETWORK_TIMEOUT_MS"); _KEY_FEATURE_NETWORK_TIMEOUT_MSReady = true; } return _KEY_FEATURE_NETWORK_TIMEOUT_MSContent; } }
            private static Java.Lang.String _KEY_FEATURE_NETWORK_TIMEOUT_MSContent = default;
            private static bool _KEY_FEATURE_NETWORK_TIMEOUT_MSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.Engine.html#KEY_FEATURE_NOT_INSTALLED"/>
            /// </summary>
            public static Java.Lang.String KEY_FEATURE_NOT_INSTALLED { get { if (!_KEY_FEATURE_NOT_INSTALLEDReady) { _KEY_FEATURE_NOT_INSTALLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_FEATURE_NOT_INSTALLED"); _KEY_FEATURE_NOT_INSTALLEDReady = true; } return _KEY_FEATURE_NOT_INSTALLEDContent; } }
            private static Java.Lang.String _KEY_FEATURE_NOT_INSTALLEDContent = default;
            private static bool _KEY_FEATURE_NOT_INSTALLEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.Engine.html#KEY_PARAM_PAN"/>
            /// </summary>
            public static Java.Lang.String KEY_PARAM_PAN { get { if (!_KEY_PARAM_PANReady) { _KEY_PARAM_PANContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_PARAM_PAN"); _KEY_PARAM_PANReady = true; } return _KEY_PARAM_PANContent; } }
            private static Java.Lang.String _KEY_PARAM_PANContent = default;
            private static bool _KEY_PARAM_PANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.Engine.html#KEY_PARAM_SESSION_ID"/>
            /// </summary>
            public static Java.Lang.String KEY_PARAM_SESSION_ID { get { if (!_KEY_PARAM_SESSION_IDReady) { _KEY_PARAM_SESSION_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_PARAM_SESSION_ID"); _KEY_PARAM_SESSION_IDReady = true; } return _KEY_PARAM_SESSION_IDContent; } }
            private static Java.Lang.String _KEY_PARAM_SESSION_IDContent = default;
            private static bool _KEY_PARAM_SESSION_IDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.Engine.html#KEY_PARAM_STREAM"/>
            /// </summary>
            public static Java.Lang.String KEY_PARAM_STREAM { get { if (!_KEY_PARAM_STREAMReady) { _KEY_PARAM_STREAMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_PARAM_STREAM"); _KEY_PARAM_STREAMReady = true; } return _KEY_PARAM_STREAMContent; } }
            private static Java.Lang.String _KEY_PARAM_STREAMContent = default;
            private static bool _KEY_PARAM_STREAMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.Engine.html#KEY_PARAM_UTTERANCE_ID"/>
            /// </summary>
            public static Java.Lang.String KEY_PARAM_UTTERANCE_ID { get { if (!_KEY_PARAM_UTTERANCE_IDReady) { _KEY_PARAM_UTTERANCE_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_PARAM_UTTERANCE_ID"); _KEY_PARAM_UTTERANCE_IDReady = true; } return _KEY_PARAM_UTTERANCE_IDContent; } }
            private static Java.Lang.String _KEY_PARAM_UTTERANCE_IDContent = default;
            private static bool _KEY_PARAM_UTTERANCE_IDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.Engine.html#KEY_PARAM_VOLUME"/>
            /// </summary>
            public static Java.Lang.String KEY_PARAM_VOLUME { get { if (!_KEY_PARAM_VOLUMEReady) { _KEY_PARAM_VOLUMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_PARAM_VOLUME"); _KEY_PARAM_VOLUMEReady = true; } return _KEY_PARAM_VOLUMEContent; } }
            private static Java.Lang.String _KEY_PARAM_VOLUMEContent = default;
            private static bool _KEY_PARAM_VOLUMEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.Engine.html#SERVICE_META_DATA"/>
            /// </summary>
            public static Java.Lang.String SERVICE_META_DATA { get { if (!_SERVICE_META_DATAReady) { _SERVICE_META_DATAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SERVICE_META_DATA"); _SERVICE_META_DATAReady = true; } return _SERVICE_META_DATAContent; } }
            private static Java.Lang.String _SERVICE_META_DATAContent = default;
            private static bool _SERVICE_META_DATAReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region EngineInfo
        public partial class EngineInfo
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.EngineInfo.html#icon"/>
            /// </summary>
            public int icon { get { return IGetField<int>("icon"); } set { ISetField("icon", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.EngineInfo.html#label"/>
            /// </summary>
            public Java.Lang.String label { get { return IGetField<Java.Lang.String>("label"); } set { ISetField("label", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.EngineInfo.html#name"/>
            /// </summary>
            public Java.Lang.String name { get { return IGetField<Java.Lang.String>("name"); } set { ISetField("name", value); } }

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnInitListener
        public partial class OnInitListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnInitListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onInit", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(OnInitEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.OnInitListener.html#onInit(int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnInit"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<int> OnOnInit { get; set; } = null;

            void OnInitEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
            {
                var methodToExecute = (OnOnInit != null) ? OnOnInit : OnInit;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.OnInitListener.html#onInit(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public virtual void OnInit(int arg0)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnInitListenerDirect
        public partial class OnInitListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.OnInitListener.html#onInit(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public override void OnInit(int arg0)
            {
                IExecuteWithSignature("onInit", "(I)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnUtteranceCompletedListener
        public partial class OnUtteranceCompletedListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnUtteranceCompletedListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onUtteranceCompleted", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Java.Lang.String>>>(OnUtteranceCompletedEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.OnUtteranceCompletedListener.html#onUtteranceCompleted(java.lang.String)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnUtteranceCompleted"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Java.Lang.String> OnOnUtteranceCompleted { get; set; } = null;

            void OnUtteranceCompletedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Java.Lang.String>> data)
            {
                var methodToExecute = (OnOnUtteranceCompleted != null) ? OnOnUtteranceCompleted : OnUtteranceCompleted;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.OnUtteranceCompletedListener.html#onUtteranceCompleted(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            [global::System.Obsolete()]
            public virtual void OnUtteranceCompleted(Java.Lang.String arg0)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnUtteranceCompletedListenerDirect
        public partial class OnUtteranceCompletedListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.OnUtteranceCompletedListener.html#onUtteranceCompleted(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            [global::System.Obsolete()]
            public override void OnUtteranceCompleted(Java.Lang.String arg0)
            {
                IExecuteWithSignature("onUtteranceCompleted", "(Ljava/lang/String;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
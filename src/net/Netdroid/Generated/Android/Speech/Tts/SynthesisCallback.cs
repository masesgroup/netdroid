/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Speech.Tts
{
    #region ISynthesisCallback
    /// <summary>
    /// .NET interface for TO BE DEFINED FROM USER
    /// </summary>
    public partial interface ISynthesisCallback
    {
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/SynthesisCallback.html#getMaxBufferSize()"/> 
        /// </summary>
        int MaxBufferSize { get; }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/SynthesisCallback.html#hasFinished()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        bool HasFinished();
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/SynthesisCallback.html#hasStarted()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        bool HasStarted();
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/SynthesisCallback.html#audioAvailable(byte[],int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        int AudioAvailable(byte[] arg0, int arg1, int arg2);
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/SynthesisCallback.html#done()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        int Done();
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/SynthesisCallback.html#start(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        int Start(int arg0, int arg1, int arg2);
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/SynthesisCallback.html#error()"/>
        /// </summary>
        void Error();
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/SynthesisCallback.html#error(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        void Error(int arg0);
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/SynthesisCallback.html#rangeStart(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        void RangeStart(int arg0, int arg1, int arg2);

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region SynthesisCallback
    public partial class SynthesisCallback : Android.Speech.Tts.ISynthesisCallback
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/SynthesisCallback.html#getMaxBufferSize()"/> 
        /// </summary>
        public int MaxBufferSize
        {
            get { return IExecuteWithSignature<int>("getMaxBufferSize", "()I"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/SynthesisCallback.html#hasFinished()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasFinished()
        {
            return IExecuteWithSignature<bool>("hasFinished", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/SynthesisCallback.html#hasStarted()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasStarted()
        {
            return IExecuteWithSignature<bool>("hasStarted", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/SynthesisCallback.html#audioAvailable(byte[],int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int AudioAvailable(byte[] arg0, int arg1, int arg2)
        {
            return IExecute<int>("audioAvailable", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/SynthesisCallback.html#done()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int Done()
        {
            return IExecuteWithSignature<int>("done", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/SynthesisCallback.html#start(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int Start(int arg0, int arg1, int arg2)
        {
            return IExecute<int>("start", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/SynthesisCallback.html#error()"/>
        /// </summary>
        public void Error()
        {
            IExecuteWithSignature("error", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/SynthesisCallback.html#error(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void Error(int arg0)
        {
            IExecuteWithSignature("error", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/tts/SynthesisCallback.html#rangeStart(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void RangeStart(int arg0, int arg1, int arg2)
        {
            IExecute("rangeStart", arg0, arg1, arg2);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Speech
{
    #region SpeechRecognizer declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html"/>
    /// </summary>
    public partial class SpeechRecognizer : MASES.JCOBridge.C2JBridge.JVMBridgeBase<SpeechRecognizer>
    {
        const string _bridgeClassName = "android.speech.SpeechRecognizer";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public SpeechRecognizer() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public SpeechRecognizer(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region SpeechRecognizer implementation
    public partial class SpeechRecognizer
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#ERROR_AUDIO"/>
        /// </summary>
        public static int ERROR_AUDIO { get { if (!_ERROR_AUDIOReady) { _ERROR_AUDIOContent = SGetField<int>(LocalBridgeClazz, "ERROR_AUDIO"); _ERROR_AUDIOReady = true; } return _ERROR_AUDIOContent; } }
        private static int _ERROR_AUDIOContent = default;
        private static bool _ERROR_AUDIOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#ERROR_CANNOT_CHECK_SUPPORT"/>
        /// </summary>
        public static int ERROR_CANNOT_CHECK_SUPPORT { get { if (!_ERROR_CANNOT_CHECK_SUPPORTReady) { _ERROR_CANNOT_CHECK_SUPPORTContent = SGetField<int>(LocalBridgeClazz, "ERROR_CANNOT_CHECK_SUPPORT"); _ERROR_CANNOT_CHECK_SUPPORTReady = true; } return _ERROR_CANNOT_CHECK_SUPPORTContent; } }
        private static int _ERROR_CANNOT_CHECK_SUPPORTContent = default;
        private static bool _ERROR_CANNOT_CHECK_SUPPORTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#ERROR_CANNOT_LISTEN_TO_DOWNLOAD_EVENTS"/>
        /// </summary>
        public static int ERROR_CANNOT_LISTEN_TO_DOWNLOAD_EVENTS { get { if (!_ERROR_CANNOT_LISTEN_TO_DOWNLOAD_EVENTSReady) { _ERROR_CANNOT_LISTEN_TO_DOWNLOAD_EVENTSContent = SGetField<int>(LocalBridgeClazz, "ERROR_CANNOT_LISTEN_TO_DOWNLOAD_EVENTS"); _ERROR_CANNOT_LISTEN_TO_DOWNLOAD_EVENTSReady = true; } return _ERROR_CANNOT_LISTEN_TO_DOWNLOAD_EVENTSContent; } }
        private static int _ERROR_CANNOT_LISTEN_TO_DOWNLOAD_EVENTSContent = default;
        private static bool _ERROR_CANNOT_LISTEN_TO_DOWNLOAD_EVENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#ERROR_CLIENT"/>
        /// </summary>
        public static int ERROR_CLIENT { get { if (!_ERROR_CLIENTReady) { _ERROR_CLIENTContent = SGetField<int>(LocalBridgeClazz, "ERROR_CLIENT"); _ERROR_CLIENTReady = true; } return _ERROR_CLIENTContent; } }
        private static int _ERROR_CLIENTContent = default;
        private static bool _ERROR_CLIENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#ERROR_INSUFFICIENT_PERMISSIONS"/>
        /// </summary>
        public static int ERROR_INSUFFICIENT_PERMISSIONS { get { if (!_ERROR_INSUFFICIENT_PERMISSIONSReady) { _ERROR_INSUFFICIENT_PERMISSIONSContent = SGetField<int>(LocalBridgeClazz, "ERROR_INSUFFICIENT_PERMISSIONS"); _ERROR_INSUFFICIENT_PERMISSIONSReady = true; } return _ERROR_INSUFFICIENT_PERMISSIONSContent; } }
        private static int _ERROR_INSUFFICIENT_PERMISSIONSContent = default;
        private static bool _ERROR_INSUFFICIENT_PERMISSIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#ERROR_LANGUAGE_NOT_SUPPORTED"/>
        /// </summary>
        public static int ERROR_LANGUAGE_NOT_SUPPORTED { get { if (!_ERROR_LANGUAGE_NOT_SUPPORTEDReady) { _ERROR_LANGUAGE_NOT_SUPPORTEDContent = SGetField<int>(LocalBridgeClazz, "ERROR_LANGUAGE_NOT_SUPPORTED"); _ERROR_LANGUAGE_NOT_SUPPORTEDReady = true; } return _ERROR_LANGUAGE_NOT_SUPPORTEDContent; } }
        private static int _ERROR_LANGUAGE_NOT_SUPPORTEDContent = default;
        private static bool _ERROR_LANGUAGE_NOT_SUPPORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#ERROR_LANGUAGE_UNAVAILABLE"/>
        /// </summary>
        public static int ERROR_LANGUAGE_UNAVAILABLE { get { if (!_ERROR_LANGUAGE_UNAVAILABLEReady) { _ERROR_LANGUAGE_UNAVAILABLEContent = SGetField<int>(LocalBridgeClazz, "ERROR_LANGUAGE_UNAVAILABLE"); _ERROR_LANGUAGE_UNAVAILABLEReady = true; } return _ERROR_LANGUAGE_UNAVAILABLEContent; } }
        private static int _ERROR_LANGUAGE_UNAVAILABLEContent = default;
        private static bool _ERROR_LANGUAGE_UNAVAILABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#ERROR_NETWORK"/>
        /// </summary>
        public static int ERROR_NETWORK { get { if (!_ERROR_NETWORKReady) { _ERROR_NETWORKContent = SGetField<int>(LocalBridgeClazz, "ERROR_NETWORK"); _ERROR_NETWORKReady = true; } return _ERROR_NETWORKContent; } }
        private static int _ERROR_NETWORKContent = default;
        private static bool _ERROR_NETWORKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#ERROR_NETWORK_TIMEOUT"/>
        /// </summary>
        public static int ERROR_NETWORK_TIMEOUT { get { if (!_ERROR_NETWORK_TIMEOUTReady) { _ERROR_NETWORK_TIMEOUTContent = SGetField<int>(LocalBridgeClazz, "ERROR_NETWORK_TIMEOUT"); _ERROR_NETWORK_TIMEOUTReady = true; } return _ERROR_NETWORK_TIMEOUTContent; } }
        private static int _ERROR_NETWORK_TIMEOUTContent = default;
        private static bool _ERROR_NETWORK_TIMEOUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#ERROR_NO_MATCH"/>
        /// </summary>
        public static int ERROR_NO_MATCH { get { if (!_ERROR_NO_MATCHReady) { _ERROR_NO_MATCHContent = SGetField<int>(LocalBridgeClazz, "ERROR_NO_MATCH"); _ERROR_NO_MATCHReady = true; } return _ERROR_NO_MATCHContent; } }
        private static int _ERROR_NO_MATCHContent = default;
        private static bool _ERROR_NO_MATCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#ERROR_RECOGNIZER_BUSY"/>
        /// </summary>
        public static int ERROR_RECOGNIZER_BUSY { get { if (!_ERROR_RECOGNIZER_BUSYReady) { _ERROR_RECOGNIZER_BUSYContent = SGetField<int>(LocalBridgeClazz, "ERROR_RECOGNIZER_BUSY"); _ERROR_RECOGNIZER_BUSYReady = true; } return _ERROR_RECOGNIZER_BUSYContent; } }
        private static int _ERROR_RECOGNIZER_BUSYContent = default;
        private static bool _ERROR_RECOGNIZER_BUSYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#ERROR_SERVER"/>
        /// </summary>
        public static int ERROR_SERVER { get { if (!_ERROR_SERVERReady) { _ERROR_SERVERContent = SGetField<int>(LocalBridgeClazz, "ERROR_SERVER"); _ERROR_SERVERReady = true; } return _ERROR_SERVERContent; } }
        private static int _ERROR_SERVERContent = default;
        private static bool _ERROR_SERVERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#ERROR_SERVER_DISCONNECTED"/>
        /// </summary>
        public static int ERROR_SERVER_DISCONNECTED { get { if (!_ERROR_SERVER_DISCONNECTEDReady) { _ERROR_SERVER_DISCONNECTEDContent = SGetField<int>(LocalBridgeClazz, "ERROR_SERVER_DISCONNECTED"); _ERROR_SERVER_DISCONNECTEDReady = true; } return _ERROR_SERVER_DISCONNECTEDContent; } }
        private static int _ERROR_SERVER_DISCONNECTEDContent = default;
        private static bool _ERROR_SERVER_DISCONNECTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#ERROR_SPEECH_TIMEOUT"/>
        /// </summary>
        public static int ERROR_SPEECH_TIMEOUT { get { if (!_ERROR_SPEECH_TIMEOUTReady) { _ERROR_SPEECH_TIMEOUTContent = SGetField<int>(LocalBridgeClazz, "ERROR_SPEECH_TIMEOUT"); _ERROR_SPEECH_TIMEOUTReady = true; } return _ERROR_SPEECH_TIMEOUTContent; } }
        private static int _ERROR_SPEECH_TIMEOUTContent = default;
        private static bool _ERROR_SPEECH_TIMEOUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#ERROR_TOO_MANY_REQUESTS"/>
        /// </summary>
        public static int ERROR_TOO_MANY_REQUESTS { get { if (!_ERROR_TOO_MANY_REQUESTSReady) { _ERROR_TOO_MANY_REQUESTSContent = SGetField<int>(LocalBridgeClazz, "ERROR_TOO_MANY_REQUESTS"); _ERROR_TOO_MANY_REQUESTSReady = true; } return _ERROR_TOO_MANY_REQUESTSContent; } }
        private static int _ERROR_TOO_MANY_REQUESTSContent = default;
        private static bool _ERROR_TOO_MANY_REQUESTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#LANGUAGE_DETECTION_CONFIDENCE_LEVEL_CONFIDENT"/>
        /// </summary>
        public static int LANGUAGE_DETECTION_CONFIDENCE_LEVEL_CONFIDENT { get { if (!_LANGUAGE_DETECTION_CONFIDENCE_LEVEL_CONFIDENTReady) { _LANGUAGE_DETECTION_CONFIDENCE_LEVEL_CONFIDENTContent = SGetField<int>(LocalBridgeClazz, "LANGUAGE_DETECTION_CONFIDENCE_LEVEL_CONFIDENT"); _LANGUAGE_DETECTION_CONFIDENCE_LEVEL_CONFIDENTReady = true; } return _LANGUAGE_DETECTION_CONFIDENCE_LEVEL_CONFIDENTContent; } }
        private static int _LANGUAGE_DETECTION_CONFIDENCE_LEVEL_CONFIDENTContent = default;
        private static bool _LANGUAGE_DETECTION_CONFIDENCE_LEVEL_CONFIDENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#LANGUAGE_DETECTION_CONFIDENCE_LEVEL_HIGHLY_CONFIDENT"/>
        /// </summary>
        public static int LANGUAGE_DETECTION_CONFIDENCE_LEVEL_HIGHLY_CONFIDENT { get { if (!_LANGUAGE_DETECTION_CONFIDENCE_LEVEL_HIGHLY_CONFIDENTReady) { _LANGUAGE_DETECTION_CONFIDENCE_LEVEL_HIGHLY_CONFIDENTContent = SGetField<int>(LocalBridgeClazz, "LANGUAGE_DETECTION_CONFIDENCE_LEVEL_HIGHLY_CONFIDENT"); _LANGUAGE_DETECTION_CONFIDENCE_LEVEL_HIGHLY_CONFIDENTReady = true; } return _LANGUAGE_DETECTION_CONFIDENCE_LEVEL_HIGHLY_CONFIDENTContent; } }
        private static int _LANGUAGE_DETECTION_CONFIDENCE_LEVEL_HIGHLY_CONFIDENTContent = default;
        private static bool _LANGUAGE_DETECTION_CONFIDENCE_LEVEL_HIGHLY_CONFIDENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#LANGUAGE_DETECTION_CONFIDENCE_LEVEL_NOT_CONFIDENT"/>
        /// </summary>
        public static int LANGUAGE_DETECTION_CONFIDENCE_LEVEL_NOT_CONFIDENT { get { if (!_LANGUAGE_DETECTION_CONFIDENCE_LEVEL_NOT_CONFIDENTReady) { _LANGUAGE_DETECTION_CONFIDENCE_LEVEL_NOT_CONFIDENTContent = SGetField<int>(LocalBridgeClazz, "LANGUAGE_DETECTION_CONFIDENCE_LEVEL_NOT_CONFIDENT"); _LANGUAGE_DETECTION_CONFIDENCE_LEVEL_NOT_CONFIDENTReady = true; } return _LANGUAGE_DETECTION_CONFIDENCE_LEVEL_NOT_CONFIDENTContent; } }
        private static int _LANGUAGE_DETECTION_CONFIDENCE_LEVEL_NOT_CONFIDENTContent = default;
        private static bool _LANGUAGE_DETECTION_CONFIDENCE_LEVEL_NOT_CONFIDENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#LANGUAGE_DETECTION_CONFIDENCE_LEVEL_UNKNOWN"/>
        /// </summary>
        public static int LANGUAGE_DETECTION_CONFIDENCE_LEVEL_UNKNOWN { get { if (!_LANGUAGE_DETECTION_CONFIDENCE_LEVEL_UNKNOWNReady) { _LANGUAGE_DETECTION_CONFIDENCE_LEVEL_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "LANGUAGE_DETECTION_CONFIDENCE_LEVEL_UNKNOWN"); _LANGUAGE_DETECTION_CONFIDENCE_LEVEL_UNKNOWNReady = true; } return _LANGUAGE_DETECTION_CONFIDENCE_LEVEL_UNKNOWNContent; } }
        private static int _LANGUAGE_DETECTION_CONFIDENCE_LEVEL_UNKNOWNContent = default;
        private static bool _LANGUAGE_DETECTION_CONFIDENCE_LEVEL_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#LANGUAGE_SWITCH_RESULT_FAILED"/>
        /// </summary>
        public static int LANGUAGE_SWITCH_RESULT_FAILED { get { if (!_LANGUAGE_SWITCH_RESULT_FAILEDReady) { _LANGUAGE_SWITCH_RESULT_FAILEDContent = SGetField<int>(LocalBridgeClazz, "LANGUAGE_SWITCH_RESULT_FAILED"); _LANGUAGE_SWITCH_RESULT_FAILEDReady = true; } return _LANGUAGE_SWITCH_RESULT_FAILEDContent; } }
        private static int _LANGUAGE_SWITCH_RESULT_FAILEDContent = default;
        private static bool _LANGUAGE_SWITCH_RESULT_FAILEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#LANGUAGE_SWITCH_RESULT_NOT_ATTEMPTED"/>
        /// </summary>
        public static int LANGUAGE_SWITCH_RESULT_NOT_ATTEMPTED { get { if (!_LANGUAGE_SWITCH_RESULT_NOT_ATTEMPTEDReady) { _LANGUAGE_SWITCH_RESULT_NOT_ATTEMPTEDContent = SGetField<int>(LocalBridgeClazz, "LANGUAGE_SWITCH_RESULT_NOT_ATTEMPTED"); _LANGUAGE_SWITCH_RESULT_NOT_ATTEMPTEDReady = true; } return _LANGUAGE_SWITCH_RESULT_NOT_ATTEMPTEDContent; } }
        private static int _LANGUAGE_SWITCH_RESULT_NOT_ATTEMPTEDContent = default;
        private static bool _LANGUAGE_SWITCH_RESULT_NOT_ATTEMPTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#LANGUAGE_SWITCH_RESULT_SKIPPED_NO_MODEL"/>
        /// </summary>
        public static int LANGUAGE_SWITCH_RESULT_SKIPPED_NO_MODEL { get { if (!_LANGUAGE_SWITCH_RESULT_SKIPPED_NO_MODELReady) { _LANGUAGE_SWITCH_RESULT_SKIPPED_NO_MODELContent = SGetField<int>(LocalBridgeClazz, "LANGUAGE_SWITCH_RESULT_SKIPPED_NO_MODEL"); _LANGUAGE_SWITCH_RESULT_SKIPPED_NO_MODELReady = true; } return _LANGUAGE_SWITCH_RESULT_SKIPPED_NO_MODELContent; } }
        private static int _LANGUAGE_SWITCH_RESULT_SKIPPED_NO_MODELContent = default;
        private static bool _LANGUAGE_SWITCH_RESULT_SKIPPED_NO_MODELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#LANGUAGE_SWITCH_RESULT_SUCCEEDED"/>
        /// </summary>
        public static int LANGUAGE_SWITCH_RESULT_SUCCEEDED { get { if (!_LANGUAGE_SWITCH_RESULT_SUCCEEDEDReady) { _LANGUAGE_SWITCH_RESULT_SUCCEEDEDContent = SGetField<int>(LocalBridgeClazz, "LANGUAGE_SWITCH_RESULT_SUCCEEDED"); _LANGUAGE_SWITCH_RESULT_SUCCEEDEDReady = true; } return _LANGUAGE_SWITCH_RESULT_SUCCEEDEDContent; } }
        private static int _LANGUAGE_SWITCH_RESULT_SUCCEEDEDContent = default;
        private static bool _LANGUAGE_SWITCH_RESULT_SUCCEEDEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#CONFIDENCE_SCORES"/>
        /// </summary>
        public static Java.Lang.String CONFIDENCE_SCORES { get { if (!_CONFIDENCE_SCORESReady) { _CONFIDENCE_SCORESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONFIDENCE_SCORES"); _CONFIDENCE_SCORESReady = true; } return _CONFIDENCE_SCORESContent; } }
        private static Java.Lang.String _CONFIDENCE_SCORESContent = default;
        private static bool _CONFIDENCE_SCORESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#DETECTED_LANGUAGE"/>
        /// </summary>
        public static Java.Lang.String DETECTED_LANGUAGE { get { if (!_DETECTED_LANGUAGEReady) { _DETECTED_LANGUAGEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DETECTED_LANGUAGE"); _DETECTED_LANGUAGEReady = true; } return _DETECTED_LANGUAGEContent; } }
        private static Java.Lang.String _DETECTED_LANGUAGEContent = default;
        private static bool _DETECTED_LANGUAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#LANGUAGE_DETECTION_CONFIDENCE_LEVEL"/>
        /// </summary>
        public static Java.Lang.String LANGUAGE_DETECTION_CONFIDENCE_LEVEL { get { if (!_LANGUAGE_DETECTION_CONFIDENCE_LEVELReady) { _LANGUAGE_DETECTION_CONFIDENCE_LEVELContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LANGUAGE_DETECTION_CONFIDENCE_LEVEL"); _LANGUAGE_DETECTION_CONFIDENCE_LEVELReady = true; } return _LANGUAGE_DETECTION_CONFIDENCE_LEVELContent; } }
        private static Java.Lang.String _LANGUAGE_DETECTION_CONFIDENCE_LEVELContent = default;
        private static bool _LANGUAGE_DETECTION_CONFIDENCE_LEVELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#LANGUAGE_SWITCH_RESULT"/>
        /// </summary>
        public static Java.Lang.String LANGUAGE_SWITCH_RESULT { get { if (!_LANGUAGE_SWITCH_RESULTReady) { _LANGUAGE_SWITCH_RESULTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LANGUAGE_SWITCH_RESULT"); _LANGUAGE_SWITCH_RESULTReady = true; } return _LANGUAGE_SWITCH_RESULTContent; } }
        private static Java.Lang.String _LANGUAGE_SWITCH_RESULTContent = default;
        private static bool _LANGUAGE_SWITCH_RESULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#RECOGNITION_PARTS"/>
        /// </summary>
        public static Java.Lang.String RECOGNITION_PARTS { get { if (!_RECOGNITION_PARTSReady) { _RECOGNITION_PARTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RECOGNITION_PARTS"); _RECOGNITION_PARTSReady = true; } return _RECOGNITION_PARTSContent; } }
        private static Java.Lang.String _RECOGNITION_PARTSContent = default;
        private static bool _RECOGNITION_PARTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#RESULTS_ALTERNATIVES"/>
        /// </summary>
        public static Java.Lang.String RESULTS_ALTERNATIVES { get { if (!_RESULTS_ALTERNATIVESReady) { _RESULTS_ALTERNATIVESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RESULTS_ALTERNATIVES"); _RESULTS_ALTERNATIVESReady = true; } return _RESULTS_ALTERNATIVESContent; } }
        private static Java.Lang.String _RESULTS_ALTERNATIVESContent = default;
        private static bool _RESULTS_ALTERNATIVESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#RESULTS_RECOGNITION"/>
        /// </summary>
        public static Java.Lang.String RESULTS_RECOGNITION { get { if (!_RESULTS_RECOGNITIONReady) { _RESULTS_RECOGNITIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RESULTS_RECOGNITION"); _RESULTS_RECOGNITIONReady = true; } return _RESULTS_RECOGNITIONContent; } }
        private static Java.Lang.String _RESULTS_RECOGNITIONContent = default;
        private static bool _RESULTS_RECOGNITIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#TOP_LOCALE_ALTERNATIVES"/>
        /// </summary>
        public static Java.Lang.String TOP_LOCALE_ALTERNATIVES { get { if (!_TOP_LOCALE_ALTERNATIVESReady) { _TOP_LOCALE_ALTERNATIVESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TOP_LOCALE_ALTERNATIVES"); _TOP_LOCALE_ALTERNATIVESReady = true; } return _TOP_LOCALE_ALTERNATIVESContent; } }
        private static Java.Lang.String _TOP_LOCALE_ALTERNATIVESContent = default;
        private static bool _TOP_LOCALE_ALTERNATIVESReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#createOnDeviceSpeechRecognizer(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <returns><see cref="Android.Speech.SpeechRecognizer"/></returns>
        public static Android.Speech.SpeechRecognizer CreateOnDeviceSpeechRecognizer(Android.Content.Context arg0)
        {
            return SExecuteWithSignature<Android.Speech.SpeechRecognizer>(LocalBridgeClazz, "createOnDeviceSpeechRecognizer", "(Landroid/content/Context;)Landroid/speech/SpeechRecognizer;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#createSpeechRecognizer(android.content.Context,android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Content.ComponentName"/></param>
        /// <returns><see cref="Android.Speech.SpeechRecognizer"/></returns>
        public static Android.Speech.SpeechRecognizer CreateSpeechRecognizer(Android.Content.Context arg0, Android.Content.ComponentName arg1)
        {
            return SExecuteWithSignature<Android.Speech.SpeechRecognizer>(LocalBridgeClazz, "createSpeechRecognizer", "(Landroid/content/Context;Landroid/content/ComponentName;)Landroid/speech/SpeechRecognizer;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#createSpeechRecognizer(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <returns><see cref="Android.Speech.SpeechRecognizer"/></returns>
        public static Android.Speech.SpeechRecognizer CreateSpeechRecognizer(Android.Content.Context arg0)
        {
            return SExecuteWithSignature<Android.Speech.SpeechRecognizer>(LocalBridgeClazz, "createSpeechRecognizer", "(Landroid/content/Context;)Landroid/speech/SpeechRecognizer;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#isOnDeviceRecognitionAvailable(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsOnDeviceRecognitionAvailable(Android.Content.Context arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isOnDeviceRecognitionAvailable", "(Landroid/content/Context;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#isRecognitionAvailable(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsRecognitionAvailable(Android.Content.Context arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isRecognitionAvailable", "(Landroid/content/Context;)Z", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#cancel()"/>
        /// </summary>
        public void Cancel()
        {
            IExecuteWithSignature("cancel", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#checkRecognitionSupport(android.content.Intent,java.util.concurrent.Executor,android.speech.RecognitionSupportCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Intent"/></param>
        /// <param name="arg1"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg2"><see cref="Android.Speech.RecognitionSupportCallback"/></param>
        public void CheckRecognitionSupport(Android.Content.Intent arg0, Java.Util.Concurrent.Executor arg1, Android.Speech.RecognitionSupportCallback arg2)
        {
            IExecuteWithSignature("checkRecognitionSupport", "(Landroid/content/Intent;Ljava/util/concurrent/Executor;Landroid/speech/RecognitionSupportCallback;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#destroy()"/>
        /// </summary>
        public void Destroy()
        {
            IExecuteWithSignature("destroy", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#setRecognitionListener(android.speech.RecognitionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Speech.RecognitionListener"/></param>
        public void SetRecognitionListener(Android.Speech.RecognitionListener arg0)
        {
            IExecuteWithSignature("setRecognitionListener", "(Landroid/speech/RecognitionListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#startListening(android.content.Intent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Intent"/></param>
        public void StartListening(Android.Content.Intent arg0)
        {
            IExecuteWithSignature("startListening", "(Landroid/content/Intent;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#stopListening()"/>
        /// </summary>
        public void StopListening()
        {
            IExecuteWithSignature("stopListening", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#triggerModelDownload(android.content.Intent,java.util.concurrent.Executor,android.speech.ModelDownloadListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Intent"/></param>
        /// <param name="arg1"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg2"><see cref="Android.Speech.ModelDownloadListener"/></param>
        public void TriggerModelDownload(Android.Content.Intent arg0, Java.Util.Concurrent.Executor arg1, Android.Speech.ModelDownloadListener arg2)
        {
            IExecuteWithSignature("triggerModelDownload", "(Landroid/content/Intent;Ljava/util/concurrent/Executor;Landroid/speech/ModelDownloadListener;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#triggerModelDownload(android.content.Intent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Intent"/></param>
        public void TriggerModelDownload(Android.Content.Intent arg0)
        {
            IExecuteWithSignature("triggerModelDownload", "(Landroid/content/Intent;)V", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
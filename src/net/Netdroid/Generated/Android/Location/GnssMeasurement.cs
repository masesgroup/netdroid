/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Location
{
    #region GnssMeasurement declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html"/>
    /// </summary>
    public partial class GnssMeasurement : Android.Os.Parcelable
    {
        const string _bridgeClassName = "android.location.GnssMeasurement";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public GnssMeasurement() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public GnssMeasurement(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region GnssMeasurement implementation
    public partial class GnssMeasurement
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#ADR_STATE_CYCLE_SLIP"/>
        /// </summary>
        public static int ADR_STATE_CYCLE_SLIP { get { if (!_ADR_STATE_CYCLE_SLIPReady) { _ADR_STATE_CYCLE_SLIPContent = SGetField<int>(LocalBridgeClazz, "ADR_STATE_CYCLE_SLIP"); _ADR_STATE_CYCLE_SLIPReady = true; } return _ADR_STATE_CYCLE_SLIPContent; } }
        private static int _ADR_STATE_CYCLE_SLIPContent = default;
        private static bool _ADR_STATE_CYCLE_SLIPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#ADR_STATE_HALF_CYCLE_REPORTED"/>
        /// </summary>
        public static int ADR_STATE_HALF_CYCLE_REPORTED { get { if (!_ADR_STATE_HALF_CYCLE_REPORTEDReady) { _ADR_STATE_HALF_CYCLE_REPORTEDContent = SGetField<int>(LocalBridgeClazz, "ADR_STATE_HALF_CYCLE_REPORTED"); _ADR_STATE_HALF_CYCLE_REPORTEDReady = true; } return _ADR_STATE_HALF_CYCLE_REPORTEDContent; } }
        private static int _ADR_STATE_HALF_CYCLE_REPORTEDContent = default;
        private static bool _ADR_STATE_HALF_CYCLE_REPORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#ADR_STATE_HALF_CYCLE_RESOLVED"/>
        /// </summary>
        public static int ADR_STATE_HALF_CYCLE_RESOLVED { get { if (!_ADR_STATE_HALF_CYCLE_RESOLVEDReady) { _ADR_STATE_HALF_CYCLE_RESOLVEDContent = SGetField<int>(LocalBridgeClazz, "ADR_STATE_HALF_CYCLE_RESOLVED"); _ADR_STATE_HALF_CYCLE_RESOLVEDReady = true; } return _ADR_STATE_HALF_CYCLE_RESOLVEDContent; } }
        private static int _ADR_STATE_HALF_CYCLE_RESOLVEDContent = default;
        private static bool _ADR_STATE_HALF_CYCLE_RESOLVEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#ADR_STATE_RESET"/>
        /// </summary>
        public static int ADR_STATE_RESET { get { if (!_ADR_STATE_RESETReady) { _ADR_STATE_RESETContent = SGetField<int>(LocalBridgeClazz, "ADR_STATE_RESET"); _ADR_STATE_RESETReady = true; } return _ADR_STATE_RESETContent; } }
        private static int _ADR_STATE_RESETContent = default;
        private static bool _ADR_STATE_RESETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#ADR_STATE_UNKNOWN"/>
        /// </summary>
        public static int ADR_STATE_UNKNOWN { get { if (!_ADR_STATE_UNKNOWNReady) { _ADR_STATE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "ADR_STATE_UNKNOWN"); _ADR_STATE_UNKNOWNReady = true; } return _ADR_STATE_UNKNOWNContent; } }
        private static int _ADR_STATE_UNKNOWNContent = default;
        private static bool _ADR_STATE_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#ADR_STATE_VALID"/>
        /// </summary>
        public static int ADR_STATE_VALID { get { if (!_ADR_STATE_VALIDReady) { _ADR_STATE_VALIDContent = SGetField<int>(LocalBridgeClazz, "ADR_STATE_VALID"); _ADR_STATE_VALIDReady = true; } return _ADR_STATE_VALIDContent; } }
        private static int _ADR_STATE_VALIDContent = default;
        private static bool _ADR_STATE_VALIDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#MULTIPATH_INDICATOR_DETECTED"/>
        /// </summary>
        public static int MULTIPATH_INDICATOR_DETECTED { get { if (!_MULTIPATH_INDICATOR_DETECTEDReady) { _MULTIPATH_INDICATOR_DETECTEDContent = SGetField<int>(LocalBridgeClazz, "MULTIPATH_INDICATOR_DETECTED"); _MULTIPATH_INDICATOR_DETECTEDReady = true; } return _MULTIPATH_INDICATOR_DETECTEDContent; } }
        private static int _MULTIPATH_INDICATOR_DETECTEDContent = default;
        private static bool _MULTIPATH_INDICATOR_DETECTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#MULTIPATH_INDICATOR_NOT_DETECTED"/>
        /// </summary>
        public static int MULTIPATH_INDICATOR_NOT_DETECTED { get { if (!_MULTIPATH_INDICATOR_NOT_DETECTEDReady) { _MULTIPATH_INDICATOR_NOT_DETECTEDContent = SGetField<int>(LocalBridgeClazz, "MULTIPATH_INDICATOR_NOT_DETECTED"); _MULTIPATH_INDICATOR_NOT_DETECTEDReady = true; } return _MULTIPATH_INDICATOR_NOT_DETECTEDContent; } }
        private static int _MULTIPATH_INDICATOR_NOT_DETECTEDContent = default;
        private static bool _MULTIPATH_INDICATOR_NOT_DETECTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#MULTIPATH_INDICATOR_UNKNOWN"/>
        /// </summary>
        public static int MULTIPATH_INDICATOR_UNKNOWN { get { if (!_MULTIPATH_INDICATOR_UNKNOWNReady) { _MULTIPATH_INDICATOR_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "MULTIPATH_INDICATOR_UNKNOWN"); _MULTIPATH_INDICATOR_UNKNOWNReady = true; } return _MULTIPATH_INDICATOR_UNKNOWNContent; } }
        private static int _MULTIPATH_INDICATOR_UNKNOWNContent = default;
        private static bool _MULTIPATH_INDICATOR_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#STATE_2ND_CODE_LOCK"/>
        /// </summary>
        public static int STATE_2ND_CODE_LOCK { get { if (!_STATE_2ND_CODE_LOCKReady) { _STATE_2ND_CODE_LOCKContent = SGetField<int>(LocalBridgeClazz, "STATE_2ND_CODE_LOCK"); _STATE_2ND_CODE_LOCKReady = true; } return _STATE_2ND_CODE_LOCKContent; } }
        private static int _STATE_2ND_CODE_LOCKContent = default;
        private static bool _STATE_2ND_CODE_LOCKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#STATE_BDS_D2_BIT_SYNC"/>
        /// </summary>
        public static int STATE_BDS_D2_BIT_SYNC { get { if (!_STATE_BDS_D2_BIT_SYNCReady) { _STATE_BDS_D2_BIT_SYNCContent = SGetField<int>(LocalBridgeClazz, "STATE_BDS_D2_BIT_SYNC"); _STATE_BDS_D2_BIT_SYNCReady = true; } return _STATE_BDS_D2_BIT_SYNCContent; } }
        private static int _STATE_BDS_D2_BIT_SYNCContent = default;
        private static bool _STATE_BDS_D2_BIT_SYNCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#STATE_BDS_D2_SUBFRAME_SYNC"/>
        /// </summary>
        public static int STATE_BDS_D2_SUBFRAME_SYNC { get { if (!_STATE_BDS_D2_SUBFRAME_SYNCReady) { _STATE_BDS_D2_SUBFRAME_SYNCContent = SGetField<int>(LocalBridgeClazz, "STATE_BDS_D2_SUBFRAME_SYNC"); _STATE_BDS_D2_SUBFRAME_SYNCReady = true; } return _STATE_BDS_D2_SUBFRAME_SYNCContent; } }
        private static int _STATE_BDS_D2_SUBFRAME_SYNCContent = default;
        private static bool _STATE_BDS_D2_SUBFRAME_SYNCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#STATE_BIT_SYNC"/>
        /// </summary>
        public static int STATE_BIT_SYNC { get { if (!_STATE_BIT_SYNCReady) { _STATE_BIT_SYNCContent = SGetField<int>(LocalBridgeClazz, "STATE_BIT_SYNC"); _STATE_BIT_SYNCReady = true; } return _STATE_BIT_SYNCContent; } }
        private static int _STATE_BIT_SYNCContent = default;
        private static bool _STATE_BIT_SYNCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#STATE_CODE_LOCK"/>
        /// </summary>
        public static int STATE_CODE_LOCK { get { if (!_STATE_CODE_LOCKReady) { _STATE_CODE_LOCKContent = SGetField<int>(LocalBridgeClazz, "STATE_CODE_LOCK"); _STATE_CODE_LOCKReady = true; } return _STATE_CODE_LOCKContent; } }
        private static int _STATE_CODE_LOCKContent = default;
        private static bool _STATE_CODE_LOCKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#STATE_GAL_E1B_PAGE_SYNC"/>
        /// </summary>
        public static int STATE_GAL_E1B_PAGE_SYNC { get { if (!_STATE_GAL_E1B_PAGE_SYNCReady) { _STATE_GAL_E1B_PAGE_SYNCContent = SGetField<int>(LocalBridgeClazz, "STATE_GAL_E1B_PAGE_SYNC"); _STATE_GAL_E1B_PAGE_SYNCReady = true; } return _STATE_GAL_E1B_PAGE_SYNCContent; } }
        private static int _STATE_GAL_E1B_PAGE_SYNCContent = default;
        private static bool _STATE_GAL_E1B_PAGE_SYNCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#STATE_GAL_E1BC_CODE_LOCK"/>
        /// </summary>
        public static int STATE_GAL_E1BC_CODE_LOCK { get { if (!_STATE_GAL_E1BC_CODE_LOCKReady) { _STATE_GAL_E1BC_CODE_LOCKContent = SGetField<int>(LocalBridgeClazz, "STATE_GAL_E1BC_CODE_LOCK"); _STATE_GAL_E1BC_CODE_LOCKReady = true; } return _STATE_GAL_E1BC_CODE_LOCKContent; } }
        private static int _STATE_GAL_E1BC_CODE_LOCKContent = default;
        private static bool _STATE_GAL_E1BC_CODE_LOCKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#STATE_GAL_E1C_2ND_CODE_LOCK"/>
        /// </summary>
        public static int STATE_GAL_E1C_2ND_CODE_LOCK { get { if (!_STATE_GAL_E1C_2ND_CODE_LOCKReady) { _STATE_GAL_E1C_2ND_CODE_LOCKContent = SGetField<int>(LocalBridgeClazz, "STATE_GAL_E1C_2ND_CODE_LOCK"); _STATE_GAL_E1C_2ND_CODE_LOCKReady = true; } return _STATE_GAL_E1C_2ND_CODE_LOCKContent; } }
        private static int _STATE_GAL_E1C_2ND_CODE_LOCKContent = default;
        private static bool _STATE_GAL_E1C_2ND_CODE_LOCKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#STATE_GLO_STRING_SYNC"/>
        /// </summary>
        public static int STATE_GLO_STRING_SYNC { get { if (!_STATE_GLO_STRING_SYNCReady) { _STATE_GLO_STRING_SYNCContent = SGetField<int>(LocalBridgeClazz, "STATE_GLO_STRING_SYNC"); _STATE_GLO_STRING_SYNCReady = true; } return _STATE_GLO_STRING_SYNCContent; } }
        private static int _STATE_GLO_STRING_SYNCContent = default;
        private static bool _STATE_GLO_STRING_SYNCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#STATE_GLO_TOD_DECODED"/>
        /// </summary>
        public static int STATE_GLO_TOD_DECODED { get { if (!_STATE_GLO_TOD_DECODEDReady) { _STATE_GLO_TOD_DECODEDContent = SGetField<int>(LocalBridgeClazz, "STATE_GLO_TOD_DECODED"); _STATE_GLO_TOD_DECODEDReady = true; } return _STATE_GLO_TOD_DECODEDContent; } }
        private static int _STATE_GLO_TOD_DECODEDContent = default;
        private static bool _STATE_GLO_TOD_DECODEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#STATE_GLO_TOD_KNOWN"/>
        /// </summary>
        public static int STATE_GLO_TOD_KNOWN { get { if (!_STATE_GLO_TOD_KNOWNReady) { _STATE_GLO_TOD_KNOWNContent = SGetField<int>(LocalBridgeClazz, "STATE_GLO_TOD_KNOWN"); _STATE_GLO_TOD_KNOWNReady = true; } return _STATE_GLO_TOD_KNOWNContent; } }
        private static int _STATE_GLO_TOD_KNOWNContent = default;
        private static bool _STATE_GLO_TOD_KNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#STATE_MSEC_AMBIGUOUS"/>
        /// </summary>
        public static int STATE_MSEC_AMBIGUOUS { get { if (!_STATE_MSEC_AMBIGUOUSReady) { _STATE_MSEC_AMBIGUOUSContent = SGetField<int>(LocalBridgeClazz, "STATE_MSEC_AMBIGUOUS"); _STATE_MSEC_AMBIGUOUSReady = true; } return _STATE_MSEC_AMBIGUOUSContent; } }
        private static int _STATE_MSEC_AMBIGUOUSContent = default;
        private static bool _STATE_MSEC_AMBIGUOUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#STATE_SBAS_SYNC"/>
        /// </summary>
        public static int STATE_SBAS_SYNC { get { if (!_STATE_SBAS_SYNCReady) { _STATE_SBAS_SYNCContent = SGetField<int>(LocalBridgeClazz, "STATE_SBAS_SYNC"); _STATE_SBAS_SYNCReady = true; } return _STATE_SBAS_SYNCContent; } }
        private static int _STATE_SBAS_SYNCContent = default;
        private static bool _STATE_SBAS_SYNCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#STATE_SUBFRAME_SYNC"/>
        /// </summary>
        public static int STATE_SUBFRAME_SYNC { get { if (!_STATE_SUBFRAME_SYNCReady) { _STATE_SUBFRAME_SYNCContent = SGetField<int>(LocalBridgeClazz, "STATE_SUBFRAME_SYNC"); _STATE_SUBFRAME_SYNCReady = true; } return _STATE_SUBFRAME_SYNCContent; } }
        private static int _STATE_SUBFRAME_SYNCContent = default;
        private static bool _STATE_SUBFRAME_SYNCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#STATE_SYMBOL_SYNC"/>
        /// </summary>
        public static int STATE_SYMBOL_SYNC { get { if (!_STATE_SYMBOL_SYNCReady) { _STATE_SYMBOL_SYNCContent = SGetField<int>(LocalBridgeClazz, "STATE_SYMBOL_SYNC"); _STATE_SYMBOL_SYNCReady = true; } return _STATE_SYMBOL_SYNCContent; } }
        private static int _STATE_SYMBOL_SYNCContent = default;
        private static bool _STATE_SYMBOL_SYNCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#STATE_TOW_DECODED"/>
        /// </summary>
        public static int STATE_TOW_DECODED { get { if (!_STATE_TOW_DECODEDReady) { _STATE_TOW_DECODEDContent = SGetField<int>(LocalBridgeClazz, "STATE_TOW_DECODED"); _STATE_TOW_DECODEDReady = true; } return _STATE_TOW_DECODEDContent; } }
        private static int _STATE_TOW_DECODEDContent = default;
        private static bool _STATE_TOW_DECODEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#STATE_TOW_KNOWN"/>
        /// </summary>
        public static int STATE_TOW_KNOWN { get { if (!_STATE_TOW_KNOWNReady) { _STATE_TOW_KNOWNContent = SGetField<int>(LocalBridgeClazz, "STATE_TOW_KNOWN"); _STATE_TOW_KNOWNReady = true; } return _STATE_TOW_KNOWNContent; } }
        private static int _STATE_TOW_KNOWNContent = default;
        private static bool _STATE_TOW_KNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#STATE_UNKNOWN"/>
        /// </summary>
        public static int STATE_UNKNOWN { get { if (!_STATE_UNKNOWNReady) { _STATE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "STATE_UNKNOWN"); _STATE_UNKNOWNReady = true; } return _STATE_UNKNOWNContent; } }
        private static int _STATE_UNKNOWNContent = default;
        private static bool _STATE_UNKNOWNReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#hasAutomaticGainControlLevelDb()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool HasAutomaticGainControlLevelDb()
        {
            return IExecuteWithSignature<bool>("hasAutomaticGainControlLevelDb", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#hasBasebandCn0DbHz()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasBasebandCn0DbHz()
        {
            return IExecuteWithSignature<bool>("hasBasebandCn0DbHz", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#hasCarrierCycles()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool HasCarrierCycles()
        {
            return IExecuteWithSignature<bool>("hasCarrierCycles", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#hasCarrierFrequencyHz()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasCarrierFrequencyHz()
        {
            return IExecuteWithSignature<bool>("hasCarrierFrequencyHz", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#hasCarrierPhase()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool HasCarrierPhase()
        {
            return IExecuteWithSignature<bool>("hasCarrierPhase", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#hasCarrierPhaseUncertainty()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool HasCarrierPhaseUncertainty()
        {
            return IExecuteWithSignature<bool>("hasCarrierPhaseUncertainty", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#hasCodeType()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasCodeType()
        {
            return IExecuteWithSignature<bool>("hasCodeType", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#hasFullInterSignalBiasNanos()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasFullInterSignalBiasNanos()
        {
            return IExecuteWithSignature<bool>("hasFullInterSignalBiasNanos", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#hasFullInterSignalBiasUncertaintyNanos()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasFullInterSignalBiasUncertaintyNanos()
        {
            return IExecuteWithSignature<bool>("hasFullInterSignalBiasUncertaintyNanos", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#hasSatelliteInterSignalBiasNanos()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasSatelliteInterSignalBiasNanos()
        {
            return IExecuteWithSignature<bool>("hasSatelliteInterSignalBiasNanos", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#hasSatelliteInterSignalBiasUncertaintyNanos()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasSatelliteInterSignalBiasUncertaintyNanos()
        {
            return IExecuteWithSignature<bool>("hasSatelliteInterSignalBiasUncertaintyNanos", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#hasSnrInDb()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasSnrInDb()
        {
            return IExecuteWithSignature<bool>("hasSnrInDb", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#getAccumulatedDeltaRangeMeters()"/>
        /// </summary>
        /// <returns><see cref="double"/></returns>
        public double GetAccumulatedDeltaRangeMeters()
        {
            return IExecuteWithSignature<double>("getAccumulatedDeltaRangeMeters", "()D");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#getAccumulatedDeltaRangeUncertaintyMeters()"/>
        /// </summary>
        /// <returns><see cref="double"/></returns>
        public double GetAccumulatedDeltaRangeUncertaintyMeters()
        {
            return IExecuteWithSignature<double>("getAccumulatedDeltaRangeUncertaintyMeters", "()D");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#getAutomaticGainControlLevelDb()"/>
        /// </summary>
        /// <returns><see cref="double"/></returns>
        [global::System.Obsolete()]
        public double GetAutomaticGainControlLevelDb()
        {
            return IExecuteWithSignature<double>("getAutomaticGainControlLevelDb", "()D");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#getBasebandCn0DbHz()"/>
        /// </summary>
        /// <returns><see cref="double"/></returns>
        public double GetBasebandCn0DbHz()
        {
            return IExecuteWithSignature<double>("getBasebandCn0DbHz", "()D");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#getCarrierPhase()"/>
        /// </summary>
        /// <returns><see cref="double"/></returns>
        [global::System.Obsolete()]
        public double GetCarrierPhase()
        {
            return IExecuteWithSignature<double>("getCarrierPhase", "()D");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#getCarrierPhaseUncertainty()"/>
        /// </summary>
        /// <returns><see cref="double"/></returns>
        [global::System.Obsolete()]
        public double GetCarrierPhaseUncertainty()
        {
            return IExecuteWithSignature<double>("getCarrierPhaseUncertainty", "()D");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#getCn0DbHz()"/>
        /// </summary>
        /// <returns><see cref="double"/></returns>
        public double GetCn0DbHz()
        {
            return IExecuteWithSignature<double>("getCn0DbHz", "()D");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#getFullInterSignalBiasNanos()"/>
        /// </summary>
        /// <returns><see cref="double"/></returns>
        public double GetFullInterSignalBiasNanos()
        {
            return IExecuteWithSignature<double>("getFullInterSignalBiasNanos", "()D");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#getFullInterSignalBiasUncertaintyNanos()"/>
        /// </summary>
        /// <returns><see cref="double"/></returns>
        public double GetFullInterSignalBiasUncertaintyNanos()
        {
            return IExecuteWithSignature<double>("getFullInterSignalBiasUncertaintyNanos", "()D");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#getPseudorangeRateMetersPerSecond()"/>
        /// </summary>
        /// <returns><see cref="double"/></returns>
        public double GetPseudorangeRateMetersPerSecond()
        {
            return IExecuteWithSignature<double>("getPseudorangeRateMetersPerSecond", "()D");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#getPseudorangeRateUncertaintyMetersPerSecond()"/>
        /// </summary>
        /// <returns><see cref="double"/></returns>
        public double GetPseudorangeRateUncertaintyMetersPerSecond()
        {
            return IExecuteWithSignature<double>("getPseudorangeRateUncertaintyMetersPerSecond", "()D");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#getSatelliteInterSignalBiasNanos()"/>
        /// </summary>
        /// <returns><see cref="double"/></returns>
        public double GetSatelliteInterSignalBiasNanos()
        {
            return IExecuteWithSignature<double>("getSatelliteInterSignalBiasNanos", "()D");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#getSatelliteInterSignalBiasUncertaintyNanos()"/>
        /// </summary>
        /// <returns><see cref="double"/></returns>
        public double GetSatelliteInterSignalBiasUncertaintyNanos()
        {
            return IExecuteWithSignature<double>("getSatelliteInterSignalBiasUncertaintyNanos", "()D");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#getSnrInDb()"/>
        /// </summary>
        /// <returns><see cref="double"/></returns>
        public double GetSnrInDb()
        {
            return IExecuteWithSignature<double>("getSnrInDb", "()D");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#getTimeOffsetNanos()"/>
        /// </summary>
        /// <returns><see cref="double"/></returns>
        public double GetTimeOffsetNanos()
        {
            return IExecuteWithSignature<double>("getTimeOffsetNanos", "()D");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#getCarrierFrequencyHz()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetCarrierFrequencyHz()
        {
            return IExecuteWithSignature<float>("getCarrierFrequencyHz", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#getAccumulatedDeltaRangeState()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetAccumulatedDeltaRangeState()
        {
            return IExecuteWithSignature<int>("getAccumulatedDeltaRangeState", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#getConstellationType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetConstellationType()
        {
            return IExecuteWithSignature<int>("getConstellationType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#getMultipathIndicator()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMultipathIndicator()
        {
            return IExecuteWithSignature<int>("getMultipathIndicator", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#getState()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetState()
        {
            return IExecuteWithSignature<int>("getState", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#getSvid()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetSvid()
        {
            return IExecuteWithSignature<int>("getSvid", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#getCodeType()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetCodeType()
        {
            return IExecuteWithSignature<Java.Lang.String>("getCodeType", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#getCarrierCycles()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        [global::System.Obsolete()]
        public long GetCarrierCycles()
        {
            return IExecuteWithSignature<long>("getCarrierCycles", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#getReceivedSvTimeNanos()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetReceivedSvTimeNanos()
        {
            return IExecuteWithSignature<long>("getReceivedSvTimeNanos", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#getReceivedSvTimeUncertaintyNanos()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetReceivedSvTimeUncertaintyNanos()
        {
            return IExecuteWithSignature<long>("getReceivedSvTimeUncertaintyNanos", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/GnssMeasurement.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecute("writeToParcel", arg0, arg1);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
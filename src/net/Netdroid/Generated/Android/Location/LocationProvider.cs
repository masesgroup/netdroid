/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Location
{
    #region LocationProvider declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/location/LocationProvider.html"/>
    /// </summary>
    [global::System.Obsolete()]
    public partial class LocationProvider : MASES.JCOBridge.C2JBridge.JVMBridgeBase<LocationProvider>
    {
        const string _bridgeClassName = "android.location.LocationProvider";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public LocationProvider() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public LocationProvider(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region LocationProvider implementation
    public partial class LocationProvider
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/LocationProvider.html#AVAILABLE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int AVAILABLE { get { if (!_AVAILABLEReady) { _AVAILABLEContent = SGetField<int>(LocalBridgeClazz, "AVAILABLE"); _AVAILABLEReady = true; } return _AVAILABLEContent; } }
        private static int _AVAILABLEContent = default;
        private static bool _AVAILABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/LocationProvider.html#OUT_OF_SERVICE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int OUT_OF_SERVICE { get { if (!_OUT_OF_SERVICEReady) { _OUT_OF_SERVICEContent = SGetField<int>(LocalBridgeClazz, "OUT_OF_SERVICE"); _OUT_OF_SERVICEReady = true; } return _OUT_OF_SERVICEContent; } }
        private static int _OUT_OF_SERVICEContent = default;
        private static bool _OUT_OF_SERVICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/LocationProvider.html#TEMPORARILY_UNAVAILABLE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int TEMPORARILY_UNAVAILABLE { get { if (!_TEMPORARILY_UNAVAILABLEReady) { _TEMPORARILY_UNAVAILABLEContent = SGetField<int>(LocalBridgeClazz, "TEMPORARILY_UNAVAILABLE"); _TEMPORARILY_UNAVAILABLEReady = true; } return _TEMPORARILY_UNAVAILABLEContent; } }
        private static int _TEMPORARILY_UNAVAILABLEContent = default;
        private static bool _TEMPORARILY_UNAVAILABLEReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/LocationProvider.html#hasMonetaryCost()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool HasMonetaryCost()
        {
            return IExecuteWithSignature<bool>("hasMonetaryCost", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/LocationProvider.html#meetsCriteria(android.location.Criteria)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Location.Criteria"/></param>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool MeetsCriteria(Android.Location.Criteria arg0)
        {
            return IExecuteWithSignature<bool>("meetsCriteria", "(Landroid/location/Criteria;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/LocationProvider.html#requiresCell()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool RequiresCell()
        {
            return IExecuteWithSignature<bool>("requiresCell", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/LocationProvider.html#requiresNetwork()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool RequiresNetwork()
        {
            return IExecuteWithSignature<bool>("requiresNetwork", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/LocationProvider.html#requiresSatellite()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool RequiresSatellite()
        {
            return IExecuteWithSignature<bool>("requiresSatellite", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/LocationProvider.html#supportsAltitude()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool SupportsAltitude()
        {
            return IExecuteWithSignature<bool>("supportsAltitude", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/LocationProvider.html#supportsBearing()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool SupportsBearing()
        {
            return IExecuteWithSignature<bool>("supportsBearing", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/LocationProvider.html#supportsSpeed()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool SupportsSpeed()
        {
            return IExecuteWithSignature<bool>("supportsSpeed", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/LocationProvider.html#getAccuracy()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetAccuracy()
        {
            return IExecuteWithSignature<int>("getAccuracy", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/LocationProvider.html#getPowerRequirement()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetPowerRequirement()
        {
            return IExecuteWithSignature<int>("getPowerRequirement", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/LocationProvider.html#getName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        [global::System.Obsolete()]
        public Java.Lang.String GetName()
        {
            return IExecuteWithSignature<Java.Lang.String>("getName", "()Ljava/lang/String;");
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
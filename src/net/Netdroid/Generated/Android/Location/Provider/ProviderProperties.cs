/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.5.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Location.Provider
{
    #region ProviderProperties
    public partial class ProviderProperties
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/provider/ProviderProperties.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/provider/ProviderProperties.html#ACCURACY_COARSE"/>
        /// </summary>
        public static int ACCURACY_COARSE { get { if (!_ACCURACY_COARSEReady) { _ACCURACY_COARSEContent = SGetField<int>(LocalBridgeClazz, "ACCURACY_COARSE"); _ACCURACY_COARSEReady = true; } return _ACCURACY_COARSEContent; } }
        private static int _ACCURACY_COARSEContent = default;
        private static bool _ACCURACY_COARSEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/provider/ProviderProperties.html#ACCURACY_FINE"/>
        /// </summary>
        public static int ACCURACY_FINE { get { if (!_ACCURACY_FINEReady) { _ACCURACY_FINEContent = SGetField<int>(LocalBridgeClazz, "ACCURACY_FINE"); _ACCURACY_FINEReady = true; } return _ACCURACY_FINEContent; } }
        private static int _ACCURACY_FINEContent = default;
        private static bool _ACCURACY_FINEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/provider/ProviderProperties.html#POWER_USAGE_HIGH"/>
        /// </summary>
        public static int POWER_USAGE_HIGH { get { if (!_POWER_USAGE_HIGHReady) { _POWER_USAGE_HIGHContent = SGetField<int>(LocalBridgeClazz, "POWER_USAGE_HIGH"); _POWER_USAGE_HIGHReady = true; } return _POWER_USAGE_HIGHContent; } }
        private static int _POWER_USAGE_HIGHContent = default;
        private static bool _POWER_USAGE_HIGHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/provider/ProviderProperties.html#POWER_USAGE_LOW"/>
        /// </summary>
        public static int POWER_USAGE_LOW { get { if (!_POWER_USAGE_LOWReady) { _POWER_USAGE_LOWContent = SGetField<int>(LocalBridgeClazz, "POWER_USAGE_LOW"); _POWER_USAGE_LOWReady = true; } return _POWER_USAGE_LOWContent; } }
        private static int _POWER_USAGE_LOWContent = default;
        private static bool _POWER_USAGE_LOWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/provider/ProviderProperties.html#POWER_USAGE_MEDIUM"/>
        /// </summary>
        public static int POWER_USAGE_MEDIUM { get { if (!_POWER_USAGE_MEDIUMReady) { _POWER_USAGE_MEDIUMContent = SGetField<int>(LocalBridgeClazz, "POWER_USAGE_MEDIUM"); _POWER_USAGE_MEDIUMReady = true; } return _POWER_USAGE_MEDIUMContent; } }
        private static int _POWER_USAGE_MEDIUMContent = default;
        private static bool _POWER_USAGE_MEDIUMReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/provider/ProviderProperties.html#hasAltitudeSupport()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasAltitudeSupport()
        {
            return IExecuteWithSignature<bool>("hasAltitudeSupport", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/provider/ProviderProperties.html#hasBearingSupport()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasBearingSupport()
        {
            return IExecuteWithSignature<bool>("hasBearingSupport", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/provider/ProviderProperties.html#hasCellRequirement()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasCellRequirement()
        {
            return IExecuteWithSignature<bool>("hasCellRequirement", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/provider/ProviderProperties.html#hasMonetaryCost()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasMonetaryCost()
        {
            return IExecuteWithSignature<bool>("hasMonetaryCost", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/provider/ProviderProperties.html#hasNetworkRequirement()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasNetworkRequirement()
        {
            return IExecuteWithSignature<bool>("hasNetworkRequirement", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/provider/ProviderProperties.html#hasSatelliteRequirement()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasSatelliteRequirement()
        {
            return IExecuteWithSignature<bool>("hasSatelliteRequirement", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/provider/ProviderProperties.html#hasSpeedSupport()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasSpeedSupport()
        {
            return IExecuteWithSignature<bool>("hasSpeedSupport", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/provider/ProviderProperties.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/provider/ProviderProperties.html#getAccuracy()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetAccuracy()
        {
            return IExecuteWithSignature<int>("getAccuracy", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/provider/ProviderProperties.html#getPowerUsage()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetPowerUsage()
        {
            return IExecuteWithSignature<int>("getPowerUsage", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/provider/ProviderProperties.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecute("writeToParcel", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region Builder
        public partial class Builder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/location/provider/ProviderProperties.Builder.html#%3Cinit%3E(android.location.provider.ProviderProperties)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Location.Provider.ProviderProperties"/></param>
            public Builder(Android.Location.Provider.ProviderProperties arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/location/provider/ProviderProperties.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Location.Provider.ProviderProperties"/></returns>
            public Android.Location.Provider.ProviderProperties Build()
            {
                return IExecuteWithSignature<Android.Location.Provider.ProviderProperties>("build", "()Landroid/location/provider/ProviderProperties;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/location/provider/ProviderProperties.Builder.html#setAccuracy(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Location.Provider.ProviderProperties.Builder"/></returns>
            public Android.Location.Provider.ProviderProperties.Builder SetAccuracy(int arg0)
            {
                return IExecuteWithSignature<Android.Location.Provider.ProviderProperties.Builder>("setAccuracy", "(I)Landroid/location/provider/ProviderProperties$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/location/provider/ProviderProperties.Builder.html#setHasAltitudeSupport(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Location.Provider.ProviderProperties.Builder"/></returns>
            public Android.Location.Provider.ProviderProperties.Builder SetHasAltitudeSupport(bool arg0)
            {
                return IExecuteWithSignature<Android.Location.Provider.ProviderProperties.Builder>("setHasAltitudeSupport", "(Z)Landroid/location/provider/ProviderProperties$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/location/provider/ProviderProperties.Builder.html#setHasBearingSupport(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Location.Provider.ProviderProperties.Builder"/></returns>
            public Android.Location.Provider.ProviderProperties.Builder SetHasBearingSupport(bool arg0)
            {
                return IExecuteWithSignature<Android.Location.Provider.ProviderProperties.Builder>("setHasBearingSupport", "(Z)Landroid/location/provider/ProviderProperties$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/location/provider/ProviderProperties.Builder.html#setHasCellRequirement(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Location.Provider.ProviderProperties.Builder"/></returns>
            public Android.Location.Provider.ProviderProperties.Builder SetHasCellRequirement(bool arg0)
            {
                return IExecuteWithSignature<Android.Location.Provider.ProviderProperties.Builder>("setHasCellRequirement", "(Z)Landroid/location/provider/ProviderProperties$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/location/provider/ProviderProperties.Builder.html#setHasMonetaryCost(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Location.Provider.ProviderProperties.Builder"/></returns>
            public Android.Location.Provider.ProviderProperties.Builder SetHasMonetaryCost(bool arg0)
            {
                return IExecuteWithSignature<Android.Location.Provider.ProviderProperties.Builder>("setHasMonetaryCost", "(Z)Landroid/location/provider/ProviderProperties$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/location/provider/ProviderProperties.Builder.html#setHasNetworkRequirement(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Location.Provider.ProviderProperties.Builder"/></returns>
            public Android.Location.Provider.ProviderProperties.Builder SetHasNetworkRequirement(bool arg0)
            {
                return IExecuteWithSignature<Android.Location.Provider.ProviderProperties.Builder>("setHasNetworkRequirement", "(Z)Landroid/location/provider/ProviderProperties$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/location/provider/ProviderProperties.Builder.html#setHasSatelliteRequirement(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Location.Provider.ProviderProperties.Builder"/></returns>
            public Android.Location.Provider.ProviderProperties.Builder SetHasSatelliteRequirement(bool arg0)
            {
                return IExecuteWithSignature<Android.Location.Provider.ProviderProperties.Builder>("setHasSatelliteRequirement", "(Z)Landroid/location/provider/ProviderProperties$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/location/provider/ProviderProperties.Builder.html#setHasSpeedSupport(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Location.Provider.ProviderProperties.Builder"/></returns>
            public Android.Location.Provider.ProviderProperties.Builder SetHasSpeedSupport(bool arg0)
            {
                return IExecuteWithSignature<Android.Location.Provider.ProviderProperties.Builder>("setHasSpeedSupport", "(Z)Landroid/location/provider/ProviderProperties$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/location/provider/ProviderProperties.Builder.html#setPowerUsage(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Location.Provider.ProviderProperties.Builder"/></returns>
            public Android.Location.Provider.ProviderProperties.Builder SetPowerUsage(int arg0)
            {
                return IExecuteWithSignature<Android.Location.Provider.ProviderProperties.Builder>("setPowerUsage", "(I)Landroid/location/provider/ProviderProperties$Builder;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
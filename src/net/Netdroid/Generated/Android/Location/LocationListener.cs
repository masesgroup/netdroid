/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.6.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Location
{
    #region ILocationListener
    /// <summary>
    /// .NET interface for org.mases.netdroid.generated.android.location.LocationListener implementing <see href="https://developer.android.com/reference/android/location/LocationListener.html"/>
    /// </summary>
    public partial interface ILocationListener
    {
        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region LocationListener
    public partial class LocationListener : Android.Location.ILocationListener
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// Handlers initializer for <see cref="LocationListener"/>
        /// </summary>
        protected virtual void InitializeHandlers()
        {
            AddEventHandler("onLocationChanged", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Location.Location>>>(OnLocationChangedEventHandler));
            AddEventHandler("onFlushComplete", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(OnFlushCompleteEventHandler));
            AddEventHandler("onLocationChanged1", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Java.Util.List<Android.Location.Location>>>>(OnLocationChanged1EventHandler));
            AddEventHandler("onProviderDisabled", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Java.Lang.String>>>(OnProviderDisabledEventHandler));
            AddEventHandler("onProviderEnabled", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Java.Lang.String>>>(OnProviderEnabledEventHandler));
            AddEventHandler("onStatusChanged", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Java.Lang.String>>>(OnStatusChangedEventHandler));

        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/location/LocationListener.html#onLocationChanged(android.location.Location)"/>
        /// </summary>
        /// <remarks>If <see cref="OnOnLocationChanged"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Action<Android.Location.Location> OnOnLocationChanged { get; set; } = null;

        void OnLocationChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Location.Location>> data)
        {
            var methodToExecute = (OnOnLocationChanged != null) ? OnOnLocationChanged : OnLocationChanged;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/LocationListener.html#onLocationChanged(android.location.Location)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Location.Location"/></param>
        public virtual void OnLocationChanged(Android.Location.Location arg0)
        {
            
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/LocationListener.html#onFlushComplete(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <remarks>The method invokes the default implementation in the JVM interface</remarks>
        public void OnFlushCompleteDefault(int arg0)
        {
            IExecuteWithSignature("onFlushCompleteDefault", "(I)V", arg0);
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/location/LocationListener.html#onFlushComplete(int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnOnFlushComplete"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Action<int> OnOnFlushComplete { get; set; } = null;

        void OnFlushCompleteEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnOnFlushComplete != null) ? OnOnFlushComplete : OnFlushComplete;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/LocationListener.html#onFlushComplete(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <remarks>The method invokes the default implementation in the JVM interface using <see cref="OnFlushCompleteDefault"/>; override the method to implement a different behavior</remarks>
        public virtual void OnFlushComplete(int arg0)
        {
            OnFlushCompleteDefault(arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/LocationListener.html#onLocationChanged(java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        /// <remarks>The method invokes the default implementation in the JVM interface</remarks>
        public void OnLocationChangedDefault(Java.Util.List<Android.Location.Location> arg0)
        {
            IExecuteWithSignature("onLocationChangedDefault", "(Ljava/util/List;)V", arg0);
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/location/LocationListener.html#onLocationChanged(java.util.List)"/>
        /// </summary>
        /// <remarks>If <see cref="OnOnLocationChanged1"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Action<Java.Util.List<Android.Location.Location>> OnOnLocationChanged1 { get; set; } = null;

        void OnLocationChanged1EventHandler(object sender, CLRListenerEventArgs<CLREventData<Java.Util.List<Android.Location.Location>>> data)
        {
            var methodToExecute = (OnOnLocationChanged1 != null) ? OnOnLocationChanged1 : OnLocationChanged;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/LocationListener.html#onLocationChanged(java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        /// <remarks>The method invokes the default implementation in the JVM interface using <see cref="OnLocationChangedDefault"/>; override the method to implement a different behavior</remarks>
        public virtual void OnLocationChanged(Java.Util.List<Android.Location.Location> arg0)
        {
            OnLocationChangedDefault(arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/LocationListener.html#onProviderDisabled(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <remarks>The method invokes the default implementation in the JVM interface</remarks>
        public void OnProviderDisabledDefault(Java.Lang.String arg0)
        {
            IExecuteWithSignature("onProviderDisabledDefault", "(Ljava/lang/String;)V", arg0);
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/location/LocationListener.html#onProviderDisabled(java.lang.String)"/>
        /// </summary>
        /// <remarks>If <see cref="OnOnProviderDisabled"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Action<Java.Lang.String> OnOnProviderDisabled { get; set; } = null;

        void OnProviderDisabledEventHandler(object sender, CLRListenerEventArgs<CLREventData<Java.Lang.String>> data)
        {
            var methodToExecute = (OnOnProviderDisabled != null) ? OnOnProviderDisabled : OnProviderDisabled;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/LocationListener.html#onProviderDisabled(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <remarks>The method invokes the default implementation in the JVM interface using <see cref="OnProviderDisabledDefault"/>; override the method to implement a different behavior</remarks>
        public virtual void OnProviderDisabled(Java.Lang.String arg0)
        {
            OnProviderDisabledDefault(arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/LocationListener.html#onProviderEnabled(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <remarks>The method invokes the default implementation in the JVM interface</remarks>
        public void OnProviderEnabledDefault(Java.Lang.String arg0)
        {
            IExecuteWithSignature("onProviderEnabledDefault", "(Ljava/lang/String;)V", arg0);
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/location/LocationListener.html#onProviderEnabled(java.lang.String)"/>
        /// </summary>
        /// <remarks>If <see cref="OnOnProviderEnabled"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Action<Java.Lang.String> OnOnProviderEnabled { get; set; } = null;

        void OnProviderEnabledEventHandler(object sender, CLRListenerEventArgs<CLREventData<Java.Lang.String>> data)
        {
            var methodToExecute = (OnOnProviderEnabled != null) ? OnOnProviderEnabled : OnProviderEnabled;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/LocationListener.html#onProviderEnabled(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <remarks>The method invokes the default implementation in the JVM interface using <see cref="OnProviderEnabledDefault"/>; override the method to implement a different behavior</remarks>
        public virtual void OnProviderEnabled(Java.Lang.String arg0)
        {
            OnProviderEnabledDefault(arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/LocationListener.html#onStatusChanged(java.lang.String,int,android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Os.Bundle"/></param>
        [global::System.Obsolete()]
        /// <remarks>The method invokes the default implementation in the JVM interface</remarks>
        public void OnStatusChangedDefault(Java.Lang.String arg0, int arg1, Android.Os.Bundle arg2)
        {
            IExecute("onStatusChangedDefault", arg0, arg1, arg2);
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/location/LocationListener.html#onStatusChanged(java.lang.String,int,android.os.Bundle)"/>
        /// </summary>
        /// <remarks>If <see cref="OnOnStatusChanged"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Action<Java.Lang.String, int, Android.Os.Bundle> OnOnStatusChanged { get; set; } = null;

        void OnStatusChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Java.Lang.String>> data)
        {
            var methodToExecute = (OnOnStatusChanged != null) ? OnOnStatusChanged : OnStatusChanged;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<Android.Os.Bundle>(1));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/LocationListener.html#onStatusChanged(java.lang.String,int,android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Os.Bundle"/></param>
        [global::System.Obsolete()]
        /// <remarks>The method invokes the default implementation in the JVM interface using <see cref="OnStatusChangedDefault"/>; override the method to implement a different behavior</remarks>
        public virtual void OnStatusChanged(Java.Lang.String arg0, int arg1, Android.Os.Bundle arg2)
        {
            OnStatusChangedDefault(arg0, arg1, arg2);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region LocationListenerDirect
    public partial class LocationListenerDirect : Android.Location.ILocationListener
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/LocationListener.html#onLocationChanged(android.location.Location)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Location.Location"/></param>
        public override void OnLocationChanged(Android.Location.Location arg0)
        {
            IExecuteWithSignature("onLocationChanged", "(Landroid/location/Location;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/LocationListener.html#onFlushComplete(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public override void OnFlushComplete(int arg0)
        {
            IExecuteWithSignature("onFlushComplete", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/LocationListener.html#onLocationChanged(java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        public override void OnLocationChanged(Java.Util.List<Android.Location.Location> arg0)
        {
            IExecuteWithSignature("onLocationChanged", "(Ljava/util/List;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/LocationListener.html#onProviderDisabled(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public override void OnProviderDisabled(Java.Lang.String arg0)
        {
            IExecuteWithSignature("onProviderDisabled", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/LocationListener.html#onProviderEnabled(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public override void OnProviderEnabled(Java.Lang.String arg0)
        {
            IExecuteWithSignature("onProviderEnabled", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/LocationListener.html#onStatusChanged(java.lang.String,int,android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Os.Bundle"/></param>
        [global::System.Obsolete()]
        public override void OnStatusChanged(Java.Lang.String arg0, int arg1, Android.Os.Bundle arg2)
        {
            IExecute("onStatusChanged", arg0, arg1, arg2);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.8.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Location
{
    #region Geocoder
    public partial class Geocoder
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/Geocoder.html#%3Cinit%3E(android.content.Context,java.util.Locale)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Java.Util.Locale"/></param>
        public Geocoder(Android.Content.Context arg0, Java.Util.Locale arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/Geocoder.html#%3Cinit%3E(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        public Geocoder(Android.Content.Context arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/Geocoder.html#isPresent()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public static bool IsPresent()
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isPresent", "()Z");
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/Geocoder.html#getFromLocation(double,double,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="double"/></param>
        /// <param name="arg1"><see cref="double"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        [global::System.Obsolete()]
        public Java.Util.List<Android.Location.Address> GetFromLocation(double arg0, double arg1, int arg2)
        {
            return IExecute<Java.Util.List<Android.Location.Address>>("getFromLocation", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/Geocoder.html#getFromLocationName(java.lang.String,int,double,double,double,double)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="double"/></param>
        /// <param name="arg3"><see cref="double"/></param>
        /// <param name="arg4"><see cref="double"/></param>
        /// <param name="arg5"><see cref="double"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        [global::System.Obsolete()]
        public Java.Util.List<Android.Location.Address> GetFromLocationName(Java.Lang.String arg0, int arg1, double arg2, double arg3, double arg4, double arg5)
        {
            return IExecute<Java.Util.List<Android.Location.Address>>("getFromLocationName", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/Geocoder.html#getFromLocationName(java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        [global::System.Obsolete()]
        public Java.Util.List<Android.Location.Address> GetFromLocationName(Java.Lang.String arg0, int arg1)
        {
            return IExecute<Java.Util.List<Android.Location.Address>>("getFromLocationName", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/Geocoder.html#getFromLocation(double,double,int,android.location.Geocoder.GeocodeListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="double"/></param>
        /// <param name="arg1"><see cref="double"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Android.Location.Geocoder.GeocodeListener"/></param>
        public void GetFromLocation(double arg0, double arg1, int arg2, Android.Location.Geocoder.GeocodeListener arg3)
        {
            IExecute("getFromLocation", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/Geocoder.html#getFromLocationName(java.lang.String,int,android.location.Geocoder.GeocodeListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Location.Geocoder.GeocodeListener"/></param>
        public void GetFromLocationName(Java.Lang.String arg0, int arg1, Android.Location.Geocoder.GeocodeListener arg2)
        {
            IExecute("getFromLocationName", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/location/Geocoder.html#getFromLocationName(java.lang.String,int,double,double,double,double,android.location.Geocoder.GeocodeListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="double"/></param>
        /// <param name="arg3"><see cref="double"/></param>
        /// <param name="arg4"><see cref="double"/></param>
        /// <param name="arg5"><see cref="double"/></param>
        /// <param name="arg6"><see cref="Android.Location.Geocoder.GeocodeListener"/></param>
        public void GetFromLocationName(Java.Lang.String arg0, int arg1, double arg2, double arg3, double arg4, double arg5, Android.Location.Geocoder.GeocodeListener arg6)
        {
            IExecute("getFromLocationName", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }

        #endregion

        #region Nested classes
        #region GeocodeListener
        public partial class GeocodeListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="GeocodeListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onGeocode", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Java.Util.List<Android.Location.Address>>>>(OnGeocodeEventHandler));
                AddEventHandler("onError", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Java.Lang.String>>>(OnErrorEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/location/Geocoder.GeocodeListener.html#onGeocode(java.util.List)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnGeocode"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Java.Util.List<Android.Location.Address>> OnOnGeocode { get; set; } = null;

            void OnGeocodeEventHandler(object sender, CLRListenerEventArgs<CLREventData<Java.Util.List<Android.Location.Address>>> data)
            {
                var methodToExecute = (OnOnGeocode != null) ? OnOnGeocode : OnGeocode;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/location/Geocoder.GeocodeListener.html#onGeocode(java.util.List)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.List"/></param>
            public virtual void OnGeocode(Java.Util.List<Android.Location.Address> arg0)
            {
                
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/location/Geocoder.GeocodeListener.html#onError(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface</remarks>
            public void OnErrorDefault(Java.Lang.String arg0)
            {
                IExecuteWithSignature("onErrorDefault", "(Ljava/lang/String;)V", arg0);
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/location/Geocoder.GeocodeListener.html#onError(java.lang.String)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnError"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Java.Lang.String> OnOnError { get; set; } = null;

            void OnErrorEventHandler(object sender, CLRListenerEventArgs<CLREventData<Java.Lang.String>> data)
            {
                var methodToExecute = (OnOnError != null) ? OnOnError : OnError;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/location/Geocoder.GeocodeListener.html#onError(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface using <see cref="OnErrorDefault"/>; override the method to implement a different behavior</remarks>
            public virtual void OnError(Java.Lang.String arg0)
            {
                OnErrorDefault(arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region GeocodeListenerDirect
        public partial class GeocodeListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/location/Geocoder.GeocodeListener.html#onGeocode(java.util.List)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.List"/></param>
            public override void OnGeocode(Java.Util.List<Android.Location.Address> arg0)
            {
                IExecuteWithSignature("onGeocode", "(Ljava/util/List;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/location/Geocoder.GeocodeListener.html#onError(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            public override void OnError(Java.Lang.String arg0)
            {
                IExecuteWithSignature("onError", "(Ljava/lang/String;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.5.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android
{
    #region Manifest
    public partial class Manifest
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes
        #region permission
        public partial class permission
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#ACCEPT_HANDOVER"/>
            /// </summary>
            public static Java.Lang.String ACCEPT_HANDOVER { get { if (!_ACCEPT_HANDOVERReady) { _ACCEPT_HANDOVERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACCEPT_HANDOVER"); _ACCEPT_HANDOVERReady = true; } return _ACCEPT_HANDOVERContent; } }
            private static Java.Lang.String _ACCEPT_HANDOVERContent = default;
            private static bool _ACCEPT_HANDOVERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#ACCESS_BACKGROUND_LOCATION"/>
            /// </summary>
            public static Java.Lang.String ACCESS_BACKGROUND_LOCATION { get { if (!_ACCESS_BACKGROUND_LOCATIONReady) { _ACCESS_BACKGROUND_LOCATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACCESS_BACKGROUND_LOCATION"); _ACCESS_BACKGROUND_LOCATIONReady = true; } return _ACCESS_BACKGROUND_LOCATIONContent; } }
            private static Java.Lang.String _ACCESS_BACKGROUND_LOCATIONContent = default;
            private static bool _ACCESS_BACKGROUND_LOCATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#ACCESS_BLOBS_ACROSS_USERS"/>
            /// </summary>
            public static Java.Lang.String ACCESS_BLOBS_ACROSS_USERS { get { if (!_ACCESS_BLOBS_ACROSS_USERSReady) { _ACCESS_BLOBS_ACROSS_USERSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACCESS_BLOBS_ACROSS_USERS"); _ACCESS_BLOBS_ACROSS_USERSReady = true; } return _ACCESS_BLOBS_ACROSS_USERSContent; } }
            private static Java.Lang.String _ACCESS_BLOBS_ACROSS_USERSContent = default;
            private static bool _ACCESS_BLOBS_ACROSS_USERSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#ACCESS_CHECKIN_PROPERTIES"/>
            /// </summary>
            public static Java.Lang.String ACCESS_CHECKIN_PROPERTIES { get { if (!_ACCESS_CHECKIN_PROPERTIESReady) { _ACCESS_CHECKIN_PROPERTIESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACCESS_CHECKIN_PROPERTIES"); _ACCESS_CHECKIN_PROPERTIESReady = true; } return _ACCESS_CHECKIN_PROPERTIESContent; } }
            private static Java.Lang.String _ACCESS_CHECKIN_PROPERTIESContent = default;
            private static bool _ACCESS_CHECKIN_PROPERTIESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#ACCESS_COARSE_LOCATION"/>
            /// </summary>
            public static Java.Lang.String ACCESS_COARSE_LOCATION { get { if (!_ACCESS_COARSE_LOCATIONReady) { _ACCESS_COARSE_LOCATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACCESS_COARSE_LOCATION"); _ACCESS_COARSE_LOCATIONReady = true; } return _ACCESS_COARSE_LOCATIONContent; } }
            private static Java.Lang.String _ACCESS_COARSE_LOCATIONContent = default;
            private static bool _ACCESS_COARSE_LOCATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#ACCESS_FINE_LOCATION"/>
            /// </summary>
            public static Java.Lang.String ACCESS_FINE_LOCATION { get { if (!_ACCESS_FINE_LOCATIONReady) { _ACCESS_FINE_LOCATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACCESS_FINE_LOCATION"); _ACCESS_FINE_LOCATIONReady = true; } return _ACCESS_FINE_LOCATIONContent; } }
            private static Java.Lang.String _ACCESS_FINE_LOCATIONContent = default;
            private static bool _ACCESS_FINE_LOCATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#ACCESS_HIDDEN_PROFILES"/>
            /// </summary>
            public static Java.Lang.String ACCESS_HIDDEN_PROFILES { get { if (!_ACCESS_HIDDEN_PROFILESReady) { _ACCESS_HIDDEN_PROFILESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACCESS_HIDDEN_PROFILES"); _ACCESS_HIDDEN_PROFILESReady = true; } return _ACCESS_HIDDEN_PROFILESContent; } }
            private static Java.Lang.String _ACCESS_HIDDEN_PROFILESContent = default;
            private static bool _ACCESS_HIDDEN_PROFILESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#ACCESS_LOCATION_EXTRA_COMMANDS"/>
            /// </summary>
            public static Java.Lang.String ACCESS_LOCATION_EXTRA_COMMANDS { get { if (!_ACCESS_LOCATION_EXTRA_COMMANDSReady) { _ACCESS_LOCATION_EXTRA_COMMANDSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACCESS_LOCATION_EXTRA_COMMANDS"); _ACCESS_LOCATION_EXTRA_COMMANDSReady = true; } return _ACCESS_LOCATION_EXTRA_COMMANDSContent; } }
            private static Java.Lang.String _ACCESS_LOCATION_EXTRA_COMMANDSContent = default;
            private static bool _ACCESS_LOCATION_EXTRA_COMMANDSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#ACCESS_MEDIA_LOCATION"/>
            /// </summary>
            public static Java.Lang.String ACCESS_MEDIA_LOCATION { get { if (!_ACCESS_MEDIA_LOCATIONReady) { _ACCESS_MEDIA_LOCATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACCESS_MEDIA_LOCATION"); _ACCESS_MEDIA_LOCATIONReady = true; } return _ACCESS_MEDIA_LOCATIONContent; } }
            private static Java.Lang.String _ACCESS_MEDIA_LOCATIONContent = default;
            private static bool _ACCESS_MEDIA_LOCATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#ACCESS_NETWORK_STATE"/>
            /// </summary>
            public static Java.Lang.String ACCESS_NETWORK_STATE { get { if (!_ACCESS_NETWORK_STATEReady) { _ACCESS_NETWORK_STATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACCESS_NETWORK_STATE"); _ACCESS_NETWORK_STATEReady = true; } return _ACCESS_NETWORK_STATEContent; } }
            private static Java.Lang.String _ACCESS_NETWORK_STATEContent = default;
            private static bool _ACCESS_NETWORK_STATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#ACCESS_NOTIFICATION_POLICY"/>
            /// </summary>
            public static Java.Lang.String ACCESS_NOTIFICATION_POLICY { get { if (!_ACCESS_NOTIFICATION_POLICYReady) { _ACCESS_NOTIFICATION_POLICYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACCESS_NOTIFICATION_POLICY"); _ACCESS_NOTIFICATION_POLICYReady = true; } return _ACCESS_NOTIFICATION_POLICYContent; } }
            private static Java.Lang.String _ACCESS_NOTIFICATION_POLICYContent = default;
            private static bool _ACCESS_NOTIFICATION_POLICYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#ACCESS_WIFI_STATE"/>
            /// </summary>
            public static Java.Lang.String ACCESS_WIFI_STATE { get { if (!_ACCESS_WIFI_STATEReady) { _ACCESS_WIFI_STATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACCESS_WIFI_STATE"); _ACCESS_WIFI_STATEReady = true; } return _ACCESS_WIFI_STATEContent; } }
            private static Java.Lang.String _ACCESS_WIFI_STATEContent = default;
            private static bool _ACCESS_WIFI_STATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#ACCOUNT_MANAGER"/>
            /// </summary>
            public static Java.Lang.String ACCOUNT_MANAGER { get { if (!_ACCOUNT_MANAGERReady) { _ACCOUNT_MANAGERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACCOUNT_MANAGER"); _ACCOUNT_MANAGERReady = true; } return _ACCOUNT_MANAGERContent; } }
            private static Java.Lang.String _ACCOUNT_MANAGERContent = default;
            private static bool _ACCOUNT_MANAGERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#ACTIVITY_RECOGNITION"/>
            /// </summary>
            public static Java.Lang.String ACTIVITY_RECOGNITION { get { if (!_ACTIVITY_RECOGNITIONReady) { _ACTIVITY_RECOGNITIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTIVITY_RECOGNITION"); _ACTIVITY_RECOGNITIONReady = true; } return _ACTIVITY_RECOGNITIONContent; } }
            private static Java.Lang.String _ACTIVITY_RECOGNITIONContent = default;
            private static bool _ACTIVITY_RECOGNITIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#ADD_VOICEMAIL"/>
            /// </summary>
            public static Java.Lang.String ADD_VOICEMAIL { get { if (!_ADD_VOICEMAILReady) { _ADD_VOICEMAILContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ADD_VOICEMAIL"); _ADD_VOICEMAILReady = true; } return _ADD_VOICEMAILContent; } }
            private static Java.Lang.String _ADD_VOICEMAILContent = default;
            private static bool _ADD_VOICEMAILReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#ANSWER_PHONE_CALLS"/>
            /// </summary>
            public static Java.Lang.String ANSWER_PHONE_CALLS { get { if (!_ANSWER_PHONE_CALLSReady) { _ANSWER_PHONE_CALLSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ANSWER_PHONE_CALLS"); _ANSWER_PHONE_CALLSReady = true; } return _ANSWER_PHONE_CALLSContent; } }
            private static Java.Lang.String _ANSWER_PHONE_CALLSContent = default;
            private static bool _ANSWER_PHONE_CALLSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BATTERY_STATS"/>
            /// </summary>
            public static Java.Lang.String BATTERY_STATS { get { if (!_BATTERY_STATSReady) { _BATTERY_STATSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BATTERY_STATS"); _BATTERY_STATSReady = true; } return _BATTERY_STATSContent; } }
            private static Java.Lang.String _BATTERY_STATSContent = default;
            private static bool _BATTERY_STATSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_ACCESSIBILITY_SERVICE"/>
            /// </summary>
            public static Java.Lang.String BIND_ACCESSIBILITY_SERVICE { get { if (!_BIND_ACCESSIBILITY_SERVICEReady) { _BIND_ACCESSIBILITY_SERVICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BIND_ACCESSIBILITY_SERVICE"); _BIND_ACCESSIBILITY_SERVICEReady = true; } return _BIND_ACCESSIBILITY_SERVICEContent; } }
            private static Java.Lang.String _BIND_ACCESSIBILITY_SERVICEContent = default;
            private static bool _BIND_ACCESSIBILITY_SERVICEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_APPWIDGET"/>
            /// </summary>
            public static Java.Lang.String BIND_APPWIDGET { get { if (!_BIND_APPWIDGETReady) { _BIND_APPWIDGETContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BIND_APPWIDGET"); _BIND_APPWIDGETReady = true; } return _BIND_APPWIDGETContent; } }
            private static Java.Lang.String _BIND_APPWIDGETContent = default;
            private static bool _BIND_APPWIDGETReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_AUTOFILL_SERVICE"/>
            /// </summary>
            public static Java.Lang.String BIND_AUTOFILL_SERVICE { get { if (!_BIND_AUTOFILL_SERVICEReady) { _BIND_AUTOFILL_SERVICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BIND_AUTOFILL_SERVICE"); _BIND_AUTOFILL_SERVICEReady = true; } return _BIND_AUTOFILL_SERVICEContent; } }
            private static Java.Lang.String _BIND_AUTOFILL_SERVICEContent = default;
            private static bool _BIND_AUTOFILL_SERVICEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_CALL_REDIRECTION_SERVICE"/>
            /// </summary>
            public static Java.Lang.String BIND_CALL_REDIRECTION_SERVICE { get { if (!_BIND_CALL_REDIRECTION_SERVICEReady) { _BIND_CALL_REDIRECTION_SERVICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BIND_CALL_REDIRECTION_SERVICE"); _BIND_CALL_REDIRECTION_SERVICEReady = true; } return _BIND_CALL_REDIRECTION_SERVICEContent; } }
            private static Java.Lang.String _BIND_CALL_REDIRECTION_SERVICEContent = default;
            private static bool _BIND_CALL_REDIRECTION_SERVICEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_CARRIER_MESSAGING_CLIENT_SERVICE"/>
            /// </summary>
            public static Java.Lang.String BIND_CARRIER_MESSAGING_CLIENT_SERVICE { get { if (!_BIND_CARRIER_MESSAGING_CLIENT_SERVICEReady) { _BIND_CARRIER_MESSAGING_CLIENT_SERVICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BIND_CARRIER_MESSAGING_CLIENT_SERVICE"); _BIND_CARRIER_MESSAGING_CLIENT_SERVICEReady = true; } return _BIND_CARRIER_MESSAGING_CLIENT_SERVICEContent; } }
            private static Java.Lang.String _BIND_CARRIER_MESSAGING_CLIENT_SERVICEContent = default;
            private static bool _BIND_CARRIER_MESSAGING_CLIENT_SERVICEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_CARRIER_MESSAGING_SERVICE"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String BIND_CARRIER_MESSAGING_SERVICE { get { if (!_BIND_CARRIER_MESSAGING_SERVICEReady) { _BIND_CARRIER_MESSAGING_SERVICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BIND_CARRIER_MESSAGING_SERVICE"); _BIND_CARRIER_MESSAGING_SERVICEReady = true; } return _BIND_CARRIER_MESSAGING_SERVICEContent; } }
            private static Java.Lang.String _BIND_CARRIER_MESSAGING_SERVICEContent = default;
            private static bool _BIND_CARRIER_MESSAGING_SERVICEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_CARRIER_SERVICES"/>
            /// </summary>
            public static Java.Lang.String BIND_CARRIER_SERVICES { get { if (!_BIND_CARRIER_SERVICESReady) { _BIND_CARRIER_SERVICESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BIND_CARRIER_SERVICES"); _BIND_CARRIER_SERVICESReady = true; } return _BIND_CARRIER_SERVICESContent; } }
            private static Java.Lang.String _BIND_CARRIER_SERVICESContent = default;
            private static bool _BIND_CARRIER_SERVICESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_CHOOSER_TARGET_SERVICE"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String BIND_CHOOSER_TARGET_SERVICE { get { if (!_BIND_CHOOSER_TARGET_SERVICEReady) { _BIND_CHOOSER_TARGET_SERVICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BIND_CHOOSER_TARGET_SERVICE"); _BIND_CHOOSER_TARGET_SERVICEReady = true; } return _BIND_CHOOSER_TARGET_SERVICEContent; } }
            private static Java.Lang.String _BIND_CHOOSER_TARGET_SERVICEContent = default;
            private static bool _BIND_CHOOSER_TARGET_SERVICEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_COMPANION_DEVICE_SERVICE"/>
            /// </summary>
            public static Java.Lang.String BIND_COMPANION_DEVICE_SERVICE { get { if (!_BIND_COMPANION_DEVICE_SERVICEReady) { _BIND_COMPANION_DEVICE_SERVICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BIND_COMPANION_DEVICE_SERVICE"); _BIND_COMPANION_DEVICE_SERVICEReady = true; } return _BIND_COMPANION_DEVICE_SERVICEContent; } }
            private static Java.Lang.String _BIND_COMPANION_DEVICE_SERVICEContent = default;
            private static bool _BIND_COMPANION_DEVICE_SERVICEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_CONDITION_PROVIDER_SERVICE"/>
            /// </summary>
            public static Java.Lang.String BIND_CONDITION_PROVIDER_SERVICE { get { if (!_BIND_CONDITION_PROVIDER_SERVICEReady) { _BIND_CONDITION_PROVIDER_SERVICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BIND_CONDITION_PROVIDER_SERVICE"); _BIND_CONDITION_PROVIDER_SERVICEReady = true; } return _BIND_CONDITION_PROVIDER_SERVICEContent; } }
            private static Java.Lang.String _BIND_CONDITION_PROVIDER_SERVICEContent = default;
            private static bool _BIND_CONDITION_PROVIDER_SERVICEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_CONTROLS"/>
            /// </summary>
            public static Java.Lang.String BIND_CONTROLS { get { if (!_BIND_CONTROLSReady) { _BIND_CONTROLSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BIND_CONTROLS"); _BIND_CONTROLSReady = true; } return _BIND_CONTROLSContent; } }
            private static Java.Lang.String _BIND_CONTROLSContent = default;
            private static bool _BIND_CONTROLSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_CREDENTIAL_PROVIDER_SERVICE"/>
            /// </summary>
            public static Java.Lang.String BIND_CREDENTIAL_PROVIDER_SERVICE { get { if (!_BIND_CREDENTIAL_PROVIDER_SERVICEReady) { _BIND_CREDENTIAL_PROVIDER_SERVICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BIND_CREDENTIAL_PROVIDER_SERVICE"); _BIND_CREDENTIAL_PROVIDER_SERVICEReady = true; } return _BIND_CREDENTIAL_PROVIDER_SERVICEContent; } }
            private static Java.Lang.String _BIND_CREDENTIAL_PROVIDER_SERVICEContent = default;
            private static bool _BIND_CREDENTIAL_PROVIDER_SERVICEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_DEVICE_ADMIN"/>
            /// </summary>
            public static Java.Lang.String BIND_DEVICE_ADMIN { get { if (!_BIND_DEVICE_ADMINReady) { _BIND_DEVICE_ADMINContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BIND_DEVICE_ADMIN"); _BIND_DEVICE_ADMINReady = true; } return _BIND_DEVICE_ADMINContent; } }
            private static Java.Lang.String _BIND_DEVICE_ADMINContent = default;
            private static bool _BIND_DEVICE_ADMINReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_DREAM_SERVICE"/>
            /// </summary>
            public static Java.Lang.String BIND_DREAM_SERVICE { get { if (!_BIND_DREAM_SERVICEReady) { _BIND_DREAM_SERVICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BIND_DREAM_SERVICE"); _BIND_DREAM_SERVICEReady = true; } return _BIND_DREAM_SERVICEContent; } }
            private static Java.Lang.String _BIND_DREAM_SERVICEContent = default;
            private static bool _BIND_DREAM_SERVICEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_INCALL_SERVICE"/>
            /// </summary>
            public static Java.Lang.String BIND_INCALL_SERVICE { get { if (!_BIND_INCALL_SERVICEReady) { _BIND_INCALL_SERVICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BIND_INCALL_SERVICE"); _BIND_INCALL_SERVICEReady = true; } return _BIND_INCALL_SERVICEContent; } }
            private static Java.Lang.String _BIND_INCALL_SERVICEContent = default;
            private static bool _BIND_INCALL_SERVICEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_INPUT_METHOD"/>
            /// </summary>
            public static Java.Lang.String BIND_INPUT_METHOD { get { if (!_BIND_INPUT_METHODReady) { _BIND_INPUT_METHODContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BIND_INPUT_METHOD"); _BIND_INPUT_METHODReady = true; } return _BIND_INPUT_METHODContent; } }
            private static Java.Lang.String _BIND_INPUT_METHODContent = default;
            private static bool _BIND_INPUT_METHODReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_MIDI_DEVICE_SERVICE"/>
            /// </summary>
            public static Java.Lang.String BIND_MIDI_DEVICE_SERVICE { get { if (!_BIND_MIDI_DEVICE_SERVICEReady) { _BIND_MIDI_DEVICE_SERVICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BIND_MIDI_DEVICE_SERVICE"); _BIND_MIDI_DEVICE_SERVICEReady = true; } return _BIND_MIDI_DEVICE_SERVICEContent; } }
            private static Java.Lang.String _BIND_MIDI_DEVICE_SERVICEContent = default;
            private static bool _BIND_MIDI_DEVICE_SERVICEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_NFC_SERVICE"/>
            /// </summary>
            public static Java.Lang.String BIND_NFC_SERVICE { get { if (!_BIND_NFC_SERVICEReady) { _BIND_NFC_SERVICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BIND_NFC_SERVICE"); _BIND_NFC_SERVICEReady = true; } return _BIND_NFC_SERVICEContent; } }
            private static Java.Lang.String _BIND_NFC_SERVICEContent = default;
            private static bool _BIND_NFC_SERVICEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_NOTIFICATION_LISTENER_SERVICE"/>
            /// </summary>
            public static Java.Lang.String BIND_NOTIFICATION_LISTENER_SERVICE { get { if (!_BIND_NOTIFICATION_LISTENER_SERVICEReady) { _BIND_NOTIFICATION_LISTENER_SERVICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BIND_NOTIFICATION_LISTENER_SERVICE"); _BIND_NOTIFICATION_LISTENER_SERVICEReady = true; } return _BIND_NOTIFICATION_LISTENER_SERVICEContent; } }
            private static Java.Lang.String _BIND_NOTIFICATION_LISTENER_SERVICEContent = default;
            private static bool _BIND_NOTIFICATION_LISTENER_SERVICEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_PRINT_SERVICE"/>
            /// </summary>
            public static Java.Lang.String BIND_PRINT_SERVICE { get { if (!_BIND_PRINT_SERVICEReady) { _BIND_PRINT_SERVICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BIND_PRINT_SERVICE"); _BIND_PRINT_SERVICEReady = true; } return _BIND_PRINT_SERVICEContent; } }
            private static Java.Lang.String _BIND_PRINT_SERVICEContent = default;
            private static bool _BIND_PRINT_SERVICEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_QUICK_ACCESS_WALLET_SERVICE"/>
            /// </summary>
            public static Java.Lang.String BIND_QUICK_ACCESS_WALLET_SERVICE { get { if (!_BIND_QUICK_ACCESS_WALLET_SERVICEReady) { _BIND_QUICK_ACCESS_WALLET_SERVICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BIND_QUICK_ACCESS_WALLET_SERVICE"); _BIND_QUICK_ACCESS_WALLET_SERVICEReady = true; } return _BIND_QUICK_ACCESS_WALLET_SERVICEContent; } }
            private static Java.Lang.String _BIND_QUICK_ACCESS_WALLET_SERVICEContent = default;
            private static bool _BIND_QUICK_ACCESS_WALLET_SERVICEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_QUICK_SETTINGS_TILE"/>
            /// </summary>
            public static Java.Lang.String BIND_QUICK_SETTINGS_TILE { get { if (!_BIND_QUICK_SETTINGS_TILEReady) { _BIND_QUICK_SETTINGS_TILEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BIND_QUICK_SETTINGS_TILE"); _BIND_QUICK_SETTINGS_TILEReady = true; } return _BIND_QUICK_SETTINGS_TILEContent; } }
            private static Java.Lang.String _BIND_QUICK_SETTINGS_TILEContent = default;
            private static bool _BIND_QUICK_SETTINGS_TILEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_REMOTEVIEWS"/>
            /// </summary>
            public static Java.Lang.String BIND_REMOTEVIEWS { get { if (!_BIND_REMOTEVIEWSReady) { _BIND_REMOTEVIEWSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BIND_REMOTEVIEWS"); _BIND_REMOTEVIEWSReady = true; } return _BIND_REMOTEVIEWSContent; } }
            private static Java.Lang.String _BIND_REMOTEVIEWSContent = default;
            private static bool _BIND_REMOTEVIEWSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_SCREENING_SERVICE"/>
            /// </summary>
            public static Java.Lang.String BIND_SCREENING_SERVICE { get { if (!_BIND_SCREENING_SERVICEReady) { _BIND_SCREENING_SERVICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BIND_SCREENING_SERVICE"); _BIND_SCREENING_SERVICEReady = true; } return _BIND_SCREENING_SERVICEContent; } }
            private static Java.Lang.String _BIND_SCREENING_SERVICEContent = default;
            private static bool _BIND_SCREENING_SERVICEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_TELECOM_CONNECTION_SERVICE"/>
            /// </summary>
            public static Java.Lang.String BIND_TELECOM_CONNECTION_SERVICE { get { if (!_BIND_TELECOM_CONNECTION_SERVICEReady) { _BIND_TELECOM_CONNECTION_SERVICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BIND_TELECOM_CONNECTION_SERVICE"); _BIND_TELECOM_CONNECTION_SERVICEReady = true; } return _BIND_TELECOM_CONNECTION_SERVICEContent; } }
            private static Java.Lang.String _BIND_TELECOM_CONNECTION_SERVICEContent = default;
            private static bool _BIND_TELECOM_CONNECTION_SERVICEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_TEXT_SERVICE"/>
            /// </summary>
            public static Java.Lang.String BIND_TEXT_SERVICE { get { if (!_BIND_TEXT_SERVICEReady) { _BIND_TEXT_SERVICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BIND_TEXT_SERVICE"); _BIND_TEXT_SERVICEReady = true; } return _BIND_TEXT_SERVICEContent; } }
            private static Java.Lang.String _BIND_TEXT_SERVICEContent = default;
            private static bool _BIND_TEXT_SERVICEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_TV_INPUT"/>
            /// </summary>
            public static Java.Lang.String BIND_TV_INPUT { get { if (!_BIND_TV_INPUTReady) { _BIND_TV_INPUTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BIND_TV_INPUT"); _BIND_TV_INPUTReady = true; } return _BIND_TV_INPUTContent; } }
            private static Java.Lang.String _BIND_TV_INPUTContent = default;
            private static bool _BIND_TV_INPUTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_TV_INTERACTIVE_APP"/>
            /// </summary>
            public static Java.Lang.String BIND_TV_INTERACTIVE_APP { get { if (!_BIND_TV_INTERACTIVE_APPReady) { _BIND_TV_INTERACTIVE_APPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BIND_TV_INTERACTIVE_APP"); _BIND_TV_INTERACTIVE_APPReady = true; } return _BIND_TV_INTERACTIVE_APPContent; } }
            private static Java.Lang.String _BIND_TV_INTERACTIVE_APPContent = default;
            private static bool _BIND_TV_INTERACTIVE_APPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_VISUAL_VOICEMAIL_SERVICE"/>
            /// </summary>
            public static Java.Lang.String BIND_VISUAL_VOICEMAIL_SERVICE { get { if (!_BIND_VISUAL_VOICEMAIL_SERVICEReady) { _BIND_VISUAL_VOICEMAIL_SERVICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BIND_VISUAL_VOICEMAIL_SERVICE"); _BIND_VISUAL_VOICEMAIL_SERVICEReady = true; } return _BIND_VISUAL_VOICEMAIL_SERVICEContent; } }
            private static Java.Lang.String _BIND_VISUAL_VOICEMAIL_SERVICEContent = default;
            private static bool _BIND_VISUAL_VOICEMAIL_SERVICEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_VOICE_INTERACTION"/>
            /// </summary>
            public static Java.Lang.String BIND_VOICE_INTERACTION { get { if (!_BIND_VOICE_INTERACTIONReady) { _BIND_VOICE_INTERACTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BIND_VOICE_INTERACTION"); _BIND_VOICE_INTERACTIONReady = true; } return _BIND_VOICE_INTERACTIONContent; } }
            private static Java.Lang.String _BIND_VOICE_INTERACTIONContent = default;
            private static bool _BIND_VOICE_INTERACTIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_VPN_SERVICE"/>
            /// </summary>
            public static Java.Lang.String BIND_VPN_SERVICE { get { if (!_BIND_VPN_SERVICEReady) { _BIND_VPN_SERVICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BIND_VPN_SERVICE"); _BIND_VPN_SERVICEReady = true; } return _BIND_VPN_SERVICEContent; } }
            private static Java.Lang.String _BIND_VPN_SERVICEContent = default;
            private static bool _BIND_VPN_SERVICEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_VR_LISTENER_SERVICE"/>
            /// </summary>
            public static Java.Lang.String BIND_VR_LISTENER_SERVICE { get { if (!_BIND_VR_LISTENER_SERVICEReady) { _BIND_VR_LISTENER_SERVICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BIND_VR_LISTENER_SERVICE"); _BIND_VR_LISTENER_SERVICEReady = true; } return _BIND_VR_LISTENER_SERVICEContent; } }
            private static Java.Lang.String _BIND_VR_LISTENER_SERVICEContent = default;
            private static bool _BIND_VR_LISTENER_SERVICEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_WALLPAPER"/>
            /// </summary>
            public static Java.Lang.String BIND_WALLPAPER { get { if (!_BIND_WALLPAPERReady) { _BIND_WALLPAPERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BIND_WALLPAPER"); _BIND_WALLPAPERReady = true; } return _BIND_WALLPAPERContent; } }
            private static Java.Lang.String _BIND_WALLPAPERContent = default;
            private static bool _BIND_WALLPAPERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BLUETOOTH"/>
            /// </summary>
            public static Java.Lang.String BLUETOOTH { get { if (!_BLUETOOTHReady) { _BLUETOOTHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BLUETOOTH"); _BLUETOOTHReady = true; } return _BLUETOOTHContent; } }
            private static Java.Lang.String _BLUETOOTHContent = default;
            private static bool _BLUETOOTHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BLUETOOTH_ADMIN"/>
            /// </summary>
            public static Java.Lang.String BLUETOOTH_ADMIN { get { if (!_BLUETOOTH_ADMINReady) { _BLUETOOTH_ADMINContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BLUETOOTH_ADMIN"); _BLUETOOTH_ADMINReady = true; } return _BLUETOOTH_ADMINContent; } }
            private static Java.Lang.String _BLUETOOTH_ADMINContent = default;
            private static bool _BLUETOOTH_ADMINReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BLUETOOTH_ADVERTISE"/>
            /// </summary>
            public static Java.Lang.String BLUETOOTH_ADVERTISE { get { if (!_BLUETOOTH_ADVERTISEReady) { _BLUETOOTH_ADVERTISEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BLUETOOTH_ADVERTISE"); _BLUETOOTH_ADVERTISEReady = true; } return _BLUETOOTH_ADVERTISEContent; } }
            private static Java.Lang.String _BLUETOOTH_ADVERTISEContent = default;
            private static bool _BLUETOOTH_ADVERTISEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BLUETOOTH_CONNECT"/>
            /// </summary>
            public static Java.Lang.String BLUETOOTH_CONNECT { get { if (!_BLUETOOTH_CONNECTReady) { _BLUETOOTH_CONNECTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BLUETOOTH_CONNECT"); _BLUETOOTH_CONNECTReady = true; } return _BLUETOOTH_CONNECTContent; } }
            private static Java.Lang.String _BLUETOOTH_CONNECTContent = default;
            private static bool _BLUETOOTH_CONNECTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BLUETOOTH_PRIVILEGED"/>
            /// </summary>
            public static Java.Lang.String BLUETOOTH_PRIVILEGED { get { if (!_BLUETOOTH_PRIVILEGEDReady) { _BLUETOOTH_PRIVILEGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BLUETOOTH_PRIVILEGED"); _BLUETOOTH_PRIVILEGEDReady = true; } return _BLUETOOTH_PRIVILEGEDContent; } }
            private static Java.Lang.String _BLUETOOTH_PRIVILEGEDContent = default;
            private static bool _BLUETOOTH_PRIVILEGEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BLUETOOTH_SCAN"/>
            /// </summary>
            public static Java.Lang.String BLUETOOTH_SCAN { get { if (!_BLUETOOTH_SCANReady) { _BLUETOOTH_SCANContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BLUETOOTH_SCAN"); _BLUETOOTH_SCANReady = true; } return _BLUETOOTH_SCANContent; } }
            private static Java.Lang.String _BLUETOOTH_SCANContent = default;
            private static bool _BLUETOOTH_SCANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BODY_SENSORS"/>
            /// </summary>
            public static Java.Lang.String BODY_SENSORS { get { if (!_BODY_SENSORSReady) { _BODY_SENSORSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BODY_SENSORS"); _BODY_SENSORSReady = true; } return _BODY_SENSORSContent; } }
            private static Java.Lang.String _BODY_SENSORSContent = default;
            private static bool _BODY_SENSORSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BODY_SENSORS_BACKGROUND"/>
            /// </summary>
            public static Java.Lang.String BODY_SENSORS_BACKGROUND { get { if (!_BODY_SENSORS_BACKGROUNDReady) { _BODY_SENSORS_BACKGROUNDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BODY_SENSORS_BACKGROUND"); _BODY_SENSORS_BACKGROUNDReady = true; } return _BODY_SENSORS_BACKGROUNDContent; } }
            private static Java.Lang.String _BODY_SENSORS_BACKGROUNDContent = default;
            private static bool _BODY_SENSORS_BACKGROUNDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BROADCAST_PACKAGE_REMOVED"/>
            /// </summary>
            public static Java.Lang.String BROADCAST_PACKAGE_REMOVED { get { if (!_BROADCAST_PACKAGE_REMOVEDReady) { _BROADCAST_PACKAGE_REMOVEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BROADCAST_PACKAGE_REMOVED"); _BROADCAST_PACKAGE_REMOVEDReady = true; } return _BROADCAST_PACKAGE_REMOVEDContent; } }
            private static Java.Lang.String _BROADCAST_PACKAGE_REMOVEDContent = default;
            private static bool _BROADCAST_PACKAGE_REMOVEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BROADCAST_SMS"/>
            /// </summary>
            public static Java.Lang.String BROADCAST_SMS { get { if (!_BROADCAST_SMSReady) { _BROADCAST_SMSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BROADCAST_SMS"); _BROADCAST_SMSReady = true; } return _BROADCAST_SMSContent; } }
            private static Java.Lang.String _BROADCAST_SMSContent = default;
            private static bool _BROADCAST_SMSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BROADCAST_STICKY"/>
            /// </summary>
            public static Java.Lang.String BROADCAST_STICKY { get { if (!_BROADCAST_STICKYReady) { _BROADCAST_STICKYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BROADCAST_STICKY"); _BROADCAST_STICKYReady = true; } return _BROADCAST_STICKYContent; } }
            private static Java.Lang.String _BROADCAST_STICKYContent = default;
            private static bool _BROADCAST_STICKYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#BROADCAST_WAP_PUSH"/>
            /// </summary>
            public static Java.Lang.String BROADCAST_WAP_PUSH { get { if (!_BROADCAST_WAP_PUSHReady) { _BROADCAST_WAP_PUSHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BROADCAST_WAP_PUSH"); _BROADCAST_WAP_PUSHReady = true; } return _BROADCAST_WAP_PUSHContent; } }
            private static Java.Lang.String _BROADCAST_WAP_PUSHContent = default;
            private static bool _BROADCAST_WAP_PUSHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#CALL_COMPANION_APP"/>
            /// </summary>
            public static Java.Lang.String CALL_COMPANION_APP { get { if (!_CALL_COMPANION_APPReady) { _CALL_COMPANION_APPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CALL_COMPANION_APP"); _CALL_COMPANION_APPReady = true; } return _CALL_COMPANION_APPContent; } }
            private static Java.Lang.String _CALL_COMPANION_APPContent = default;
            private static bool _CALL_COMPANION_APPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#CALL_PHONE"/>
            /// </summary>
            public static Java.Lang.String CALL_PHONE { get { if (!_CALL_PHONEReady) { _CALL_PHONEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CALL_PHONE"); _CALL_PHONEReady = true; } return _CALL_PHONEContent; } }
            private static Java.Lang.String _CALL_PHONEContent = default;
            private static bool _CALL_PHONEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#CALL_PRIVILEGED"/>
            /// </summary>
            public static Java.Lang.String CALL_PRIVILEGED { get { if (!_CALL_PRIVILEGEDReady) { _CALL_PRIVILEGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CALL_PRIVILEGED"); _CALL_PRIVILEGEDReady = true; } return _CALL_PRIVILEGEDContent; } }
            private static Java.Lang.String _CALL_PRIVILEGEDContent = default;
            private static bool _CALL_PRIVILEGEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#CAMERA"/>
            /// </summary>
            public static Java.Lang.String CAMERA { get { if (!_CAMERAReady) { _CAMERAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CAMERA"); _CAMERAReady = true; } return _CAMERAContent; } }
            private static Java.Lang.String _CAMERAContent = default;
            private static bool _CAMERAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#CAPTURE_AUDIO_OUTPUT"/>
            /// </summary>
            public static Java.Lang.String CAPTURE_AUDIO_OUTPUT { get { if (!_CAPTURE_AUDIO_OUTPUTReady) { _CAPTURE_AUDIO_OUTPUTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CAPTURE_AUDIO_OUTPUT"); _CAPTURE_AUDIO_OUTPUTReady = true; } return _CAPTURE_AUDIO_OUTPUTContent; } }
            private static Java.Lang.String _CAPTURE_AUDIO_OUTPUTContent = default;
            private static bool _CAPTURE_AUDIO_OUTPUTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#CHANGE_COMPONENT_ENABLED_STATE"/>
            /// </summary>
            public static Java.Lang.String CHANGE_COMPONENT_ENABLED_STATE { get { if (!_CHANGE_COMPONENT_ENABLED_STATEReady) { _CHANGE_COMPONENT_ENABLED_STATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CHANGE_COMPONENT_ENABLED_STATE"); _CHANGE_COMPONENT_ENABLED_STATEReady = true; } return _CHANGE_COMPONENT_ENABLED_STATEContent; } }
            private static Java.Lang.String _CHANGE_COMPONENT_ENABLED_STATEContent = default;
            private static bool _CHANGE_COMPONENT_ENABLED_STATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#CHANGE_CONFIGURATION"/>
            /// </summary>
            public static Java.Lang.String CHANGE_CONFIGURATION { get { if (!_CHANGE_CONFIGURATIONReady) { _CHANGE_CONFIGURATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CHANGE_CONFIGURATION"); _CHANGE_CONFIGURATIONReady = true; } return _CHANGE_CONFIGURATIONContent; } }
            private static Java.Lang.String _CHANGE_CONFIGURATIONContent = default;
            private static bool _CHANGE_CONFIGURATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#CHANGE_NETWORK_STATE"/>
            /// </summary>
            public static Java.Lang.String CHANGE_NETWORK_STATE { get { if (!_CHANGE_NETWORK_STATEReady) { _CHANGE_NETWORK_STATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CHANGE_NETWORK_STATE"); _CHANGE_NETWORK_STATEReady = true; } return _CHANGE_NETWORK_STATEContent; } }
            private static Java.Lang.String _CHANGE_NETWORK_STATEContent = default;
            private static bool _CHANGE_NETWORK_STATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#CHANGE_WIFI_MULTICAST_STATE"/>
            /// </summary>
            public static Java.Lang.String CHANGE_WIFI_MULTICAST_STATE { get { if (!_CHANGE_WIFI_MULTICAST_STATEReady) { _CHANGE_WIFI_MULTICAST_STATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CHANGE_WIFI_MULTICAST_STATE"); _CHANGE_WIFI_MULTICAST_STATEReady = true; } return _CHANGE_WIFI_MULTICAST_STATEContent; } }
            private static Java.Lang.String _CHANGE_WIFI_MULTICAST_STATEContent = default;
            private static bool _CHANGE_WIFI_MULTICAST_STATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#CHANGE_WIFI_STATE"/>
            /// </summary>
            public static Java.Lang.String CHANGE_WIFI_STATE { get { if (!_CHANGE_WIFI_STATEReady) { _CHANGE_WIFI_STATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CHANGE_WIFI_STATE"); _CHANGE_WIFI_STATEReady = true; } return _CHANGE_WIFI_STATEContent; } }
            private static Java.Lang.String _CHANGE_WIFI_STATEContent = default;
            private static bool _CHANGE_WIFI_STATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#CLEAR_APP_CACHE"/>
            /// </summary>
            public static Java.Lang.String CLEAR_APP_CACHE { get { if (!_CLEAR_APP_CACHEReady) { _CLEAR_APP_CACHEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CLEAR_APP_CACHE"); _CLEAR_APP_CACHEReady = true; } return _CLEAR_APP_CACHEContent; } }
            private static Java.Lang.String _CLEAR_APP_CACHEContent = default;
            private static bool _CLEAR_APP_CACHEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#CONFIGURE_WIFI_DISPLAY"/>
            /// </summary>
            public static Java.Lang.String CONFIGURE_WIFI_DISPLAY { get { if (!_CONFIGURE_WIFI_DISPLAYReady) { _CONFIGURE_WIFI_DISPLAYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONFIGURE_WIFI_DISPLAY"); _CONFIGURE_WIFI_DISPLAYReady = true; } return _CONFIGURE_WIFI_DISPLAYContent; } }
            private static Java.Lang.String _CONFIGURE_WIFI_DISPLAYContent = default;
            private static bool _CONFIGURE_WIFI_DISPLAYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#CONTROL_LOCATION_UPDATES"/>
            /// </summary>
            public static Java.Lang.String CONTROL_LOCATION_UPDATES { get { if (!_CONTROL_LOCATION_UPDATESReady) { _CONTROL_LOCATION_UPDATESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTROL_LOCATION_UPDATES"); _CONTROL_LOCATION_UPDATESReady = true; } return _CONTROL_LOCATION_UPDATESContent; } }
            private static Java.Lang.String _CONTROL_LOCATION_UPDATESContent = default;
            private static bool _CONTROL_LOCATION_UPDATESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#CREDENTIAL_MANAGER_QUERY_CANDIDATE_CREDENTIALS"/>
            /// </summary>
            public static Java.Lang.String CREDENTIAL_MANAGER_QUERY_CANDIDATE_CREDENTIALS { get { if (!_CREDENTIAL_MANAGER_QUERY_CANDIDATE_CREDENTIALSReady) { _CREDENTIAL_MANAGER_QUERY_CANDIDATE_CREDENTIALSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CREDENTIAL_MANAGER_QUERY_CANDIDATE_CREDENTIALS"); _CREDENTIAL_MANAGER_QUERY_CANDIDATE_CREDENTIALSReady = true; } return _CREDENTIAL_MANAGER_QUERY_CANDIDATE_CREDENTIALSContent; } }
            private static Java.Lang.String _CREDENTIAL_MANAGER_QUERY_CANDIDATE_CREDENTIALSContent = default;
            private static bool _CREDENTIAL_MANAGER_QUERY_CANDIDATE_CREDENTIALSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#CREDENTIAL_MANAGER_SET_ALLOWED_PROVIDERS"/>
            /// </summary>
            public static Java.Lang.String CREDENTIAL_MANAGER_SET_ALLOWED_PROVIDERS { get { if (!_CREDENTIAL_MANAGER_SET_ALLOWED_PROVIDERSReady) { _CREDENTIAL_MANAGER_SET_ALLOWED_PROVIDERSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CREDENTIAL_MANAGER_SET_ALLOWED_PROVIDERS"); _CREDENTIAL_MANAGER_SET_ALLOWED_PROVIDERSReady = true; } return _CREDENTIAL_MANAGER_SET_ALLOWED_PROVIDERSContent; } }
            private static Java.Lang.String _CREDENTIAL_MANAGER_SET_ALLOWED_PROVIDERSContent = default;
            private static bool _CREDENTIAL_MANAGER_SET_ALLOWED_PROVIDERSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#CREDENTIAL_MANAGER_SET_ORIGIN"/>
            /// </summary>
            public static Java.Lang.String CREDENTIAL_MANAGER_SET_ORIGIN { get { if (!_CREDENTIAL_MANAGER_SET_ORIGINReady) { _CREDENTIAL_MANAGER_SET_ORIGINContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CREDENTIAL_MANAGER_SET_ORIGIN"); _CREDENTIAL_MANAGER_SET_ORIGINReady = true; } return _CREDENTIAL_MANAGER_SET_ORIGINContent; } }
            private static Java.Lang.String _CREDENTIAL_MANAGER_SET_ORIGINContent = default;
            private static bool _CREDENTIAL_MANAGER_SET_ORIGINReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#DELETE_CACHE_FILES"/>
            /// </summary>
            public static Java.Lang.String DELETE_CACHE_FILES { get { if (!_DELETE_CACHE_FILESReady) { _DELETE_CACHE_FILESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DELETE_CACHE_FILES"); _DELETE_CACHE_FILESReady = true; } return _DELETE_CACHE_FILESContent; } }
            private static Java.Lang.String _DELETE_CACHE_FILESContent = default;
            private static bool _DELETE_CACHE_FILESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#DELETE_PACKAGES"/>
            /// </summary>
            public static Java.Lang.String DELETE_PACKAGES { get { if (!_DELETE_PACKAGESReady) { _DELETE_PACKAGESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DELETE_PACKAGES"); _DELETE_PACKAGESReady = true; } return _DELETE_PACKAGESContent; } }
            private static Java.Lang.String _DELETE_PACKAGESContent = default;
            private static bool _DELETE_PACKAGESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#DELIVER_COMPANION_MESSAGES"/>
            /// </summary>
            public static Java.Lang.String DELIVER_COMPANION_MESSAGES { get { if (!_DELIVER_COMPANION_MESSAGESReady) { _DELIVER_COMPANION_MESSAGESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DELIVER_COMPANION_MESSAGES"); _DELIVER_COMPANION_MESSAGESReady = true; } return _DELIVER_COMPANION_MESSAGESContent; } }
            private static Java.Lang.String _DELIVER_COMPANION_MESSAGESContent = default;
            private static bool _DELIVER_COMPANION_MESSAGESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#DETECT_SCREEN_CAPTURE"/>
            /// </summary>
            public static Java.Lang.String DETECT_SCREEN_CAPTURE { get { if (!_DETECT_SCREEN_CAPTUREReady) { _DETECT_SCREEN_CAPTUREContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DETECT_SCREEN_CAPTURE"); _DETECT_SCREEN_CAPTUREReady = true; } return _DETECT_SCREEN_CAPTUREContent; } }
            private static Java.Lang.String _DETECT_SCREEN_CAPTUREContent = default;
            private static bool _DETECT_SCREEN_CAPTUREReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#DETECT_SCREEN_RECORDING"/>
            /// </summary>
            public static Java.Lang.String DETECT_SCREEN_RECORDING { get { if (!_DETECT_SCREEN_RECORDINGReady) { _DETECT_SCREEN_RECORDINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DETECT_SCREEN_RECORDING"); _DETECT_SCREEN_RECORDINGReady = true; } return _DETECT_SCREEN_RECORDINGContent; } }
            private static Java.Lang.String _DETECT_SCREEN_RECORDINGContent = default;
            private static bool _DETECT_SCREEN_RECORDINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#DIAGNOSTIC"/>
            /// </summary>
            public static Java.Lang.String DIAGNOSTIC { get { if (!_DIAGNOSTICReady) { _DIAGNOSTICContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DIAGNOSTIC"); _DIAGNOSTICReady = true; } return _DIAGNOSTICContent; } }
            private static Java.Lang.String _DIAGNOSTICContent = default;
            private static bool _DIAGNOSTICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#DISABLE_KEYGUARD"/>
            /// </summary>
            public static Java.Lang.String DISABLE_KEYGUARD { get { if (!_DISABLE_KEYGUARDReady) { _DISABLE_KEYGUARDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISABLE_KEYGUARD"); _DISABLE_KEYGUARDReady = true; } return _DISABLE_KEYGUARDContent; } }
            private static Java.Lang.String _DISABLE_KEYGUARDContent = default;
            private static bool _DISABLE_KEYGUARDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#DUMP"/>
            /// </summary>
            public static Java.Lang.String DUMP { get { if (!_DUMPReady) { _DUMPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DUMP"); _DUMPReady = true; } return _DUMPContent; } }
            private static Java.Lang.String _DUMPContent = default;
            private static bool _DUMPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#ENFORCE_UPDATE_OWNERSHIP"/>
            /// </summary>
            public static Java.Lang.String ENFORCE_UPDATE_OWNERSHIP { get { if (!_ENFORCE_UPDATE_OWNERSHIPReady) { _ENFORCE_UPDATE_OWNERSHIPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ENFORCE_UPDATE_OWNERSHIP"); _ENFORCE_UPDATE_OWNERSHIPReady = true; } return _ENFORCE_UPDATE_OWNERSHIPContent; } }
            private static Java.Lang.String _ENFORCE_UPDATE_OWNERSHIPContent = default;
            private static bool _ENFORCE_UPDATE_OWNERSHIPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#EXECUTE_APP_ACTION"/>
            /// </summary>
            public static Java.Lang.String EXECUTE_APP_ACTION { get { if (!_EXECUTE_APP_ACTIONReady) { _EXECUTE_APP_ACTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXECUTE_APP_ACTION"); _EXECUTE_APP_ACTIONReady = true; } return _EXECUTE_APP_ACTIONContent; } }
            private static Java.Lang.String _EXECUTE_APP_ACTIONContent = default;
            private static bool _EXECUTE_APP_ACTIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#EXPAND_STATUS_BAR"/>
            /// </summary>
            public static Java.Lang.String EXPAND_STATUS_BAR { get { if (!_EXPAND_STATUS_BARReady) { _EXPAND_STATUS_BARContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXPAND_STATUS_BAR"); _EXPAND_STATUS_BARReady = true; } return _EXPAND_STATUS_BARContent; } }
            private static Java.Lang.String _EXPAND_STATUS_BARContent = default;
            private static bool _EXPAND_STATUS_BARReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#FACTORY_TEST"/>
            /// </summary>
            public static Java.Lang.String FACTORY_TEST { get { if (!_FACTORY_TESTReady) { _FACTORY_TESTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FACTORY_TEST"); _FACTORY_TESTReady = true; } return _FACTORY_TESTContent; } }
            private static Java.Lang.String _FACTORY_TESTContent = default;
            private static bool _FACTORY_TESTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#FOREGROUND_SERVICE"/>
            /// </summary>
            public static Java.Lang.String FOREGROUND_SERVICE { get { if (!_FOREGROUND_SERVICEReady) { _FOREGROUND_SERVICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FOREGROUND_SERVICE"); _FOREGROUND_SERVICEReady = true; } return _FOREGROUND_SERVICEContent; } }
            private static Java.Lang.String _FOREGROUND_SERVICEContent = default;
            private static bool _FOREGROUND_SERVICEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#FOREGROUND_SERVICE_CAMERA"/>
            /// </summary>
            public static Java.Lang.String FOREGROUND_SERVICE_CAMERA { get { if (!_FOREGROUND_SERVICE_CAMERAReady) { _FOREGROUND_SERVICE_CAMERAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FOREGROUND_SERVICE_CAMERA"); _FOREGROUND_SERVICE_CAMERAReady = true; } return _FOREGROUND_SERVICE_CAMERAContent; } }
            private static Java.Lang.String _FOREGROUND_SERVICE_CAMERAContent = default;
            private static bool _FOREGROUND_SERVICE_CAMERAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#FOREGROUND_SERVICE_CONNECTED_DEVICE"/>
            /// </summary>
            public static Java.Lang.String FOREGROUND_SERVICE_CONNECTED_DEVICE { get { if (!_FOREGROUND_SERVICE_CONNECTED_DEVICEReady) { _FOREGROUND_SERVICE_CONNECTED_DEVICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FOREGROUND_SERVICE_CONNECTED_DEVICE"); _FOREGROUND_SERVICE_CONNECTED_DEVICEReady = true; } return _FOREGROUND_SERVICE_CONNECTED_DEVICEContent; } }
            private static Java.Lang.String _FOREGROUND_SERVICE_CONNECTED_DEVICEContent = default;
            private static bool _FOREGROUND_SERVICE_CONNECTED_DEVICEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#FOREGROUND_SERVICE_DATA_SYNC"/>
            /// </summary>
            public static Java.Lang.String FOREGROUND_SERVICE_DATA_SYNC { get { if (!_FOREGROUND_SERVICE_DATA_SYNCReady) { _FOREGROUND_SERVICE_DATA_SYNCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FOREGROUND_SERVICE_DATA_SYNC"); _FOREGROUND_SERVICE_DATA_SYNCReady = true; } return _FOREGROUND_SERVICE_DATA_SYNCContent; } }
            private static Java.Lang.String _FOREGROUND_SERVICE_DATA_SYNCContent = default;
            private static bool _FOREGROUND_SERVICE_DATA_SYNCReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#FOREGROUND_SERVICE_HEALTH"/>
            /// </summary>
            public static Java.Lang.String FOREGROUND_SERVICE_HEALTH { get { if (!_FOREGROUND_SERVICE_HEALTHReady) { _FOREGROUND_SERVICE_HEALTHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FOREGROUND_SERVICE_HEALTH"); _FOREGROUND_SERVICE_HEALTHReady = true; } return _FOREGROUND_SERVICE_HEALTHContent; } }
            private static Java.Lang.String _FOREGROUND_SERVICE_HEALTHContent = default;
            private static bool _FOREGROUND_SERVICE_HEALTHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#FOREGROUND_SERVICE_LOCATION"/>
            /// </summary>
            public static Java.Lang.String FOREGROUND_SERVICE_LOCATION { get { if (!_FOREGROUND_SERVICE_LOCATIONReady) { _FOREGROUND_SERVICE_LOCATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FOREGROUND_SERVICE_LOCATION"); _FOREGROUND_SERVICE_LOCATIONReady = true; } return _FOREGROUND_SERVICE_LOCATIONContent; } }
            private static Java.Lang.String _FOREGROUND_SERVICE_LOCATIONContent = default;
            private static bool _FOREGROUND_SERVICE_LOCATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#FOREGROUND_SERVICE_MEDIA_PLAYBACK"/>
            /// </summary>
            public static Java.Lang.String FOREGROUND_SERVICE_MEDIA_PLAYBACK { get { if (!_FOREGROUND_SERVICE_MEDIA_PLAYBACKReady) { _FOREGROUND_SERVICE_MEDIA_PLAYBACKContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FOREGROUND_SERVICE_MEDIA_PLAYBACK"); _FOREGROUND_SERVICE_MEDIA_PLAYBACKReady = true; } return _FOREGROUND_SERVICE_MEDIA_PLAYBACKContent; } }
            private static Java.Lang.String _FOREGROUND_SERVICE_MEDIA_PLAYBACKContent = default;
            private static bool _FOREGROUND_SERVICE_MEDIA_PLAYBACKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#FOREGROUND_SERVICE_MEDIA_PROCESSING"/>
            /// </summary>
            public static Java.Lang.String FOREGROUND_SERVICE_MEDIA_PROCESSING { get { if (!_FOREGROUND_SERVICE_MEDIA_PROCESSINGReady) { _FOREGROUND_SERVICE_MEDIA_PROCESSINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FOREGROUND_SERVICE_MEDIA_PROCESSING"); _FOREGROUND_SERVICE_MEDIA_PROCESSINGReady = true; } return _FOREGROUND_SERVICE_MEDIA_PROCESSINGContent; } }
            private static Java.Lang.String _FOREGROUND_SERVICE_MEDIA_PROCESSINGContent = default;
            private static bool _FOREGROUND_SERVICE_MEDIA_PROCESSINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#FOREGROUND_SERVICE_MEDIA_PROJECTION"/>
            /// </summary>
            public static Java.Lang.String FOREGROUND_SERVICE_MEDIA_PROJECTION { get { if (!_FOREGROUND_SERVICE_MEDIA_PROJECTIONReady) { _FOREGROUND_SERVICE_MEDIA_PROJECTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FOREGROUND_SERVICE_MEDIA_PROJECTION"); _FOREGROUND_SERVICE_MEDIA_PROJECTIONReady = true; } return _FOREGROUND_SERVICE_MEDIA_PROJECTIONContent; } }
            private static Java.Lang.String _FOREGROUND_SERVICE_MEDIA_PROJECTIONContent = default;
            private static bool _FOREGROUND_SERVICE_MEDIA_PROJECTIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#FOREGROUND_SERVICE_MICROPHONE"/>
            /// </summary>
            public static Java.Lang.String FOREGROUND_SERVICE_MICROPHONE { get { if (!_FOREGROUND_SERVICE_MICROPHONEReady) { _FOREGROUND_SERVICE_MICROPHONEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FOREGROUND_SERVICE_MICROPHONE"); _FOREGROUND_SERVICE_MICROPHONEReady = true; } return _FOREGROUND_SERVICE_MICROPHONEContent; } }
            private static Java.Lang.String _FOREGROUND_SERVICE_MICROPHONEContent = default;
            private static bool _FOREGROUND_SERVICE_MICROPHONEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#FOREGROUND_SERVICE_PHONE_CALL"/>
            /// </summary>
            public static Java.Lang.String FOREGROUND_SERVICE_PHONE_CALL { get { if (!_FOREGROUND_SERVICE_PHONE_CALLReady) { _FOREGROUND_SERVICE_PHONE_CALLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FOREGROUND_SERVICE_PHONE_CALL"); _FOREGROUND_SERVICE_PHONE_CALLReady = true; } return _FOREGROUND_SERVICE_PHONE_CALLContent; } }
            private static Java.Lang.String _FOREGROUND_SERVICE_PHONE_CALLContent = default;
            private static bool _FOREGROUND_SERVICE_PHONE_CALLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#FOREGROUND_SERVICE_REMOTE_MESSAGING"/>
            /// </summary>
            public static Java.Lang.String FOREGROUND_SERVICE_REMOTE_MESSAGING { get { if (!_FOREGROUND_SERVICE_REMOTE_MESSAGINGReady) { _FOREGROUND_SERVICE_REMOTE_MESSAGINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FOREGROUND_SERVICE_REMOTE_MESSAGING"); _FOREGROUND_SERVICE_REMOTE_MESSAGINGReady = true; } return _FOREGROUND_SERVICE_REMOTE_MESSAGINGContent; } }
            private static Java.Lang.String _FOREGROUND_SERVICE_REMOTE_MESSAGINGContent = default;
            private static bool _FOREGROUND_SERVICE_REMOTE_MESSAGINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#FOREGROUND_SERVICE_SPECIAL_USE"/>
            /// </summary>
            public static Java.Lang.String FOREGROUND_SERVICE_SPECIAL_USE { get { if (!_FOREGROUND_SERVICE_SPECIAL_USEReady) { _FOREGROUND_SERVICE_SPECIAL_USEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FOREGROUND_SERVICE_SPECIAL_USE"); _FOREGROUND_SERVICE_SPECIAL_USEReady = true; } return _FOREGROUND_SERVICE_SPECIAL_USEContent; } }
            private static Java.Lang.String _FOREGROUND_SERVICE_SPECIAL_USEContent = default;
            private static bool _FOREGROUND_SERVICE_SPECIAL_USEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#FOREGROUND_SERVICE_SYSTEM_EXEMPTED"/>
            /// </summary>
            public static Java.Lang.String FOREGROUND_SERVICE_SYSTEM_EXEMPTED { get { if (!_FOREGROUND_SERVICE_SYSTEM_EXEMPTEDReady) { _FOREGROUND_SERVICE_SYSTEM_EXEMPTEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FOREGROUND_SERVICE_SYSTEM_EXEMPTED"); _FOREGROUND_SERVICE_SYSTEM_EXEMPTEDReady = true; } return _FOREGROUND_SERVICE_SYSTEM_EXEMPTEDContent; } }
            private static Java.Lang.String _FOREGROUND_SERVICE_SYSTEM_EXEMPTEDContent = default;
            private static bool _FOREGROUND_SERVICE_SYSTEM_EXEMPTEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#GET_ACCOUNTS"/>
            /// </summary>
            public static Java.Lang.String GET_ACCOUNTS { get { if (!_GET_ACCOUNTSReady) { _GET_ACCOUNTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GET_ACCOUNTS"); _GET_ACCOUNTSReady = true; } return _GET_ACCOUNTSContent; } }
            private static Java.Lang.String _GET_ACCOUNTSContent = default;
            private static bool _GET_ACCOUNTSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#GET_ACCOUNTS_PRIVILEGED"/>
            /// </summary>
            public static Java.Lang.String GET_ACCOUNTS_PRIVILEGED { get { if (!_GET_ACCOUNTS_PRIVILEGEDReady) { _GET_ACCOUNTS_PRIVILEGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GET_ACCOUNTS_PRIVILEGED"); _GET_ACCOUNTS_PRIVILEGEDReady = true; } return _GET_ACCOUNTS_PRIVILEGEDContent; } }
            private static Java.Lang.String _GET_ACCOUNTS_PRIVILEGEDContent = default;
            private static bool _GET_ACCOUNTS_PRIVILEGEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#GET_PACKAGE_SIZE"/>
            /// </summary>
            public static Java.Lang.String GET_PACKAGE_SIZE { get { if (!_GET_PACKAGE_SIZEReady) { _GET_PACKAGE_SIZEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GET_PACKAGE_SIZE"); _GET_PACKAGE_SIZEReady = true; } return _GET_PACKAGE_SIZEContent; } }
            private static Java.Lang.String _GET_PACKAGE_SIZEContent = default;
            private static bool _GET_PACKAGE_SIZEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#GET_TASKS"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String GET_TASKS { get { if (!_GET_TASKSReady) { _GET_TASKSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GET_TASKS"); _GET_TASKSReady = true; } return _GET_TASKSContent; } }
            private static Java.Lang.String _GET_TASKSContent = default;
            private static bool _GET_TASKSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#GLOBAL_SEARCH"/>
            /// </summary>
            public static Java.Lang.String GLOBAL_SEARCH { get { if (!_GLOBAL_SEARCHReady) { _GLOBAL_SEARCHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GLOBAL_SEARCH"); _GLOBAL_SEARCHReady = true; } return _GLOBAL_SEARCHContent; } }
            private static Java.Lang.String _GLOBAL_SEARCHContent = default;
            private static bool _GLOBAL_SEARCHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#HIDE_OVERLAY_WINDOWS"/>
            /// </summary>
            public static Java.Lang.String HIDE_OVERLAY_WINDOWS { get { if (!_HIDE_OVERLAY_WINDOWSReady) { _HIDE_OVERLAY_WINDOWSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "HIDE_OVERLAY_WINDOWS"); _HIDE_OVERLAY_WINDOWSReady = true; } return _HIDE_OVERLAY_WINDOWSContent; } }
            private static Java.Lang.String _HIDE_OVERLAY_WINDOWSContent = default;
            private static bool _HIDE_OVERLAY_WINDOWSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#HIGH_SAMPLING_RATE_SENSORS"/>
            /// </summary>
            public static Java.Lang.String HIGH_SAMPLING_RATE_SENSORS { get { if (!_HIGH_SAMPLING_RATE_SENSORSReady) { _HIGH_SAMPLING_RATE_SENSORSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "HIGH_SAMPLING_RATE_SENSORS"); _HIGH_SAMPLING_RATE_SENSORSReady = true; } return _HIGH_SAMPLING_RATE_SENSORSContent; } }
            private static Java.Lang.String _HIGH_SAMPLING_RATE_SENSORSContent = default;
            private static bool _HIGH_SAMPLING_RATE_SENSORSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#INSTALL_LOCATION_PROVIDER"/>
            /// </summary>
            public static Java.Lang.String INSTALL_LOCATION_PROVIDER { get { if (!_INSTALL_LOCATION_PROVIDERReady) { _INSTALL_LOCATION_PROVIDERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "INSTALL_LOCATION_PROVIDER"); _INSTALL_LOCATION_PROVIDERReady = true; } return _INSTALL_LOCATION_PROVIDERContent; } }
            private static Java.Lang.String _INSTALL_LOCATION_PROVIDERContent = default;
            private static bool _INSTALL_LOCATION_PROVIDERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#INSTALL_PACKAGES"/>
            /// </summary>
            public static Java.Lang.String INSTALL_PACKAGES { get { if (!_INSTALL_PACKAGESReady) { _INSTALL_PACKAGESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "INSTALL_PACKAGES"); _INSTALL_PACKAGESReady = true; } return _INSTALL_PACKAGESContent; } }
            private static Java.Lang.String _INSTALL_PACKAGESContent = default;
            private static bool _INSTALL_PACKAGESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#INSTALL_SHORTCUT"/>
            /// </summary>
            public static Java.Lang.String INSTALL_SHORTCUT { get { if (!_INSTALL_SHORTCUTReady) { _INSTALL_SHORTCUTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "INSTALL_SHORTCUT"); _INSTALL_SHORTCUTReady = true; } return _INSTALL_SHORTCUTContent; } }
            private static Java.Lang.String _INSTALL_SHORTCUTContent = default;
            private static bool _INSTALL_SHORTCUTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#INSTANT_APP_FOREGROUND_SERVICE"/>
            /// </summary>
            public static Java.Lang.String INSTANT_APP_FOREGROUND_SERVICE { get { if (!_INSTANT_APP_FOREGROUND_SERVICEReady) { _INSTANT_APP_FOREGROUND_SERVICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "INSTANT_APP_FOREGROUND_SERVICE"); _INSTANT_APP_FOREGROUND_SERVICEReady = true; } return _INSTANT_APP_FOREGROUND_SERVICEContent; } }
            private static Java.Lang.String _INSTANT_APP_FOREGROUND_SERVICEContent = default;
            private static bool _INSTANT_APP_FOREGROUND_SERVICEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#INTERACT_ACROSS_PROFILES"/>
            /// </summary>
            public static Java.Lang.String INTERACT_ACROSS_PROFILES { get { if (!_INTERACT_ACROSS_PROFILESReady) { _INTERACT_ACROSS_PROFILESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "INTERACT_ACROSS_PROFILES"); _INTERACT_ACROSS_PROFILESReady = true; } return _INTERACT_ACROSS_PROFILESContent; } }
            private static Java.Lang.String _INTERACT_ACROSS_PROFILESContent = default;
            private static bool _INTERACT_ACROSS_PROFILESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#INTERNET"/>
            /// </summary>
            public static Java.Lang.String INTERNET { get { if (!_INTERNETReady) { _INTERNETContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "INTERNET"); _INTERNETReady = true; } return _INTERNETContent; } }
            private static Java.Lang.String _INTERNETContent = default;
            private static bool _INTERNETReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#KILL_BACKGROUND_PROCESSES"/>
            /// </summary>
            public static Java.Lang.String KILL_BACKGROUND_PROCESSES { get { if (!_KILL_BACKGROUND_PROCESSESReady) { _KILL_BACKGROUND_PROCESSESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KILL_BACKGROUND_PROCESSES"); _KILL_BACKGROUND_PROCESSESReady = true; } return _KILL_BACKGROUND_PROCESSESContent; } }
            private static Java.Lang.String _KILL_BACKGROUND_PROCESSESContent = default;
            private static bool _KILL_BACKGROUND_PROCESSESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#LAUNCH_CAPTURE_CONTENT_ACTIVITY_FOR_NOTE"/>
            /// </summary>
            public static Java.Lang.String LAUNCH_CAPTURE_CONTENT_ACTIVITY_FOR_NOTE { get { if (!_LAUNCH_CAPTURE_CONTENT_ACTIVITY_FOR_NOTEReady) { _LAUNCH_CAPTURE_CONTENT_ACTIVITY_FOR_NOTEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LAUNCH_CAPTURE_CONTENT_ACTIVITY_FOR_NOTE"); _LAUNCH_CAPTURE_CONTENT_ACTIVITY_FOR_NOTEReady = true; } return _LAUNCH_CAPTURE_CONTENT_ACTIVITY_FOR_NOTEContent; } }
            private static Java.Lang.String _LAUNCH_CAPTURE_CONTENT_ACTIVITY_FOR_NOTEContent = default;
            private static bool _LAUNCH_CAPTURE_CONTENT_ACTIVITY_FOR_NOTEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#LAUNCH_MULTI_PANE_SETTINGS_DEEP_LINK"/>
            /// </summary>
            public static Java.Lang.String LAUNCH_MULTI_PANE_SETTINGS_DEEP_LINK { get { if (!_LAUNCH_MULTI_PANE_SETTINGS_DEEP_LINKReady) { _LAUNCH_MULTI_PANE_SETTINGS_DEEP_LINKContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LAUNCH_MULTI_PANE_SETTINGS_DEEP_LINK"); _LAUNCH_MULTI_PANE_SETTINGS_DEEP_LINKReady = true; } return _LAUNCH_MULTI_PANE_SETTINGS_DEEP_LINKContent; } }
            private static Java.Lang.String _LAUNCH_MULTI_PANE_SETTINGS_DEEP_LINKContent = default;
            private static bool _LAUNCH_MULTI_PANE_SETTINGS_DEEP_LINKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#LOADER_USAGE_STATS"/>
            /// </summary>
            public static Java.Lang.String LOADER_USAGE_STATS { get { if (!_LOADER_USAGE_STATSReady) { _LOADER_USAGE_STATSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LOADER_USAGE_STATS"); _LOADER_USAGE_STATSReady = true; } return _LOADER_USAGE_STATSContent; } }
            private static Java.Lang.String _LOADER_USAGE_STATSContent = default;
            private static bool _LOADER_USAGE_STATSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#LOCATION_HARDWARE"/>
            /// </summary>
            public static Java.Lang.String LOCATION_HARDWARE { get { if (!_LOCATION_HARDWAREReady) { _LOCATION_HARDWAREContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LOCATION_HARDWARE"); _LOCATION_HARDWAREReady = true; } return _LOCATION_HARDWAREContent; } }
            private static Java.Lang.String _LOCATION_HARDWAREContent = default;
            private static bool _LOCATION_HARDWAREReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_LOCK_STATE"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_LOCK_STATE { get { if (!_MANAGE_DEVICE_LOCK_STATEReady) { _MANAGE_DEVICE_LOCK_STATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_LOCK_STATE"); _MANAGE_DEVICE_LOCK_STATEReady = true; } return _MANAGE_DEVICE_LOCK_STATEContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_LOCK_STATEContent = default;
            private static bool _MANAGE_DEVICE_LOCK_STATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_ACCESSIBILITY"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_ACCESSIBILITY { get { if (!_MANAGE_DEVICE_POLICY_ACCESSIBILITYReady) { _MANAGE_DEVICE_POLICY_ACCESSIBILITYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_ACCESSIBILITY"); _MANAGE_DEVICE_POLICY_ACCESSIBILITYReady = true; } return _MANAGE_DEVICE_POLICY_ACCESSIBILITYContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_ACCESSIBILITYContent = default;
            private static bool _MANAGE_DEVICE_POLICY_ACCESSIBILITYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_ACCOUNT_MANAGEMENT"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_ACCOUNT_MANAGEMENT { get { if (!_MANAGE_DEVICE_POLICY_ACCOUNT_MANAGEMENTReady) { _MANAGE_DEVICE_POLICY_ACCOUNT_MANAGEMENTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_ACCOUNT_MANAGEMENT"); _MANAGE_DEVICE_POLICY_ACCOUNT_MANAGEMENTReady = true; } return _MANAGE_DEVICE_POLICY_ACCOUNT_MANAGEMENTContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_ACCOUNT_MANAGEMENTContent = default;
            private static bool _MANAGE_DEVICE_POLICY_ACCOUNT_MANAGEMENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_ACROSS_USERS"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_ACROSS_USERS { get { if (!_MANAGE_DEVICE_POLICY_ACROSS_USERSReady) { _MANAGE_DEVICE_POLICY_ACROSS_USERSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_ACROSS_USERS"); _MANAGE_DEVICE_POLICY_ACROSS_USERSReady = true; } return _MANAGE_DEVICE_POLICY_ACROSS_USERSContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_ACROSS_USERSContent = default;
            private static bool _MANAGE_DEVICE_POLICY_ACROSS_USERSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_ACROSS_USERS_FULL"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_ACROSS_USERS_FULL { get { if (!_MANAGE_DEVICE_POLICY_ACROSS_USERS_FULLReady) { _MANAGE_DEVICE_POLICY_ACROSS_USERS_FULLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_ACROSS_USERS_FULL"); _MANAGE_DEVICE_POLICY_ACROSS_USERS_FULLReady = true; } return _MANAGE_DEVICE_POLICY_ACROSS_USERS_FULLContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_ACROSS_USERS_FULLContent = default;
            private static bool _MANAGE_DEVICE_POLICY_ACROSS_USERS_FULLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_ACROSS_USERS_SECURITY_CRITICAL"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_ACROSS_USERS_SECURITY_CRITICAL { get { if (!_MANAGE_DEVICE_POLICY_ACROSS_USERS_SECURITY_CRITICALReady) { _MANAGE_DEVICE_POLICY_ACROSS_USERS_SECURITY_CRITICALContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_ACROSS_USERS_SECURITY_CRITICAL"); _MANAGE_DEVICE_POLICY_ACROSS_USERS_SECURITY_CRITICALReady = true; } return _MANAGE_DEVICE_POLICY_ACROSS_USERS_SECURITY_CRITICALContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_ACROSS_USERS_SECURITY_CRITICALContent = default;
            private static bool _MANAGE_DEVICE_POLICY_ACROSS_USERS_SECURITY_CRITICALReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_AIRPLANE_MODE"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_AIRPLANE_MODE { get { if (!_MANAGE_DEVICE_POLICY_AIRPLANE_MODEReady) { _MANAGE_DEVICE_POLICY_AIRPLANE_MODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_AIRPLANE_MODE"); _MANAGE_DEVICE_POLICY_AIRPLANE_MODEReady = true; } return _MANAGE_DEVICE_POLICY_AIRPLANE_MODEContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_AIRPLANE_MODEContent = default;
            private static bool _MANAGE_DEVICE_POLICY_AIRPLANE_MODEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_APP_RESTRICTIONS"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_APP_RESTRICTIONS { get { if (!_MANAGE_DEVICE_POLICY_APP_RESTRICTIONSReady) { _MANAGE_DEVICE_POLICY_APP_RESTRICTIONSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_APP_RESTRICTIONS"); _MANAGE_DEVICE_POLICY_APP_RESTRICTIONSReady = true; } return _MANAGE_DEVICE_POLICY_APP_RESTRICTIONSContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_APP_RESTRICTIONSContent = default;
            private static bool _MANAGE_DEVICE_POLICY_APP_RESTRICTIONSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_APP_USER_DATA"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_APP_USER_DATA { get { if (!_MANAGE_DEVICE_POLICY_APP_USER_DATAReady) { _MANAGE_DEVICE_POLICY_APP_USER_DATAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_APP_USER_DATA"); _MANAGE_DEVICE_POLICY_APP_USER_DATAReady = true; } return _MANAGE_DEVICE_POLICY_APP_USER_DATAContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_APP_USER_DATAContent = default;
            private static bool _MANAGE_DEVICE_POLICY_APP_USER_DATAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_APPS_CONTROL"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_APPS_CONTROL { get { if (!_MANAGE_DEVICE_POLICY_APPS_CONTROLReady) { _MANAGE_DEVICE_POLICY_APPS_CONTROLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_APPS_CONTROL"); _MANAGE_DEVICE_POLICY_APPS_CONTROLReady = true; } return _MANAGE_DEVICE_POLICY_APPS_CONTROLContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_APPS_CONTROLContent = default;
            private static bool _MANAGE_DEVICE_POLICY_APPS_CONTROLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_ASSIST_CONTENT"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_ASSIST_CONTENT { get { if (!_MANAGE_DEVICE_POLICY_ASSIST_CONTENTReady) { _MANAGE_DEVICE_POLICY_ASSIST_CONTENTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_ASSIST_CONTENT"); _MANAGE_DEVICE_POLICY_ASSIST_CONTENTReady = true; } return _MANAGE_DEVICE_POLICY_ASSIST_CONTENTContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_ASSIST_CONTENTContent = default;
            private static bool _MANAGE_DEVICE_POLICY_ASSIST_CONTENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_AUDIO_OUTPUT"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_AUDIO_OUTPUT { get { if (!_MANAGE_DEVICE_POLICY_AUDIO_OUTPUTReady) { _MANAGE_DEVICE_POLICY_AUDIO_OUTPUTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_AUDIO_OUTPUT"); _MANAGE_DEVICE_POLICY_AUDIO_OUTPUTReady = true; } return _MANAGE_DEVICE_POLICY_AUDIO_OUTPUTContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_AUDIO_OUTPUTContent = default;
            private static bool _MANAGE_DEVICE_POLICY_AUDIO_OUTPUTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_AUTOFILL"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_AUTOFILL { get { if (!_MANAGE_DEVICE_POLICY_AUTOFILLReady) { _MANAGE_DEVICE_POLICY_AUTOFILLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_AUTOFILL"); _MANAGE_DEVICE_POLICY_AUTOFILLReady = true; } return _MANAGE_DEVICE_POLICY_AUTOFILLContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_AUTOFILLContent = default;
            private static bool _MANAGE_DEVICE_POLICY_AUTOFILLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_BACKUP_SERVICE"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_BACKUP_SERVICE { get { if (!_MANAGE_DEVICE_POLICY_BACKUP_SERVICEReady) { _MANAGE_DEVICE_POLICY_BACKUP_SERVICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_BACKUP_SERVICE"); _MANAGE_DEVICE_POLICY_BACKUP_SERVICEReady = true; } return _MANAGE_DEVICE_POLICY_BACKUP_SERVICEContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_BACKUP_SERVICEContent = default;
            private static bool _MANAGE_DEVICE_POLICY_BACKUP_SERVICEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_BLOCK_UNINSTALL"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_BLOCK_UNINSTALL { get { if (!_MANAGE_DEVICE_POLICY_BLOCK_UNINSTALLReady) { _MANAGE_DEVICE_POLICY_BLOCK_UNINSTALLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_BLOCK_UNINSTALL"); _MANAGE_DEVICE_POLICY_BLOCK_UNINSTALLReady = true; } return _MANAGE_DEVICE_POLICY_BLOCK_UNINSTALLContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_BLOCK_UNINSTALLContent = default;
            private static bool _MANAGE_DEVICE_POLICY_BLOCK_UNINSTALLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_BLUETOOTH"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_BLUETOOTH { get { if (!_MANAGE_DEVICE_POLICY_BLUETOOTHReady) { _MANAGE_DEVICE_POLICY_BLUETOOTHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_BLUETOOTH"); _MANAGE_DEVICE_POLICY_BLUETOOTHReady = true; } return _MANAGE_DEVICE_POLICY_BLUETOOTHContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_BLUETOOTHContent = default;
            private static bool _MANAGE_DEVICE_POLICY_BLUETOOTHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_BUGREPORT"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_BUGREPORT { get { if (!_MANAGE_DEVICE_POLICY_BUGREPORTReady) { _MANAGE_DEVICE_POLICY_BUGREPORTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_BUGREPORT"); _MANAGE_DEVICE_POLICY_BUGREPORTReady = true; } return _MANAGE_DEVICE_POLICY_BUGREPORTContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_BUGREPORTContent = default;
            private static bool _MANAGE_DEVICE_POLICY_BUGREPORTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_CALLS"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_CALLS { get { if (!_MANAGE_DEVICE_POLICY_CALLSReady) { _MANAGE_DEVICE_POLICY_CALLSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_CALLS"); _MANAGE_DEVICE_POLICY_CALLSReady = true; } return _MANAGE_DEVICE_POLICY_CALLSContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_CALLSContent = default;
            private static bool _MANAGE_DEVICE_POLICY_CALLSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_CAMERA"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_CAMERA { get { if (!_MANAGE_DEVICE_POLICY_CAMERAReady) { _MANAGE_DEVICE_POLICY_CAMERAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_CAMERA"); _MANAGE_DEVICE_POLICY_CAMERAReady = true; } return _MANAGE_DEVICE_POLICY_CAMERAContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_CAMERAContent = default;
            private static bool _MANAGE_DEVICE_POLICY_CAMERAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_CAMERA_TOGGLE"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_CAMERA_TOGGLE { get { if (!_MANAGE_DEVICE_POLICY_CAMERA_TOGGLEReady) { _MANAGE_DEVICE_POLICY_CAMERA_TOGGLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_CAMERA_TOGGLE"); _MANAGE_DEVICE_POLICY_CAMERA_TOGGLEReady = true; } return _MANAGE_DEVICE_POLICY_CAMERA_TOGGLEContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_CAMERA_TOGGLEContent = default;
            private static bool _MANAGE_DEVICE_POLICY_CAMERA_TOGGLEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_CERTIFICATES"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_CERTIFICATES { get { if (!_MANAGE_DEVICE_POLICY_CERTIFICATESReady) { _MANAGE_DEVICE_POLICY_CERTIFICATESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_CERTIFICATES"); _MANAGE_DEVICE_POLICY_CERTIFICATESReady = true; } return _MANAGE_DEVICE_POLICY_CERTIFICATESContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_CERTIFICATESContent = default;
            private static bool _MANAGE_DEVICE_POLICY_CERTIFICATESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_COMMON_CRITERIA_MODE"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_COMMON_CRITERIA_MODE { get { if (!_MANAGE_DEVICE_POLICY_COMMON_CRITERIA_MODEReady) { _MANAGE_DEVICE_POLICY_COMMON_CRITERIA_MODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_COMMON_CRITERIA_MODE"); _MANAGE_DEVICE_POLICY_COMMON_CRITERIA_MODEReady = true; } return _MANAGE_DEVICE_POLICY_COMMON_CRITERIA_MODEContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_COMMON_CRITERIA_MODEContent = default;
            private static bool _MANAGE_DEVICE_POLICY_COMMON_CRITERIA_MODEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_CONTENT_PROTECTION"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_CONTENT_PROTECTION { get { if (!_MANAGE_DEVICE_POLICY_CONTENT_PROTECTIONReady) { _MANAGE_DEVICE_POLICY_CONTENT_PROTECTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_CONTENT_PROTECTION"); _MANAGE_DEVICE_POLICY_CONTENT_PROTECTIONReady = true; } return _MANAGE_DEVICE_POLICY_CONTENT_PROTECTIONContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_CONTENT_PROTECTIONContent = default;
            private static bool _MANAGE_DEVICE_POLICY_CONTENT_PROTECTIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_DEBUGGING_FEATURES"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_DEBUGGING_FEATURES { get { if (!_MANAGE_DEVICE_POLICY_DEBUGGING_FEATURESReady) { _MANAGE_DEVICE_POLICY_DEBUGGING_FEATURESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_DEBUGGING_FEATURES"); _MANAGE_DEVICE_POLICY_DEBUGGING_FEATURESReady = true; } return _MANAGE_DEVICE_POLICY_DEBUGGING_FEATURESContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_DEBUGGING_FEATURESContent = default;
            private static bool _MANAGE_DEVICE_POLICY_DEBUGGING_FEATURESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_DEFAULT_SMS"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_DEFAULT_SMS { get { if (!_MANAGE_DEVICE_POLICY_DEFAULT_SMSReady) { _MANAGE_DEVICE_POLICY_DEFAULT_SMSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_DEFAULT_SMS"); _MANAGE_DEVICE_POLICY_DEFAULT_SMSReady = true; } return _MANAGE_DEVICE_POLICY_DEFAULT_SMSContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_DEFAULT_SMSContent = default;
            private static bool _MANAGE_DEVICE_POLICY_DEFAULT_SMSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_DEVICE_IDENTIFIERS"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_DEVICE_IDENTIFIERS { get { if (!_MANAGE_DEVICE_POLICY_DEVICE_IDENTIFIERSReady) { _MANAGE_DEVICE_POLICY_DEVICE_IDENTIFIERSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_DEVICE_IDENTIFIERS"); _MANAGE_DEVICE_POLICY_DEVICE_IDENTIFIERSReady = true; } return _MANAGE_DEVICE_POLICY_DEVICE_IDENTIFIERSContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_DEVICE_IDENTIFIERSContent = default;
            private static bool _MANAGE_DEVICE_POLICY_DEVICE_IDENTIFIERSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_DISPLAY"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_DISPLAY { get { if (!_MANAGE_DEVICE_POLICY_DISPLAYReady) { _MANAGE_DEVICE_POLICY_DISPLAYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_DISPLAY"); _MANAGE_DEVICE_POLICY_DISPLAYReady = true; } return _MANAGE_DEVICE_POLICY_DISPLAYContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_DISPLAYContent = default;
            private static bool _MANAGE_DEVICE_POLICY_DISPLAYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_FACTORY_RESET"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_FACTORY_RESET { get { if (!_MANAGE_DEVICE_POLICY_FACTORY_RESETReady) { _MANAGE_DEVICE_POLICY_FACTORY_RESETContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_FACTORY_RESET"); _MANAGE_DEVICE_POLICY_FACTORY_RESETReady = true; } return _MANAGE_DEVICE_POLICY_FACTORY_RESETContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_FACTORY_RESETContent = default;
            private static bool _MANAGE_DEVICE_POLICY_FACTORY_RESETReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_FUN"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_FUN { get { if (!_MANAGE_DEVICE_POLICY_FUNReady) { _MANAGE_DEVICE_POLICY_FUNContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_FUN"); _MANAGE_DEVICE_POLICY_FUNReady = true; } return _MANAGE_DEVICE_POLICY_FUNContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_FUNContent = default;
            private static bool _MANAGE_DEVICE_POLICY_FUNReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_INPUT_METHODS"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_INPUT_METHODS { get { if (!_MANAGE_DEVICE_POLICY_INPUT_METHODSReady) { _MANAGE_DEVICE_POLICY_INPUT_METHODSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_INPUT_METHODS"); _MANAGE_DEVICE_POLICY_INPUT_METHODSReady = true; } return _MANAGE_DEVICE_POLICY_INPUT_METHODSContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_INPUT_METHODSContent = default;
            private static bool _MANAGE_DEVICE_POLICY_INPUT_METHODSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_INSTALL_UNKNOWN_SOURCES"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_INSTALL_UNKNOWN_SOURCES { get { if (!_MANAGE_DEVICE_POLICY_INSTALL_UNKNOWN_SOURCESReady) { _MANAGE_DEVICE_POLICY_INSTALL_UNKNOWN_SOURCESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_INSTALL_UNKNOWN_SOURCES"); _MANAGE_DEVICE_POLICY_INSTALL_UNKNOWN_SOURCESReady = true; } return _MANAGE_DEVICE_POLICY_INSTALL_UNKNOWN_SOURCESContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_INSTALL_UNKNOWN_SOURCESContent = default;
            private static bool _MANAGE_DEVICE_POLICY_INSTALL_UNKNOWN_SOURCESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_KEEP_UNINSTALLED_PACKAGES"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_KEEP_UNINSTALLED_PACKAGES { get { if (!_MANAGE_DEVICE_POLICY_KEEP_UNINSTALLED_PACKAGESReady) { _MANAGE_DEVICE_POLICY_KEEP_UNINSTALLED_PACKAGESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_KEEP_UNINSTALLED_PACKAGES"); _MANAGE_DEVICE_POLICY_KEEP_UNINSTALLED_PACKAGESReady = true; } return _MANAGE_DEVICE_POLICY_KEEP_UNINSTALLED_PACKAGESContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_KEEP_UNINSTALLED_PACKAGESContent = default;
            private static bool _MANAGE_DEVICE_POLICY_KEEP_UNINSTALLED_PACKAGESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_KEYGUARD"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_KEYGUARD { get { if (!_MANAGE_DEVICE_POLICY_KEYGUARDReady) { _MANAGE_DEVICE_POLICY_KEYGUARDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_KEYGUARD"); _MANAGE_DEVICE_POLICY_KEYGUARDReady = true; } return _MANAGE_DEVICE_POLICY_KEYGUARDContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_KEYGUARDContent = default;
            private static bool _MANAGE_DEVICE_POLICY_KEYGUARDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_LOCALE"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_LOCALE { get { if (!_MANAGE_DEVICE_POLICY_LOCALEReady) { _MANAGE_DEVICE_POLICY_LOCALEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_LOCALE"); _MANAGE_DEVICE_POLICY_LOCALEReady = true; } return _MANAGE_DEVICE_POLICY_LOCALEContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_LOCALEContent = default;
            private static bool _MANAGE_DEVICE_POLICY_LOCALEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_LOCATION"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_LOCATION { get { if (!_MANAGE_DEVICE_POLICY_LOCATIONReady) { _MANAGE_DEVICE_POLICY_LOCATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_LOCATION"); _MANAGE_DEVICE_POLICY_LOCATIONReady = true; } return _MANAGE_DEVICE_POLICY_LOCATIONContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_LOCATIONContent = default;
            private static bool _MANAGE_DEVICE_POLICY_LOCATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_LOCK"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_LOCK { get { if (!_MANAGE_DEVICE_POLICY_LOCKReady) { _MANAGE_DEVICE_POLICY_LOCKContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_LOCK"); _MANAGE_DEVICE_POLICY_LOCKReady = true; } return _MANAGE_DEVICE_POLICY_LOCKContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_LOCKContent = default;
            private static bool _MANAGE_DEVICE_POLICY_LOCKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_LOCK_CREDENTIALS"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_LOCK_CREDENTIALS { get { if (!_MANAGE_DEVICE_POLICY_LOCK_CREDENTIALSReady) { _MANAGE_DEVICE_POLICY_LOCK_CREDENTIALSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_LOCK_CREDENTIALS"); _MANAGE_DEVICE_POLICY_LOCK_CREDENTIALSReady = true; } return _MANAGE_DEVICE_POLICY_LOCK_CREDENTIALSContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_LOCK_CREDENTIALSContent = default;
            private static bool _MANAGE_DEVICE_POLICY_LOCK_CREDENTIALSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_LOCK_TASK"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_LOCK_TASK { get { if (!_MANAGE_DEVICE_POLICY_LOCK_TASKReady) { _MANAGE_DEVICE_POLICY_LOCK_TASKContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_LOCK_TASK"); _MANAGE_DEVICE_POLICY_LOCK_TASKReady = true; } return _MANAGE_DEVICE_POLICY_LOCK_TASKContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_LOCK_TASKContent = default;
            private static bool _MANAGE_DEVICE_POLICY_LOCK_TASKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_MANAGED_SUBSCRIPTIONS"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_MANAGED_SUBSCRIPTIONS { get { if (!_MANAGE_DEVICE_POLICY_MANAGED_SUBSCRIPTIONSReady) { _MANAGE_DEVICE_POLICY_MANAGED_SUBSCRIPTIONSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_MANAGED_SUBSCRIPTIONS"); _MANAGE_DEVICE_POLICY_MANAGED_SUBSCRIPTIONSReady = true; } return _MANAGE_DEVICE_POLICY_MANAGED_SUBSCRIPTIONSContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_MANAGED_SUBSCRIPTIONSContent = default;
            private static bool _MANAGE_DEVICE_POLICY_MANAGED_SUBSCRIPTIONSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_METERED_DATA"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_METERED_DATA { get { if (!_MANAGE_DEVICE_POLICY_METERED_DATAReady) { _MANAGE_DEVICE_POLICY_METERED_DATAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_METERED_DATA"); _MANAGE_DEVICE_POLICY_METERED_DATAReady = true; } return _MANAGE_DEVICE_POLICY_METERED_DATAContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_METERED_DATAContent = default;
            private static bool _MANAGE_DEVICE_POLICY_METERED_DATAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_MICROPHONE"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_MICROPHONE { get { if (!_MANAGE_DEVICE_POLICY_MICROPHONEReady) { _MANAGE_DEVICE_POLICY_MICROPHONEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_MICROPHONE"); _MANAGE_DEVICE_POLICY_MICROPHONEReady = true; } return _MANAGE_DEVICE_POLICY_MICROPHONEContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_MICROPHONEContent = default;
            private static bool _MANAGE_DEVICE_POLICY_MICROPHONEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_MICROPHONE_TOGGLE"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_MICROPHONE_TOGGLE { get { if (!_MANAGE_DEVICE_POLICY_MICROPHONE_TOGGLEReady) { _MANAGE_DEVICE_POLICY_MICROPHONE_TOGGLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_MICROPHONE_TOGGLE"); _MANAGE_DEVICE_POLICY_MICROPHONE_TOGGLEReady = true; } return _MANAGE_DEVICE_POLICY_MICROPHONE_TOGGLEContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_MICROPHONE_TOGGLEContent = default;
            private static bool _MANAGE_DEVICE_POLICY_MICROPHONE_TOGGLEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_MOBILE_NETWORK"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_MOBILE_NETWORK { get { if (!_MANAGE_DEVICE_POLICY_MOBILE_NETWORKReady) { _MANAGE_DEVICE_POLICY_MOBILE_NETWORKContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_MOBILE_NETWORK"); _MANAGE_DEVICE_POLICY_MOBILE_NETWORKReady = true; } return _MANAGE_DEVICE_POLICY_MOBILE_NETWORKContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_MOBILE_NETWORKContent = default;
            private static bool _MANAGE_DEVICE_POLICY_MOBILE_NETWORKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_MODIFY_USERS"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_MODIFY_USERS { get { if (!_MANAGE_DEVICE_POLICY_MODIFY_USERSReady) { _MANAGE_DEVICE_POLICY_MODIFY_USERSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_MODIFY_USERS"); _MANAGE_DEVICE_POLICY_MODIFY_USERSReady = true; } return _MANAGE_DEVICE_POLICY_MODIFY_USERSContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_MODIFY_USERSContent = default;
            private static bool _MANAGE_DEVICE_POLICY_MODIFY_USERSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_MTE"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_MTE { get { if (!_MANAGE_DEVICE_POLICY_MTEReady) { _MANAGE_DEVICE_POLICY_MTEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_MTE"); _MANAGE_DEVICE_POLICY_MTEReady = true; } return _MANAGE_DEVICE_POLICY_MTEContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_MTEContent = default;
            private static bool _MANAGE_DEVICE_POLICY_MTEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_NEARBY_COMMUNICATION"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_NEARBY_COMMUNICATION { get { if (!_MANAGE_DEVICE_POLICY_NEARBY_COMMUNICATIONReady) { _MANAGE_DEVICE_POLICY_NEARBY_COMMUNICATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_NEARBY_COMMUNICATION"); _MANAGE_DEVICE_POLICY_NEARBY_COMMUNICATIONReady = true; } return _MANAGE_DEVICE_POLICY_NEARBY_COMMUNICATIONContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_NEARBY_COMMUNICATIONContent = default;
            private static bool _MANAGE_DEVICE_POLICY_NEARBY_COMMUNICATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_NETWORK_LOGGING"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_NETWORK_LOGGING { get { if (!_MANAGE_DEVICE_POLICY_NETWORK_LOGGINGReady) { _MANAGE_DEVICE_POLICY_NETWORK_LOGGINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_NETWORK_LOGGING"); _MANAGE_DEVICE_POLICY_NETWORK_LOGGINGReady = true; } return _MANAGE_DEVICE_POLICY_NETWORK_LOGGINGContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_NETWORK_LOGGINGContent = default;
            private static bool _MANAGE_DEVICE_POLICY_NETWORK_LOGGINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_ORGANIZATION_IDENTITY"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_ORGANIZATION_IDENTITY { get { if (!_MANAGE_DEVICE_POLICY_ORGANIZATION_IDENTITYReady) { _MANAGE_DEVICE_POLICY_ORGANIZATION_IDENTITYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_ORGANIZATION_IDENTITY"); _MANAGE_DEVICE_POLICY_ORGANIZATION_IDENTITYReady = true; } return _MANAGE_DEVICE_POLICY_ORGANIZATION_IDENTITYContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_ORGANIZATION_IDENTITYContent = default;
            private static bool _MANAGE_DEVICE_POLICY_ORGANIZATION_IDENTITYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_OVERRIDE_APN"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_OVERRIDE_APN { get { if (!_MANAGE_DEVICE_POLICY_OVERRIDE_APNReady) { _MANAGE_DEVICE_POLICY_OVERRIDE_APNContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_OVERRIDE_APN"); _MANAGE_DEVICE_POLICY_OVERRIDE_APNReady = true; } return _MANAGE_DEVICE_POLICY_OVERRIDE_APNContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_OVERRIDE_APNContent = default;
            private static bool _MANAGE_DEVICE_POLICY_OVERRIDE_APNReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_PACKAGE_STATE"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_PACKAGE_STATE { get { if (!_MANAGE_DEVICE_POLICY_PACKAGE_STATEReady) { _MANAGE_DEVICE_POLICY_PACKAGE_STATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_PACKAGE_STATE"); _MANAGE_DEVICE_POLICY_PACKAGE_STATEReady = true; } return _MANAGE_DEVICE_POLICY_PACKAGE_STATEContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_PACKAGE_STATEContent = default;
            private static bool _MANAGE_DEVICE_POLICY_PACKAGE_STATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_PHYSICAL_MEDIA"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_PHYSICAL_MEDIA { get { if (!_MANAGE_DEVICE_POLICY_PHYSICAL_MEDIAReady) { _MANAGE_DEVICE_POLICY_PHYSICAL_MEDIAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_PHYSICAL_MEDIA"); _MANAGE_DEVICE_POLICY_PHYSICAL_MEDIAReady = true; } return _MANAGE_DEVICE_POLICY_PHYSICAL_MEDIAContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_PHYSICAL_MEDIAContent = default;
            private static bool _MANAGE_DEVICE_POLICY_PHYSICAL_MEDIAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_PRINTING"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_PRINTING { get { if (!_MANAGE_DEVICE_POLICY_PRINTINGReady) { _MANAGE_DEVICE_POLICY_PRINTINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_PRINTING"); _MANAGE_DEVICE_POLICY_PRINTINGReady = true; } return _MANAGE_DEVICE_POLICY_PRINTINGContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_PRINTINGContent = default;
            private static bool _MANAGE_DEVICE_POLICY_PRINTINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_PRIVATE_DNS"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_PRIVATE_DNS { get { if (!_MANAGE_DEVICE_POLICY_PRIVATE_DNSReady) { _MANAGE_DEVICE_POLICY_PRIVATE_DNSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_PRIVATE_DNS"); _MANAGE_DEVICE_POLICY_PRIVATE_DNSReady = true; } return _MANAGE_DEVICE_POLICY_PRIVATE_DNSContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_PRIVATE_DNSContent = default;
            private static bool _MANAGE_DEVICE_POLICY_PRIVATE_DNSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_PROFILE_INTERACTION"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_PROFILE_INTERACTION { get { if (!_MANAGE_DEVICE_POLICY_PROFILE_INTERACTIONReady) { _MANAGE_DEVICE_POLICY_PROFILE_INTERACTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_PROFILE_INTERACTION"); _MANAGE_DEVICE_POLICY_PROFILE_INTERACTIONReady = true; } return _MANAGE_DEVICE_POLICY_PROFILE_INTERACTIONContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_PROFILE_INTERACTIONContent = default;
            private static bool _MANAGE_DEVICE_POLICY_PROFILE_INTERACTIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_PROFILES"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_PROFILES { get { if (!_MANAGE_DEVICE_POLICY_PROFILESReady) { _MANAGE_DEVICE_POLICY_PROFILESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_PROFILES"); _MANAGE_DEVICE_POLICY_PROFILESReady = true; } return _MANAGE_DEVICE_POLICY_PROFILESContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_PROFILESContent = default;
            private static bool _MANAGE_DEVICE_POLICY_PROFILESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_PROXY"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_PROXY { get { if (!_MANAGE_DEVICE_POLICY_PROXYReady) { _MANAGE_DEVICE_POLICY_PROXYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_PROXY"); _MANAGE_DEVICE_POLICY_PROXYReady = true; } return _MANAGE_DEVICE_POLICY_PROXYContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_PROXYContent = default;
            private static bool _MANAGE_DEVICE_POLICY_PROXYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_QUERY_SYSTEM_UPDATES"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_QUERY_SYSTEM_UPDATES { get { if (!_MANAGE_DEVICE_POLICY_QUERY_SYSTEM_UPDATESReady) { _MANAGE_DEVICE_POLICY_QUERY_SYSTEM_UPDATESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_QUERY_SYSTEM_UPDATES"); _MANAGE_DEVICE_POLICY_QUERY_SYSTEM_UPDATESReady = true; } return _MANAGE_DEVICE_POLICY_QUERY_SYSTEM_UPDATESContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_QUERY_SYSTEM_UPDATESContent = default;
            private static bool _MANAGE_DEVICE_POLICY_QUERY_SYSTEM_UPDATESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_RESET_PASSWORD"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_RESET_PASSWORD { get { if (!_MANAGE_DEVICE_POLICY_RESET_PASSWORDReady) { _MANAGE_DEVICE_POLICY_RESET_PASSWORDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_RESET_PASSWORD"); _MANAGE_DEVICE_POLICY_RESET_PASSWORDReady = true; } return _MANAGE_DEVICE_POLICY_RESET_PASSWORDContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_RESET_PASSWORDContent = default;
            private static bool _MANAGE_DEVICE_POLICY_RESET_PASSWORDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_RESTRICT_PRIVATE_DNS"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_RESTRICT_PRIVATE_DNS { get { if (!_MANAGE_DEVICE_POLICY_RESTRICT_PRIVATE_DNSReady) { _MANAGE_DEVICE_POLICY_RESTRICT_PRIVATE_DNSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_RESTRICT_PRIVATE_DNS"); _MANAGE_DEVICE_POLICY_RESTRICT_PRIVATE_DNSReady = true; } return _MANAGE_DEVICE_POLICY_RESTRICT_PRIVATE_DNSContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_RESTRICT_PRIVATE_DNSContent = default;
            private static bool _MANAGE_DEVICE_POLICY_RESTRICT_PRIVATE_DNSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_RUN_IN_BACKGROUND"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_RUN_IN_BACKGROUND { get { if (!_MANAGE_DEVICE_POLICY_RUN_IN_BACKGROUNDReady) { _MANAGE_DEVICE_POLICY_RUN_IN_BACKGROUNDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_RUN_IN_BACKGROUND"); _MANAGE_DEVICE_POLICY_RUN_IN_BACKGROUNDReady = true; } return _MANAGE_DEVICE_POLICY_RUN_IN_BACKGROUNDContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_RUN_IN_BACKGROUNDContent = default;
            private static bool _MANAGE_DEVICE_POLICY_RUN_IN_BACKGROUNDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_RUNTIME_PERMISSIONS"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_RUNTIME_PERMISSIONS { get { if (!_MANAGE_DEVICE_POLICY_RUNTIME_PERMISSIONSReady) { _MANAGE_DEVICE_POLICY_RUNTIME_PERMISSIONSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_RUNTIME_PERMISSIONS"); _MANAGE_DEVICE_POLICY_RUNTIME_PERMISSIONSReady = true; } return _MANAGE_DEVICE_POLICY_RUNTIME_PERMISSIONSContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_RUNTIME_PERMISSIONSContent = default;
            private static bool _MANAGE_DEVICE_POLICY_RUNTIME_PERMISSIONSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_SAFE_BOOT"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_SAFE_BOOT { get { if (!_MANAGE_DEVICE_POLICY_SAFE_BOOTReady) { _MANAGE_DEVICE_POLICY_SAFE_BOOTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_SAFE_BOOT"); _MANAGE_DEVICE_POLICY_SAFE_BOOTReady = true; } return _MANAGE_DEVICE_POLICY_SAFE_BOOTContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_SAFE_BOOTContent = default;
            private static bool _MANAGE_DEVICE_POLICY_SAFE_BOOTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_SCREEN_CAPTURE"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_SCREEN_CAPTURE { get { if (!_MANAGE_DEVICE_POLICY_SCREEN_CAPTUREReady) { _MANAGE_DEVICE_POLICY_SCREEN_CAPTUREContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_SCREEN_CAPTURE"); _MANAGE_DEVICE_POLICY_SCREEN_CAPTUREReady = true; } return _MANAGE_DEVICE_POLICY_SCREEN_CAPTUREContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_SCREEN_CAPTUREContent = default;
            private static bool _MANAGE_DEVICE_POLICY_SCREEN_CAPTUREReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_SCREEN_CONTENT"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_SCREEN_CONTENT { get { if (!_MANAGE_DEVICE_POLICY_SCREEN_CONTENTReady) { _MANAGE_DEVICE_POLICY_SCREEN_CONTENTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_SCREEN_CONTENT"); _MANAGE_DEVICE_POLICY_SCREEN_CONTENTReady = true; } return _MANAGE_DEVICE_POLICY_SCREEN_CONTENTContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_SCREEN_CONTENTContent = default;
            private static bool _MANAGE_DEVICE_POLICY_SCREEN_CONTENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_SECURITY_LOGGING"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_SECURITY_LOGGING { get { if (!_MANAGE_DEVICE_POLICY_SECURITY_LOGGINGReady) { _MANAGE_DEVICE_POLICY_SECURITY_LOGGINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_SECURITY_LOGGING"); _MANAGE_DEVICE_POLICY_SECURITY_LOGGINGReady = true; } return _MANAGE_DEVICE_POLICY_SECURITY_LOGGINGContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_SECURITY_LOGGINGContent = default;
            private static bool _MANAGE_DEVICE_POLICY_SECURITY_LOGGINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_SETTINGS"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_SETTINGS { get { if (!_MANAGE_DEVICE_POLICY_SETTINGSReady) { _MANAGE_DEVICE_POLICY_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_SETTINGS"); _MANAGE_DEVICE_POLICY_SETTINGSReady = true; } return _MANAGE_DEVICE_POLICY_SETTINGSContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_SETTINGSContent = default;
            private static bool _MANAGE_DEVICE_POLICY_SETTINGSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_SMS"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_SMS { get { if (!_MANAGE_DEVICE_POLICY_SMSReady) { _MANAGE_DEVICE_POLICY_SMSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_SMS"); _MANAGE_DEVICE_POLICY_SMSReady = true; } return _MANAGE_DEVICE_POLICY_SMSContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_SMSContent = default;
            private static bool _MANAGE_DEVICE_POLICY_SMSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_STATUS_BAR"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_STATUS_BAR { get { if (!_MANAGE_DEVICE_POLICY_STATUS_BARReady) { _MANAGE_DEVICE_POLICY_STATUS_BARContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_STATUS_BAR"); _MANAGE_DEVICE_POLICY_STATUS_BARReady = true; } return _MANAGE_DEVICE_POLICY_STATUS_BARContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_STATUS_BARContent = default;
            private static bool _MANAGE_DEVICE_POLICY_STATUS_BARReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_SUPPORT_MESSAGE"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_SUPPORT_MESSAGE { get { if (!_MANAGE_DEVICE_POLICY_SUPPORT_MESSAGEReady) { _MANAGE_DEVICE_POLICY_SUPPORT_MESSAGEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_SUPPORT_MESSAGE"); _MANAGE_DEVICE_POLICY_SUPPORT_MESSAGEReady = true; } return _MANAGE_DEVICE_POLICY_SUPPORT_MESSAGEContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_SUPPORT_MESSAGEContent = default;
            private static bool _MANAGE_DEVICE_POLICY_SUPPORT_MESSAGEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_SUSPEND_PERSONAL_APPS"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_SUSPEND_PERSONAL_APPS { get { if (!_MANAGE_DEVICE_POLICY_SUSPEND_PERSONAL_APPSReady) { _MANAGE_DEVICE_POLICY_SUSPEND_PERSONAL_APPSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_SUSPEND_PERSONAL_APPS"); _MANAGE_DEVICE_POLICY_SUSPEND_PERSONAL_APPSReady = true; } return _MANAGE_DEVICE_POLICY_SUSPEND_PERSONAL_APPSContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_SUSPEND_PERSONAL_APPSContent = default;
            private static bool _MANAGE_DEVICE_POLICY_SUSPEND_PERSONAL_APPSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_SYSTEM_APPS"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_SYSTEM_APPS { get { if (!_MANAGE_DEVICE_POLICY_SYSTEM_APPSReady) { _MANAGE_DEVICE_POLICY_SYSTEM_APPSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_SYSTEM_APPS"); _MANAGE_DEVICE_POLICY_SYSTEM_APPSReady = true; } return _MANAGE_DEVICE_POLICY_SYSTEM_APPSContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_SYSTEM_APPSContent = default;
            private static bool _MANAGE_DEVICE_POLICY_SYSTEM_APPSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_SYSTEM_DIALOGS"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_SYSTEM_DIALOGS { get { if (!_MANAGE_DEVICE_POLICY_SYSTEM_DIALOGSReady) { _MANAGE_DEVICE_POLICY_SYSTEM_DIALOGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_SYSTEM_DIALOGS"); _MANAGE_DEVICE_POLICY_SYSTEM_DIALOGSReady = true; } return _MANAGE_DEVICE_POLICY_SYSTEM_DIALOGSContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_SYSTEM_DIALOGSContent = default;
            private static bool _MANAGE_DEVICE_POLICY_SYSTEM_DIALOGSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_SYSTEM_UPDATES"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_SYSTEM_UPDATES { get { if (!_MANAGE_DEVICE_POLICY_SYSTEM_UPDATESReady) { _MANAGE_DEVICE_POLICY_SYSTEM_UPDATESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_SYSTEM_UPDATES"); _MANAGE_DEVICE_POLICY_SYSTEM_UPDATESReady = true; } return _MANAGE_DEVICE_POLICY_SYSTEM_UPDATESContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_SYSTEM_UPDATESContent = default;
            private static bool _MANAGE_DEVICE_POLICY_SYSTEM_UPDATESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_TIME"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_TIME { get { if (!_MANAGE_DEVICE_POLICY_TIMEReady) { _MANAGE_DEVICE_POLICY_TIMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_TIME"); _MANAGE_DEVICE_POLICY_TIMEReady = true; } return _MANAGE_DEVICE_POLICY_TIMEContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_TIMEContent = default;
            private static bool _MANAGE_DEVICE_POLICY_TIMEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_USB_DATA_SIGNALLING"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_USB_DATA_SIGNALLING { get { if (!_MANAGE_DEVICE_POLICY_USB_DATA_SIGNALLINGReady) { _MANAGE_DEVICE_POLICY_USB_DATA_SIGNALLINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_USB_DATA_SIGNALLING"); _MANAGE_DEVICE_POLICY_USB_DATA_SIGNALLINGReady = true; } return _MANAGE_DEVICE_POLICY_USB_DATA_SIGNALLINGContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_USB_DATA_SIGNALLINGContent = default;
            private static bool _MANAGE_DEVICE_POLICY_USB_DATA_SIGNALLINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_USB_FILE_TRANSFER"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_USB_FILE_TRANSFER { get { if (!_MANAGE_DEVICE_POLICY_USB_FILE_TRANSFERReady) { _MANAGE_DEVICE_POLICY_USB_FILE_TRANSFERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_USB_FILE_TRANSFER"); _MANAGE_DEVICE_POLICY_USB_FILE_TRANSFERReady = true; } return _MANAGE_DEVICE_POLICY_USB_FILE_TRANSFERContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_USB_FILE_TRANSFERContent = default;
            private static bool _MANAGE_DEVICE_POLICY_USB_FILE_TRANSFERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_USERS"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_USERS { get { if (!_MANAGE_DEVICE_POLICY_USERSReady) { _MANAGE_DEVICE_POLICY_USERSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_USERS"); _MANAGE_DEVICE_POLICY_USERSReady = true; } return _MANAGE_DEVICE_POLICY_USERSContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_USERSContent = default;
            private static bool _MANAGE_DEVICE_POLICY_USERSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_VPN"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_VPN { get { if (!_MANAGE_DEVICE_POLICY_VPNReady) { _MANAGE_DEVICE_POLICY_VPNContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_VPN"); _MANAGE_DEVICE_POLICY_VPNReady = true; } return _MANAGE_DEVICE_POLICY_VPNContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_VPNContent = default;
            private static bool _MANAGE_DEVICE_POLICY_VPNReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_WALLPAPER"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_WALLPAPER { get { if (!_MANAGE_DEVICE_POLICY_WALLPAPERReady) { _MANAGE_DEVICE_POLICY_WALLPAPERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_WALLPAPER"); _MANAGE_DEVICE_POLICY_WALLPAPERReady = true; } return _MANAGE_DEVICE_POLICY_WALLPAPERContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_WALLPAPERContent = default;
            private static bool _MANAGE_DEVICE_POLICY_WALLPAPERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_WIFI"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_WIFI { get { if (!_MANAGE_DEVICE_POLICY_WIFIReady) { _MANAGE_DEVICE_POLICY_WIFIContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_WIFI"); _MANAGE_DEVICE_POLICY_WIFIReady = true; } return _MANAGE_DEVICE_POLICY_WIFIContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_WIFIContent = default;
            private static bool _MANAGE_DEVICE_POLICY_WIFIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_WINDOWS"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_WINDOWS { get { if (!_MANAGE_DEVICE_POLICY_WINDOWSReady) { _MANAGE_DEVICE_POLICY_WINDOWSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_WINDOWS"); _MANAGE_DEVICE_POLICY_WINDOWSReady = true; } return _MANAGE_DEVICE_POLICY_WINDOWSContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_WINDOWSContent = default;
            private static bool _MANAGE_DEVICE_POLICY_WINDOWSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DEVICE_POLICY_WIPE_DATA"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DEVICE_POLICY_WIPE_DATA { get { if (!_MANAGE_DEVICE_POLICY_WIPE_DATAReady) { _MANAGE_DEVICE_POLICY_WIPE_DATAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DEVICE_POLICY_WIPE_DATA"); _MANAGE_DEVICE_POLICY_WIPE_DATAReady = true; } return _MANAGE_DEVICE_POLICY_WIPE_DATAContent; } }
            private static Java.Lang.String _MANAGE_DEVICE_POLICY_WIPE_DATAContent = default;
            private static bool _MANAGE_DEVICE_POLICY_WIPE_DATAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DOCUMENTS"/>
            /// </summary>
            public static Java.Lang.String MANAGE_DOCUMENTS { get { if (!_MANAGE_DOCUMENTSReady) { _MANAGE_DOCUMENTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_DOCUMENTS"); _MANAGE_DOCUMENTSReady = true; } return _MANAGE_DOCUMENTSContent; } }
            private static Java.Lang.String _MANAGE_DOCUMENTSContent = default;
            private static bool _MANAGE_DOCUMENTSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_EXTERNAL_STORAGE"/>
            /// </summary>
            public static Java.Lang.String MANAGE_EXTERNAL_STORAGE { get { if (!_MANAGE_EXTERNAL_STORAGEReady) { _MANAGE_EXTERNAL_STORAGEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_EXTERNAL_STORAGE"); _MANAGE_EXTERNAL_STORAGEReady = true; } return _MANAGE_EXTERNAL_STORAGEContent; } }
            private static Java.Lang.String _MANAGE_EXTERNAL_STORAGEContent = default;
            private static bool _MANAGE_EXTERNAL_STORAGEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_MEDIA"/>
            /// </summary>
            public static Java.Lang.String MANAGE_MEDIA { get { if (!_MANAGE_MEDIAReady) { _MANAGE_MEDIAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_MEDIA"); _MANAGE_MEDIAReady = true; } return _MANAGE_MEDIAContent; } }
            private static Java.Lang.String _MANAGE_MEDIAContent = default;
            private static bool _MANAGE_MEDIAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_ONGOING_CALLS"/>
            /// </summary>
            public static Java.Lang.String MANAGE_ONGOING_CALLS { get { if (!_MANAGE_ONGOING_CALLSReady) { _MANAGE_ONGOING_CALLSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_ONGOING_CALLS"); _MANAGE_ONGOING_CALLSReady = true; } return _MANAGE_ONGOING_CALLSContent; } }
            private static Java.Lang.String _MANAGE_ONGOING_CALLSContent = default;
            private static bool _MANAGE_ONGOING_CALLSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_OWN_CALLS"/>
            /// </summary>
            public static Java.Lang.String MANAGE_OWN_CALLS { get { if (!_MANAGE_OWN_CALLSReady) { _MANAGE_OWN_CALLSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_OWN_CALLS"); _MANAGE_OWN_CALLSReady = true; } return _MANAGE_OWN_CALLSContent; } }
            private static Java.Lang.String _MANAGE_OWN_CALLSContent = default;
            private static bool _MANAGE_OWN_CALLSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_WIFI_INTERFACES"/>
            /// </summary>
            public static Java.Lang.String MANAGE_WIFI_INTERFACES { get { if (!_MANAGE_WIFI_INTERFACESReady) { _MANAGE_WIFI_INTERFACESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_WIFI_INTERFACES"); _MANAGE_WIFI_INTERFACESReady = true; } return _MANAGE_WIFI_INTERFACESContent; } }
            private static Java.Lang.String _MANAGE_WIFI_INTERFACESContent = default;
            private static bool _MANAGE_WIFI_INTERFACESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_WIFI_NETWORK_SELECTION"/>
            /// </summary>
            public static Java.Lang.String MANAGE_WIFI_NETWORK_SELECTION { get { if (!_MANAGE_WIFI_NETWORK_SELECTIONReady) { _MANAGE_WIFI_NETWORK_SELECTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANAGE_WIFI_NETWORK_SELECTION"); _MANAGE_WIFI_NETWORK_SELECTIONReady = true; } return _MANAGE_WIFI_NETWORK_SELECTIONContent; } }
            private static Java.Lang.String _MANAGE_WIFI_NETWORK_SELECTIONContent = default;
            private static bool _MANAGE_WIFI_NETWORK_SELECTIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MASTER_CLEAR"/>
            /// </summary>
            public static Java.Lang.String MASTER_CLEAR { get { if (!_MASTER_CLEARReady) { _MASTER_CLEARContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MASTER_CLEAR"); _MASTER_CLEARReady = true; } return _MASTER_CLEARContent; } }
            private static Java.Lang.String _MASTER_CLEARContent = default;
            private static bool _MASTER_CLEARReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MEDIA_CONTENT_CONTROL"/>
            /// </summary>
            public static Java.Lang.String MEDIA_CONTENT_CONTROL { get { if (!_MEDIA_CONTENT_CONTROLReady) { _MEDIA_CONTENT_CONTROLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MEDIA_CONTENT_CONTROL"); _MEDIA_CONTENT_CONTROLReady = true; } return _MEDIA_CONTENT_CONTROLContent; } }
            private static Java.Lang.String _MEDIA_CONTENT_CONTROLContent = default;
            private static bool _MEDIA_CONTENT_CONTROLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MEDIA_ROUTING_CONTROL"/>
            /// </summary>
            public static Java.Lang.String MEDIA_ROUTING_CONTROL { get { if (!_MEDIA_ROUTING_CONTROLReady) { _MEDIA_ROUTING_CONTROLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MEDIA_ROUTING_CONTROL"); _MEDIA_ROUTING_CONTROLReady = true; } return _MEDIA_ROUTING_CONTROLContent; } }
            private static Java.Lang.String _MEDIA_ROUTING_CONTROLContent = default;
            private static bool _MEDIA_ROUTING_CONTROLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MODIFY_AUDIO_SETTINGS"/>
            /// </summary>
            public static Java.Lang.String MODIFY_AUDIO_SETTINGS { get { if (!_MODIFY_AUDIO_SETTINGSReady) { _MODIFY_AUDIO_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MODIFY_AUDIO_SETTINGS"); _MODIFY_AUDIO_SETTINGSReady = true; } return _MODIFY_AUDIO_SETTINGSContent; } }
            private static Java.Lang.String _MODIFY_AUDIO_SETTINGSContent = default;
            private static bool _MODIFY_AUDIO_SETTINGSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MODIFY_PHONE_STATE"/>
            /// </summary>
            public static Java.Lang.String MODIFY_PHONE_STATE { get { if (!_MODIFY_PHONE_STATEReady) { _MODIFY_PHONE_STATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MODIFY_PHONE_STATE"); _MODIFY_PHONE_STATEReady = true; } return _MODIFY_PHONE_STATEContent; } }
            private static Java.Lang.String _MODIFY_PHONE_STATEContent = default;
            private static bool _MODIFY_PHONE_STATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MOUNT_FORMAT_FILESYSTEMS"/>
            /// </summary>
            public static Java.Lang.String MOUNT_FORMAT_FILESYSTEMS { get { if (!_MOUNT_FORMAT_FILESYSTEMSReady) { _MOUNT_FORMAT_FILESYSTEMSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MOUNT_FORMAT_FILESYSTEMS"); _MOUNT_FORMAT_FILESYSTEMSReady = true; } return _MOUNT_FORMAT_FILESYSTEMSContent; } }
            private static Java.Lang.String _MOUNT_FORMAT_FILESYSTEMSContent = default;
            private static bool _MOUNT_FORMAT_FILESYSTEMSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#MOUNT_UNMOUNT_FILESYSTEMS"/>
            /// </summary>
            public static Java.Lang.String MOUNT_UNMOUNT_FILESYSTEMS { get { if (!_MOUNT_UNMOUNT_FILESYSTEMSReady) { _MOUNT_UNMOUNT_FILESYSTEMSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MOUNT_UNMOUNT_FILESYSTEMS"); _MOUNT_UNMOUNT_FILESYSTEMSReady = true; } return _MOUNT_UNMOUNT_FILESYSTEMSContent; } }
            private static Java.Lang.String _MOUNT_UNMOUNT_FILESYSTEMSContent = default;
            private static bool _MOUNT_UNMOUNT_FILESYSTEMSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#NEARBY_WIFI_DEVICES"/>
            /// </summary>
            public static Java.Lang.String NEARBY_WIFI_DEVICES { get { if (!_NEARBY_WIFI_DEVICESReady) { _NEARBY_WIFI_DEVICESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NEARBY_WIFI_DEVICES"); _NEARBY_WIFI_DEVICESReady = true; } return _NEARBY_WIFI_DEVICESContent; } }
            private static Java.Lang.String _NEARBY_WIFI_DEVICESContent = default;
            private static bool _NEARBY_WIFI_DEVICESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#NFC"/>
            /// </summary>
            public static Java.Lang.String NFC { get { if (!_NFCReady) { _NFCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NFC"); _NFCReady = true; } return _NFCContent; } }
            private static Java.Lang.String _NFCContent = default;
            private static bool _NFCReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#NFC_PREFERRED_PAYMENT_INFO"/>
            /// </summary>
            public static Java.Lang.String NFC_PREFERRED_PAYMENT_INFO { get { if (!_NFC_PREFERRED_PAYMENT_INFOReady) { _NFC_PREFERRED_PAYMENT_INFOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NFC_PREFERRED_PAYMENT_INFO"); _NFC_PREFERRED_PAYMENT_INFOReady = true; } return _NFC_PREFERRED_PAYMENT_INFOContent; } }
            private static Java.Lang.String _NFC_PREFERRED_PAYMENT_INFOContent = default;
            private static bool _NFC_PREFERRED_PAYMENT_INFOReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#NFC_TRANSACTION_EVENT"/>
            /// </summary>
            public static Java.Lang.String NFC_TRANSACTION_EVENT { get { if (!_NFC_TRANSACTION_EVENTReady) { _NFC_TRANSACTION_EVENTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NFC_TRANSACTION_EVENT"); _NFC_TRANSACTION_EVENTReady = true; } return _NFC_TRANSACTION_EVENTContent; } }
            private static Java.Lang.String _NFC_TRANSACTION_EVENTContent = default;
            private static bool _NFC_TRANSACTION_EVENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#OVERRIDE_WIFI_CONFIG"/>
            /// </summary>
            public static Java.Lang.String OVERRIDE_WIFI_CONFIG { get { if (!_OVERRIDE_WIFI_CONFIGReady) { _OVERRIDE_WIFI_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OVERRIDE_WIFI_CONFIG"); _OVERRIDE_WIFI_CONFIGReady = true; } return _OVERRIDE_WIFI_CONFIGContent; } }
            private static Java.Lang.String _OVERRIDE_WIFI_CONFIGContent = default;
            private static bool _OVERRIDE_WIFI_CONFIGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#PACKAGE_USAGE_STATS"/>
            /// </summary>
            public static Java.Lang.String PACKAGE_USAGE_STATS { get { if (!_PACKAGE_USAGE_STATSReady) { _PACKAGE_USAGE_STATSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PACKAGE_USAGE_STATS"); _PACKAGE_USAGE_STATSReady = true; } return _PACKAGE_USAGE_STATSContent; } }
            private static Java.Lang.String _PACKAGE_USAGE_STATSContent = default;
            private static bool _PACKAGE_USAGE_STATSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#PERSISTENT_ACTIVITY"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String PERSISTENT_ACTIVITY { get { if (!_PERSISTENT_ACTIVITYReady) { _PERSISTENT_ACTIVITYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PERSISTENT_ACTIVITY"); _PERSISTENT_ACTIVITYReady = true; } return _PERSISTENT_ACTIVITYContent; } }
            private static Java.Lang.String _PERSISTENT_ACTIVITYContent = default;
            private static bool _PERSISTENT_ACTIVITYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#POST_NOTIFICATIONS"/>
            /// </summary>
            public static Java.Lang.String POST_NOTIFICATIONS { get { if (!_POST_NOTIFICATIONSReady) { _POST_NOTIFICATIONSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "POST_NOTIFICATIONS"); _POST_NOTIFICATIONSReady = true; } return _POST_NOTIFICATIONSContent; } }
            private static Java.Lang.String _POST_NOTIFICATIONSContent = default;
            private static bool _POST_NOTIFICATIONSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#PROCESS_OUTGOING_CALLS"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String PROCESS_OUTGOING_CALLS { get { if (!_PROCESS_OUTGOING_CALLSReady) { _PROCESS_OUTGOING_CALLSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROCESS_OUTGOING_CALLS"); _PROCESS_OUTGOING_CALLSReady = true; } return _PROCESS_OUTGOING_CALLSContent; } }
            private static Java.Lang.String _PROCESS_OUTGOING_CALLSContent = default;
            private static bool _PROCESS_OUTGOING_CALLSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#PROVIDE_OWN_AUTOFILL_SUGGESTIONS"/>
            /// </summary>
            public static Java.Lang.String PROVIDE_OWN_AUTOFILL_SUGGESTIONS { get { if (!_PROVIDE_OWN_AUTOFILL_SUGGESTIONSReady) { _PROVIDE_OWN_AUTOFILL_SUGGESTIONSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROVIDE_OWN_AUTOFILL_SUGGESTIONS"); _PROVIDE_OWN_AUTOFILL_SUGGESTIONSReady = true; } return _PROVIDE_OWN_AUTOFILL_SUGGESTIONSContent; } }
            private static Java.Lang.String _PROVIDE_OWN_AUTOFILL_SUGGESTIONSContent = default;
            private static bool _PROVIDE_OWN_AUTOFILL_SUGGESTIONSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#PROVIDE_REMOTE_CREDENTIALS"/>
            /// </summary>
            public static Java.Lang.String PROVIDE_REMOTE_CREDENTIALS { get { if (!_PROVIDE_REMOTE_CREDENTIALSReady) { _PROVIDE_REMOTE_CREDENTIALSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROVIDE_REMOTE_CREDENTIALS"); _PROVIDE_REMOTE_CREDENTIALSReady = true; } return _PROVIDE_REMOTE_CREDENTIALSContent; } }
            private static Java.Lang.String _PROVIDE_REMOTE_CREDENTIALSContent = default;
            private static bool _PROVIDE_REMOTE_CREDENTIALSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#QUERY_ALL_PACKAGES"/>
            /// </summary>
            public static Java.Lang.String QUERY_ALL_PACKAGES { get { if (!_QUERY_ALL_PACKAGESReady) { _QUERY_ALL_PACKAGESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "QUERY_ALL_PACKAGES"); _QUERY_ALL_PACKAGESReady = true; } return _QUERY_ALL_PACKAGESContent; } }
            private static Java.Lang.String _QUERY_ALL_PACKAGESContent = default;
            private static bool _QUERY_ALL_PACKAGESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#READ_ASSISTANT_APP_SEARCH_DATA"/>
            /// </summary>
            public static Java.Lang.String READ_ASSISTANT_APP_SEARCH_DATA { get { if (!_READ_ASSISTANT_APP_SEARCH_DATAReady) { _READ_ASSISTANT_APP_SEARCH_DATAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "READ_ASSISTANT_APP_SEARCH_DATA"); _READ_ASSISTANT_APP_SEARCH_DATAReady = true; } return _READ_ASSISTANT_APP_SEARCH_DATAContent; } }
            private static Java.Lang.String _READ_ASSISTANT_APP_SEARCH_DATAContent = default;
            private static bool _READ_ASSISTANT_APP_SEARCH_DATAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#READ_BASIC_PHONE_STATE"/>
            /// </summary>
            public static Java.Lang.String READ_BASIC_PHONE_STATE { get { if (!_READ_BASIC_PHONE_STATEReady) { _READ_BASIC_PHONE_STATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "READ_BASIC_PHONE_STATE"); _READ_BASIC_PHONE_STATEReady = true; } return _READ_BASIC_PHONE_STATEContent; } }
            private static Java.Lang.String _READ_BASIC_PHONE_STATEContent = default;
            private static bool _READ_BASIC_PHONE_STATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#READ_CALENDAR"/>
            /// </summary>
            public static Java.Lang.String READ_CALENDAR { get { if (!_READ_CALENDARReady) { _READ_CALENDARContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "READ_CALENDAR"); _READ_CALENDARReady = true; } return _READ_CALENDARContent; } }
            private static Java.Lang.String _READ_CALENDARContent = default;
            private static bool _READ_CALENDARReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#READ_CALL_LOG"/>
            /// </summary>
            public static Java.Lang.String READ_CALL_LOG { get { if (!_READ_CALL_LOGReady) { _READ_CALL_LOGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "READ_CALL_LOG"); _READ_CALL_LOGReady = true; } return _READ_CALL_LOGContent; } }
            private static Java.Lang.String _READ_CALL_LOGContent = default;
            private static bool _READ_CALL_LOGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#READ_CONTACTS"/>
            /// </summary>
            public static Java.Lang.String READ_CONTACTS { get { if (!_READ_CONTACTSReady) { _READ_CONTACTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "READ_CONTACTS"); _READ_CONTACTSReady = true; } return _READ_CONTACTSContent; } }
            private static Java.Lang.String _READ_CONTACTSContent = default;
            private static bool _READ_CONTACTSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#READ_DROPBOX_DATA"/>
            /// </summary>
            public static Java.Lang.String READ_DROPBOX_DATA { get { if (!_READ_DROPBOX_DATAReady) { _READ_DROPBOX_DATAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "READ_DROPBOX_DATA"); _READ_DROPBOX_DATAReady = true; } return _READ_DROPBOX_DATAContent; } }
            private static Java.Lang.String _READ_DROPBOX_DATAContent = default;
            private static bool _READ_DROPBOX_DATAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#READ_EXTERNAL_STORAGE"/>
            /// </summary>
            public static Java.Lang.String READ_EXTERNAL_STORAGE { get { if (!_READ_EXTERNAL_STORAGEReady) { _READ_EXTERNAL_STORAGEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "READ_EXTERNAL_STORAGE"); _READ_EXTERNAL_STORAGEReady = true; } return _READ_EXTERNAL_STORAGEContent; } }
            private static Java.Lang.String _READ_EXTERNAL_STORAGEContent = default;
            private static bool _READ_EXTERNAL_STORAGEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#READ_HOME_APP_SEARCH_DATA"/>
            /// </summary>
            public static Java.Lang.String READ_HOME_APP_SEARCH_DATA { get { if (!_READ_HOME_APP_SEARCH_DATAReady) { _READ_HOME_APP_SEARCH_DATAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "READ_HOME_APP_SEARCH_DATA"); _READ_HOME_APP_SEARCH_DATAReady = true; } return _READ_HOME_APP_SEARCH_DATAContent; } }
            private static Java.Lang.String _READ_HOME_APP_SEARCH_DATAContent = default;
            private static bool _READ_HOME_APP_SEARCH_DATAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#READ_INPUT_STATE"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String READ_INPUT_STATE { get { if (!_READ_INPUT_STATEReady) { _READ_INPUT_STATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "READ_INPUT_STATE"); _READ_INPUT_STATEReady = true; } return _READ_INPUT_STATEContent; } }
            private static Java.Lang.String _READ_INPUT_STATEContent = default;
            private static bool _READ_INPUT_STATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#READ_LOGS"/>
            /// </summary>
            public static Java.Lang.String READ_LOGS { get { if (!_READ_LOGSReady) { _READ_LOGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "READ_LOGS"); _READ_LOGSReady = true; } return _READ_LOGSContent; } }
            private static Java.Lang.String _READ_LOGSContent = default;
            private static bool _READ_LOGSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#READ_MEDIA_AUDIO"/>
            /// </summary>
            public static Java.Lang.String READ_MEDIA_AUDIO { get { if (!_READ_MEDIA_AUDIOReady) { _READ_MEDIA_AUDIOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "READ_MEDIA_AUDIO"); _READ_MEDIA_AUDIOReady = true; } return _READ_MEDIA_AUDIOContent; } }
            private static Java.Lang.String _READ_MEDIA_AUDIOContent = default;
            private static bool _READ_MEDIA_AUDIOReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#READ_MEDIA_IMAGES"/>
            /// </summary>
            public static Java.Lang.String READ_MEDIA_IMAGES { get { if (!_READ_MEDIA_IMAGESReady) { _READ_MEDIA_IMAGESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "READ_MEDIA_IMAGES"); _READ_MEDIA_IMAGESReady = true; } return _READ_MEDIA_IMAGESContent; } }
            private static Java.Lang.String _READ_MEDIA_IMAGESContent = default;
            private static bool _READ_MEDIA_IMAGESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#READ_MEDIA_VIDEO"/>
            /// </summary>
            public static Java.Lang.String READ_MEDIA_VIDEO { get { if (!_READ_MEDIA_VIDEOReady) { _READ_MEDIA_VIDEOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "READ_MEDIA_VIDEO"); _READ_MEDIA_VIDEOReady = true; } return _READ_MEDIA_VIDEOContent; } }
            private static Java.Lang.String _READ_MEDIA_VIDEOContent = default;
            private static bool _READ_MEDIA_VIDEOReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#READ_MEDIA_VISUAL_USER_SELECTED"/>
            /// </summary>
            public static Java.Lang.String READ_MEDIA_VISUAL_USER_SELECTED { get { if (!_READ_MEDIA_VISUAL_USER_SELECTEDReady) { _READ_MEDIA_VISUAL_USER_SELECTEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "READ_MEDIA_VISUAL_USER_SELECTED"); _READ_MEDIA_VISUAL_USER_SELECTEDReady = true; } return _READ_MEDIA_VISUAL_USER_SELECTEDContent; } }
            private static Java.Lang.String _READ_MEDIA_VISUAL_USER_SELECTEDContent = default;
            private static bool _READ_MEDIA_VISUAL_USER_SELECTEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#READ_NEARBY_STREAMING_POLICY"/>
            /// </summary>
            public static Java.Lang.String READ_NEARBY_STREAMING_POLICY { get { if (!_READ_NEARBY_STREAMING_POLICYReady) { _READ_NEARBY_STREAMING_POLICYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "READ_NEARBY_STREAMING_POLICY"); _READ_NEARBY_STREAMING_POLICYReady = true; } return _READ_NEARBY_STREAMING_POLICYContent; } }
            private static Java.Lang.String _READ_NEARBY_STREAMING_POLICYContent = default;
            private static bool _READ_NEARBY_STREAMING_POLICYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#READ_PHONE_NUMBERS"/>
            /// </summary>
            public static Java.Lang.String READ_PHONE_NUMBERS { get { if (!_READ_PHONE_NUMBERSReady) { _READ_PHONE_NUMBERSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "READ_PHONE_NUMBERS"); _READ_PHONE_NUMBERSReady = true; } return _READ_PHONE_NUMBERSContent; } }
            private static Java.Lang.String _READ_PHONE_NUMBERSContent = default;
            private static bool _READ_PHONE_NUMBERSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#READ_PHONE_STATE"/>
            /// </summary>
            public static Java.Lang.String READ_PHONE_STATE { get { if (!_READ_PHONE_STATEReady) { _READ_PHONE_STATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "READ_PHONE_STATE"); _READ_PHONE_STATEReady = true; } return _READ_PHONE_STATEContent; } }
            private static Java.Lang.String _READ_PHONE_STATEContent = default;
            private static bool _READ_PHONE_STATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#READ_PRECISE_PHONE_STATE"/>
            /// </summary>
            public static Java.Lang.String READ_PRECISE_PHONE_STATE { get { if (!_READ_PRECISE_PHONE_STATEReady) { _READ_PRECISE_PHONE_STATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "READ_PRECISE_PHONE_STATE"); _READ_PRECISE_PHONE_STATEReady = true; } return _READ_PRECISE_PHONE_STATEContent; } }
            private static Java.Lang.String _READ_PRECISE_PHONE_STATEContent = default;
            private static bool _READ_PRECISE_PHONE_STATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#READ_SMS"/>
            /// </summary>
            public static Java.Lang.String READ_SMS { get { if (!_READ_SMSReady) { _READ_SMSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "READ_SMS"); _READ_SMSReady = true; } return _READ_SMSContent; } }
            private static Java.Lang.String _READ_SMSContent = default;
            private static bool _READ_SMSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#READ_SYNC_SETTINGS"/>
            /// </summary>
            public static Java.Lang.String READ_SYNC_SETTINGS { get { if (!_READ_SYNC_SETTINGSReady) { _READ_SYNC_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "READ_SYNC_SETTINGS"); _READ_SYNC_SETTINGSReady = true; } return _READ_SYNC_SETTINGSContent; } }
            private static Java.Lang.String _READ_SYNC_SETTINGSContent = default;
            private static bool _READ_SYNC_SETTINGSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#READ_SYNC_STATS"/>
            /// </summary>
            public static Java.Lang.String READ_SYNC_STATS { get { if (!_READ_SYNC_STATSReady) { _READ_SYNC_STATSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "READ_SYNC_STATS"); _READ_SYNC_STATSReady = true; } return _READ_SYNC_STATSContent; } }
            private static Java.Lang.String _READ_SYNC_STATSContent = default;
            private static bool _READ_SYNC_STATSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#READ_VOICEMAIL"/>
            /// </summary>
            public static Java.Lang.String READ_VOICEMAIL { get { if (!_READ_VOICEMAILReady) { _READ_VOICEMAILContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "READ_VOICEMAIL"); _READ_VOICEMAILReady = true; } return _READ_VOICEMAILContent; } }
            private static Java.Lang.String _READ_VOICEMAILContent = default;
            private static bool _READ_VOICEMAILReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#REBOOT"/>
            /// </summary>
            public static Java.Lang.String REBOOT { get { if (!_REBOOTReady) { _REBOOTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "REBOOT"); _REBOOTReady = true; } return _REBOOTContent; } }
            private static Java.Lang.String _REBOOTContent = default;
            private static bool _REBOOTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#RECEIVE_BOOT_COMPLETED"/>
            /// </summary>
            public static Java.Lang.String RECEIVE_BOOT_COMPLETED { get { if (!_RECEIVE_BOOT_COMPLETEDReady) { _RECEIVE_BOOT_COMPLETEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RECEIVE_BOOT_COMPLETED"); _RECEIVE_BOOT_COMPLETEDReady = true; } return _RECEIVE_BOOT_COMPLETEDContent; } }
            private static Java.Lang.String _RECEIVE_BOOT_COMPLETEDContent = default;
            private static bool _RECEIVE_BOOT_COMPLETEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#RECEIVE_MMS"/>
            /// </summary>
            public static Java.Lang.String RECEIVE_MMS { get { if (!_RECEIVE_MMSReady) { _RECEIVE_MMSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RECEIVE_MMS"); _RECEIVE_MMSReady = true; } return _RECEIVE_MMSContent; } }
            private static Java.Lang.String _RECEIVE_MMSContent = default;
            private static bool _RECEIVE_MMSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#RECEIVE_SMS"/>
            /// </summary>
            public static Java.Lang.String RECEIVE_SMS { get { if (!_RECEIVE_SMSReady) { _RECEIVE_SMSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RECEIVE_SMS"); _RECEIVE_SMSReady = true; } return _RECEIVE_SMSContent; } }
            private static Java.Lang.String _RECEIVE_SMSContent = default;
            private static bool _RECEIVE_SMSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#RECEIVE_WAP_PUSH"/>
            /// </summary>
            public static Java.Lang.String RECEIVE_WAP_PUSH { get { if (!_RECEIVE_WAP_PUSHReady) { _RECEIVE_WAP_PUSHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RECEIVE_WAP_PUSH"); _RECEIVE_WAP_PUSHReady = true; } return _RECEIVE_WAP_PUSHContent; } }
            private static Java.Lang.String _RECEIVE_WAP_PUSHContent = default;
            private static bool _RECEIVE_WAP_PUSHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#RECORD_AUDIO"/>
            /// </summary>
            public static Java.Lang.String RECORD_AUDIO { get { if (!_RECORD_AUDIOReady) { _RECORD_AUDIOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RECORD_AUDIO"); _RECORD_AUDIOReady = true; } return _RECORD_AUDIOContent; } }
            private static Java.Lang.String _RECORD_AUDIOContent = default;
            private static bool _RECORD_AUDIOReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#REORDER_TASKS"/>
            /// </summary>
            public static Java.Lang.String REORDER_TASKS { get { if (!_REORDER_TASKSReady) { _REORDER_TASKSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "REORDER_TASKS"); _REORDER_TASKSReady = true; } return _REORDER_TASKSContent; } }
            private static Java.Lang.String _REORDER_TASKSContent = default;
            private static bool _REORDER_TASKSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#REQUEST_COMPANION_PROFILE_APP_STREAMING"/>
            /// </summary>
            public static Java.Lang.String REQUEST_COMPANION_PROFILE_APP_STREAMING { get { if (!_REQUEST_COMPANION_PROFILE_APP_STREAMINGReady) { _REQUEST_COMPANION_PROFILE_APP_STREAMINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "REQUEST_COMPANION_PROFILE_APP_STREAMING"); _REQUEST_COMPANION_PROFILE_APP_STREAMINGReady = true; } return _REQUEST_COMPANION_PROFILE_APP_STREAMINGContent; } }
            private static Java.Lang.String _REQUEST_COMPANION_PROFILE_APP_STREAMINGContent = default;
            private static bool _REQUEST_COMPANION_PROFILE_APP_STREAMINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#REQUEST_COMPANION_PROFILE_AUTOMOTIVE_PROJECTION"/>
            /// </summary>
            public static Java.Lang.String REQUEST_COMPANION_PROFILE_AUTOMOTIVE_PROJECTION { get { if (!_REQUEST_COMPANION_PROFILE_AUTOMOTIVE_PROJECTIONReady) { _REQUEST_COMPANION_PROFILE_AUTOMOTIVE_PROJECTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "REQUEST_COMPANION_PROFILE_AUTOMOTIVE_PROJECTION"); _REQUEST_COMPANION_PROFILE_AUTOMOTIVE_PROJECTIONReady = true; } return _REQUEST_COMPANION_PROFILE_AUTOMOTIVE_PROJECTIONContent; } }
            private static Java.Lang.String _REQUEST_COMPANION_PROFILE_AUTOMOTIVE_PROJECTIONContent = default;
            private static bool _REQUEST_COMPANION_PROFILE_AUTOMOTIVE_PROJECTIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#REQUEST_COMPANION_PROFILE_COMPUTER"/>
            /// </summary>
            public static Java.Lang.String REQUEST_COMPANION_PROFILE_COMPUTER { get { if (!_REQUEST_COMPANION_PROFILE_COMPUTERReady) { _REQUEST_COMPANION_PROFILE_COMPUTERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "REQUEST_COMPANION_PROFILE_COMPUTER"); _REQUEST_COMPANION_PROFILE_COMPUTERReady = true; } return _REQUEST_COMPANION_PROFILE_COMPUTERContent; } }
            private static Java.Lang.String _REQUEST_COMPANION_PROFILE_COMPUTERContent = default;
            private static bool _REQUEST_COMPANION_PROFILE_COMPUTERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#REQUEST_COMPANION_PROFILE_GLASSES"/>
            /// </summary>
            public static Java.Lang.String REQUEST_COMPANION_PROFILE_GLASSES { get { if (!_REQUEST_COMPANION_PROFILE_GLASSESReady) { _REQUEST_COMPANION_PROFILE_GLASSESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "REQUEST_COMPANION_PROFILE_GLASSES"); _REQUEST_COMPANION_PROFILE_GLASSESReady = true; } return _REQUEST_COMPANION_PROFILE_GLASSESContent; } }
            private static Java.Lang.String _REQUEST_COMPANION_PROFILE_GLASSESContent = default;
            private static bool _REQUEST_COMPANION_PROFILE_GLASSESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#REQUEST_COMPANION_PROFILE_NEARBY_DEVICE_STREAMING"/>
            /// </summary>
            public static Java.Lang.String REQUEST_COMPANION_PROFILE_NEARBY_DEVICE_STREAMING { get { if (!_REQUEST_COMPANION_PROFILE_NEARBY_DEVICE_STREAMINGReady) { _REQUEST_COMPANION_PROFILE_NEARBY_DEVICE_STREAMINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "REQUEST_COMPANION_PROFILE_NEARBY_DEVICE_STREAMING"); _REQUEST_COMPANION_PROFILE_NEARBY_DEVICE_STREAMINGReady = true; } return _REQUEST_COMPANION_PROFILE_NEARBY_DEVICE_STREAMINGContent; } }
            private static Java.Lang.String _REQUEST_COMPANION_PROFILE_NEARBY_DEVICE_STREAMINGContent = default;
            private static bool _REQUEST_COMPANION_PROFILE_NEARBY_DEVICE_STREAMINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#REQUEST_COMPANION_PROFILE_WATCH"/>
            /// </summary>
            public static Java.Lang.String REQUEST_COMPANION_PROFILE_WATCH { get { if (!_REQUEST_COMPANION_PROFILE_WATCHReady) { _REQUEST_COMPANION_PROFILE_WATCHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "REQUEST_COMPANION_PROFILE_WATCH"); _REQUEST_COMPANION_PROFILE_WATCHReady = true; } return _REQUEST_COMPANION_PROFILE_WATCHContent; } }
            private static Java.Lang.String _REQUEST_COMPANION_PROFILE_WATCHContent = default;
            private static bool _REQUEST_COMPANION_PROFILE_WATCHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#REQUEST_COMPANION_RUN_IN_BACKGROUND"/>
            /// </summary>
            public static Java.Lang.String REQUEST_COMPANION_RUN_IN_BACKGROUND { get { if (!_REQUEST_COMPANION_RUN_IN_BACKGROUNDReady) { _REQUEST_COMPANION_RUN_IN_BACKGROUNDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "REQUEST_COMPANION_RUN_IN_BACKGROUND"); _REQUEST_COMPANION_RUN_IN_BACKGROUNDReady = true; } return _REQUEST_COMPANION_RUN_IN_BACKGROUNDContent; } }
            private static Java.Lang.String _REQUEST_COMPANION_RUN_IN_BACKGROUNDContent = default;
            private static bool _REQUEST_COMPANION_RUN_IN_BACKGROUNDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#REQUEST_COMPANION_SELF_MANAGED"/>
            /// </summary>
            public static Java.Lang.String REQUEST_COMPANION_SELF_MANAGED { get { if (!_REQUEST_COMPANION_SELF_MANAGEDReady) { _REQUEST_COMPANION_SELF_MANAGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "REQUEST_COMPANION_SELF_MANAGED"); _REQUEST_COMPANION_SELF_MANAGEDReady = true; } return _REQUEST_COMPANION_SELF_MANAGEDContent; } }
            private static Java.Lang.String _REQUEST_COMPANION_SELF_MANAGEDContent = default;
            private static bool _REQUEST_COMPANION_SELF_MANAGEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#REQUEST_COMPANION_START_FOREGROUND_SERVICES_FROM_BACKGROUND"/>
            /// </summary>
            public static Java.Lang.String REQUEST_COMPANION_START_FOREGROUND_SERVICES_FROM_BACKGROUND { get { if (!_REQUEST_COMPANION_START_FOREGROUND_SERVICES_FROM_BACKGROUNDReady) { _REQUEST_COMPANION_START_FOREGROUND_SERVICES_FROM_BACKGROUNDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "REQUEST_COMPANION_START_FOREGROUND_SERVICES_FROM_BACKGROUND"); _REQUEST_COMPANION_START_FOREGROUND_SERVICES_FROM_BACKGROUNDReady = true; } return _REQUEST_COMPANION_START_FOREGROUND_SERVICES_FROM_BACKGROUNDContent; } }
            private static Java.Lang.String _REQUEST_COMPANION_START_FOREGROUND_SERVICES_FROM_BACKGROUNDContent = default;
            private static bool _REQUEST_COMPANION_START_FOREGROUND_SERVICES_FROM_BACKGROUNDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#REQUEST_COMPANION_USE_DATA_IN_BACKGROUND"/>
            /// </summary>
            public static Java.Lang.String REQUEST_COMPANION_USE_DATA_IN_BACKGROUND { get { if (!_REQUEST_COMPANION_USE_DATA_IN_BACKGROUNDReady) { _REQUEST_COMPANION_USE_DATA_IN_BACKGROUNDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "REQUEST_COMPANION_USE_DATA_IN_BACKGROUND"); _REQUEST_COMPANION_USE_DATA_IN_BACKGROUNDReady = true; } return _REQUEST_COMPANION_USE_DATA_IN_BACKGROUNDContent; } }
            private static Java.Lang.String _REQUEST_COMPANION_USE_DATA_IN_BACKGROUNDContent = default;
            private static bool _REQUEST_COMPANION_USE_DATA_IN_BACKGROUNDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#REQUEST_DELETE_PACKAGES"/>
            /// </summary>
            public static Java.Lang.String REQUEST_DELETE_PACKAGES { get { if (!_REQUEST_DELETE_PACKAGESReady) { _REQUEST_DELETE_PACKAGESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "REQUEST_DELETE_PACKAGES"); _REQUEST_DELETE_PACKAGESReady = true; } return _REQUEST_DELETE_PACKAGESContent; } }
            private static Java.Lang.String _REQUEST_DELETE_PACKAGESContent = default;
            private static bool _REQUEST_DELETE_PACKAGESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#REQUEST_IGNORE_BATTERY_OPTIMIZATIONS"/>
            /// </summary>
            public static Java.Lang.String REQUEST_IGNORE_BATTERY_OPTIMIZATIONS { get { if (!_REQUEST_IGNORE_BATTERY_OPTIMIZATIONSReady) { _REQUEST_IGNORE_BATTERY_OPTIMIZATIONSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "REQUEST_IGNORE_BATTERY_OPTIMIZATIONS"); _REQUEST_IGNORE_BATTERY_OPTIMIZATIONSReady = true; } return _REQUEST_IGNORE_BATTERY_OPTIMIZATIONSContent; } }
            private static Java.Lang.String _REQUEST_IGNORE_BATTERY_OPTIMIZATIONSContent = default;
            private static bool _REQUEST_IGNORE_BATTERY_OPTIMIZATIONSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#REQUEST_INSTALL_PACKAGES"/>
            /// </summary>
            public static Java.Lang.String REQUEST_INSTALL_PACKAGES { get { if (!_REQUEST_INSTALL_PACKAGESReady) { _REQUEST_INSTALL_PACKAGESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "REQUEST_INSTALL_PACKAGES"); _REQUEST_INSTALL_PACKAGESReady = true; } return _REQUEST_INSTALL_PACKAGESContent; } }
            private static Java.Lang.String _REQUEST_INSTALL_PACKAGESContent = default;
            private static bool _REQUEST_INSTALL_PACKAGESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#REQUEST_OBSERVE_COMPANION_DEVICE_PRESENCE"/>
            /// </summary>
            public static Java.Lang.String REQUEST_OBSERVE_COMPANION_DEVICE_PRESENCE { get { if (!_REQUEST_OBSERVE_COMPANION_DEVICE_PRESENCEReady) { _REQUEST_OBSERVE_COMPANION_DEVICE_PRESENCEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "REQUEST_OBSERVE_COMPANION_DEVICE_PRESENCE"); _REQUEST_OBSERVE_COMPANION_DEVICE_PRESENCEReady = true; } return _REQUEST_OBSERVE_COMPANION_DEVICE_PRESENCEContent; } }
            private static Java.Lang.String _REQUEST_OBSERVE_COMPANION_DEVICE_PRESENCEContent = default;
            private static bool _REQUEST_OBSERVE_COMPANION_DEVICE_PRESENCEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#REQUEST_PASSWORD_COMPLEXITY"/>
            /// </summary>
            public static Java.Lang.String REQUEST_PASSWORD_COMPLEXITY { get { if (!_REQUEST_PASSWORD_COMPLEXITYReady) { _REQUEST_PASSWORD_COMPLEXITYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "REQUEST_PASSWORD_COMPLEXITY"); _REQUEST_PASSWORD_COMPLEXITYReady = true; } return _REQUEST_PASSWORD_COMPLEXITYContent; } }
            private static Java.Lang.String _REQUEST_PASSWORD_COMPLEXITYContent = default;
            private static bool _REQUEST_PASSWORD_COMPLEXITYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#RESTART_PACKAGES"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String RESTART_PACKAGES { get { if (!_RESTART_PACKAGESReady) { _RESTART_PACKAGESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RESTART_PACKAGES"); _RESTART_PACKAGESReady = true; } return _RESTART_PACKAGESContent; } }
            private static Java.Lang.String _RESTART_PACKAGESContent = default;
            private static bool _RESTART_PACKAGESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#RUN_USER_INITIATED_JOBS"/>
            /// </summary>
            public static Java.Lang.String RUN_USER_INITIATED_JOBS { get { if (!_RUN_USER_INITIATED_JOBSReady) { _RUN_USER_INITIATED_JOBSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RUN_USER_INITIATED_JOBS"); _RUN_USER_INITIATED_JOBSReady = true; } return _RUN_USER_INITIATED_JOBSContent; } }
            private static Java.Lang.String _RUN_USER_INITIATED_JOBSContent = default;
            private static bool _RUN_USER_INITIATED_JOBSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#SCHEDULE_EXACT_ALARM"/>
            /// </summary>
            public static Java.Lang.String SCHEDULE_EXACT_ALARM { get { if (!_SCHEDULE_EXACT_ALARMReady) { _SCHEDULE_EXACT_ALARMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SCHEDULE_EXACT_ALARM"); _SCHEDULE_EXACT_ALARMReady = true; } return _SCHEDULE_EXACT_ALARMContent; } }
            private static Java.Lang.String _SCHEDULE_EXACT_ALARMContent = default;
            private static bool _SCHEDULE_EXACT_ALARMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#SEND_RESPOND_VIA_MESSAGE"/>
            /// </summary>
            public static Java.Lang.String SEND_RESPOND_VIA_MESSAGE { get { if (!_SEND_RESPOND_VIA_MESSAGEReady) { _SEND_RESPOND_VIA_MESSAGEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SEND_RESPOND_VIA_MESSAGE"); _SEND_RESPOND_VIA_MESSAGEReady = true; } return _SEND_RESPOND_VIA_MESSAGEContent; } }
            private static Java.Lang.String _SEND_RESPOND_VIA_MESSAGEContent = default;
            private static bool _SEND_RESPOND_VIA_MESSAGEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#SEND_SMS"/>
            /// </summary>
            public static Java.Lang.String SEND_SMS { get { if (!_SEND_SMSReady) { _SEND_SMSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SEND_SMS"); _SEND_SMSReady = true; } return _SEND_SMSContent; } }
            private static Java.Lang.String _SEND_SMSContent = default;
            private static bool _SEND_SMSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#SET_ALARM"/>
            /// </summary>
            public static Java.Lang.String SET_ALARM { get { if (!_SET_ALARMReady) { _SET_ALARMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SET_ALARM"); _SET_ALARMReady = true; } return _SET_ALARMContent; } }
            private static Java.Lang.String _SET_ALARMContent = default;
            private static bool _SET_ALARMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#SET_ALWAYS_FINISH"/>
            /// </summary>
            public static Java.Lang.String SET_ALWAYS_FINISH { get { if (!_SET_ALWAYS_FINISHReady) { _SET_ALWAYS_FINISHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SET_ALWAYS_FINISH"); _SET_ALWAYS_FINISHReady = true; } return _SET_ALWAYS_FINISHContent; } }
            private static Java.Lang.String _SET_ALWAYS_FINISHContent = default;
            private static bool _SET_ALWAYS_FINISHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#SET_ANIMATION_SCALE"/>
            /// </summary>
            public static Java.Lang.String SET_ANIMATION_SCALE { get { if (!_SET_ANIMATION_SCALEReady) { _SET_ANIMATION_SCALEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SET_ANIMATION_SCALE"); _SET_ANIMATION_SCALEReady = true; } return _SET_ANIMATION_SCALEContent; } }
            private static Java.Lang.String _SET_ANIMATION_SCALEContent = default;
            private static bool _SET_ANIMATION_SCALEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#SET_BIOMETRIC_DIALOG_ADVANCED"/>
            /// </summary>
            public static Java.Lang.String SET_BIOMETRIC_DIALOG_ADVANCED { get { if (!_SET_BIOMETRIC_DIALOG_ADVANCEDReady) { _SET_BIOMETRIC_DIALOG_ADVANCEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SET_BIOMETRIC_DIALOG_ADVANCED"); _SET_BIOMETRIC_DIALOG_ADVANCEDReady = true; } return _SET_BIOMETRIC_DIALOG_ADVANCEDContent; } }
            private static Java.Lang.String _SET_BIOMETRIC_DIALOG_ADVANCEDContent = default;
            private static bool _SET_BIOMETRIC_DIALOG_ADVANCEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#SET_DEBUG_APP"/>
            /// </summary>
            public static Java.Lang.String SET_DEBUG_APP { get { if (!_SET_DEBUG_APPReady) { _SET_DEBUG_APPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SET_DEBUG_APP"); _SET_DEBUG_APPReady = true; } return _SET_DEBUG_APPContent; } }
            private static Java.Lang.String _SET_DEBUG_APPContent = default;
            private static bool _SET_DEBUG_APPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#SET_PREFERRED_APPLICATIONS"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String SET_PREFERRED_APPLICATIONS { get { if (!_SET_PREFERRED_APPLICATIONSReady) { _SET_PREFERRED_APPLICATIONSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SET_PREFERRED_APPLICATIONS"); _SET_PREFERRED_APPLICATIONSReady = true; } return _SET_PREFERRED_APPLICATIONSContent; } }
            private static Java.Lang.String _SET_PREFERRED_APPLICATIONSContent = default;
            private static bool _SET_PREFERRED_APPLICATIONSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#SET_PROCESS_LIMIT"/>
            /// </summary>
            public static Java.Lang.String SET_PROCESS_LIMIT { get { if (!_SET_PROCESS_LIMITReady) { _SET_PROCESS_LIMITContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SET_PROCESS_LIMIT"); _SET_PROCESS_LIMITReady = true; } return _SET_PROCESS_LIMITContent; } }
            private static Java.Lang.String _SET_PROCESS_LIMITContent = default;
            private static bool _SET_PROCESS_LIMITReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#SET_TIME"/>
            /// </summary>
            public static Java.Lang.String SET_TIME { get { if (!_SET_TIMEReady) { _SET_TIMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SET_TIME"); _SET_TIMEReady = true; } return _SET_TIMEContent; } }
            private static Java.Lang.String _SET_TIMEContent = default;
            private static bool _SET_TIMEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#SET_TIME_ZONE"/>
            /// </summary>
            public static Java.Lang.String SET_TIME_ZONE { get { if (!_SET_TIME_ZONEReady) { _SET_TIME_ZONEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SET_TIME_ZONE"); _SET_TIME_ZONEReady = true; } return _SET_TIME_ZONEContent; } }
            private static Java.Lang.String _SET_TIME_ZONEContent = default;
            private static bool _SET_TIME_ZONEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#SET_WALLPAPER"/>
            /// </summary>
            public static Java.Lang.String SET_WALLPAPER { get { if (!_SET_WALLPAPERReady) { _SET_WALLPAPERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SET_WALLPAPER"); _SET_WALLPAPERReady = true; } return _SET_WALLPAPERContent; } }
            private static Java.Lang.String _SET_WALLPAPERContent = default;
            private static bool _SET_WALLPAPERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#SET_WALLPAPER_HINTS"/>
            /// </summary>
            public static Java.Lang.String SET_WALLPAPER_HINTS { get { if (!_SET_WALLPAPER_HINTSReady) { _SET_WALLPAPER_HINTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SET_WALLPAPER_HINTS"); _SET_WALLPAPER_HINTSReady = true; } return _SET_WALLPAPER_HINTSContent; } }
            private static Java.Lang.String _SET_WALLPAPER_HINTSContent = default;
            private static bool _SET_WALLPAPER_HINTSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#SIGNAL_PERSISTENT_PROCESSES"/>
            /// </summary>
            public static Java.Lang.String SIGNAL_PERSISTENT_PROCESSES { get { if (!_SIGNAL_PERSISTENT_PROCESSESReady) { _SIGNAL_PERSISTENT_PROCESSESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SIGNAL_PERSISTENT_PROCESSES"); _SIGNAL_PERSISTENT_PROCESSESReady = true; } return _SIGNAL_PERSISTENT_PROCESSESContent; } }
            private static Java.Lang.String _SIGNAL_PERSISTENT_PROCESSESContent = default;
            private static bool _SIGNAL_PERSISTENT_PROCESSESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#SMS_FINANCIAL_TRANSACTIONS"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String SMS_FINANCIAL_TRANSACTIONS { get { if (!_SMS_FINANCIAL_TRANSACTIONSReady) { _SMS_FINANCIAL_TRANSACTIONSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SMS_FINANCIAL_TRANSACTIONS"); _SMS_FINANCIAL_TRANSACTIONSReady = true; } return _SMS_FINANCIAL_TRANSACTIONSContent; } }
            private static Java.Lang.String _SMS_FINANCIAL_TRANSACTIONSContent = default;
            private static bool _SMS_FINANCIAL_TRANSACTIONSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#START_FOREGROUND_SERVICES_FROM_BACKGROUND"/>
            /// </summary>
            public static Java.Lang.String START_FOREGROUND_SERVICES_FROM_BACKGROUND { get { if (!_START_FOREGROUND_SERVICES_FROM_BACKGROUNDReady) { _START_FOREGROUND_SERVICES_FROM_BACKGROUNDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "START_FOREGROUND_SERVICES_FROM_BACKGROUND"); _START_FOREGROUND_SERVICES_FROM_BACKGROUNDReady = true; } return _START_FOREGROUND_SERVICES_FROM_BACKGROUNDContent; } }
            private static Java.Lang.String _START_FOREGROUND_SERVICES_FROM_BACKGROUNDContent = default;
            private static bool _START_FOREGROUND_SERVICES_FROM_BACKGROUNDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#START_VIEW_APP_FEATURES"/>
            /// </summary>
            public static Java.Lang.String START_VIEW_APP_FEATURES { get { if (!_START_VIEW_APP_FEATURESReady) { _START_VIEW_APP_FEATURESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "START_VIEW_APP_FEATURES"); _START_VIEW_APP_FEATURESReady = true; } return _START_VIEW_APP_FEATURESContent; } }
            private static Java.Lang.String _START_VIEW_APP_FEATURESContent = default;
            private static bool _START_VIEW_APP_FEATURESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#START_VIEW_PERMISSION_USAGE"/>
            /// </summary>
            public static Java.Lang.String START_VIEW_PERMISSION_USAGE { get { if (!_START_VIEW_PERMISSION_USAGEReady) { _START_VIEW_PERMISSION_USAGEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "START_VIEW_PERMISSION_USAGE"); _START_VIEW_PERMISSION_USAGEReady = true; } return _START_VIEW_PERMISSION_USAGEContent; } }
            private static Java.Lang.String _START_VIEW_PERMISSION_USAGEContent = default;
            private static bool _START_VIEW_PERMISSION_USAGEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#STATUS_BAR"/>
            /// </summary>
            public static Java.Lang.String STATUS_BAR { get { if (!_STATUS_BARReady) { _STATUS_BARContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STATUS_BAR"); _STATUS_BARReady = true; } return _STATUS_BARContent; } }
            private static Java.Lang.String _STATUS_BARContent = default;
            private static bool _STATUS_BARReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#SUBSCRIBE_TO_KEYGUARD_LOCKED_STATE"/>
            /// </summary>
            public static Java.Lang.String SUBSCRIBE_TO_KEYGUARD_LOCKED_STATE { get { if (!_SUBSCRIBE_TO_KEYGUARD_LOCKED_STATEReady) { _SUBSCRIBE_TO_KEYGUARD_LOCKED_STATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SUBSCRIBE_TO_KEYGUARD_LOCKED_STATE"); _SUBSCRIBE_TO_KEYGUARD_LOCKED_STATEReady = true; } return _SUBSCRIBE_TO_KEYGUARD_LOCKED_STATEContent; } }
            private static Java.Lang.String _SUBSCRIBE_TO_KEYGUARD_LOCKED_STATEContent = default;
            private static bool _SUBSCRIBE_TO_KEYGUARD_LOCKED_STATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#SYSTEM_ALERT_WINDOW"/>
            /// </summary>
            public static Java.Lang.String SYSTEM_ALERT_WINDOW { get { if (!_SYSTEM_ALERT_WINDOWReady) { _SYSTEM_ALERT_WINDOWContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SYSTEM_ALERT_WINDOW"); _SYSTEM_ALERT_WINDOWReady = true; } return _SYSTEM_ALERT_WINDOWContent; } }
            private static Java.Lang.String _SYSTEM_ALERT_WINDOWContent = default;
            private static bool _SYSTEM_ALERT_WINDOWReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#TRANSMIT_IR"/>
            /// </summary>
            public static Java.Lang.String TRANSMIT_IR { get { if (!_TRANSMIT_IRReady) { _TRANSMIT_IRContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TRANSMIT_IR"); _TRANSMIT_IRReady = true; } return _TRANSMIT_IRContent; } }
            private static Java.Lang.String _TRANSMIT_IRContent = default;
            private static bool _TRANSMIT_IRReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#TURN_SCREEN_ON"/>
            /// </summary>
            public static Java.Lang.String TURN_SCREEN_ON { get { if (!_TURN_SCREEN_ONReady) { _TURN_SCREEN_ONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TURN_SCREEN_ON"); _TURN_SCREEN_ONReady = true; } return _TURN_SCREEN_ONContent; } }
            private static Java.Lang.String _TURN_SCREEN_ONContent = default;
            private static bool _TURN_SCREEN_ONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#UNINSTALL_SHORTCUT"/>
            /// </summary>
            public static Java.Lang.String UNINSTALL_SHORTCUT { get { if (!_UNINSTALL_SHORTCUTReady) { _UNINSTALL_SHORTCUTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "UNINSTALL_SHORTCUT"); _UNINSTALL_SHORTCUTReady = true; } return _UNINSTALL_SHORTCUTContent; } }
            private static Java.Lang.String _UNINSTALL_SHORTCUTContent = default;
            private static bool _UNINSTALL_SHORTCUTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#UPDATE_DEVICE_STATS"/>
            /// </summary>
            public static Java.Lang.String UPDATE_DEVICE_STATS { get { if (!_UPDATE_DEVICE_STATSReady) { _UPDATE_DEVICE_STATSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "UPDATE_DEVICE_STATS"); _UPDATE_DEVICE_STATSReady = true; } return _UPDATE_DEVICE_STATSContent; } }
            private static Java.Lang.String _UPDATE_DEVICE_STATSContent = default;
            private static bool _UPDATE_DEVICE_STATSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#UPDATE_PACKAGES_WITHOUT_USER_ACTION"/>
            /// </summary>
            public static Java.Lang.String UPDATE_PACKAGES_WITHOUT_USER_ACTION { get { if (!_UPDATE_PACKAGES_WITHOUT_USER_ACTIONReady) { _UPDATE_PACKAGES_WITHOUT_USER_ACTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "UPDATE_PACKAGES_WITHOUT_USER_ACTION"); _UPDATE_PACKAGES_WITHOUT_USER_ACTIONReady = true; } return _UPDATE_PACKAGES_WITHOUT_USER_ACTIONContent; } }
            private static Java.Lang.String _UPDATE_PACKAGES_WITHOUT_USER_ACTIONContent = default;
            private static bool _UPDATE_PACKAGES_WITHOUT_USER_ACTIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#USE_BIOMETRIC"/>
            /// </summary>
            public static Java.Lang.String USE_BIOMETRIC { get { if (!_USE_BIOMETRICReady) { _USE_BIOMETRICContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "USE_BIOMETRIC"); _USE_BIOMETRICReady = true; } return _USE_BIOMETRICContent; } }
            private static Java.Lang.String _USE_BIOMETRICContent = default;
            private static bool _USE_BIOMETRICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#USE_EXACT_ALARM"/>
            /// </summary>
            public static Java.Lang.String USE_EXACT_ALARM { get { if (!_USE_EXACT_ALARMReady) { _USE_EXACT_ALARMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "USE_EXACT_ALARM"); _USE_EXACT_ALARMReady = true; } return _USE_EXACT_ALARMContent; } }
            private static Java.Lang.String _USE_EXACT_ALARMContent = default;
            private static bool _USE_EXACT_ALARMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#USE_FINGERPRINT"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String USE_FINGERPRINT { get { if (!_USE_FINGERPRINTReady) { _USE_FINGERPRINTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "USE_FINGERPRINT"); _USE_FINGERPRINTReady = true; } return _USE_FINGERPRINTContent; } }
            private static Java.Lang.String _USE_FINGERPRINTContent = default;
            private static bool _USE_FINGERPRINTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#USE_FULL_SCREEN_INTENT"/>
            /// </summary>
            public static Java.Lang.String USE_FULL_SCREEN_INTENT { get { if (!_USE_FULL_SCREEN_INTENTReady) { _USE_FULL_SCREEN_INTENTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "USE_FULL_SCREEN_INTENT"); _USE_FULL_SCREEN_INTENTReady = true; } return _USE_FULL_SCREEN_INTENTContent; } }
            private static Java.Lang.String _USE_FULL_SCREEN_INTENTContent = default;
            private static bool _USE_FULL_SCREEN_INTENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#USE_ICC_AUTH_WITH_DEVICE_IDENTIFIER"/>
            /// </summary>
            public static Java.Lang.String USE_ICC_AUTH_WITH_DEVICE_IDENTIFIER { get { if (!_USE_ICC_AUTH_WITH_DEVICE_IDENTIFIERReady) { _USE_ICC_AUTH_WITH_DEVICE_IDENTIFIERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "USE_ICC_AUTH_WITH_DEVICE_IDENTIFIER"); _USE_ICC_AUTH_WITH_DEVICE_IDENTIFIERReady = true; } return _USE_ICC_AUTH_WITH_DEVICE_IDENTIFIERContent; } }
            private static Java.Lang.String _USE_ICC_AUTH_WITH_DEVICE_IDENTIFIERContent = default;
            private static bool _USE_ICC_AUTH_WITH_DEVICE_IDENTIFIERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#USE_SIP"/>
            /// </summary>
            public static Java.Lang.String USE_SIP { get { if (!_USE_SIPReady) { _USE_SIPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "USE_SIP"); _USE_SIPReady = true; } return _USE_SIPContent; } }
            private static Java.Lang.String _USE_SIPContent = default;
            private static bool _USE_SIPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#UWB_RANGING"/>
            /// </summary>
            public static Java.Lang.String UWB_RANGING { get { if (!_UWB_RANGINGReady) { _UWB_RANGINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "UWB_RANGING"); _UWB_RANGINGReady = true; } return _UWB_RANGINGContent; } }
            private static Java.Lang.String _UWB_RANGINGContent = default;
            private static bool _UWB_RANGINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#VIBRATE"/>
            /// </summary>
            public static Java.Lang.String VIBRATE { get { if (!_VIBRATEReady) { _VIBRATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "VIBRATE"); _VIBRATEReady = true; } return _VIBRATEContent; } }
            private static Java.Lang.String _VIBRATEContent = default;
            private static bool _VIBRATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#WAKE_LOCK"/>
            /// </summary>
            public static Java.Lang.String WAKE_LOCK { get { if (!_WAKE_LOCKReady) { _WAKE_LOCKContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WAKE_LOCK"); _WAKE_LOCKReady = true; } return _WAKE_LOCKContent; } }
            private static Java.Lang.String _WAKE_LOCKContent = default;
            private static bool _WAKE_LOCKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#WRITE_APN_SETTINGS"/>
            /// </summary>
            public static Java.Lang.String WRITE_APN_SETTINGS { get { if (!_WRITE_APN_SETTINGSReady) { _WRITE_APN_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WRITE_APN_SETTINGS"); _WRITE_APN_SETTINGSReady = true; } return _WRITE_APN_SETTINGSContent; } }
            private static Java.Lang.String _WRITE_APN_SETTINGSContent = default;
            private static bool _WRITE_APN_SETTINGSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#WRITE_CALENDAR"/>
            /// </summary>
            public static Java.Lang.String WRITE_CALENDAR { get { if (!_WRITE_CALENDARReady) { _WRITE_CALENDARContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WRITE_CALENDAR"); _WRITE_CALENDARReady = true; } return _WRITE_CALENDARContent; } }
            private static Java.Lang.String _WRITE_CALENDARContent = default;
            private static bool _WRITE_CALENDARReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#WRITE_CALL_LOG"/>
            /// </summary>
            public static Java.Lang.String WRITE_CALL_LOG { get { if (!_WRITE_CALL_LOGReady) { _WRITE_CALL_LOGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WRITE_CALL_LOG"); _WRITE_CALL_LOGReady = true; } return _WRITE_CALL_LOGContent; } }
            private static Java.Lang.String _WRITE_CALL_LOGContent = default;
            private static bool _WRITE_CALL_LOGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#WRITE_CONTACTS"/>
            /// </summary>
            public static Java.Lang.String WRITE_CONTACTS { get { if (!_WRITE_CONTACTSReady) { _WRITE_CONTACTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WRITE_CONTACTS"); _WRITE_CONTACTSReady = true; } return _WRITE_CONTACTSContent; } }
            private static Java.Lang.String _WRITE_CONTACTSContent = default;
            private static bool _WRITE_CONTACTSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#WRITE_EXTERNAL_STORAGE"/>
            /// </summary>
            public static Java.Lang.String WRITE_EXTERNAL_STORAGE { get { if (!_WRITE_EXTERNAL_STORAGEReady) { _WRITE_EXTERNAL_STORAGEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WRITE_EXTERNAL_STORAGE"); _WRITE_EXTERNAL_STORAGEReady = true; } return _WRITE_EXTERNAL_STORAGEContent; } }
            private static Java.Lang.String _WRITE_EXTERNAL_STORAGEContent = default;
            private static bool _WRITE_EXTERNAL_STORAGEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#WRITE_GSERVICES"/>
            /// </summary>
            public static Java.Lang.String WRITE_GSERVICES { get { if (!_WRITE_GSERVICESReady) { _WRITE_GSERVICESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WRITE_GSERVICES"); _WRITE_GSERVICESReady = true; } return _WRITE_GSERVICESContent; } }
            private static Java.Lang.String _WRITE_GSERVICESContent = default;
            private static bool _WRITE_GSERVICESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#WRITE_SECURE_SETTINGS"/>
            /// </summary>
            public static Java.Lang.String WRITE_SECURE_SETTINGS { get { if (!_WRITE_SECURE_SETTINGSReady) { _WRITE_SECURE_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WRITE_SECURE_SETTINGS"); _WRITE_SECURE_SETTINGSReady = true; } return _WRITE_SECURE_SETTINGSContent; } }
            private static Java.Lang.String _WRITE_SECURE_SETTINGSContent = default;
            private static bool _WRITE_SECURE_SETTINGSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#WRITE_SETTINGS"/>
            /// </summary>
            public static Java.Lang.String WRITE_SETTINGS { get { if (!_WRITE_SETTINGSReady) { _WRITE_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WRITE_SETTINGS"); _WRITE_SETTINGSReady = true; } return _WRITE_SETTINGSContent; } }
            private static Java.Lang.String _WRITE_SETTINGSContent = default;
            private static bool _WRITE_SETTINGSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#WRITE_SYNC_SETTINGS"/>
            /// </summary>
            public static Java.Lang.String WRITE_SYNC_SETTINGS { get { if (!_WRITE_SYNC_SETTINGSReady) { _WRITE_SYNC_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WRITE_SYNC_SETTINGS"); _WRITE_SYNC_SETTINGSReady = true; } return _WRITE_SYNC_SETTINGSContent; } }
            private static Java.Lang.String _WRITE_SYNC_SETTINGSContent = default;
            private static bool _WRITE_SYNC_SETTINGSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission.html#WRITE_VOICEMAIL"/>
            /// </summary>
            public static Java.Lang.String WRITE_VOICEMAIL { get { if (!_WRITE_VOICEMAILReady) { _WRITE_VOICEMAILContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WRITE_VOICEMAIL"); _WRITE_VOICEMAILReady = true; } return _WRITE_VOICEMAILContent; } }
            private static Java.Lang.String _WRITE_VOICEMAILContent = default;
            private static bool _WRITE_VOICEMAILReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region permission_group
        public partial class permission_group
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission_group.html#ACTIVITY_RECOGNITION"/>
            /// </summary>
            public static Java.Lang.String ACTIVITY_RECOGNITION { get { if (!_ACTIVITY_RECOGNITIONReady) { _ACTIVITY_RECOGNITIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTIVITY_RECOGNITION"); _ACTIVITY_RECOGNITIONReady = true; } return _ACTIVITY_RECOGNITIONContent; } }
            private static Java.Lang.String _ACTIVITY_RECOGNITIONContent = default;
            private static bool _ACTIVITY_RECOGNITIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission_group.html#CALENDAR"/>
            /// </summary>
            public static Java.Lang.String CALENDAR { get { if (!_CALENDARReady) { _CALENDARContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CALENDAR"); _CALENDARReady = true; } return _CALENDARContent; } }
            private static Java.Lang.String _CALENDARContent = default;
            private static bool _CALENDARReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission_group.html#CALL_LOG"/>
            /// </summary>
            public static Java.Lang.String CALL_LOG { get { if (!_CALL_LOGReady) { _CALL_LOGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CALL_LOG"); _CALL_LOGReady = true; } return _CALL_LOGContent; } }
            private static Java.Lang.String _CALL_LOGContent = default;
            private static bool _CALL_LOGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission_group.html#CAMERA"/>
            /// </summary>
            public static Java.Lang.String CAMERA { get { if (!_CAMERAReady) { _CAMERAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CAMERA"); _CAMERAReady = true; } return _CAMERAContent; } }
            private static Java.Lang.String _CAMERAContent = default;
            private static bool _CAMERAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission_group.html#CONTACTS"/>
            /// </summary>
            public static Java.Lang.String CONTACTS { get { if (!_CONTACTSReady) { _CONTACTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTACTS"); _CONTACTSReady = true; } return _CONTACTSContent; } }
            private static Java.Lang.String _CONTACTSContent = default;
            private static bool _CONTACTSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission_group.html#LOCATION"/>
            /// </summary>
            public static Java.Lang.String LOCATION { get { if (!_LOCATIONReady) { _LOCATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LOCATION"); _LOCATIONReady = true; } return _LOCATIONContent; } }
            private static Java.Lang.String _LOCATIONContent = default;
            private static bool _LOCATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission_group.html#MICROPHONE"/>
            /// </summary>
            public static Java.Lang.String MICROPHONE { get { if (!_MICROPHONEReady) { _MICROPHONEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MICROPHONE"); _MICROPHONEReady = true; } return _MICROPHONEContent; } }
            private static Java.Lang.String _MICROPHONEContent = default;
            private static bool _MICROPHONEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission_group.html#NEARBY_DEVICES"/>
            /// </summary>
            public static Java.Lang.String NEARBY_DEVICES { get { if (!_NEARBY_DEVICESReady) { _NEARBY_DEVICESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NEARBY_DEVICES"); _NEARBY_DEVICESReady = true; } return _NEARBY_DEVICESContent; } }
            private static Java.Lang.String _NEARBY_DEVICESContent = default;
            private static bool _NEARBY_DEVICESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission_group.html#NOTIFICATIONS"/>
            /// </summary>
            public static Java.Lang.String NOTIFICATIONS { get { if (!_NOTIFICATIONSReady) { _NOTIFICATIONSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NOTIFICATIONS"); _NOTIFICATIONSReady = true; } return _NOTIFICATIONSContent; } }
            private static Java.Lang.String _NOTIFICATIONSContent = default;
            private static bool _NOTIFICATIONSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission_group.html#PHONE"/>
            /// </summary>
            public static Java.Lang.String PHONE { get { if (!_PHONEReady) { _PHONEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PHONE"); _PHONEReady = true; } return _PHONEContent; } }
            private static Java.Lang.String _PHONEContent = default;
            private static bool _PHONEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission_group.html#READ_MEDIA_AURAL"/>
            /// </summary>
            public static Java.Lang.String READ_MEDIA_AURAL { get { if (!_READ_MEDIA_AURALReady) { _READ_MEDIA_AURALContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "READ_MEDIA_AURAL"); _READ_MEDIA_AURALReady = true; } return _READ_MEDIA_AURALContent; } }
            private static Java.Lang.String _READ_MEDIA_AURALContent = default;
            private static bool _READ_MEDIA_AURALReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission_group.html#READ_MEDIA_VISUAL"/>
            /// </summary>
            public static Java.Lang.String READ_MEDIA_VISUAL { get { if (!_READ_MEDIA_VISUALReady) { _READ_MEDIA_VISUALContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "READ_MEDIA_VISUAL"); _READ_MEDIA_VISUALReady = true; } return _READ_MEDIA_VISUALContent; } }
            private static Java.Lang.String _READ_MEDIA_VISUALContent = default;
            private static bool _READ_MEDIA_VISUALReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission_group.html#SENSORS"/>
            /// </summary>
            public static Java.Lang.String SENSORS { get { if (!_SENSORSReady) { _SENSORSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SENSORS"); _SENSORSReady = true; } return _SENSORSContent; } }
            private static Java.Lang.String _SENSORSContent = default;
            private static bool _SENSORSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission_group.html#SMS"/>
            /// </summary>
            public static Java.Lang.String SMS { get { if (!_SMSReady) { _SMSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SMS"); _SMSReady = true; } return _SMSContent; } }
            private static Java.Lang.String _SMSContent = default;
            private static bool _SMSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/Manifest.permission_group.html#STORAGE"/>
            /// </summary>
            public static Java.Lang.String STORAGE { get { if (!_STORAGEReady) { _STORAGEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STORAGE"); _STORAGEReady = true; } return _STORAGEContent; } }
            private static Java.Lang.String _STORAGEContent = default;
            private static bool _STORAGEReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
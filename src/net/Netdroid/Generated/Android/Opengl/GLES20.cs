/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Opengl
{
    #region GLES20
    public partial class GLES20
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_ACTIVE_ATTRIBUTE_MAX_LENGTH"/>
        /// </summary>
        public static int GL_ACTIVE_ATTRIBUTE_MAX_LENGTH { get { if (!_GL_ACTIVE_ATTRIBUTE_MAX_LENGTHReady) { _GL_ACTIVE_ATTRIBUTE_MAX_LENGTHContent = SGetField<int>(LocalBridgeClazz, "GL_ACTIVE_ATTRIBUTE_MAX_LENGTH"); _GL_ACTIVE_ATTRIBUTE_MAX_LENGTHReady = true; } return _GL_ACTIVE_ATTRIBUTE_MAX_LENGTHContent; } }
        private static int _GL_ACTIVE_ATTRIBUTE_MAX_LENGTHContent = default;
        private static bool _GL_ACTIVE_ATTRIBUTE_MAX_LENGTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_ACTIVE_ATTRIBUTES"/>
        /// </summary>
        public static int GL_ACTIVE_ATTRIBUTES { get { if (!_GL_ACTIVE_ATTRIBUTESReady) { _GL_ACTIVE_ATTRIBUTESContent = SGetField<int>(LocalBridgeClazz, "GL_ACTIVE_ATTRIBUTES"); _GL_ACTIVE_ATTRIBUTESReady = true; } return _GL_ACTIVE_ATTRIBUTESContent; } }
        private static int _GL_ACTIVE_ATTRIBUTESContent = default;
        private static bool _GL_ACTIVE_ATTRIBUTESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_ACTIVE_TEXTURE"/>
        /// </summary>
        public static int GL_ACTIVE_TEXTURE { get { if (!_GL_ACTIVE_TEXTUREReady) { _GL_ACTIVE_TEXTUREContent = SGetField<int>(LocalBridgeClazz, "GL_ACTIVE_TEXTURE"); _GL_ACTIVE_TEXTUREReady = true; } return _GL_ACTIVE_TEXTUREContent; } }
        private static int _GL_ACTIVE_TEXTUREContent = default;
        private static bool _GL_ACTIVE_TEXTUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_ACTIVE_UNIFORM_MAX_LENGTH"/>
        /// </summary>
        public static int GL_ACTIVE_UNIFORM_MAX_LENGTH { get { if (!_GL_ACTIVE_UNIFORM_MAX_LENGTHReady) { _GL_ACTIVE_UNIFORM_MAX_LENGTHContent = SGetField<int>(LocalBridgeClazz, "GL_ACTIVE_UNIFORM_MAX_LENGTH"); _GL_ACTIVE_UNIFORM_MAX_LENGTHReady = true; } return _GL_ACTIVE_UNIFORM_MAX_LENGTHContent; } }
        private static int _GL_ACTIVE_UNIFORM_MAX_LENGTHContent = default;
        private static bool _GL_ACTIVE_UNIFORM_MAX_LENGTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_ACTIVE_UNIFORMS"/>
        /// </summary>
        public static int GL_ACTIVE_UNIFORMS { get { if (!_GL_ACTIVE_UNIFORMSReady) { _GL_ACTIVE_UNIFORMSContent = SGetField<int>(LocalBridgeClazz, "GL_ACTIVE_UNIFORMS"); _GL_ACTIVE_UNIFORMSReady = true; } return _GL_ACTIVE_UNIFORMSContent; } }
        private static int _GL_ACTIVE_UNIFORMSContent = default;
        private static bool _GL_ACTIVE_UNIFORMSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_ALIASED_LINE_WIDTH_RANGE"/>
        /// </summary>
        public static int GL_ALIASED_LINE_WIDTH_RANGE { get { if (!_GL_ALIASED_LINE_WIDTH_RANGEReady) { _GL_ALIASED_LINE_WIDTH_RANGEContent = SGetField<int>(LocalBridgeClazz, "GL_ALIASED_LINE_WIDTH_RANGE"); _GL_ALIASED_LINE_WIDTH_RANGEReady = true; } return _GL_ALIASED_LINE_WIDTH_RANGEContent; } }
        private static int _GL_ALIASED_LINE_WIDTH_RANGEContent = default;
        private static bool _GL_ALIASED_LINE_WIDTH_RANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_ALIASED_POINT_SIZE_RANGE"/>
        /// </summary>
        public static int GL_ALIASED_POINT_SIZE_RANGE { get { if (!_GL_ALIASED_POINT_SIZE_RANGEReady) { _GL_ALIASED_POINT_SIZE_RANGEContent = SGetField<int>(LocalBridgeClazz, "GL_ALIASED_POINT_SIZE_RANGE"); _GL_ALIASED_POINT_SIZE_RANGEReady = true; } return _GL_ALIASED_POINT_SIZE_RANGEContent; } }
        private static int _GL_ALIASED_POINT_SIZE_RANGEContent = default;
        private static bool _GL_ALIASED_POINT_SIZE_RANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_ALPHA"/>
        /// </summary>
        public static int GL_ALPHA { get { if (!_GL_ALPHAReady) { _GL_ALPHAContent = SGetField<int>(LocalBridgeClazz, "GL_ALPHA"); _GL_ALPHAReady = true; } return _GL_ALPHAContent; } }
        private static int _GL_ALPHAContent = default;
        private static bool _GL_ALPHAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_ALPHA_BITS"/>
        /// </summary>
        public static int GL_ALPHA_BITS { get { if (!_GL_ALPHA_BITSReady) { _GL_ALPHA_BITSContent = SGetField<int>(LocalBridgeClazz, "GL_ALPHA_BITS"); _GL_ALPHA_BITSReady = true; } return _GL_ALPHA_BITSContent; } }
        private static int _GL_ALPHA_BITSContent = default;
        private static bool _GL_ALPHA_BITSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_ALWAYS"/>
        /// </summary>
        public static int GL_ALWAYS { get { if (!_GL_ALWAYSReady) { _GL_ALWAYSContent = SGetField<int>(LocalBridgeClazz, "GL_ALWAYS"); _GL_ALWAYSReady = true; } return _GL_ALWAYSContent; } }
        private static int _GL_ALWAYSContent = default;
        private static bool _GL_ALWAYSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_ARRAY_BUFFER"/>
        /// </summary>
        public static int GL_ARRAY_BUFFER { get { if (!_GL_ARRAY_BUFFERReady) { _GL_ARRAY_BUFFERContent = SGetField<int>(LocalBridgeClazz, "GL_ARRAY_BUFFER"); _GL_ARRAY_BUFFERReady = true; } return _GL_ARRAY_BUFFERContent; } }
        private static int _GL_ARRAY_BUFFERContent = default;
        private static bool _GL_ARRAY_BUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_ARRAY_BUFFER_BINDING"/>
        /// </summary>
        public static int GL_ARRAY_BUFFER_BINDING { get { if (!_GL_ARRAY_BUFFER_BINDINGReady) { _GL_ARRAY_BUFFER_BINDINGContent = SGetField<int>(LocalBridgeClazz, "GL_ARRAY_BUFFER_BINDING"); _GL_ARRAY_BUFFER_BINDINGReady = true; } return _GL_ARRAY_BUFFER_BINDINGContent; } }
        private static int _GL_ARRAY_BUFFER_BINDINGContent = default;
        private static bool _GL_ARRAY_BUFFER_BINDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_ATTACHED_SHADERS"/>
        /// </summary>
        public static int GL_ATTACHED_SHADERS { get { if (!_GL_ATTACHED_SHADERSReady) { _GL_ATTACHED_SHADERSContent = SGetField<int>(LocalBridgeClazz, "GL_ATTACHED_SHADERS"); _GL_ATTACHED_SHADERSReady = true; } return _GL_ATTACHED_SHADERSContent; } }
        private static int _GL_ATTACHED_SHADERSContent = default;
        private static bool _GL_ATTACHED_SHADERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_BACK"/>
        /// </summary>
        public static int GL_BACK { get { if (!_GL_BACKReady) { _GL_BACKContent = SGetField<int>(LocalBridgeClazz, "GL_BACK"); _GL_BACKReady = true; } return _GL_BACKContent; } }
        private static int _GL_BACKContent = default;
        private static bool _GL_BACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_BLEND"/>
        /// </summary>
        public static int GL_BLEND { get { if (!_GL_BLENDReady) { _GL_BLENDContent = SGetField<int>(LocalBridgeClazz, "GL_BLEND"); _GL_BLENDReady = true; } return _GL_BLENDContent; } }
        private static int _GL_BLENDContent = default;
        private static bool _GL_BLENDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_BLEND_COLOR"/>
        /// </summary>
        public static int GL_BLEND_COLOR { get { if (!_GL_BLEND_COLORReady) { _GL_BLEND_COLORContent = SGetField<int>(LocalBridgeClazz, "GL_BLEND_COLOR"); _GL_BLEND_COLORReady = true; } return _GL_BLEND_COLORContent; } }
        private static int _GL_BLEND_COLORContent = default;
        private static bool _GL_BLEND_COLORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_BLEND_DST_ALPHA"/>
        /// </summary>
        public static int GL_BLEND_DST_ALPHA { get { if (!_GL_BLEND_DST_ALPHAReady) { _GL_BLEND_DST_ALPHAContent = SGetField<int>(LocalBridgeClazz, "GL_BLEND_DST_ALPHA"); _GL_BLEND_DST_ALPHAReady = true; } return _GL_BLEND_DST_ALPHAContent; } }
        private static int _GL_BLEND_DST_ALPHAContent = default;
        private static bool _GL_BLEND_DST_ALPHAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_BLEND_DST_RGB"/>
        /// </summary>
        public static int GL_BLEND_DST_RGB { get { if (!_GL_BLEND_DST_RGBReady) { _GL_BLEND_DST_RGBContent = SGetField<int>(LocalBridgeClazz, "GL_BLEND_DST_RGB"); _GL_BLEND_DST_RGBReady = true; } return _GL_BLEND_DST_RGBContent; } }
        private static int _GL_BLEND_DST_RGBContent = default;
        private static bool _GL_BLEND_DST_RGBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_BLEND_EQUATION"/>
        /// </summary>
        public static int GL_BLEND_EQUATION { get { if (!_GL_BLEND_EQUATIONReady) { _GL_BLEND_EQUATIONContent = SGetField<int>(LocalBridgeClazz, "GL_BLEND_EQUATION"); _GL_BLEND_EQUATIONReady = true; } return _GL_BLEND_EQUATIONContent; } }
        private static int _GL_BLEND_EQUATIONContent = default;
        private static bool _GL_BLEND_EQUATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_BLEND_EQUATION_ALPHA"/>
        /// </summary>
        public static int GL_BLEND_EQUATION_ALPHA { get { if (!_GL_BLEND_EQUATION_ALPHAReady) { _GL_BLEND_EQUATION_ALPHAContent = SGetField<int>(LocalBridgeClazz, "GL_BLEND_EQUATION_ALPHA"); _GL_BLEND_EQUATION_ALPHAReady = true; } return _GL_BLEND_EQUATION_ALPHAContent; } }
        private static int _GL_BLEND_EQUATION_ALPHAContent = default;
        private static bool _GL_BLEND_EQUATION_ALPHAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_BLEND_EQUATION_RGB"/>
        /// </summary>
        public static int GL_BLEND_EQUATION_RGB { get { if (!_GL_BLEND_EQUATION_RGBReady) { _GL_BLEND_EQUATION_RGBContent = SGetField<int>(LocalBridgeClazz, "GL_BLEND_EQUATION_RGB"); _GL_BLEND_EQUATION_RGBReady = true; } return _GL_BLEND_EQUATION_RGBContent; } }
        private static int _GL_BLEND_EQUATION_RGBContent = default;
        private static bool _GL_BLEND_EQUATION_RGBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_BLEND_SRC_ALPHA"/>
        /// </summary>
        public static int GL_BLEND_SRC_ALPHA { get { if (!_GL_BLEND_SRC_ALPHAReady) { _GL_BLEND_SRC_ALPHAContent = SGetField<int>(LocalBridgeClazz, "GL_BLEND_SRC_ALPHA"); _GL_BLEND_SRC_ALPHAReady = true; } return _GL_BLEND_SRC_ALPHAContent; } }
        private static int _GL_BLEND_SRC_ALPHAContent = default;
        private static bool _GL_BLEND_SRC_ALPHAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_BLEND_SRC_RGB"/>
        /// </summary>
        public static int GL_BLEND_SRC_RGB { get { if (!_GL_BLEND_SRC_RGBReady) { _GL_BLEND_SRC_RGBContent = SGetField<int>(LocalBridgeClazz, "GL_BLEND_SRC_RGB"); _GL_BLEND_SRC_RGBReady = true; } return _GL_BLEND_SRC_RGBContent; } }
        private static int _GL_BLEND_SRC_RGBContent = default;
        private static bool _GL_BLEND_SRC_RGBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_BLUE_BITS"/>
        /// </summary>
        public static int GL_BLUE_BITS { get { if (!_GL_BLUE_BITSReady) { _GL_BLUE_BITSContent = SGetField<int>(LocalBridgeClazz, "GL_BLUE_BITS"); _GL_BLUE_BITSReady = true; } return _GL_BLUE_BITSContent; } }
        private static int _GL_BLUE_BITSContent = default;
        private static bool _GL_BLUE_BITSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_BOOL"/>
        /// </summary>
        public static int GL_BOOL { get { if (!_GL_BOOLReady) { _GL_BOOLContent = SGetField<int>(LocalBridgeClazz, "GL_BOOL"); _GL_BOOLReady = true; } return _GL_BOOLContent; } }
        private static int _GL_BOOLContent = default;
        private static bool _GL_BOOLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_BOOL_VEC2"/>
        /// </summary>
        public static int GL_BOOL_VEC2 { get { if (!_GL_BOOL_VEC2Ready) { _GL_BOOL_VEC2Content = SGetField<int>(LocalBridgeClazz, "GL_BOOL_VEC2"); _GL_BOOL_VEC2Ready = true; } return _GL_BOOL_VEC2Content; } }
        private static int _GL_BOOL_VEC2Content = default;
        private static bool _GL_BOOL_VEC2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_BOOL_VEC3"/>
        /// </summary>
        public static int GL_BOOL_VEC3 { get { if (!_GL_BOOL_VEC3Ready) { _GL_BOOL_VEC3Content = SGetField<int>(LocalBridgeClazz, "GL_BOOL_VEC3"); _GL_BOOL_VEC3Ready = true; } return _GL_BOOL_VEC3Content; } }
        private static int _GL_BOOL_VEC3Content = default;
        private static bool _GL_BOOL_VEC3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_BOOL_VEC4"/>
        /// </summary>
        public static int GL_BOOL_VEC4 { get { if (!_GL_BOOL_VEC4Ready) { _GL_BOOL_VEC4Content = SGetField<int>(LocalBridgeClazz, "GL_BOOL_VEC4"); _GL_BOOL_VEC4Ready = true; } return _GL_BOOL_VEC4Content; } }
        private static int _GL_BOOL_VEC4Content = default;
        private static bool _GL_BOOL_VEC4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_BUFFER_SIZE"/>
        /// </summary>
        public static int GL_BUFFER_SIZE { get { if (!_GL_BUFFER_SIZEReady) { _GL_BUFFER_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_BUFFER_SIZE"); _GL_BUFFER_SIZEReady = true; } return _GL_BUFFER_SIZEContent; } }
        private static int _GL_BUFFER_SIZEContent = default;
        private static bool _GL_BUFFER_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_BUFFER_USAGE"/>
        /// </summary>
        public static int GL_BUFFER_USAGE { get { if (!_GL_BUFFER_USAGEReady) { _GL_BUFFER_USAGEContent = SGetField<int>(LocalBridgeClazz, "GL_BUFFER_USAGE"); _GL_BUFFER_USAGEReady = true; } return _GL_BUFFER_USAGEContent; } }
        private static int _GL_BUFFER_USAGEContent = default;
        private static bool _GL_BUFFER_USAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_BYTE"/>
        /// </summary>
        public static int GL_BYTE { get { if (!_GL_BYTEReady) { _GL_BYTEContent = SGetField<int>(LocalBridgeClazz, "GL_BYTE"); _GL_BYTEReady = true; } return _GL_BYTEContent; } }
        private static int _GL_BYTEContent = default;
        private static bool _GL_BYTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_CCW"/>
        /// </summary>
        public static int GL_CCW { get { if (!_GL_CCWReady) { _GL_CCWContent = SGetField<int>(LocalBridgeClazz, "GL_CCW"); _GL_CCWReady = true; } return _GL_CCWContent; } }
        private static int _GL_CCWContent = default;
        private static bool _GL_CCWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_CLAMP_TO_EDGE"/>
        /// </summary>
        public static int GL_CLAMP_TO_EDGE { get { if (!_GL_CLAMP_TO_EDGEReady) { _GL_CLAMP_TO_EDGEContent = SGetField<int>(LocalBridgeClazz, "GL_CLAMP_TO_EDGE"); _GL_CLAMP_TO_EDGEReady = true; } return _GL_CLAMP_TO_EDGEContent; } }
        private static int _GL_CLAMP_TO_EDGEContent = default;
        private static bool _GL_CLAMP_TO_EDGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_COLOR_ATTACHMENT0"/>
        /// </summary>
        public static int GL_COLOR_ATTACHMENT0 { get { if (!_GL_COLOR_ATTACHMENT0Ready) { _GL_COLOR_ATTACHMENT0Content = SGetField<int>(LocalBridgeClazz, "GL_COLOR_ATTACHMENT0"); _GL_COLOR_ATTACHMENT0Ready = true; } return _GL_COLOR_ATTACHMENT0Content; } }
        private static int _GL_COLOR_ATTACHMENT0Content = default;
        private static bool _GL_COLOR_ATTACHMENT0Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_COLOR_BUFFER_BIT"/>
        /// </summary>
        public static int GL_COLOR_BUFFER_BIT { get { if (!_GL_COLOR_BUFFER_BITReady) { _GL_COLOR_BUFFER_BITContent = SGetField<int>(LocalBridgeClazz, "GL_COLOR_BUFFER_BIT"); _GL_COLOR_BUFFER_BITReady = true; } return _GL_COLOR_BUFFER_BITContent; } }
        private static int _GL_COLOR_BUFFER_BITContent = default;
        private static bool _GL_COLOR_BUFFER_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_COLOR_CLEAR_VALUE"/>
        /// </summary>
        public static int GL_COLOR_CLEAR_VALUE { get { if (!_GL_COLOR_CLEAR_VALUEReady) { _GL_COLOR_CLEAR_VALUEContent = SGetField<int>(LocalBridgeClazz, "GL_COLOR_CLEAR_VALUE"); _GL_COLOR_CLEAR_VALUEReady = true; } return _GL_COLOR_CLEAR_VALUEContent; } }
        private static int _GL_COLOR_CLEAR_VALUEContent = default;
        private static bool _GL_COLOR_CLEAR_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_COLOR_WRITEMASK"/>
        /// </summary>
        public static int GL_COLOR_WRITEMASK { get { if (!_GL_COLOR_WRITEMASKReady) { _GL_COLOR_WRITEMASKContent = SGetField<int>(LocalBridgeClazz, "GL_COLOR_WRITEMASK"); _GL_COLOR_WRITEMASKReady = true; } return _GL_COLOR_WRITEMASKContent; } }
        private static int _GL_COLOR_WRITEMASKContent = default;
        private static bool _GL_COLOR_WRITEMASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_COMPILE_STATUS"/>
        /// </summary>
        public static int GL_COMPILE_STATUS { get { if (!_GL_COMPILE_STATUSReady) { _GL_COMPILE_STATUSContent = SGetField<int>(LocalBridgeClazz, "GL_COMPILE_STATUS"); _GL_COMPILE_STATUSReady = true; } return _GL_COMPILE_STATUSContent; } }
        private static int _GL_COMPILE_STATUSContent = default;
        private static bool _GL_COMPILE_STATUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_COMPRESSED_TEXTURE_FORMATS"/>
        /// </summary>
        public static int GL_COMPRESSED_TEXTURE_FORMATS { get { if (!_GL_COMPRESSED_TEXTURE_FORMATSReady) { _GL_COMPRESSED_TEXTURE_FORMATSContent = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_TEXTURE_FORMATS"); _GL_COMPRESSED_TEXTURE_FORMATSReady = true; } return _GL_COMPRESSED_TEXTURE_FORMATSContent; } }
        private static int _GL_COMPRESSED_TEXTURE_FORMATSContent = default;
        private static bool _GL_COMPRESSED_TEXTURE_FORMATSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_CONSTANT_ALPHA"/>
        /// </summary>
        public static int GL_CONSTANT_ALPHA { get { if (!_GL_CONSTANT_ALPHAReady) { _GL_CONSTANT_ALPHAContent = SGetField<int>(LocalBridgeClazz, "GL_CONSTANT_ALPHA"); _GL_CONSTANT_ALPHAReady = true; } return _GL_CONSTANT_ALPHAContent; } }
        private static int _GL_CONSTANT_ALPHAContent = default;
        private static bool _GL_CONSTANT_ALPHAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_CONSTANT_COLOR"/>
        /// </summary>
        public static int GL_CONSTANT_COLOR { get { if (!_GL_CONSTANT_COLORReady) { _GL_CONSTANT_COLORContent = SGetField<int>(LocalBridgeClazz, "GL_CONSTANT_COLOR"); _GL_CONSTANT_COLORReady = true; } return _GL_CONSTANT_COLORContent; } }
        private static int _GL_CONSTANT_COLORContent = default;
        private static bool _GL_CONSTANT_COLORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_CULL_FACE"/>
        /// </summary>
        public static int GL_CULL_FACE { get { if (!_GL_CULL_FACEReady) { _GL_CULL_FACEContent = SGetField<int>(LocalBridgeClazz, "GL_CULL_FACE"); _GL_CULL_FACEReady = true; } return _GL_CULL_FACEContent; } }
        private static int _GL_CULL_FACEContent = default;
        private static bool _GL_CULL_FACEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_CULL_FACE_MODE"/>
        /// </summary>
        public static int GL_CULL_FACE_MODE { get { if (!_GL_CULL_FACE_MODEReady) { _GL_CULL_FACE_MODEContent = SGetField<int>(LocalBridgeClazz, "GL_CULL_FACE_MODE"); _GL_CULL_FACE_MODEReady = true; } return _GL_CULL_FACE_MODEContent; } }
        private static int _GL_CULL_FACE_MODEContent = default;
        private static bool _GL_CULL_FACE_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_CURRENT_PROGRAM"/>
        /// </summary>
        public static int GL_CURRENT_PROGRAM { get { if (!_GL_CURRENT_PROGRAMReady) { _GL_CURRENT_PROGRAMContent = SGetField<int>(LocalBridgeClazz, "GL_CURRENT_PROGRAM"); _GL_CURRENT_PROGRAMReady = true; } return _GL_CURRENT_PROGRAMContent; } }
        private static int _GL_CURRENT_PROGRAMContent = default;
        private static bool _GL_CURRENT_PROGRAMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_CURRENT_VERTEX_ATTRIB"/>
        /// </summary>
        public static int GL_CURRENT_VERTEX_ATTRIB { get { if (!_GL_CURRENT_VERTEX_ATTRIBReady) { _GL_CURRENT_VERTEX_ATTRIBContent = SGetField<int>(LocalBridgeClazz, "GL_CURRENT_VERTEX_ATTRIB"); _GL_CURRENT_VERTEX_ATTRIBReady = true; } return _GL_CURRENT_VERTEX_ATTRIBContent; } }
        private static int _GL_CURRENT_VERTEX_ATTRIBContent = default;
        private static bool _GL_CURRENT_VERTEX_ATTRIBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_CW"/>
        /// </summary>
        public static int GL_CW { get { if (!_GL_CWReady) { _GL_CWContent = SGetField<int>(LocalBridgeClazz, "GL_CW"); _GL_CWReady = true; } return _GL_CWContent; } }
        private static int _GL_CWContent = default;
        private static bool _GL_CWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_DECR"/>
        /// </summary>
        public static int GL_DECR { get { if (!_GL_DECRReady) { _GL_DECRContent = SGetField<int>(LocalBridgeClazz, "GL_DECR"); _GL_DECRReady = true; } return _GL_DECRContent; } }
        private static int _GL_DECRContent = default;
        private static bool _GL_DECRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_DECR_WRAP"/>
        /// </summary>
        public static int GL_DECR_WRAP { get { if (!_GL_DECR_WRAPReady) { _GL_DECR_WRAPContent = SGetField<int>(LocalBridgeClazz, "GL_DECR_WRAP"); _GL_DECR_WRAPReady = true; } return _GL_DECR_WRAPContent; } }
        private static int _GL_DECR_WRAPContent = default;
        private static bool _GL_DECR_WRAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_DELETE_STATUS"/>
        /// </summary>
        public static int GL_DELETE_STATUS { get { if (!_GL_DELETE_STATUSReady) { _GL_DELETE_STATUSContent = SGetField<int>(LocalBridgeClazz, "GL_DELETE_STATUS"); _GL_DELETE_STATUSReady = true; } return _GL_DELETE_STATUSContent; } }
        private static int _GL_DELETE_STATUSContent = default;
        private static bool _GL_DELETE_STATUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_DEPTH_ATTACHMENT"/>
        /// </summary>
        public static int GL_DEPTH_ATTACHMENT { get { if (!_GL_DEPTH_ATTACHMENTReady) { _GL_DEPTH_ATTACHMENTContent = SGetField<int>(LocalBridgeClazz, "GL_DEPTH_ATTACHMENT"); _GL_DEPTH_ATTACHMENTReady = true; } return _GL_DEPTH_ATTACHMENTContent; } }
        private static int _GL_DEPTH_ATTACHMENTContent = default;
        private static bool _GL_DEPTH_ATTACHMENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_DEPTH_BITS"/>
        /// </summary>
        public static int GL_DEPTH_BITS { get { if (!_GL_DEPTH_BITSReady) { _GL_DEPTH_BITSContent = SGetField<int>(LocalBridgeClazz, "GL_DEPTH_BITS"); _GL_DEPTH_BITSReady = true; } return _GL_DEPTH_BITSContent; } }
        private static int _GL_DEPTH_BITSContent = default;
        private static bool _GL_DEPTH_BITSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_DEPTH_BUFFER_BIT"/>
        /// </summary>
        public static int GL_DEPTH_BUFFER_BIT { get { if (!_GL_DEPTH_BUFFER_BITReady) { _GL_DEPTH_BUFFER_BITContent = SGetField<int>(LocalBridgeClazz, "GL_DEPTH_BUFFER_BIT"); _GL_DEPTH_BUFFER_BITReady = true; } return _GL_DEPTH_BUFFER_BITContent; } }
        private static int _GL_DEPTH_BUFFER_BITContent = default;
        private static bool _GL_DEPTH_BUFFER_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_DEPTH_CLEAR_VALUE"/>
        /// </summary>
        public static int GL_DEPTH_CLEAR_VALUE { get { if (!_GL_DEPTH_CLEAR_VALUEReady) { _GL_DEPTH_CLEAR_VALUEContent = SGetField<int>(LocalBridgeClazz, "GL_DEPTH_CLEAR_VALUE"); _GL_DEPTH_CLEAR_VALUEReady = true; } return _GL_DEPTH_CLEAR_VALUEContent; } }
        private static int _GL_DEPTH_CLEAR_VALUEContent = default;
        private static bool _GL_DEPTH_CLEAR_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_DEPTH_COMPONENT"/>
        /// </summary>
        public static int GL_DEPTH_COMPONENT { get { if (!_GL_DEPTH_COMPONENTReady) { _GL_DEPTH_COMPONENTContent = SGetField<int>(LocalBridgeClazz, "GL_DEPTH_COMPONENT"); _GL_DEPTH_COMPONENTReady = true; } return _GL_DEPTH_COMPONENTContent; } }
        private static int _GL_DEPTH_COMPONENTContent = default;
        private static bool _GL_DEPTH_COMPONENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_DEPTH_COMPONENT16"/>
        /// </summary>
        public static int GL_DEPTH_COMPONENT16 { get { if (!_GL_DEPTH_COMPONENT16Ready) { _GL_DEPTH_COMPONENT16Content = SGetField<int>(LocalBridgeClazz, "GL_DEPTH_COMPONENT16"); _GL_DEPTH_COMPONENT16Ready = true; } return _GL_DEPTH_COMPONENT16Content; } }
        private static int _GL_DEPTH_COMPONENT16Content = default;
        private static bool _GL_DEPTH_COMPONENT16Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_DEPTH_FUNC"/>
        /// </summary>
        public static int GL_DEPTH_FUNC { get { if (!_GL_DEPTH_FUNCReady) { _GL_DEPTH_FUNCContent = SGetField<int>(LocalBridgeClazz, "GL_DEPTH_FUNC"); _GL_DEPTH_FUNCReady = true; } return _GL_DEPTH_FUNCContent; } }
        private static int _GL_DEPTH_FUNCContent = default;
        private static bool _GL_DEPTH_FUNCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_DEPTH_RANGE"/>
        /// </summary>
        public static int GL_DEPTH_RANGE { get { if (!_GL_DEPTH_RANGEReady) { _GL_DEPTH_RANGEContent = SGetField<int>(LocalBridgeClazz, "GL_DEPTH_RANGE"); _GL_DEPTH_RANGEReady = true; } return _GL_DEPTH_RANGEContent; } }
        private static int _GL_DEPTH_RANGEContent = default;
        private static bool _GL_DEPTH_RANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_DEPTH_TEST"/>
        /// </summary>
        public static int GL_DEPTH_TEST { get { if (!_GL_DEPTH_TESTReady) { _GL_DEPTH_TESTContent = SGetField<int>(LocalBridgeClazz, "GL_DEPTH_TEST"); _GL_DEPTH_TESTReady = true; } return _GL_DEPTH_TESTContent; } }
        private static int _GL_DEPTH_TESTContent = default;
        private static bool _GL_DEPTH_TESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_DEPTH_WRITEMASK"/>
        /// </summary>
        public static int GL_DEPTH_WRITEMASK { get { if (!_GL_DEPTH_WRITEMASKReady) { _GL_DEPTH_WRITEMASKContent = SGetField<int>(LocalBridgeClazz, "GL_DEPTH_WRITEMASK"); _GL_DEPTH_WRITEMASKReady = true; } return _GL_DEPTH_WRITEMASKContent; } }
        private static int _GL_DEPTH_WRITEMASKContent = default;
        private static bool _GL_DEPTH_WRITEMASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_DITHER"/>
        /// </summary>
        public static int GL_DITHER { get { if (!_GL_DITHERReady) { _GL_DITHERContent = SGetField<int>(LocalBridgeClazz, "GL_DITHER"); _GL_DITHERReady = true; } return _GL_DITHERContent; } }
        private static int _GL_DITHERContent = default;
        private static bool _GL_DITHERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_DONT_CARE"/>
        /// </summary>
        public static int GL_DONT_CARE { get { if (!_GL_DONT_CAREReady) { _GL_DONT_CAREContent = SGetField<int>(LocalBridgeClazz, "GL_DONT_CARE"); _GL_DONT_CAREReady = true; } return _GL_DONT_CAREContent; } }
        private static int _GL_DONT_CAREContent = default;
        private static bool _GL_DONT_CAREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_DST_ALPHA"/>
        /// </summary>
        public static int GL_DST_ALPHA { get { if (!_GL_DST_ALPHAReady) { _GL_DST_ALPHAContent = SGetField<int>(LocalBridgeClazz, "GL_DST_ALPHA"); _GL_DST_ALPHAReady = true; } return _GL_DST_ALPHAContent; } }
        private static int _GL_DST_ALPHAContent = default;
        private static bool _GL_DST_ALPHAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_DST_COLOR"/>
        /// </summary>
        public static int GL_DST_COLOR { get { if (!_GL_DST_COLORReady) { _GL_DST_COLORContent = SGetField<int>(LocalBridgeClazz, "GL_DST_COLOR"); _GL_DST_COLORReady = true; } return _GL_DST_COLORContent; } }
        private static int _GL_DST_COLORContent = default;
        private static bool _GL_DST_COLORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_DYNAMIC_DRAW"/>
        /// </summary>
        public static int GL_DYNAMIC_DRAW { get { if (!_GL_DYNAMIC_DRAWReady) { _GL_DYNAMIC_DRAWContent = SGetField<int>(LocalBridgeClazz, "GL_DYNAMIC_DRAW"); _GL_DYNAMIC_DRAWReady = true; } return _GL_DYNAMIC_DRAWContent; } }
        private static int _GL_DYNAMIC_DRAWContent = default;
        private static bool _GL_DYNAMIC_DRAWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_ELEMENT_ARRAY_BUFFER"/>
        /// </summary>
        public static int GL_ELEMENT_ARRAY_BUFFER { get { if (!_GL_ELEMENT_ARRAY_BUFFERReady) { _GL_ELEMENT_ARRAY_BUFFERContent = SGetField<int>(LocalBridgeClazz, "GL_ELEMENT_ARRAY_BUFFER"); _GL_ELEMENT_ARRAY_BUFFERReady = true; } return _GL_ELEMENT_ARRAY_BUFFERContent; } }
        private static int _GL_ELEMENT_ARRAY_BUFFERContent = default;
        private static bool _GL_ELEMENT_ARRAY_BUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_ELEMENT_ARRAY_BUFFER_BINDING"/>
        /// </summary>
        public static int GL_ELEMENT_ARRAY_BUFFER_BINDING { get { if (!_GL_ELEMENT_ARRAY_BUFFER_BINDINGReady) { _GL_ELEMENT_ARRAY_BUFFER_BINDINGContent = SGetField<int>(LocalBridgeClazz, "GL_ELEMENT_ARRAY_BUFFER_BINDING"); _GL_ELEMENT_ARRAY_BUFFER_BINDINGReady = true; } return _GL_ELEMENT_ARRAY_BUFFER_BINDINGContent; } }
        private static int _GL_ELEMENT_ARRAY_BUFFER_BINDINGContent = default;
        private static bool _GL_ELEMENT_ARRAY_BUFFER_BINDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_EQUAL"/>
        /// </summary>
        public static int GL_EQUAL { get { if (!_GL_EQUALReady) { _GL_EQUALContent = SGetField<int>(LocalBridgeClazz, "GL_EQUAL"); _GL_EQUALReady = true; } return _GL_EQUALContent; } }
        private static int _GL_EQUALContent = default;
        private static bool _GL_EQUALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_EXTENSIONS"/>
        /// </summary>
        public static int GL_EXTENSIONS { get { if (!_GL_EXTENSIONSReady) { _GL_EXTENSIONSContent = SGetField<int>(LocalBridgeClazz, "GL_EXTENSIONS"); _GL_EXTENSIONSReady = true; } return _GL_EXTENSIONSContent; } }
        private static int _GL_EXTENSIONSContent = default;
        private static bool _GL_EXTENSIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_FALSE"/>
        /// </summary>
        public static int GL_FALSE { get { if (!_GL_FALSEReady) { _GL_FALSEContent = SGetField<int>(LocalBridgeClazz, "GL_FALSE"); _GL_FALSEReady = true; } return _GL_FALSEContent; } }
        private static int _GL_FALSEContent = default;
        private static bool _GL_FALSEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_FASTEST"/>
        /// </summary>
        public static int GL_FASTEST { get { if (!_GL_FASTESTReady) { _GL_FASTESTContent = SGetField<int>(LocalBridgeClazz, "GL_FASTEST"); _GL_FASTESTReady = true; } return _GL_FASTESTContent; } }
        private static int _GL_FASTESTContent = default;
        private static bool _GL_FASTESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_FIXED"/>
        /// </summary>
        public static int GL_FIXED { get { if (!_GL_FIXEDReady) { _GL_FIXEDContent = SGetField<int>(LocalBridgeClazz, "GL_FIXED"); _GL_FIXEDReady = true; } return _GL_FIXEDContent; } }
        private static int _GL_FIXEDContent = default;
        private static bool _GL_FIXEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_FLOAT"/>
        /// </summary>
        public static int GL_FLOAT { get { if (!_GL_FLOATReady) { _GL_FLOATContent = SGetField<int>(LocalBridgeClazz, "GL_FLOAT"); _GL_FLOATReady = true; } return _GL_FLOATContent; } }
        private static int _GL_FLOATContent = default;
        private static bool _GL_FLOATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_FLOAT_MAT2"/>
        /// </summary>
        public static int GL_FLOAT_MAT2 { get { if (!_GL_FLOAT_MAT2Ready) { _GL_FLOAT_MAT2Content = SGetField<int>(LocalBridgeClazz, "GL_FLOAT_MAT2"); _GL_FLOAT_MAT2Ready = true; } return _GL_FLOAT_MAT2Content; } }
        private static int _GL_FLOAT_MAT2Content = default;
        private static bool _GL_FLOAT_MAT2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_FLOAT_MAT3"/>
        /// </summary>
        public static int GL_FLOAT_MAT3 { get { if (!_GL_FLOAT_MAT3Ready) { _GL_FLOAT_MAT3Content = SGetField<int>(LocalBridgeClazz, "GL_FLOAT_MAT3"); _GL_FLOAT_MAT3Ready = true; } return _GL_FLOAT_MAT3Content; } }
        private static int _GL_FLOAT_MAT3Content = default;
        private static bool _GL_FLOAT_MAT3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_FLOAT_MAT4"/>
        /// </summary>
        public static int GL_FLOAT_MAT4 { get { if (!_GL_FLOAT_MAT4Ready) { _GL_FLOAT_MAT4Content = SGetField<int>(LocalBridgeClazz, "GL_FLOAT_MAT4"); _GL_FLOAT_MAT4Ready = true; } return _GL_FLOAT_MAT4Content; } }
        private static int _GL_FLOAT_MAT4Content = default;
        private static bool _GL_FLOAT_MAT4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_FLOAT_VEC2"/>
        /// </summary>
        public static int GL_FLOAT_VEC2 { get { if (!_GL_FLOAT_VEC2Ready) { _GL_FLOAT_VEC2Content = SGetField<int>(LocalBridgeClazz, "GL_FLOAT_VEC2"); _GL_FLOAT_VEC2Ready = true; } return _GL_FLOAT_VEC2Content; } }
        private static int _GL_FLOAT_VEC2Content = default;
        private static bool _GL_FLOAT_VEC2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_FLOAT_VEC3"/>
        /// </summary>
        public static int GL_FLOAT_VEC3 { get { if (!_GL_FLOAT_VEC3Ready) { _GL_FLOAT_VEC3Content = SGetField<int>(LocalBridgeClazz, "GL_FLOAT_VEC3"); _GL_FLOAT_VEC3Ready = true; } return _GL_FLOAT_VEC3Content; } }
        private static int _GL_FLOAT_VEC3Content = default;
        private static bool _GL_FLOAT_VEC3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_FLOAT_VEC4"/>
        /// </summary>
        public static int GL_FLOAT_VEC4 { get { if (!_GL_FLOAT_VEC4Ready) { _GL_FLOAT_VEC4Content = SGetField<int>(LocalBridgeClazz, "GL_FLOAT_VEC4"); _GL_FLOAT_VEC4Ready = true; } return _GL_FLOAT_VEC4Content; } }
        private static int _GL_FLOAT_VEC4Content = default;
        private static bool _GL_FLOAT_VEC4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_FRAGMENT_SHADER"/>
        /// </summary>
        public static int GL_FRAGMENT_SHADER { get { if (!_GL_FRAGMENT_SHADERReady) { _GL_FRAGMENT_SHADERContent = SGetField<int>(LocalBridgeClazz, "GL_FRAGMENT_SHADER"); _GL_FRAGMENT_SHADERReady = true; } return _GL_FRAGMENT_SHADERContent; } }
        private static int _GL_FRAGMENT_SHADERContent = default;
        private static bool _GL_FRAGMENT_SHADERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_FRAMEBUFFER"/>
        /// </summary>
        public static int GL_FRAMEBUFFER { get { if (!_GL_FRAMEBUFFERReady) { _GL_FRAMEBUFFERContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER"); _GL_FRAMEBUFFERReady = true; } return _GL_FRAMEBUFFERContent; } }
        private static int _GL_FRAMEBUFFERContent = default;
        private static bool _GL_FRAMEBUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME { get { if (!_GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAMEReady) { _GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAMEContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME"); _GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAMEReady = true; } return _GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAMEContent; } }
        private static int _GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAMEContent = default;
        private static bool _GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE { get { if (!_GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPEReady) { _GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPEContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE"); _GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPEReady = true; } return _GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPEContent; } }
        private static int _GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPEContent = default;
        private static bool _GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE { get { if (!_GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACEReady) { _GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACEContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE"); _GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACEReady = true; } return _GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACEContent; } }
        private static int _GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACEContent = default;
        private static bool _GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL { get { if (!_GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVELReady) { _GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVELContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL"); _GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVELReady = true; } return _GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVELContent; } }
        private static int _GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVELContent = default;
        private static bool _GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_FRAMEBUFFER_BINDING"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_BINDING { get { if (!_GL_FRAMEBUFFER_BINDINGReady) { _GL_FRAMEBUFFER_BINDINGContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_BINDING"); _GL_FRAMEBUFFER_BINDINGReady = true; } return _GL_FRAMEBUFFER_BINDINGContent; } }
        private static int _GL_FRAMEBUFFER_BINDINGContent = default;
        private static bool _GL_FRAMEBUFFER_BINDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_FRAMEBUFFER_COMPLETE"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_COMPLETE { get { if (!_GL_FRAMEBUFFER_COMPLETEReady) { _GL_FRAMEBUFFER_COMPLETEContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_COMPLETE"); _GL_FRAMEBUFFER_COMPLETEReady = true; } return _GL_FRAMEBUFFER_COMPLETEContent; } }
        private static int _GL_FRAMEBUFFER_COMPLETEContent = default;
        private static bool _GL_FRAMEBUFFER_COMPLETEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT { get { if (!_GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENTReady) { _GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENTContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT"); _GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENTReady = true; } return _GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENTContent; } }
        private static int _GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENTContent = default;
        private static bool _GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS { get { if (!_GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONSReady) { _GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONSContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS"); _GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONSReady = true; } return _GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONSContent; } }
        private static int _GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONSContent = default;
        private static bool _GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT { get { if (!_GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENTReady) { _GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENTContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT"); _GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENTReady = true; } return _GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENTContent; } }
        private static int _GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENTContent = default;
        private static bool _GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_FRAMEBUFFER_UNSUPPORTED"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_UNSUPPORTED { get { if (!_GL_FRAMEBUFFER_UNSUPPORTEDReady) { _GL_FRAMEBUFFER_UNSUPPORTEDContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_UNSUPPORTED"); _GL_FRAMEBUFFER_UNSUPPORTEDReady = true; } return _GL_FRAMEBUFFER_UNSUPPORTEDContent; } }
        private static int _GL_FRAMEBUFFER_UNSUPPORTEDContent = default;
        private static bool _GL_FRAMEBUFFER_UNSUPPORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_FRONT"/>
        /// </summary>
        public static int GL_FRONT { get { if (!_GL_FRONTReady) { _GL_FRONTContent = SGetField<int>(LocalBridgeClazz, "GL_FRONT"); _GL_FRONTReady = true; } return _GL_FRONTContent; } }
        private static int _GL_FRONTContent = default;
        private static bool _GL_FRONTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_FRONT_AND_BACK"/>
        /// </summary>
        public static int GL_FRONT_AND_BACK { get { if (!_GL_FRONT_AND_BACKReady) { _GL_FRONT_AND_BACKContent = SGetField<int>(LocalBridgeClazz, "GL_FRONT_AND_BACK"); _GL_FRONT_AND_BACKReady = true; } return _GL_FRONT_AND_BACKContent; } }
        private static int _GL_FRONT_AND_BACKContent = default;
        private static bool _GL_FRONT_AND_BACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_FRONT_FACE"/>
        /// </summary>
        public static int GL_FRONT_FACE { get { if (!_GL_FRONT_FACEReady) { _GL_FRONT_FACEContent = SGetField<int>(LocalBridgeClazz, "GL_FRONT_FACE"); _GL_FRONT_FACEReady = true; } return _GL_FRONT_FACEContent; } }
        private static int _GL_FRONT_FACEContent = default;
        private static bool _GL_FRONT_FACEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_FUNC_ADD"/>
        /// </summary>
        public static int GL_FUNC_ADD { get { if (!_GL_FUNC_ADDReady) { _GL_FUNC_ADDContent = SGetField<int>(LocalBridgeClazz, "GL_FUNC_ADD"); _GL_FUNC_ADDReady = true; } return _GL_FUNC_ADDContent; } }
        private static int _GL_FUNC_ADDContent = default;
        private static bool _GL_FUNC_ADDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_FUNC_REVERSE_SUBTRACT"/>
        /// </summary>
        public static int GL_FUNC_REVERSE_SUBTRACT { get { if (!_GL_FUNC_REVERSE_SUBTRACTReady) { _GL_FUNC_REVERSE_SUBTRACTContent = SGetField<int>(LocalBridgeClazz, "GL_FUNC_REVERSE_SUBTRACT"); _GL_FUNC_REVERSE_SUBTRACTReady = true; } return _GL_FUNC_REVERSE_SUBTRACTContent; } }
        private static int _GL_FUNC_REVERSE_SUBTRACTContent = default;
        private static bool _GL_FUNC_REVERSE_SUBTRACTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_FUNC_SUBTRACT"/>
        /// </summary>
        public static int GL_FUNC_SUBTRACT { get { if (!_GL_FUNC_SUBTRACTReady) { _GL_FUNC_SUBTRACTContent = SGetField<int>(LocalBridgeClazz, "GL_FUNC_SUBTRACT"); _GL_FUNC_SUBTRACTReady = true; } return _GL_FUNC_SUBTRACTContent; } }
        private static int _GL_FUNC_SUBTRACTContent = default;
        private static bool _GL_FUNC_SUBTRACTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_GENERATE_MIPMAP_HINT"/>
        /// </summary>
        public static int GL_GENERATE_MIPMAP_HINT { get { if (!_GL_GENERATE_MIPMAP_HINTReady) { _GL_GENERATE_MIPMAP_HINTContent = SGetField<int>(LocalBridgeClazz, "GL_GENERATE_MIPMAP_HINT"); _GL_GENERATE_MIPMAP_HINTReady = true; } return _GL_GENERATE_MIPMAP_HINTContent; } }
        private static int _GL_GENERATE_MIPMAP_HINTContent = default;
        private static bool _GL_GENERATE_MIPMAP_HINTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_GEQUAL"/>
        /// </summary>
        public static int GL_GEQUAL { get { if (!_GL_GEQUALReady) { _GL_GEQUALContent = SGetField<int>(LocalBridgeClazz, "GL_GEQUAL"); _GL_GEQUALReady = true; } return _GL_GEQUALContent; } }
        private static int _GL_GEQUALContent = default;
        private static bool _GL_GEQUALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_GREATER"/>
        /// </summary>
        public static int GL_GREATER { get { if (!_GL_GREATERReady) { _GL_GREATERContent = SGetField<int>(LocalBridgeClazz, "GL_GREATER"); _GL_GREATERReady = true; } return _GL_GREATERContent; } }
        private static int _GL_GREATERContent = default;
        private static bool _GL_GREATERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_GREEN_BITS"/>
        /// </summary>
        public static int GL_GREEN_BITS { get { if (!_GL_GREEN_BITSReady) { _GL_GREEN_BITSContent = SGetField<int>(LocalBridgeClazz, "GL_GREEN_BITS"); _GL_GREEN_BITSReady = true; } return _GL_GREEN_BITSContent; } }
        private static int _GL_GREEN_BITSContent = default;
        private static bool _GL_GREEN_BITSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_HIGH_FLOAT"/>
        /// </summary>
        public static int GL_HIGH_FLOAT { get { if (!_GL_HIGH_FLOATReady) { _GL_HIGH_FLOATContent = SGetField<int>(LocalBridgeClazz, "GL_HIGH_FLOAT"); _GL_HIGH_FLOATReady = true; } return _GL_HIGH_FLOATContent; } }
        private static int _GL_HIGH_FLOATContent = default;
        private static bool _GL_HIGH_FLOATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_HIGH_INT"/>
        /// </summary>
        public static int GL_HIGH_INT { get { if (!_GL_HIGH_INTReady) { _GL_HIGH_INTContent = SGetField<int>(LocalBridgeClazz, "GL_HIGH_INT"); _GL_HIGH_INTReady = true; } return _GL_HIGH_INTContent; } }
        private static int _GL_HIGH_INTContent = default;
        private static bool _GL_HIGH_INTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_IMPLEMENTATION_COLOR_READ_FORMAT"/>
        /// </summary>
        public static int GL_IMPLEMENTATION_COLOR_READ_FORMAT { get { if (!_GL_IMPLEMENTATION_COLOR_READ_FORMATReady) { _GL_IMPLEMENTATION_COLOR_READ_FORMATContent = SGetField<int>(LocalBridgeClazz, "GL_IMPLEMENTATION_COLOR_READ_FORMAT"); _GL_IMPLEMENTATION_COLOR_READ_FORMATReady = true; } return _GL_IMPLEMENTATION_COLOR_READ_FORMATContent; } }
        private static int _GL_IMPLEMENTATION_COLOR_READ_FORMATContent = default;
        private static bool _GL_IMPLEMENTATION_COLOR_READ_FORMATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_IMPLEMENTATION_COLOR_READ_TYPE"/>
        /// </summary>
        public static int GL_IMPLEMENTATION_COLOR_READ_TYPE { get { if (!_GL_IMPLEMENTATION_COLOR_READ_TYPEReady) { _GL_IMPLEMENTATION_COLOR_READ_TYPEContent = SGetField<int>(LocalBridgeClazz, "GL_IMPLEMENTATION_COLOR_READ_TYPE"); _GL_IMPLEMENTATION_COLOR_READ_TYPEReady = true; } return _GL_IMPLEMENTATION_COLOR_READ_TYPEContent; } }
        private static int _GL_IMPLEMENTATION_COLOR_READ_TYPEContent = default;
        private static bool _GL_IMPLEMENTATION_COLOR_READ_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_INCR"/>
        /// </summary>
        public static int GL_INCR { get { if (!_GL_INCRReady) { _GL_INCRContent = SGetField<int>(LocalBridgeClazz, "GL_INCR"); _GL_INCRReady = true; } return _GL_INCRContent; } }
        private static int _GL_INCRContent = default;
        private static bool _GL_INCRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_INCR_WRAP"/>
        /// </summary>
        public static int GL_INCR_WRAP { get { if (!_GL_INCR_WRAPReady) { _GL_INCR_WRAPContent = SGetField<int>(LocalBridgeClazz, "GL_INCR_WRAP"); _GL_INCR_WRAPReady = true; } return _GL_INCR_WRAPContent; } }
        private static int _GL_INCR_WRAPContent = default;
        private static bool _GL_INCR_WRAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_INFO_LOG_LENGTH"/>
        /// </summary>
        public static int GL_INFO_LOG_LENGTH { get { if (!_GL_INFO_LOG_LENGTHReady) { _GL_INFO_LOG_LENGTHContent = SGetField<int>(LocalBridgeClazz, "GL_INFO_LOG_LENGTH"); _GL_INFO_LOG_LENGTHReady = true; } return _GL_INFO_LOG_LENGTHContent; } }
        private static int _GL_INFO_LOG_LENGTHContent = default;
        private static bool _GL_INFO_LOG_LENGTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_INT"/>
        /// </summary>
        public static int GL_INT { get { if (!_GL_INTReady) { _GL_INTContent = SGetField<int>(LocalBridgeClazz, "GL_INT"); _GL_INTReady = true; } return _GL_INTContent; } }
        private static int _GL_INTContent = default;
        private static bool _GL_INTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_INT_VEC2"/>
        /// </summary>
        public static int GL_INT_VEC2 { get { if (!_GL_INT_VEC2Ready) { _GL_INT_VEC2Content = SGetField<int>(LocalBridgeClazz, "GL_INT_VEC2"); _GL_INT_VEC2Ready = true; } return _GL_INT_VEC2Content; } }
        private static int _GL_INT_VEC2Content = default;
        private static bool _GL_INT_VEC2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_INT_VEC3"/>
        /// </summary>
        public static int GL_INT_VEC3 { get { if (!_GL_INT_VEC3Ready) { _GL_INT_VEC3Content = SGetField<int>(LocalBridgeClazz, "GL_INT_VEC3"); _GL_INT_VEC3Ready = true; } return _GL_INT_VEC3Content; } }
        private static int _GL_INT_VEC3Content = default;
        private static bool _GL_INT_VEC3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_INT_VEC4"/>
        /// </summary>
        public static int GL_INT_VEC4 { get { if (!_GL_INT_VEC4Ready) { _GL_INT_VEC4Content = SGetField<int>(LocalBridgeClazz, "GL_INT_VEC4"); _GL_INT_VEC4Ready = true; } return _GL_INT_VEC4Content; } }
        private static int _GL_INT_VEC4Content = default;
        private static bool _GL_INT_VEC4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_INVALID_ENUM"/>
        /// </summary>
        public static int GL_INVALID_ENUM { get { if (!_GL_INVALID_ENUMReady) { _GL_INVALID_ENUMContent = SGetField<int>(LocalBridgeClazz, "GL_INVALID_ENUM"); _GL_INVALID_ENUMReady = true; } return _GL_INVALID_ENUMContent; } }
        private static int _GL_INVALID_ENUMContent = default;
        private static bool _GL_INVALID_ENUMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_INVALID_FRAMEBUFFER_OPERATION"/>
        /// </summary>
        public static int GL_INVALID_FRAMEBUFFER_OPERATION { get { if (!_GL_INVALID_FRAMEBUFFER_OPERATIONReady) { _GL_INVALID_FRAMEBUFFER_OPERATIONContent = SGetField<int>(LocalBridgeClazz, "GL_INVALID_FRAMEBUFFER_OPERATION"); _GL_INVALID_FRAMEBUFFER_OPERATIONReady = true; } return _GL_INVALID_FRAMEBUFFER_OPERATIONContent; } }
        private static int _GL_INVALID_FRAMEBUFFER_OPERATIONContent = default;
        private static bool _GL_INVALID_FRAMEBUFFER_OPERATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_INVALID_OPERATION"/>
        /// </summary>
        public static int GL_INVALID_OPERATION { get { if (!_GL_INVALID_OPERATIONReady) { _GL_INVALID_OPERATIONContent = SGetField<int>(LocalBridgeClazz, "GL_INVALID_OPERATION"); _GL_INVALID_OPERATIONReady = true; } return _GL_INVALID_OPERATIONContent; } }
        private static int _GL_INVALID_OPERATIONContent = default;
        private static bool _GL_INVALID_OPERATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_INVALID_VALUE"/>
        /// </summary>
        public static int GL_INVALID_VALUE { get { if (!_GL_INVALID_VALUEReady) { _GL_INVALID_VALUEContent = SGetField<int>(LocalBridgeClazz, "GL_INVALID_VALUE"); _GL_INVALID_VALUEReady = true; } return _GL_INVALID_VALUEContent; } }
        private static int _GL_INVALID_VALUEContent = default;
        private static bool _GL_INVALID_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_INVERT"/>
        /// </summary>
        public static int GL_INVERT { get { if (!_GL_INVERTReady) { _GL_INVERTContent = SGetField<int>(LocalBridgeClazz, "GL_INVERT"); _GL_INVERTReady = true; } return _GL_INVERTContent; } }
        private static int _GL_INVERTContent = default;
        private static bool _GL_INVERTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_KEEP"/>
        /// </summary>
        public static int GL_KEEP { get { if (!_GL_KEEPReady) { _GL_KEEPContent = SGetField<int>(LocalBridgeClazz, "GL_KEEP"); _GL_KEEPReady = true; } return _GL_KEEPContent; } }
        private static int _GL_KEEPContent = default;
        private static bool _GL_KEEPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_LEQUAL"/>
        /// </summary>
        public static int GL_LEQUAL { get { if (!_GL_LEQUALReady) { _GL_LEQUALContent = SGetField<int>(LocalBridgeClazz, "GL_LEQUAL"); _GL_LEQUALReady = true; } return _GL_LEQUALContent; } }
        private static int _GL_LEQUALContent = default;
        private static bool _GL_LEQUALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_LESS"/>
        /// </summary>
        public static int GL_LESS { get { if (!_GL_LESSReady) { _GL_LESSContent = SGetField<int>(LocalBridgeClazz, "GL_LESS"); _GL_LESSReady = true; } return _GL_LESSContent; } }
        private static int _GL_LESSContent = default;
        private static bool _GL_LESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_LINE_LOOP"/>
        /// </summary>
        public static int GL_LINE_LOOP { get { if (!_GL_LINE_LOOPReady) { _GL_LINE_LOOPContent = SGetField<int>(LocalBridgeClazz, "GL_LINE_LOOP"); _GL_LINE_LOOPReady = true; } return _GL_LINE_LOOPContent; } }
        private static int _GL_LINE_LOOPContent = default;
        private static bool _GL_LINE_LOOPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_LINE_STRIP"/>
        /// </summary>
        public static int GL_LINE_STRIP { get { if (!_GL_LINE_STRIPReady) { _GL_LINE_STRIPContent = SGetField<int>(LocalBridgeClazz, "GL_LINE_STRIP"); _GL_LINE_STRIPReady = true; } return _GL_LINE_STRIPContent; } }
        private static int _GL_LINE_STRIPContent = default;
        private static bool _GL_LINE_STRIPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_LINE_WIDTH"/>
        /// </summary>
        public static int GL_LINE_WIDTH { get { if (!_GL_LINE_WIDTHReady) { _GL_LINE_WIDTHContent = SGetField<int>(LocalBridgeClazz, "GL_LINE_WIDTH"); _GL_LINE_WIDTHReady = true; } return _GL_LINE_WIDTHContent; } }
        private static int _GL_LINE_WIDTHContent = default;
        private static bool _GL_LINE_WIDTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_LINEAR"/>
        /// </summary>
        public static int GL_LINEAR { get { if (!_GL_LINEARReady) { _GL_LINEARContent = SGetField<int>(LocalBridgeClazz, "GL_LINEAR"); _GL_LINEARReady = true; } return _GL_LINEARContent; } }
        private static int _GL_LINEARContent = default;
        private static bool _GL_LINEARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_LINEAR_MIPMAP_LINEAR"/>
        /// </summary>
        public static int GL_LINEAR_MIPMAP_LINEAR { get { if (!_GL_LINEAR_MIPMAP_LINEARReady) { _GL_LINEAR_MIPMAP_LINEARContent = SGetField<int>(LocalBridgeClazz, "GL_LINEAR_MIPMAP_LINEAR"); _GL_LINEAR_MIPMAP_LINEARReady = true; } return _GL_LINEAR_MIPMAP_LINEARContent; } }
        private static int _GL_LINEAR_MIPMAP_LINEARContent = default;
        private static bool _GL_LINEAR_MIPMAP_LINEARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_LINEAR_MIPMAP_NEAREST"/>
        /// </summary>
        public static int GL_LINEAR_MIPMAP_NEAREST { get { if (!_GL_LINEAR_MIPMAP_NEARESTReady) { _GL_LINEAR_MIPMAP_NEARESTContent = SGetField<int>(LocalBridgeClazz, "GL_LINEAR_MIPMAP_NEAREST"); _GL_LINEAR_MIPMAP_NEARESTReady = true; } return _GL_LINEAR_MIPMAP_NEARESTContent; } }
        private static int _GL_LINEAR_MIPMAP_NEARESTContent = default;
        private static bool _GL_LINEAR_MIPMAP_NEARESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_LINES"/>
        /// </summary>
        public static int GL_LINES { get { if (!_GL_LINESReady) { _GL_LINESContent = SGetField<int>(LocalBridgeClazz, "GL_LINES"); _GL_LINESReady = true; } return _GL_LINESContent; } }
        private static int _GL_LINESContent = default;
        private static bool _GL_LINESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_LINK_STATUS"/>
        /// </summary>
        public static int GL_LINK_STATUS { get { if (!_GL_LINK_STATUSReady) { _GL_LINK_STATUSContent = SGetField<int>(LocalBridgeClazz, "GL_LINK_STATUS"); _GL_LINK_STATUSReady = true; } return _GL_LINK_STATUSContent; } }
        private static int _GL_LINK_STATUSContent = default;
        private static bool _GL_LINK_STATUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_LOW_FLOAT"/>
        /// </summary>
        public static int GL_LOW_FLOAT { get { if (!_GL_LOW_FLOATReady) { _GL_LOW_FLOATContent = SGetField<int>(LocalBridgeClazz, "GL_LOW_FLOAT"); _GL_LOW_FLOATReady = true; } return _GL_LOW_FLOATContent; } }
        private static int _GL_LOW_FLOATContent = default;
        private static bool _GL_LOW_FLOATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_LOW_INT"/>
        /// </summary>
        public static int GL_LOW_INT { get { if (!_GL_LOW_INTReady) { _GL_LOW_INTContent = SGetField<int>(LocalBridgeClazz, "GL_LOW_INT"); _GL_LOW_INTReady = true; } return _GL_LOW_INTContent; } }
        private static int _GL_LOW_INTContent = default;
        private static bool _GL_LOW_INTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_LUMINANCE"/>
        /// </summary>
        public static int GL_LUMINANCE { get { if (!_GL_LUMINANCEReady) { _GL_LUMINANCEContent = SGetField<int>(LocalBridgeClazz, "GL_LUMINANCE"); _GL_LUMINANCEReady = true; } return _GL_LUMINANCEContent; } }
        private static int _GL_LUMINANCEContent = default;
        private static bool _GL_LUMINANCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_LUMINANCE_ALPHA"/>
        /// </summary>
        public static int GL_LUMINANCE_ALPHA { get { if (!_GL_LUMINANCE_ALPHAReady) { _GL_LUMINANCE_ALPHAContent = SGetField<int>(LocalBridgeClazz, "GL_LUMINANCE_ALPHA"); _GL_LUMINANCE_ALPHAReady = true; } return _GL_LUMINANCE_ALPHAContent; } }
        private static int _GL_LUMINANCE_ALPHAContent = default;
        private static bool _GL_LUMINANCE_ALPHAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS"/>
        /// </summary>
        public static int GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS { get { if (!_GL_MAX_COMBINED_TEXTURE_IMAGE_UNITSReady) { _GL_MAX_COMBINED_TEXTURE_IMAGE_UNITSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS"); _GL_MAX_COMBINED_TEXTURE_IMAGE_UNITSReady = true; } return _GL_MAX_COMBINED_TEXTURE_IMAGE_UNITSContent; } }
        private static int _GL_MAX_COMBINED_TEXTURE_IMAGE_UNITSContent = default;
        private static bool _GL_MAX_COMBINED_TEXTURE_IMAGE_UNITSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_MAX_CUBE_MAP_TEXTURE_SIZE"/>
        /// </summary>
        public static int GL_MAX_CUBE_MAP_TEXTURE_SIZE { get { if (!_GL_MAX_CUBE_MAP_TEXTURE_SIZEReady) { _GL_MAX_CUBE_MAP_TEXTURE_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_CUBE_MAP_TEXTURE_SIZE"); _GL_MAX_CUBE_MAP_TEXTURE_SIZEReady = true; } return _GL_MAX_CUBE_MAP_TEXTURE_SIZEContent; } }
        private static int _GL_MAX_CUBE_MAP_TEXTURE_SIZEContent = default;
        private static bool _GL_MAX_CUBE_MAP_TEXTURE_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_MAX_FRAGMENT_UNIFORM_VECTORS"/>
        /// </summary>
        public static int GL_MAX_FRAGMENT_UNIFORM_VECTORS { get { if (!_GL_MAX_FRAGMENT_UNIFORM_VECTORSReady) { _GL_MAX_FRAGMENT_UNIFORM_VECTORSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_FRAGMENT_UNIFORM_VECTORS"); _GL_MAX_FRAGMENT_UNIFORM_VECTORSReady = true; } return _GL_MAX_FRAGMENT_UNIFORM_VECTORSContent; } }
        private static int _GL_MAX_FRAGMENT_UNIFORM_VECTORSContent = default;
        private static bool _GL_MAX_FRAGMENT_UNIFORM_VECTORSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_MAX_RENDERBUFFER_SIZE"/>
        /// </summary>
        public static int GL_MAX_RENDERBUFFER_SIZE { get { if (!_GL_MAX_RENDERBUFFER_SIZEReady) { _GL_MAX_RENDERBUFFER_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_RENDERBUFFER_SIZE"); _GL_MAX_RENDERBUFFER_SIZEReady = true; } return _GL_MAX_RENDERBUFFER_SIZEContent; } }
        private static int _GL_MAX_RENDERBUFFER_SIZEContent = default;
        private static bool _GL_MAX_RENDERBUFFER_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_MAX_TEXTURE_IMAGE_UNITS"/>
        /// </summary>
        public static int GL_MAX_TEXTURE_IMAGE_UNITS { get { if (!_GL_MAX_TEXTURE_IMAGE_UNITSReady) { _GL_MAX_TEXTURE_IMAGE_UNITSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TEXTURE_IMAGE_UNITS"); _GL_MAX_TEXTURE_IMAGE_UNITSReady = true; } return _GL_MAX_TEXTURE_IMAGE_UNITSContent; } }
        private static int _GL_MAX_TEXTURE_IMAGE_UNITSContent = default;
        private static bool _GL_MAX_TEXTURE_IMAGE_UNITSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_MAX_TEXTURE_SIZE"/>
        /// </summary>
        public static int GL_MAX_TEXTURE_SIZE { get { if (!_GL_MAX_TEXTURE_SIZEReady) { _GL_MAX_TEXTURE_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TEXTURE_SIZE"); _GL_MAX_TEXTURE_SIZEReady = true; } return _GL_MAX_TEXTURE_SIZEContent; } }
        private static int _GL_MAX_TEXTURE_SIZEContent = default;
        private static bool _GL_MAX_TEXTURE_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_MAX_VARYING_VECTORS"/>
        /// </summary>
        public static int GL_MAX_VARYING_VECTORS { get { if (!_GL_MAX_VARYING_VECTORSReady) { _GL_MAX_VARYING_VECTORSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_VARYING_VECTORS"); _GL_MAX_VARYING_VECTORSReady = true; } return _GL_MAX_VARYING_VECTORSContent; } }
        private static int _GL_MAX_VARYING_VECTORSContent = default;
        private static bool _GL_MAX_VARYING_VECTORSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_MAX_VERTEX_ATTRIBS"/>
        /// </summary>
        public static int GL_MAX_VERTEX_ATTRIBS { get { if (!_GL_MAX_VERTEX_ATTRIBSReady) { _GL_MAX_VERTEX_ATTRIBSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_VERTEX_ATTRIBS"); _GL_MAX_VERTEX_ATTRIBSReady = true; } return _GL_MAX_VERTEX_ATTRIBSContent; } }
        private static int _GL_MAX_VERTEX_ATTRIBSContent = default;
        private static bool _GL_MAX_VERTEX_ATTRIBSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS"/>
        /// </summary>
        public static int GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS { get { if (!_GL_MAX_VERTEX_TEXTURE_IMAGE_UNITSReady) { _GL_MAX_VERTEX_TEXTURE_IMAGE_UNITSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS"); _GL_MAX_VERTEX_TEXTURE_IMAGE_UNITSReady = true; } return _GL_MAX_VERTEX_TEXTURE_IMAGE_UNITSContent; } }
        private static int _GL_MAX_VERTEX_TEXTURE_IMAGE_UNITSContent = default;
        private static bool _GL_MAX_VERTEX_TEXTURE_IMAGE_UNITSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_MAX_VERTEX_UNIFORM_VECTORS"/>
        /// </summary>
        public static int GL_MAX_VERTEX_UNIFORM_VECTORS { get { if (!_GL_MAX_VERTEX_UNIFORM_VECTORSReady) { _GL_MAX_VERTEX_UNIFORM_VECTORSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_VERTEX_UNIFORM_VECTORS"); _GL_MAX_VERTEX_UNIFORM_VECTORSReady = true; } return _GL_MAX_VERTEX_UNIFORM_VECTORSContent; } }
        private static int _GL_MAX_VERTEX_UNIFORM_VECTORSContent = default;
        private static bool _GL_MAX_VERTEX_UNIFORM_VECTORSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_MAX_VIEWPORT_DIMS"/>
        /// </summary>
        public static int GL_MAX_VIEWPORT_DIMS { get { if (!_GL_MAX_VIEWPORT_DIMSReady) { _GL_MAX_VIEWPORT_DIMSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_VIEWPORT_DIMS"); _GL_MAX_VIEWPORT_DIMSReady = true; } return _GL_MAX_VIEWPORT_DIMSContent; } }
        private static int _GL_MAX_VIEWPORT_DIMSContent = default;
        private static bool _GL_MAX_VIEWPORT_DIMSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_MEDIUM_FLOAT"/>
        /// </summary>
        public static int GL_MEDIUM_FLOAT { get { if (!_GL_MEDIUM_FLOATReady) { _GL_MEDIUM_FLOATContent = SGetField<int>(LocalBridgeClazz, "GL_MEDIUM_FLOAT"); _GL_MEDIUM_FLOATReady = true; } return _GL_MEDIUM_FLOATContent; } }
        private static int _GL_MEDIUM_FLOATContent = default;
        private static bool _GL_MEDIUM_FLOATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_MEDIUM_INT"/>
        /// </summary>
        public static int GL_MEDIUM_INT { get { if (!_GL_MEDIUM_INTReady) { _GL_MEDIUM_INTContent = SGetField<int>(LocalBridgeClazz, "GL_MEDIUM_INT"); _GL_MEDIUM_INTReady = true; } return _GL_MEDIUM_INTContent; } }
        private static int _GL_MEDIUM_INTContent = default;
        private static bool _GL_MEDIUM_INTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_MIRRORED_REPEAT"/>
        /// </summary>
        public static int GL_MIRRORED_REPEAT { get { if (!_GL_MIRRORED_REPEATReady) { _GL_MIRRORED_REPEATContent = SGetField<int>(LocalBridgeClazz, "GL_MIRRORED_REPEAT"); _GL_MIRRORED_REPEATReady = true; } return _GL_MIRRORED_REPEATContent; } }
        private static int _GL_MIRRORED_REPEATContent = default;
        private static bool _GL_MIRRORED_REPEATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_NEAREST"/>
        /// </summary>
        public static int GL_NEAREST { get { if (!_GL_NEARESTReady) { _GL_NEARESTContent = SGetField<int>(LocalBridgeClazz, "GL_NEAREST"); _GL_NEARESTReady = true; } return _GL_NEARESTContent; } }
        private static int _GL_NEARESTContent = default;
        private static bool _GL_NEARESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_NEAREST_MIPMAP_LINEAR"/>
        /// </summary>
        public static int GL_NEAREST_MIPMAP_LINEAR { get { if (!_GL_NEAREST_MIPMAP_LINEARReady) { _GL_NEAREST_MIPMAP_LINEARContent = SGetField<int>(LocalBridgeClazz, "GL_NEAREST_MIPMAP_LINEAR"); _GL_NEAREST_MIPMAP_LINEARReady = true; } return _GL_NEAREST_MIPMAP_LINEARContent; } }
        private static int _GL_NEAREST_MIPMAP_LINEARContent = default;
        private static bool _GL_NEAREST_MIPMAP_LINEARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_NEAREST_MIPMAP_NEAREST"/>
        /// </summary>
        public static int GL_NEAREST_MIPMAP_NEAREST { get { if (!_GL_NEAREST_MIPMAP_NEARESTReady) { _GL_NEAREST_MIPMAP_NEARESTContent = SGetField<int>(LocalBridgeClazz, "GL_NEAREST_MIPMAP_NEAREST"); _GL_NEAREST_MIPMAP_NEARESTReady = true; } return _GL_NEAREST_MIPMAP_NEARESTContent; } }
        private static int _GL_NEAREST_MIPMAP_NEARESTContent = default;
        private static bool _GL_NEAREST_MIPMAP_NEARESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_NEVER"/>
        /// </summary>
        public static int GL_NEVER { get { if (!_GL_NEVERReady) { _GL_NEVERContent = SGetField<int>(LocalBridgeClazz, "GL_NEVER"); _GL_NEVERReady = true; } return _GL_NEVERContent; } }
        private static int _GL_NEVERContent = default;
        private static bool _GL_NEVERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_NICEST"/>
        /// </summary>
        public static int GL_NICEST { get { if (!_GL_NICESTReady) { _GL_NICESTContent = SGetField<int>(LocalBridgeClazz, "GL_NICEST"); _GL_NICESTReady = true; } return _GL_NICESTContent; } }
        private static int _GL_NICESTContent = default;
        private static bool _GL_NICESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_NO_ERROR"/>
        /// </summary>
        public static int GL_NO_ERROR { get { if (!_GL_NO_ERRORReady) { _GL_NO_ERRORContent = SGetField<int>(LocalBridgeClazz, "GL_NO_ERROR"); _GL_NO_ERRORReady = true; } return _GL_NO_ERRORContent; } }
        private static int _GL_NO_ERRORContent = default;
        private static bool _GL_NO_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_NONE"/>
        /// </summary>
        public static int GL_NONE { get { if (!_GL_NONEReady) { _GL_NONEContent = SGetField<int>(LocalBridgeClazz, "GL_NONE"); _GL_NONEReady = true; } return _GL_NONEContent; } }
        private static int _GL_NONEContent = default;
        private static bool _GL_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_NOTEQUAL"/>
        /// </summary>
        public static int GL_NOTEQUAL { get { if (!_GL_NOTEQUALReady) { _GL_NOTEQUALContent = SGetField<int>(LocalBridgeClazz, "GL_NOTEQUAL"); _GL_NOTEQUALReady = true; } return _GL_NOTEQUALContent; } }
        private static int _GL_NOTEQUALContent = default;
        private static bool _GL_NOTEQUALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_NUM_COMPRESSED_TEXTURE_FORMATS"/>
        /// </summary>
        public static int GL_NUM_COMPRESSED_TEXTURE_FORMATS { get { if (!_GL_NUM_COMPRESSED_TEXTURE_FORMATSReady) { _GL_NUM_COMPRESSED_TEXTURE_FORMATSContent = SGetField<int>(LocalBridgeClazz, "GL_NUM_COMPRESSED_TEXTURE_FORMATS"); _GL_NUM_COMPRESSED_TEXTURE_FORMATSReady = true; } return _GL_NUM_COMPRESSED_TEXTURE_FORMATSContent; } }
        private static int _GL_NUM_COMPRESSED_TEXTURE_FORMATSContent = default;
        private static bool _GL_NUM_COMPRESSED_TEXTURE_FORMATSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_NUM_SHADER_BINARY_FORMATS"/>
        /// </summary>
        public static int GL_NUM_SHADER_BINARY_FORMATS { get { if (!_GL_NUM_SHADER_BINARY_FORMATSReady) { _GL_NUM_SHADER_BINARY_FORMATSContent = SGetField<int>(LocalBridgeClazz, "GL_NUM_SHADER_BINARY_FORMATS"); _GL_NUM_SHADER_BINARY_FORMATSReady = true; } return _GL_NUM_SHADER_BINARY_FORMATSContent; } }
        private static int _GL_NUM_SHADER_BINARY_FORMATSContent = default;
        private static bool _GL_NUM_SHADER_BINARY_FORMATSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_ONE"/>
        /// </summary>
        public static int GL_ONE { get { if (!_GL_ONEReady) { _GL_ONEContent = SGetField<int>(LocalBridgeClazz, "GL_ONE"); _GL_ONEReady = true; } return _GL_ONEContent; } }
        private static int _GL_ONEContent = default;
        private static bool _GL_ONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_ONE_MINUS_CONSTANT_ALPHA"/>
        /// </summary>
        public static int GL_ONE_MINUS_CONSTANT_ALPHA { get { if (!_GL_ONE_MINUS_CONSTANT_ALPHAReady) { _GL_ONE_MINUS_CONSTANT_ALPHAContent = SGetField<int>(LocalBridgeClazz, "GL_ONE_MINUS_CONSTANT_ALPHA"); _GL_ONE_MINUS_CONSTANT_ALPHAReady = true; } return _GL_ONE_MINUS_CONSTANT_ALPHAContent; } }
        private static int _GL_ONE_MINUS_CONSTANT_ALPHAContent = default;
        private static bool _GL_ONE_MINUS_CONSTANT_ALPHAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_ONE_MINUS_CONSTANT_COLOR"/>
        /// </summary>
        public static int GL_ONE_MINUS_CONSTANT_COLOR { get { if (!_GL_ONE_MINUS_CONSTANT_COLORReady) { _GL_ONE_MINUS_CONSTANT_COLORContent = SGetField<int>(LocalBridgeClazz, "GL_ONE_MINUS_CONSTANT_COLOR"); _GL_ONE_MINUS_CONSTANT_COLORReady = true; } return _GL_ONE_MINUS_CONSTANT_COLORContent; } }
        private static int _GL_ONE_MINUS_CONSTANT_COLORContent = default;
        private static bool _GL_ONE_MINUS_CONSTANT_COLORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_ONE_MINUS_DST_ALPHA"/>
        /// </summary>
        public static int GL_ONE_MINUS_DST_ALPHA { get { if (!_GL_ONE_MINUS_DST_ALPHAReady) { _GL_ONE_MINUS_DST_ALPHAContent = SGetField<int>(LocalBridgeClazz, "GL_ONE_MINUS_DST_ALPHA"); _GL_ONE_MINUS_DST_ALPHAReady = true; } return _GL_ONE_MINUS_DST_ALPHAContent; } }
        private static int _GL_ONE_MINUS_DST_ALPHAContent = default;
        private static bool _GL_ONE_MINUS_DST_ALPHAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_ONE_MINUS_DST_COLOR"/>
        /// </summary>
        public static int GL_ONE_MINUS_DST_COLOR { get { if (!_GL_ONE_MINUS_DST_COLORReady) { _GL_ONE_MINUS_DST_COLORContent = SGetField<int>(LocalBridgeClazz, "GL_ONE_MINUS_DST_COLOR"); _GL_ONE_MINUS_DST_COLORReady = true; } return _GL_ONE_MINUS_DST_COLORContent; } }
        private static int _GL_ONE_MINUS_DST_COLORContent = default;
        private static bool _GL_ONE_MINUS_DST_COLORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_ONE_MINUS_SRC_ALPHA"/>
        /// </summary>
        public static int GL_ONE_MINUS_SRC_ALPHA { get { if (!_GL_ONE_MINUS_SRC_ALPHAReady) { _GL_ONE_MINUS_SRC_ALPHAContent = SGetField<int>(LocalBridgeClazz, "GL_ONE_MINUS_SRC_ALPHA"); _GL_ONE_MINUS_SRC_ALPHAReady = true; } return _GL_ONE_MINUS_SRC_ALPHAContent; } }
        private static int _GL_ONE_MINUS_SRC_ALPHAContent = default;
        private static bool _GL_ONE_MINUS_SRC_ALPHAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_ONE_MINUS_SRC_COLOR"/>
        /// </summary>
        public static int GL_ONE_MINUS_SRC_COLOR { get { if (!_GL_ONE_MINUS_SRC_COLORReady) { _GL_ONE_MINUS_SRC_COLORContent = SGetField<int>(LocalBridgeClazz, "GL_ONE_MINUS_SRC_COLOR"); _GL_ONE_MINUS_SRC_COLORReady = true; } return _GL_ONE_MINUS_SRC_COLORContent; } }
        private static int _GL_ONE_MINUS_SRC_COLORContent = default;
        private static bool _GL_ONE_MINUS_SRC_COLORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_OUT_OF_MEMORY"/>
        /// </summary>
        public static int GL_OUT_OF_MEMORY { get { if (!_GL_OUT_OF_MEMORYReady) { _GL_OUT_OF_MEMORYContent = SGetField<int>(LocalBridgeClazz, "GL_OUT_OF_MEMORY"); _GL_OUT_OF_MEMORYReady = true; } return _GL_OUT_OF_MEMORYContent; } }
        private static int _GL_OUT_OF_MEMORYContent = default;
        private static bool _GL_OUT_OF_MEMORYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_PACK_ALIGNMENT"/>
        /// </summary>
        public static int GL_PACK_ALIGNMENT { get { if (!_GL_PACK_ALIGNMENTReady) { _GL_PACK_ALIGNMENTContent = SGetField<int>(LocalBridgeClazz, "GL_PACK_ALIGNMENT"); _GL_PACK_ALIGNMENTReady = true; } return _GL_PACK_ALIGNMENTContent; } }
        private static int _GL_PACK_ALIGNMENTContent = default;
        private static bool _GL_PACK_ALIGNMENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_POINTS"/>
        /// </summary>
        public static int GL_POINTS { get { if (!_GL_POINTSReady) { _GL_POINTSContent = SGetField<int>(LocalBridgeClazz, "GL_POINTS"); _GL_POINTSReady = true; } return _GL_POINTSContent; } }
        private static int _GL_POINTSContent = default;
        private static bool _GL_POINTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_POLYGON_OFFSET_FACTOR"/>
        /// </summary>
        public static int GL_POLYGON_OFFSET_FACTOR { get { if (!_GL_POLYGON_OFFSET_FACTORReady) { _GL_POLYGON_OFFSET_FACTORContent = SGetField<int>(LocalBridgeClazz, "GL_POLYGON_OFFSET_FACTOR"); _GL_POLYGON_OFFSET_FACTORReady = true; } return _GL_POLYGON_OFFSET_FACTORContent; } }
        private static int _GL_POLYGON_OFFSET_FACTORContent = default;
        private static bool _GL_POLYGON_OFFSET_FACTORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_POLYGON_OFFSET_FILL"/>
        /// </summary>
        public static int GL_POLYGON_OFFSET_FILL { get { if (!_GL_POLYGON_OFFSET_FILLReady) { _GL_POLYGON_OFFSET_FILLContent = SGetField<int>(LocalBridgeClazz, "GL_POLYGON_OFFSET_FILL"); _GL_POLYGON_OFFSET_FILLReady = true; } return _GL_POLYGON_OFFSET_FILLContent; } }
        private static int _GL_POLYGON_OFFSET_FILLContent = default;
        private static bool _GL_POLYGON_OFFSET_FILLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_POLYGON_OFFSET_UNITS"/>
        /// </summary>
        public static int GL_POLYGON_OFFSET_UNITS { get { if (!_GL_POLYGON_OFFSET_UNITSReady) { _GL_POLYGON_OFFSET_UNITSContent = SGetField<int>(LocalBridgeClazz, "GL_POLYGON_OFFSET_UNITS"); _GL_POLYGON_OFFSET_UNITSReady = true; } return _GL_POLYGON_OFFSET_UNITSContent; } }
        private static int _GL_POLYGON_OFFSET_UNITSContent = default;
        private static bool _GL_POLYGON_OFFSET_UNITSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_RED_BITS"/>
        /// </summary>
        public static int GL_RED_BITS { get { if (!_GL_RED_BITSReady) { _GL_RED_BITSContent = SGetField<int>(LocalBridgeClazz, "GL_RED_BITS"); _GL_RED_BITSReady = true; } return _GL_RED_BITSContent; } }
        private static int _GL_RED_BITSContent = default;
        private static bool _GL_RED_BITSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_RENDERBUFFER"/>
        /// </summary>
        public static int GL_RENDERBUFFER { get { if (!_GL_RENDERBUFFERReady) { _GL_RENDERBUFFERContent = SGetField<int>(LocalBridgeClazz, "GL_RENDERBUFFER"); _GL_RENDERBUFFERReady = true; } return _GL_RENDERBUFFERContent; } }
        private static int _GL_RENDERBUFFERContent = default;
        private static bool _GL_RENDERBUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_RENDERBUFFER_ALPHA_SIZE"/>
        /// </summary>
        public static int GL_RENDERBUFFER_ALPHA_SIZE { get { if (!_GL_RENDERBUFFER_ALPHA_SIZEReady) { _GL_RENDERBUFFER_ALPHA_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_RENDERBUFFER_ALPHA_SIZE"); _GL_RENDERBUFFER_ALPHA_SIZEReady = true; } return _GL_RENDERBUFFER_ALPHA_SIZEContent; } }
        private static int _GL_RENDERBUFFER_ALPHA_SIZEContent = default;
        private static bool _GL_RENDERBUFFER_ALPHA_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_RENDERBUFFER_BINDING"/>
        /// </summary>
        public static int GL_RENDERBUFFER_BINDING { get { if (!_GL_RENDERBUFFER_BINDINGReady) { _GL_RENDERBUFFER_BINDINGContent = SGetField<int>(LocalBridgeClazz, "GL_RENDERBUFFER_BINDING"); _GL_RENDERBUFFER_BINDINGReady = true; } return _GL_RENDERBUFFER_BINDINGContent; } }
        private static int _GL_RENDERBUFFER_BINDINGContent = default;
        private static bool _GL_RENDERBUFFER_BINDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_RENDERBUFFER_BLUE_SIZE"/>
        /// </summary>
        public static int GL_RENDERBUFFER_BLUE_SIZE { get { if (!_GL_RENDERBUFFER_BLUE_SIZEReady) { _GL_RENDERBUFFER_BLUE_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_RENDERBUFFER_BLUE_SIZE"); _GL_RENDERBUFFER_BLUE_SIZEReady = true; } return _GL_RENDERBUFFER_BLUE_SIZEContent; } }
        private static int _GL_RENDERBUFFER_BLUE_SIZEContent = default;
        private static bool _GL_RENDERBUFFER_BLUE_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_RENDERBUFFER_DEPTH_SIZE"/>
        /// </summary>
        public static int GL_RENDERBUFFER_DEPTH_SIZE { get { if (!_GL_RENDERBUFFER_DEPTH_SIZEReady) { _GL_RENDERBUFFER_DEPTH_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_RENDERBUFFER_DEPTH_SIZE"); _GL_RENDERBUFFER_DEPTH_SIZEReady = true; } return _GL_RENDERBUFFER_DEPTH_SIZEContent; } }
        private static int _GL_RENDERBUFFER_DEPTH_SIZEContent = default;
        private static bool _GL_RENDERBUFFER_DEPTH_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_RENDERBUFFER_GREEN_SIZE"/>
        /// </summary>
        public static int GL_RENDERBUFFER_GREEN_SIZE { get { if (!_GL_RENDERBUFFER_GREEN_SIZEReady) { _GL_RENDERBUFFER_GREEN_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_RENDERBUFFER_GREEN_SIZE"); _GL_RENDERBUFFER_GREEN_SIZEReady = true; } return _GL_RENDERBUFFER_GREEN_SIZEContent; } }
        private static int _GL_RENDERBUFFER_GREEN_SIZEContent = default;
        private static bool _GL_RENDERBUFFER_GREEN_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_RENDERBUFFER_HEIGHT"/>
        /// </summary>
        public static int GL_RENDERBUFFER_HEIGHT { get { if (!_GL_RENDERBUFFER_HEIGHTReady) { _GL_RENDERBUFFER_HEIGHTContent = SGetField<int>(LocalBridgeClazz, "GL_RENDERBUFFER_HEIGHT"); _GL_RENDERBUFFER_HEIGHTReady = true; } return _GL_RENDERBUFFER_HEIGHTContent; } }
        private static int _GL_RENDERBUFFER_HEIGHTContent = default;
        private static bool _GL_RENDERBUFFER_HEIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_RENDERBUFFER_INTERNAL_FORMAT"/>
        /// </summary>
        public static int GL_RENDERBUFFER_INTERNAL_FORMAT { get { if (!_GL_RENDERBUFFER_INTERNAL_FORMATReady) { _GL_RENDERBUFFER_INTERNAL_FORMATContent = SGetField<int>(LocalBridgeClazz, "GL_RENDERBUFFER_INTERNAL_FORMAT"); _GL_RENDERBUFFER_INTERNAL_FORMATReady = true; } return _GL_RENDERBUFFER_INTERNAL_FORMATContent; } }
        private static int _GL_RENDERBUFFER_INTERNAL_FORMATContent = default;
        private static bool _GL_RENDERBUFFER_INTERNAL_FORMATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_RENDERBUFFER_RED_SIZE"/>
        /// </summary>
        public static int GL_RENDERBUFFER_RED_SIZE { get { if (!_GL_RENDERBUFFER_RED_SIZEReady) { _GL_RENDERBUFFER_RED_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_RENDERBUFFER_RED_SIZE"); _GL_RENDERBUFFER_RED_SIZEReady = true; } return _GL_RENDERBUFFER_RED_SIZEContent; } }
        private static int _GL_RENDERBUFFER_RED_SIZEContent = default;
        private static bool _GL_RENDERBUFFER_RED_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_RENDERBUFFER_STENCIL_SIZE"/>
        /// </summary>
        public static int GL_RENDERBUFFER_STENCIL_SIZE { get { if (!_GL_RENDERBUFFER_STENCIL_SIZEReady) { _GL_RENDERBUFFER_STENCIL_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_RENDERBUFFER_STENCIL_SIZE"); _GL_RENDERBUFFER_STENCIL_SIZEReady = true; } return _GL_RENDERBUFFER_STENCIL_SIZEContent; } }
        private static int _GL_RENDERBUFFER_STENCIL_SIZEContent = default;
        private static bool _GL_RENDERBUFFER_STENCIL_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_RENDERBUFFER_WIDTH"/>
        /// </summary>
        public static int GL_RENDERBUFFER_WIDTH { get { if (!_GL_RENDERBUFFER_WIDTHReady) { _GL_RENDERBUFFER_WIDTHContent = SGetField<int>(LocalBridgeClazz, "GL_RENDERBUFFER_WIDTH"); _GL_RENDERBUFFER_WIDTHReady = true; } return _GL_RENDERBUFFER_WIDTHContent; } }
        private static int _GL_RENDERBUFFER_WIDTHContent = default;
        private static bool _GL_RENDERBUFFER_WIDTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_RENDERER"/>
        /// </summary>
        public static int GL_RENDERER { get { if (!_GL_RENDERERReady) { _GL_RENDERERContent = SGetField<int>(LocalBridgeClazz, "GL_RENDERER"); _GL_RENDERERReady = true; } return _GL_RENDERERContent; } }
        private static int _GL_RENDERERContent = default;
        private static bool _GL_RENDERERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_REPEAT"/>
        /// </summary>
        public static int GL_REPEAT { get { if (!_GL_REPEATReady) { _GL_REPEATContent = SGetField<int>(LocalBridgeClazz, "GL_REPEAT"); _GL_REPEATReady = true; } return _GL_REPEATContent; } }
        private static int _GL_REPEATContent = default;
        private static bool _GL_REPEATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_REPLACE"/>
        /// </summary>
        public static int GL_REPLACE { get { if (!_GL_REPLACEReady) { _GL_REPLACEContent = SGetField<int>(LocalBridgeClazz, "GL_REPLACE"); _GL_REPLACEReady = true; } return _GL_REPLACEContent; } }
        private static int _GL_REPLACEContent = default;
        private static bool _GL_REPLACEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_RGB"/>
        /// </summary>
        public static int GL_RGB { get { if (!_GL_RGBReady) { _GL_RGBContent = SGetField<int>(LocalBridgeClazz, "GL_RGB"); _GL_RGBReady = true; } return _GL_RGBContent; } }
        private static int _GL_RGBContent = default;
        private static bool _GL_RGBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_RGB5_A1"/>
        /// </summary>
        public static int GL_RGB5_A1 { get { if (!_GL_RGB5_A1Ready) { _GL_RGB5_A1Content = SGetField<int>(LocalBridgeClazz, "GL_RGB5_A1"); _GL_RGB5_A1Ready = true; } return _GL_RGB5_A1Content; } }
        private static int _GL_RGB5_A1Content = default;
        private static bool _GL_RGB5_A1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_RGB565"/>
        /// </summary>
        public static int GL_RGB565 { get { if (!_GL_RGB565Ready) { _GL_RGB565Content = SGetField<int>(LocalBridgeClazz, "GL_RGB565"); _GL_RGB565Ready = true; } return _GL_RGB565Content; } }
        private static int _GL_RGB565Content = default;
        private static bool _GL_RGB565Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_RGBA"/>
        /// </summary>
        public static int GL_RGBA { get { if (!_GL_RGBAReady) { _GL_RGBAContent = SGetField<int>(LocalBridgeClazz, "GL_RGBA"); _GL_RGBAReady = true; } return _GL_RGBAContent; } }
        private static int _GL_RGBAContent = default;
        private static bool _GL_RGBAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_RGBA4"/>
        /// </summary>
        public static int GL_RGBA4 { get { if (!_GL_RGBA4Ready) { _GL_RGBA4Content = SGetField<int>(LocalBridgeClazz, "GL_RGBA4"); _GL_RGBA4Ready = true; } return _GL_RGBA4Content; } }
        private static int _GL_RGBA4Content = default;
        private static bool _GL_RGBA4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_SAMPLE_ALPHA_TO_COVERAGE"/>
        /// </summary>
        public static int GL_SAMPLE_ALPHA_TO_COVERAGE { get { if (!_GL_SAMPLE_ALPHA_TO_COVERAGEReady) { _GL_SAMPLE_ALPHA_TO_COVERAGEContent = SGetField<int>(LocalBridgeClazz, "GL_SAMPLE_ALPHA_TO_COVERAGE"); _GL_SAMPLE_ALPHA_TO_COVERAGEReady = true; } return _GL_SAMPLE_ALPHA_TO_COVERAGEContent; } }
        private static int _GL_SAMPLE_ALPHA_TO_COVERAGEContent = default;
        private static bool _GL_SAMPLE_ALPHA_TO_COVERAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_SAMPLE_BUFFERS"/>
        /// </summary>
        public static int GL_SAMPLE_BUFFERS { get { if (!_GL_SAMPLE_BUFFERSReady) { _GL_SAMPLE_BUFFERSContent = SGetField<int>(LocalBridgeClazz, "GL_SAMPLE_BUFFERS"); _GL_SAMPLE_BUFFERSReady = true; } return _GL_SAMPLE_BUFFERSContent; } }
        private static int _GL_SAMPLE_BUFFERSContent = default;
        private static bool _GL_SAMPLE_BUFFERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_SAMPLE_COVERAGE"/>
        /// </summary>
        public static int GL_SAMPLE_COVERAGE { get { if (!_GL_SAMPLE_COVERAGEReady) { _GL_SAMPLE_COVERAGEContent = SGetField<int>(LocalBridgeClazz, "GL_SAMPLE_COVERAGE"); _GL_SAMPLE_COVERAGEReady = true; } return _GL_SAMPLE_COVERAGEContent; } }
        private static int _GL_SAMPLE_COVERAGEContent = default;
        private static bool _GL_SAMPLE_COVERAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_SAMPLE_COVERAGE_INVERT"/>
        /// </summary>
        public static int GL_SAMPLE_COVERAGE_INVERT { get { if (!_GL_SAMPLE_COVERAGE_INVERTReady) { _GL_SAMPLE_COVERAGE_INVERTContent = SGetField<int>(LocalBridgeClazz, "GL_SAMPLE_COVERAGE_INVERT"); _GL_SAMPLE_COVERAGE_INVERTReady = true; } return _GL_SAMPLE_COVERAGE_INVERTContent; } }
        private static int _GL_SAMPLE_COVERAGE_INVERTContent = default;
        private static bool _GL_SAMPLE_COVERAGE_INVERTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_SAMPLE_COVERAGE_VALUE"/>
        /// </summary>
        public static int GL_SAMPLE_COVERAGE_VALUE { get { if (!_GL_SAMPLE_COVERAGE_VALUEReady) { _GL_SAMPLE_COVERAGE_VALUEContent = SGetField<int>(LocalBridgeClazz, "GL_SAMPLE_COVERAGE_VALUE"); _GL_SAMPLE_COVERAGE_VALUEReady = true; } return _GL_SAMPLE_COVERAGE_VALUEContent; } }
        private static int _GL_SAMPLE_COVERAGE_VALUEContent = default;
        private static bool _GL_SAMPLE_COVERAGE_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_SAMPLER_2D"/>
        /// </summary>
        public static int GL_SAMPLER_2D { get { if (!_GL_SAMPLER_2DReady) { _GL_SAMPLER_2DContent = SGetField<int>(LocalBridgeClazz, "GL_SAMPLER_2D"); _GL_SAMPLER_2DReady = true; } return _GL_SAMPLER_2DContent; } }
        private static int _GL_SAMPLER_2DContent = default;
        private static bool _GL_SAMPLER_2DReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_SAMPLER_CUBE"/>
        /// </summary>
        public static int GL_SAMPLER_CUBE { get { if (!_GL_SAMPLER_CUBEReady) { _GL_SAMPLER_CUBEContent = SGetField<int>(LocalBridgeClazz, "GL_SAMPLER_CUBE"); _GL_SAMPLER_CUBEReady = true; } return _GL_SAMPLER_CUBEContent; } }
        private static int _GL_SAMPLER_CUBEContent = default;
        private static bool _GL_SAMPLER_CUBEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_SAMPLES"/>
        /// </summary>
        public static int GL_SAMPLES { get { if (!_GL_SAMPLESReady) { _GL_SAMPLESContent = SGetField<int>(LocalBridgeClazz, "GL_SAMPLES"); _GL_SAMPLESReady = true; } return _GL_SAMPLESContent; } }
        private static int _GL_SAMPLESContent = default;
        private static bool _GL_SAMPLESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_SCISSOR_BOX"/>
        /// </summary>
        public static int GL_SCISSOR_BOX { get { if (!_GL_SCISSOR_BOXReady) { _GL_SCISSOR_BOXContent = SGetField<int>(LocalBridgeClazz, "GL_SCISSOR_BOX"); _GL_SCISSOR_BOXReady = true; } return _GL_SCISSOR_BOXContent; } }
        private static int _GL_SCISSOR_BOXContent = default;
        private static bool _GL_SCISSOR_BOXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_SCISSOR_TEST"/>
        /// </summary>
        public static int GL_SCISSOR_TEST { get { if (!_GL_SCISSOR_TESTReady) { _GL_SCISSOR_TESTContent = SGetField<int>(LocalBridgeClazz, "GL_SCISSOR_TEST"); _GL_SCISSOR_TESTReady = true; } return _GL_SCISSOR_TESTContent; } }
        private static int _GL_SCISSOR_TESTContent = default;
        private static bool _GL_SCISSOR_TESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_SHADER_BINARY_FORMATS"/>
        /// </summary>
        public static int GL_SHADER_BINARY_FORMATS { get { if (!_GL_SHADER_BINARY_FORMATSReady) { _GL_SHADER_BINARY_FORMATSContent = SGetField<int>(LocalBridgeClazz, "GL_SHADER_BINARY_FORMATS"); _GL_SHADER_BINARY_FORMATSReady = true; } return _GL_SHADER_BINARY_FORMATSContent; } }
        private static int _GL_SHADER_BINARY_FORMATSContent = default;
        private static bool _GL_SHADER_BINARY_FORMATSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_SHADER_COMPILER"/>
        /// </summary>
        public static int GL_SHADER_COMPILER { get { if (!_GL_SHADER_COMPILERReady) { _GL_SHADER_COMPILERContent = SGetField<int>(LocalBridgeClazz, "GL_SHADER_COMPILER"); _GL_SHADER_COMPILERReady = true; } return _GL_SHADER_COMPILERContent; } }
        private static int _GL_SHADER_COMPILERContent = default;
        private static bool _GL_SHADER_COMPILERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_SHADER_SOURCE_LENGTH"/>
        /// </summary>
        public static int GL_SHADER_SOURCE_LENGTH { get { if (!_GL_SHADER_SOURCE_LENGTHReady) { _GL_SHADER_SOURCE_LENGTHContent = SGetField<int>(LocalBridgeClazz, "GL_SHADER_SOURCE_LENGTH"); _GL_SHADER_SOURCE_LENGTHReady = true; } return _GL_SHADER_SOURCE_LENGTHContent; } }
        private static int _GL_SHADER_SOURCE_LENGTHContent = default;
        private static bool _GL_SHADER_SOURCE_LENGTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_SHADER_TYPE"/>
        /// </summary>
        public static int GL_SHADER_TYPE { get { if (!_GL_SHADER_TYPEReady) { _GL_SHADER_TYPEContent = SGetField<int>(LocalBridgeClazz, "GL_SHADER_TYPE"); _GL_SHADER_TYPEReady = true; } return _GL_SHADER_TYPEContent; } }
        private static int _GL_SHADER_TYPEContent = default;
        private static bool _GL_SHADER_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_SHADING_LANGUAGE_VERSION"/>
        /// </summary>
        public static int GL_SHADING_LANGUAGE_VERSION { get { if (!_GL_SHADING_LANGUAGE_VERSIONReady) { _GL_SHADING_LANGUAGE_VERSIONContent = SGetField<int>(LocalBridgeClazz, "GL_SHADING_LANGUAGE_VERSION"); _GL_SHADING_LANGUAGE_VERSIONReady = true; } return _GL_SHADING_LANGUAGE_VERSIONContent; } }
        private static int _GL_SHADING_LANGUAGE_VERSIONContent = default;
        private static bool _GL_SHADING_LANGUAGE_VERSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_SHORT"/>
        /// </summary>
        public static int GL_SHORT { get { if (!_GL_SHORTReady) { _GL_SHORTContent = SGetField<int>(LocalBridgeClazz, "GL_SHORT"); _GL_SHORTReady = true; } return _GL_SHORTContent; } }
        private static int _GL_SHORTContent = default;
        private static bool _GL_SHORTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_SRC_ALPHA"/>
        /// </summary>
        public static int GL_SRC_ALPHA { get { if (!_GL_SRC_ALPHAReady) { _GL_SRC_ALPHAContent = SGetField<int>(LocalBridgeClazz, "GL_SRC_ALPHA"); _GL_SRC_ALPHAReady = true; } return _GL_SRC_ALPHAContent; } }
        private static int _GL_SRC_ALPHAContent = default;
        private static bool _GL_SRC_ALPHAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_SRC_ALPHA_SATURATE"/>
        /// </summary>
        public static int GL_SRC_ALPHA_SATURATE { get { if (!_GL_SRC_ALPHA_SATURATEReady) { _GL_SRC_ALPHA_SATURATEContent = SGetField<int>(LocalBridgeClazz, "GL_SRC_ALPHA_SATURATE"); _GL_SRC_ALPHA_SATURATEReady = true; } return _GL_SRC_ALPHA_SATURATEContent; } }
        private static int _GL_SRC_ALPHA_SATURATEContent = default;
        private static bool _GL_SRC_ALPHA_SATURATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_SRC_COLOR"/>
        /// </summary>
        public static int GL_SRC_COLOR { get { if (!_GL_SRC_COLORReady) { _GL_SRC_COLORContent = SGetField<int>(LocalBridgeClazz, "GL_SRC_COLOR"); _GL_SRC_COLORReady = true; } return _GL_SRC_COLORContent; } }
        private static int _GL_SRC_COLORContent = default;
        private static bool _GL_SRC_COLORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_STATIC_DRAW"/>
        /// </summary>
        public static int GL_STATIC_DRAW { get { if (!_GL_STATIC_DRAWReady) { _GL_STATIC_DRAWContent = SGetField<int>(LocalBridgeClazz, "GL_STATIC_DRAW"); _GL_STATIC_DRAWReady = true; } return _GL_STATIC_DRAWContent; } }
        private static int _GL_STATIC_DRAWContent = default;
        private static bool _GL_STATIC_DRAWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_ATTACHMENT"/>
        /// </summary>
        public static int GL_STENCIL_ATTACHMENT { get { if (!_GL_STENCIL_ATTACHMENTReady) { _GL_STENCIL_ATTACHMENTContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_ATTACHMENT"); _GL_STENCIL_ATTACHMENTReady = true; } return _GL_STENCIL_ATTACHMENTContent; } }
        private static int _GL_STENCIL_ATTACHMENTContent = default;
        private static bool _GL_STENCIL_ATTACHMENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_BACK_FAIL"/>
        /// </summary>
        public static int GL_STENCIL_BACK_FAIL { get { if (!_GL_STENCIL_BACK_FAILReady) { _GL_STENCIL_BACK_FAILContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_BACK_FAIL"); _GL_STENCIL_BACK_FAILReady = true; } return _GL_STENCIL_BACK_FAILContent; } }
        private static int _GL_STENCIL_BACK_FAILContent = default;
        private static bool _GL_STENCIL_BACK_FAILReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_BACK_FUNC"/>
        /// </summary>
        public static int GL_STENCIL_BACK_FUNC { get { if (!_GL_STENCIL_BACK_FUNCReady) { _GL_STENCIL_BACK_FUNCContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_BACK_FUNC"); _GL_STENCIL_BACK_FUNCReady = true; } return _GL_STENCIL_BACK_FUNCContent; } }
        private static int _GL_STENCIL_BACK_FUNCContent = default;
        private static bool _GL_STENCIL_BACK_FUNCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_BACK_PASS_DEPTH_FAIL"/>
        /// </summary>
        public static int GL_STENCIL_BACK_PASS_DEPTH_FAIL { get { if (!_GL_STENCIL_BACK_PASS_DEPTH_FAILReady) { _GL_STENCIL_BACK_PASS_DEPTH_FAILContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_BACK_PASS_DEPTH_FAIL"); _GL_STENCIL_BACK_PASS_DEPTH_FAILReady = true; } return _GL_STENCIL_BACK_PASS_DEPTH_FAILContent; } }
        private static int _GL_STENCIL_BACK_PASS_DEPTH_FAILContent = default;
        private static bool _GL_STENCIL_BACK_PASS_DEPTH_FAILReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_BACK_PASS_DEPTH_PASS"/>
        /// </summary>
        public static int GL_STENCIL_BACK_PASS_DEPTH_PASS { get { if (!_GL_STENCIL_BACK_PASS_DEPTH_PASSReady) { _GL_STENCIL_BACK_PASS_DEPTH_PASSContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_BACK_PASS_DEPTH_PASS"); _GL_STENCIL_BACK_PASS_DEPTH_PASSReady = true; } return _GL_STENCIL_BACK_PASS_DEPTH_PASSContent; } }
        private static int _GL_STENCIL_BACK_PASS_DEPTH_PASSContent = default;
        private static bool _GL_STENCIL_BACK_PASS_DEPTH_PASSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_BACK_REF"/>
        /// </summary>
        public static int GL_STENCIL_BACK_REF { get { if (!_GL_STENCIL_BACK_REFReady) { _GL_STENCIL_BACK_REFContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_BACK_REF"); _GL_STENCIL_BACK_REFReady = true; } return _GL_STENCIL_BACK_REFContent; } }
        private static int _GL_STENCIL_BACK_REFContent = default;
        private static bool _GL_STENCIL_BACK_REFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_BACK_VALUE_MASK"/>
        /// </summary>
        public static int GL_STENCIL_BACK_VALUE_MASK { get { if (!_GL_STENCIL_BACK_VALUE_MASKReady) { _GL_STENCIL_BACK_VALUE_MASKContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_BACK_VALUE_MASK"); _GL_STENCIL_BACK_VALUE_MASKReady = true; } return _GL_STENCIL_BACK_VALUE_MASKContent; } }
        private static int _GL_STENCIL_BACK_VALUE_MASKContent = default;
        private static bool _GL_STENCIL_BACK_VALUE_MASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_BACK_WRITEMASK"/>
        /// </summary>
        public static int GL_STENCIL_BACK_WRITEMASK { get { if (!_GL_STENCIL_BACK_WRITEMASKReady) { _GL_STENCIL_BACK_WRITEMASKContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_BACK_WRITEMASK"); _GL_STENCIL_BACK_WRITEMASKReady = true; } return _GL_STENCIL_BACK_WRITEMASKContent; } }
        private static int _GL_STENCIL_BACK_WRITEMASKContent = default;
        private static bool _GL_STENCIL_BACK_WRITEMASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_BITS"/>
        /// </summary>
        public static int GL_STENCIL_BITS { get { if (!_GL_STENCIL_BITSReady) { _GL_STENCIL_BITSContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_BITS"); _GL_STENCIL_BITSReady = true; } return _GL_STENCIL_BITSContent; } }
        private static int _GL_STENCIL_BITSContent = default;
        private static bool _GL_STENCIL_BITSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_BUFFER_BIT"/>
        /// </summary>
        public static int GL_STENCIL_BUFFER_BIT { get { if (!_GL_STENCIL_BUFFER_BITReady) { _GL_STENCIL_BUFFER_BITContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_BUFFER_BIT"); _GL_STENCIL_BUFFER_BITReady = true; } return _GL_STENCIL_BUFFER_BITContent; } }
        private static int _GL_STENCIL_BUFFER_BITContent = default;
        private static bool _GL_STENCIL_BUFFER_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_CLEAR_VALUE"/>
        /// </summary>
        public static int GL_STENCIL_CLEAR_VALUE { get { if (!_GL_STENCIL_CLEAR_VALUEReady) { _GL_STENCIL_CLEAR_VALUEContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_CLEAR_VALUE"); _GL_STENCIL_CLEAR_VALUEReady = true; } return _GL_STENCIL_CLEAR_VALUEContent; } }
        private static int _GL_STENCIL_CLEAR_VALUEContent = default;
        private static bool _GL_STENCIL_CLEAR_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_FAIL"/>
        /// </summary>
        public static int GL_STENCIL_FAIL { get { if (!_GL_STENCIL_FAILReady) { _GL_STENCIL_FAILContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_FAIL"); _GL_STENCIL_FAILReady = true; } return _GL_STENCIL_FAILContent; } }
        private static int _GL_STENCIL_FAILContent = default;
        private static bool _GL_STENCIL_FAILReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_FUNC"/>
        /// </summary>
        public static int GL_STENCIL_FUNC { get { if (!_GL_STENCIL_FUNCReady) { _GL_STENCIL_FUNCContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_FUNC"); _GL_STENCIL_FUNCReady = true; } return _GL_STENCIL_FUNCContent; } }
        private static int _GL_STENCIL_FUNCContent = default;
        private static bool _GL_STENCIL_FUNCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_INDEX"/>
        /// </summary>
        [System.Obsolete()]
        public static int GL_STENCIL_INDEX { get { if (!_GL_STENCIL_INDEXReady) { _GL_STENCIL_INDEXContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_INDEX"); _GL_STENCIL_INDEXReady = true; } return _GL_STENCIL_INDEXContent; } }
        private static int _GL_STENCIL_INDEXContent = default;
        private static bool _GL_STENCIL_INDEXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_INDEX8"/>
        /// </summary>
        public static int GL_STENCIL_INDEX8 { get { if (!_GL_STENCIL_INDEX8Ready) { _GL_STENCIL_INDEX8Content = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_INDEX8"); _GL_STENCIL_INDEX8Ready = true; } return _GL_STENCIL_INDEX8Content; } }
        private static int _GL_STENCIL_INDEX8Content = default;
        private static bool _GL_STENCIL_INDEX8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_PASS_DEPTH_FAIL"/>
        /// </summary>
        public static int GL_STENCIL_PASS_DEPTH_FAIL { get { if (!_GL_STENCIL_PASS_DEPTH_FAILReady) { _GL_STENCIL_PASS_DEPTH_FAILContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_PASS_DEPTH_FAIL"); _GL_STENCIL_PASS_DEPTH_FAILReady = true; } return _GL_STENCIL_PASS_DEPTH_FAILContent; } }
        private static int _GL_STENCIL_PASS_DEPTH_FAILContent = default;
        private static bool _GL_STENCIL_PASS_DEPTH_FAILReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_PASS_DEPTH_PASS"/>
        /// </summary>
        public static int GL_STENCIL_PASS_DEPTH_PASS { get { if (!_GL_STENCIL_PASS_DEPTH_PASSReady) { _GL_STENCIL_PASS_DEPTH_PASSContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_PASS_DEPTH_PASS"); _GL_STENCIL_PASS_DEPTH_PASSReady = true; } return _GL_STENCIL_PASS_DEPTH_PASSContent; } }
        private static int _GL_STENCIL_PASS_DEPTH_PASSContent = default;
        private static bool _GL_STENCIL_PASS_DEPTH_PASSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_REF"/>
        /// </summary>
        public static int GL_STENCIL_REF { get { if (!_GL_STENCIL_REFReady) { _GL_STENCIL_REFContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_REF"); _GL_STENCIL_REFReady = true; } return _GL_STENCIL_REFContent; } }
        private static int _GL_STENCIL_REFContent = default;
        private static bool _GL_STENCIL_REFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_TEST"/>
        /// </summary>
        public static int GL_STENCIL_TEST { get { if (!_GL_STENCIL_TESTReady) { _GL_STENCIL_TESTContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_TEST"); _GL_STENCIL_TESTReady = true; } return _GL_STENCIL_TESTContent; } }
        private static int _GL_STENCIL_TESTContent = default;
        private static bool _GL_STENCIL_TESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_VALUE_MASK"/>
        /// </summary>
        public static int GL_STENCIL_VALUE_MASK { get { if (!_GL_STENCIL_VALUE_MASKReady) { _GL_STENCIL_VALUE_MASKContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_VALUE_MASK"); _GL_STENCIL_VALUE_MASKReady = true; } return _GL_STENCIL_VALUE_MASKContent; } }
        private static int _GL_STENCIL_VALUE_MASKContent = default;
        private static bool _GL_STENCIL_VALUE_MASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_WRITEMASK"/>
        /// </summary>
        public static int GL_STENCIL_WRITEMASK { get { if (!_GL_STENCIL_WRITEMASKReady) { _GL_STENCIL_WRITEMASKContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_WRITEMASK"); _GL_STENCIL_WRITEMASKReady = true; } return _GL_STENCIL_WRITEMASKContent; } }
        private static int _GL_STENCIL_WRITEMASKContent = default;
        private static bool _GL_STENCIL_WRITEMASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_STREAM_DRAW"/>
        /// </summary>
        public static int GL_STREAM_DRAW { get { if (!_GL_STREAM_DRAWReady) { _GL_STREAM_DRAWContent = SGetField<int>(LocalBridgeClazz, "GL_STREAM_DRAW"); _GL_STREAM_DRAWReady = true; } return _GL_STREAM_DRAWContent; } }
        private static int _GL_STREAM_DRAWContent = default;
        private static bool _GL_STREAM_DRAWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_SUBPIXEL_BITS"/>
        /// </summary>
        public static int GL_SUBPIXEL_BITS { get { if (!_GL_SUBPIXEL_BITSReady) { _GL_SUBPIXEL_BITSContent = SGetField<int>(LocalBridgeClazz, "GL_SUBPIXEL_BITS"); _GL_SUBPIXEL_BITSReady = true; } return _GL_SUBPIXEL_BITSContent; } }
        private static int _GL_SUBPIXEL_BITSContent = default;
        private static bool _GL_SUBPIXEL_BITSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE"/>
        /// </summary>
        public static int GL_TEXTURE { get { if (!_GL_TEXTUREReady) { _GL_TEXTUREContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE"); _GL_TEXTUREReady = true; } return _GL_TEXTUREContent; } }
        private static int _GL_TEXTUREContent = default;
        private static bool _GL_TEXTUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE_2D"/>
        /// </summary>
        public static int GL_TEXTURE_2D { get { if (!_GL_TEXTURE_2DReady) { _GL_TEXTURE_2DContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_2D"); _GL_TEXTURE_2DReady = true; } return _GL_TEXTURE_2DContent; } }
        private static int _GL_TEXTURE_2DContent = default;
        private static bool _GL_TEXTURE_2DReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE_BINDING_2D"/>
        /// </summary>
        public static int GL_TEXTURE_BINDING_2D { get { if (!_GL_TEXTURE_BINDING_2DReady) { _GL_TEXTURE_BINDING_2DContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_BINDING_2D"); _GL_TEXTURE_BINDING_2DReady = true; } return _GL_TEXTURE_BINDING_2DContent; } }
        private static int _GL_TEXTURE_BINDING_2DContent = default;
        private static bool _GL_TEXTURE_BINDING_2DReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE_BINDING_CUBE_MAP"/>
        /// </summary>
        public static int GL_TEXTURE_BINDING_CUBE_MAP { get { if (!_GL_TEXTURE_BINDING_CUBE_MAPReady) { _GL_TEXTURE_BINDING_CUBE_MAPContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_BINDING_CUBE_MAP"); _GL_TEXTURE_BINDING_CUBE_MAPReady = true; } return _GL_TEXTURE_BINDING_CUBE_MAPContent; } }
        private static int _GL_TEXTURE_BINDING_CUBE_MAPContent = default;
        private static bool _GL_TEXTURE_BINDING_CUBE_MAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE_CUBE_MAP"/>
        /// </summary>
        public static int GL_TEXTURE_CUBE_MAP { get { if (!_GL_TEXTURE_CUBE_MAPReady) { _GL_TEXTURE_CUBE_MAPContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_CUBE_MAP"); _GL_TEXTURE_CUBE_MAPReady = true; } return _GL_TEXTURE_CUBE_MAPContent; } }
        private static int _GL_TEXTURE_CUBE_MAPContent = default;
        private static bool _GL_TEXTURE_CUBE_MAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE_CUBE_MAP_NEGATIVE_X"/>
        /// </summary>
        public static int GL_TEXTURE_CUBE_MAP_NEGATIVE_X { get { if (!_GL_TEXTURE_CUBE_MAP_NEGATIVE_XReady) { _GL_TEXTURE_CUBE_MAP_NEGATIVE_XContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_CUBE_MAP_NEGATIVE_X"); _GL_TEXTURE_CUBE_MAP_NEGATIVE_XReady = true; } return _GL_TEXTURE_CUBE_MAP_NEGATIVE_XContent; } }
        private static int _GL_TEXTURE_CUBE_MAP_NEGATIVE_XContent = default;
        private static bool _GL_TEXTURE_CUBE_MAP_NEGATIVE_XReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y"/>
        /// </summary>
        public static int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y { get { if (!_GL_TEXTURE_CUBE_MAP_NEGATIVE_YReady) { _GL_TEXTURE_CUBE_MAP_NEGATIVE_YContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_CUBE_MAP_NEGATIVE_Y"); _GL_TEXTURE_CUBE_MAP_NEGATIVE_YReady = true; } return _GL_TEXTURE_CUBE_MAP_NEGATIVE_YContent; } }
        private static int _GL_TEXTURE_CUBE_MAP_NEGATIVE_YContent = default;
        private static bool _GL_TEXTURE_CUBE_MAP_NEGATIVE_YReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z"/>
        /// </summary>
        public static int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z { get { if (!_GL_TEXTURE_CUBE_MAP_NEGATIVE_ZReady) { _GL_TEXTURE_CUBE_MAP_NEGATIVE_ZContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_CUBE_MAP_NEGATIVE_Z"); _GL_TEXTURE_CUBE_MAP_NEGATIVE_ZReady = true; } return _GL_TEXTURE_CUBE_MAP_NEGATIVE_ZContent; } }
        private static int _GL_TEXTURE_CUBE_MAP_NEGATIVE_ZContent = default;
        private static bool _GL_TEXTURE_CUBE_MAP_NEGATIVE_ZReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE_CUBE_MAP_POSITIVE_X"/>
        /// </summary>
        public static int GL_TEXTURE_CUBE_MAP_POSITIVE_X { get { if (!_GL_TEXTURE_CUBE_MAP_POSITIVE_XReady) { _GL_TEXTURE_CUBE_MAP_POSITIVE_XContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_CUBE_MAP_POSITIVE_X"); _GL_TEXTURE_CUBE_MAP_POSITIVE_XReady = true; } return _GL_TEXTURE_CUBE_MAP_POSITIVE_XContent; } }
        private static int _GL_TEXTURE_CUBE_MAP_POSITIVE_XContent = default;
        private static bool _GL_TEXTURE_CUBE_MAP_POSITIVE_XReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE_CUBE_MAP_POSITIVE_Y"/>
        /// </summary>
        public static int GL_TEXTURE_CUBE_MAP_POSITIVE_Y { get { if (!_GL_TEXTURE_CUBE_MAP_POSITIVE_YReady) { _GL_TEXTURE_CUBE_MAP_POSITIVE_YContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_CUBE_MAP_POSITIVE_Y"); _GL_TEXTURE_CUBE_MAP_POSITIVE_YReady = true; } return _GL_TEXTURE_CUBE_MAP_POSITIVE_YContent; } }
        private static int _GL_TEXTURE_CUBE_MAP_POSITIVE_YContent = default;
        private static bool _GL_TEXTURE_CUBE_MAP_POSITIVE_YReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE_CUBE_MAP_POSITIVE_Z"/>
        /// </summary>
        public static int GL_TEXTURE_CUBE_MAP_POSITIVE_Z { get { if (!_GL_TEXTURE_CUBE_MAP_POSITIVE_ZReady) { _GL_TEXTURE_CUBE_MAP_POSITIVE_ZContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_CUBE_MAP_POSITIVE_Z"); _GL_TEXTURE_CUBE_MAP_POSITIVE_ZReady = true; } return _GL_TEXTURE_CUBE_MAP_POSITIVE_ZContent; } }
        private static int _GL_TEXTURE_CUBE_MAP_POSITIVE_ZContent = default;
        private static bool _GL_TEXTURE_CUBE_MAP_POSITIVE_ZReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE_MAG_FILTER"/>
        /// </summary>
        public static int GL_TEXTURE_MAG_FILTER { get { if (!_GL_TEXTURE_MAG_FILTERReady) { _GL_TEXTURE_MAG_FILTERContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_MAG_FILTER"); _GL_TEXTURE_MAG_FILTERReady = true; } return _GL_TEXTURE_MAG_FILTERContent; } }
        private static int _GL_TEXTURE_MAG_FILTERContent = default;
        private static bool _GL_TEXTURE_MAG_FILTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE_MIN_FILTER"/>
        /// </summary>
        public static int GL_TEXTURE_MIN_FILTER { get { if (!_GL_TEXTURE_MIN_FILTERReady) { _GL_TEXTURE_MIN_FILTERContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_MIN_FILTER"); _GL_TEXTURE_MIN_FILTERReady = true; } return _GL_TEXTURE_MIN_FILTERContent; } }
        private static int _GL_TEXTURE_MIN_FILTERContent = default;
        private static bool _GL_TEXTURE_MIN_FILTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE_WRAP_S"/>
        /// </summary>
        public static int GL_TEXTURE_WRAP_S { get { if (!_GL_TEXTURE_WRAP_SReady) { _GL_TEXTURE_WRAP_SContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_WRAP_S"); _GL_TEXTURE_WRAP_SReady = true; } return _GL_TEXTURE_WRAP_SContent; } }
        private static int _GL_TEXTURE_WRAP_SContent = default;
        private static bool _GL_TEXTURE_WRAP_SReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE_WRAP_T"/>
        /// </summary>
        public static int GL_TEXTURE_WRAP_T { get { if (!_GL_TEXTURE_WRAP_TReady) { _GL_TEXTURE_WRAP_TContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_WRAP_T"); _GL_TEXTURE_WRAP_TReady = true; } return _GL_TEXTURE_WRAP_TContent; } }
        private static int _GL_TEXTURE_WRAP_TContent = default;
        private static bool _GL_TEXTURE_WRAP_TReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE0"/>
        /// </summary>
        public static int GL_TEXTURE0 { get { if (!_GL_TEXTURE0Ready) { _GL_TEXTURE0Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE0"); _GL_TEXTURE0Ready = true; } return _GL_TEXTURE0Content; } }
        private static int _GL_TEXTURE0Content = default;
        private static bool _GL_TEXTURE0Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE1"/>
        /// </summary>
        public static int GL_TEXTURE1 { get { if (!_GL_TEXTURE1Ready) { _GL_TEXTURE1Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE1"); _GL_TEXTURE1Ready = true; } return _GL_TEXTURE1Content; } }
        private static int _GL_TEXTURE1Content = default;
        private static bool _GL_TEXTURE1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE10"/>
        /// </summary>
        public static int GL_TEXTURE10 { get { if (!_GL_TEXTURE10Ready) { _GL_TEXTURE10Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE10"); _GL_TEXTURE10Ready = true; } return _GL_TEXTURE10Content; } }
        private static int _GL_TEXTURE10Content = default;
        private static bool _GL_TEXTURE10Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE11"/>
        /// </summary>
        public static int GL_TEXTURE11 { get { if (!_GL_TEXTURE11Ready) { _GL_TEXTURE11Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE11"); _GL_TEXTURE11Ready = true; } return _GL_TEXTURE11Content; } }
        private static int _GL_TEXTURE11Content = default;
        private static bool _GL_TEXTURE11Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE12"/>
        /// </summary>
        public static int GL_TEXTURE12 { get { if (!_GL_TEXTURE12Ready) { _GL_TEXTURE12Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE12"); _GL_TEXTURE12Ready = true; } return _GL_TEXTURE12Content; } }
        private static int _GL_TEXTURE12Content = default;
        private static bool _GL_TEXTURE12Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE13"/>
        /// </summary>
        public static int GL_TEXTURE13 { get { if (!_GL_TEXTURE13Ready) { _GL_TEXTURE13Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE13"); _GL_TEXTURE13Ready = true; } return _GL_TEXTURE13Content; } }
        private static int _GL_TEXTURE13Content = default;
        private static bool _GL_TEXTURE13Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE14"/>
        /// </summary>
        public static int GL_TEXTURE14 { get { if (!_GL_TEXTURE14Ready) { _GL_TEXTURE14Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE14"); _GL_TEXTURE14Ready = true; } return _GL_TEXTURE14Content; } }
        private static int _GL_TEXTURE14Content = default;
        private static bool _GL_TEXTURE14Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE15"/>
        /// </summary>
        public static int GL_TEXTURE15 { get { if (!_GL_TEXTURE15Ready) { _GL_TEXTURE15Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE15"); _GL_TEXTURE15Ready = true; } return _GL_TEXTURE15Content; } }
        private static int _GL_TEXTURE15Content = default;
        private static bool _GL_TEXTURE15Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE16"/>
        /// </summary>
        public static int GL_TEXTURE16 { get { if (!_GL_TEXTURE16Ready) { _GL_TEXTURE16Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE16"); _GL_TEXTURE16Ready = true; } return _GL_TEXTURE16Content; } }
        private static int _GL_TEXTURE16Content = default;
        private static bool _GL_TEXTURE16Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE17"/>
        /// </summary>
        public static int GL_TEXTURE17 { get { if (!_GL_TEXTURE17Ready) { _GL_TEXTURE17Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE17"); _GL_TEXTURE17Ready = true; } return _GL_TEXTURE17Content; } }
        private static int _GL_TEXTURE17Content = default;
        private static bool _GL_TEXTURE17Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE18"/>
        /// </summary>
        public static int GL_TEXTURE18 { get { if (!_GL_TEXTURE18Ready) { _GL_TEXTURE18Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE18"); _GL_TEXTURE18Ready = true; } return _GL_TEXTURE18Content; } }
        private static int _GL_TEXTURE18Content = default;
        private static bool _GL_TEXTURE18Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE19"/>
        /// </summary>
        public static int GL_TEXTURE19 { get { if (!_GL_TEXTURE19Ready) { _GL_TEXTURE19Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE19"); _GL_TEXTURE19Ready = true; } return _GL_TEXTURE19Content; } }
        private static int _GL_TEXTURE19Content = default;
        private static bool _GL_TEXTURE19Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE2"/>
        /// </summary>
        public static int GL_TEXTURE2 { get { if (!_GL_TEXTURE2Ready) { _GL_TEXTURE2Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE2"); _GL_TEXTURE2Ready = true; } return _GL_TEXTURE2Content; } }
        private static int _GL_TEXTURE2Content = default;
        private static bool _GL_TEXTURE2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE20"/>
        /// </summary>
        public static int GL_TEXTURE20 { get { if (!_GL_TEXTURE20Ready) { _GL_TEXTURE20Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE20"); _GL_TEXTURE20Ready = true; } return _GL_TEXTURE20Content; } }
        private static int _GL_TEXTURE20Content = default;
        private static bool _GL_TEXTURE20Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE21"/>
        /// </summary>
        public static int GL_TEXTURE21 { get { if (!_GL_TEXTURE21Ready) { _GL_TEXTURE21Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE21"); _GL_TEXTURE21Ready = true; } return _GL_TEXTURE21Content; } }
        private static int _GL_TEXTURE21Content = default;
        private static bool _GL_TEXTURE21Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE22"/>
        /// </summary>
        public static int GL_TEXTURE22 { get { if (!_GL_TEXTURE22Ready) { _GL_TEXTURE22Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE22"); _GL_TEXTURE22Ready = true; } return _GL_TEXTURE22Content; } }
        private static int _GL_TEXTURE22Content = default;
        private static bool _GL_TEXTURE22Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE23"/>
        /// </summary>
        public static int GL_TEXTURE23 { get { if (!_GL_TEXTURE23Ready) { _GL_TEXTURE23Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE23"); _GL_TEXTURE23Ready = true; } return _GL_TEXTURE23Content; } }
        private static int _GL_TEXTURE23Content = default;
        private static bool _GL_TEXTURE23Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE24"/>
        /// </summary>
        public static int GL_TEXTURE24 { get { if (!_GL_TEXTURE24Ready) { _GL_TEXTURE24Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE24"); _GL_TEXTURE24Ready = true; } return _GL_TEXTURE24Content; } }
        private static int _GL_TEXTURE24Content = default;
        private static bool _GL_TEXTURE24Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE25"/>
        /// </summary>
        public static int GL_TEXTURE25 { get { if (!_GL_TEXTURE25Ready) { _GL_TEXTURE25Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE25"); _GL_TEXTURE25Ready = true; } return _GL_TEXTURE25Content; } }
        private static int _GL_TEXTURE25Content = default;
        private static bool _GL_TEXTURE25Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE26"/>
        /// </summary>
        public static int GL_TEXTURE26 { get { if (!_GL_TEXTURE26Ready) { _GL_TEXTURE26Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE26"); _GL_TEXTURE26Ready = true; } return _GL_TEXTURE26Content; } }
        private static int _GL_TEXTURE26Content = default;
        private static bool _GL_TEXTURE26Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE27"/>
        /// </summary>
        public static int GL_TEXTURE27 { get { if (!_GL_TEXTURE27Ready) { _GL_TEXTURE27Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE27"); _GL_TEXTURE27Ready = true; } return _GL_TEXTURE27Content; } }
        private static int _GL_TEXTURE27Content = default;
        private static bool _GL_TEXTURE27Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE28"/>
        /// </summary>
        public static int GL_TEXTURE28 { get { if (!_GL_TEXTURE28Ready) { _GL_TEXTURE28Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE28"); _GL_TEXTURE28Ready = true; } return _GL_TEXTURE28Content; } }
        private static int _GL_TEXTURE28Content = default;
        private static bool _GL_TEXTURE28Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE29"/>
        /// </summary>
        public static int GL_TEXTURE29 { get { if (!_GL_TEXTURE29Ready) { _GL_TEXTURE29Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE29"); _GL_TEXTURE29Ready = true; } return _GL_TEXTURE29Content; } }
        private static int _GL_TEXTURE29Content = default;
        private static bool _GL_TEXTURE29Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE3"/>
        /// </summary>
        public static int GL_TEXTURE3 { get { if (!_GL_TEXTURE3Ready) { _GL_TEXTURE3Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE3"); _GL_TEXTURE3Ready = true; } return _GL_TEXTURE3Content; } }
        private static int _GL_TEXTURE3Content = default;
        private static bool _GL_TEXTURE3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE30"/>
        /// </summary>
        public static int GL_TEXTURE30 { get { if (!_GL_TEXTURE30Ready) { _GL_TEXTURE30Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE30"); _GL_TEXTURE30Ready = true; } return _GL_TEXTURE30Content; } }
        private static int _GL_TEXTURE30Content = default;
        private static bool _GL_TEXTURE30Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE31"/>
        /// </summary>
        public static int GL_TEXTURE31 { get { if (!_GL_TEXTURE31Ready) { _GL_TEXTURE31Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE31"); _GL_TEXTURE31Ready = true; } return _GL_TEXTURE31Content; } }
        private static int _GL_TEXTURE31Content = default;
        private static bool _GL_TEXTURE31Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE4"/>
        /// </summary>
        public static int GL_TEXTURE4 { get { if (!_GL_TEXTURE4Ready) { _GL_TEXTURE4Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE4"); _GL_TEXTURE4Ready = true; } return _GL_TEXTURE4Content; } }
        private static int _GL_TEXTURE4Content = default;
        private static bool _GL_TEXTURE4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE5"/>
        /// </summary>
        public static int GL_TEXTURE5 { get { if (!_GL_TEXTURE5Ready) { _GL_TEXTURE5Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE5"); _GL_TEXTURE5Ready = true; } return _GL_TEXTURE5Content; } }
        private static int _GL_TEXTURE5Content = default;
        private static bool _GL_TEXTURE5Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE6"/>
        /// </summary>
        public static int GL_TEXTURE6 { get { if (!_GL_TEXTURE6Ready) { _GL_TEXTURE6Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE6"); _GL_TEXTURE6Ready = true; } return _GL_TEXTURE6Content; } }
        private static int _GL_TEXTURE6Content = default;
        private static bool _GL_TEXTURE6Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE7"/>
        /// </summary>
        public static int GL_TEXTURE7 { get { if (!_GL_TEXTURE7Ready) { _GL_TEXTURE7Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE7"); _GL_TEXTURE7Ready = true; } return _GL_TEXTURE7Content; } }
        private static int _GL_TEXTURE7Content = default;
        private static bool _GL_TEXTURE7Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE8"/>
        /// </summary>
        public static int GL_TEXTURE8 { get { if (!_GL_TEXTURE8Ready) { _GL_TEXTURE8Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE8"); _GL_TEXTURE8Ready = true; } return _GL_TEXTURE8Content; } }
        private static int _GL_TEXTURE8Content = default;
        private static bool _GL_TEXTURE8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE9"/>
        /// </summary>
        public static int GL_TEXTURE9 { get { if (!_GL_TEXTURE9Ready) { _GL_TEXTURE9Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE9"); _GL_TEXTURE9Ready = true; } return _GL_TEXTURE9Content; } }
        private static int _GL_TEXTURE9Content = default;
        private static bool _GL_TEXTURE9Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TRIANGLE_FAN"/>
        /// </summary>
        public static int GL_TRIANGLE_FAN { get { if (!_GL_TRIANGLE_FANReady) { _GL_TRIANGLE_FANContent = SGetField<int>(LocalBridgeClazz, "GL_TRIANGLE_FAN"); _GL_TRIANGLE_FANReady = true; } return _GL_TRIANGLE_FANContent; } }
        private static int _GL_TRIANGLE_FANContent = default;
        private static bool _GL_TRIANGLE_FANReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TRIANGLE_STRIP"/>
        /// </summary>
        public static int GL_TRIANGLE_STRIP { get { if (!_GL_TRIANGLE_STRIPReady) { _GL_TRIANGLE_STRIPContent = SGetField<int>(LocalBridgeClazz, "GL_TRIANGLE_STRIP"); _GL_TRIANGLE_STRIPReady = true; } return _GL_TRIANGLE_STRIPContent; } }
        private static int _GL_TRIANGLE_STRIPContent = default;
        private static bool _GL_TRIANGLE_STRIPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TRIANGLES"/>
        /// </summary>
        public static int GL_TRIANGLES { get { if (!_GL_TRIANGLESReady) { _GL_TRIANGLESContent = SGetField<int>(LocalBridgeClazz, "GL_TRIANGLES"); _GL_TRIANGLESReady = true; } return _GL_TRIANGLESContent; } }
        private static int _GL_TRIANGLESContent = default;
        private static bool _GL_TRIANGLESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_TRUE"/>
        /// </summary>
        public static int GL_TRUE { get { if (!_GL_TRUEReady) { _GL_TRUEContent = SGetField<int>(LocalBridgeClazz, "GL_TRUE"); _GL_TRUEReady = true; } return _GL_TRUEContent; } }
        private static int _GL_TRUEContent = default;
        private static bool _GL_TRUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_UNPACK_ALIGNMENT"/>
        /// </summary>
        public static int GL_UNPACK_ALIGNMENT { get { if (!_GL_UNPACK_ALIGNMENTReady) { _GL_UNPACK_ALIGNMENTContent = SGetField<int>(LocalBridgeClazz, "GL_UNPACK_ALIGNMENT"); _GL_UNPACK_ALIGNMENTReady = true; } return _GL_UNPACK_ALIGNMENTContent; } }
        private static int _GL_UNPACK_ALIGNMENTContent = default;
        private static bool _GL_UNPACK_ALIGNMENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_UNSIGNED_BYTE"/>
        /// </summary>
        public static int GL_UNSIGNED_BYTE { get { if (!_GL_UNSIGNED_BYTEReady) { _GL_UNSIGNED_BYTEContent = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNED_BYTE"); _GL_UNSIGNED_BYTEReady = true; } return _GL_UNSIGNED_BYTEContent; } }
        private static int _GL_UNSIGNED_BYTEContent = default;
        private static bool _GL_UNSIGNED_BYTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_UNSIGNED_INT"/>
        /// </summary>
        public static int GL_UNSIGNED_INT { get { if (!_GL_UNSIGNED_INTReady) { _GL_UNSIGNED_INTContent = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNED_INT"); _GL_UNSIGNED_INTReady = true; } return _GL_UNSIGNED_INTContent; } }
        private static int _GL_UNSIGNED_INTContent = default;
        private static bool _GL_UNSIGNED_INTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_UNSIGNED_SHORT"/>
        /// </summary>
        public static int GL_UNSIGNED_SHORT { get { if (!_GL_UNSIGNED_SHORTReady) { _GL_UNSIGNED_SHORTContent = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNED_SHORT"); _GL_UNSIGNED_SHORTReady = true; } return _GL_UNSIGNED_SHORTContent; } }
        private static int _GL_UNSIGNED_SHORTContent = default;
        private static bool _GL_UNSIGNED_SHORTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_UNSIGNED_SHORT_4_4_4_4"/>
        /// </summary>
        public static int GL_UNSIGNED_SHORT_4_4_4_4 { get { if (!_GL_UNSIGNED_SHORT_4_4_4_4Ready) { _GL_UNSIGNED_SHORT_4_4_4_4Content = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNED_SHORT_4_4_4_4"); _GL_UNSIGNED_SHORT_4_4_4_4Ready = true; } return _GL_UNSIGNED_SHORT_4_4_4_4Content; } }
        private static int _GL_UNSIGNED_SHORT_4_4_4_4Content = default;
        private static bool _GL_UNSIGNED_SHORT_4_4_4_4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_UNSIGNED_SHORT_5_5_5_1"/>
        /// </summary>
        public static int GL_UNSIGNED_SHORT_5_5_5_1 { get { if (!_GL_UNSIGNED_SHORT_5_5_5_1Ready) { _GL_UNSIGNED_SHORT_5_5_5_1Content = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNED_SHORT_5_5_5_1"); _GL_UNSIGNED_SHORT_5_5_5_1Ready = true; } return _GL_UNSIGNED_SHORT_5_5_5_1Content; } }
        private static int _GL_UNSIGNED_SHORT_5_5_5_1Content = default;
        private static bool _GL_UNSIGNED_SHORT_5_5_5_1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_UNSIGNED_SHORT_5_6_5"/>
        /// </summary>
        public static int GL_UNSIGNED_SHORT_5_6_5 { get { if (!_GL_UNSIGNED_SHORT_5_6_5Ready) { _GL_UNSIGNED_SHORT_5_6_5Content = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNED_SHORT_5_6_5"); _GL_UNSIGNED_SHORT_5_6_5Ready = true; } return _GL_UNSIGNED_SHORT_5_6_5Content; } }
        private static int _GL_UNSIGNED_SHORT_5_6_5Content = default;
        private static bool _GL_UNSIGNED_SHORT_5_6_5Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_VALIDATE_STATUS"/>
        /// </summary>
        public static int GL_VALIDATE_STATUS { get { if (!_GL_VALIDATE_STATUSReady) { _GL_VALIDATE_STATUSContent = SGetField<int>(LocalBridgeClazz, "GL_VALIDATE_STATUS"); _GL_VALIDATE_STATUSReady = true; } return _GL_VALIDATE_STATUSContent; } }
        private static int _GL_VALIDATE_STATUSContent = default;
        private static bool _GL_VALIDATE_STATUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_VENDOR"/>
        /// </summary>
        public static int GL_VENDOR { get { if (!_GL_VENDORReady) { _GL_VENDORContent = SGetField<int>(LocalBridgeClazz, "GL_VENDOR"); _GL_VENDORReady = true; } return _GL_VENDORContent; } }
        private static int _GL_VENDORContent = default;
        private static bool _GL_VENDORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_VERSION"/>
        /// </summary>
        public static int GL_VERSION { get { if (!_GL_VERSIONReady) { _GL_VERSIONContent = SGetField<int>(LocalBridgeClazz, "GL_VERSION"); _GL_VERSIONReady = true; } return _GL_VERSIONContent; } }
        private static int _GL_VERSIONContent = default;
        private static bool _GL_VERSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING"/>
        /// </summary>
        public static int GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING { get { if (!_GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDINGReady) { _GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDINGContent = SGetField<int>(LocalBridgeClazz, "GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING"); _GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDINGReady = true; } return _GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDINGContent; } }
        private static int _GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDINGContent = default;
        private static bool _GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_VERTEX_ATTRIB_ARRAY_ENABLED"/>
        /// </summary>
        public static int GL_VERTEX_ATTRIB_ARRAY_ENABLED { get { if (!_GL_VERTEX_ATTRIB_ARRAY_ENABLEDReady) { _GL_VERTEX_ATTRIB_ARRAY_ENABLEDContent = SGetField<int>(LocalBridgeClazz, "GL_VERTEX_ATTRIB_ARRAY_ENABLED"); _GL_VERTEX_ATTRIB_ARRAY_ENABLEDReady = true; } return _GL_VERTEX_ATTRIB_ARRAY_ENABLEDContent; } }
        private static int _GL_VERTEX_ATTRIB_ARRAY_ENABLEDContent = default;
        private static bool _GL_VERTEX_ATTRIB_ARRAY_ENABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_VERTEX_ATTRIB_ARRAY_NORMALIZED"/>
        /// </summary>
        public static int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED { get { if (!_GL_VERTEX_ATTRIB_ARRAY_NORMALIZEDReady) { _GL_VERTEX_ATTRIB_ARRAY_NORMALIZEDContent = SGetField<int>(LocalBridgeClazz, "GL_VERTEX_ATTRIB_ARRAY_NORMALIZED"); _GL_VERTEX_ATTRIB_ARRAY_NORMALIZEDReady = true; } return _GL_VERTEX_ATTRIB_ARRAY_NORMALIZEDContent; } }
        private static int _GL_VERTEX_ATTRIB_ARRAY_NORMALIZEDContent = default;
        private static bool _GL_VERTEX_ATTRIB_ARRAY_NORMALIZEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_VERTEX_ATTRIB_ARRAY_POINTER"/>
        /// </summary>
        public static int GL_VERTEX_ATTRIB_ARRAY_POINTER { get { if (!_GL_VERTEX_ATTRIB_ARRAY_POINTERReady) { _GL_VERTEX_ATTRIB_ARRAY_POINTERContent = SGetField<int>(LocalBridgeClazz, "GL_VERTEX_ATTRIB_ARRAY_POINTER"); _GL_VERTEX_ATTRIB_ARRAY_POINTERReady = true; } return _GL_VERTEX_ATTRIB_ARRAY_POINTERContent; } }
        private static int _GL_VERTEX_ATTRIB_ARRAY_POINTERContent = default;
        private static bool _GL_VERTEX_ATTRIB_ARRAY_POINTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_VERTEX_ATTRIB_ARRAY_SIZE"/>
        /// </summary>
        public static int GL_VERTEX_ATTRIB_ARRAY_SIZE { get { if (!_GL_VERTEX_ATTRIB_ARRAY_SIZEReady) { _GL_VERTEX_ATTRIB_ARRAY_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_VERTEX_ATTRIB_ARRAY_SIZE"); _GL_VERTEX_ATTRIB_ARRAY_SIZEReady = true; } return _GL_VERTEX_ATTRIB_ARRAY_SIZEContent; } }
        private static int _GL_VERTEX_ATTRIB_ARRAY_SIZEContent = default;
        private static bool _GL_VERTEX_ATTRIB_ARRAY_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_VERTEX_ATTRIB_ARRAY_STRIDE"/>
        /// </summary>
        public static int GL_VERTEX_ATTRIB_ARRAY_STRIDE { get { if (!_GL_VERTEX_ATTRIB_ARRAY_STRIDEReady) { _GL_VERTEX_ATTRIB_ARRAY_STRIDEContent = SGetField<int>(LocalBridgeClazz, "GL_VERTEX_ATTRIB_ARRAY_STRIDE"); _GL_VERTEX_ATTRIB_ARRAY_STRIDEReady = true; } return _GL_VERTEX_ATTRIB_ARRAY_STRIDEContent; } }
        private static int _GL_VERTEX_ATTRIB_ARRAY_STRIDEContent = default;
        private static bool _GL_VERTEX_ATTRIB_ARRAY_STRIDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_VERTEX_ATTRIB_ARRAY_TYPE"/>
        /// </summary>
        public static int GL_VERTEX_ATTRIB_ARRAY_TYPE { get { if (!_GL_VERTEX_ATTRIB_ARRAY_TYPEReady) { _GL_VERTEX_ATTRIB_ARRAY_TYPEContent = SGetField<int>(LocalBridgeClazz, "GL_VERTEX_ATTRIB_ARRAY_TYPE"); _GL_VERTEX_ATTRIB_ARRAY_TYPEReady = true; } return _GL_VERTEX_ATTRIB_ARRAY_TYPEContent; } }
        private static int _GL_VERTEX_ATTRIB_ARRAY_TYPEContent = default;
        private static bool _GL_VERTEX_ATTRIB_ARRAY_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_VERTEX_SHADER"/>
        /// </summary>
        public static int GL_VERTEX_SHADER { get { if (!_GL_VERTEX_SHADERReady) { _GL_VERTEX_SHADERContent = SGetField<int>(LocalBridgeClazz, "GL_VERTEX_SHADER"); _GL_VERTEX_SHADERReady = true; } return _GL_VERTEX_SHADERContent; } }
        private static int _GL_VERTEX_SHADERContent = default;
        private static bool _GL_VERTEX_SHADERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_VIEWPORT"/>
        /// </summary>
        public static int GL_VIEWPORT { get { if (!_GL_VIEWPORTReady) { _GL_VIEWPORTContent = SGetField<int>(LocalBridgeClazz, "GL_VIEWPORT"); _GL_VIEWPORTReady = true; } return _GL_VIEWPORTContent; } }
        private static int _GL_VIEWPORTContent = default;
        private static bool _GL_VIEWPORTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#GL_ZERO"/>
        /// </summary>
        public static int GL_ZERO { get { if (!_GL_ZEROReady) { _GL_ZEROContent = SGetField<int>(LocalBridgeClazz, "GL_ZERO"); _GL_ZEROReady = true; } return _GL_ZEROContent; } }
        private static int _GL_ZEROContent = default;
        private static bool _GL_ZEROReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glIsBuffer(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool GlIsBuffer(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "glIsBuffer", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glIsEnabled(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool GlIsEnabled(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "glIsEnabled", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glIsFramebuffer(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool GlIsFramebuffer(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "glIsFramebuffer", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glIsProgram(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool GlIsProgram(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "glIsProgram", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glIsRenderbuffer(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool GlIsRenderbuffer(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "glIsRenderbuffer", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glIsShader(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool GlIsShader(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "glIsShader", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glIsTexture(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool GlIsTexture(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "glIsTexture", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glCheckFramebufferStatus(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GlCheckFramebufferStatus(int arg0)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "glCheckFramebufferStatus", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glCreateProgram()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public static int GlCreateProgram()
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "glCreateProgram", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glCreateShader(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GlCreateShader(int arg0)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "glCreateShader", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetAttribLocation(int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GlGetAttribLocation(int arg0, Java.Lang.String arg1)
        {
            return SExecute<int>(LocalBridgeClazz, "glGetAttribLocation", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetError()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public static int GlGetError()
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "glGetError", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetUniformLocation(int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GlGetUniformLocation(int arg0, Java.Lang.String arg1)
        {
            return SExecute<int>(LocalBridgeClazz, "glGetUniformLocation", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetActiveAttrib(int,int,int[],int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String GlGetActiveAttrib(int arg0, int arg1, int[] arg2, int arg3, int[] arg4, int arg5)
        {
            return SExecute<Java.Lang.String>(LocalBridgeClazz, "glGetActiveAttrib", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetActiveAttrib(int,int,java.nio.IntBuffer,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        /// <param name="arg3"><see cref="Java.Nio.IntBuffer"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String GlGetActiveAttrib(int arg0, int arg1, Java.Nio.IntBuffer arg2, Java.Nio.IntBuffer arg3)
        {
            return SExecute<Java.Lang.String>(LocalBridgeClazz, "glGetActiveAttrib", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetActiveUniform(int,int,int[],int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String GlGetActiveUniform(int arg0, int arg1, int[] arg2, int arg3, int[] arg4, int arg5)
        {
            return SExecute<Java.Lang.String>(LocalBridgeClazz, "glGetActiveUniform", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetActiveUniform(int,int,java.nio.IntBuffer,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        /// <param name="arg3"><see cref="Java.Nio.IntBuffer"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String GlGetActiveUniform(int arg0, int arg1, Java.Nio.IntBuffer arg2, Java.Nio.IntBuffer arg3)
        {
            return SExecute<Java.Lang.String>(LocalBridgeClazz, "glGetActiveUniform", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetProgramInfoLog(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String GlGetProgramInfoLog(int arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "glGetProgramInfoLog", "(I)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetShaderInfoLog(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String GlGetShaderInfoLog(int arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "glGetShaderInfoLog", "(I)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetShaderSource(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String GlGetShaderSource(int arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "glGetShaderSource", "(I)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetString(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String GlGetString(int arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "glGetString", "(I)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glActiveTexture(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlActiveTexture(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glActiveTexture", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glAttachShader(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlAttachShader(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glAttachShader", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glBindAttribLocation(int,int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        public static void GlBindAttribLocation(int arg0, int arg1, Java.Lang.String arg2)
        {
            SExecute(LocalBridgeClazz, "glBindAttribLocation", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glBindBuffer(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlBindBuffer(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glBindBuffer", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glBindFramebuffer(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlBindFramebuffer(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glBindFramebuffer", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glBindRenderbuffer(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlBindRenderbuffer(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glBindRenderbuffer", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glBindTexture(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlBindTexture(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glBindTexture", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glBlendColor(float,float,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        public static void GlBlendColor(float arg0, float arg1, float arg2, float arg3)
        {
            SExecute(LocalBridgeClazz, "glBlendColor", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glBlendEquation(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlBlendEquation(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glBlendEquation", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glBlendEquationSeparate(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlBlendEquationSeparate(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glBlendEquationSeparate", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glBlendFunc(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlBlendFunc(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glBlendFunc", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glBlendFuncSeparate(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlBlendFuncSeparate(int arg0, int arg1, int arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glBlendFuncSeparate", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glBufferData(int,int,java.nio.Buffer,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.Buffer"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlBufferData(int arg0, int arg1, Java.Nio.Buffer arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glBufferData", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glBufferSubData(int,int,int,java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.Buffer"/></param>
        public static void GlBufferSubData(int arg0, int arg1, int arg2, Java.Nio.Buffer arg3)
        {
            SExecute(LocalBridgeClazz, "glBufferSubData", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glClear(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlClear(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glClear", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glClearColor(float,float,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        public static void GlClearColor(float arg0, float arg1, float arg2, float arg3)
        {
            SExecute(LocalBridgeClazz, "glClearColor", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glClearDepthf(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public static void GlClearDepthf(float arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glClearDepthf", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glClearStencil(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlClearStencil(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glClearStencil", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glColorMask(boolean,boolean,boolean,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        public static void GlColorMask(bool arg0, bool arg1, bool arg2, bool arg3)
        {
            SExecute(LocalBridgeClazz, "glColorMask", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glCompileShader(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlCompileShader(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glCompileShader", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="Java.Nio.Buffer"/></param>
        public static void GlCompressedTexImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, Java.Nio.Buffer arg7)
        {
            SExecute(LocalBridgeClazz, "glCompressedTexImage2D", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glCompressedTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        /// <param name="arg8"><see cref="Java.Nio.Buffer"/></param>
        public static void GlCompressedTexSubImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, Java.Nio.Buffer arg8)
        {
            SExecute(LocalBridgeClazz, "glCompressedTexSubImage2D", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glCopyTexImage2D(int,int,int,int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        public static void GlCopyTexImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7)
        {
            SExecute(LocalBridgeClazz, "glCopyTexImage2D", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glCopyTexSubImage2D(int,int,int,int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        public static void GlCopyTexSubImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7)
        {
            SExecute(LocalBridgeClazz, "glCopyTexSubImage2D", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glCullFace(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlCullFace(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glCullFace", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glDeleteBuffers(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlDeleteBuffers(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glDeleteBuffers", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glDeleteBuffers(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlDeleteBuffers(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glDeleteBuffers", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glDeleteFramebuffers(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlDeleteFramebuffers(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glDeleteFramebuffers", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glDeleteFramebuffers(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlDeleteFramebuffers(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glDeleteFramebuffers", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glDeleteProgram(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlDeleteProgram(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glDeleteProgram", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glDeleteRenderbuffers(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlDeleteRenderbuffers(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glDeleteRenderbuffers", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glDeleteRenderbuffers(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlDeleteRenderbuffers(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glDeleteRenderbuffers", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glDeleteShader(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlDeleteShader(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glDeleteShader", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glDeleteTextures(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlDeleteTextures(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glDeleteTextures", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glDeleteTextures(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlDeleteTextures(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glDeleteTextures", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glDepthFunc(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlDepthFunc(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glDepthFunc", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glDepthMask(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public static void GlDepthMask(bool arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glDepthMask", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glDepthRangef(float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public static void GlDepthRangef(float arg0, float arg1)
        {
            SExecute(LocalBridgeClazz, "glDepthRangef", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glDetachShader(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlDetachShader(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glDetachShader", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glDisable(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlDisable(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glDisable", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glDisableVertexAttribArray(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlDisableVertexAttribArray(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glDisableVertexAttribArray", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glDrawArrays(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlDrawArrays(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glDrawArrays", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glDrawElements(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlDrawElements(int arg0, int arg1, int arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glDrawElements", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glDrawElements(int,int,int,java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.Buffer"/></param>
        public static void GlDrawElements(int arg0, int arg1, int arg2, Java.Nio.Buffer arg3)
        {
            SExecute(LocalBridgeClazz, "glDrawElements", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glEnable(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlEnable(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glEnable", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glEnableVertexAttribArray(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlEnableVertexAttribArray(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glEnableVertexAttribArray", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glFinish()"/>
        /// </summary>
        public static void GlFinish()
        {
            SExecuteWithSignature(LocalBridgeClazz, "glFinish", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glFlush()"/>
        /// </summary>
        public static void GlFlush()
        {
            SExecuteWithSignature(LocalBridgeClazz, "glFlush", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glFramebufferRenderbuffer(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlFramebufferRenderbuffer(int arg0, int arg1, int arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glFramebufferRenderbuffer", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glFramebufferTexture2D(int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlFramebufferTexture2D(int arg0, int arg1, int arg2, int arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glFramebufferTexture2D", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glFrontFace(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlFrontFace(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glFrontFace", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGenBuffers(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlGenBuffers(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glGenBuffers", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGenBuffers(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGenBuffers(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glGenBuffers", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGenerateMipmap(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlGenerateMipmap(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glGenerateMipmap", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGenFramebuffers(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlGenFramebuffers(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glGenFramebuffers", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGenFramebuffers(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGenFramebuffers(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glGenFramebuffers", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGenRenderbuffers(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlGenRenderbuffers(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glGenRenderbuffers", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGenRenderbuffers(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGenRenderbuffers(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glGenRenderbuffers", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGenTextures(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlGenTextures(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glGenTextures", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGenTextures(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGenTextures(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glGenTextures", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetActiveAttrib(int,int,int,int[],int,int[],int,int[],int,byte[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        /// <param name="arg8"><see cref="int"/></param>
        /// <param name="arg9"><see cref="byte"/></param>
        /// <param name="arg10"><see cref="int"/></param>
        public static void GlGetActiveAttrib(int arg0, int arg1, int arg2, int[] arg3, int arg4, int[] arg5, int arg6, int[] arg7, int arg8, byte[] arg9, int arg10)
        {
            SExecute(LocalBridgeClazz, "glGetActiveAttrib", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetActiveUniform(int,int,int,int[],int,int[],int,int[],int,byte[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        /// <param name="arg8"><see cref="int"/></param>
        /// <param name="arg9"><see cref="byte"/></param>
        /// <param name="arg10"><see cref="int"/></param>
        public static void GlGetActiveUniform(int arg0, int arg1, int arg2, int[] arg3, int arg4, int[] arg5, int arg6, int[] arg7, int arg8, byte[] arg9, int arg10)
        {
            SExecute(LocalBridgeClazz, "glGetActiveUniform", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetAttachedShaders(int,int,int[],int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        public static void GlGetAttachedShaders(int arg0, int arg1, int[] arg2, int arg3, int[] arg4, int arg5)
        {
            SExecute(LocalBridgeClazz, "glGetAttachedShaders", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetAttachedShaders(int,int,java.nio.IntBuffer,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        /// <param name="arg3"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetAttachedShaders(int arg0, int arg1, Java.Nio.IntBuffer arg2, Java.Nio.IntBuffer arg3)
        {
            SExecute(LocalBridgeClazz, "glGetAttachedShaders", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetBooleanv(int,boolean[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlGetBooleanv(int arg0, bool[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glGetBooleanv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetBooleanv(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetBooleanv(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glGetBooleanv", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetBufferParameteriv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetBufferParameteriv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetBufferParameteriv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetBufferParameteriv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetBufferParameteriv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetBufferParameteriv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetFloatv(int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlGetFloatv(int arg0, float[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glGetFloatv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetFloatv(int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlGetFloatv(int arg0, Java.Nio.FloatBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glGetFloatv", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetFramebufferAttachmentParameteriv(int,int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlGetFramebufferAttachmentParameteriv(int arg0, int arg1, int arg2, int[] arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glGetFramebufferAttachmentParameteriv", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetFramebufferAttachmentParameteriv(int,int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetFramebufferAttachmentParameteriv(int arg0, int arg1, int arg2, Java.Nio.IntBuffer arg3)
        {
            SExecute(LocalBridgeClazz, "glGetFramebufferAttachmentParameteriv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetIntegerv(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlGetIntegerv(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glGetIntegerv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetIntegerv(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetIntegerv(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glGetIntegerv", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetProgramiv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetProgramiv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetProgramiv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetProgramiv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetProgramiv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetProgramiv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetRenderbufferParameteriv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetRenderbufferParameteriv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetRenderbufferParameteriv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetRenderbufferParameteriv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetRenderbufferParameteriv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetRenderbufferParameteriv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetShaderiv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetShaderiv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetShaderiv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetShaderiv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetShaderiv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetShaderiv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetShaderPrecisionFormat(int,int,int[],int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        public static void GlGetShaderPrecisionFormat(int arg0, int arg1, int[] arg2, int arg3, int[] arg4, int arg5)
        {
            SExecute(LocalBridgeClazz, "glGetShaderPrecisionFormat", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetShaderPrecisionFormat(int,int,java.nio.IntBuffer,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        /// <param name="arg3"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetShaderPrecisionFormat(int arg0, int arg1, Java.Nio.IntBuffer arg2, Java.Nio.IntBuffer arg3)
        {
            SExecute(LocalBridgeClazz, "glGetShaderPrecisionFormat", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetShaderSource(int,int,int[],int,byte[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="byte"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        public static void GlGetShaderSource(int arg0, int arg1, int[] arg2, int arg3, byte[] arg4, int arg5)
        {
            SExecute(LocalBridgeClazz, "glGetShaderSource", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetTexParameterfv(int,int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetTexParameterfv(int arg0, int arg1, float[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetTexParameterfv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetTexParameterfv(int,int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlGetTexParameterfv(int arg0, int arg1, Java.Nio.FloatBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetTexParameterfv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetTexParameteriv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetTexParameteriv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetTexParameteriv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetTexParameteriv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetTexParameteriv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetTexParameteriv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetUniformfv(int,int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetUniformfv(int arg0, int arg1, float[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetUniformfv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetUniformfv(int,int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlGetUniformfv(int arg0, int arg1, Java.Nio.FloatBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetUniformfv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetUniformiv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetUniformiv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetUniformiv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetUniformiv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetUniformiv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetUniformiv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetVertexAttribfv(int,int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetVertexAttribfv(int arg0, int arg1, float[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetVertexAttribfv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetVertexAttribfv(int,int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlGetVertexAttribfv(int arg0, int arg1, Java.Nio.FloatBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetVertexAttribfv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetVertexAttribiv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetVertexAttribiv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetVertexAttribiv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glGetVertexAttribiv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetVertexAttribiv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetVertexAttribiv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glHint(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlHint(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glHint", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glLineWidth(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public static void GlLineWidth(float arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glLineWidth", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glLinkProgram(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlLinkProgram(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glLinkProgram", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glPixelStorei(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlPixelStorei(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glPixelStorei", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glPolygonOffset(float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public static void GlPolygonOffset(float arg0, float arg1)
        {
            SExecute(LocalBridgeClazz, "glPolygonOffset", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glReadPixels(int,int,int,int,int,int,java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="Java.Nio.Buffer"/></param>
        public static void GlReadPixels(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, Java.Nio.Buffer arg6)
        {
            SExecute(LocalBridgeClazz, "glReadPixels", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glReleaseShaderCompiler()"/>
        /// </summary>
        public static void GlReleaseShaderCompiler()
        {
            SExecuteWithSignature(LocalBridgeClazz, "glReleaseShaderCompiler", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glRenderbufferStorage(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlRenderbufferStorage(int arg0, int arg1, int arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glRenderbufferStorage", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glSampleCoverage(float,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public static void GlSampleCoverage(float arg0, bool arg1)
        {
            SExecute(LocalBridgeClazz, "glSampleCoverage", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glScissor(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlScissor(int arg0, int arg1, int arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glScissor", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glShaderBinary(int,int[],int,int,java.nio.Buffer,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="Java.Nio.Buffer"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        public static void GlShaderBinary(int arg0, int[] arg1, int arg2, int arg3, Java.Nio.Buffer arg4, int arg5)
        {
            SExecute(LocalBridgeClazz, "glShaderBinary", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glShaderBinary(int,java.nio.IntBuffer,int,java.nio.Buffer,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.Buffer"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlShaderBinary(int arg0, Java.Nio.IntBuffer arg1, int arg2, Java.Nio.Buffer arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glShaderBinary", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glShaderSource(int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        public static void GlShaderSource(int arg0, Java.Lang.String arg1)
        {
            SExecute(LocalBridgeClazz, "glShaderSource", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glStencilFunc(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlStencilFunc(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glStencilFunc", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glStencilFuncSeparate(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlStencilFuncSeparate(int arg0, int arg1, int arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glStencilFuncSeparate", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glStencilMask(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlStencilMask(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glStencilMask", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glStencilMaskSeparate(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlStencilMaskSeparate(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glStencilMaskSeparate", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glStencilOp(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlStencilOp(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glStencilOp", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glStencilOpSeparate(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlStencilOpSeparate(int arg0, int arg1, int arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glStencilOpSeparate", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        /// <param name="arg8"><see cref="Java.Nio.Buffer"/></param>
        public static void GlTexImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, Java.Nio.Buffer arg8)
        {
            SExecute(LocalBridgeClazz, "glTexImage2D", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glTexParameterf(int,int,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        public static void GlTexParameterf(int arg0, int arg1, float arg2)
        {
            SExecute(LocalBridgeClazz, "glTexParameterf", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glTexParameterfv(int,int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlTexParameterfv(int arg0, int arg1, float[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glTexParameterfv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glTexParameterfv(int,int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlTexParameterfv(int arg0, int arg1, Java.Nio.FloatBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glTexParameterfv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glTexParameteri(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlTexParameteri(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glTexParameteri", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glTexParameteriv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlTexParameteriv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glTexParameteriv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glTexParameteriv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlTexParameteriv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glTexParameteriv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        /// <param name="arg8"><see cref="Java.Nio.Buffer"/></param>
        public static void GlTexSubImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, Java.Nio.Buffer arg8)
        {
            SExecute(LocalBridgeClazz, "glTexSubImage2D", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glUniform1f(int,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public static void GlUniform1f(int arg0, float arg1)
        {
            SExecute(LocalBridgeClazz, "glUniform1f", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glUniform1fv(int,int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlUniform1fv(int arg0, int arg1, float[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glUniform1fv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glUniform1fv(int,int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlUniform1fv(int arg0, int arg1, Java.Nio.FloatBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glUniform1fv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glUniform1i(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlUniform1i(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glUniform1i", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glUniform1iv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlUniform1iv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glUniform1iv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glUniform1iv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlUniform1iv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glUniform1iv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glUniform2f(int,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        public static void GlUniform2f(int arg0, float arg1, float arg2)
        {
            SExecute(LocalBridgeClazz, "glUniform2f", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glUniform2fv(int,int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlUniform2fv(int arg0, int arg1, float[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glUniform2fv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glUniform2fv(int,int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlUniform2fv(int arg0, int arg1, Java.Nio.FloatBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glUniform2fv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glUniform2i(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlUniform2i(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glUniform2i", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glUniform2iv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlUniform2iv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glUniform2iv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glUniform2iv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlUniform2iv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glUniform2iv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glUniform3f(int,float,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        public static void GlUniform3f(int arg0, float arg1, float arg2, float arg3)
        {
            SExecute(LocalBridgeClazz, "glUniform3f", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glUniform3fv(int,int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlUniform3fv(int arg0, int arg1, float[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glUniform3fv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glUniform3fv(int,int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlUniform3fv(int arg0, int arg1, Java.Nio.FloatBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glUniform3fv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glUniform3i(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlUniform3i(int arg0, int arg1, int arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glUniform3i", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glUniform3iv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlUniform3iv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glUniform3iv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glUniform3iv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlUniform3iv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glUniform3iv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glUniform4f(int,float,float,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        public static void GlUniform4f(int arg0, float arg1, float arg2, float arg3, float arg4)
        {
            SExecute(LocalBridgeClazz, "glUniform4f", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glUniform4fv(int,int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlUniform4fv(int arg0, int arg1, float[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glUniform4fv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glUniform4fv(int,int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlUniform4fv(int arg0, int arg1, Java.Nio.FloatBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glUniform4fv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glUniform4i(int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlUniform4i(int arg0, int arg1, int arg2, int arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glUniform4i", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glUniform4iv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlUniform4iv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glUniform4iv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glUniform4iv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlUniform4iv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glUniform4iv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glUniformMatrix2fv(int,int,boolean,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlUniformMatrix2fv(int arg0, int arg1, bool arg2, float[] arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glUniformMatrix2fv", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glUniformMatrix2fv(int,int,boolean,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <param name="arg3"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlUniformMatrix2fv(int arg0, int arg1, bool arg2, Java.Nio.FloatBuffer arg3)
        {
            SExecute(LocalBridgeClazz, "glUniformMatrix2fv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glUniformMatrix3fv(int,int,boolean,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlUniformMatrix3fv(int arg0, int arg1, bool arg2, float[] arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glUniformMatrix3fv", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glUniformMatrix3fv(int,int,boolean,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <param name="arg3"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlUniformMatrix3fv(int arg0, int arg1, bool arg2, Java.Nio.FloatBuffer arg3)
        {
            SExecute(LocalBridgeClazz, "glUniformMatrix3fv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glUniformMatrix4fv(int,int,boolean,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlUniformMatrix4fv(int arg0, int arg1, bool arg2, float[] arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glUniformMatrix4fv", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glUniformMatrix4fv(int,int,boolean,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <param name="arg3"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlUniformMatrix4fv(int arg0, int arg1, bool arg2, Java.Nio.FloatBuffer arg3)
        {
            SExecute(LocalBridgeClazz, "glUniformMatrix4fv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glUseProgram(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlUseProgram(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glUseProgram", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glValidateProgram(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlValidateProgram(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glValidateProgram", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glVertexAttrib1f(int,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public static void GlVertexAttrib1f(int arg0, float arg1)
        {
            SExecute(LocalBridgeClazz, "glVertexAttrib1f", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glVertexAttrib1fv(int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlVertexAttrib1fv(int arg0, float[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glVertexAttrib1fv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glVertexAttrib1fv(int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlVertexAttrib1fv(int arg0, Java.Nio.FloatBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glVertexAttrib1fv", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glVertexAttrib2f(int,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        public static void GlVertexAttrib2f(int arg0, float arg1, float arg2)
        {
            SExecute(LocalBridgeClazz, "glVertexAttrib2f", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glVertexAttrib2fv(int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlVertexAttrib2fv(int arg0, float[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glVertexAttrib2fv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glVertexAttrib2fv(int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlVertexAttrib2fv(int arg0, Java.Nio.FloatBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glVertexAttrib2fv", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glVertexAttrib3f(int,float,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        public static void GlVertexAttrib3f(int arg0, float arg1, float arg2, float arg3)
        {
            SExecute(LocalBridgeClazz, "glVertexAttrib3f", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glVertexAttrib3fv(int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlVertexAttrib3fv(int arg0, float[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glVertexAttrib3fv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glVertexAttrib3fv(int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlVertexAttrib3fv(int arg0, Java.Nio.FloatBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glVertexAttrib3fv", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glVertexAttrib4f(int,float,float,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        public static void GlVertexAttrib4f(int arg0, float arg1, float arg2, float arg3, float arg4)
        {
            SExecute(LocalBridgeClazz, "glVertexAttrib4f", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glVertexAttrib4fv(int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlVertexAttrib4fv(int arg0, float[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glVertexAttrib4fv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glVertexAttrib4fv(int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlVertexAttrib4fv(int arg0, Java.Nio.FloatBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glVertexAttrib4fv", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glVertexAttribPointer(int,int,int,boolean,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        public static void GlVertexAttribPointer(int arg0, int arg1, int arg2, bool arg3, int arg4, int arg5)
        {
            SExecute(LocalBridgeClazz, "glVertexAttribPointer", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glViewport(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlViewport(int arg0, int arg1, int arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glViewport", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES20.html#glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="Java.Nio.Buffer"/></param>
        public static void GlVertexAttribPointer(int arg0, int arg1, int arg2, bool arg3, int arg4, Java.Nio.Buffer arg5)
        {
            SExecute(LocalBridgeClazz, "glVertexAttribPointer", arg0, arg1, arg2, arg3, arg4, arg5);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Opengl
{
    #region GLSurfaceView
    public partial class GLSurfaceView
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLSurfaceView.html#%3Cinit%3E(android.content.Context,android.util.AttributeSet)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Util.AttributeSet"/></param>
        public GLSurfaceView(Android.Content.Context arg0, Android.Util.AttributeSet arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLSurfaceView.html#%3Cinit%3E(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        public GLSurfaceView(Android.Content.Context arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLSurfaceView.html#DEBUG_CHECK_GL_ERROR"/>
        /// </summary>
        public static int DEBUG_CHECK_GL_ERROR { get { if (!_DEBUG_CHECK_GL_ERRORReady) { _DEBUG_CHECK_GL_ERRORContent = SGetField<int>(LocalBridgeClazz, "DEBUG_CHECK_GL_ERROR"); _DEBUG_CHECK_GL_ERRORReady = true; } return _DEBUG_CHECK_GL_ERRORContent; } }
        private static int _DEBUG_CHECK_GL_ERRORContent = default;
        private static bool _DEBUG_CHECK_GL_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLSurfaceView.html#DEBUG_LOG_GL_CALLS"/>
        /// </summary>
        public static int DEBUG_LOG_GL_CALLS { get { if (!_DEBUG_LOG_GL_CALLSReady) { _DEBUG_LOG_GL_CALLSContent = SGetField<int>(LocalBridgeClazz, "DEBUG_LOG_GL_CALLS"); _DEBUG_LOG_GL_CALLSReady = true; } return _DEBUG_LOG_GL_CALLSContent; } }
        private static int _DEBUG_LOG_GL_CALLSContent = default;
        private static bool _DEBUG_LOG_GL_CALLSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLSurfaceView.html#RENDERMODE_CONTINUOUSLY"/>
        /// </summary>
        public static int RENDERMODE_CONTINUOUSLY { get { if (!_RENDERMODE_CONTINUOUSLYReady) { _RENDERMODE_CONTINUOUSLYContent = SGetField<int>(LocalBridgeClazz, "RENDERMODE_CONTINUOUSLY"); _RENDERMODE_CONTINUOUSLYReady = true; } return _RENDERMODE_CONTINUOUSLYContent; } }
        private static int _RENDERMODE_CONTINUOUSLYContent = default;
        private static bool _RENDERMODE_CONTINUOUSLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLSurfaceView.html#RENDERMODE_WHEN_DIRTY"/>
        /// </summary>
        public static int RENDERMODE_WHEN_DIRTY { get { if (!_RENDERMODE_WHEN_DIRTYReady) { _RENDERMODE_WHEN_DIRTYContent = SGetField<int>(LocalBridgeClazz, "RENDERMODE_WHEN_DIRTY"); _RENDERMODE_WHEN_DIRTYReady = true; } return _RENDERMODE_WHEN_DIRTYContent; } }
        private static int _RENDERMODE_WHEN_DIRTYContent = default;
        private static bool _RENDERMODE_WHEN_DIRTYReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLSurfaceView.html#getDebugFlags()"/> <see href="https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setDebugFlags(int)"/>
        /// </summary>
        public int DebugFlags
        {
            get { return IExecuteWithSignature<int>("getDebugFlags", "()I"); } set { IExecuteWithSignature("setDebugFlags", "(I)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLSurfaceView.html#getPreserveEGLContextOnPause()"/> <see href="https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setPreserveEGLContextOnPause(boolean)"/>
        /// </summary>
        public bool PreserveEGLContextOnPause
        {
            get { return IExecuteWithSignature<bool>("getPreserveEGLContextOnPause", "()Z"); } set { IExecuteWithSignature("setPreserveEGLContextOnPause", "(Z)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLSurfaceView.html#getRenderMode()"/> <see href="https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setRenderMode(int)"/>
        /// </summary>
        public int RenderMode
        {
            get { return IExecuteWithSignature<int>("getRenderMode", "()I"); } set { IExecuteWithSignature("setRenderMode", "(I)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLSurfaceView.html#onPause()"/>
        /// </summary>
        public void OnPause()
        {
            IExecuteWithSignature("onPause", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLSurfaceView.html#onResume()"/>
        /// </summary>
        public void OnResume()
        {
            IExecuteWithSignature("onResume", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLSurfaceView.html#queueEvent(java.lang.Runnable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Runnable"/></param>
        public void QueueEvent(Java.Lang.Runnable arg0)
        {
            IExecuteWithSignature("queueEvent", "(Ljava/lang/Runnable;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLSurfaceView.html#requestRender()"/>
        /// </summary>
        public void RequestRender()
        {
            IExecuteWithSignature("requestRender", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setEGLConfigChooser(android.opengl.GLSurfaceView.EGLConfigChooser)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Opengl.GLSurfaceView.EGLConfigChooser"/></param>
        public void SetEGLConfigChooser(Android.Opengl.GLSurfaceView.EGLConfigChooser arg0)
        {
            IExecuteWithSignature("setEGLConfigChooser", "(Landroid/opengl/GLSurfaceView$EGLConfigChooser;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setEGLConfigChooser(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetEGLConfigChooser(bool arg0)
        {
            IExecuteWithSignature("setEGLConfigChooser", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setEGLConfigChooser(int,int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        public void SetEGLConfigChooser(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5)
        {
            IExecute("setEGLConfigChooser", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setEGLContextClientVersion(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetEGLContextClientVersion(int arg0)
        {
            IExecuteWithSignature("setEGLContextClientVersion", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setEGLContextFactory(android.opengl.GLSurfaceView.EGLContextFactory)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Opengl.GLSurfaceView.EGLContextFactory"/></param>
        public void SetEGLContextFactory(Android.Opengl.GLSurfaceView.EGLContextFactory arg0)
        {
            IExecuteWithSignature("setEGLContextFactory", "(Landroid/opengl/GLSurfaceView$EGLContextFactory;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setEGLWindowSurfaceFactory(android.opengl.GLSurfaceView.EGLWindowSurfaceFactory)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Opengl.GLSurfaceView.EGLWindowSurfaceFactory"/></param>
        public void SetEGLWindowSurfaceFactory(Android.Opengl.GLSurfaceView.EGLWindowSurfaceFactory arg0)
        {
            IExecuteWithSignature("setEGLWindowSurfaceFactory", "(Landroid/opengl/GLSurfaceView$EGLWindowSurfaceFactory;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setGLWrapper(android.opengl.GLSurfaceView.GLWrapper)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Opengl.GLSurfaceView.GLWrapper"/></param>
        public void SetGLWrapper(Android.Opengl.GLSurfaceView.GLWrapper arg0)
        {
            IExecuteWithSignature("setGLWrapper", "(Landroid/opengl/GLSurfaceView$GLWrapper;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setRenderer(android.opengl.GLSurfaceView.Renderer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Opengl.GLSurfaceView.Renderer"/></param>
        public void SetRenderer(Android.Opengl.GLSurfaceView.Renderer arg0)
        {
            IExecuteWithSignature("setRenderer", "(Landroid/opengl/GLSurfaceView$Renderer;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLSurfaceView.html#surfaceChanged(android.view.SurfaceHolder,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.SurfaceHolder"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void SurfaceChanged(Android.View.SurfaceHolder arg0, int arg1, int arg2, int arg3)
        {
            IExecute("surfaceChanged", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLSurfaceView.html#surfaceCreated(android.view.SurfaceHolder)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.SurfaceHolder"/></param>
        public void SurfaceCreated(Android.View.SurfaceHolder arg0)
        {
            IExecuteWithSignature("surfaceCreated", "(Landroid/view/SurfaceHolder;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLSurfaceView.html#surfaceDestroyed(android.view.SurfaceHolder)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.SurfaceHolder"/></param>
        public void SurfaceDestroyed(Android.View.SurfaceHolder arg0)
        {
            IExecuteWithSignature("surfaceDestroyed", "(Landroid/view/SurfaceHolder;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLSurfaceView.html#surfaceRedrawNeeded(android.view.SurfaceHolder)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.SurfaceHolder"/></param>
        [System.Obsolete()]
        public void SurfaceRedrawNeeded(Android.View.SurfaceHolder arg0)
        {
            IExecuteWithSignature("surfaceRedrawNeeded", "(Landroid/view/SurfaceHolder;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLSurfaceView.html#surfaceRedrawNeededAsync(android.view.SurfaceHolder,java.lang.Runnable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.SurfaceHolder"/></param>
        /// <param name="arg1"><see cref="Java.Lang.Runnable"/></param>
        public void SurfaceRedrawNeededAsync(Android.View.SurfaceHolder arg0, Java.Lang.Runnable arg1)
        {
            IExecute("surfaceRedrawNeededAsync", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region EGLConfigChooser
        public partial class EGLConfigChooser
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/opengl/GLSurfaceView.EGLConfigChooser.html#chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Javax.Microedition.Khronos.Egl.EGL10"/></param>
            /// <param name="arg1"><see cref="Javax.Microedition.Khronos.Egl.EGLDisplay"/></param>
            /// <returns><see cref="Javax.Microedition.Khronos.Egl.EGLConfig"/></returns>
            public Javax.Microedition.Khronos.Egl.EGLConfig ChooseConfig(Javax.Microedition.Khronos.Egl.EGL10 arg0, Javax.Microedition.Khronos.Egl.EGLDisplay arg1)
            {
                return IExecute<Javax.Microedition.Khronos.Egl.EGLConfig>("chooseConfig", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region EGLContextFactory
        public partial class EGLContextFactory
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/opengl/GLSurfaceView.EGLContextFactory.html#createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Javax.Microedition.Khronos.Egl.EGL10"/></param>
            /// <param name="arg1"><see cref="Javax.Microedition.Khronos.Egl.EGLDisplay"/></param>
            /// <param name="arg2"><see cref="Javax.Microedition.Khronos.Egl.EGLConfig"/></param>
            /// <returns><see cref="Javax.Microedition.Khronos.Egl.EGLContext"/></returns>
            public Javax.Microedition.Khronos.Egl.EGLContext CreateContext(Javax.Microedition.Khronos.Egl.EGL10 arg0, Javax.Microedition.Khronos.Egl.EGLDisplay arg1, Javax.Microedition.Khronos.Egl.EGLConfig arg2)
            {
                return IExecute<Javax.Microedition.Khronos.Egl.EGLContext>("createContext", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/opengl/GLSurfaceView.EGLContextFactory.html#destroyContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Javax.Microedition.Khronos.Egl.EGL10"/></param>
            /// <param name="arg1"><see cref="Javax.Microedition.Khronos.Egl.EGLDisplay"/></param>
            /// <param name="arg2"><see cref="Javax.Microedition.Khronos.Egl.EGLContext"/></param>
            public void DestroyContext(Javax.Microedition.Khronos.Egl.EGL10 arg0, Javax.Microedition.Khronos.Egl.EGLDisplay arg1, Javax.Microedition.Khronos.Egl.EGLContext arg2)
            {
                IExecute("destroyContext", arg0, arg1, arg2);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region EGLWindowSurfaceFactory
        public partial class EGLWindowSurfaceFactory
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/opengl/GLSurfaceView.EGLWindowSurfaceFactory.html#createWindowSurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Javax.Microedition.Khronos.Egl.EGL10"/></param>
            /// <param name="arg1"><see cref="Javax.Microedition.Khronos.Egl.EGLDisplay"/></param>
            /// <param name="arg2"><see cref="Javax.Microedition.Khronos.Egl.EGLConfig"/></param>
            /// <param name="arg3"><see cref="object"/></param>
            /// <returns><see cref="Javax.Microedition.Khronos.Egl.EGLSurface"/></returns>
            public Javax.Microedition.Khronos.Egl.EGLSurface CreateWindowSurface(Javax.Microedition.Khronos.Egl.EGL10 arg0, Javax.Microedition.Khronos.Egl.EGLDisplay arg1, Javax.Microedition.Khronos.Egl.EGLConfig arg2, object arg3)
            {
                return IExecute<Javax.Microedition.Khronos.Egl.EGLSurface>("createWindowSurface", arg0, arg1, arg2, arg3);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/opengl/GLSurfaceView.EGLWindowSurfaceFactory.html#destroySurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Javax.Microedition.Khronos.Egl.EGL10"/></param>
            /// <param name="arg1"><see cref="Javax.Microedition.Khronos.Egl.EGLDisplay"/></param>
            /// <param name="arg2"><see cref="Javax.Microedition.Khronos.Egl.EGLSurface"/></param>
            public void DestroySurface(Javax.Microedition.Khronos.Egl.EGL10 arg0, Javax.Microedition.Khronos.Egl.EGLDisplay arg1, Javax.Microedition.Khronos.Egl.EGLSurface arg2)
            {
                IExecute("destroySurface", arg0, arg1, arg2);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region GLWrapper
        public partial class GLWrapper
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/opengl/GLSurfaceView.GLWrapper.html#wrap(javax.microedition.khronos.opengles.GL)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Javax.Microedition.Khronos.Opengles.GL"/></param>
            /// <returns><see cref="Javax.Microedition.Khronos.Opengles.GL"/></returns>
            public Javax.Microedition.Khronos.Opengles.GL Wrap(Javax.Microedition.Khronos.Opengles.GL arg0)
            {
                return IExecuteWithSignature<Javax.Microedition.Khronos.Opengles.GL>("wrap", "(Ljavax/microedition/khronos/opengles/GL;)Ljavax/microedition/khronos/opengles/GL;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Renderer
        public partial class Renderer
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/opengl/GLSurfaceView.Renderer.html#onDrawFrame(javax.microedition.khronos.opengles.GL10)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Javax.Microedition.Khronos.Opengles.GL10"/></param>
            public void OnDrawFrame(Javax.Microedition.Khronos.Opengles.GL10 arg0)
            {
                IExecuteWithSignature("onDrawFrame", "(Ljavax/microedition/khronos/opengles/GL10;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/opengl/GLSurfaceView.Renderer.html#onSurfaceChanged(javax.microedition.khronos.opengles.GL10,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Javax.Microedition.Khronos.Opengles.GL10"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            public void OnSurfaceChanged(Javax.Microedition.Khronos.Opengles.GL10 arg0, int arg1, int arg2)
            {
                IExecute("onSurfaceChanged", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/opengl/GLSurfaceView.Renderer.html#onSurfaceCreated(javax.microedition.khronos.opengles.GL10,javax.microedition.khronos.egl.EGLConfig)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Javax.Microedition.Khronos.Opengles.GL10"/></param>
            /// <param name="arg1"><see cref="Javax.Microedition.Khronos.Egl.EGLConfig"/></param>
            public void OnSurfaceCreated(Javax.Microedition.Khronos.Opengles.GL10 arg0, Javax.Microedition.Khronos.Egl.EGLConfig arg1)
            {
                IExecute("onSurfaceCreated", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.5.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Opengl
{
    #region GLES32
    public partial class GLES32
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_BUFFER"/>
        /// </summary>
        public static int GL_BUFFER { get { if (!_GL_BUFFERReady) { _GL_BUFFERContent = SGetField<int>(LocalBridgeClazz, "GL_BUFFER"); _GL_BUFFERReady = true; } return _GL_BUFFERContent; } }
        private static int _GL_BUFFERContent = default;
        private static bool _GL_BUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_CLAMP_TO_BORDER"/>
        /// </summary>
        public static int GL_CLAMP_TO_BORDER { get { if (!_GL_CLAMP_TO_BORDERReady) { _GL_CLAMP_TO_BORDERContent = SGetField<int>(LocalBridgeClazz, "GL_CLAMP_TO_BORDER"); _GL_CLAMP_TO_BORDERReady = true; } return _GL_CLAMP_TO_BORDERContent; } }
        private static int _GL_CLAMP_TO_BORDERContent = default;
        private static bool _GL_CLAMP_TO_BORDERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_COLORBURN"/>
        /// </summary>
        public static int GL_COLORBURN { get { if (!_GL_COLORBURNReady) { _GL_COLORBURNContent = SGetField<int>(LocalBridgeClazz, "GL_COLORBURN"); _GL_COLORBURNReady = true; } return _GL_COLORBURNContent; } }
        private static int _GL_COLORBURNContent = default;
        private static bool _GL_COLORBURNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_COLORDODGE"/>
        /// </summary>
        public static int GL_COLORDODGE { get { if (!_GL_COLORDODGEReady) { _GL_COLORDODGEContent = SGetField<int>(LocalBridgeClazz, "GL_COLORDODGE"); _GL_COLORDODGEReady = true; } return _GL_COLORDODGEContent; } }
        private static int _GL_COLORDODGEContent = default;
        private static bool _GL_COLORDODGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_RGBA_ASTC_10x10"/>
        /// </summary>
        public static int GL_COMPRESSED_RGBA_ASTC_10x10 { get { if (!_GL_COMPRESSED_RGBA_ASTC_10x10Ready) { _GL_COMPRESSED_RGBA_ASTC_10x10Content = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_RGBA_ASTC_10x10"); _GL_COMPRESSED_RGBA_ASTC_10x10Ready = true; } return _GL_COMPRESSED_RGBA_ASTC_10x10Content; } }
        private static int _GL_COMPRESSED_RGBA_ASTC_10x10Content = default;
        private static bool _GL_COMPRESSED_RGBA_ASTC_10x10Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_RGBA_ASTC_10x5"/>
        /// </summary>
        public static int GL_COMPRESSED_RGBA_ASTC_10x5 { get { if (!_GL_COMPRESSED_RGBA_ASTC_10x5Ready) { _GL_COMPRESSED_RGBA_ASTC_10x5Content = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_RGBA_ASTC_10x5"); _GL_COMPRESSED_RGBA_ASTC_10x5Ready = true; } return _GL_COMPRESSED_RGBA_ASTC_10x5Content; } }
        private static int _GL_COMPRESSED_RGBA_ASTC_10x5Content = default;
        private static bool _GL_COMPRESSED_RGBA_ASTC_10x5Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_RGBA_ASTC_10x6"/>
        /// </summary>
        public static int GL_COMPRESSED_RGBA_ASTC_10x6 { get { if (!_GL_COMPRESSED_RGBA_ASTC_10x6Ready) { _GL_COMPRESSED_RGBA_ASTC_10x6Content = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_RGBA_ASTC_10x6"); _GL_COMPRESSED_RGBA_ASTC_10x6Ready = true; } return _GL_COMPRESSED_RGBA_ASTC_10x6Content; } }
        private static int _GL_COMPRESSED_RGBA_ASTC_10x6Content = default;
        private static bool _GL_COMPRESSED_RGBA_ASTC_10x6Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_RGBA_ASTC_10x8"/>
        /// </summary>
        public static int GL_COMPRESSED_RGBA_ASTC_10x8 { get { if (!_GL_COMPRESSED_RGBA_ASTC_10x8Ready) { _GL_COMPRESSED_RGBA_ASTC_10x8Content = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_RGBA_ASTC_10x8"); _GL_COMPRESSED_RGBA_ASTC_10x8Ready = true; } return _GL_COMPRESSED_RGBA_ASTC_10x8Content; } }
        private static int _GL_COMPRESSED_RGBA_ASTC_10x8Content = default;
        private static bool _GL_COMPRESSED_RGBA_ASTC_10x8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_RGBA_ASTC_12x10"/>
        /// </summary>
        public static int GL_COMPRESSED_RGBA_ASTC_12x10 { get { if (!_GL_COMPRESSED_RGBA_ASTC_12x10Ready) { _GL_COMPRESSED_RGBA_ASTC_12x10Content = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_RGBA_ASTC_12x10"); _GL_COMPRESSED_RGBA_ASTC_12x10Ready = true; } return _GL_COMPRESSED_RGBA_ASTC_12x10Content; } }
        private static int _GL_COMPRESSED_RGBA_ASTC_12x10Content = default;
        private static bool _GL_COMPRESSED_RGBA_ASTC_12x10Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_RGBA_ASTC_12x12"/>
        /// </summary>
        public static int GL_COMPRESSED_RGBA_ASTC_12x12 { get { if (!_GL_COMPRESSED_RGBA_ASTC_12x12Ready) { _GL_COMPRESSED_RGBA_ASTC_12x12Content = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_RGBA_ASTC_12x12"); _GL_COMPRESSED_RGBA_ASTC_12x12Ready = true; } return _GL_COMPRESSED_RGBA_ASTC_12x12Content; } }
        private static int _GL_COMPRESSED_RGBA_ASTC_12x12Content = default;
        private static bool _GL_COMPRESSED_RGBA_ASTC_12x12Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_RGBA_ASTC_4x4"/>
        /// </summary>
        public static int GL_COMPRESSED_RGBA_ASTC_4x4 { get { if (!_GL_COMPRESSED_RGBA_ASTC_4x4Ready) { _GL_COMPRESSED_RGBA_ASTC_4x4Content = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_RGBA_ASTC_4x4"); _GL_COMPRESSED_RGBA_ASTC_4x4Ready = true; } return _GL_COMPRESSED_RGBA_ASTC_4x4Content; } }
        private static int _GL_COMPRESSED_RGBA_ASTC_4x4Content = default;
        private static bool _GL_COMPRESSED_RGBA_ASTC_4x4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_RGBA_ASTC_5x4"/>
        /// </summary>
        public static int GL_COMPRESSED_RGBA_ASTC_5x4 { get { if (!_GL_COMPRESSED_RGBA_ASTC_5x4Ready) { _GL_COMPRESSED_RGBA_ASTC_5x4Content = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_RGBA_ASTC_5x4"); _GL_COMPRESSED_RGBA_ASTC_5x4Ready = true; } return _GL_COMPRESSED_RGBA_ASTC_5x4Content; } }
        private static int _GL_COMPRESSED_RGBA_ASTC_5x4Content = default;
        private static bool _GL_COMPRESSED_RGBA_ASTC_5x4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_RGBA_ASTC_5x5"/>
        /// </summary>
        public static int GL_COMPRESSED_RGBA_ASTC_5x5 { get { if (!_GL_COMPRESSED_RGBA_ASTC_5x5Ready) { _GL_COMPRESSED_RGBA_ASTC_5x5Content = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_RGBA_ASTC_5x5"); _GL_COMPRESSED_RGBA_ASTC_5x5Ready = true; } return _GL_COMPRESSED_RGBA_ASTC_5x5Content; } }
        private static int _GL_COMPRESSED_RGBA_ASTC_5x5Content = default;
        private static bool _GL_COMPRESSED_RGBA_ASTC_5x5Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_RGBA_ASTC_6x5"/>
        /// </summary>
        public static int GL_COMPRESSED_RGBA_ASTC_6x5 { get { if (!_GL_COMPRESSED_RGBA_ASTC_6x5Ready) { _GL_COMPRESSED_RGBA_ASTC_6x5Content = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_RGBA_ASTC_6x5"); _GL_COMPRESSED_RGBA_ASTC_6x5Ready = true; } return _GL_COMPRESSED_RGBA_ASTC_6x5Content; } }
        private static int _GL_COMPRESSED_RGBA_ASTC_6x5Content = default;
        private static bool _GL_COMPRESSED_RGBA_ASTC_6x5Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_RGBA_ASTC_6x6"/>
        /// </summary>
        public static int GL_COMPRESSED_RGBA_ASTC_6x6 { get { if (!_GL_COMPRESSED_RGBA_ASTC_6x6Ready) { _GL_COMPRESSED_RGBA_ASTC_6x6Content = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_RGBA_ASTC_6x6"); _GL_COMPRESSED_RGBA_ASTC_6x6Ready = true; } return _GL_COMPRESSED_RGBA_ASTC_6x6Content; } }
        private static int _GL_COMPRESSED_RGBA_ASTC_6x6Content = default;
        private static bool _GL_COMPRESSED_RGBA_ASTC_6x6Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_RGBA_ASTC_8x5"/>
        /// </summary>
        public static int GL_COMPRESSED_RGBA_ASTC_8x5 { get { if (!_GL_COMPRESSED_RGBA_ASTC_8x5Ready) { _GL_COMPRESSED_RGBA_ASTC_8x5Content = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_RGBA_ASTC_8x5"); _GL_COMPRESSED_RGBA_ASTC_8x5Ready = true; } return _GL_COMPRESSED_RGBA_ASTC_8x5Content; } }
        private static int _GL_COMPRESSED_RGBA_ASTC_8x5Content = default;
        private static bool _GL_COMPRESSED_RGBA_ASTC_8x5Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_RGBA_ASTC_8x6"/>
        /// </summary>
        public static int GL_COMPRESSED_RGBA_ASTC_8x6 { get { if (!_GL_COMPRESSED_RGBA_ASTC_8x6Ready) { _GL_COMPRESSED_RGBA_ASTC_8x6Content = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_RGBA_ASTC_8x6"); _GL_COMPRESSED_RGBA_ASTC_8x6Ready = true; } return _GL_COMPRESSED_RGBA_ASTC_8x6Content; } }
        private static int _GL_COMPRESSED_RGBA_ASTC_8x6Content = default;
        private static bool _GL_COMPRESSED_RGBA_ASTC_8x6Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_RGBA_ASTC_8x8"/>
        /// </summary>
        public static int GL_COMPRESSED_RGBA_ASTC_8x8 { get { if (!_GL_COMPRESSED_RGBA_ASTC_8x8Ready) { _GL_COMPRESSED_RGBA_ASTC_8x8Content = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_RGBA_ASTC_8x8"); _GL_COMPRESSED_RGBA_ASTC_8x8Ready = true; } return _GL_COMPRESSED_RGBA_ASTC_8x8Content; } }
        private static int _GL_COMPRESSED_RGBA_ASTC_8x8Content = default;
        private static bool _GL_COMPRESSED_RGBA_ASTC_8x8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10"/>
        /// </summary>
        public static int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10 { get { if (!_GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10Ready) { _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10Content = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10"); _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10Ready = true; } return _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10Content; } }
        private static int _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10Content = default;
        private static bool _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5"/>
        /// </summary>
        public static int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5 { get { if (!_GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5Ready) { _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5Content = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5"); _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5Ready = true; } return _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5Content; } }
        private static int _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5Content = default;
        private static bool _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6"/>
        /// </summary>
        public static int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6 { get { if (!_GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6Ready) { _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6Content = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6"); _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6Ready = true; } return _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6Content; } }
        private static int _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6Content = default;
        private static bool _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8"/>
        /// </summary>
        public static int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8 { get { if (!_GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8Ready) { _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8Content = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8"); _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8Ready = true; } return _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8Content; } }
        private static int _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8Content = default;
        private static bool _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10"/>
        /// </summary>
        public static int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10 { get { if (!_GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10Ready) { _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10Content = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10"); _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10Ready = true; } return _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10Content; } }
        private static int _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10Content = default;
        private static bool _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12"/>
        /// </summary>
        public static int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12 { get { if (!_GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12Ready) { _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12Content = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12"); _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12Ready = true; } return _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12Content; } }
        private static int _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12Content = default;
        private static bool _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4"/>
        /// </summary>
        public static int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4 { get { if (!_GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4Ready) { _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4Content = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4"); _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4Ready = true; } return _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4Content; } }
        private static int _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4Content = default;
        private static bool _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4"/>
        /// </summary>
        public static int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4 { get { if (!_GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4Ready) { _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4Content = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4"); _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4Ready = true; } return _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4Content; } }
        private static int _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4Content = default;
        private static bool _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5"/>
        /// </summary>
        public static int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5 { get { if (!_GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5Ready) { _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5Content = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5"); _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5Ready = true; } return _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5Content; } }
        private static int _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5Content = default;
        private static bool _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5"/>
        /// </summary>
        public static int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5 { get { if (!_GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5Ready) { _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5Content = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5"); _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5Ready = true; } return _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5Content; } }
        private static int _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5Content = default;
        private static bool _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6"/>
        /// </summary>
        public static int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6 { get { if (!_GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6Ready) { _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6Content = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6"); _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6Ready = true; } return _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6Content; } }
        private static int _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6Content = default;
        private static bool _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5"/>
        /// </summary>
        public static int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5 { get { if (!_GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5Ready) { _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5Content = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5"); _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5Ready = true; } return _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5Content; } }
        private static int _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5Content = default;
        private static bool _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6"/>
        /// </summary>
        public static int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6 { get { if (!_GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6Ready) { _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6Content = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6"); _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6Ready = true; } return _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6Content; } }
        private static int _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6Content = default;
        private static bool _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8"/>
        /// </summary>
        public static int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8 { get { if (!_GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8Ready) { _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8Content = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8"); _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8Ready = true; } return _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8Content; } }
        private static int _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8Content = default;
        private static bool _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_CONTEXT_FLAG_DEBUG_BIT"/>
        /// </summary>
        public static int GL_CONTEXT_FLAG_DEBUG_BIT { get { if (!_GL_CONTEXT_FLAG_DEBUG_BITReady) { _GL_CONTEXT_FLAG_DEBUG_BITContent = SGetField<int>(LocalBridgeClazz, "GL_CONTEXT_FLAG_DEBUG_BIT"); _GL_CONTEXT_FLAG_DEBUG_BITReady = true; } return _GL_CONTEXT_FLAG_DEBUG_BITContent; } }
        private static int _GL_CONTEXT_FLAG_DEBUG_BITContent = default;
        private static bool _GL_CONTEXT_FLAG_DEBUG_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT"/>
        /// </summary>
        public static int GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT { get { if (!_GL_CONTEXT_FLAG_ROBUST_ACCESS_BITReady) { _GL_CONTEXT_FLAG_ROBUST_ACCESS_BITContent = SGetField<int>(LocalBridgeClazz, "GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT"); _GL_CONTEXT_FLAG_ROBUST_ACCESS_BITReady = true; } return _GL_CONTEXT_FLAG_ROBUST_ACCESS_BITContent; } }
        private static int _GL_CONTEXT_FLAG_ROBUST_ACCESS_BITContent = default;
        private static bool _GL_CONTEXT_FLAG_ROBUST_ACCESS_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_CONTEXT_FLAGS"/>
        /// </summary>
        public static int GL_CONTEXT_FLAGS { get { if (!_GL_CONTEXT_FLAGSReady) { _GL_CONTEXT_FLAGSContent = SGetField<int>(LocalBridgeClazz, "GL_CONTEXT_FLAGS"); _GL_CONTEXT_FLAGSReady = true; } return _GL_CONTEXT_FLAGSContent; } }
        private static int _GL_CONTEXT_FLAGSContent = default;
        private static bool _GL_CONTEXT_FLAGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_CONTEXT_LOST"/>
        /// </summary>
        public static int GL_CONTEXT_LOST { get { if (!_GL_CONTEXT_LOSTReady) { _GL_CONTEXT_LOSTContent = SGetField<int>(LocalBridgeClazz, "GL_CONTEXT_LOST"); _GL_CONTEXT_LOSTReady = true; } return _GL_CONTEXT_LOSTContent; } }
        private static int _GL_CONTEXT_LOSTContent = default;
        private static bool _GL_CONTEXT_LOSTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_DARKEN"/>
        /// </summary>
        public static int GL_DARKEN { get { if (!_GL_DARKENReady) { _GL_DARKENContent = SGetField<int>(LocalBridgeClazz, "GL_DARKEN"); _GL_DARKENReady = true; } return _GL_DARKENContent; } }
        private static int _GL_DARKENContent = default;
        private static bool _GL_DARKENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_CALLBACK_FUNCTION"/>
        /// </summary>
        public static int GL_DEBUG_CALLBACK_FUNCTION { get { if (!_GL_DEBUG_CALLBACK_FUNCTIONReady) { _GL_DEBUG_CALLBACK_FUNCTIONContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_CALLBACK_FUNCTION"); _GL_DEBUG_CALLBACK_FUNCTIONReady = true; } return _GL_DEBUG_CALLBACK_FUNCTIONContent; } }
        private static int _GL_DEBUG_CALLBACK_FUNCTIONContent = default;
        private static bool _GL_DEBUG_CALLBACK_FUNCTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_CALLBACK_USER_PARAM"/>
        /// </summary>
        public static int GL_DEBUG_CALLBACK_USER_PARAM { get { if (!_GL_DEBUG_CALLBACK_USER_PARAMReady) { _GL_DEBUG_CALLBACK_USER_PARAMContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_CALLBACK_USER_PARAM"); _GL_DEBUG_CALLBACK_USER_PARAMReady = true; } return _GL_DEBUG_CALLBACK_USER_PARAMContent; } }
        private static int _GL_DEBUG_CALLBACK_USER_PARAMContent = default;
        private static bool _GL_DEBUG_CALLBACK_USER_PARAMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_GROUP_STACK_DEPTH"/>
        /// </summary>
        public static int GL_DEBUG_GROUP_STACK_DEPTH { get { if (!_GL_DEBUG_GROUP_STACK_DEPTHReady) { _GL_DEBUG_GROUP_STACK_DEPTHContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_GROUP_STACK_DEPTH"); _GL_DEBUG_GROUP_STACK_DEPTHReady = true; } return _GL_DEBUG_GROUP_STACK_DEPTHContent; } }
        private static int _GL_DEBUG_GROUP_STACK_DEPTHContent = default;
        private static bool _GL_DEBUG_GROUP_STACK_DEPTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_LOGGED_MESSAGES"/>
        /// </summary>
        public static int GL_DEBUG_LOGGED_MESSAGES { get { if (!_GL_DEBUG_LOGGED_MESSAGESReady) { _GL_DEBUG_LOGGED_MESSAGESContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_LOGGED_MESSAGES"); _GL_DEBUG_LOGGED_MESSAGESReady = true; } return _GL_DEBUG_LOGGED_MESSAGESContent; } }
        private static int _GL_DEBUG_LOGGED_MESSAGESContent = default;
        private static bool _GL_DEBUG_LOGGED_MESSAGESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH"/>
        /// </summary>
        public static int GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH { get { if (!_GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTHReady) { _GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTHContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH"); _GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTHReady = true; } return _GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTHContent; } }
        private static int _GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTHContent = default;
        private static bool _GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_OUTPUT"/>
        /// </summary>
        public static int GL_DEBUG_OUTPUT { get { if (!_GL_DEBUG_OUTPUTReady) { _GL_DEBUG_OUTPUTContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_OUTPUT"); _GL_DEBUG_OUTPUTReady = true; } return _GL_DEBUG_OUTPUTContent; } }
        private static int _GL_DEBUG_OUTPUTContent = default;
        private static bool _GL_DEBUG_OUTPUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_OUTPUT_SYNCHRONOUS"/>
        /// </summary>
        public static int GL_DEBUG_OUTPUT_SYNCHRONOUS { get { if (!_GL_DEBUG_OUTPUT_SYNCHRONOUSReady) { _GL_DEBUG_OUTPUT_SYNCHRONOUSContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_OUTPUT_SYNCHRONOUS"); _GL_DEBUG_OUTPUT_SYNCHRONOUSReady = true; } return _GL_DEBUG_OUTPUT_SYNCHRONOUSContent; } }
        private static int _GL_DEBUG_OUTPUT_SYNCHRONOUSContent = default;
        private static bool _GL_DEBUG_OUTPUT_SYNCHRONOUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_SEVERITY_HIGH"/>
        /// </summary>
        public static int GL_DEBUG_SEVERITY_HIGH { get { if (!_GL_DEBUG_SEVERITY_HIGHReady) { _GL_DEBUG_SEVERITY_HIGHContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_SEVERITY_HIGH"); _GL_DEBUG_SEVERITY_HIGHReady = true; } return _GL_DEBUG_SEVERITY_HIGHContent; } }
        private static int _GL_DEBUG_SEVERITY_HIGHContent = default;
        private static bool _GL_DEBUG_SEVERITY_HIGHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_SEVERITY_LOW"/>
        /// </summary>
        public static int GL_DEBUG_SEVERITY_LOW { get { if (!_GL_DEBUG_SEVERITY_LOWReady) { _GL_DEBUG_SEVERITY_LOWContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_SEVERITY_LOW"); _GL_DEBUG_SEVERITY_LOWReady = true; } return _GL_DEBUG_SEVERITY_LOWContent; } }
        private static int _GL_DEBUG_SEVERITY_LOWContent = default;
        private static bool _GL_DEBUG_SEVERITY_LOWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_SEVERITY_MEDIUM"/>
        /// </summary>
        public static int GL_DEBUG_SEVERITY_MEDIUM { get { if (!_GL_DEBUG_SEVERITY_MEDIUMReady) { _GL_DEBUG_SEVERITY_MEDIUMContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_SEVERITY_MEDIUM"); _GL_DEBUG_SEVERITY_MEDIUMReady = true; } return _GL_DEBUG_SEVERITY_MEDIUMContent; } }
        private static int _GL_DEBUG_SEVERITY_MEDIUMContent = default;
        private static bool _GL_DEBUG_SEVERITY_MEDIUMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_SEVERITY_NOTIFICATION"/>
        /// </summary>
        public static int GL_DEBUG_SEVERITY_NOTIFICATION { get { if (!_GL_DEBUG_SEVERITY_NOTIFICATIONReady) { _GL_DEBUG_SEVERITY_NOTIFICATIONContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_SEVERITY_NOTIFICATION"); _GL_DEBUG_SEVERITY_NOTIFICATIONReady = true; } return _GL_DEBUG_SEVERITY_NOTIFICATIONContent; } }
        private static int _GL_DEBUG_SEVERITY_NOTIFICATIONContent = default;
        private static bool _GL_DEBUG_SEVERITY_NOTIFICATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_SOURCE_API"/>
        /// </summary>
        public static int GL_DEBUG_SOURCE_API { get { if (!_GL_DEBUG_SOURCE_APIReady) { _GL_DEBUG_SOURCE_APIContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_SOURCE_API"); _GL_DEBUG_SOURCE_APIReady = true; } return _GL_DEBUG_SOURCE_APIContent; } }
        private static int _GL_DEBUG_SOURCE_APIContent = default;
        private static bool _GL_DEBUG_SOURCE_APIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_SOURCE_APPLICATION"/>
        /// </summary>
        public static int GL_DEBUG_SOURCE_APPLICATION { get { if (!_GL_DEBUG_SOURCE_APPLICATIONReady) { _GL_DEBUG_SOURCE_APPLICATIONContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_SOURCE_APPLICATION"); _GL_DEBUG_SOURCE_APPLICATIONReady = true; } return _GL_DEBUG_SOURCE_APPLICATIONContent; } }
        private static int _GL_DEBUG_SOURCE_APPLICATIONContent = default;
        private static bool _GL_DEBUG_SOURCE_APPLICATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_SOURCE_OTHER"/>
        /// </summary>
        public static int GL_DEBUG_SOURCE_OTHER { get { if (!_GL_DEBUG_SOURCE_OTHERReady) { _GL_DEBUG_SOURCE_OTHERContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_SOURCE_OTHER"); _GL_DEBUG_SOURCE_OTHERReady = true; } return _GL_DEBUG_SOURCE_OTHERContent; } }
        private static int _GL_DEBUG_SOURCE_OTHERContent = default;
        private static bool _GL_DEBUG_SOURCE_OTHERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_SOURCE_SHADER_COMPILER"/>
        /// </summary>
        public static int GL_DEBUG_SOURCE_SHADER_COMPILER { get { if (!_GL_DEBUG_SOURCE_SHADER_COMPILERReady) { _GL_DEBUG_SOURCE_SHADER_COMPILERContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_SOURCE_SHADER_COMPILER"); _GL_DEBUG_SOURCE_SHADER_COMPILERReady = true; } return _GL_DEBUG_SOURCE_SHADER_COMPILERContent; } }
        private static int _GL_DEBUG_SOURCE_SHADER_COMPILERContent = default;
        private static bool _GL_DEBUG_SOURCE_SHADER_COMPILERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_SOURCE_THIRD_PARTY"/>
        /// </summary>
        public static int GL_DEBUG_SOURCE_THIRD_PARTY { get { if (!_GL_DEBUG_SOURCE_THIRD_PARTYReady) { _GL_DEBUG_SOURCE_THIRD_PARTYContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_SOURCE_THIRD_PARTY"); _GL_DEBUG_SOURCE_THIRD_PARTYReady = true; } return _GL_DEBUG_SOURCE_THIRD_PARTYContent; } }
        private static int _GL_DEBUG_SOURCE_THIRD_PARTYContent = default;
        private static bool _GL_DEBUG_SOURCE_THIRD_PARTYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_SOURCE_WINDOW_SYSTEM"/>
        /// </summary>
        public static int GL_DEBUG_SOURCE_WINDOW_SYSTEM { get { if (!_GL_DEBUG_SOURCE_WINDOW_SYSTEMReady) { _GL_DEBUG_SOURCE_WINDOW_SYSTEMContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_SOURCE_WINDOW_SYSTEM"); _GL_DEBUG_SOURCE_WINDOW_SYSTEMReady = true; } return _GL_DEBUG_SOURCE_WINDOW_SYSTEMContent; } }
        private static int _GL_DEBUG_SOURCE_WINDOW_SYSTEMContent = default;
        private static bool _GL_DEBUG_SOURCE_WINDOW_SYSTEMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR"/>
        /// </summary>
        public static int GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR { get { if (!_GL_DEBUG_TYPE_DEPRECATED_BEHAVIORReady) { _GL_DEBUG_TYPE_DEPRECATED_BEHAVIORContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR"); _GL_DEBUG_TYPE_DEPRECATED_BEHAVIORReady = true; } return _GL_DEBUG_TYPE_DEPRECATED_BEHAVIORContent; } }
        private static int _GL_DEBUG_TYPE_DEPRECATED_BEHAVIORContent = default;
        private static bool _GL_DEBUG_TYPE_DEPRECATED_BEHAVIORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_TYPE_ERROR"/>
        /// </summary>
        public static int GL_DEBUG_TYPE_ERROR { get { if (!_GL_DEBUG_TYPE_ERRORReady) { _GL_DEBUG_TYPE_ERRORContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_TYPE_ERROR"); _GL_DEBUG_TYPE_ERRORReady = true; } return _GL_DEBUG_TYPE_ERRORContent; } }
        private static int _GL_DEBUG_TYPE_ERRORContent = default;
        private static bool _GL_DEBUG_TYPE_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_TYPE_MARKER"/>
        /// </summary>
        public static int GL_DEBUG_TYPE_MARKER { get { if (!_GL_DEBUG_TYPE_MARKERReady) { _GL_DEBUG_TYPE_MARKERContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_TYPE_MARKER"); _GL_DEBUG_TYPE_MARKERReady = true; } return _GL_DEBUG_TYPE_MARKERContent; } }
        private static int _GL_DEBUG_TYPE_MARKERContent = default;
        private static bool _GL_DEBUG_TYPE_MARKERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_TYPE_OTHER"/>
        /// </summary>
        public static int GL_DEBUG_TYPE_OTHER { get { if (!_GL_DEBUG_TYPE_OTHERReady) { _GL_DEBUG_TYPE_OTHERContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_TYPE_OTHER"); _GL_DEBUG_TYPE_OTHERReady = true; } return _GL_DEBUG_TYPE_OTHERContent; } }
        private static int _GL_DEBUG_TYPE_OTHERContent = default;
        private static bool _GL_DEBUG_TYPE_OTHERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_TYPE_PERFORMANCE"/>
        /// </summary>
        public static int GL_DEBUG_TYPE_PERFORMANCE { get { if (!_GL_DEBUG_TYPE_PERFORMANCEReady) { _GL_DEBUG_TYPE_PERFORMANCEContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_TYPE_PERFORMANCE"); _GL_DEBUG_TYPE_PERFORMANCEReady = true; } return _GL_DEBUG_TYPE_PERFORMANCEContent; } }
        private static int _GL_DEBUG_TYPE_PERFORMANCEContent = default;
        private static bool _GL_DEBUG_TYPE_PERFORMANCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_TYPE_POP_GROUP"/>
        /// </summary>
        public static int GL_DEBUG_TYPE_POP_GROUP { get { if (!_GL_DEBUG_TYPE_POP_GROUPReady) { _GL_DEBUG_TYPE_POP_GROUPContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_TYPE_POP_GROUP"); _GL_DEBUG_TYPE_POP_GROUPReady = true; } return _GL_DEBUG_TYPE_POP_GROUPContent; } }
        private static int _GL_DEBUG_TYPE_POP_GROUPContent = default;
        private static bool _GL_DEBUG_TYPE_POP_GROUPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_TYPE_PORTABILITY"/>
        /// </summary>
        public static int GL_DEBUG_TYPE_PORTABILITY { get { if (!_GL_DEBUG_TYPE_PORTABILITYReady) { _GL_DEBUG_TYPE_PORTABILITYContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_TYPE_PORTABILITY"); _GL_DEBUG_TYPE_PORTABILITYReady = true; } return _GL_DEBUG_TYPE_PORTABILITYContent; } }
        private static int _GL_DEBUG_TYPE_PORTABILITYContent = default;
        private static bool _GL_DEBUG_TYPE_PORTABILITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_TYPE_PUSH_GROUP"/>
        /// </summary>
        public static int GL_DEBUG_TYPE_PUSH_GROUP { get { if (!_GL_DEBUG_TYPE_PUSH_GROUPReady) { _GL_DEBUG_TYPE_PUSH_GROUPContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_TYPE_PUSH_GROUP"); _GL_DEBUG_TYPE_PUSH_GROUPReady = true; } return _GL_DEBUG_TYPE_PUSH_GROUPContent; } }
        private static int _GL_DEBUG_TYPE_PUSH_GROUPContent = default;
        private static bool _GL_DEBUG_TYPE_PUSH_GROUPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR"/>
        /// </summary>
        public static int GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR { get { if (!_GL_DEBUG_TYPE_UNDEFINED_BEHAVIORReady) { _GL_DEBUG_TYPE_UNDEFINED_BEHAVIORContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR"); _GL_DEBUG_TYPE_UNDEFINED_BEHAVIORReady = true; } return _GL_DEBUG_TYPE_UNDEFINED_BEHAVIORContent; } }
        private static int _GL_DEBUG_TYPE_UNDEFINED_BEHAVIORContent = default;
        private static bool _GL_DEBUG_TYPE_UNDEFINED_BEHAVIORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_DIFFERENCE"/>
        /// </summary>
        public static int GL_DIFFERENCE { get { if (!_GL_DIFFERENCEReady) { _GL_DIFFERENCEContent = SGetField<int>(LocalBridgeClazz, "GL_DIFFERENCE"); _GL_DIFFERENCEReady = true; } return _GL_DIFFERENCEContent; } }
        private static int _GL_DIFFERENCEContent = default;
        private static bool _GL_DIFFERENCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_EXCLUSION"/>
        /// </summary>
        public static int GL_EXCLUSION { get { if (!_GL_EXCLUSIONReady) { _GL_EXCLUSIONContent = SGetField<int>(LocalBridgeClazz, "GL_EXCLUSION"); _GL_EXCLUSIONReady = true; } return _GL_EXCLUSIONContent; } }
        private static int _GL_EXCLUSIONContent = default;
        private static bool _GL_EXCLUSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_FIRST_VERTEX_CONVENTION"/>
        /// </summary>
        public static int GL_FIRST_VERTEX_CONVENTION { get { if (!_GL_FIRST_VERTEX_CONVENTIONReady) { _GL_FIRST_VERTEX_CONVENTIONContent = SGetField<int>(LocalBridgeClazz, "GL_FIRST_VERTEX_CONVENTION"); _GL_FIRST_VERTEX_CONVENTIONReady = true; } return _GL_FIRST_VERTEX_CONVENTIONContent; } }
        private static int _GL_FIRST_VERTEX_CONVENTIONContent = default;
        private static bool _GL_FIRST_VERTEX_CONVENTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_FRACTIONAL_EVEN"/>
        /// </summary>
        public static int GL_FRACTIONAL_EVEN { get { if (!_GL_FRACTIONAL_EVENReady) { _GL_FRACTIONAL_EVENContent = SGetField<int>(LocalBridgeClazz, "GL_FRACTIONAL_EVEN"); _GL_FRACTIONAL_EVENReady = true; } return _GL_FRACTIONAL_EVENContent; } }
        private static int _GL_FRACTIONAL_EVENContent = default;
        private static bool _GL_FRACTIONAL_EVENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_FRACTIONAL_ODD"/>
        /// </summary>
        public static int GL_FRACTIONAL_ODD { get { if (!_GL_FRACTIONAL_ODDReady) { _GL_FRACTIONAL_ODDContent = SGetField<int>(LocalBridgeClazz, "GL_FRACTIONAL_ODD"); _GL_FRACTIONAL_ODDReady = true; } return _GL_FRACTIONAL_ODDContent; } }
        private static int _GL_FRACTIONAL_ODDContent = default;
        private static bool _GL_FRACTIONAL_ODDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_FRAGMENT_INTERPOLATION_OFFSET_BITS"/>
        /// </summary>
        public static int GL_FRAGMENT_INTERPOLATION_OFFSET_BITS { get { if (!_GL_FRAGMENT_INTERPOLATION_OFFSET_BITSReady) { _GL_FRAGMENT_INTERPOLATION_OFFSET_BITSContent = SGetField<int>(LocalBridgeClazz, "GL_FRAGMENT_INTERPOLATION_OFFSET_BITS"); _GL_FRAGMENT_INTERPOLATION_OFFSET_BITSReady = true; } return _GL_FRAGMENT_INTERPOLATION_OFFSET_BITSContent; } }
        private static int _GL_FRAGMENT_INTERPOLATION_OFFSET_BITSContent = default;
        private static bool _GL_FRAGMENT_INTERPOLATION_OFFSET_BITSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_FRAMEBUFFER_ATTACHMENT_LAYERED"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_ATTACHMENT_LAYERED { get { if (!_GL_FRAMEBUFFER_ATTACHMENT_LAYEREDReady) { _GL_FRAMEBUFFER_ATTACHMENT_LAYEREDContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_ATTACHMENT_LAYERED"); _GL_FRAMEBUFFER_ATTACHMENT_LAYEREDReady = true; } return _GL_FRAMEBUFFER_ATTACHMENT_LAYEREDContent; } }
        private static int _GL_FRAMEBUFFER_ATTACHMENT_LAYEREDContent = default;
        private static bool _GL_FRAMEBUFFER_ATTACHMENT_LAYEREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_FRAMEBUFFER_DEFAULT_LAYERS"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_DEFAULT_LAYERS { get { if (!_GL_FRAMEBUFFER_DEFAULT_LAYERSReady) { _GL_FRAMEBUFFER_DEFAULT_LAYERSContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_DEFAULT_LAYERS"); _GL_FRAMEBUFFER_DEFAULT_LAYERSReady = true; } return _GL_FRAMEBUFFER_DEFAULT_LAYERSContent; } }
        private static int _GL_FRAMEBUFFER_DEFAULT_LAYERSContent = default;
        private static bool _GL_FRAMEBUFFER_DEFAULT_LAYERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS { get { if (!_GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETSReady) { _GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETSContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS"); _GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETSReady = true; } return _GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETSContent; } }
        private static int _GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETSContent = default;
        private static bool _GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_GEOMETRY_INPUT_TYPE"/>
        /// </summary>
        public static int GL_GEOMETRY_INPUT_TYPE { get { if (!_GL_GEOMETRY_INPUT_TYPEReady) { _GL_GEOMETRY_INPUT_TYPEContent = SGetField<int>(LocalBridgeClazz, "GL_GEOMETRY_INPUT_TYPE"); _GL_GEOMETRY_INPUT_TYPEReady = true; } return _GL_GEOMETRY_INPUT_TYPEContent; } }
        private static int _GL_GEOMETRY_INPUT_TYPEContent = default;
        private static bool _GL_GEOMETRY_INPUT_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_GEOMETRY_OUTPUT_TYPE"/>
        /// </summary>
        public static int GL_GEOMETRY_OUTPUT_TYPE { get { if (!_GL_GEOMETRY_OUTPUT_TYPEReady) { _GL_GEOMETRY_OUTPUT_TYPEContent = SGetField<int>(LocalBridgeClazz, "GL_GEOMETRY_OUTPUT_TYPE"); _GL_GEOMETRY_OUTPUT_TYPEReady = true; } return _GL_GEOMETRY_OUTPUT_TYPEContent; } }
        private static int _GL_GEOMETRY_OUTPUT_TYPEContent = default;
        private static bool _GL_GEOMETRY_OUTPUT_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_GEOMETRY_SHADER"/>
        /// </summary>
        public static int GL_GEOMETRY_SHADER { get { if (!_GL_GEOMETRY_SHADERReady) { _GL_GEOMETRY_SHADERContent = SGetField<int>(LocalBridgeClazz, "GL_GEOMETRY_SHADER"); _GL_GEOMETRY_SHADERReady = true; } return _GL_GEOMETRY_SHADERContent; } }
        private static int _GL_GEOMETRY_SHADERContent = default;
        private static bool _GL_GEOMETRY_SHADERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_GEOMETRY_SHADER_BIT"/>
        /// </summary>
        public static int GL_GEOMETRY_SHADER_BIT { get { if (!_GL_GEOMETRY_SHADER_BITReady) { _GL_GEOMETRY_SHADER_BITContent = SGetField<int>(LocalBridgeClazz, "GL_GEOMETRY_SHADER_BIT"); _GL_GEOMETRY_SHADER_BITReady = true; } return _GL_GEOMETRY_SHADER_BITContent; } }
        private static int _GL_GEOMETRY_SHADER_BITContent = default;
        private static bool _GL_GEOMETRY_SHADER_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_GEOMETRY_SHADER_INVOCATIONS"/>
        /// </summary>
        public static int GL_GEOMETRY_SHADER_INVOCATIONS { get { if (!_GL_GEOMETRY_SHADER_INVOCATIONSReady) { _GL_GEOMETRY_SHADER_INVOCATIONSContent = SGetField<int>(LocalBridgeClazz, "GL_GEOMETRY_SHADER_INVOCATIONS"); _GL_GEOMETRY_SHADER_INVOCATIONSReady = true; } return _GL_GEOMETRY_SHADER_INVOCATIONSContent; } }
        private static int _GL_GEOMETRY_SHADER_INVOCATIONSContent = default;
        private static bool _GL_GEOMETRY_SHADER_INVOCATIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_GEOMETRY_VERTICES_OUT"/>
        /// </summary>
        public static int GL_GEOMETRY_VERTICES_OUT { get { if (!_GL_GEOMETRY_VERTICES_OUTReady) { _GL_GEOMETRY_VERTICES_OUTContent = SGetField<int>(LocalBridgeClazz, "GL_GEOMETRY_VERTICES_OUT"); _GL_GEOMETRY_VERTICES_OUTReady = true; } return _GL_GEOMETRY_VERTICES_OUTContent; } }
        private static int _GL_GEOMETRY_VERTICES_OUTContent = default;
        private static bool _GL_GEOMETRY_VERTICES_OUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_GUILTY_CONTEXT_RESET"/>
        /// </summary>
        public static int GL_GUILTY_CONTEXT_RESET { get { if (!_GL_GUILTY_CONTEXT_RESETReady) { _GL_GUILTY_CONTEXT_RESETContent = SGetField<int>(LocalBridgeClazz, "GL_GUILTY_CONTEXT_RESET"); _GL_GUILTY_CONTEXT_RESETReady = true; } return _GL_GUILTY_CONTEXT_RESETContent; } }
        private static int _GL_GUILTY_CONTEXT_RESETContent = default;
        private static bool _GL_GUILTY_CONTEXT_RESETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_HARDLIGHT"/>
        /// </summary>
        public static int GL_HARDLIGHT { get { if (!_GL_HARDLIGHTReady) { _GL_HARDLIGHTContent = SGetField<int>(LocalBridgeClazz, "GL_HARDLIGHT"); _GL_HARDLIGHTReady = true; } return _GL_HARDLIGHTContent; } }
        private static int _GL_HARDLIGHTContent = default;
        private static bool _GL_HARDLIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_HSL_COLOR"/>
        /// </summary>
        public static int GL_HSL_COLOR { get { if (!_GL_HSL_COLORReady) { _GL_HSL_COLORContent = SGetField<int>(LocalBridgeClazz, "GL_HSL_COLOR"); _GL_HSL_COLORReady = true; } return _GL_HSL_COLORContent; } }
        private static int _GL_HSL_COLORContent = default;
        private static bool _GL_HSL_COLORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_HSL_HUE"/>
        /// </summary>
        public static int GL_HSL_HUE { get { if (!_GL_HSL_HUEReady) { _GL_HSL_HUEContent = SGetField<int>(LocalBridgeClazz, "GL_HSL_HUE"); _GL_HSL_HUEReady = true; } return _GL_HSL_HUEContent; } }
        private static int _GL_HSL_HUEContent = default;
        private static bool _GL_HSL_HUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_HSL_LUMINOSITY"/>
        /// </summary>
        public static int GL_HSL_LUMINOSITY { get { if (!_GL_HSL_LUMINOSITYReady) { _GL_HSL_LUMINOSITYContent = SGetField<int>(LocalBridgeClazz, "GL_HSL_LUMINOSITY"); _GL_HSL_LUMINOSITYReady = true; } return _GL_HSL_LUMINOSITYContent; } }
        private static int _GL_HSL_LUMINOSITYContent = default;
        private static bool _GL_HSL_LUMINOSITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_HSL_SATURATION"/>
        /// </summary>
        public static int GL_HSL_SATURATION { get { if (!_GL_HSL_SATURATIONReady) { _GL_HSL_SATURATIONContent = SGetField<int>(LocalBridgeClazz, "GL_HSL_SATURATION"); _GL_HSL_SATURATIONReady = true; } return _GL_HSL_SATURATIONContent; } }
        private static int _GL_HSL_SATURATIONContent = default;
        private static bool _GL_HSL_SATURATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_IMAGE_BUFFER"/>
        /// </summary>
        public static int GL_IMAGE_BUFFER { get { if (!_GL_IMAGE_BUFFERReady) { _GL_IMAGE_BUFFERContent = SGetField<int>(LocalBridgeClazz, "GL_IMAGE_BUFFER"); _GL_IMAGE_BUFFERReady = true; } return _GL_IMAGE_BUFFERContent; } }
        private static int _GL_IMAGE_BUFFERContent = default;
        private static bool _GL_IMAGE_BUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_IMAGE_CUBE_MAP_ARRAY"/>
        /// </summary>
        public static int GL_IMAGE_CUBE_MAP_ARRAY { get { if (!_GL_IMAGE_CUBE_MAP_ARRAYReady) { _GL_IMAGE_CUBE_MAP_ARRAYContent = SGetField<int>(LocalBridgeClazz, "GL_IMAGE_CUBE_MAP_ARRAY"); _GL_IMAGE_CUBE_MAP_ARRAYReady = true; } return _GL_IMAGE_CUBE_MAP_ARRAYContent; } }
        private static int _GL_IMAGE_CUBE_MAP_ARRAYContent = default;
        private static bool _GL_IMAGE_CUBE_MAP_ARRAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_INNOCENT_CONTEXT_RESET"/>
        /// </summary>
        public static int GL_INNOCENT_CONTEXT_RESET { get { if (!_GL_INNOCENT_CONTEXT_RESETReady) { _GL_INNOCENT_CONTEXT_RESETContent = SGetField<int>(LocalBridgeClazz, "GL_INNOCENT_CONTEXT_RESET"); _GL_INNOCENT_CONTEXT_RESETReady = true; } return _GL_INNOCENT_CONTEXT_RESETContent; } }
        private static int _GL_INNOCENT_CONTEXT_RESETContent = default;
        private static bool _GL_INNOCENT_CONTEXT_RESETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_INT_IMAGE_BUFFER"/>
        /// </summary>
        public static int GL_INT_IMAGE_BUFFER { get { if (!_GL_INT_IMAGE_BUFFERReady) { _GL_INT_IMAGE_BUFFERContent = SGetField<int>(LocalBridgeClazz, "GL_INT_IMAGE_BUFFER"); _GL_INT_IMAGE_BUFFERReady = true; } return _GL_INT_IMAGE_BUFFERContent; } }
        private static int _GL_INT_IMAGE_BUFFERContent = default;
        private static bool _GL_INT_IMAGE_BUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_INT_IMAGE_CUBE_MAP_ARRAY"/>
        /// </summary>
        public static int GL_INT_IMAGE_CUBE_MAP_ARRAY { get { if (!_GL_INT_IMAGE_CUBE_MAP_ARRAYReady) { _GL_INT_IMAGE_CUBE_MAP_ARRAYContent = SGetField<int>(LocalBridgeClazz, "GL_INT_IMAGE_CUBE_MAP_ARRAY"); _GL_INT_IMAGE_CUBE_MAP_ARRAYReady = true; } return _GL_INT_IMAGE_CUBE_MAP_ARRAYContent; } }
        private static int _GL_INT_IMAGE_CUBE_MAP_ARRAYContent = default;
        private static bool _GL_INT_IMAGE_CUBE_MAP_ARRAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY"/>
        /// </summary>
        public static int GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY { get { if (!_GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAYReady) { _GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAYContent = SGetField<int>(LocalBridgeClazz, "GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY"); _GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAYReady = true; } return _GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAYContent; } }
        private static int _GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAYContent = default;
        private static bool _GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_INT_SAMPLER_BUFFER"/>
        /// </summary>
        public static int GL_INT_SAMPLER_BUFFER { get { if (!_GL_INT_SAMPLER_BUFFERReady) { _GL_INT_SAMPLER_BUFFERContent = SGetField<int>(LocalBridgeClazz, "GL_INT_SAMPLER_BUFFER"); _GL_INT_SAMPLER_BUFFERReady = true; } return _GL_INT_SAMPLER_BUFFERContent; } }
        private static int _GL_INT_SAMPLER_BUFFERContent = default;
        private static bool _GL_INT_SAMPLER_BUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_INT_SAMPLER_CUBE_MAP_ARRAY"/>
        /// </summary>
        public static int GL_INT_SAMPLER_CUBE_MAP_ARRAY { get { if (!_GL_INT_SAMPLER_CUBE_MAP_ARRAYReady) { _GL_INT_SAMPLER_CUBE_MAP_ARRAYContent = SGetField<int>(LocalBridgeClazz, "GL_INT_SAMPLER_CUBE_MAP_ARRAY"); _GL_INT_SAMPLER_CUBE_MAP_ARRAYReady = true; } return _GL_INT_SAMPLER_CUBE_MAP_ARRAYContent; } }
        private static int _GL_INT_SAMPLER_CUBE_MAP_ARRAYContent = default;
        private static bool _GL_INT_SAMPLER_CUBE_MAP_ARRAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_IS_PER_PATCH"/>
        /// </summary>
        public static int GL_IS_PER_PATCH { get { if (!_GL_IS_PER_PATCHReady) { _GL_IS_PER_PATCHContent = SGetField<int>(LocalBridgeClazz, "GL_IS_PER_PATCH"); _GL_IS_PER_PATCHReady = true; } return _GL_IS_PER_PATCHContent; } }
        private static int _GL_IS_PER_PATCHContent = default;
        private static bool _GL_IS_PER_PATCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_ISOLINES"/>
        /// </summary>
        public static int GL_ISOLINES { get { if (!_GL_ISOLINESReady) { _GL_ISOLINESContent = SGetField<int>(LocalBridgeClazz, "GL_ISOLINES"); _GL_ISOLINESReady = true; } return _GL_ISOLINESContent; } }
        private static int _GL_ISOLINESContent = default;
        private static bool _GL_ISOLINESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_LAST_VERTEX_CONVENTION"/>
        /// </summary>
        public static int GL_LAST_VERTEX_CONVENTION { get { if (!_GL_LAST_VERTEX_CONVENTIONReady) { _GL_LAST_VERTEX_CONVENTIONContent = SGetField<int>(LocalBridgeClazz, "GL_LAST_VERTEX_CONVENTION"); _GL_LAST_VERTEX_CONVENTIONReady = true; } return _GL_LAST_VERTEX_CONVENTIONContent; } }
        private static int _GL_LAST_VERTEX_CONVENTIONContent = default;
        private static bool _GL_LAST_VERTEX_CONVENTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_LAYER_PROVOKING_VERTEX"/>
        /// </summary>
        public static int GL_LAYER_PROVOKING_VERTEX { get { if (!_GL_LAYER_PROVOKING_VERTEXReady) { _GL_LAYER_PROVOKING_VERTEXContent = SGetField<int>(LocalBridgeClazz, "GL_LAYER_PROVOKING_VERTEX"); _GL_LAYER_PROVOKING_VERTEXReady = true; } return _GL_LAYER_PROVOKING_VERTEXContent; } }
        private static int _GL_LAYER_PROVOKING_VERTEXContent = default;
        private static bool _GL_LAYER_PROVOKING_VERTEXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_LIGHTEN"/>
        /// </summary>
        public static int GL_LIGHTEN { get { if (!_GL_LIGHTENReady) { _GL_LIGHTENContent = SGetField<int>(LocalBridgeClazz, "GL_LIGHTEN"); _GL_LIGHTENReady = true; } return _GL_LIGHTENContent; } }
        private static int _GL_LIGHTENContent = default;
        private static bool _GL_LIGHTENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_LINE_STRIP_ADJACENCY"/>
        /// </summary>
        public static int GL_LINE_STRIP_ADJACENCY { get { if (!_GL_LINE_STRIP_ADJACENCYReady) { _GL_LINE_STRIP_ADJACENCYContent = SGetField<int>(LocalBridgeClazz, "GL_LINE_STRIP_ADJACENCY"); _GL_LINE_STRIP_ADJACENCYReady = true; } return _GL_LINE_STRIP_ADJACENCYContent; } }
        private static int _GL_LINE_STRIP_ADJACENCYContent = default;
        private static bool _GL_LINE_STRIP_ADJACENCYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_LINES_ADJACENCY"/>
        /// </summary>
        public static int GL_LINES_ADJACENCY { get { if (!_GL_LINES_ADJACENCYReady) { _GL_LINES_ADJACENCYContent = SGetField<int>(LocalBridgeClazz, "GL_LINES_ADJACENCY"); _GL_LINES_ADJACENCYReady = true; } return _GL_LINES_ADJACENCYContent; } }
        private static int _GL_LINES_ADJACENCYContent = default;
        private static bool _GL_LINES_ADJACENCYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_LOSE_CONTEXT_ON_RESET"/>
        /// </summary>
        public static int GL_LOSE_CONTEXT_ON_RESET { get { if (!_GL_LOSE_CONTEXT_ON_RESETReady) { _GL_LOSE_CONTEXT_ON_RESETContent = SGetField<int>(LocalBridgeClazz, "GL_LOSE_CONTEXT_ON_RESET"); _GL_LOSE_CONTEXT_ON_RESETReady = true; } return _GL_LOSE_CONTEXT_ON_RESETContent; } }
        private static int _GL_LOSE_CONTEXT_ON_RESETContent = default;
        private static bool _GL_LOSE_CONTEXT_ON_RESETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS"/>
        /// </summary>
        public static int GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS { get { if (!_GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTSReady) { _GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS"); _GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTSReady = true; } return _GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTSContent; } }
        private static int _GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTSContent = default;
        private static bool _GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS"/>
        /// </summary>
        public static int GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS { get { if (!_GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTSReady) { _GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS"); _GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTSReady = true; } return _GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTSContent; } }
        private static int _GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTSContent = default;
        private static bool _GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS"/>
        /// </summary>
        public static int GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS { get { if (!_GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTSReady) { _GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS"); _GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTSReady = true; } return _GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTSContent; } }
        private static int _GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTSContent = default;
        private static bool _GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_DEBUG_GROUP_STACK_DEPTH"/>
        /// </summary>
        public static int GL_MAX_DEBUG_GROUP_STACK_DEPTH { get { if (!_GL_MAX_DEBUG_GROUP_STACK_DEPTHReady) { _GL_MAX_DEBUG_GROUP_STACK_DEPTHContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_DEBUG_GROUP_STACK_DEPTH"); _GL_MAX_DEBUG_GROUP_STACK_DEPTHReady = true; } return _GL_MAX_DEBUG_GROUP_STACK_DEPTHContent; } }
        private static int _GL_MAX_DEBUG_GROUP_STACK_DEPTHContent = default;
        private static bool _GL_MAX_DEBUG_GROUP_STACK_DEPTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_DEBUG_LOGGED_MESSAGES"/>
        /// </summary>
        public static int GL_MAX_DEBUG_LOGGED_MESSAGES { get { if (!_GL_MAX_DEBUG_LOGGED_MESSAGESReady) { _GL_MAX_DEBUG_LOGGED_MESSAGESContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_DEBUG_LOGGED_MESSAGES"); _GL_MAX_DEBUG_LOGGED_MESSAGESReady = true; } return _GL_MAX_DEBUG_LOGGED_MESSAGESContent; } }
        private static int _GL_MAX_DEBUG_LOGGED_MESSAGESContent = default;
        private static bool _GL_MAX_DEBUG_LOGGED_MESSAGESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_DEBUG_MESSAGE_LENGTH"/>
        /// </summary>
        public static int GL_MAX_DEBUG_MESSAGE_LENGTH { get { if (!_GL_MAX_DEBUG_MESSAGE_LENGTHReady) { _GL_MAX_DEBUG_MESSAGE_LENGTHContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_DEBUG_MESSAGE_LENGTH"); _GL_MAX_DEBUG_MESSAGE_LENGTHReady = true; } return _GL_MAX_DEBUG_MESSAGE_LENGTHContent; } }
        private static int _GL_MAX_DEBUG_MESSAGE_LENGTHContent = default;
        private static bool _GL_MAX_DEBUG_MESSAGE_LENGTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_FRAGMENT_INTERPOLATION_OFFSET"/>
        /// </summary>
        public static int GL_MAX_FRAGMENT_INTERPOLATION_OFFSET { get { if (!_GL_MAX_FRAGMENT_INTERPOLATION_OFFSETReady) { _GL_MAX_FRAGMENT_INTERPOLATION_OFFSETContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_FRAGMENT_INTERPOLATION_OFFSET"); _GL_MAX_FRAGMENT_INTERPOLATION_OFFSETReady = true; } return _GL_MAX_FRAGMENT_INTERPOLATION_OFFSETContent; } }
        private static int _GL_MAX_FRAGMENT_INTERPOLATION_OFFSETContent = default;
        private static bool _GL_MAX_FRAGMENT_INTERPOLATION_OFFSETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_FRAMEBUFFER_LAYERS"/>
        /// </summary>
        public static int GL_MAX_FRAMEBUFFER_LAYERS { get { if (!_GL_MAX_FRAMEBUFFER_LAYERSReady) { _GL_MAX_FRAMEBUFFER_LAYERSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_FRAMEBUFFER_LAYERS"); _GL_MAX_FRAMEBUFFER_LAYERSReady = true; } return _GL_MAX_FRAMEBUFFER_LAYERSContent; } }
        private static int _GL_MAX_FRAMEBUFFER_LAYERSContent = default;
        private static bool _GL_MAX_FRAMEBUFFER_LAYERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS"/>
        /// </summary>
        public static int GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS { get { if (!_GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERSReady) { _GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS"); _GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERSReady = true; } return _GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERSContent; } }
        private static int _GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERSContent = default;
        private static bool _GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_GEOMETRY_ATOMIC_COUNTERS"/>
        /// </summary>
        public static int GL_MAX_GEOMETRY_ATOMIC_COUNTERS { get { if (!_GL_MAX_GEOMETRY_ATOMIC_COUNTERSReady) { _GL_MAX_GEOMETRY_ATOMIC_COUNTERSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_GEOMETRY_ATOMIC_COUNTERS"); _GL_MAX_GEOMETRY_ATOMIC_COUNTERSReady = true; } return _GL_MAX_GEOMETRY_ATOMIC_COUNTERSContent; } }
        private static int _GL_MAX_GEOMETRY_ATOMIC_COUNTERSContent = default;
        private static bool _GL_MAX_GEOMETRY_ATOMIC_COUNTERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_GEOMETRY_IMAGE_UNIFORMS"/>
        /// </summary>
        public static int GL_MAX_GEOMETRY_IMAGE_UNIFORMS { get { if (!_GL_MAX_GEOMETRY_IMAGE_UNIFORMSReady) { _GL_MAX_GEOMETRY_IMAGE_UNIFORMSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_GEOMETRY_IMAGE_UNIFORMS"); _GL_MAX_GEOMETRY_IMAGE_UNIFORMSReady = true; } return _GL_MAX_GEOMETRY_IMAGE_UNIFORMSContent; } }
        private static int _GL_MAX_GEOMETRY_IMAGE_UNIFORMSContent = default;
        private static bool _GL_MAX_GEOMETRY_IMAGE_UNIFORMSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_GEOMETRY_INPUT_COMPONENTS"/>
        /// </summary>
        public static int GL_MAX_GEOMETRY_INPUT_COMPONENTS { get { if (!_GL_MAX_GEOMETRY_INPUT_COMPONENTSReady) { _GL_MAX_GEOMETRY_INPUT_COMPONENTSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_GEOMETRY_INPUT_COMPONENTS"); _GL_MAX_GEOMETRY_INPUT_COMPONENTSReady = true; } return _GL_MAX_GEOMETRY_INPUT_COMPONENTSContent; } }
        private static int _GL_MAX_GEOMETRY_INPUT_COMPONENTSContent = default;
        private static bool _GL_MAX_GEOMETRY_INPUT_COMPONENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_GEOMETRY_OUTPUT_COMPONENTS"/>
        /// </summary>
        public static int GL_MAX_GEOMETRY_OUTPUT_COMPONENTS { get { if (!_GL_MAX_GEOMETRY_OUTPUT_COMPONENTSReady) { _GL_MAX_GEOMETRY_OUTPUT_COMPONENTSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_GEOMETRY_OUTPUT_COMPONENTS"); _GL_MAX_GEOMETRY_OUTPUT_COMPONENTSReady = true; } return _GL_MAX_GEOMETRY_OUTPUT_COMPONENTSContent; } }
        private static int _GL_MAX_GEOMETRY_OUTPUT_COMPONENTSContent = default;
        private static bool _GL_MAX_GEOMETRY_OUTPUT_COMPONENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_GEOMETRY_OUTPUT_VERTICES"/>
        /// </summary>
        public static int GL_MAX_GEOMETRY_OUTPUT_VERTICES { get { if (!_GL_MAX_GEOMETRY_OUTPUT_VERTICESReady) { _GL_MAX_GEOMETRY_OUTPUT_VERTICESContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_GEOMETRY_OUTPUT_VERTICES"); _GL_MAX_GEOMETRY_OUTPUT_VERTICESReady = true; } return _GL_MAX_GEOMETRY_OUTPUT_VERTICESContent; } }
        private static int _GL_MAX_GEOMETRY_OUTPUT_VERTICESContent = default;
        private static bool _GL_MAX_GEOMETRY_OUTPUT_VERTICESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_GEOMETRY_SHADER_INVOCATIONS"/>
        /// </summary>
        public static int GL_MAX_GEOMETRY_SHADER_INVOCATIONS { get { if (!_GL_MAX_GEOMETRY_SHADER_INVOCATIONSReady) { _GL_MAX_GEOMETRY_SHADER_INVOCATIONSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_GEOMETRY_SHADER_INVOCATIONS"); _GL_MAX_GEOMETRY_SHADER_INVOCATIONSReady = true; } return _GL_MAX_GEOMETRY_SHADER_INVOCATIONSContent; } }
        private static int _GL_MAX_GEOMETRY_SHADER_INVOCATIONSContent = default;
        private static bool _GL_MAX_GEOMETRY_SHADER_INVOCATIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS"/>
        /// </summary>
        public static int GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS { get { if (!_GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKSReady) { _GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS"); _GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKSReady = true; } return _GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKSContent; } }
        private static int _GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKSContent = default;
        private static bool _GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS"/>
        /// </summary>
        public static int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS { get { if (!_GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITSReady) { _GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS"); _GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITSReady = true; } return _GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITSContent; } }
        private static int _GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITSContent = default;
        private static bool _GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS"/>
        /// </summary>
        public static int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS { get { if (!_GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTSReady) { _GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS"); _GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTSReady = true; } return _GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTSContent; } }
        private static int _GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTSContent = default;
        private static bool _GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_GEOMETRY_UNIFORM_BLOCKS"/>
        /// </summary>
        public static int GL_MAX_GEOMETRY_UNIFORM_BLOCKS { get { if (!_GL_MAX_GEOMETRY_UNIFORM_BLOCKSReady) { _GL_MAX_GEOMETRY_UNIFORM_BLOCKSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_GEOMETRY_UNIFORM_BLOCKS"); _GL_MAX_GEOMETRY_UNIFORM_BLOCKSReady = true; } return _GL_MAX_GEOMETRY_UNIFORM_BLOCKSContent; } }
        private static int _GL_MAX_GEOMETRY_UNIFORM_BLOCKSContent = default;
        private static bool _GL_MAX_GEOMETRY_UNIFORM_BLOCKSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS"/>
        /// </summary>
        public static int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS { get { if (!_GL_MAX_GEOMETRY_UNIFORM_COMPONENTSReady) { _GL_MAX_GEOMETRY_UNIFORM_COMPONENTSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_GEOMETRY_UNIFORM_COMPONENTS"); _GL_MAX_GEOMETRY_UNIFORM_COMPONENTSReady = true; } return _GL_MAX_GEOMETRY_UNIFORM_COMPONENTSContent; } }
        private static int _GL_MAX_GEOMETRY_UNIFORM_COMPONENTSContent = default;
        private static bool _GL_MAX_GEOMETRY_UNIFORM_COMPONENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_LABEL_LENGTH"/>
        /// </summary>
        public static int GL_MAX_LABEL_LENGTH { get { if (!_GL_MAX_LABEL_LENGTHReady) { _GL_MAX_LABEL_LENGTHContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_LABEL_LENGTH"); _GL_MAX_LABEL_LENGTHReady = true; } return _GL_MAX_LABEL_LENGTHContent; } }
        private static int _GL_MAX_LABEL_LENGTHContent = default;
        private static bool _GL_MAX_LABEL_LENGTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_PATCH_VERTICES"/>
        /// </summary>
        public static int GL_MAX_PATCH_VERTICES { get { if (!_GL_MAX_PATCH_VERTICESReady) { _GL_MAX_PATCH_VERTICESContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_PATCH_VERTICES"); _GL_MAX_PATCH_VERTICESReady = true; } return _GL_MAX_PATCH_VERTICESContent; } }
        private static int _GL_MAX_PATCH_VERTICESContent = default;
        private static bool _GL_MAX_PATCH_VERTICESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS"/>
        /// </summary>
        public static int GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS { get { if (!_GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERSReady) { _GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS"); _GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERSReady = true; } return _GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERSContent; } }
        private static int _GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERSContent = default;
        private static bool _GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS"/>
        /// </summary>
        public static int GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS { get { if (!_GL_MAX_TESS_CONTROL_ATOMIC_COUNTERSReady) { _GL_MAX_TESS_CONTROL_ATOMIC_COUNTERSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS"); _GL_MAX_TESS_CONTROL_ATOMIC_COUNTERSReady = true; } return _GL_MAX_TESS_CONTROL_ATOMIC_COUNTERSContent; } }
        private static int _GL_MAX_TESS_CONTROL_ATOMIC_COUNTERSContent = default;
        private static bool _GL_MAX_TESS_CONTROL_ATOMIC_COUNTERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS"/>
        /// </summary>
        public static int GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS { get { if (!_GL_MAX_TESS_CONTROL_IMAGE_UNIFORMSReady) { _GL_MAX_TESS_CONTROL_IMAGE_UNIFORMSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS"); _GL_MAX_TESS_CONTROL_IMAGE_UNIFORMSReady = true; } return _GL_MAX_TESS_CONTROL_IMAGE_UNIFORMSContent; } }
        private static int _GL_MAX_TESS_CONTROL_IMAGE_UNIFORMSContent = default;
        private static bool _GL_MAX_TESS_CONTROL_IMAGE_UNIFORMSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_CONTROL_INPUT_COMPONENTS"/>
        /// </summary>
        public static int GL_MAX_TESS_CONTROL_INPUT_COMPONENTS { get { if (!_GL_MAX_TESS_CONTROL_INPUT_COMPONENTSReady) { _GL_MAX_TESS_CONTROL_INPUT_COMPONENTSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_CONTROL_INPUT_COMPONENTS"); _GL_MAX_TESS_CONTROL_INPUT_COMPONENTSReady = true; } return _GL_MAX_TESS_CONTROL_INPUT_COMPONENTSContent; } }
        private static int _GL_MAX_TESS_CONTROL_INPUT_COMPONENTSContent = default;
        private static bool _GL_MAX_TESS_CONTROL_INPUT_COMPONENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS"/>
        /// </summary>
        public static int GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS { get { if (!_GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTSReady) { _GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS"); _GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTSReady = true; } return _GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTSContent; } }
        private static int _GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTSContent = default;
        private static bool _GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS"/>
        /// </summary>
        public static int GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS { get { if (!_GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKSReady) { _GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS"); _GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKSReady = true; } return _GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKSContent; } }
        private static int _GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKSContent = default;
        private static bool _GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS"/>
        /// </summary>
        public static int GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS { get { if (!_GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITSReady) { _GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS"); _GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITSReady = true; } return _GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITSContent; } }
        private static int _GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITSContent = default;
        private static bool _GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS"/>
        /// </summary>
        public static int GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS { get { if (!_GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTSReady) { _GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS"); _GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTSReady = true; } return _GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTSContent; } }
        private static int _GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTSContent = default;
        private static bool _GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS"/>
        /// </summary>
        public static int GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS { get { if (!_GL_MAX_TESS_CONTROL_UNIFORM_BLOCKSReady) { _GL_MAX_TESS_CONTROL_UNIFORM_BLOCKSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS"); _GL_MAX_TESS_CONTROL_UNIFORM_BLOCKSReady = true; } return _GL_MAX_TESS_CONTROL_UNIFORM_BLOCKSContent; } }
        private static int _GL_MAX_TESS_CONTROL_UNIFORM_BLOCKSContent = default;
        private static bool _GL_MAX_TESS_CONTROL_UNIFORM_BLOCKSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS"/>
        /// </summary>
        public static int GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS { get { if (!_GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTSReady) { _GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS"); _GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTSReady = true; } return _GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTSContent; } }
        private static int _GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTSContent = default;
        private static bool _GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS"/>
        /// </summary>
        public static int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS { get { if (!_GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERSReady) { _GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS"); _GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERSReady = true; } return _GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERSContent; } }
        private static int _GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERSContent = default;
        private static bool _GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS"/>
        /// </summary>
        public static int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS { get { if (!_GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERSReady) { _GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS"); _GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERSReady = true; } return _GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERSContent; } }
        private static int _GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERSContent = default;
        private static bool _GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS"/>
        /// </summary>
        public static int GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS { get { if (!_GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMSReady) { _GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS"); _GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMSReady = true; } return _GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMSContent; } }
        private static int _GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMSContent = default;
        private static bool _GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS"/>
        /// </summary>
        public static int GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS { get { if (!_GL_MAX_TESS_EVALUATION_INPUT_COMPONENTSReady) { _GL_MAX_TESS_EVALUATION_INPUT_COMPONENTSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS"); _GL_MAX_TESS_EVALUATION_INPUT_COMPONENTSReady = true; } return _GL_MAX_TESS_EVALUATION_INPUT_COMPONENTSContent; } }
        private static int _GL_MAX_TESS_EVALUATION_INPUT_COMPONENTSContent = default;
        private static bool _GL_MAX_TESS_EVALUATION_INPUT_COMPONENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS"/>
        /// </summary>
        public static int GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS { get { if (!_GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTSReady) { _GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS"); _GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTSReady = true; } return _GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTSContent; } }
        private static int _GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTSContent = default;
        private static bool _GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS"/>
        /// </summary>
        public static int GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS { get { if (!_GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKSReady) { _GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS"); _GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKSReady = true; } return _GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKSContent; } }
        private static int _GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKSContent = default;
        private static bool _GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS"/>
        /// </summary>
        public static int GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS { get { if (!_GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITSReady) { _GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS"); _GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITSReady = true; } return _GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITSContent; } }
        private static int _GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITSContent = default;
        private static bool _GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS"/>
        /// </summary>
        public static int GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS { get { if (!_GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKSReady) { _GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS"); _GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKSReady = true; } return _GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKSContent; } }
        private static int _GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKSContent = default;
        private static bool _GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS"/>
        /// </summary>
        public static int GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS { get { if (!_GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTSReady) { _GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS"); _GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTSReady = true; } return _GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTSContent; } }
        private static int _GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTSContent = default;
        private static bool _GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_GEN_LEVEL"/>
        /// </summary>
        public static int GL_MAX_TESS_GEN_LEVEL { get { if (!_GL_MAX_TESS_GEN_LEVELReady) { _GL_MAX_TESS_GEN_LEVELContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_GEN_LEVEL"); _GL_MAX_TESS_GEN_LEVELReady = true; } return _GL_MAX_TESS_GEN_LEVELContent; } }
        private static int _GL_MAX_TESS_GEN_LEVELContent = default;
        private static bool _GL_MAX_TESS_GEN_LEVELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_PATCH_COMPONENTS"/>
        /// </summary>
        public static int GL_MAX_TESS_PATCH_COMPONENTS { get { if (!_GL_MAX_TESS_PATCH_COMPONENTSReady) { _GL_MAX_TESS_PATCH_COMPONENTSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_PATCH_COMPONENTS"); _GL_MAX_TESS_PATCH_COMPONENTSReady = true; } return _GL_MAX_TESS_PATCH_COMPONENTSContent; } }
        private static int _GL_MAX_TESS_PATCH_COMPONENTSContent = default;
        private static bool _GL_MAX_TESS_PATCH_COMPONENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TEXTURE_BUFFER_SIZE"/>
        /// </summary>
        public static int GL_MAX_TEXTURE_BUFFER_SIZE { get { if (!_GL_MAX_TEXTURE_BUFFER_SIZEReady) { _GL_MAX_TEXTURE_BUFFER_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TEXTURE_BUFFER_SIZE"); _GL_MAX_TEXTURE_BUFFER_SIZEReady = true; } return _GL_MAX_TEXTURE_BUFFER_SIZEContent; } }
        private static int _GL_MAX_TEXTURE_BUFFER_SIZEContent = default;
        private static bool _GL_MAX_TEXTURE_BUFFER_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MIN_FRAGMENT_INTERPOLATION_OFFSET"/>
        /// </summary>
        public static int GL_MIN_FRAGMENT_INTERPOLATION_OFFSET { get { if (!_GL_MIN_FRAGMENT_INTERPOLATION_OFFSETReady) { _GL_MIN_FRAGMENT_INTERPOLATION_OFFSETContent = SGetField<int>(LocalBridgeClazz, "GL_MIN_FRAGMENT_INTERPOLATION_OFFSET"); _GL_MIN_FRAGMENT_INTERPOLATION_OFFSETReady = true; } return _GL_MIN_FRAGMENT_INTERPOLATION_OFFSETContent; } }
        private static int _GL_MIN_FRAGMENT_INTERPOLATION_OFFSETContent = default;
        private static bool _GL_MIN_FRAGMENT_INTERPOLATION_OFFSETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MIN_SAMPLE_SHADING_VALUE"/>
        /// </summary>
        public static int GL_MIN_SAMPLE_SHADING_VALUE { get { if (!_GL_MIN_SAMPLE_SHADING_VALUEReady) { _GL_MIN_SAMPLE_SHADING_VALUEContent = SGetField<int>(LocalBridgeClazz, "GL_MIN_SAMPLE_SHADING_VALUE"); _GL_MIN_SAMPLE_SHADING_VALUEReady = true; } return _GL_MIN_SAMPLE_SHADING_VALUEContent; } }
        private static int _GL_MIN_SAMPLE_SHADING_VALUEContent = default;
        private static bool _GL_MIN_SAMPLE_SHADING_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MULTIPLY"/>
        /// </summary>
        public static int GL_MULTIPLY { get { if (!_GL_MULTIPLYReady) { _GL_MULTIPLYContent = SGetField<int>(LocalBridgeClazz, "GL_MULTIPLY"); _GL_MULTIPLYReady = true; } return _GL_MULTIPLYContent; } }
        private static int _GL_MULTIPLYContent = default;
        private static bool _GL_MULTIPLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY"/>
        /// </summary>
        public static int GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY { get { if (!_GL_MULTISAMPLE_LINE_WIDTH_GRANULARITYReady) { _GL_MULTISAMPLE_LINE_WIDTH_GRANULARITYContent = SGetField<int>(LocalBridgeClazz, "GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY"); _GL_MULTISAMPLE_LINE_WIDTH_GRANULARITYReady = true; } return _GL_MULTISAMPLE_LINE_WIDTH_GRANULARITYContent; } }
        private static int _GL_MULTISAMPLE_LINE_WIDTH_GRANULARITYContent = default;
        private static bool _GL_MULTISAMPLE_LINE_WIDTH_GRANULARITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_MULTISAMPLE_LINE_WIDTH_RANGE"/>
        /// </summary>
        public static int GL_MULTISAMPLE_LINE_WIDTH_RANGE { get { if (!_GL_MULTISAMPLE_LINE_WIDTH_RANGEReady) { _GL_MULTISAMPLE_LINE_WIDTH_RANGEContent = SGetField<int>(LocalBridgeClazz, "GL_MULTISAMPLE_LINE_WIDTH_RANGE"); _GL_MULTISAMPLE_LINE_WIDTH_RANGEReady = true; } return _GL_MULTISAMPLE_LINE_WIDTH_RANGEContent; } }
        private static int _GL_MULTISAMPLE_LINE_WIDTH_RANGEContent = default;
        private static bool _GL_MULTISAMPLE_LINE_WIDTH_RANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_NO_RESET_NOTIFICATION"/>
        /// </summary>
        public static int GL_NO_RESET_NOTIFICATION { get { if (!_GL_NO_RESET_NOTIFICATIONReady) { _GL_NO_RESET_NOTIFICATIONContent = SGetField<int>(LocalBridgeClazz, "GL_NO_RESET_NOTIFICATION"); _GL_NO_RESET_NOTIFICATIONReady = true; } return _GL_NO_RESET_NOTIFICATIONContent; } }
        private static int _GL_NO_RESET_NOTIFICATIONContent = default;
        private static bool _GL_NO_RESET_NOTIFICATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_OVERLAY"/>
        /// </summary>
        public static int GL_OVERLAY { get { if (!_GL_OVERLAYReady) { _GL_OVERLAYContent = SGetField<int>(LocalBridgeClazz, "GL_OVERLAY"); _GL_OVERLAYReady = true; } return _GL_OVERLAYContent; } }
        private static int _GL_OVERLAYContent = default;
        private static bool _GL_OVERLAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_PATCH_VERTICES"/>
        /// </summary>
        public static int GL_PATCH_VERTICES { get { if (!_GL_PATCH_VERTICESReady) { _GL_PATCH_VERTICESContent = SGetField<int>(LocalBridgeClazz, "GL_PATCH_VERTICES"); _GL_PATCH_VERTICESReady = true; } return _GL_PATCH_VERTICESContent; } }
        private static int _GL_PATCH_VERTICESContent = default;
        private static bool _GL_PATCH_VERTICESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_PATCHES"/>
        /// </summary>
        public static int GL_PATCHES { get { if (!_GL_PATCHESReady) { _GL_PATCHESContent = SGetField<int>(LocalBridgeClazz, "GL_PATCHES"); _GL_PATCHESReady = true; } return _GL_PATCHESContent; } }
        private static int _GL_PATCHESContent = default;
        private static bool _GL_PATCHESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_PRIMITIVE_BOUNDING_BOX"/>
        /// </summary>
        public static int GL_PRIMITIVE_BOUNDING_BOX { get { if (!_GL_PRIMITIVE_BOUNDING_BOXReady) { _GL_PRIMITIVE_BOUNDING_BOXContent = SGetField<int>(LocalBridgeClazz, "GL_PRIMITIVE_BOUNDING_BOX"); _GL_PRIMITIVE_BOUNDING_BOXReady = true; } return _GL_PRIMITIVE_BOUNDING_BOXContent; } }
        private static int _GL_PRIMITIVE_BOUNDING_BOXContent = default;
        private static bool _GL_PRIMITIVE_BOUNDING_BOXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED"/>
        /// </summary>
        public static int GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED { get { if (!_GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTEDReady) { _GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTEDContent = SGetField<int>(LocalBridgeClazz, "GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED"); _GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTEDReady = true; } return _GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTEDContent; } }
        private static int _GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTEDContent = default;
        private static bool _GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_PRIMITIVES_GENERATED"/>
        /// </summary>
        public static int GL_PRIMITIVES_GENERATED { get { if (!_GL_PRIMITIVES_GENERATEDReady) { _GL_PRIMITIVES_GENERATEDContent = SGetField<int>(LocalBridgeClazz, "GL_PRIMITIVES_GENERATED"); _GL_PRIMITIVES_GENERATEDReady = true; } return _GL_PRIMITIVES_GENERATEDContent; } }
        private static int _GL_PRIMITIVES_GENERATEDContent = default;
        private static bool _GL_PRIMITIVES_GENERATEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_PROGRAM"/>
        /// </summary>
        public static int GL_PROGRAM { get { if (!_GL_PROGRAMReady) { _GL_PROGRAMContent = SGetField<int>(LocalBridgeClazz, "GL_PROGRAM"); _GL_PROGRAMReady = true; } return _GL_PROGRAMContent; } }
        private static int _GL_PROGRAMContent = default;
        private static bool _GL_PROGRAMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_PROGRAM_PIPELINE"/>
        /// </summary>
        public static int GL_PROGRAM_PIPELINE { get { if (!_GL_PROGRAM_PIPELINEReady) { _GL_PROGRAM_PIPELINEContent = SGetField<int>(LocalBridgeClazz, "GL_PROGRAM_PIPELINE"); _GL_PROGRAM_PIPELINEReady = true; } return _GL_PROGRAM_PIPELINEContent; } }
        private static int _GL_PROGRAM_PIPELINEContent = default;
        private static bool _GL_PROGRAM_PIPELINEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_QUADS"/>
        /// </summary>
        public static int GL_QUADS { get { if (!_GL_QUADSReady) { _GL_QUADSContent = SGetField<int>(LocalBridgeClazz, "GL_QUADS"); _GL_QUADSReady = true; } return _GL_QUADSContent; } }
        private static int _GL_QUADSContent = default;
        private static bool _GL_QUADSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_QUERY"/>
        /// </summary>
        public static int GL_QUERY { get { if (!_GL_QUERYReady) { _GL_QUERYContent = SGetField<int>(LocalBridgeClazz, "GL_QUERY"); _GL_QUERYReady = true; } return _GL_QUERYContent; } }
        private static int _GL_QUERYContent = default;
        private static bool _GL_QUERYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_REFERENCED_BY_GEOMETRY_SHADER"/>
        /// </summary>
        public static int GL_REFERENCED_BY_GEOMETRY_SHADER { get { if (!_GL_REFERENCED_BY_GEOMETRY_SHADERReady) { _GL_REFERENCED_BY_GEOMETRY_SHADERContent = SGetField<int>(LocalBridgeClazz, "GL_REFERENCED_BY_GEOMETRY_SHADER"); _GL_REFERENCED_BY_GEOMETRY_SHADERReady = true; } return _GL_REFERENCED_BY_GEOMETRY_SHADERContent; } }
        private static int _GL_REFERENCED_BY_GEOMETRY_SHADERContent = default;
        private static bool _GL_REFERENCED_BY_GEOMETRY_SHADERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_REFERENCED_BY_TESS_CONTROL_SHADER"/>
        /// </summary>
        public static int GL_REFERENCED_BY_TESS_CONTROL_SHADER { get { if (!_GL_REFERENCED_BY_TESS_CONTROL_SHADERReady) { _GL_REFERENCED_BY_TESS_CONTROL_SHADERContent = SGetField<int>(LocalBridgeClazz, "GL_REFERENCED_BY_TESS_CONTROL_SHADER"); _GL_REFERENCED_BY_TESS_CONTROL_SHADERReady = true; } return _GL_REFERENCED_BY_TESS_CONTROL_SHADERContent; } }
        private static int _GL_REFERENCED_BY_TESS_CONTROL_SHADERContent = default;
        private static bool _GL_REFERENCED_BY_TESS_CONTROL_SHADERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_REFERENCED_BY_TESS_EVALUATION_SHADER"/>
        /// </summary>
        public static int GL_REFERENCED_BY_TESS_EVALUATION_SHADER { get { if (!_GL_REFERENCED_BY_TESS_EVALUATION_SHADERReady) { _GL_REFERENCED_BY_TESS_EVALUATION_SHADERContent = SGetField<int>(LocalBridgeClazz, "GL_REFERENCED_BY_TESS_EVALUATION_SHADER"); _GL_REFERENCED_BY_TESS_EVALUATION_SHADERReady = true; } return _GL_REFERENCED_BY_TESS_EVALUATION_SHADERContent; } }
        private static int _GL_REFERENCED_BY_TESS_EVALUATION_SHADERContent = default;
        private static bool _GL_REFERENCED_BY_TESS_EVALUATION_SHADERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_RESET_NOTIFICATION_STRATEGY"/>
        /// </summary>
        public static int GL_RESET_NOTIFICATION_STRATEGY { get { if (!_GL_RESET_NOTIFICATION_STRATEGYReady) { _GL_RESET_NOTIFICATION_STRATEGYContent = SGetField<int>(LocalBridgeClazz, "GL_RESET_NOTIFICATION_STRATEGY"); _GL_RESET_NOTIFICATION_STRATEGYReady = true; } return _GL_RESET_NOTIFICATION_STRATEGYContent; } }
        private static int _GL_RESET_NOTIFICATION_STRATEGYContent = default;
        private static bool _GL_RESET_NOTIFICATION_STRATEGYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_SAMPLE_SHADING"/>
        /// </summary>
        public static int GL_SAMPLE_SHADING { get { if (!_GL_SAMPLE_SHADINGReady) { _GL_SAMPLE_SHADINGContent = SGetField<int>(LocalBridgeClazz, "GL_SAMPLE_SHADING"); _GL_SAMPLE_SHADINGReady = true; } return _GL_SAMPLE_SHADINGContent; } }
        private static int _GL_SAMPLE_SHADINGContent = default;
        private static bool _GL_SAMPLE_SHADINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_SAMPLER"/>
        /// </summary>
        public static int GL_SAMPLER { get { if (!_GL_SAMPLERReady) { _GL_SAMPLERContent = SGetField<int>(LocalBridgeClazz, "GL_SAMPLER"); _GL_SAMPLERReady = true; } return _GL_SAMPLERContent; } }
        private static int _GL_SAMPLERContent = default;
        private static bool _GL_SAMPLERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_SAMPLER_2D_MULTISAMPLE_ARRAY"/>
        /// </summary>
        public static int GL_SAMPLER_2D_MULTISAMPLE_ARRAY { get { if (!_GL_SAMPLER_2D_MULTISAMPLE_ARRAYReady) { _GL_SAMPLER_2D_MULTISAMPLE_ARRAYContent = SGetField<int>(LocalBridgeClazz, "GL_SAMPLER_2D_MULTISAMPLE_ARRAY"); _GL_SAMPLER_2D_MULTISAMPLE_ARRAYReady = true; } return _GL_SAMPLER_2D_MULTISAMPLE_ARRAYContent; } }
        private static int _GL_SAMPLER_2D_MULTISAMPLE_ARRAYContent = default;
        private static bool _GL_SAMPLER_2D_MULTISAMPLE_ARRAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_SAMPLER_BUFFER"/>
        /// </summary>
        public static int GL_SAMPLER_BUFFER { get { if (!_GL_SAMPLER_BUFFERReady) { _GL_SAMPLER_BUFFERContent = SGetField<int>(LocalBridgeClazz, "GL_SAMPLER_BUFFER"); _GL_SAMPLER_BUFFERReady = true; } return _GL_SAMPLER_BUFFERContent; } }
        private static int _GL_SAMPLER_BUFFERContent = default;
        private static bool _GL_SAMPLER_BUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_SAMPLER_CUBE_MAP_ARRAY"/>
        /// </summary>
        public static int GL_SAMPLER_CUBE_MAP_ARRAY { get { if (!_GL_SAMPLER_CUBE_MAP_ARRAYReady) { _GL_SAMPLER_CUBE_MAP_ARRAYContent = SGetField<int>(LocalBridgeClazz, "GL_SAMPLER_CUBE_MAP_ARRAY"); _GL_SAMPLER_CUBE_MAP_ARRAYReady = true; } return _GL_SAMPLER_CUBE_MAP_ARRAYContent; } }
        private static int _GL_SAMPLER_CUBE_MAP_ARRAYContent = default;
        private static bool _GL_SAMPLER_CUBE_MAP_ARRAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW"/>
        /// </summary>
        public static int GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW { get { if (!_GL_SAMPLER_CUBE_MAP_ARRAY_SHADOWReady) { _GL_SAMPLER_CUBE_MAP_ARRAY_SHADOWContent = SGetField<int>(LocalBridgeClazz, "GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW"); _GL_SAMPLER_CUBE_MAP_ARRAY_SHADOWReady = true; } return _GL_SAMPLER_CUBE_MAP_ARRAY_SHADOWContent; } }
        private static int _GL_SAMPLER_CUBE_MAP_ARRAY_SHADOWContent = default;
        private static bool _GL_SAMPLER_CUBE_MAP_ARRAY_SHADOWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_SCREEN"/>
        /// </summary>
        public static int GL_SCREEN { get { if (!_GL_SCREENReady) { _GL_SCREENContent = SGetField<int>(LocalBridgeClazz, "GL_SCREEN"); _GL_SCREENReady = true; } return _GL_SCREENContent; } }
        private static int _GL_SCREENContent = default;
        private static bool _GL_SCREENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_SHADER"/>
        /// </summary>
        public static int GL_SHADER { get { if (!_GL_SHADERReady) { _GL_SHADERContent = SGetField<int>(LocalBridgeClazz, "GL_SHADER"); _GL_SHADERReady = true; } return _GL_SHADERContent; } }
        private static int _GL_SHADERContent = default;
        private static bool _GL_SHADERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_SOFTLIGHT"/>
        /// </summary>
        public static int GL_SOFTLIGHT { get { if (!_GL_SOFTLIGHTReady) { _GL_SOFTLIGHTContent = SGetField<int>(LocalBridgeClazz, "GL_SOFTLIGHT"); _GL_SOFTLIGHTReady = true; } return _GL_SOFTLIGHTContent; } }
        private static int _GL_SOFTLIGHTContent = default;
        private static bool _GL_SOFTLIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_STACK_OVERFLOW"/>
        /// </summary>
        public static int GL_STACK_OVERFLOW { get { if (!_GL_STACK_OVERFLOWReady) { _GL_STACK_OVERFLOWContent = SGetField<int>(LocalBridgeClazz, "GL_STACK_OVERFLOW"); _GL_STACK_OVERFLOWReady = true; } return _GL_STACK_OVERFLOWContent; } }
        private static int _GL_STACK_OVERFLOWContent = default;
        private static bool _GL_STACK_OVERFLOWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_STACK_UNDERFLOW"/>
        /// </summary>
        public static int GL_STACK_UNDERFLOW { get { if (!_GL_STACK_UNDERFLOWReady) { _GL_STACK_UNDERFLOWContent = SGetField<int>(LocalBridgeClazz, "GL_STACK_UNDERFLOW"); _GL_STACK_UNDERFLOWReady = true; } return _GL_STACK_UNDERFLOWContent; } }
        private static int _GL_STACK_UNDERFLOWContent = default;
        private static bool _GL_STACK_UNDERFLOWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_TESS_CONTROL_OUTPUT_VERTICES"/>
        /// </summary>
        public static int GL_TESS_CONTROL_OUTPUT_VERTICES { get { if (!_GL_TESS_CONTROL_OUTPUT_VERTICESReady) { _GL_TESS_CONTROL_OUTPUT_VERTICESContent = SGetField<int>(LocalBridgeClazz, "GL_TESS_CONTROL_OUTPUT_VERTICES"); _GL_TESS_CONTROL_OUTPUT_VERTICESReady = true; } return _GL_TESS_CONTROL_OUTPUT_VERTICESContent; } }
        private static int _GL_TESS_CONTROL_OUTPUT_VERTICESContent = default;
        private static bool _GL_TESS_CONTROL_OUTPUT_VERTICESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_TESS_CONTROL_SHADER"/>
        /// </summary>
        public static int GL_TESS_CONTROL_SHADER { get { if (!_GL_TESS_CONTROL_SHADERReady) { _GL_TESS_CONTROL_SHADERContent = SGetField<int>(LocalBridgeClazz, "GL_TESS_CONTROL_SHADER"); _GL_TESS_CONTROL_SHADERReady = true; } return _GL_TESS_CONTROL_SHADERContent; } }
        private static int _GL_TESS_CONTROL_SHADERContent = default;
        private static bool _GL_TESS_CONTROL_SHADERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_TESS_CONTROL_SHADER_BIT"/>
        /// </summary>
        public static int GL_TESS_CONTROL_SHADER_BIT { get { if (!_GL_TESS_CONTROL_SHADER_BITReady) { _GL_TESS_CONTROL_SHADER_BITContent = SGetField<int>(LocalBridgeClazz, "GL_TESS_CONTROL_SHADER_BIT"); _GL_TESS_CONTROL_SHADER_BITReady = true; } return _GL_TESS_CONTROL_SHADER_BITContent; } }
        private static int _GL_TESS_CONTROL_SHADER_BITContent = default;
        private static bool _GL_TESS_CONTROL_SHADER_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_TESS_EVALUATION_SHADER"/>
        /// </summary>
        public static int GL_TESS_EVALUATION_SHADER { get { if (!_GL_TESS_EVALUATION_SHADERReady) { _GL_TESS_EVALUATION_SHADERContent = SGetField<int>(LocalBridgeClazz, "GL_TESS_EVALUATION_SHADER"); _GL_TESS_EVALUATION_SHADERReady = true; } return _GL_TESS_EVALUATION_SHADERContent; } }
        private static int _GL_TESS_EVALUATION_SHADERContent = default;
        private static bool _GL_TESS_EVALUATION_SHADERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_TESS_EVALUATION_SHADER_BIT"/>
        /// </summary>
        public static int GL_TESS_EVALUATION_SHADER_BIT { get { if (!_GL_TESS_EVALUATION_SHADER_BITReady) { _GL_TESS_EVALUATION_SHADER_BITContent = SGetField<int>(LocalBridgeClazz, "GL_TESS_EVALUATION_SHADER_BIT"); _GL_TESS_EVALUATION_SHADER_BITReady = true; } return _GL_TESS_EVALUATION_SHADER_BITContent; } }
        private static int _GL_TESS_EVALUATION_SHADER_BITContent = default;
        private static bool _GL_TESS_EVALUATION_SHADER_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_TESS_GEN_MODE"/>
        /// </summary>
        public static int GL_TESS_GEN_MODE { get { if (!_GL_TESS_GEN_MODEReady) { _GL_TESS_GEN_MODEContent = SGetField<int>(LocalBridgeClazz, "GL_TESS_GEN_MODE"); _GL_TESS_GEN_MODEReady = true; } return _GL_TESS_GEN_MODEContent; } }
        private static int _GL_TESS_GEN_MODEContent = default;
        private static bool _GL_TESS_GEN_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_TESS_GEN_POINT_MODE"/>
        /// </summary>
        public static int GL_TESS_GEN_POINT_MODE { get { if (!_GL_TESS_GEN_POINT_MODEReady) { _GL_TESS_GEN_POINT_MODEContent = SGetField<int>(LocalBridgeClazz, "GL_TESS_GEN_POINT_MODE"); _GL_TESS_GEN_POINT_MODEReady = true; } return _GL_TESS_GEN_POINT_MODEContent; } }
        private static int _GL_TESS_GEN_POINT_MODEContent = default;
        private static bool _GL_TESS_GEN_POINT_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_TESS_GEN_SPACING"/>
        /// </summary>
        public static int GL_TESS_GEN_SPACING { get { if (!_GL_TESS_GEN_SPACINGReady) { _GL_TESS_GEN_SPACINGContent = SGetField<int>(LocalBridgeClazz, "GL_TESS_GEN_SPACING"); _GL_TESS_GEN_SPACINGReady = true; } return _GL_TESS_GEN_SPACINGContent; } }
        private static int _GL_TESS_GEN_SPACINGContent = default;
        private static bool _GL_TESS_GEN_SPACINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_TESS_GEN_VERTEX_ORDER"/>
        /// </summary>
        public static int GL_TESS_GEN_VERTEX_ORDER { get { if (!_GL_TESS_GEN_VERTEX_ORDERReady) { _GL_TESS_GEN_VERTEX_ORDERContent = SGetField<int>(LocalBridgeClazz, "GL_TESS_GEN_VERTEX_ORDER"); _GL_TESS_GEN_VERTEX_ORDERReady = true; } return _GL_TESS_GEN_VERTEX_ORDERContent; } }
        private static int _GL_TESS_GEN_VERTEX_ORDERContent = default;
        private static bool _GL_TESS_GEN_VERTEX_ORDERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_TEXTURE_2D_MULTISAMPLE_ARRAY"/>
        /// </summary>
        public static int GL_TEXTURE_2D_MULTISAMPLE_ARRAY { get { if (!_GL_TEXTURE_2D_MULTISAMPLE_ARRAYReady) { _GL_TEXTURE_2D_MULTISAMPLE_ARRAYContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_2D_MULTISAMPLE_ARRAY"); _GL_TEXTURE_2D_MULTISAMPLE_ARRAYReady = true; } return _GL_TEXTURE_2D_MULTISAMPLE_ARRAYContent; } }
        private static int _GL_TEXTURE_2D_MULTISAMPLE_ARRAYContent = default;
        private static bool _GL_TEXTURE_2D_MULTISAMPLE_ARRAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY"/>
        /// </summary>
        public static int GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY { get { if (!_GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAYReady) { _GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAYContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY"); _GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAYReady = true; } return _GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAYContent; } }
        private static int _GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAYContent = default;
        private static bool _GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_TEXTURE_BINDING_BUFFER"/>
        /// </summary>
        public static int GL_TEXTURE_BINDING_BUFFER { get { if (!_GL_TEXTURE_BINDING_BUFFERReady) { _GL_TEXTURE_BINDING_BUFFERContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_BINDING_BUFFER"); _GL_TEXTURE_BINDING_BUFFERReady = true; } return _GL_TEXTURE_BINDING_BUFFERContent; } }
        private static int _GL_TEXTURE_BINDING_BUFFERContent = default;
        private static bool _GL_TEXTURE_BINDING_BUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_TEXTURE_BINDING_CUBE_MAP_ARRAY"/>
        /// </summary>
        public static int GL_TEXTURE_BINDING_CUBE_MAP_ARRAY { get { if (!_GL_TEXTURE_BINDING_CUBE_MAP_ARRAYReady) { _GL_TEXTURE_BINDING_CUBE_MAP_ARRAYContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_BINDING_CUBE_MAP_ARRAY"); _GL_TEXTURE_BINDING_CUBE_MAP_ARRAYReady = true; } return _GL_TEXTURE_BINDING_CUBE_MAP_ARRAYContent; } }
        private static int _GL_TEXTURE_BINDING_CUBE_MAP_ARRAYContent = default;
        private static bool _GL_TEXTURE_BINDING_CUBE_MAP_ARRAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_TEXTURE_BORDER_COLOR"/>
        /// </summary>
        public static int GL_TEXTURE_BORDER_COLOR { get { if (!_GL_TEXTURE_BORDER_COLORReady) { _GL_TEXTURE_BORDER_COLORContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_BORDER_COLOR"); _GL_TEXTURE_BORDER_COLORReady = true; } return _GL_TEXTURE_BORDER_COLORContent; } }
        private static int _GL_TEXTURE_BORDER_COLORContent = default;
        private static bool _GL_TEXTURE_BORDER_COLORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_TEXTURE_BUFFER"/>
        /// </summary>
        public static int GL_TEXTURE_BUFFER { get { if (!_GL_TEXTURE_BUFFERReady) { _GL_TEXTURE_BUFFERContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_BUFFER"); _GL_TEXTURE_BUFFERReady = true; } return _GL_TEXTURE_BUFFERContent; } }
        private static int _GL_TEXTURE_BUFFERContent = default;
        private static bool _GL_TEXTURE_BUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_TEXTURE_BUFFER_BINDING"/>
        /// </summary>
        public static int GL_TEXTURE_BUFFER_BINDING { get { if (!_GL_TEXTURE_BUFFER_BINDINGReady) { _GL_TEXTURE_BUFFER_BINDINGContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_BUFFER_BINDING"); _GL_TEXTURE_BUFFER_BINDINGReady = true; } return _GL_TEXTURE_BUFFER_BINDINGContent; } }
        private static int _GL_TEXTURE_BUFFER_BINDINGContent = default;
        private static bool _GL_TEXTURE_BUFFER_BINDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_TEXTURE_BUFFER_DATA_STORE_BINDING"/>
        /// </summary>
        public static int GL_TEXTURE_BUFFER_DATA_STORE_BINDING { get { if (!_GL_TEXTURE_BUFFER_DATA_STORE_BINDINGReady) { _GL_TEXTURE_BUFFER_DATA_STORE_BINDINGContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_BUFFER_DATA_STORE_BINDING"); _GL_TEXTURE_BUFFER_DATA_STORE_BINDINGReady = true; } return _GL_TEXTURE_BUFFER_DATA_STORE_BINDINGContent; } }
        private static int _GL_TEXTURE_BUFFER_DATA_STORE_BINDINGContent = default;
        private static bool _GL_TEXTURE_BUFFER_DATA_STORE_BINDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_TEXTURE_BUFFER_OFFSET"/>
        /// </summary>
        public static int GL_TEXTURE_BUFFER_OFFSET { get { if (!_GL_TEXTURE_BUFFER_OFFSETReady) { _GL_TEXTURE_BUFFER_OFFSETContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_BUFFER_OFFSET"); _GL_TEXTURE_BUFFER_OFFSETReady = true; } return _GL_TEXTURE_BUFFER_OFFSETContent; } }
        private static int _GL_TEXTURE_BUFFER_OFFSETContent = default;
        private static bool _GL_TEXTURE_BUFFER_OFFSETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT"/>
        /// </summary>
        public static int GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT { get { if (!_GL_TEXTURE_BUFFER_OFFSET_ALIGNMENTReady) { _GL_TEXTURE_BUFFER_OFFSET_ALIGNMENTContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT"); _GL_TEXTURE_BUFFER_OFFSET_ALIGNMENTReady = true; } return _GL_TEXTURE_BUFFER_OFFSET_ALIGNMENTContent; } }
        private static int _GL_TEXTURE_BUFFER_OFFSET_ALIGNMENTContent = default;
        private static bool _GL_TEXTURE_BUFFER_OFFSET_ALIGNMENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_TEXTURE_BUFFER_SIZE"/>
        /// </summary>
        public static int GL_TEXTURE_BUFFER_SIZE { get { if (!_GL_TEXTURE_BUFFER_SIZEReady) { _GL_TEXTURE_BUFFER_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_BUFFER_SIZE"); _GL_TEXTURE_BUFFER_SIZEReady = true; } return _GL_TEXTURE_BUFFER_SIZEContent; } }
        private static int _GL_TEXTURE_BUFFER_SIZEContent = default;
        private static bool _GL_TEXTURE_BUFFER_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_TEXTURE_CUBE_MAP_ARRAY"/>
        /// </summary>
        public static int GL_TEXTURE_CUBE_MAP_ARRAY { get { if (!_GL_TEXTURE_CUBE_MAP_ARRAYReady) { _GL_TEXTURE_CUBE_MAP_ARRAYContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_CUBE_MAP_ARRAY"); _GL_TEXTURE_CUBE_MAP_ARRAYReady = true; } return _GL_TEXTURE_CUBE_MAP_ARRAYContent; } }
        private static int _GL_TEXTURE_CUBE_MAP_ARRAYContent = default;
        private static bool _GL_TEXTURE_CUBE_MAP_ARRAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_TRIANGLE_STRIP_ADJACENCY"/>
        /// </summary>
        public static int GL_TRIANGLE_STRIP_ADJACENCY { get { if (!_GL_TRIANGLE_STRIP_ADJACENCYReady) { _GL_TRIANGLE_STRIP_ADJACENCYContent = SGetField<int>(LocalBridgeClazz, "GL_TRIANGLE_STRIP_ADJACENCY"); _GL_TRIANGLE_STRIP_ADJACENCYReady = true; } return _GL_TRIANGLE_STRIP_ADJACENCYContent; } }
        private static int _GL_TRIANGLE_STRIP_ADJACENCYContent = default;
        private static bool _GL_TRIANGLE_STRIP_ADJACENCYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_TRIANGLES_ADJACENCY"/>
        /// </summary>
        public static int GL_TRIANGLES_ADJACENCY { get { if (!_GL_TRIANGLES_ADJACENCYReady) { _GL_TRIANGLES_ADJACENCYContent = SGetField<int>(LocalBridgeClazz, "GL_TRIANGLES_ADJACENCY"); _GL_TRIANGLES_ADJACENCYReady = true; } return _GL_TRIANGLES_ADJACENCYContent; } }
        private static int _GL_TRIANGLES_ADJACENCYContent = default;
        private static bool _GL_TRIANGLES_ADJACENCYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_UNDEFINED_VERTEX"/>
        /// </summary>
        public static int GL_UNDEFINED_VERTEX { get { if (!_GL_UNDEFINED_VERTEXReady) { _GL_UNDEFINED_VERTEXContent = SGetField<int>(LocalBridgeClazz, "GL_UNDEFINED_VERTEX"); _GL_UNDEFINED_VERTEXReady = true; } return _GL_UNDEFINED_VERTEXContent; } }
        private static int _GL_UNDEFINED_VERTEXContent = default;
        private static bool _GL_UNDEFINED_VERTEXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_UNKNOWN_CONTEXT_RESET"/>
        /// </summary>
        public static int GL_UNKNOWN_CONTEXT_RESET { get { if (!_GL_UNKNOWN_CONTEXT_RESETReady) { _GL_UNKNOWN_CONTEXT_RESETContent = SGetField<int>(LocalBridgeClazz, "GL_UNKNOWN_CONTEXT_RESET"); _GL_UNKNOWN_CONTEXT_RESETReady = true; } return _GL_UNKNOWN_CONTEXT_RESETContent; } }
        private static int _GL_UNKNOWN_CONTEXT_RESETContent = default;
        private static bool _GL_UNKNOWN_CONTEXT_RESETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_UNSIGNED_INT_IMAGE_BUFFER"/>
        /// </summary>
        public static int GL_UNSIGNED_INT_IMAGE_BUFFER { get { if (!_GL_UNSIGNED_INT_IMAGE_BUFFERReady) { _GL_UNSIGNED_INT_IMAGE_BUFFERContent = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNED_INT_IMAGE_BUFFER"); _GL_UNSIGNED_INT_IMAGE_BUFFERReady = true; } return _GL_UNSIGNED_INT_IMAGE_BUFFERContent; } }
        private static int _GL_UNSIGNED_INT_IMAGE_BUFFERContent = default;
        private static bool _GL_UNSIGNED_INT_IMAGE_BUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY"/>
        /// </summary>
        public static int GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY { get { if (!_GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAYReady) { _GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAYContent = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY"); _GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAYReady = true; } return _GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAYContent; } }
        private static int _GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAYContent = default;
        private static bool _GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY"/>
        /// </summary>
        public static int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY { get { if (!_GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAYReady) { _GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAYContent = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY"); _GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAYReady = true; } return _GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAYContent; } }
        private static int _GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAYContent = default;
        private static bool _GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_UNSIGNED_INT_SAMPLER_BUFFER"/>
        /// </summary>
        public static int GL_UNSIGNED_INT_SAMPLER_BUFFER { get { if (!_GL_UNSIGNED_INT_SAMPLER_BUFFERReady) { _GL_UNSIGNED_INT_SAMPLER_BUFFERContent = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNED_INT_SAMPLER_BUFFER"); _GL_UNSIGNED_INT_SAMPLER_BUFFERReady = true; } return _GL_UNSIGNED_INT_SAMPLER_BUFFERContent; } }
        private static int _GL_UNSIGNED_INT_SAMPLER_BUFFERContent = default;
        private static bool _GL_UNSIGNED_INT_SAMPLER_BUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY"/>
        /// </summary>
        public static int GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY { get { if (!_GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAYReady) { _GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAYContent = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY"); _GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAYReady = true; } return _GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAYContent; } }
        private static int _GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAYContent = default;
        private static bool _GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#GL_VERTEX_ARRAY"/>
        /// </summary>
        public static int GL_VERTEX_ARRAY { get { if (!_GL_VERTEX_ARRAYReady) { _GL_VERTEX_ARRAYContent = SGetField<int>(LocalBridgeClazz, "GL_VERTEX_ARRAY"); _GL_VERTEX_ARRAYReady = true; } return _GL_VERTEX_ARRAYContent; } }
        private static int _GL_VERTEX_ARRAYContent = default;
        private static bool _GL_VERTEX_ARRAYReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glIsEnabledi(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool GlIsEnabledi(int arg0, int arg1)
        {
            return SExecute<bool>(LocalBridgeClazz, "glIsEnabledi", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glGetDebugMessageLog(int,int,int[],int,int[],int,int[],int,int[],int,int[],int,byte[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        /// <param name="arg8"><see cref="int"/></param>
        /// <param name="arg9"><see cref="int"/></param>
        /// <param name="arg10"><see cref="int"/></param>
        /// <param name="arg11"><see cref="int"/></param>
        /// <param name="arg12"><see cref="byte"/></param>
        /// <param name="arg13"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GlGetDebugMessageLog(int arg0, int arg1, int[] arg2, int arg3, int[] arg4, int arg5, int[] arg6, int arg7, int[] arg8, int arg9, int[] arg10, int arg11, byte[] arg12, int arg13)
        {
            return SExecute<int>(LocalBridgeClazz, "glGetDebugMessageLog", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glGetDebugMessageLog(int,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.ByteBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        /// <param name="arg3"><see cref="Java.Nio.IntBuffer"/></param>
        /// <param name="arg4"><see cref="Java.Nio.IntBuffer"/></param>
        /// <param name="arg5"><see cref="Java.Nio.IntBuffer"/></param>
        /// <param name="arg6"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GlGetDebugMessageLog(int arg0, Java.Nio.IntBuffer arg1, Java.Nio.IntBuffer arg2, Java.Nio.IntBuffer arg3, Java.Nio.IntBuffer arg4, Java.Nio.IntBuffer arg5, Java.Nio.ByteBuffer arg6)
        {
            return SExecute<int>(LocalBridgeClazz, "glGetDebugMessageLog", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glGetGraphicsResetStatus()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public static int GlGetGraphicsResetStatus()
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "glGetGraphicsResetStatus", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glGetObjectLabel(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String GlGetObjectLabel(int arg0, int arg1)
        {
            return SExecute<Java.Lang.String>(LocalBridgeClazz, "glGetObjectLabel", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glGetObjectPtrLabel(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String GlGetObjectPtrLabel(long arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "glGetObjectPtrLabel", "(J)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glGetDebugMessageLog(int,int[],int,int[],int,int[],int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        /// <param name="arg8"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String[] GlGetDebugMessageLog(int arg0, int[] arg1, int arg2, int[] arg3, int arg4, int[] arg5, int arg6, int[] arg7, int arg8)
        {
            return SExecuteArray<Java.Lang.String>(LocalBridgeClazz, "glGetDebugMessageLog", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glGetDebugMessageLog(int,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        /// <param name="arg3"><see cref="Java.Nio.IntBuffer"/></param>
        /// <param name="arg4"><see cref="Java.Nio.IntBuffer"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String[] GlGetDebugMessageLog(int arg0, Java.Nio.IntBuffer arg1, Java.Nio.IntBuffer arg2, Java.Nio.IntBuffer arg3, Java.Nio.IntBuffer arg4)
        {
            return SExecuteArray<Java.Lang.String>(LocalBridgeClazz, "glGetDebugMessageLog", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glGetPointerv(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="long"/></returns>
        public static long GlGetPointerv(int arg0)
        {
            return SExecuteWithSignature<long>(LocalBridgeClazz, "glGetPointerv", "(I)J", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glBlendBarrier()"/>
        /// </summary>
        public static void GlBlendBarrier()
        {
            SExecuteWithSignature(LocalBridgeClazz, "glBlendBarrier", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glBlendEquationi(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlBlendEquationi(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glBlendEquationi", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glBlendEquationSeparatei(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlBlendEquationSeparatei(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glBlendEquationSeparatei", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glBlendFunci(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlBlendFunci(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glBlendFunci", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glBlendFuncSeparatei(int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlBlendFuncSeparatei(int arg0, int arg1, int arg2, int arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glBlendFuncSeparatei", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glColorMaski(int,boolean,boolean,boolean,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <param name="arg4"><see cref="bool"/></param>
        public static void GlColorMaski(int arg0, bool arg1, bool arg2, bool arg3, bool arg4)
        {
            SExecute(LocalBridgeClazz, "glColorMaski", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glCopyImageSubData(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        /// <param name="arg8"><see cref="int"/></param>
        /// <param name="arg9"><see cref="int"/></param>
        /// <param name="arg10"><see cref="int"/></param>
        /// <param name="arg11"><see cref="int"/></param>
        /// <param name="arg12"><see cref="int"/></param>
        /// <param name="arg13"><see cref="int"/></param>
        /// <param name="arg14"><see cref="int"/></param>
        public static void GlCopyImageSubData(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10, int arg11, int arg12, int arg13, int arg14)
        {
            SExecute(LocalBridgeClazz, "glCopyImageSubData", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glDebugMessageCallback(android.opengl.GLES32.DebugProc)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Opengl.GLES32.DebugProc"/></param>
        public static void GlDebugMessageCallback(Android.Opengl.GLES32.DebugProc arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glDebugMessageCallback", "(Landroid/opengl/GLES32$DebugProc;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glDebugMessageControl(int,int,int,int,int[],int,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="bool"/></param>
        public static void GlDebugMessageControl(int arg0, int arg1, int arg2, int arg3, int[] arg4, int arg5, bool arg6)
        {
            SExecute(LocalBridgeClazz, "glDebugMessageControl", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glDebugMessageControl(int,int,int,int,java.nio.IntBuffer,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="Java.Nio.IntBuffer"/></param>
        /// <param name="arg5"><see cref="bool"/></param>
        public static void GlDebugMessageControl(int arg0, int arg1, int arg2, int arg3, Java.Nio.IntBuffer arg4, bool arg5)
        {
            SExecute(LocalBridgeClazz, "glDebugMessageControl", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glDebugMessageInsert(int,int,int,int,int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="Java.Lang.String"/></param>
        public static void GlDebugMessageInsert(int arg0, int arg1, int arg2, int arg3, int arg4, Java.Lang.String arg5)
        {
            SExecute(LocalBridgeClazz, "glDebugMessageInsert", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glDisablei(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlDisablei(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glDisablei", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glDrawElementsBaseVertex(int,int,int,java.nio.Buffer,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.Buffer"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlDrawElementsBaseVertex(int arg0, int arg1, int arg2, Java.Nio.Buffer arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glDrawElementsBaseVertex", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glDrawElementsInstancedBaseVertex(int,int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        public static void GlDrawElementsInstancedBaseVertex(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5)
        {
            SExecute(LocalBridgeClazz, "glDrawElementsInstancedBaseVertex", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glDrawElementsInstancedBaseVertex(int,int,int,java.nio.Buffer,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.Buffer"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        public static void GlDrawElementsInstancedBaseVertex(int arg0, int arg1, int arg2, Java.Nio.Buffer arg3, int arg4, int arg5)
        {
            SExecute(LocalBridgeClazz, "glDrawElementsInstancedBaseVertex", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glDrawRangeElementsBaseVertex(int,int,int,int,int,java.nio.Buffer,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="Java.Nio.Buffer"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        public static void GlDrawRangeElementsBaseVertex(int arg0, int arg1, int arg2, int arg3, int arg4, Java.Nio.Buffer arg5, int arg6)
        {
            SExecute(LocalBridgeClazz, "glDrawRangeElementsBaseVertex", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glEnablei(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlEnablei(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glEnablei", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glFramebufferTexture(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlFramebufferTexture(int arg0, int arg1, int arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glFramebufferTexture", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glGetnUniformfv(int,int,int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlGetnUniformfv(int arg0, int arg1, int arg2, float[] arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glGetnUniformfv", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glGetnUniformfv(int,int,int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlGetnUniformfv(int arg0, int arg1, int arg2, Java.Nio.FloatBuffer arg3)
        {
            SExecute(LocalBridgeClazz, "glGetnUniformfv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glGetnUniformiv(int,int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlGetnUniformiv(int arg0, int arg1, int arg2, int[] arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glGetnUniformiv", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glGetnUniformiv(int,int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetnUniformiv(int arg0, int arg1, int arg2, Java.Nio.IntBuffer arg3)
        {
            SExecute(LocalBridgeClazz, "glGetnUniformiv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glGetnUniformuiv(int,int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlGetnUniformuiv(int arg0, int arg1, int arg2, int[] arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glGetnUniformuiv", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glGetnUniformuiv(int,int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetnUniformuiv(int arg0, int arg1, int arg2, Java.Nio.IntBuffer arg3)
        {
            SExecute(LocalBridgeClazz, "glGetnUniformuiv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glGetSamplerParameterIiv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetSamplerParameterIiv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetSamplerParameterIiv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glGetSamplerParameterIiv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetSamplerParameterIiv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetSamplerParameterIiv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glGetSamplerParameterIuiv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetSamplerParameterIuiv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetSamplerParameterIuiv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glGetSamplerParameterIuiv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetSamplerParameterIuiv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetSamplerParameterIuiv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glGetTexParameterIiv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetTexParameterIiv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetTexParameterIiv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glGetTexParameterIiv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetTexParameterIiv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetTexParameterIiv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glGetTexParameterIuiv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetTexParameterIuiv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetTexParameterIuiv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glGetTexParameterIuiv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetTexParameterIuiv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetTexParameterIuiv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glMinSampleShading(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public static void GlMinSampleShading(float arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glMinSampleShading", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glObjectLabel(int,int,int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        public static void GlObjectLabel(int arg0, int arg1, int arg2, Java.Lang.String arg3)
        {
            SExecute(LocalBridgeClazz, "glObjectLabel", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glObjectPtrLabel(long,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        public static void GlObjectPtrLabel(long arg0, Java.Lang.String arg1)
        {
            SExecute(LocalBridgeClazz, "glObjectPtrLabel", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glPatchParameteri(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlPatchParameteri(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glPatchParameteri", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glPopDebugGroup()"/>
        /// </summary>
        public static void GlPopDebugGroup()
        {
            SExecuteWithSignature(LocalBridgeClazz, "glPopDebugGroup", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glPrimitiveBoundingBox(float,float,float,float,float,float,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        /// <param name="arg5"><see cref="float"/></param>
        /// <param name="arg6"><see cref="float"/></param>
        /// <param name="arg7"><see cref="float"/></param>
        public static void GlPrimitiveBoundingBox(float arg0, float arg1, float arg2, float arg3, float arg4, float arg5, float arg6, float arg7)
        {
            SExecute(LocalBridgeClazz, "glPrimitiveBoundingBox", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glPushDebugGroup(int,int,int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        public static void GlPushDebugGroup(int arg0, int arg1, int arg2, Java.Lang.String arg3)
        {
            SExecute(LocalBridgeClazz, "glPushDebugGroup", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glReadnPixels(int,int,int,int,int,int,int,java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="Java.Nio.Buffer"/></param>
        public static void GlReadnPixels(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, Java.Nio.Buffer arg7)
        {
            SExecute(LocalBridgeClazz, "glReadnPixels", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glSamplerParameterIiv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlSamplerParameterIiv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glSamplerParameterIiv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glSamplerParameterIiv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlSamplerParameterIiv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glSamplerParameterIiv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glSamplerParameterIuiv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlSamplerParameterIuiv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glSamplerParameterIuiv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glSamplerParameterIuiv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlSamplerParameterIuiv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glSamplerParameterIuiv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glTexBuffer(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlTexBuffer(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glTexBuffer", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glTexBufferRange(int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlTexBufferRange(int arg0, int arg1, int arg2, int arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glTexBufferRange", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glTexParameterIiv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlTexParameterIiv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glTexParameterIiv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glTexParameterIiv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlTexParameterIiv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glTexParameterIiv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glTexParameterIuiv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlTexParameterIuiv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glTexParameterIuiv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glTexParameterIuiv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlTexParameterIuiv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glTexParameterIuiv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES32.html#glTexStorage3DMultisample(int,int,int,int,int,int,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="bool"/></param>
        public static void GlTexStorage3DMultisample(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, bool arg6)
        {
            SExecute(LocalBridgeClazz, "glTexStorage3DMultisample", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes
        #region DebugProc
        public partial class DebugProc
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/opengl/GLES32.DebugProc.html#onMessage(int,int,int,int,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="int"/></param>
            /// <param name="arg4"><see cref="Java.Lang.String"/></param>
            public void OnMessage(int arg0, int arg1, int arg2, int arg3, Java.Lang.String arg4)
            {
                IExecute("onMessage", arg0, arg1, arg2, arg3, arg4);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Opengl
{
    #region EGL14 declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html"/>
    /// </summary>
    public partial class EGL14 : MASES.JCOBridge.C2JBridge.JVMBridgeBase<EGL14>
    {
        const string _bridgeClassName = "android.opengl.EGL14";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public EGL14() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public EGL14(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region EGL14 implementation
    public partial class EGL14
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_NO_CONTEXT"/>
        /// </summary>
        public static Android.Opengl.EGLContext EGL_NO_CONTEXT { get { return SGetField<Android.Opengl.EGLContext>(LocalBridgeClazz, "EGL_NO_CONTEXT"); } set { SSetField(LocalBridgeClazz, "EGL_NO_CONTEXT", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_NO_DISPLAY"/>
        /// </summary>
        public static Android.Opengl.EGLDisplay EGL_NO_DISPLAY { get { return SGetField<Android.Opengl.EGLDisplay>(LocalBridgeClazz, "EGL_NO_DISPLAY"); } set { SSetField(LocalBridgeClazz, "EGL_NO_DISPLAY", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_NO_SURFACE"/>
        /// </summary>
        public static Android.Opengl.EGLSurface EGL_NO_SURFACE { get { return SGetField<Android.Opengl.EGLSurface>(LocalBridgeClazz, "EGL_NO_SURFACE"); } set { SSetField(LocalBridgeClazz, "EGL_NO_SURFACE", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_ALPHA_MASK_SIZE"/>
        /// </summary>
        public static int EGL_ALPHA_MASK_SIZE { get { if (!_EGL_ALPHA_MASK_SIZEReady) { _EGL_ALPHA_MASK_SIZEContent = SGetField<int>(LocalBridgeClazz, "EGL_ALPHA_MASK_SIZE"); _EGL_ALPHA_MASK_SIZEReady = true; } return _EGL_ALPHA_MASK_SIZEContent; } }
        private static int _EGL_ALPHA_MASK_SIZEContent = default;
        private static bool _EGL_ALPHA_MASK_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_ALPHA_SIZE"/>
        /// </summary>
        public static int EGL_ALPHA_SIZE { get { if (!_EGL_ALPHA_SIZEReady) { _EGL_ALPHA_SIZEContent = SGetField<int>(LocalBridgeClazz, "EGL_ALPHA_SIZE"); _EGL_ALPHA_SIZEReady = true; } return _EGL_ALPHA_SIZEContent; } }
        private static int _EGL_ALPHA_SIZEContent = default;
        private static bool _EGL_ALPHA_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_BACK_BUFFER"/>
        /// </summary>
        public static int EGL_BACK_BUFFER { get { if (!_EGL_BACK_BUFFERReady) { _EGL_BACK_BUFFERContent = SGetField<int>(LocalBridgeClazz, "EGL_BACK_BUFFER"); _EGL_BACK_BUFFERReady = true; } return _EGL_BACK_BUFFERContent; } }
        private static int _EGL_BACK_BUFFERContent = default;
        private static bool _EGL_BACK_BUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_BAD_ACCESS"/>
        /// </summary>
        public static int EGL_BAD_ACCESS { get { if (!_EGL_BAD_ACCESSReady) { _EGL_BAD_ACCESSContent = SGetField<int>(LocalBridgeClazz, "EGL_BAD_ACCESS"); _EGL_BAD_ACCESSReady = true; } return _EGL_BAD_ACCESSContent; } }
        private static int _EGL_BAD_ACCESSContent = default;
        private static bool _EGL_BAD_ACCESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_BAD_ALLOC"/>
        /// </summary>
        public static int EGL_BAD_ALLOC { get { if (!_EGL_BAD_ALLOCReady) { _EGL_BAD_ALLOCContent = SGetField<int>(LocalBridgeClazz, "EGL_BAD_ALLOC"); _EGL_BAD_ALLOCReady = true; } return _EGL_BAD_ALLOCContent; } }
        private static int _EGL_BAD_ALLOCContent = default;
        private static bool _EGL_BAD_ALLOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_BAD_ATTRIBUTE"/>
        /// </summary>
        public static int EGL_BAD_ATTRIBUTE { get { if (!_EGL_BAD_ATTRIBUTEReady) { _EGL_BAD_ATTRIBUTEContent = SGetField<int>(LocalBridgeClazz, "EGL_BAD_ATTRIBUTE"); _EGL_BAD_ATTRIBUTEReady = true; } return _EGL_BAD_ATTRIBUTEContent; } }
        private static int _EGL_BAD_ATTRIBUTEContent = default;
        private static bool _EGL_BAD_ATTRIBUTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_BAD_CONFIG"/>
        /// </summary>
        public static int EGL_BAD_CONFIG { get { if (!_EGL_BAD_CONFIGReady) { _EGL_BAD_CONFIGContent = SGetField<int>(LocalBridgeClazz, "EGL_BAD_CONFIG"); _EGL_BAD_CONFIGReady = true; } return _EGL_BAD_CONFIGContent; } }
        private static int _EGL_BAD_CONFIGContent = default;
        private static bool _EGL_BAD_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_BAD_CONTEXT"/>
        /// </summary>
        public static int EGL_BAD_CONTEXT { get { if (!_EGL_BAD_CONTEXTReady) { _EGL_BAD_CONTEXTContent = SGetField<int>(LocalBridgeClazz, "EGL_BAD_CONTEXT"); _EGL_BAD_CONTEXTReady = true; } return _EGL_BAD_CONTEXTContent; } }
        private static int _EGL_BAD_CONTEXTContent = default;
        private static bool _EGL_BAD_CONTEXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_BAD_CURRENT_SURFACE"/>
        /// </summary>
        public static int EGL_BAD_CURRENT_SURFACE { get { if (!_EGL_BAD_CURRENT_SURFACEReady) { _EGL_BAD_CURRENT_SURFACEContent = SGetField<int>(LocalBridgeClazz, "EGL_BAD_CURRENT_SURFACE"); _EGL_BAD_CURRENT_SURFACEReady = true; } return _EGL_BAD_CURRENT_SURFACEContent; } }
        private static int _EGL_BAD_CURRENT_SURFACEContent = default;
        private static bool _EGL_BAD_CURRENT_SURFACEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_BAD_DISPLAY"/>
        /// </summary>
        public static int EGL_BAD_DISPLAY { get { if (!_EGL_BAD_DISPLAYReady) { _EGL_BAD_DISPLAYContent = SGetField<int>(LocalBridgeClazz, "EGL_BAD_DISPLAY"); _EGL_BAD_DISPLAYReady = true; } return _EGL_BAD_DISPLAYContent; } }
        private static int _EGL_BAD_DISPLAYContent = default;
        private static bool _EGL_BAD_DISPLAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_BAD_MATCH"/>
        /// </summary>
        public static int EGL_BAD_MATCH { get { if (!_EGL_BAD_MATCHReady) { _EGL_BAD_MATCHContent = SGetField<int>(LocalBridgeClazz, "EGL_BAD_MATCH"); _EGL_BAD_MATCHReady = true; } return _EGL_BAD_MATCHContent; } }
        private static int _EGL_BAD_MATCHContent = default;
        private static bool _EGL_BAD_MATCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_BAD_NATIVE_PIXMAP"/>
        /// </summary>
        public static int EGL_BAD_NATIVE_PIXMAP { get { if (!_EGL_BAD_NATIVE_PIXMAPReady) { _EGL_BAD_NATIVE_PIXMAPContent = SGetField<int>(LocalBridgeClazz, "EGL_BAD_NATIVE_PIXMAP"); _EGL_BAD_NATIVE_PIXMAPReady = true; } return _EGL_BAD_NATIVE_PIXMAPContent; } }
        private static int _EGL_BAD_NATIVE_PIXMAPContent = default;
        private static bool _EGL_BAD_NATIVE_PIXMAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_BAD_NATIVE_WINDOW"/>
        /// </summary>
        public static int EGL_BAD_NATIVE_WINDOW { get { if (!_EGL_BAD_NATIVE_WINDOWReady) { _EGL_BAD_NATIVE_WINDOWContent = SGetField<int>(LocalBridgeClazz, "EGL_BAD_NATIVE_WINDOW"); _EGL_BAD_NATIVE_WINDOWReady = true; } return _EGL_BAD_NATIVE_WINDOWContent; } }
        private static int _EGL_BAD_NATIVE_WINDOWContent = default;
        private static bool _EGL_BAD_NATIVE_WINDOWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_BAD_PARAMETER"/>
        /// </summary>
        public static int EGL_BAD_PARAMETER { get { if (!_EGL_BAD_PARAMETERReady) { _EGL_BAD_PARAMETERContent = SGetField<int>(LocalBridgeClazz, "EGL_BAD_PARAMETER"); _EGL_BAD_PARAMETERReady = true; } return _EGL_BAD_PARAMETERContent; } }
        private static int _EGL_BAD_PARAMETERContent = default;
        private static bool _EGL_BAD_PARAMETERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_BAD_SURFACE"/>
        /// </summary>
        public static int EGL_BAD_SURFACE { get { if (!_EGL_BAD_SURFACEReady) { _EGL_BAD_SURFACEContent = SGetField<int>(LocalBridgeClazz, "EGL_BAD_SURFACE"); _EGL_BAD_SURFACEReady = true; } return _EGL_BAD_SURFACEContent; } }
        private static int _EGL_BAD_SURFACEContent = default;
        private static bool _EGL_BAD_SURFACEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_BIND_TO_TEXTURE_RGB"/>
        /// </summary>
        public static int EGL_BIND_TO_TEXTURE_RGB { get { if (!_EGL_BIND_TO_TEXTURE_RGBReady) { _EGL_BIND_TO_TEXTURE_RGBContent = SGetField<int>(LocalBridgeClazz, "EGL_BIND_TO_TEXTURE_RGB"); _EGL_BIND_TO_TEXTURE_RGBReady = true; } return _EGL_BIND_TO_TEXTURE_RGBContent; } }
        private static int _EGL_BIND_TO_TEXTURE_RGBContent = default;
        private static bool _EGL_BIND_TO_TEXTURE_RGBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_BIND_TO_TEXTURE_RGBA"/>
        /// </summary>
        public static int EGL_BIND_TO_TEXTURE_RGBA { get { if (!_EGL_BIND_TO_TEXTURE_RGBAReady) { _EGL_BIND_TO_TEXTURE_RGBAContent = SGetField<int>(LocalBridgeClazz, "EGL_BIND_TO_TEXTURE_RGBA"); _EGL_BIND_TO_TEXTURE_RGBAReady = true; } return _EGL_BIND_TO_TEXTURE_RGBAContent; } }
        private static int _EGL_BIND_TO_TEXTURE_RGBAContent = default;
        private static bool _EGL_BIND_TO_TEXTURE_RGBAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_BLUE_SIZE"/>
        /// </summary>
        public static int EGL_BLUE_SIZE { get { if (!_EGL_BLUE_SIZEReady) { _EGL_BLUE_SIZEContent = SGetField<int>(LocalBridgeClazz, "EGL_BLUE_SIZE"); _EGL_BLUE_SIZEReady = true; } return _EGL_BLUE_SIZEContent; } }
        private static int _EGL_BLUE_SIZEContent = default;
        private static bool _EGL_BLUE_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_BUFFER_DESTROYED"/>
        /// </summary>
        public static int EGL_BUFFER_DESTROYED { get { if (!_EGL_BUFFER_DESTROYEDReady) { _EGL_BUFFER_DESTROYEDContent = SGetField<int>(LocalBridgeClazz, "EGL_BUFFER_DESTROYED"); _EGL_BUFFER_DESTROYEDReady = true; } return _EGL_BUFFER_DESTROYEDContent; } }
        private static int _EGL_BUFFER_DESTROYEDContent = default;
        private static bool _EGL_BUFFER_DESTROYEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_BUFFER_PRESERVED"/>
        /// </summary>
        public static int EGL_BUFFER_PRESERVED { get { if (!_EGL_BUFFER_PRESERVEDReady) { _EGL_BUFFER_PRESERVEDContent = SGetField<int>(LocalBridgeClazz, "EGL_BUFFER_PRESERVED"); _EGL_BUFFER_PRESERVEDReady = true; } return _EGL_BUFFER_PRESERVEDContent; } }
        private static int _EGL_BUFFER_PRESERVEDContent = default;
        private static bool _EGL_BUFFER_PRESERVEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_BUFFER_SIZE"/>
        /// </summary>
        public static int EGL_BUFFER_SIZE { get { if (!_EGL_BUFFER_SIZEReady) { _EGL_BUFFER_SIZEContent = SGetField<int>(LocalBridgeClazz, "EGL_BUFFER_SIZE"); _EGL_BUFFER_SIZEReady = true; } return _EGL_BUFFER_SIZEContent; } }
        private static int _EGL_BUFFER_SIZEContent = default;
        private static bool _EGL_BUFFER_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_CLIENT_APIS"/>
        /// </summary>
        public static int EGL_CLIENT_APIS { get { if (!_EGL_CLIENT_APISReady) { _EGL_CLIENT_APISContent = SGetField<int>(LocalBridgeClazz, "EGL_CLIENT_APIS"); _EGL_CLIENT_APISReady = true; } return _EGL_CLIENT_APISContent; } }
        private static int _EGL_CLIENT_APISContent = default;
        private static bool _EGL_CLIENT_APISReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_COLOR_BUFFER_TYPE"/>
        /// </summary>
        public static int EGL_COLOR_BUFFER_TYPE { get { if (!_EGL_COLOR_BUFFER_TYPEReady) { _EGL_COLOR_BUFFER_TYPEContent = SGetField<int>(LocalBridgeClazz, "EGL_COLOR_BUFFER_TYPE"); _EGL_COLOR_BUFFER_TYPEReady = true; } return _EGL_COLOR_BUFFER_TYPEContent; } }
        private static int _EGL_COLOR_BUFFER_TYPEContent = default;
        private static bool _EGL_COLOR_BUFFER_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_CONFIG_CAVEAT"/>
        /// </summary>
        public static int EGL_CONFIG_CAVEAT { get { if (!_EGL_CONFIG_CAVEATReady) { _EGL_CONFIG_CAVEATContent = SGetField<int>(LocalBridgeClazz, "EGL_CONFIG_CAVEAT"); _EGL_CONFIG_CAVEATReady = true; } return _EGL_CONFIG_CAVEATContent; } }
        private static int _EGL_CONFIG_CAVEATContent = default;
        private static bool _EGL_CONFIG_CAVEATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_CONFIG_ID"/>
        /// </summary>
        public static int EGL_CONFIG_ID { get { if (!_EGL_CONFIG_IDReady) { _EGL_CONFIG_IDContent = SGetField<int>(LocalBridgeClazz, "EGL_CONFIG_ID"); _EGL_CONFIG_IDReady = true; } return _EGL_CONFIG_IDContent; } }
        private static int _EGL_CONFIG_IDContent = default;
        private static bool _EGL_CONFIG_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_CONFORMANT"/>
        /// </summary>
        public static int EGL_CONFORMANT { get { if (!_EGL_CONFORMANTReady) { _EGL_CONFORMANTContent = SGetField<int>(LocalBridgeClazz, "EGL_CONFORMANT"); _EGL_CONFORMANTReady = true; } return _EGL_CONFORMANTContent; } }
        private static int _EGL_CONFORMANTContent = default;
        private static bool _EGL_CONFORMANTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_CONTEXT_CLIENT_TYPE"/>
        /// </summary>
        public static int EGL_CONTEXT_CLIENT_TYPE { get { if (!_EGL_CONTEXT_CLIENT_TYPEReady) { _EGL_CONTEXT_CLIENT_TYPEContent = SGetField<int>(LocalBridgeClazz, "EGL_CONTEXT_CLIENT_TYPE"); _EGL_CONTEXT_CLIENT_TYPEReady = true; } return _EGL_CONTEXT_CLIENT_TYPEContent; } }
        private static int _EGL_CONTEXT_CLIENT_TYPEContent = default;
        private static bool _EGL_CONTEXT_CLIENT_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_CONTEXT_CLIENT_VERSION"/>
        /// </summary>
        public static int EGL_CONTEXT_CLIENT_VERSION { get { if (!_EGL_CONTEXT_CLIENT_VERSIONReady) { _EGL_CONTEXT_CLIENT_VERSIONContent = SGetField<int>(LocalBridgeClazz, "EGL_CONTEXT_CLIENT_VERSION"); _EGL_CONTEXT_CLIENT_VERSIONReady = true; } return _EGL_CONTEXT_CLIENT_VERSIONContent; } }
        private static int _EGL_CONTEXT_CLIENT_VERSIONContent = default;
        private static bool _EGL_CONTEXT_CLIENT_VERSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_CONTEXT_LOST"/>
        /// </summary>
        public static int EGL_CONTEXT_LOST { get { if (!_EGL_CONTEXT_LOSTReady) { _EGL_CONTEXT_LOSTContent = SGetField<int>(LocalBridgeClazz, "EGL_CONTEXT_LOST"); _EGL_CONTEXT_LOSTReady = true; } return _EGL_CONTEXT_LOSTContent; } }
        private static int _EGL_CONTEXT_LOSTContent = default;
        private static bool _EGL_CONTEXT_LOSTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_CORE_NATIVE_ENGINE"/>
        /// </summary>
        public static int EGL_CORE_NATIVE_ENGINE { get { if (!_EGL_CORE_NATIVE_ENGINEReady) { _EGL_CORE_NATIVE_ENGINEContent = SGetField<int>(LocalBridgeClazz, "EGL_CORE_NATIVE_ENGINE"); _EGL_CORE_NATIVE_ENGINEReady = true; } return _EGL_CORE_NATIVE_ENGINEContent; } }
        private static int _EGL_CORE_NATIVE_ENGINEContent = default;
        private static bool _EGL_CORE_NATIVE_ENGINEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_DEFAULT_DISPLAY"/>
        /// </summary>
        public static int EGL_DEFAULT_DISPLAY { get { if (!_EGL_DEFAULT_DISPLAYReady) { _EGL_DEFAULT_DISPLAYContent = SGetField<int>(LocalBridgeClazz, "EGL_DEFAULT_DISPLAY"); _EGL_DEFAULT_DISPLAYReady = true; } return _EGL_DEFAULT_DISPLAYContent; } }
        private static int _EGL_DEFAULT_DISPLAYContent = default;
        private static bool _EGL_DEFAULT_DISPLAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_DEPTH_SIZE"/>
        /// </summary>
        public static int EGL_DEPTH_SIZE { get { if (!_EGL_DEPTH_SIZEReady) { _EGL_DEPTH_SIZEContent = SGetField<int>(LocalBridgeClazz, "EGL_DEPTH_SIZE"); _EGL_DEPTH_SIZEReady = true; } return _EGL_DEPTH_SIZEContent; } }
        private static int _EGL_DEPTH_SIZEContent = default;
        private static bool _EGL_DEPTH_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_DISPLAY_SCALING"/>
        /// </summary>
        public static int EGL_DISPLAY_SCALING { get { if (!_EGL_DISPLAY_SCALINGReady) { _EGL_DISPLAY_SCALINGContent = SGetField<int>(LocalBridgeClazz, "EGL_DISPLAY_SCALING"); _EGL_DISPLAY_SCALINGReady = true; } return _EGL_DISPLAY_SCALINGContent; } }
        private static int _EGL_DISPLAY_SCALINGContent = default;
        private static bool _EGL_DISPLAY_SCALINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_DRAW"/>
        /// </summary>
        public static int EGL_DRAW { get { if (!_EGL_DRAWReady) { _EGL_DRAWContent = SGetField<int>(LocalBridgeClazz, "EGL_DRAW"); _EGL_DRAWReady = true; } return _EGL_DRAWContent; } }
        private static int _EGL_DRAWContent = default;
        private static bool _EGL_DRAWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_EXTENSIONS"/>
        /// </summary>
        public static int EGL_EXTENSIONS { get { if (!_EGL_EXTENSIONSReady) { _EGL_EXTENSIONSContent = SGetField<int>(LocalBridgeClazz, "EGL_EXTENSIONS"); _EGL_EXTENSIONSReady = true; } return _EGL_EXTENSIONSContent; } }
        private static int _EGL_EXTENSIONSContent = default;
        private static bool _EGL_EXTENSIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_FALSE"/>
        /// </summary>
        public static int EGL_FALSE { get { if (!_EGL_FALSEReady) { _EGL_FALSEContent = SGetField<int>(LocalBridgeClazz, "EGL_FALSE"); _EGL_FALSEReady = true; } return _EGL_FALSEContent; } }
        private static int _EGL_FALSEContent = default;
        private static bool _EGL_FALSEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_GREEN_SIZE"/>
        /// </summary>
        public static int EGL_GREEN_SIZE { get { if (!_EGL_GREEN_SIZEReady) { _EGL_GREEN_SIZEContent = SGetField<int>(LocalBridgeClazz, "EGL_GREEN_SIZE"); _EGL_GREEN_SIZEReady = true; } return _EGL_GREEN_SIZEContent; } }
        private static int _EGL_GREEN_SIZEContent = default;
        private static bool _EGL_GREEN_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_HEIGHT"/>
        /// </summary>
        public static int EGL_HEIGHT { get { if (!_EGL_HEIGHTReady) { _EGL_HEIGHTContent = SGetField<int>(LocalBridgeClazz, "EGL_HEIGHT"); _EGL_HEIGHTReady = true; } return _EGL_HEIGHTContent; } }
        private static int _EGL_HEIGHTContent = default;
        private static bool _EGL_HEIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_HORIZONTAL_RESOLUTION"/>
        /// </summary>
        public static int EGL_HORIZONTAL_RESOLUTION { get { if (!_EGL_HORIZONTAL_RESOLUTIONReady) { _EGL_HORIZONTAL_RESOLUTIONContent = SGetField<int>(LocalBridgeClazz, "EGL_HORIZONTAL_RESOLUTION"); _EGL_HORIZONTAL_RESOLUTIONReady = true; } return _EGL_HORIZONTAL_RESOLUTIONContent; } }
        private static int _EGL_HORIZONTAL_RESOLUTIONContent = default;
        private static bool _EGL_HORIZONTAL_RESOLUTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_LARGEST_PBUFFER"/>
        /// </summary>
        public static int EGL_LARGEST_PBUFFER { get { if (!_EGL_LARGEST_PBUFFERReady) { _EGL_LARGEST_PBUFFERContent = SGetField<int>(LocalBridgeClazz, "EGL_LARGEST_PBUFFER"); _EGL_LARGEST_PBUFFERReady = true; } return _EGL_LARGEST_PBUFFERContent; } }
        private static int _EGL_LARGEST_PBUFFERContent = default;
        private static bool _EGL_LARGEST_PBUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_LEVEL"/>
        /// </summary>
        public static int EGL_LEVEL { get { if (!_EGL_LEVELReady) { _EGL_LEVELContent = SGetField<int>(LocalBridgeClazz, "EGL_LEVEL"); _EGL_LEVELReady = true; } return _EGL_LEVELContent; } }
        private static int _EGL_LEVELContent = default;
        private static bool _EGL_LEVELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_LUMINANCE_BUFFER"/>
        /// </summary>
        public static int EGL_LUMINANCE_BUFFER { get { if (!_EGL_LUMINANCE_BUFFERReady) { _EGL_LUMINANCE_BUFFERContent = SGetField<int>(LocalBridgeClazz, "EGL_LUMINANCE_BUFFER"); _EGL_LUMINANCE_BUFFERReady = true; } return _EGL_LUMINANCE_BUFFERContent; } }
        private static int _EGL_LUMINANCE_BUFFERContent = default;
        private static bool _EGL_LUMINANCE_BUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_LUMINANCE_SIZE"/>
        /// </summary>
        public static int EGL_LUMINANCE_SIZE { get { if (!_EGL_LUMINANCE_SIZEReady) { _EGL_LUMINANCE_SIZEContent = SGetField<int>(LocalBridgeClazz, "EGL_LUMINANCE_SIZE"); _EGL_LUMINANCE_SIZEReady = true; } return _EGL_LUMINANCE_SIZEContent; } }
        private static int _EGL_LUMINANCE_SIZEContent = default;
        private static bool _EGL_LUMINANCE_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_MATCH_NATIVE_PIXMAP"/>
        /// </summary>
        public static int EGL_MATCH_NATIVE_PIXMAP { get { if (!_EGL_MATCH_NATIVE_PIXMAPReady) { _EGL_MATCH_NATIVE_PIXMAPContent = SGetField<int>(LocalBridgeClazz, "EGL_MATCH_NATIVE_PIXMAP"); _EGL_MATCH_NATIVE_PIXMAPReady = true; } return _EGL_MATCH_NATIVE_PIXMAPContent; } }
        private static int _EGL_MATCH_NATIVE_PIXMAPContent = default;
        private static bool _EGL_MATCH_NATIVE_PIXMAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_MAX_PBUFFER_HEIGHT"/>
        /// </summary>
        public static int EGL_MAX_PBUFFER_HEIGHT { get { if (!_EGL_MAX_PBUFFER_HEIGHTReady) { _EGL_MAX_PBUFFER_HEIGHTContent = SGetField<int>(LocalBridgeClazz, "EGL_MAX_PBUFFER_HEIGHT"); _EGL_MAX_PBUFFER_HEIGHTReady = true; } return _EGL_MAX_PBUFFER_HEIGHTContent; } }
        private static int _EGL_MAX_PBUFFER_HEIGHTContent = default;
        private static bool _EGL_MAX_PBUFFER_HEIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_MAX_PBUFFER_PIXELS"/>
        /// </summary>
        public static int EGL_MAX_PBUFFER_PIXELS { get { if (!_EGL_MAX_PBUFFER_PIXELSReady) { _EGL_MAX_PBUFFER_PIXELSContent = SGetField<int>(LocalBridgeClazz, "EGL_MAX_PBUFFER_PIXELS"); _EGL_MAX_PBUFFER_PIXELSReady = true; } return _EGL_MAX_PBUFFER_PIXELSContent; } }
        private static int _EGL_MAX_PBUFFER_PIXELSContent = default;
        private static bool _EGL_MAX_PBUFFER_PIXELSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_MAX_PBUFFER_WIDTH"/>
        /// </summary>
        public static int EGL_MAX_PBUFFER_WIDTH { get { if (!_EGL_MAX_PBUFFER_WIDTHReady) { _EGL_MAX_PBUFFER_WIDTHContent = SGetField<int>(LocalBridgeClazz, "EGL_MAX_PBUFFER_WIDTH"); _EGL_MAX_PBUFFER_WIDTHReady = true; } return _EGL_MAX_PBUFFER_WIDTHContent; } }
        private static int _EGL_MAX_PBUFFER_WIDTHContent = default;
        private static bool _EGL_MAX_PBUFFER_WIDTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_MAX_SWAP_INTERVAL"/>
        /// </summary>
        public static int EGL_MAX_SWAP_INTERVAL { get { if (!_EGL_MAX_SWAP_INTERVALReady) { _EGL_MAX_SWAP_INTERVALContent = SGetField<int>(LocalBridgeClazz, "EGL_MAX_SWAP_INTERVAL"); _EGL_MAX_SWAP_INTERVALReady = true; } return _EGL_MAX_SWAP_INTERVALContent; } }
        private static int _EGL_MAX_SWAP_INTERVALContent = default;
        private static bool _EGL_MAX_SWAP_INTERVALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_MIN_SWAP_INTERVAL"/>
        /// </summary>
        public static int EGL_MIN_SWAP_INTERVAL { get { if (!_EGL_MIN_SWAP_INTERVALReady) { _EGL_MIN_SWAP_INTERVALContent = SGetField<int>(LocalBridgeClazz, "EGL_MIN_SWAP_INTERVAL"); _EGL_MIN_SWAP_INTERVALReady = true; } return _EGL_MIN_SWAP_INTERVALContent; } }
        private static int _EGL_MIN_SWAP_INTERVALContent = default;
        private static bool _EGL_MIN_SWAP_INTERVALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_MIPMAP_LEVEL"/>
        /// </summary>
        public static int EGL_MIPMAP_LEVEL { get { if (!_EGL_MIPMAP_LEVELReady) { _EGL_MIPMAP_LEVELContent = SGetField<int>(LocalBridgeClazz, "EGL_MIPMAP_LEVEL"); _EGL_MIPMAP_LEVELReady = true; } return _EGL_MIPMAP_LEVELContent; } }
        private static int _EGL_MIPMAP_LEVELContent = default;
        private static bool _EGL_MIPMAP_LEVELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_MIPMAP_TEXTURE"/>
        /// </summary>
        public static int EGL_MIPMAP_TEXTURE { get { if (!_EGL_MIPMAP_TEXTUREReady) { _EGL_MIPMAP_TEXTUREContent = SGetField<int>(LocalBridgeClazz, "EGL_MIPMAP_TEXTURE"); _EGL_MIPMAP_TEXTUREReady = true; } return _EGL_MIPMAP_TEXTUREContent; } }
        private static int _EGL_MIPMAP_TEXTUREContent = default;
        private static bool _EGL_MIPMAP_TEXTUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_MULTISAMPLE_RESOLVE"/>
        /// </summary>
        public static int EGL_MULTISAMPLE_RESOLVE { get { if (!_EGL_MULTISAMPLE_RESOLVEReady) { _EGL_MULTISAMPLE_RESOLVEContent = SGetField<int>(LocalBridgeClazz, "EGL_MULTISAMPLE_RESOLVE"); _EGL_MULTISAMPLE_RESOLVEReady = true; } return _EGL_MULTISAMPLE_RESOLVEContent; } }
        private static int _EGL_MULTISAMPLE_RESOLVEContent = default;
        private static bool _EGL_MULTISAMPLE_RESOLVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_MULTISAMPLE_RESOLVE_BOX"/>
        /// </summary>
        public static int EGL_MULTISAMPLE_RESOLVE_BOX { get { if (!_EGL_MULTISAMPLE_RESOLVE_BOXReady) { _EGL_MULTISAMPLE_RESOLVE_BOXContent = SGetField<int>(LocalBridgeClazz, "EGL_MULTISAMPLE_RESOLVE_BOX"); _EGL_MULTISAMPLE_RESOLVE_BOXReady = true; } return _EGL_MULTISAMPLE_RESOLVE_BOXContent; } }
        private static int _EGL_MULTISAMPLE_RESOLVE_BOXContent = default;
        private static bool _EGL_MULTISAMPLE_RESOLVE_BOXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_MULTISAMPLE_RESOLVE_BOX_BIT"/>
        /// </summary>
        public static int EGL_MULTISAMPLE_RESOLVE_BOX_BIT { get { if (!_EGL_MULTISAMPLE_RESOLVE_BOX_BITReady) { _EGL_MULTISAMPLE_RESOLVE_BOX_BITContent = SGetField<int>(LocalBridgeClazz, "EGL_MULTISAMPLE_RESOLVE_BOX_BIT"); _EGL_MULTISAMPLE_RESOLVE_BOX_BITReady = true; } return _EGL_MULTISAMPLE_RESOLVE_BOX_BITContent; } }
        private static int _EGL_MULTISAMPLE_RESOLVE_BOX_BITContent = default;
        private static bool _EGL_MULTISAMPLE_RESOLVE_BOX_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_MULTISAMPLE_RESOLVE_DEFAULT"/>
        /// </summary>
        public static int EGL_MULTISAMPLE_RESOLVE_DEFAULT { get { if (!_EGL_MULTISAMPLE_RESOLVE_DEFAULTReady) { _EGL_MULTISAMPLE_RESOLVE_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "EGL_MULTISAMPLE_RESOLVE_DEFAULT"); _EGL_MULTISAMPLE_RESOLVE_DEFAULTReady = true; } return _EGL_MULTISAMPLE_RESOLVE_DEFAULTContent; } }
        private static int _EGL_MULTISAMPLE_RESOLVE_DEFAULTContent = default;
        private static bool _EGL_MULTISAMPLE_RESOLVE_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_NATIVE_RENDERABLE"/>
        /// </summary>
        public static int EGL_NATIVE_RENDERABLE { get { if (!_EGL_NATIVE_RENDERABLEReady) { _EGL_NATIVE_RENDERABLEContent = SGetField<int>(LocalBridgeClazz, "EGL_NATIVE_RENDERABLE"); _EGL_NATIVE_RENDERABLEReady = true; } return _EGL_NATIVE_RENDERABLEContent; } }
        private static int _EGL_NATIVE_RENDERABLEContent = default;
        private static bool _EGL_NATIVE_RENDERABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_NATIVE_VISUAL_ID"/>
        /// </summary>
        public static int EGL_NATIVE_VISUAL_ID { get { if (!_EGL_NATIVE_VISUAL_IDReady) { _EGL_NATIVE_VISUAL_IDContent = SGetField<int>(LocalBridgeClazz, "EGL_NATIVE_VISUAL_ID"); _EGL_NATIVE_VISUAL_IDReady = true; } return _EGL_NATIVE_VISUAL_IDContent; } }
        private static int _EGL_NATIVE_VISUAL_IDContent = default;
        private static bool _EGL_NATIVE_VISUAL_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_NATIVE_VISUAL_TYPE"/>
        /// </summary>
        public static int EGL_NATIVE_VISUAL_TYPE { get { if (!_EGL_NATIVE_VISUAL_TYPEReady) { _EGL_NATIVE_VISUAL_TYPEContent = SGetField<int>(LocalBridgeClazz, "EGL_NATIVE_VISUAL_TYPE"); _EGL_NATIVE_VISUAL_TYPEReady = true; } return _EGL_NATIVE_VISUAL_TYPEContent; } }
        private static int _EGL_NATIVE_VISUAL_TYPEContent = default;
        private static bool _EGL_NATIVE_VISUAL_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_NO_TEXTURE"/>
        /// </summary>
        public static int EGL_NO_TEXTURE { get { if (!_EGL_NO_TEXTUREReady) { _EGL_NO_TEXTUREContent = SGetField<int>(LocalBridgeClazz, "EGL_NO_TEXTURE"); _EGL_NO_TEXTUREReady = true; } return _EGL_NO_TEXTUREContent; } }
        private static int _EGL_NO_TEXTUREContent = default;
        private static bool _EGL_NO_TEXTUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_NON_CONFORMANT_CONFIG"/>
        /// </summary>
        public static int EGL_NON_CONFORMANT_CONFIG { get { if (!_EGL_NON_CONFORMANT_CONFIGReady) { _EGL_NON_CONFORMANT_CONFIGContent = SGetField<int>(LocalBridgeClazz, "EGL_NON_CONFORMANT_CONFIG"); _EGL_NON_CONFORMANT_CONFIGReady = true; } return _EGL_NON_CONFORMANT_CONFIGContent; } }
        private static int _EGL_NON_CONFORMANT_CONFIGContent = default;
        private static bool _EGL_NON_CONFORMANT_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_NONE"/>
        /// </summary>
        public static int EGL_NONE { get { if (!_EGL_NONEReady) { _EGL_NONEContent = SGetField<int>(LocalBridgeClazz, "EGL_NONE"); _EGL_NONEReady = true; } return _EGL_NONEContent; } }
        private static int _EGL_NONEContent = default;
        private static bool _EGL_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_NOT_INITIALIZED"/>
        /// </summary>
        public static int EGL_NOT_INITIALIZED { get { if (!_EGL_NOT_INITIALIZEDReady) { _EGL_NOT_INITIALIZEDContent = SGetField<int>(LocalBridgeClazz, "EGL_NOT_INITIALIZED"); _EGL_NOT_INITIALIZEDReady = true; } return _EGL_NOT_INITIALIZEDContent; } }
        private static int _EGL_NOT_INITIALIZEDContent = default;
        private static bool _EGL_NOT_INITIALIZEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_OPENGL_API"/>
        /// </summary>
        public static int EGL_OPENGL_API { get { if (!_EGL_OPENGL_APIReady) { _EGL_OPENGL_APIContent = SGetField<int>(LocalBridgeClazz, "EGL_OPENGL_API"); _EGL_OPENGL_APIReady = true; } return _EGL_OPENGL_APIContent; } }
        private static int _EGL_OPENGL_APIContent = default;
        private static bool _EGL_OPENGL_APIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_OPENGL_BIT"/>
        /// </summary>
        public static int EGL_OPENGL_BIT { get { if (!_EGL_OPENGL_BITReady) { _EGL_OPENGL_BITContent = SGetField<int>(LocalBridgeClazz, "EGL_OPENGL_BIT"); _EGL_OPENGL_BITReady = true; } return _EGL_OPENGL_BITContent; } }
        private static int _EGL_OPENGL_BITContent = default;
        private static bool _EGL_OPENGL_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_OPENGL_ES_API"/>
        /// </summary>
        public static int EGL_OPENGL_ES_API { get { if (!_EGL_OPENGL_ES_APIReady) { _EGL_OPENGL_ES_APIContent = SGetField<int>(LocalBridgeClazz, "EGL_OPENGL_ES_API"); _EGL_OPENGL_ES_APIReady = true; } return _EGL_OPENGL_ES_APIContent; } }
        private static int _EGL_OPENGL_ES_APIContent = default;
        private static bool _EGL_OPENGL_ES_APIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_OPENGL_ES_BIT"/>
        /// </summary>
        public static int EGL_OPENGL_ES_BIT { get { if (!_EGL_OPENGL_ES_BITReady) { _EGL_OPENGL_ES_BITContent = SGetField<int>(LocalBridgeClazz, "EGL_OPENGL_ES_BIT"); _EGL_OPENGL_ES_BITReady = true; } return _EGL_OPENGL_ES_BITContent; } }
        private static int _EGL_OPENGL_ES_BITContent = default;
        private static bool _EGL_OPENGL_ES_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_OPENGL_ES2_BIT"/>
        /// </summary>
        public static int EGL_OPENGL_ES2_BIT { get { if (!_EGL_OPENGL_ES2_BITReady) { _EGL_OPENGL_ES2_BITContent = SGetField<int>(LocalBridgeClazz, "EGL_OPENGL_ES2_BIT"); _EGL_OPENGL_ES2_BITReady = true; } return _EGL_OPENGL_ES2_BITContent; } }
        private static int _EGL_OPENGL_ES2_BITContent = default;
        private static bool _EGL_OPENGL_ES2_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_OPENVG_API"/>
        /// </summary>
        public static int EGL_OPENVG_API { get { if (!_EGL_OPENVG_APIReady) { _EGL_OPENVG_APIContent = SGetField<int>(LocalBridgeClazz, "EGL_OPENVG_API"); _EGL_OPENVG_APIReady = true; } return _EGL_OPENVG_APIContent; } }
        private static int _EGL_OPENVG_APIContent = default;
        private static bool _EGL_OPENVG_APIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_OPENVG_BIT"/>
        /// </summary>
        public static int EGL_OPENVG_BIT { get { if (!_EGL_OPENVG_BITReady) { _EGL_OPENVG_BITContent = SGetField<int>(LocalBridgeClazz, "EGL_OPENVG_BIT"); _EGL_OPENVG_BITReady = true; } return _EGL_OPENVG_BITContent; } }
        private static int _EGL_OPENVG_BITContent = default;
        private static bool _EGL_OPENVG_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_OPENVG_IMAGE"/>
        /// </summary>
        public static int EGL_OPENVG_IMAGE { get { if (!_EGL_OPENVG_IMAGEReady) { _EGL_OPENVG_IMAGEContent = SGetField<int>(LocalBridgeClazz, "EGL_OPENVG_IMAGE"); _EGL_OPENVG_IMAGEReady = true; } return _EGL_OPENVG_IMAGEContent; } }
        private static int _EGL_OPENVG_IMAGEContent = default;
        private static bool _EGL_OPENVG_IMAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_PBUFFER_BIT"/>
        /// </summary>
        public static int EGL_PBUFFER_BIT { get { if (!_EGL_PBUFFER_BITReady) { _EGL_PBUFFER_BITContent = SGetField<int>(LocalBridgeClazz, "EGL_PBUFFER_BIT"); _EGL_PBUFFER_BITReady = true; } return _EGL_PBUFFER_BITContent; } }
        private static int _EGL_PBUFFER_BITContent = default;
        private static bool _EGL_PBUFFER_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_PIXEL_ASPECT_RATIO"/>
        /// </summary>
        public static int EGL_PIXEL_ASPECT_RATIO { get { if (!_EGL_PIXEL_ASPECT_RATIOReady) { _EGL_PIXEL_ASPECT_RATIOContent = SGetField<int>(LocalBridgeClazz, "EGL_PIXEL_ASPECT_RATIO"); _EGL_PIXEL_ASPECT_RATIOReady = true; } return _EGL_PIXEL_ASPECT_RATIOContent; } }
        private static int _EGL_PIXEL_ASPECT_RATIOContent = default;
        private static bool _EGL_PIXEL_ASPECT_RATIOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_PIXMAP_BIT"/>
        /// </summary>
        public static int EGL_PIXMAP_BIT { get { if (!_EGL_PIXMAP_BITReady) { _EGL_PIXMAP_BITContent = SGetField<int>(LocalBridgeClazz, "EGL_PIXMAP_BIT"); _EGL_PIXMAP_BITReady = true; } return _EGL_PIXMAP_BITContent; } }
        private static int _EGL_PIXMAP_BITContent = default;
        private static bool _EGL_PIXMAP_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_READ"/>
        /// </summary>
        public static int EGL_READ { get { if (!_EGL_READReady) { _EGL_READContent = SGetField<int>(LocalBridgeClazz, "EGL_READ"); _EGL_READReady = true; } return _EGL_READContent; } }
        private static int _EGL_READContent = default;
        private static bool _EGL_READReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_RED_SIZE"/>
        /// </summary>
        public static int EGL_RED_SIZE { get { if (!_EGL_RED_SIZEReady) { _EGL_RED_SIZEContent = SGetField<int>(LocalBridgeClazz, "EGL_RED_SIZE"); _EGL_RED_SIZEReady = true; } return _EGL_RED_SIZEContent; } }
        private static int _EGL_RED_SIZEContent = default;
        private static bool _EGL_RED_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_RENDER_BUFFER"/>
        /// </summary>
        public static int EGL_RENDER_BUFFER { get { if (!_EGL_RENDER_BUFFERReady) { _EGL_RENDER_BUFFERContent = SGetField<int>(LocalBridgeClazz, "EGL_RENDER_BUFFER"); _EGL_RENDER_BUFFERReady = true; } return _EGL_RENDER_BUFFERContent; } }
        private static int _EGL_RENDER_BUFFERContent = default;
        private static bool _EGL_RENDER_BUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_RENDERABLE_TYPE"/>
        /// </summary>
        public static int EGL_RENDERABLE_TYPE { get { if (!_EGL_RENDERABLE_TYPEReady) { _EGL_RENDERABLE_TYPEContent = SGetField<int>(LocalBridgeClazz, "EGL_RENDERABLE_TYPE"); _EGL_RENDERABLE_TYPEReady = true; } return _EGL_RENDERABLE_TYPEContent; } }
        private static int _EGL_RENDERABLE_TYPEContent = default;
        private static bool _EGL_RENDERABLE_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_RGB_BUFFER"/>
        /// </summary>
        public static int EGL_RGB_BUFFER { get { if (!_EGL_RGB_BUFFERReady) { _EGL_RGB_BUFFERContent = SGetField<int>(LocalBridgeClazz, "EGL_RGB_BUFFER"); _EGL_RGB_BUFFERReady = true; } return _EGL_RGB_BUFFERContent; } }
        private static int _EGL_RGB_BUFFERContent = default;
        private static bool _EGL_RGB_BUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_SAMPLE_BUFFERS"/>
        /// </summary>
        public static int EGL_SAMPLE_BUFFERS { get { if (!_EGL_SAMPLE_BUFFERSReady) { _EGL_SAMPLE_BUFFERSContent = SGetField<int>(LocalBridgeClazz, "EGL_SAMPLE_BUFFERS"); _EGL_SAMPLE_BUFFERSReady = true; } return _EGL_SAMPLE_BUFFERSContent; } }
        private static int _EGL_SAMPLE_BUFFERSContent = default;
        private static bool _EGL_SAMPLE_BUFFERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_SAMPLES"/>
        /// </summary>
        public static int EGL_SAMPLES { get { if (!_EGL_SAMPLESReady) { _EGL_SAMPLESContent = SGetField<int>(LocalBridgeClazz, "EGL_SAMPLES"); _EGL_SAMPLESReady = true; } return _EGL_SAMPLESContent; } }
        private static int _EGL_SAMPLESContent = default;
        private static bool _EGL_SAMPLESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_SINGLE_BUFFER"/>
        /// </summary>
        public static int EGL_SINGLE_BUFFER { get { if (!_EGL_SINGLE_BUFFERReady) { _EGL_SINGLE_BUFFERContent = SGetField<int>(LocalBridgeClazz, "EGL_SINGLE_BUFFER"); _EGL_SINGLE_BUFFERReady = true; } return _EGL_SINGLE_BUFFERContent; } }
        private static int _EGL_SINGLE_BUFFERContent = default;
        private static bool _EGL_SINGLE_BUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_SLOW_CONFIG"/>
        /// </summary>
        public static int EGL_SLOW_CONFIG { get { if (!_EGL_SLOW_CONFIGReady) { _EGL_SLOW_CONFIGContent = SGetField<int>(LocalBridgeClazz, "EGL_SLOW_CONFIG"); _EGL_SLOW_CONFIGReady = true; } return _EGL_SLOW_CONFIGContent; } }
        private static int _EGL_SLOW_CONFIGContent = default;
        private static bool _EGL_SLOW_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_STENCIL_SIZE"/>
        /// </summary>
        public static int EGL_STENCIL_SIZE { get { if (!_EGL_STENCIL_SIZEReady) { _EGL_STENCIL_SIZEContent = SGetField<int>(LocalBridgeClazz, "EGL_STENCIL_SIZE"); _EGL_STENCIL_SIZEReady = true; } return _EGL_STENCIL_SIZEContent; } }
        private static int _EGL_STENCIL_SIZEContent = default;
        private static bool _EGL_STENCIL_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_SUCCESS"/>
        /// </summary>
        public static int EGL_SUCCESS { get { if (!_EGL_SUCCESSReady) { _EGL_SUCCESSContent = SGetField<int>(LocalBridgeClazz, "EGL_SUCCESS"); _EGL_SUCCESSReady = true; } return _EGL_SUCCESSContent; } }
        private static int _EGL_SUCCESSContent = default;
        private static bool _EGL_SUCCESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_SURFACE_TYPE"/>
        /// </summary>
        public static int EGL_SURFACE_TYPE { get { if (!_EGL_SURFACE_TYPEReady) { _EGL_SURFACE_TYPEContent = SGetField<int>(LocalBridgeClazz, "EGL_SURFACE_TYPE"); _EGL_SURFACE_TYPEReady = true; } return _EGL_SURFACE_TYPEContent; } }
        private static int _EGL_SURFACE_TYPEContent = default;
        private static bool _EGL_SURFACE_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_SWAP_BEHAVIOR"/>
        /// </summary>
        public static int EGL_SWAP_BEHAVIOR { get { if (!_EGL_SWAP_BEHAVIORReady) { _EGL_SWAP_BEHAVIORContent = SGetField<int>(LocalBridgeClazz, "EGL_SWAP_BEHAVIOR"); _EGL_SWAP_BEHAVIORReady = true; } return _EGL_SWAP_BEHAVIORContent; } }
        private static int _EGL_SWAP_BEHAVIORContent = default;
        private static bool _EGL_SWAP_BEHAVIORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_SWAP_BEHAVIOR_PRESERVED_BIT"/>
        /// </summary>
        public static int EGL_SWAP_BEHAVIOR_PRESERVED_BIT { get { if (!_EGL_SWAP_BEHAVIOR_PRESERVED_BITReady) { _EGL_SWAP_BEHAVIOR_PRESERVED_BITContent = SGetField<int>(LocalBridgeClazz, "EGL_SWAP_BEHAVIOR_PRESERVED_BIT"); _EGL_SWAP_BEHAVIOR_PRESERVED_BITReady = true; } return _EGL_SWAP_BEHAVIOR_PRESERVED_BITContent; } }
        private static int _EGL_SWAP_BEHAVIOR_PRESERVED_BITContent = default;
        private static bool _EGL_SWAP_BEHAVIOR_PRESERVED_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_TEXTURE_2D"/>
        /// </summary>
        public static int EGL_TEXTURE_2D { get { if (!_EGL_TEXTURE_2DReady) { _EGL_TEXTURE_2DContent = SGetField<int>(LocalBridgeClazz, "EGL_TEXTURE_2D"); _EGL_TEXTURE_2DReady = true; } return _EGL_TEXTURE_2DContent; } }
        private static int _EGL_TEXTURE_2DContent = default;
        private static bool _EGL_TEXTURE_2DReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_TEXTURE_FORMAT"/>
        /// </summary>
        public static int EGL_TEXTURE_FORMAT { get { if (!_EGL_TEXTURE_FORMATReady) { _EGL_TEXTURE_FORMATContent = SGetField<int>(LocalBridgeClazz, "EGL_TEXTURE_FORMAT"); _EGL_TEXTURE_FORMATReady = true; } return _EGL_TEXTURE_FORMATContent; } }
        private static int _EGL_TEXTURE_FORMATContent = default;
        private static bool _EGL_TEXTURE_FORMATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_TEXTURE_RGB"/>
        /// </summary>
        public static int EGL_TEXTURE_RGB { get { if (!_EGL_TEXTURE_RGBReady) { _EGL_TEXTURE_RGBContent = SGetField<int>(LocalBridgeClazz, "EGL_TEXTURE_RGB"); _EGL_TEXTURE_RGBReady = true; } return _EGL_TEXTURE_RGBContent; } }
        private static int _EGL_TEXTURE_RGBContent = default;
        private static bool _EGL_TEXTURE_RGBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_TEXTURE_RGBA"/>
        /// </summary>
        public static int EGL_TEXTURE_RGBA { get { if (!_EGL_TEXTURE_RGBAReady) { _EGL_TEXTURE_RGBAContent = SGetField<int>(LocalBridgeClazz, "EGL_TEXTURE_RGBA"); _EGL_TEXTURE_RGBAReady = true; } return _EGL_TEXTURE_RGBAContent; } }
        private static int _EGL_TEXTURE_RGBAContent = default;
        private static bool _EGL_TEXTURE_RGBAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_TEXTURE_TARGET"/>
        /// </summary>
        public static int EGL_TEXTURE_TARGET { get { if (!_EGL_TEXTURE_TARGETReady) { _EGL_TEXTURE_TARGETContent = SGetField<int>(LocalBridgeClazz, "EGL_TEXTURE_TARGET"); _EGL_TEXTURE_TARGETReady = true; } return _EGL_TEXTURE_TARGETContent; } }
        private static int _EGL_TEXTURE_TARGETContent = default;
        private static bool _EGL_TEXTURE_TARGETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_TRANSPARENT_BLUE_VALUE"/>
        /// </summary>
        public static int EGL_TRANSPARENT_BLUE_VALUE { get { if (!_EGL_TRANSPARENT_BLUE_VALUEReady) { _EGL_TRANSPARENT_BLUE_VALUEContent = SGetField<int>(LocalBridgeClazz, "EGL_TRANSPARENT_BLUE_VALUE"); _EGL_TRANSPARENT_BLUE_VALUEReady = true; } return _EGL_TRANSPARENT_BLUE_VALUEContent; } }
        private static int _EGL_TRANSPARENT_BLUE_VALUEContent = default;
        private static bool _EGL_TRANSPARENT_BLUE_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_TRANSPARENT_GREEN_VALUE"/>
        /// </summary>
        public static int EGL_TRANSPARENT_GREEN_VALUE { get { if (!_EGL_TRANSPARENT_GREEN_VALUEReady) { _EGL_TRANSPARENT_GREEN_VALUEContent = SGetField<int>(LocalBridgeClazz, "EGL_TRANSPARENT_GREEN_VALUE"); _EGL_TRANSPARENT_GREEN_VALUEReady = true; } return _EGL_TRANSPARENT_GREEN_VALUEContent; } }
        private static int _EGL_TRANSPARENT_GREEN_VALUEContent = default;
        private static bool _EGL_TRANSPARENT_GREEN_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_TRANSPARENT_RED_VALUE"/>
        /// </summary>
        public static int EGL_TRANSPARENT_RED_VALUE { get { if (!_EGL_TRANSPARENT_RED_VALUEReady) { _EGL_TRANSPARENT_RED_VALUEContent = SGetField<int>(LocalBridgeClazz, "EGL_TRANSPARENT_RED_VALUE"); _EGL_TRANSPARENT_RED_VALUEReady = true; } return _EGL_TRANSPARENT_RED_VALUEContent; } }
        private static int _EGL_TRANSPARENT_RED_VALUEContent = default;
        private static bool _EGL_TRANSPARENT_RED_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_TRANSPARENT_RGB"/>
        /// </summary>
        public static int EGL_TRANSPARENT_RGB { get { if (!_EGL_TRANSPARENT_RGBReady) { _EGL_TRANSPARENT_RGBContent = SGetField<int>(LocalBridgeClazz, "EGL_TRANSPARENT_RGB"); _EGL_TRANSPARENT_RGBReady = true; } return _EGL_TRANSPARENT_RGBContent; } }
        private static int _EGL_TRANSPARENT_RGBContent = default;
        private static bool _EGL_TRANSPARENT_RGBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_TRANSPARENT_TYPE"/>
        /// </summary>
        public static int EGL_TRANSPARENT_TYPE { get { if (!_EGL_TRANSPARENT_TYPEReady) { _EGL_TRANSPARENT_TYPEContent = SGetField<int>(LocalBridgeClazz, "EGL_TRANSPARENT_TYPE"); _EGL_TRANSPARENT_TYPEReady = true; } return _EGL_TRANSPARENT_TYPEContent; } }
        private static int _EGL_TRANSPARENT_TYPEContent = default;
        private static bool _EGL_TRANSPARENT_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_TRUE"/>
        /// </summary>
        public static int EGL_TRUE { get { if (!_EGL_TRUEReady) { _EGL_TRUEContent = SGetField<int>(LocalBridgeClazz, "EGL_TRUE"); _EGL_TRUEReady = true; } return _EGL_TRUEContent; } }
        private static int _EGL_TRUEContent = default;
        private static bool _EGL_TRUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_VENDOR"/>
        /// </summary>
        public static int EGL_VENDOR { get { if (!_EGL_VENDORReady) { _EGL_VENDORContent = SGetField<int>(LocalBridgeClazz, "EGL_VENDOR"); _EGL_VENDORReady = true; } return _EGL_VENDORContent; } }
        private static int _EGL_VENDORContent = default;
        private static bool _EGL_VENDORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_VERSION"/>
        /// </summary>
        public static int EGL_VERSION { get { if (!_EGL_VERSIONReady) { _EGL_VERSIONContent = SGetField<int>(LocalBridgeClazz, "EGL_VERSION"); _EGL_VERSIONReady = true; } return _EGL_VERSIONContent; } }
        private static int _EGL_VERSIONContent = default;
        private static bool _EGL_VERSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_VERTICAL_RESOLUTION"/>
        /// </summary>
        public static int EGL_VERTICAL_RESOLUTION { get { if (!_EGL_VERTICAL_RESOLUTIONReady) { _EGL_VERTICAL_RESOLUTIONContent = SGetField<int>(LocalBridgeClazz, "EGL_VERTICAL_RESOLUTION"); _EGL_VERTICAL_RESOLUTIONReady = true; } return _EGL_VERTICAL_RESOLUTIONContent; } }
        private static int _EGL_VERTICAL_RESOLUTIONContent = default;
        private static bool _EGL_VERTICAL_RESOLUTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_VG_ALPHA_FORMAT"/>
        /// </summary>
        public static int EGL_VG_ALPHA_FORMAT { get { if (!_EGL_VG_ALPHA_FORMATReady) { _EGL_VG_ALPHA_FORMATContent = SGetField<int>(LocalBridgeClazz, "EGL_VG_ALPHA_FORMAT"); _EGL_VG_ALPHA_FORMATReady = true; } return _EGL_VG_ALPHA_FORMATContent; } }
        private static int _EGL_VG_ALPHA_FORMATContent = default;
        private static bool _EGL_VG_ALPHA_FORMATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_VG_ALPHA_FORMAT_NONPRE"/>
        /// </summary>
        public static int EGL_VG_ALPHA_FORMAT_NONPRE { get { if (!_EGL_VG_ALPHA_FORMAT_NONPREReady) { _EGL_VG_ALPHA_FORMAT_NONPREContent = SGetField<int>(LocalBridgeClazz, "EGL_VG_ALPHA_FORMAT_NONPRE"); _EGL_VG_ALPHA_FORMAT_NONPREReady = true; } return _EGL_VG_ALPHA_FORMAT_NONPREContent; } }
        private static int _EGL_VG_ALPHA_FORMAT_NONPREContent = default;
        private static bool _EGL_VG_ALPHA_FORMAT_NONPREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_VG_ALPHA_FORMAT_PRE"/>
        /// </summary>
        public static int EGL_VG_ALPHA_FORMAT_PRE { get { if (!_EGL_VG_ALPHA_FORMAT_PREReady) { _EGL_VG_ALPHA_FORMAT_PREContent = SGetField<int>(LocalBridgeClazz, "EGL_VG_ALPHA_FORMAT_PRE"); _EGL_VG_ALPHA_FORMAT_PREReady = true; } return _EGL_VG_ALPHA_FORMAT_PREContent; } }
        private static int _EGL_VG_ALPHA_FORMAT_PREContent = default;
        private static bool _EGL_VG_ALPHA_FORMAT_PREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_VG_ALPHA_FORMAT_PRE_BIT"/>
        /// </summary>
        public static int EGL_VG_ALPHA_FORMAT_PRE_BIT { get { if (!_EGL_VG_ALPHA_FORMAT_PRE_BITReady) { _EGL_VG_ALPHA_FORMAT_PRE_BITContent = SGetField<int>(LocalBridgeClazz, "EGL_VG_ALPHA_FORMAT_PRE_BIT"); _EGL_VG_ALPHA_FORMAT_PRE_BITReady = true; } return _EGL_VG_ALPHA_FORMAT_PRE_BITContent; } }
        private static int _EGL_VG_ALPHA_FORMAT_PRE_BITContent = default;
        private static bool _EGL_VG_ALPHA_FORMAT_PRE_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_VG_COLORSPACE"/>
        /// </summary>
        public static int EGL_VG_COLORSPACE { get { if (!_EGL_VG_COLORSPACEReady) { _EGL_VG_COLORSPACEContent = SGetField<int>(LocalBridgeClazz, "EGL_VG_COLORSPACE"); _EGL_VG_COLORSPACEReady = true; } return _EGL_VG_COLORSPACEContent; } }
        private static int _EGL_VG_COLORSPACEContent = default;
        private static bool _EGL_VG_COLORSPACEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_VG_COLORSPACE_LINEAR"/>
        /// </summary>
        public static int EGL_VG_COLORSPACE_LINEAR { get { if (!_EGL_VG_COLORSPACE_LINEARReady) { _EGL_VG_COLORSPACE_LINEARContent = SGetField<int>(LocalBridgeClazz, "EGL_VG_COLORSPACE_LINEAR"); _EGL_VG_COLORSPACE_LINEARReady = true; } return _EGL_VG_COLORSPACE_LINEARContent; } }
        private static int _EGL_VG_COLORSPACE_LINEARContent = default;
        private static bool _EGL_VG_COLORSPACE_LINEARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_VG_COLORSPACE_LINEAR_BIT"/>
        /// </summary>
        public static int EGL_VG_COLORSPACE_LINEAR_BIT { get { if (!_EGL_VG_COLORSPACE_LINEAR_BITReady) { _EGL_VG_COLORSPACE_LINEAR_BITContent = SGetField<int>(LocalBridgeClazz, "EGL_VG_COLORSPACE_LINEAR_BIT"); _EGL_VG_COLORSPACE_LINEAR_BITReady = true; } return _EGL_VG_COLORSPACE_LINEAR_BITContent; } }
        private static int _EGL_VG_COLORSPACE_LINEAR_BITContent = default;
        private static bool _EGL_VG_COLORSPACE_LINEAR_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_VG_COLORSPACE_sRGB"/>
        /// </summary>
        public static int EGL_VG_COLORSPACE_sRGB { get { if (!_EGL_VG_COLORSPACE_sRGBReady) { _EGL_VG_COLORSPACE_sRGBContent = SGetField<int>(LocalBridgeClazz, "EGL_VG_COLORSPACE_sRGB"); _EGL_VG_COLORSPACE_sRGBReady = true; } return _EGL_VG_COLORSPACE_sRGBContent; } }
        private static int _EGL_VG_COLORSPACE_sRGBContent = default;
        private static bool _EGL_VG_COLORSPACE_sRGBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_WIDTH"/>
        /// </summary>
        public static int EGL_WIDTH { get { if (!_EGL_WIDTHReady) { _EGL_WIDTHContent = SGetField<int>(LocalBridgeClazz, "EGL_WIDTH"); _EGL_WIDTHReady = true; } return _EGL_WIDTHContent; } }
        private static int _EGL_WIDTHContent = default;
        private static bool _EGL_WIDTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#EGL_WINDOW_BIT"/>
        /// </summary>
        public static int EGL_WINDOW_BIT { get { if (!_EGL_WINDOW_BITReady) { _EGL_WINDOW_BITContent = SGetField<int>(LocalBridgeClazz, "EGL_WINDOW_BIT"); _EGL_WINDOW_BITReady = true; } return _EGL_WINDOW_BITContent; } }
        private static int _EGL_WINDOW_BITContent = default;
        private static bool _EGL_WINDOW_BITReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#eglCreateWindowSurface(android.opengl.EGLDisplay,android.opengl.EGLConfig,java.lang.Object,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Opengl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="Android.Opengl.EGLConfig"/></param>
        /// <param name="arg2"><see cref="object"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <returns><see cref="Android.Opengl.EGLSurface"/></returns>
        public static Android.Opengl.EGLSurface EglCreateWindowSurface(Android.Opengl.EGLDisplay arg0, Android.Opengl.EGLConfig arg1, object arg2, int[] arg3, int arg4)
        {
            return SExecute<Android.Opengl.EGLSurface>(LocalBridgeClazz, "eglCreateWindowSurface", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#eglCreateContext(android.opengl.EGLDisplay,android.opengl.EGLConfig,android.opengl.EGLContext,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Opengl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="Android.Opengl.EGLConfig"/></param>
        /// <param name="arg2"><see cref="Android.Opengl.EGLContext"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <returns><see cref="Android.Opengl.EGLContext"/></returns>
        public static Android.Opengl.EGLContext EglCreateContext(Android.Opengl.EGLDisplay arg0, Android.Opengl.EGLConfig arg1, Android.Opengl.EGLContext arg2, int[] arg3, int arg4)
        {
            return SExecute<Android.Opengl.EGLContext>(LocalBridgeClazz, "eglCreateContext", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#eglGetCurrentContext()"/>
        /// </summary>
        /// <returns><see cref="Android.Opengl.EGLContext"/></returns>
        public static Android.Opengl.EGLContext EglGetCurrentContext()
        {
            return SExecuteWithSignature<Android.Opengl.EGLContext>(LocalBridgeClazz, "eglGetCurrentContext", "()Landroid/opengl/EGLContext;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#eglGetCurrentDisplay()"/>
        /// </summary>
        /// <returns><see cref="Android.Opengl.EGLDisplay"/></returns>
        public static Android.Opengl.EGLDisplay EglGetCurrentDisplay()
        {
            return SExecuteWithSignature<Android.Opengl.EGLDisplay>(LocalBridgeClazz, "eglGetCurrentDisplay", "()Landroid/opengl/EGLDisplay;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#eglGetDisplay(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Opengl.EGLDisplay"/></returns>
        public static Android.Opengl.EGLDisplay EglGetDisplay(int arg0)
        {
            return SExecuteWithSignature<Android.Opengl.EGLDisplay>(LocalBridgeClazz, "eglGetDisplay", "(I)Landroid/opengl/EGLDisplay;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#eglCreatePbufferFromClientBuffer(android.opengl.EGLDisplay,int,int,android.opengl.EGLConfig,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Opengl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Android.Opengl.EGLConfig"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <returns><see cref="Android.Opengl.EGLSurface"/></returns>
        public static Android.Opengl.EGLSurface EglCreatePbufferFromClientBuffer(Android.Opengl.EGLDisplay arg0, int arg1, int arg2, Android.Opengl.EGLConfig arg3, int[] arg4, int arg5)
        {
            return SExecute<Android.Opengl.EGLSurface>(LocalBridgeClazz, "eglCreatePbufferFromClientBuffer", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#eglCreatePbufferSurface(android.opengl.EGLDisplay,android.opengl.EGLConfig,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Opengl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="Android.Opengl.EGLConfig"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="Android.Opengl.EGLSurface"/></returns>
        public static Android.Opengl.EGLSurface EglCreatePbufferSurface(Android.Opengl.EGLDisplay arg0, Android.Opengl.EGLConfig arg1, int[] arg2, int arg3)
        {
            return SExecute<Android.Opengl.EGLSurface>(LocalBridgeClazz, "eglCreatePbufferSurface", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#eglCreatePixmapSurface(android.opengl.EGLDisplay,android.opengl.EGLConfig,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Opengl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="Android.Opengl.EGLConfig"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <returns><see cref="Android.Opengl.EGLSurface"/></returns>
        [global::System.Obsolete()]
        public static Android.Opengl.EGLSurface EglCreatePixmapSurface(Android.Opengl.EGLDisplay arg0, Android.Opengl.EGLConfig arg1, int arg2, int[] arg3, int arg4)
        {
            return SExecute<Android.Opengl.EGLSurface>(LocalBridgeClazz, "eglCreatePixmapSurface", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#eglGetCurrentSurface(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Opengl.EGLSurface"/></returns>
        public static Android.Opengl.EGLSurface EglGetCurrentSurface(int arg0)
        {
            return SExecuteWithSignature<Android.Opengl.EGLSurface>(LocalBridgeClazz, "eglGetCurrentSurface", "(I)Landroid/opengl/EGLSurface;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#eglBindAPI(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool EglBindAPI(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "eglBindAPI", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#eglBindTexImage(android.opengl.EGLDisplay,android.opengl.EGLSurface,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Opengl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="Android.Opengl.EGLSurface"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool EglBindTexImage(Android.Opengl.EGLDisplay arg0, Android.Opengl.EGLSurface arg1, int arg2)
        {
            return SExecute<bool>(LocalBridgeClazz, "eglBindTexImage", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#eglChooseConfig(android.opengl.EGLDisplay,int[],int,android.opengl.EGLConfig[],int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Opengl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Android.Opengl.EGLConfig"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool EglChooseConfig(Android.Opengl.EGLDisplay arg0, int[] arg1, int arg2, Android.Opengl.EGLConfig[] arg3, int arg4, int arg5, int[] arg6, int arg7)
        {
            return SExecute<bool>(LocalBridgeClazz, "eglChooseConfig", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#eglCopyBuffers(android.opengl.EGLDisplay,android.opengl.EGLSurface,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Opengl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="Android.Opengl.EGLSurface"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool EglCopyBuffers(Android.Opengl.EGLDisplay arg0, Android.Opengl.EGLSurface arg1, int arg2)
        {
            return SExecute<bool>(LocalBridgeClazz, "eglCopyBuffers", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#eglDestroyContext(android.opengl.EGLDisplay,android.opengl.EGLContext)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Opengl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="Android.Opengl.EGLContext"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool EglDestroyContext(Android.Opengl.EGLDisplay arg0, Android.Opengl.EGLContext arg1)
        {
            return SExecute<bool>(LocalBridgeClazz, "eglDestroyContext", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#eglDestroySurface(android.opengl.EGLDisplay,android.opengl.EGLSurface)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Opengl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="Android.Opengl.EGLSurface"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool EglDestroySurface(Android.Opengl.EGLDisplay arg0, Android.Opengl.EGLSurface arg1)
        {
            return SExecute<bool>(LocalBridgeClazz, "eglDestroySurface", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#eglGetConfigAttrib(android.opengl.EGLDisplay,android.opengl.EGLConfig,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Opengl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="Android.Opengl.EGLConfig"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool EglGetConfigAttrib(Android.Opengl.EGLDisplay arg0, Android.Opengl.EGLConfig arg1, int arg2, int[] arg3, int arg4)
        {
            return SExecute<bool>(LocalBridgeClazz, "eglGetConfigAttrib", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#eglGetConfigs(android.opengl.EGLDisplay,android.opengl.EGLConfig[],int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Opengl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="Android.Opengl.EGLConfig"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool EglGetConfigs(Android.Opengl.EGLDisplay arg0, Android.Opengl.EGLConfig[] arg1, int arg2, int arg3, int[] arg4, int arg5)
        {
            return SExecute<bool>(LocalBridgeClazz, "eglGetConfigs", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#eglInitialize(android.opengl.EGLDisplay,int[],int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Opengl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool EglInitialize(Android.Opengl.EGLDisplay arg0, int[] arg1, int arg2, int[] arg3, int arg4)
        {
            return SExecute<bool>(LocalBridgeClazz, "eglInitialize", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#eglMakeCurrent(android.opengl.EGLDisplay,android.opengl.EGLSurface,android.opengl.EGLSurface,android.opengl.EGLContext)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Opengl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="Android.Opengl.EGLSurface"/></param>
        /// <param name="arg2"><see cref="Android.Opengl.EGLSurface"/></param>
        /// <param name="arg3"><see cref="Android.Opengl.EGLContext"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool EglMakeCurrent(Android.Opengl.EGLDisplay arg0, Android.Opengl.EGLSurface arg1, Android.Opengl.EGLSurface arg2, Android.Opengl.EGLContext arg3)
        {
            return SExecute<bool>(LocalBridgeClazz, "eglMakeCurrent", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#eglQueryContext(android.opengl.EGLDisplay,android.opengl.EGLContext,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Opengl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="Android.Opengl.EGLContext"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool EglQueryContext(Android.Opengl.EGLDisplay arg0, Android.Opengl.EGLContext arg1, int arg2, int[] arg3, int arg4)
        {
            return SExecute<bool>(LocalBridgeClazz, "eglQueryContext", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#eglQuerySurface(android.opengl.EGLDisplay,android.opengl.EGLSurface,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Opengl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="Android.Opengl.EGLSurface"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool EglQuerySurface(Android.Opengl.EGLDisplay arg0, Android.Opengl.EGLSurface arg1, int arg2, int[] arg3, int arg4)
        {
            return SExecute<bool>(LocalBridgeClazz, "eglQuerySurface", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#eglReleaseTexImage(android.opengl.EGLDisplay,android.opengl.EGLSurface,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Opengl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="Android.Opengl.EGLSurface"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool EglReleaseTexImage(Android.Opengl.EGLDisplay arg0, Android.Opengl.EGLSurface arg1, int arg2)
        {
            return SExecute<bool>(LocalBridgeClazz, "eglReleaseTexImage", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#eglReleaseThread()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public static bool EglReleaseThread()
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "eglReleaseThread", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#eglSurfaceAttrib(android.opengl.EGLDisplay,android.opengl.EGLSurface,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Opengl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="Android.Opengl.EGLSurface"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool EglSurfaceAttrib(Android.Opengl.EGLDisplay arg0, Android.Opengl.EGLSurface arg1, int arg2, int arg3)
        {
            return SExecute<bool>(LocalBridgeClazz, "eglSurfaceAttrib", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#eglSwapBuffers(android.opengl.EGLDisplay,android.opengl.EGLSurface)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Opengl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="Android.Opengl.EGLSurface"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool EglSwapBuffers(Android.Opengl.EGLDisplay arg0, Android.Opengl.EGLSurface arg1)
        {
            return SExecute<bool>(LocalBridgeClazz, "eglSwapBuffers", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#eglSwapInterval(android.opengl.EGLDisplay,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Opengl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool EglSwapInterval(Android.Opengl.EGLDisplay arg0, int arg1)
        {
            return SExecute<bool>(LocalBridgeClazz, "eglSwapInterval", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#eglTerminate(android.opengl.EGLDisplay)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Opengl.EGLDisplay"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool EglTerminate(Android.Opengl.EGLDisplay arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "eglTerminate", "(Landroid/opengl/EGLDisplay;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#eglWaitClient()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public static bool EglWaitClient()
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "eglWaitClient", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#eglWaitGL()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public static bool EglWaitGL()
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "eglWaitGL", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#eglWaitNative(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool EglWaitNative(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "eglWaitNative", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#eglGetError()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public static int EglGetError()
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "eglGetError", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#eglQueryAPI()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public static int EglQueryAPI()
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "eglQueryAPI", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL14.html#eglQueryString(android.opengl.EGLDisplay,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Opengl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String EglQueryString(Android.Opengl.EGLDisplay arg0, int arg1)
        {
            return SExecute<Java.Lang.String>(LocalBridgeClazz, "eglQueryString", arg0, arg1);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
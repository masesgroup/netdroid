/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.8.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Opengl
{
    #region GLES31Ext
    public partial class GLES31Ext
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_BLEND_ADVANCED_COHERENT_KHR"/>
        /// </summary>
        public static int GL_BLEND_ADVANCED_COHERENT_KHR { get { if (!_GL_BLEND_ADVANCED_COHERENT_KHRReady) { _GL_BLEND_ADVANCED_COHERENT_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_BLEND_ADVANCED_COHERENT_KHR"); _GL_BLEND_ADVANCED_COHERENT_KHRReady = true; } return _GL_BLEND_ADVANCED_COHERENT_KHRContent; } }
        private static int _GL_BLEND_ADVANCED_COHERENT_KHRContent = default;
        private static bool _GL_BLEND_ADVANCED_COHERENT_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_BUFFER_KHR"/>
        /// </summary>
        public static int GL_BUFFER_KHR { get { if (!_GL_BUFFER_KHRReady) { _GL_BUFFER_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_BUFFER_KHR"); _GL_BUFFER_KHRReady = true; } return _GL_BUFFER_KHRContent; } }
        private static int _GL_BUFFER_KHRContent = default;
        private static bool _GL_BUFFER_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_CLAMP_TO_BORDER_EXT"/>
        /// </summary>
        public static int GL_CLAMP_TO_BORDER_EXT { get { if (!_GL_CLAMP_TO_BORDER_EXTReady) { _GL_CLAMP_TO_BORDER_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_CLAMP_TO_BORDER_EXT"); _GL_CLAMP_TO_BORDER_EXTReady = true; } return _GL_CLAMP_TO_BORDER_EXTContent; } }
        private static int _GL_CLAMP_TO_BORDER_EXTContent = default;
        private static bool _GL_CLAMP_TO_BORDER_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_COLORBURN_KHR"/>
        /// </summary>
        public static int GL_COLORBURN_KHR { get { if (!_GL_COLORBURN_KHRReady) { _GL_COLORBURN_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_COLORBURN_KHR"); _GL_COLORBURN_KHRReady = true; } return _GL_COLORBURN_KHRContent; } }
        private static int _GL_COLORBURN_KHRContent = default;
        private static bool _GL_COLORBURN_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_COLORDODGE_KHR"/>
        /// </summary>
        public static int GL_COLORDODGE_KHR { get { if (!_GL_COLORDODGE_KHRReady) { _GL_COLORDODGE_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_COLORDODGE_KHR"); _GL_COLORDODGE_KHRReady = true; } return _GL_COLORDODGE_KHRContent; } }
        private static int _GL_COLORDODGE_KHRContent = default;
        private static bool _GL_COLORDODGE_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_COMPRESSED_RGBA_ASTC_10x10_KHR"/>
        /// </summary>
        public static int GL_COMPRESSED_RGBA_ASTC_10x10_KHR { get { if (!_GL_COMPRESSED_RGBA_ASTC_10x10_KHRReady) { _GL_COMPRESSED_RGBA_ASTC_10x10_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_RGBA_ASTC_10x10_KHR"); _GL_COMPRESSED_RGBA_ASTC_10x10_KHRReady = true; } return _GL_COMPRESSED_RGBA_ASTC_10x10_KHRContent; } }
        private static int _GL_COMPRESSED_RGBA_ASTC_10x10_KHRContent = default;
        private static bool _GL_COMPRESSED_RGBA_ASTC_10x10_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_COMPRESSED_RGBA_ASTC_10x5_KHR"/>
        /// </summary>
        public static int GL_COMPRESSED_RGBA_ASTC_10x5_KHR { get { if (!_GL_COMPRESSED_RGBA_ASTC_10x5_KHRReady) { _GL_COMPRESSED_RGBA_ASTC_10x5_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_RGBA_ASTC_10x5_KHR"); _GL_COMPRESSED_RGBA_ASTC_10x5_KHRReady = true; } return _GL_COMPRESSED_RGBA_ASTC_10x5_KHRContent; } }
        private static int _GL_COMPRESSED_RGBA_ASTC_10x5_KHRContent = default;
        private static bool _GL_COMPRESSED_RGBA_ASTC_10x5_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_COMPRESSED_RGBA_ASTC_10x6_KHR"/>
        /// </summary>
        public static int GL_COMPRESSED_RGBA_ASTC_10x6_KHR { get { if (!_GL_COMPRESSED_RGBA_ASTC_10x6_KHRReady) { _GL_COMPRESSED_RGBA_ASTC_10x6_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_RGBA_ASTC_10x6_KHR"); _GL_COMPRESSED_RGBA_ASTC_10x6_KHRReady = true; } return _GL_COMPRESSED_RGBA_ASTC_10x6_KHRContent; } }
        private static int _GL_COMPRESSED_RGBA_ASTC_10x6_KHRContent = default;
        private static bool _GL_COMPRESSED_RGBA_ASTC_10x6_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_COMPRESSED_RGBA_ASTC_10x8_KHR"/>
        /// </summary>
        public static int GL_COMPRESSED_RGBA_ASTC_10x8_KHR { get { if (!_GL_COMPRESSED_RGBA_ASTC_10x8_KHRReady) { _GL_COMPRESSED_RGBA_ASTC_10x8_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_RGBA_ASTC_10x8_KHR"); _GL_COMPRESSED_RGBA_ASTC_10x8_KHRReady = true; } return _GL_COMPRESSED_RGBA_ASTC_10x8_KHRContent; } }
        private static int _GL_COMPRESSED_RGBA_ASTC_10x8_KHRContent = default;
        private static bool _GL_COMPRESSED_RGBA_ASTC_10x8_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_COMPRESSED_RGBA_ASTC_12x10_KHR"/>
        /// </summary>
        public static int GL_COMPRESSED_RGBA_ASTC_12x10_KHR { get { if (!_GL_COMPRESSED_RGBA_ASTC_12x10_KHRReady) { _GL_COMPRESSED_RGBA_ASTC_12x10_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_RGBA_ASTC_12x10_KHR"); _GL_COMPRESSED_RGBA_ASTC_12x10_KHRReady = true; } return _GL_COMPRESSED_RGBA_ASTC_12x10_KHRContent; } }
        private static int _GL_COMPRESSED_RGBA_ASTC_12x10_KHRContent = default;
        private static bool _GL_COMPRESSED_RGBA_ASTC_12x10_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_COMPRESSED_RGBA_ASTC_12x12_KHR"/>
        /// </summary>
        public static int GL_COMPRESSED_RGBA_ASTC_12x12_KHR { get { if (!_GL_COMPRESSED_RGBA_ASTC_12x12_KHRReady) { _GL_COMPRESSED_RGBA_ASTC_12x12_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_RGBA_ASTC_12x12_KHR"); _GL_COMPRESSED_RGBA_ASTC_12x12_KHRReady = true; } return _GL_COMPRESSED_RGBA_ASTC_12x12_KHRContent; } }
        private static int _GL_COMPRESSED_RGBA_ASTC_12x12_KHRContent = default;
        private static bool _GL_COMPRESSED_RGBA_ASTC_12x12_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_COMPRESSED_RGBA_ASTC_4x4_KHR"/>
        /// </summary>
        public static int GL_COMPRESSED_RGBA_ASTC_4x4_KHR { get { if (!_GL_COMPRESSED_RGBA_ASTC_4x4_KHRReady) { _GL_COMPRESSED_RGBA_ASTC_4x4_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_RGBA_ASTC_4x4_KHR"); _GL_COMPRESSED_RGBA_ASTC_4x4_KHRReady = true; } return _GL_COMPRESSED_RGBA_ASTC_4x4_KHRContent; } }
        private static int _GL_COMPRESSED_RGBA_ASTC_4x4_KHRContent = default;
        private static bool _GL_COMPRESSED_RGBA_ASTC_4x4_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_COMPRESSED_RGBA_ASTC_5x4_KHR"/>
        /// </summary>
        public static int GL_COMPRESSED_RGBA_ASTC_5x4_KHR { get { if (!_GL_COMPRESSED_RGBA_ASTC_5x4_KHRReady) { _GL_COMPRESSED_RGBA_ASTC_5x4_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_RGBA_ASTC_5x4_KHR"); _GL_COMPRESSED_RGBA_ASTC_5x4_KHRReady = true; } return _GL_COMPRESSED_RGBA_ASTC_5x4_KHRContent; } }
        private static int _GL_COMPRESSED_RGBA_ASTC_5x4_KHRContent = default;
        private static bool _GL_COMPRESSED_RGBA_ASTC_5x4_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_COMPRESSED_RGBA_ASTC_5x5_KHR"/>
        /// </summary>
        public static int GL_COMPRESSED_RGBA_ASTC_5x5_KHR { get { if (!_GL_COMPRESSED_RGBA_ASTC_5x5_KHRReady) { _GL_COMPRESSED_RGBA_ASTC_5x5_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_RGBA_ASTC_5x5_KHR"); _GL_COMPRESSED_RGBA_ASTC_5x5_KHRReady = true; } return _GL_COMPRESSED_RGBA_ASTC_5x5_KHRContent; } }
        private static int _GL_COMPRESSED_RGBA_ASTC_5x5_KHRContent = default;
        private static bool _GL_COMPRESSED_RGBA_ASTC_5x5_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_COMPRESSED_RGBA_ASTC_6x5_KHR"/>
        /// </summary>
        public static int GL_COMPRESSED_RGBA_ASTC_6x5_KHR { get { if (!_GL_COMPRESSED_RGBA_ASTC_6x5_KHRReady) { _GL_COMPRESSED_RGBA_ASTC_6x5_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_RGBA_ASTC_6x5_KHR"); _GL_COMPRESSED_RGBA_ASTC_6x5_KHRReady = true; } return _GL_COMPRESSED_RGBA_ASTC_6x5_KHRContent; } }
        private static int _GL_COMPRESSED_RGBA_ASTC_6x5_KHRContent = default;
        private static bool _GL_COMPRESSED_RGBA_ASTC_6x5_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_COMPRESSED_RGBA_ASTC_6x6_KHR"/>
        /// </summary>
        public static int GL_COMPRESSED_RGBA_ASTC_6x6_KHR { get { if (!_GL_COMPRESSED_RGBA_ASTC_6x6_KHRReady) { _GL_COMPRESSED_RGBA_ASTC_6x6_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_RGBA_ASTC_6x6_KHR"); _GL_COMPRESSED_RGBA_ASTC_6x6_KHRReady = true; } return _GL_COMPRESSED_RGBA_ASTC_6x6_KHRContent; } }
        private static int _GL_COMPRESSED_RGBA_ASTC_6x6_KHRContent = default;
        private static bool _GL_COMPRESSED_RGBA_ASTC_6x6_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_COMPRESSED_RGBA_ASTC_8x5_KHR"/>
        /// </summary>
        public static int GL_COMPRESSED_RGBA_ASTC_8x5_KHR { get { if (!_GL_COMPRESSED_RGBA_ASTC_8x5_KHRReady) { _GL_COMPRESSED_RGBA_ASTC_8x5_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_RGBA_ASTC_8x5_KHR"); _GL_COMPRESSED_RGBA_ASTC_8x5_KHRReady = true; } return _GL_COMPRESSED_RGBA_ASTC_8x5_KHRContent; } }
        private static int _GL_COMPRESSED_RGBA_ASTC_8x5_KHRContent = default;
        private static bool _GL_COMPRESSED_RGBA_ASTC_8x5_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_COMPRESSED_RGBA_ASTC_8x6_KHR"/>
        /// </summary>
        public static int GL_COMPRESSED_RGBA_ASTC_8x6_KHR { get { if (!_GL_COMPRESSED_RGBA_ASTC_8x6_KHRReady) { _GL_COMPRESSED_RGBA_ASTC_8x6_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_RGBA_ASTC_8x6_KHR"); _GL_COMPRESSED_RGBA_ASTC_8x6_KHRReady = true; } return _GL_COMPRESSED_RGBA_ASTC_8x6_KHRContent; } }
        private static int _GL_COMPRESSED_RGBA_ASTC_8x6_KHRContent = default;
        private static bool _GL_COMPRESSED_RGBA_ASTC_8x6_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_COMPRESSED_RGBA_ASTC_8x8_KHR"/>
        /// </summary>
        public static int GL_COMPRESSED_RGBA_ASTC_8x8_KHR { get { if (!_GL_COMPRESSED_RGBA_ASTC_8x8_KHRReady) { _GL_COMPRESSED_RGBA_ASTC_8x8_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_RGBA_ASTC_8x8_KHR"); _GL_COMPRESSED_RGBA_ASTC_8x8_KHRReady = true; } return _GL_COMPRESSED_RGBA_ASTC_8x8_KHRContent; } }
        private static int _GL_COMPRESSED_RGBA_ASTC_8x8_KHRContent = default;
        private static bool _GL_COMPRESSED_RGBA_ASTC_8x8_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR"/>
        /// </summary>
        public static int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR { get { if (!_GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHRReady) { _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR"); _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHRReady = true; } return _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHRContent; } }
        private static int _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHRContent = default;
        private static bool _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR"/>
        /// </summary>
        public static int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR { get { if (!_GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHRReady) { _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR"); _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHRReady = true; } return _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHRContent; } }
        private static int _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHRContent = default;
        private static bool _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR"/>
        /// </summary>
        public static int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR { get { if (!_GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHRReady) { _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR"); _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHRReady = true; } return _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHRContent; } }
        private static int _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHRContent = default;
        private static bool _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR"/>
        /// </summary>
        public static int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR { get { if (!_GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHRReady) { _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR"); _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHRReady = true; } return _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHRContent; } }
        private static int _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHRContent = default;
        private static bool _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR"/>
        /// </summary>
        public static int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR { get { if (!_GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHRReady) { _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR"); _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHRReady = true; } return _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHRContent; } }
        private static int _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHRContent = default;
        private static bool _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR"/>
        /// </summary>
        public static int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR { get { if (!_GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHRReady) { _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR"); _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHRReady = true; } return _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHRContent; } }
        private static int _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHRContent = default;
        private static bool _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR"/>
        /// </summary>
        public static int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR { get { if (!_GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHRReady) { _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR"); _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHRReady = true; } return _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHRContent; } }
        private static int _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHRContent = default;
        private static bool _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR"/>
        /// </summary>
        public static int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR { get { if (!_GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHRReady) { _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR"); _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHRReady = true; } return _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHRContent; } }
        private static int _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHRContent = default;
        private static bool _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR"/>
        /// </summary>
        public static int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR { get { if (!_GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHRReady) { _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR"); _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHRReady = true; } return _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHRContent; } }
        private static int _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHRContent = default;
        private static bool _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR"/>
        /// </summary>
        public static int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR { get { if (!_GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHRReady) { _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR"); _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHRReady = true; } return _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHRContent; } }
        private static int _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHRContent = default;
        private static bool _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR"/>
        /// </summary>
        public static int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR { get { if (!_GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHRReady) { _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR"); _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHRReady = true; } return _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHRContent; } }
        private static int _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHRContent = default;
        private static bool _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR"/>
        /// </summary>
        public static int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR { get { if (!_GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHRReady) { _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR"); _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHRReady = true; } return _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHRContent; } }
        private static int _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHRContent = default;
        private static bool _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR"/>
        /// </summary>
        public static int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR { get { if (!_GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHRReady) { _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR"); _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHRReady = true; } return _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHRContent; } }
        private static int _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHRContent = default;
        private static bool _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR"/>
        /// </summary>
        public static int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR { get { if (!_GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHRReady) { _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR"); _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHRReady = true; } return _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHRContent; } }
        private static int _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHRContent = default;
        private static bool _GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_CONTEXT_FLAG_DEBUG_BIT_KHR"/>
        /// </summary>
        public static int GL_CONTEXT_FLAG_DEBUG_BIT_KHR { get { if (!_GL_CONTEXT_FLAG_DEBUG_BIT_KHRReady) { _GL_CONTEXT_FLAG_DEBUG_BIT_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_CONTEXT_FLAG_DEBUG_BIT_KHR"); _GL_CONTEXT_FLAG_DEBUG_BIT_KHRReady = true; } return _GL_CONTEXT_FLAG_DEBUG_BIT_KHRContent; } }
        private static int _GL_CONTEXT_FLAG_DEBUG_BIT_KHRContent = default;
        private static bool _GL_CONTEXT_FLAG_DEBUG_BIT_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_DARKEN_KHR"/>
        /// </summary>
        public static int GL_DARKEN_KHR { get { if (!_GL_DARKEN_KHRReady) { _GL_DARKEN_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_DARKEN_KHR"); _GL_DARKEN_KHRReady = true; } return _GL_DARKEN_KHRContent; } }
        private static int _GL_DARKEN_KHRContent = default;
        private static bool _GL_DARKEN_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_DEBUG_CALLBACK_FUNCTION_KHR"/>
        /// </summary>
        public static int GL_DEBUG_CALLBACK_FUNCTION_KHR { get { if (!_GL_DEBUG_CALLBACK_FUNCTION_KHRReady) { _GL_DEBUG_CALLBACK_FUNCTION_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_CALLBACK_FUNCTION_KHR"); _GL_DEBUG_CALLBACK_FUNCTION_KHRReady = true; } return _GL_DEBUG_CALLBACK_FUNCTION_KHRContent; } }
        private static int _GL_DEBUG_CALLBACK_FUNCTION_KHRContent = default;
        private static bool _GL_DEBUG_CALLBACK_FUNCTION_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_DEBUG_CALLBACK_USER_PARAM_KHR"/>
        /// </summary>
        public static int GL_DEBUG_CALLBACK_USER_PARAM_KHR { get { if (!_GL_DEBUG_CALLBACK_USER_PARAM_KHRReady) { _GL_DEBUG_CALLBACK_USER_PARAM_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_CALLBACK_USER_PARAM_KHR"); _GL_DEBUG_CALLBACK_USER_PARAM_KHRReady = true; } return _GL_DEBUG_CALLBACK_USER_PARAM_KHRContent; } }
        private static int _GL_DEBUG_CALLBACK_USER_PARAM_KHRContent = default;
        private static bool _GL_DEBUG_CALLBACK_USER_PARAM_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_DEBUG_GROUP_STACK_DEPTH_KHR"/>
        /// </summary>
        public static int GL_DEBUG_GROUP_STACK_DEPTH_KHR { get { if (!_GL_DEBUG_GROUP_STACK_DEPTH_KHRReady) { _GL_DEBUG_GROUP_STACK_DEPTH_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_GROUP_STACK_DEPTH_KHR"); _GL_DEBUG_GROUP_STACK_DEPTH_KHRReady = true; } return _GL_DEBUG_GROUP_STACK_DEPTH_KHRContent; } }
        private static int _GL_DEBUG_GROUP_STACK_DEPTH_KHRContent = default;
        private static bool _GL_DEBUG_GROUP_STACK_DEPTH_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_DEBUG_LOGGED_MESSAGES_KHR"/>
        /// </summary>
        public static int GL_DEBUG_LOGGED_MESSAGES_KHR { get { if (!_GL_DEBUG_LOGGED_MESSAGES_KHRReady) { _GL_DEBUG_LOGGED_MESSAGES_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_LOGGED_MESSAGES_KHR"); _GL_DEBUG_LOGGED_MESSAGES_KHRReady = true; } return _GL_DEBUG_LOGGED_MESSAGES_KHRContent; } }
        private static int _GL_DEBUG_LOGGED_MESSAGES_KHRContent = default;
        private static bool _GL_DEBUG_LOGGED_MESSAGES_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR"/>
        /// </summary>
        public static int GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR { get { if (!_GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHRReady) { _GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR"); _GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHRReady = true; } return _GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHRContent; } }
        private static int _GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHRContent = default;
        private static bool _GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_DEBUG_OUTPUT_KHR"/>
        /// </summary>
        public static int GL_DEBUG_OUTPUT_KHR { get { if (!_GL_DEBUG_OUTPUT_KHRReady) { _GL_DEBUG_OUTPUT_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_OUTPUT_KHR"); _GL_DEBUG_OUTPUT_KHRReady = true; } return _GL_DEBUG_OUTPUT_KHRContent; } }
        private static int _GL_DEBUG_OUTPUT_KHRContent = default;
        private static bool _GL_DEBUG_OUTPUT_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR"/>
        /// </summary>
        public static int GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR { get { if (!_GL_DEBUG_OUTPUT_SYNCHRONOUS_KHRReady) { _GL_DEBUG_OUTPUT_SYNCHRONOUS_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR"); _GL_DEBUG_OUTPUT_SYNCHRONOUS_KHRReady = true; } return _GL_DEBUG_OUTPUT_SYNCHRONOUS_KHRContent; } }
        private static int _GL_DEBUG_OUTPUT_SYNCHRONOUS_KHRContent = default;
        private static bool _GL_DEBUG_OUTPUT_SYNCHRONOUS_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_DEBUG_SEVERITY_HIGH_KHR"/>
        /// </summary>
        public static int GL_DEBUG_SEVERITY_HIGH_KHR { get { if (!_GL_DEBUG_SEVERITY_HIGH_KHRReady) { _GL_DEBUG_SEVERITY_HIGH_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_SEVERITY_HIGH_KHR"); _GL_DEBUG_SEVERITY_HIGH_KHRReady = true; } return _GL_DEBUG_SEVERITY_HIGH_KHRContent; } }
        private static int _GL_DEBUG_SEVERITY_HIGH_KHRContent = default;
        private static bool _GL_DEBUG_SEVERITY_HIGH_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_DEBUG_SEVERITY_LOW_KHR"/>
        /// </summary>
        public static int GL_DEBUG_SEVERITY_LOW_KHR { get { if (!_GL_DEBUG_SEVERITY_LOW_KHRReady) { _GL_DEBUG_SEVERITY_LOW_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_SEVERITY_LOW_KHR"); _GL_DEBUG_SEVERITY_LOW_KHRReady = true; } return _GL_DEBUG_SEVERITY_LOW_KHRContent; } }
        private static int _GL_DEBUG_SEVERITY_LOW_KHRContent = default;
        private static bool _GL_DEBUG_SEVERITY_LOW_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_DEBUG_SEVERITY_MEDIUM_KHR"/>
        /// </summary>
        public static int GL_DEBUG_SEVERITY_MEDIUM_KHR { get { if (!_GL_DEBUG_SEVERITY_MEDIUM_KHRReady) { _GL_DEBUG_SEVERITY_MEDIUM_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_SEVERITY_MEDIUM_KHR"); _GL_DEBUG_SEVERITY_MEDIUM_KHRReady = true; } return _GL_DEBUG_SEVERITY_MEDIUM_KHRContent; } }
        private static int _GL_DEBUG_SEVERITY_MEDIUM_KHRContent = default;
        private static bool _GL_DEBUG_SEVERITY_MEDIUM_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_DEBUG_SEVERITY_NOTIFICATION_KHR"/>
        /// </summary>
        public static int GL_DEBUG_SEVERITY_NOTIFICATION_KHR { get { if (!_GL_DEBUG_SEVERITY_NOTIFICATION_KHRReady) { _GL_DEBUG_SEVERITY_NOTIFICATION_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_SEVERITY_NOTIFICATION_KHR"); _GL_DEBUG_SEVERITY_NOTIFICATION_KHRReady = true; } return _GL_DEBUG_SEVERITY_NOTIFICATION_KHRContent; } }
        private static int _GL_DEBUG_SEVERITY_NOTIFICATION_KHRContent = default;
        private static bool _GL_DEBUG_SEVERITY_NOTIFICATION_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_DEBUG_SOURCE_API_KHR"/>
        /// </summary>
        public static int GL_DEBUG_SOURCE_API_KHR { get { if (!_GL_DEBUG_SOURCE_API_KHRReady) { _GL_DEBUG_SOURCE_API_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_SOURCE_API_KHR"); _GL_DEBUG_SOURCE_API_KHRReady = true; } return _GL_DEBUG_SOURCE_API_KHRContent; } }
        private static int _GL_DEBUG_SOURCE_API_KHRContent = default;
        private static bool _GL_DEBUG_SOURCE_API_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_DEBUG_SOURCE_APPLICATION_KHR"/>
        /// </summary>
        public static int GL_DEBUG_SOURCE_APPLICATION_KHR { get { if (!_GL_DEBUG_SOURCE_APPLICATION_KHRReady) { _GL_DEBUG_SOURCE_APPLICATION_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_SOURCE_APPLICATION_KHR"); _GL_DEBUG_SOURCE_APPLICATION_KHRReady = true; } return _GL_DEBUG_SOURCE_APPLICATION_KHRContent; } }
        private static int _GL_DEBUG_SOURCE_APPLICATION_KHRContent = default;
        private static bool _GL_DEBUG_SOURCE_APPLICATION_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_DEBUG_SOURCE_OTHER_KHR"/>
        /// </summary>
        public static int GL_DEBUG_SOURCE_OTHER_KHR { get { if (!_GL_DEBUG_SOURCE_OTHER_KHRReady) { _GL_DEBUG_SOURCE_OTHER_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_SOURCE_OTHER_KHR"); _GL_DEBUG_SOURCE_OTHER_KHRReady = true; } return _GL_DEBUG_SOURCE_OTHER_KHRContent; } }
        private static int _GL_DEBUG_SOURCE_OTHER_KHRContent = default;
        private static bool _GL_DEBUG_SOURCE_OTHER_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_DEBUG_SOURCE_SHADER_COMPILER_KHR"/>
        /// </summary>
        public static int GL_DEBUG_SOURCE_SHADER_COMPILER_KHR { get { if (!_GL_DEBUG_SOURCE_SHADER_COMPILER_KHRReady) { _GL_DEBUG_SOURCE_SHADER_COMPILER_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_SOURCE_SHADER_COMPILER_KHR"); _GL_DEBUG_SOURCE_SHADER_COMPILER_KHRReady = true; } return _GL_DEBUG_SOURCE_SHADER_COMPILER_KHRContent; } }
        private static int _GL_DEBUG_SOURCE_SHADER_COMPILER_KHRContent = default;
        private static bool _GL_DEBUG_SOURCE_SHADER_COMPILER_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_DEBUG_SOURCE_THIRD_PARTY_KHR"/>
        /// </summary>
        public static int GL_DEBUG_SOURCE_THIRD_PARTY_KHR { get { if (!_GL_DEBUG_SOURCE_THIRD_PARTY_KHRReady) { _GL_DEBUG_SOURCE_THIRD_PARTY_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_SOURCE_THIRD_PARTY_KHR"); _GL_DEBUG_SOURCE_THIRD_PARTY_KHRReady = true; } return _GL_DEBUG_SOURCE_THIRD_PARTY_KHRContent; } }
        private static int _GL_DEBUG_SOURCE_THIRD_PARTY_KHRContent = default;
        private static bool _GL_DEBUG_SOURCE_THIRD_PARTY_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR"/>
        /// </summary>
        public static int GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR { get { if (!_GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHRReady) { _GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR"); _GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHRReady = true; } return _GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHRContent; } }
        private static int _GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHRContent = default;
        private static bool _GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR"/>
        /// </summary>
        public static int GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR { get { if (!_GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHRReady) { _GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR"); _GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHRReady = true; } return _GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHRContent; } }
        private static int _GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHRContent = default;
        private static bool _GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_DEBUG_TYPE_ERROR_KHR"/>
        /// </summary>
        public static int GL_DEBUG_TYPE_ERROR_KHR { get { if (!_GL_DEBUG_TYPE_ERROR_KHRReady) { _GL_DEBUG_TYPE_ERROR_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_TYPE_ERROR_KHR"); _GL_DEBUG_TYPE_ERROR_KHRReady = true; } return _GL_DEBUG_TYPE_ERROR_KHRContent; } }
        private static int _GL_DEBUG_TYPE_ERROR_KHRContent = default;
        private static bool _GL_DEBUG_TYPE_ERROR_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_DEBUG_TYPE_MARKER_KHR"/>
        /// </summary>
        public static int GL_DEBUG_TYPE_MARKER_KHR { get { if (!_GL_DEBUG_TYPE_MARKER_KHRReady) { _GL_DEBUG_TYPE_MARKER_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_TYPE_MARKER_KHR"); _GL_DEBUG_TYPE_MARKER_KHRReady = true; } return _GL_DEBUG_TYPE_MARKER_KHRContent; } }
        private static int _GL_DEBUG_TYPE_MARKER_KHRContent = default;
        private static bool _GL_DEBUG_TYPE_MARKER_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_DEBUG_TYPE_OTHER_KHR"/>
        /// </summary>
        public static int GL_DEBUG_TYPE_OTHER_KHR { get { if (!_GL_DEBUG_TYPE_OTHER_KHRReady) { _GL_DEBUG_TYPE_OTHER_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_TYPE_OTHER_KHR"); _GL_DEBUG_TYPE_OTHER_KHRReady = true; } return _GL_DEBUG_TYPE_OTHER_KHRContent; } }
        private static int _GL_DEBUG_TYPE_OTHER_KHRContent = default;
        private static bool _GL_DEBUG_TYPE_OTHER_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_DEBUG_TYPE_PERFORMANCE_KHR"/>
        /// </summary>
        public static int GL_DEBUG_TYPE_PERFORMANCE_KHR { get { if (!_GL_DEBUG_TYPE_PERFORMANCE_KHRReady) { _GL_DEBUG_TYPE_PERFORMANCE_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_TYPE_PERFORMANCE_KHR"); _GL_DEBUG_TYPE_PERFORMANCE_KHRReady = true; } return _GL_DEBUG_TYPE_PERFORMANCE_KHRContent; } }
        private static int _GL_DEBUG_TYPE_PERFORMANCE_KHRContent = default;
        private static bool _GL_DEBUG_TYPE_PERFORMANCE_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_DEBUG_TYPE_POP_GROUP_KHR"/>
        /// </summary>
        public static int GL_DEBUG_TYPE_POP_GROUP_KHR { get { if (!_GL_DEBUG_TYPE_POP_GROUP_KHRReady) { _GL_DEBUG_TYPE_POP_GROUP_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_TYPE_POP_GROUP_KHR"); _GL_DEBUG_TYPE_POP_GROUP_KHRReady = true; } return _GL_DEBUG_TYPE_POP_GROUP_KHRContent; } }
        private static int _GL_DEBUG_TYPE_POP_GROUP_KHRContent = default;
        private static bool _GL_DEBUG_TYPE_POP_GROUP_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_DEBUG_TYPE_PORTABILITY_KHR"/>
        /// </summary>
        public static int GL_DEBUG_TYPE_PORTABILITY_KHR { get { if (!_GL_DEBUG_TYPE_PORTABILITY_KHRReady) { _GL_DEBUG_TYPE_PORTABILITY_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_TYPE_PORTABILITY_KHR"); _GL_DEBUG_TYPE_PORTABILITY_KHRReady = true; } return _GL_DEBUG_TYPE_PORTABILITY_KHRContent; } }
        private static int _GL_DEBUG_TYPE_PORTABILITY_KHRContent = default;
        private static bool _GL_DEBUG_TYPE_PORTABILITY_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_DEBUG_TYPE_PUSH_GROUP_KHR"/>
        /// </summary>
        public static int GL_DEBUG_TYPE_PUSH_GROUP_KHR { get { if (!_GL_DEBUG_TYPE_PUSH_GROUP_KHRReady) { _GL_DEBUG_TYPE_PUSH_GROUP_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_TYPE_PUSH_GROUP_KHR"); _GL_DEBUG_TYPE_PUSH_GROUP_KHRReady = true; } return _GL_DEBUG_TYPE_PUSH_GROUP_KHRContent; } }
        private static int _GL_DEBUG_TYPE_PUSH_GROUP_KHRContent = default;
        private static bool _GL_DEBUG_TYPE_PUSH_GROUP_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR"/>
        /// </summary>
        public static int GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR { get { if (!_GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHRReady) { _GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR"); _GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHRReady = true; } return _GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHRContent; } }
        private static int _GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHRContent = default;
        private static bool _GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_DECODE_EXT"/>
        /// </summary>
        public static int GL_DECODE_EXT { get { if (!_GL_DECODE_EXTReady) { _GL_DECODE_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_DECODE_EXT"); _GL_DECODE_EXTReady = true; } return _GL_DECODE_EXTContent; } }
        private static int _GL_DECODE_EXTContent = default;
        private static bool _GL_DECODE_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_DIFFERENCE_KHR"/>
        /// </summary>
        public static int GL_DIFFERENCE_KHR { get { if (!_GL_DIFFERENCE_KHRReady) { _GL_DIFFERENCE_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_DIFFERENCE_KHR"); _GL_DIFFERENCE_KHRReady = true; } return _GL_DIFFERENCE_KHRContent; } }
        private static int _GL_DIFFERENCE_KHRContent = default;
        private static bool _GL_DIFFERENCE_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_EXCLUSION_KHR"/>
        /// </summary>
        public static int GL_EXCLUSION_KHR { get { if (!_GL_EXCLUSION_KHRReady) { _GL_EXCLUSION_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_EXCLUSION_KHR"); _GL_EXCLUSION_KHRReady = true; } return _GL_EXCLUSION_KHRContent; } }
        private static int _GL_EXCLUSION_KHRContent = default;
        private static bool _GL_EXCLUSION_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_FIRST_VERTEX_CONVENTION_EXT"/>
        /// </summary>
        public static int GL_FIRST_VERTEX_CONVENTION_EXT { get { if (!_GL_FIRST_VERTEX_CONVENTION_EXTReady) { _GL_FIRST_VERTEX_CONVENTION_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_FIRST_VERTEX_CONVENTION_EXT"); _GL_FIRST_VERTEX_CONVENTION_EXTReady = true; } return _GL_FIRST_VERTEX_CONVENTION_EXTContent; } }
        private static int _GL_FIRST_VERTEX_CONVENTION_EXTContent = default;
        private static bool _GL_FIRST_VERTEX_CONVENTION_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_FRACTIONAL_EVEN_EXT"/>
        /// </summary>
        public static int GL_FRACTIONAL_EVEN_EXT { get { if (!_GL_FRACTIONAL_EVEN_EXTReady) { _GL_FRACTIONAL_EVEN_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_FRACTIONAL_EVEN_EXT"); _GL_FRACTIONAL_EVEN_EXTReady = true; } return _GL_FRACTIONAL_EVEN_EXTContent; } }
        private static int _GL_FRACTIONAL_EVEN_EXTContent = default;
        private static bool _GL_FRACTIONAL_EVEN_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_FRACTIONAL_ODD_EXT"/>
        /// </summary>
        public static int GL_FRACTIONAL_ODD_EXT { get { if (!_GL_FRACTIONAL_ODD_EXTReady) { _GL_FRACTIONAL_ODD_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_FRACTIONAL_ODD_EXT"); _GL_FRACTIONAL_ODD_EXTReady = true; } return _GL_FRACTIONAL_ODD_EXTContent; } }
        private static int _GL_FRACTIONAL_ODD_EXTContent = default;
        private static bool _GL_FRACTIONAL_ODD_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES"/>
        /// </summary>
        public static int GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES { get { if (!_GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OESReady) { _GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OESContent = SGetField<int>(LocalBridgeClazz, "GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES"); _GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OESReady = true; } return _GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OESContent; } }
        private static int _GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OESContent = default;
        private static bool _GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT { get { if (!_GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXTReady) { _GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT"); _GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXTReady = true; } return _GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXTContent; } }
        private static int _GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXTContent = default;
        private static bool _GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT { get { if (!_GL_FRAMEBUFFER_DEFAULT_LAYERS_EXTReady) { _GL_FRAMEBUFFER_DEFAULT_LAYERS_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT"); _GL_FRAMEBUFFER_DEFAULT_LAYERS_EXTReady = true; } return _GL_FRAMEBUFFER_DEFAULT_LAYERS_EXTContent; } }
        private static int _GL_FRAMEBUFFER_DEFAULT_LAYERS_EXTContent = default;
        private static bool _GL_FRAMEBUFFER_DEFAULT_LAYERS_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT { get { if (!_GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXTReady) { _GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT"); _GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXTReady = true; } return _GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXTContent; } }
        private static int _GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXTContent = default;
        private static bool _GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_GEOMETRY_LINKED_INPUT_TYPE_EXT"/>
        /// </summary>
        public static int GL_GEOMETRY_LINKED_INPUT_TYPE_EXT { get { if (!_GL_GEOMETRY_LINKED_INPUT_TYPE_EXTReady) { _GL_GEOMETRY_LINKED_INPUT_TYPE_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_GEOMETRY_LINKED_INPUT_TYPE_EXT"); _GL_GEOMETRY_LINKED_INPUT_TYPE_EXTReady = true; } return _GL_GEOMETRY_LINKED_INPUT_TYPE_EXTContent; } }
        private static int _GL_GEOMETRY_LINKED_INPUT_TYPE_EXTContent = default;
        private static bool _GL_GEOMETRY_LINKED_INPUT_TYPE_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT"/>
        /// </summary>
        public static int GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT { get { if (!_GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXTReady) { _GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT"); _GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXTReady = true; } return _GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXTContent; } }
        private static int _GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXTContent = default;
        private static bool _GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_GEOMETRY_LINKED_VERTICES_OUT_EXT"/>
        /// </summary>
        public static int GL_GEOMETRY_LINKED_VERTICES_OUT_EXT { get { if (!_GL_GEOMETRY_LINKED_VERTICES_OUT_EXTReady) { _GL_GEOMETRY_LINKED_VERTICES_OUT_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_GEOMETRY_LINKED_VERTICES_OUT_EXT"); _GL_GEOMETRY_LINKED_VERTICES_OUT_EXTReady = true; } return _GL_GEOMETRY_LINKED_VERTICES_OUT_EXTContent; } }
        private static int _GL_GEOMETRY_LINKED_VERTICES_OUT_EXTContent = default;
        private static bool _GL_GEOMETRY_LINKED_VERTICES_OUT_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_GEOMETRY_SHADER_BIT_EXT"/>
        /// </summary>
        public static int GL_GEOMETRY_SHADER_BIT_EXT { get { if (!_GL_GEOMETRY_SHADER_BIT_EXTReady) { _GL_GEOMETRY_SHADER_BIT_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_GEOMETRY_SHADER_BIT_EXT"); _GL_GEOMETRY_SHADER_BIT_EXTReady = true; } return _GL_GEOMETRY_SHADER_BIT_EXTContent; } }
        private static int _GL_GEOMETRY_SHADER_BIT_EXTContent = default;
        private static bool _GL_GEOMETRY_SHADER_BIT_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_GEOMETRY_SHADER_EXT"/>
        /// </summary>
        public static int GL_GEOMETRY_SHADER_EXT { get { if (!_GL_GEOMETRY_SHADER_EXTReady) { _GL_GEOMETRY_SHADER_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_GEOMETRY_SHADER_EXT"); _GL_GEOMETRY_SHADER_EXTReady = true; } return _GL_GEOMETRY_SHADER_EXTContent; } }
        private static int _GL_GEOMETRY_SHADER_EXTContent = default;
        private static bool _GL_GEOMETRY_SHADER_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_GEOMETRY_SHADER_INVOCATIONS_EXT"/>
        /// </summary>
        public static int GL_GEOMETRY_SHADER_INVOCATIONS_EXT { get { if (!_GL_GEOMETRY_SHADER_INVOCATIONS_EXTReady) { _GL_GEOMETRY_SHADER_INVOCATIONS_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_GEOMETRY_SHADER_INVOCATIONS_EXT"); _GL_GEOMETRY_SHADER_INVOCATIONS_EXTReady = true; } return _GL_GEOMETRY_SHADER_INVOCATIONS_EXTContent; } }
        private static int _GL_GEOMETRY_SHADER_INVOCATIONS_EXTContent = default;
        private static bool _GL_GEOMETRY_SHADER_INVOCATIONS_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_HARDLIGHT_KHR"/>
        /// </summary>
        public static int GL_HARDLIGHT_KHR { get { if (!_GL_HARDLIGHT_KHRReady) { _GL_HARDLIGHT_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_HARDLIGHT_KHR"); _GL_HARDLIGHT_KHRReady = true; } return _GL_HARDLIGHT_KHRContent; } }
        private static int _GL_HARDLIGHT_KHRContent = default;
        private static bool _GL_HARDLIGHT_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_HSL_COLOR_KHR"/>
        /// </summary>
        public static int GL_HSL_COLOR_KHR { get { if (!_GL_HSL_COLOR_KHRReady) { _GL_HSL_COLOR_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_HSL_COLOR_KHR"); _GL_HSL_COLOR_KHRReady = true; } return _GL_HSL_COLOR_KHRContent; } }
        private static int _GL_HSL_COLOR_KHRContent = default;
        private static bool _GL_HSL_COLOR_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_HSL_HUE_KHR"/>
        /// </summary>
        public static int GL_HSL_HUE_KHR { get { if (!_GL_HSL_HUE_KHRReady) { _GL_HSL_HUE_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_HSL_HUE_KHR"); _GL_HSL_HUE_KHRReady = true; } return _GL_HSL_HUE_KHRContent; } }
        private static int _GL_HSL_HUE_KHRContent = default;
        private static bool _GL_HSL_HUE_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_HSL_LUMINOSITY_KHR"/>
        /// </summary>
        public static int GL_HSL_LUMINOSITY_KHR { get { if (!_GL_HSL_LUMINOSITY_KHRReady) { _GL_HSL_LUMINOSITY_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_HSL_LUMINOSITY_KHR"); _GL_HSL_LUMINOSITY_KHRReady = true; } return _GL_HSL_LUMINOSITY_KHRContent; } }
        private static int _GL_HSL_LUMINOSITY_KHRContent = default;
        private static bool _GL_HSL_LUMINOSITY_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_HSL_SATURATION_KHR"/>
        /// </summary>
        public static int GL_HSL_SATURATION_KHR { get { if (!_GL_HSL_SATURATION_KHRReady) { _GL_HSL_SATURATION_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_HSL_SATURATION_KHR"); _GL_HSL_SATURATION_KHRReady = true; } return _GL_HSL_SATURATION_KHRContent; } }
        private static int _GL_HSL_SATURATION_KHRContent = default;
        private static bool _GL_HSL_SATURATION_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_IMAGE_BUFFER_EXT"/>
        /// </summary>
        public static int GL_IMAGE_BUFFER_EXT { get { if (!_GL_IMAGE_BUFFER_EXTReady) { _GL_IMAGE_BUFFER_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_IMAGE_BUFFER_EXT"); _GL_IMAGE_BUFFER_EXTReady = true; } return _GL_IMAGE_BUFFER_EXTContent; } }
        private static int _GL_IMAGE_BUFFER_EXTContent = default;
        private static bool _GL_IMAGE_BUFFER_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_IMAGE_CUBE_MAP_ARRAY_EXT"/>
        /// </summary>
        public static int GL_IMAGE_CUBE_MAP_ARRAY_EXT { get { if (!_GL_IMAGE_CUBE_MAP_ARRAY_EXTReady) { _GL_IMAGE_CUBE_MAP_ARRAY_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_IMAGE_CUBE_MAP_ARRAY_EXT"); _GL_IMAGE_CUBE_MAP_ARRAY_EXTReady = true; } return _GL_IMAGE_CUBE_MAP_ARRAY_EXTContent; } }
        private static int _GL_IMAGE_CUBE_MAP_ARRAY_EXTContent = default;
        private static bool _GL_IMAGE_CUBE_MAP_ARRAY_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_INT_IMAGE_BUFFER_EXT"/>
        /// </summary>
        public static int GL_INT_IMAGE_BUFFER_EXT { get { if (!_GL_INT_IMAGE_BUFFER_EXTReady) { _GL_INT_IMAGE_BUFFER_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_INT_IMAGE_BUFFER_EXT"); _GL_INT_IMAGE_BUFFER_EXTReady = true; } return _GL_INT_IMAGE_BUFFER_EXTContent; } }
        private static int _GL_INT_IMAGE_BUFFER_EXTContent = default;
        private static bool _GL_INT_IMAGE_BUFFER_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT"/>
        /// </summary>
        public static int GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT { get { if (!_GL_INT_IMAGE_CUBE_MAP_ARRAY_EXTReady) { _GL_INT_IMAGE_CUBE_MAP_ARRAY_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT"); _GL_INT_IMAGE_CUBE_MAP_ARRAY_EXTReady = true; } return _GL_INT_IMAGE_CUBE_MAP_ARRAY_EXTContent; } }
        private static int _GL_INT_IMAGE_CUBE_MAP_ARRAY_EXTContent = default;
        private static bool _GL_INT_IMAGE_CUBE_MAP_ARRAY_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES"/>
        /// </summary>
        public static int GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES { get { if (!_GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OESReady) { _GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OESContent = SGetField<int>(LocalBridgeClazz, "GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES"); _GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OESReady = true; } return _GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OESContent; } }
        private static int _GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OESContent = default;
        private static bool _GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_INT_SAMPLER_BUFFER_EXT"/>
        /// </summary>
        public static int GL_INT_SAMPLER_BUFFER_EXT { get { if (!_GL_INT_SAMPLER_BUFFER_EXTReady) { _GL_INT_SAMPLER_BUFFER_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_INT_SAMPLER_BUFFER_EXT"); _GL_INT_SAMPLER_BUFFER_EXTReady = true; } return _GL_INT_SAMPLER_BUFFER_EXTContent; } }
        private static int _GL_INT_SAMPLER_BUFFER_EXTContent = default;
        private static bool _GL_INT_SAMPLER_BUFFER_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT"/>
        /// </summary>
        public static int GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT { get { if (!_GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXTReady) { _GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT"); _GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXTReady = true; } return _GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXTContent; } }
        private static int _GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXTContent = default;
        private static bool _GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_IS_PER_PATCH_EXT"/>
        /// </summary>
        public static int GL_IS_PER_PATCH_EXT { get { if (!_GL_IS_PER_PATCH_EXTReady) { _GL_IS_PER_PATCH_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_IS_PER_PATCH_EXT"); _GL_IS_PER_PATCH_EXTReady = true; } return _GL_IS_PER_PATCH_EXTContent; } }
        private static int _GL_IS_PER_PATCH_EXTContent = default;
        private static bool _GL_IS_PER_PATCH_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_ISOLINES_EXT"/>
        /// </summary>
        public static int GL_ISOLINES_EXT { get { if (!_GL_ISOLINES_EXTReady) { _GL_ISOLINES_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_ISOLINES_EXT"); _GL_ISOLINES_EXTReady = true; } return _GL_ISOLINES_EXTContent; } }
        private static int _GL_ISOLINES_EXTContent = default;
        private static bool _GL_ISOLINES_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_LAST_VERTEX_CONVENTION_EXT"/>
        /// </summary>
        public static int GL_LAST_VERTEX_CONVENTION_EXT { get { if (!_GL_LAST_VERTEX_CONVENTION_EXTReady) { _GL_LAST_VERTEX_CONVENTION_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_LAST_VERTEX_CONVENTION_EXT"); _GL_LAST_VERTEX_CONVENTION_EXTReady = true; } return _GL_LAST_VERTEX_CONVENTION_EXTContent; } }
        private static int _GL_LAST_VERTEX_CONVENTION_EXTContent = default;
        private static bool _GL_LAST_VERTEX_CONVENTION_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_LAYER_PROVOKING_VERTEX_EXT"/>
        /// </summary>
        public static int GL_LAYER_PROVOKING_VERTEX_EXT { get { if (!_GL_LAYER_PROVOKING_VERTEX_EXTReady) { _GL_LAYER_PROVOKING_VERTEX_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_LAYER_PROVOKING_VERTEX_EXT"); _GL_LAYER_PROVOKING_VERTEX_EXTReady = true; } return _GL_LAYER_PROVOKING_VERTEX_EXTContent; } }
        private static int _GL_LAYER_PROVOKING_VERTEX_EXTContent = default;
        private static bool _GL_LAYER_PROVOKING_VERTEX_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_LIGHTEN_KHR"/>
        /// </summary>
        public static int GL_LIGHTEN_KHR { get { if (!_GL_LIGHTEN_KHRReady) { _GL_LIGHTEN_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_LIGHTEN_KHR"); _GL_LIGHTEN_KHRReady = true; } return _GL_LIGHTEN_KHRContent; } }
        private static int _GL_LIGHTEN_KHRContent = default;
        private static bool _GL_LIGHTEN_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_LINE_STRIP_ADJACENCY_EXT"/>
        /// </summary>
        public static int GL_LINE_STRIP_ADJACENCY_EXT { get { if (!_GL_LINE_STRIP_ADJACENCY_EXTReady) { _GL_LINE_STRIP_ADJACENCY_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_LINE_STRIP_ADJACENCY_EXT"); _GL_LINE_STRIP_ADJACENCY_EXTReady = true; } return _GL_LINE_STRIP_ADJACENCY_EXTContent; } }
        private static int _GL_LINE_STRIP_ADJACENCY_EXTContent = default;
        private static bool _GL_LINE_STRIP_ADJACENCY_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_LINES_ADJACENCY_EXT"/>
        /// </summary>
        public static int GL_LINES_ADJACENCY_EXT { get { if (!_GL_LINES_ADJACENCY_EXTReady) { _GL_LINES_ADJACENCY_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_LINES_ADJACENCY_EXT"); _GL_LINES_ADJACENCY_EXTReady = true; } return _GL_LINES_ADJACENCY_EXTContent; } }
        private static int _GL_LINES_ADJACENCY_EXTContent = default;
        private static bool _GL_LINES_ADJACENCY_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT"/>
        /// </summary>
        public static int GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT { get { if (!_GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXTReady) { _GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT"); _GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXTReady = true; } return _GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXTContent; } }
        private static int _GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXTContent = default;
        private static bool _GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT"/>
        /// </summary>
        public static int GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT { get { if (!_GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXTReady) { _GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT"); _GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXTReady = true; } return _GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXTContent; } }
        private static int _GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXTContent = default;
        private static bool _GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT"/>
        /// </summary>
        public static int GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT { get { if (!_GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXTReady) { _GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT"); _GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXTReady = true; } return _GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXTContent; } }
        private static int _GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXTContent = default;
        private static bool _GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR"/>
        /// </summary>
        public static int GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR { get { if (!_GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHRReady) { _GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR"); _GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHRReady = true; } return _GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHRContent; } }
        private static int _GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHRContent = default;
        private static bool _GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_DEBUG_LOGGED_MESSAGES_KHR"/>
        /// </summary>
        public static int GL_MAX_DEBUG_LOGGED_MESSAGES_KHR { get { if (!_GL_MAX_DEBUG_LOGGED_MESSAGES_KHRReady) { _GL_MAX_DEBUG_LOGGED_MESSAGES_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_DEBUG_LOGGED_MESSAGES_KHR"); _GL_MAX_DEBUG_LOGGED_MESSAGES_KHRReady = true; } return _GL_MAX_DEBUG_LOGGED_MESSAGES_KHRContent; } }
        private static int _GL_MAX_DEBUG_LOGGED_MESSAGES_KHRContent = default;
        private static bool _GL_MAX_DEBUG_LOGGED_MESSAGES_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_DEBUG_MESSAGE_LENGTH_KHR"/>
        /// </summary>
        public static int GL_MAX_DEBUG_MESSAGE_LENGTH_KHR { get { if (!_GL_MAX_DEBUG_MESSAGE_LENGTH_KHRReady) { _GL_MAX_DEBUG_MESSAGE_LENGTH_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_DEBUG_MESSAGE_LENGTH_KHR"); _GL_MAX_DEBUG_MESSAGE_LENGTH_KHRReady = true; } return _GL_MAX_DEBUG_MESSAGE_LENGTH_KHRContent; } }
        private static int _GL_MAX_DEBUG_MESSAGE_LENGTH_KHRContent = default;
        private static bool _GL_MAX_DEBUG_MESSAGE_LENGTH_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES"/>
        /// </summary>
        public static int GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES { get { if (!_GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OESReady) { _GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OESContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES"); _GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OESReady = true; } return _GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OESContent; } }
        private static int _GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OESContent = default;
        private static bool _GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_FRAMEBUFFER_LAYERS_EXT"/>
        /// </summary>
        public static int GL_MAX_FRAMEBUFFER_LAYERS_EXT { get { if (!_GL_MAX_FRAMEBUFFER_LAYERS_EXTReady) { _GL_MAX_FRAMEBUFFER_LAYERS_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_FRAMEBUFFER_LAYERS_EXT"); _GL_MAX_FRAMEBUFFER_LAYERS_EXTReady = true; } return _GL_MAX_FRAMEBUFFER_LAYERS_EXTContent; } }
        private static int _GL_MAX_FRAMEBUFFER_LAYERS_EXTContent = default;
        private static bool _GL_MAX_FRAMEBUFFER_LAYERS_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT"/>
        /// </summary>
        public static int GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT { get { if (!_GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXTReady) { _GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT"); _GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXTReady = true; } return _GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXTContent; } }
        private static int _GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXTContent = default;
        private static bool _GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT"/>
        /// </summary>
        public static int GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT { get { if (!_GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXTReady) { _GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT"); _GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXTReady = true; } return _GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXTContent; } }
        private static int _GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXTContent = default;
        private static bool _GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT"/>
        /// </summary>
        public static int GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT { get { if (!_GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXTReady) { _GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT"); _GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXTReady = true; } return _GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXTContent; } }
        private static int _GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXTContent = default;
        private static bool _GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT"/>
        /// </summary>
        public static int GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT { get { if (!_GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXTReady) { _GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT"); _GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXTReady = true; } return _GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXTContent; } }
        private static int _GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXTContent = default;
        private static bool _GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT"/>
        /// </summary>
        public static int GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT { get { if (!_GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXTReady) { _GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT"); _GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXTReady = true; } return _GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXTContent; } }
        private static int _GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXTContent = default;
        private static bool _GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT"/>
        /// </summary>
        public static int GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT { get { if (!_GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXTReady) { _GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT"); _GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXTReady = true; } return _GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXTContent; } }
        private static int _GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXTContent = default;
        private static bool _GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT"/>
        /// </summary>
        public static int GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT { get { if (!_GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXTReady) { _GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT"); _GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXTReady = true; } return _GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXTContent; } }
        private static int _GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXTContent = default;
        private static bool _GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT"/>
        /// </summary>
        public static int GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT { get { if (!_GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXTReady) { _GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT"); _GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXTReady = true; } return _GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXTContent; } }
        private static int _GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXTContent = default;
        private static bool _GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT"/>
        /// </summary>
        public static int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT { get { if (!_GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXTReady) { _GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT"); _GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXTReady = true; } return _GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXTContent; } }
        private static int _GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXTContent = default;
        private static bool _GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT"/>
        /// </summary>
        public static int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT { get { if (!_GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXTReady) { _GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT"); _GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXTReady = true; } return _GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXTContent; } }
        private static int _GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXTContent = default;
        private static bool _GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT"/>
        /// </summary>
        public static int GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT { get { if (!_GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXTReady) { _GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT"); _GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXTReady = true; } return _GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXTContent; } }
        private static int _GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXTContent = default;
        private static bool _GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT"/>
        /// </summary>
        public static int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT { get { if (!_GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXTReady) { _GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT"); _GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXTReady = true; } return _GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXTContent; } }
        private static int _GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXTContent = default;
        private static bool _GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_LABEL_LENGTH_KHR"/>
        /// </summary>
        public static int GL_MAX_LABEL_LENGTH_KHR { get { if (!_GL_MAX_LABEL_LENGTH_KHRReady) { _GL_MAX_LABEL_LENGTH_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_LABEL_LENGTH_KHR"); _GL_MAX_LABEL_LENGTH_KHRReady = true; } return _GL_MAX_LABEL_LENGTH_KHRContent; } }
        private static int _GL_MAX_LABEL_LENGTH_KHRContent = default;
        private static bool _GL_MAX_LABEL_LENGTH_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_PATCH_VERTICES_EXT"/>
        /// </summary>
        public static int GL_MAX_PATCH_VERTICES_EXT { get { if (!_GL_MAX_PATCH_VERTICES_EXTReady) { _GL_MAX_PATCH_VERTICES_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_PATCH_VERTICES_EXT"); _GL_MAX_PATCH_VERTICES_EXTReady = true; } return _GL_MAX_PATCH_VERTICES_EXTContent; } }
        private static int _GL_MAX_PATCH_VERTICES_EXTContent = default;
        private static bool _GL_MAX_PATCH_VERTICES_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT"/>
        /// </summary>
        public static int GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT { get { if (!_GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXTReady) { _GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT"); _GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXTReady = true; } return _GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXTContent; } }
        private static int _GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXTContent = default;
        private static bool _GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT"/>
        /// </summary>
        public static int GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT { get { if (!_GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXTReady) { _GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT"); _GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXTReady = true; } return _GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXTContent; } }
        private static int _GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXTContent = default;
        private static bool _GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT"/>
        /// </summary>
        public static int GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT { get { if (!_GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXTReady) { _GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT"); _GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXTReady = true; } return _GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXTContent; } }
        private static int _GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXTContent = default;
        private static bool _GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT"/>
        /// </summary>
        public static int GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT { get { if (!_GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXTReady) { _GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT"); _GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXTReady = true; } return _GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXTContent; } }
        private static int _GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXTContent = default;
        private static bool _GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT"/>
        /// </summary>
        public static int GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT { get { if (!_GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXTReady) { _GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT"); _GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXTReady = true; } return _GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXTContent; } }
        private static int _GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXTContent = default;
        private static bool _GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT"/>
        /// </summary>
        public static int GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT { get { if (!_GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXTReady) { _GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT"); _GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXTReady = true; } return _GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXTContent; } }
        private static int _GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXTContent = default;
        private static bool _GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT"/>
        /// </summary>
        public static int GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT { get { if (!_GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXTReady) { _GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT"); _GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXTReady = true; } return _GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXTContent; } }
        private static int _GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXTContent = default;
        private static bool _GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT"/>
        /// </summary>
        public static int GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT { get { if (!_GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXTReady) { _GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT"); _GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXTReady = true; } return _GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXTContent; } }
        private static int _GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXTContent = default;
        private static bool _GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT"/>
        /// </summary>
        public static int GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT { get { if (!_GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXTReady) { _GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT"); _GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXTReady = true; } return _GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXTContent; } }
        private static int _GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXTContent = default;
        private static bool _GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT"/>
        /// </summary>
        public static int GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT { get { if (!_GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXTReady) { _GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT"); _GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXTReady = true; } return _GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXTContent; } }
        private static int _GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXTContent = default;
        private static bool _GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT"/>
        /// </summary>
        public static int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT { get { if (!_GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXTReady) { _GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT"); _GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXTReady = true; } return _GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXTContent; } }
        private static int _GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXTContent = default;
        private static bool _GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT"/>
        /// </summary>
        public static int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT { get { if (!_GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXTReady) { _GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT"); _GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXTReady = true; } return _GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXTContent; } }
        private static int _GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXTContent = default;
        private static bool _GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT"/>
        /// </summary>
        public static int GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT { get { if (!_GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXTReady) { _GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT"); _GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXTReady = true; } return _GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXTContent; } }
        private static int _GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXTContent = default;
        private static bool _GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT"/>
        /// </summary>
        public static int GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT { get { if (!_GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXTReady) { _GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT"); _GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXTReady = true; } return _GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXTContent; } }
        private static int _GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXTContent = default;
        private static bool _GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT"/>
        /// </summary>
        public static int GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT { get { if (!_GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXTReady) { _GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT"); _GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXTReady = true; } return _GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXTContent; } }
        private static int _GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXTContent = default;
        private static bool _GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT"/>
        /// </summary>
        public static int GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT { get { if (!_GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXTReady) { _GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT"); _GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXTReady = true; } return _GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXTContent; } }
        private static int _GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXTContent = default;
        private static bool _GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT"/>
        /// </summary>
        public static int GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT { get { if (!_GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXTReady) { _GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT"); _GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXTReady = true; } return _GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXTContent; } }
        private static int _GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXTContent = default;
        private static bool _GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT"/>
        /// </summary>
        public static int GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT { get { if (!_GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXTReady) { _GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT"); _GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXTReady = true; } return _GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXTContent; } }
        private static int _GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXTContent = default;
        private static bool _GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT"/>
        /// </summary>
        public static int GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT { get { if (!_GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXTReady) { _GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT"); _GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXTReady = true; } return _GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXTContent; } }
        private static int _GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXTContent = default;
        private static bool _GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_TESS_GEN_LEVEL_EXT"/>
        /// </summary>
        public static int GL_MAX_TESS_GEN_LEVEL_EXT { get { if (!_GL_MAX_TESS_GEN_LEVEL_EXTReady) { _GL_MAX_TESS_GEN_LEVEL_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_GEN_LEVEL_EXT"); _GL_MAX_TESS_GEN_LEVEL_EXTReady = true; } return _GL_MAX_TESS_GEN_LEVEL_EXTContent; } }
        private static int _GL_MAX_TESS_GEN_LEVEL_EXTContent = default;
        private static bool _GL_MAX_TESS_GEN_LEVEL_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_TESS_PATCH_COMPONENTS_EXT"/>
        /// </summary>
        public static int GL_MAX_TESS_PATCH_COMPONENTS_EXT { get { if (!_GL_MAX_TESS_PATCH_COMPONENTS_EXTReady) { _GL_MAX_TESS_PATCH_COMPONENTS_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TESS_PATCH_COMPONENTS_EXT"); _GL_MAX_TESS_PATCH_COMPONENTS_EXTReady = true; } return _GL_MAX_TESS_PATCH_COMPONENTS_EXTContent; } }
        private static int _GL_MAX_TESS_PATCH_COMPONENTS_EXTContent = default;
        private static bool _GL_MAX_TESS_PATCH_COMPONENTS_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MAX_TEXTURE_BUFFER_SIZE_EXT"/>
        /// </summary>
        public static int GL_MAX_TEXTURE_BUFFER_SIZE_EXT { get { if (!_GL_MAX_TEXTURE_BUFFER_SIZE_EXTReady) { _GL_MAX_TEXTURE_BUFFER_SIZE_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TEXTURE_BUFFER_SIZE_EXT"); _GL_MAX_TEXTURE_BUFFER_SIZE_EXTReady = true; } return _GL_MAX_TEXTURE_BUFFER_SIZE_EXTContent; } }
        private static int _GL_MAX_TEXTURE_BUFFER_SIZE_EXTContent = default;
        private static bool _GL_MAX_TEXTURE_BUFFER_SIZE_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES"/>
        /// </summary>
        public static int GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES { get { if (!_GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OESReady) { _GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OESContent = SGetField<int>(LocalBridgeClazz, "GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES"); _GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OESReady = true; } return _GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OESContent; } }
        private static int _GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OESContent = default;
        private static bool _GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MIN_SAMPLE_SHADING_VALUE_OES"/>
        /// </summary>
        public static int GL_MIN_SAMPLE_SHADING_VALUE_OES { get { if (!_GL_MIN_SAMPLE_SHADING_VALUE_OESReady) { _GL_MIN_SAMPLE_SHADING_VALUE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_MIN_SAMPLE_SHADING_VALUE_OES"); _GL_MIN_SAMPLE_SHADING_VALUE_OESReady = true; } return _GL_MIN_SAMPLE_SHADING_VALUE_OESContent; } }
        private static int _GL_MIN_SAMPLE_SHADING_VALUE_OESContent = default;
        private static bool _GL_MIN_SAMPLE_SHADING_VALUE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_MULTIPLY_KHR"/>
        /// </summary>
        public static int GL_MULTIPLY_KHR { get { if (!_GL_MULTIPLY_KHRReady) { _GL_MULTIPLY_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_MULTIPLY_KHR"); _GL_MULTIPLY_KHRReady = true; } return _GL_MULTIPLY_KHRContent; } }
        private static int _GL_MULTIPLY_KHRContent = default;
        private static bool _GL_MULTIPLY_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_OVERLAY_KHR"/>
        /// </summary>
        public static int GL_OVERLAY_KHR { get { if (!_GL_OVERLAY_KHRReady) { _GL_OVERLAY_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_OVERLAY_KHR"); _GL_OVERLAY_KHRReady = true; } return _GL_OVERLAY_KHRContent; } }
        private static int _GL_OVERLAY_KHRContent = default;
        private static bool _GL_OVERLAY_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_PATCH_VERTICES_EXT"/>
        /// </summary>
        public static int GL_PATCH_VERTICES_EXT { get { if (!_GL_PATCH_VERTICES_EXTReady) { _GL_PATCH_VERTICES_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_PATCH_VERTICES_EXT"); _GL_PATCH_VERTICES_EXTReady = true; } return _GL_PATCH_VERTICES_EXTContent; } }
        private static int _GL_PATCH_VERTICES_EXTContent = default;
        private static bool _GL_PATCH_VERTICES_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_PATCHES_EXT"/>
        /// </summary>
        public static int GL_PATCHES_EXT { get { if (!_GL_PATCHES_EXTReady) { _GL_PATCHES_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_PATCHES_EXT"); _GL_PATCHES_EXTReady = true; } return _GL_PATCHES_EXTContent; } }
        private static int _GL_PATCHES_EXTContent = default;
        private static bool _GL_PATCHES_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_PRIMITIVE_BOUNDING_BOX_EXT"/>
        /// </summary>
        public static int GL_PRIMITIVE_BOUNDING_BOX_EXT { get { if (!_GL_PRIMITIVE_BOUNDING_BOX_EXTReady) { _GL_PRIMITIVE_BOUNDING_BOX_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_PRIMITIVE_BOUNDING_BOX_EXT"); _GL_PRIMITIVE_BOUNDING_BOX_EXTReady = true; } return _GL_PRIMITIVE_BOUNDING_BOX_EXTContent; } }
        private static int _GL_PRIMITIVE_BOUNDING_BOX_EXTContent = default;
        private static bool _GL_PRIMITIVE_BOUNDING_BOX_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED"/>
        /// </summary>
        public static int GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED { get { if (!_GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTEDReady) { _GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTEDContent = SGetField<int>(LocalBridgeClazz, "GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED"); _GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTEDReady = true; } return _GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTEDContent; } }
        private static int _GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTEDContent = default;
        private static bool _GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_PRIMITIVES_GENERATED_EXT"/>
        /// </summary>
        public static int GL_PRIMITIVES_GENERATED_EXT { get { if (!_GL_PRIMITIVES_GENERATED_EXTReady) { _GL_PRIMITIVES_GENERATED_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_PRIMITIVES_GENERATED_EXT"); _GL_PRIMITIVES_GENERATED_EXTReady = true; } return _GL_PRIMITIVES_GENERATED_EXTContent; } }
        private static int _GL_PRIMITIVES_GENERATED_EXTContent = default;
        private static bool _GL_PRIMITIVES_GENERATED_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_PROGRAM_KHR"/>
        /// </summary>
        public static int GL_PROGRAM_KHR { get { if (!_GL_PROGRAM_KHRReady) { _GL_PROGRAM_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_PROGRAM_KHR"); _GL_PROGRAM_KHRReady = true; } return _GL_PROGRAM_KHRContent; } }
        private static int _GL_PROGRAM_KHRContent = default;
        private static bool _GL_PROGRAM_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_QUADS_EXT"/>
        /// </summary>
        public static int GL_QUADS_EXT { get { if (!_GL_QUADS_EXTReady) { _GL_QUADS_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_QUADS_EXT"); _GL_QUADS_EXTReady = true; } return _GL_QUADS_EXTContent; } }
        private static int _GL_QUADS_EXTContent = default;
        private static bool _GL_QUADS_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_QUERY_KHR"/>
        /// </summary>
        public static int GL_QUERY_KHR { get { if (!_GL_QUERY_KHRReady) { _GL_QUERY_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_QUERY_KHR"); _GL_QUERY_KHRReady = true; } return _GL_QUERY_KHRContent; } }
        private static int _GL_QUERY_KHRContent = default;
        private static bool _GL_QUERY_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_REFERENCED_BY_GEOMETRY_SHADER_EXT"/>
        /// </summary>
        public static int GL_REFERENCED_BY_GEOMETRY_SHADER_EXT { get { if (!_GL_REFERENCED_BY_GEOMETRY_SHADER_EXTReady) { _GL_REFERENCED_BY_GEOMETRY_SHADER_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_REFERENCED_BY_GEOMETRY_SHADER_EXT"); _GL_REFERENCED_BY_GEOMETRY_SHADER_EXTReady = true; } return _GL_REFERENCED_BY_GEOMETRY_SHADER_EXTContent; } }
        private static int _GL_REFERENCED_BY_GEOMETRY_SHADER_EXTContent = default;
        private static bool _GL_REFERENCED_BY_GEOMETRY_SHADER_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT"/>
        /// </summary>
        public static int GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT { get { if (!_GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXTReady) { _GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT"); _GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXTReady = true; } return _GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXTContent; } }
        private static int _GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXTContent = default;
        private static bool _GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT"/>
        /// </summary>
        public static int GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT { get { if (!_GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXTReady) { _GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT"); _GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXTReady = true; } return _GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXTContent; } }
        private static int _GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXTContent = default;
        private static bool _GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_SAMPLE_SHADING_OES"/>
        /// </summary>
        public static int GL_SAMPLE_SHADING_OES { get { if (!_GL_SAMPLE_SHADING_OESReady) { _GL_SAMPLE_SHADING_OESContent = SGetField<int>(LocalBridgeClazz, "GL_SAMPLE_SHADING_OES"); _GL_SAMPLE_SHADING_OESReady = true; } return _GL_SAMPLE_SHADING_OESContent; } }
        private static int _GL_SAMPLE_SHADING_OESContent = default;
        private static bool _GL_SAMPLE_SHADING_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES"/>
        /// </summary>
        public static int GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES { get { if (!_GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OESReady) { _GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OESContent = SGetField<int>(LocalBridgeClazz, "GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES"); _GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OESReady = true; } return _GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OESContent; } }
        private static int _GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OESContent = default;
        private static bool _GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_SAMPLER_BUFFER_EXT"/>
        /// </summary>
        public static int GL_SAMPLER_BUFFER_EXT { get { if (!_GL_SAMPLER_BUFFER_EXTReady) { _GL_SAMPLER_BUFFER_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_SAMPLER_BUFFER_EXT"); _GL_SAMPLER_BUFFER_EXTReady = true; } return _GL_SAMPLER_BUFFER_EXTContent; } }
        private static int _GL_SAMPLER_BUFFER_EXTContent = default;
        private static bool _GL_SAMPLER_BUFFER_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_SAMPLER_CUBE_MAP_ARRAY_EXT"/>
        /// </summary>
        public static int GL_SAMPLER_CUBE_MAP_ARRAY_EXT { get { if (!_GL_SAMPLER_CUBE_MAP_ARRAY_EXTReady) { _GL_SAMPLER_CUBE_MAP_ARRAY_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_SAMPLER_CUBE_MAP_ARRAY_EXT"); _GL_SAMPLER_CUBE_MAP_ARRAY_EXTReady = true; } return _GL_SAMPLER_CUBE_MAP_ARRAY_EXTContent; } }
        private static int _GL_SAMPLER_CUBE_MAP_ARRAY_EXTContent = default;
        private static bool _GL_SAMPLER_CUBE_MAP_ARRAY_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT"/>
        /// </summary>
        public static int GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT { get { if (!_GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXTReady) { _GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT"); _GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXTReady = true; } return _GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXTContent; } }
        private static int _GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXTContent = default;
        private static bool _GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_SAMPLER_KHR"/>
        /// </summary>
        public static int GL_SAMPLER_KHR { get { if (!_GL_SAMPLER_KHRReady) { _GL_SAMPLER_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_SAMPLER_KHR"); _GL_SAMPLER_KHRReady = true; } return _GL_SAMPLER_KHRContent; } }
        private static int _GL_SAMPLER_KHRContent = default;
        private static bool _GL_SAMPLER_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_SCREEN_KHR"/>
        /// </summary>
        public static int GL_SCREEN_KHR { get { if (!_GL_SCREEN_KHRReady) { _GL_SCREEN_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_SCREEN_KHR"); _GL_SCREEN_KHRReady = true; } return _GL_SCREEN_KHRContent; } }
        private static int _GL_SCREEN_KHRContent = default;
        private static bool _GL_SCREEN_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_SHADER_KHR"/>
        /// </summary>
        public static int GL_SHADER_KHR { get { if (!_GL_SHADER_KHRReady) { _GL_SHADER_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_SHADER_KHR"); _GL_SHADER_KHRReady = true; } return _GL_SHADER_KHRContent; } }
        private static int _GL_SHADER_KHRContent = default;
        private static bool _GL_SHADER_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_SKIP_DECODE_EXT"/>
        /// </summary>
        public static int GL_SKIP_DECODE_EXT { get { if (!_GL_SKIP_DECODE_EXTReady) { _GL_SKIP_DECODE_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_SKIP_DECODE_EXT"); _GL_SKIP_DECODE_EXTReady = true; } return _GL_SKIP_DECODE_EXTContent; } }
        private static int _GL_SKIP_DECODE_EXTContent = default;
        private static bool _GL_SKIP_DECODE_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_SOFTLIGHT_KHR"/>
        /// </summary>
        public static int GL_SOFTLIGHT_KHR { get { if (!_GL_SOFTLIGHT_KHRReady) { _GL_SOFTLIGHT_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_SOFTLIGHT_KHR"); _GL_SOFTLIGHT_KHRReady = true; } return _GL_SOFTLIGHT_KHRContent; } }
        private static int _GL_SOFTLIGHT_KHRContent = default;
        private static bool _GL_SOFTLIGHT_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_STACK_OVERFLOW_KHR"/>
        /// </summary>
        public static int GL_STACK_OVERFLOW_KHR { get { if (!_GL_STACK_OVERFLOW_KHRReady) { _GL_STACK_OVERFLOW_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_STACK_OVERFLOW_KHR"); _GL_STACK_OVERFLOW_KHRReady = true; } return _GL_STACK_OVERFLOW_KHRContent; } }
        private static int _GL_STACK_OVERFLOW_KHRContent = default;
        private static bool _GL_STACK_OVERFLOW_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_STACK_UNDERFLOW_KHR"/>
        /// </summary>
        public static int GL_STACK_UNDERFLOW_KHR { get { if (!_GL_STACK_UNDERFLOW_KHRReady) { _GL_STACK_UNDERFLOW_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_STACK_UNDERFLOW_KHR"); _GL_STACK_UNDERFLOW_KHRReady = true; } return _GL_STACK_UNDERFLOW_KHRContent; } }
        private static int _GL_STACK_UNDERFLOW_KHRContent = default;
        private static bool _GL_STACK_UNDERFLOW_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_STENCIL_INDEX_OES"/>
        /// </summary>
        public static int GL_STENCIL_INDEX_OES { get { if (!_GL_STENCIL_INDEX_OESReady) { _GL_STENCIL_INDEX_OESContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_INDEX_OES"); _GL_STENCIL_INDEX_OESReady = true; } return _GL_STENCIL_INDEX_OESContent; } }
        private static int _GL_STENCIL_INDEX_OESContent = default;
        private static bool _GL_STENCIL_INDEX_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_STENCIL_INDEX8_OES"/>
        /// </summary>
        public static int GL_STENCIL_INDEX8_OES { get { if (!_GL_STENCIL_INDEX8_OESReady) { _GL_STENCIL_INDEX8_OESContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_INDEX8_OES"); _GL_STENCIL_INDEX8_OESReady = true; } return _GL_STENCIL_INDEX8_OESContent; } }
        private static int _GL_STENCIL_INDEX8_OESContent = default;
        private static bool _GL_STENCIL_INDEX8_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_TESS_CONTROL_OUTPUT_VERTICES_EXT"/>
        /// </summary>
        public static int GL_TESS_CONTROL_OUTPUT_VERTICES_EXT { get { if (!_GL_TESS_CONTROL_OUTPUT_VERTICES_EXTReady) { _GL_TESS_CONTROL_OUTPUT_VERTICES_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_TESS_CONTROL_OUTPUT_VERTICES_EXT"); _GL_TESS_CONTROL_OUTPUT_VERTICES_EXTReady = true; } return _GL_TESS_CONTROL_OUTPUT_VERTICES_EXTContent; } }
        private static int _GL_TESS_CONTROL_OUTPUT_VERTICES_EXTContent = default;
        private static bool _GL_TESS_CONTROL_OUTPUT_VERTICES_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_TESS_CONTROL_SHADER_BIT_EXT"/>
        /// </summary>
        public static int GL_TESS_CONTROL_SHADER_BIT_EXT { get { if (!_GL_TESS_CONTROL_SHADER_BIT_EXTReady) { _GL_TESS_CONTROL_SHADER_BIT_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_TESS_CONTROL_SHADER_BIT_EXT"); _GL_TESS_CONTROL_SHADER_BIT_EXTReady = true; } return _GL_TESS_CONTROL_SHADER_BIT_EXTContent; } }
        private static int _GL_TESS_CONTROL_SHADER_BIT_EXTContent = default;
        private static bool _GL_TESS_CONTROL_SHADER_BIT_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_TESS_CONTROL_SHADER_EXT"/>
        /// </summary>
        public static int GL_TESS_CONTROL_SHADER_EXT { get { if (!_GL_TESS_CONTROL_SHADER_EXTReady) { _GL_TESS_CONTROL_SHADER_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_TESS_CONTROL_SHADER_EXT"); _GL_TESS_CONTROL_SHADER_EXTReady = true; } return _GL_TESS_CONTROL_SHADER_EXTContent; } }
        private static int _GL_TESS_CONTROL_SHADER_EXTContent = default;
        private static bool _GL_TESS_CONTROL_SHADER_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_TESS_EVALUATION_SHADER_BIT_EXT"/>
        /// </summary>
        public static int GL_TESS_EVALUATION_SHADER_BIT_EXT { get { if (!_GL_TESS_EVALUATION_SHADER_BIT_EXTReady) { _GL_TESS_EVALUATION_SHADER_BIT_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_TESS_EVALUATION_SHADER_BIT_EXT"); _GL_TESS_EVALUATION_SHADER_BIT_EXTReady = true; } return _GL_TESS_EVALUATION_SHADER_BIT_EXTContent; } }
        private static int _GL_TESS_EVALUATION_SHADER_BIT_EXTContent = default;
        private static bool _GL_TESS_EVALUATION_SHADER_BIT_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_TESS_EVALUATION_SHADER_EXT"/>
        /// </summary>
        public static int GL_TESS_EVALUATION_SHADER_EXT { get { if (!_GL_TESS_EVALUATION_SHADER_EXTReady) { _GL_TESS_EVALUATION_SHADER_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_TESS_EVALUATION_SHADER_EXT"); _GL_TESS_EVALUATION_SHADER_EXTReady = true; } return _GL_TESS_EVALUATION_SHADER_EXTContent; } }
        private static int _GL_TESS_EVALUATION_SHADER_EXTContent = default;
        private static bool _GL_TESS_EVALUATION_SHADER_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_TESS_GEN_MODE_EXT"/>
        /// </summary>
        public static int GL_TESS_GEN_MODE_EXT { get { if (!_GL_TESS_GEN_MODE_EXTReady) { _GL_TESS_GEN_MODE_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_TESS_GEN_MODE_EXT"); _GL_TESS_GEN_MODE_EXTReady = true; } return _GL_TESS_GEN_MODE_EXTContent; } }
        private static int _GL_TESS_GEN_MODE_EXTContent = default;
        private static bool _GL_TESS_GEN_MODE_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_TESS_GEN_POINT_MODE_EXT"/>
        /// </summary>
        public static int GL_TESS_GEN_POINT_MODE_EXT { get { if (!_GL_TESS_GEN_POINT_MODE_EXTReady) { _GL_TESS_GEN_POINT_MODE_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_TESS_GEN_POINT_MODE_EXT"); _GL_TESS_GEN_POINT_MODE_EXTReady = true; } return _GL_TESS_GEN_POINT_MODE_EXTContent; } }
        private static int _GL_TESS_GEN_POINT_MODE_EXTContent = default;
        private static bool _GL_TESS_GEN_POINT_MODE_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_TESS_GEN_SPACING_EXT"/>
        /// </summary>
        public static int GL_TESS_GEN_SPACING_EXT { get { if (!_GL_TESS_GEN_SPACING_EXTReady) { _GL_TESS_GEN_SPACING_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_TESS_GEN_SPACING_EXT"); _GL_TESS_GEN_SPACING_EXTReady = true; } return _GL_TESS_GEN_SPACING_EXTContent; } }
        private static int _GL_TESS_GEN_SPACING_EXTContent = default;
        private static bool _GL_TESS_GEN_SPACING_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_TESS_GEN_VERTEX_ORDER_EXT"/>
        /// </summary>
        public static int GL_TESS_GEN_VERTEX_ORDER_EXT { get { if (!_GL_TESS_GEN_VERTEX_ORDER_EXTReady) { _GL_TESS_GEN_VERTEX_ORDER_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_TESS_GEN_VERTEX_ORDER_EXT"); _GL_TESS_GEN_VERTEX_ORDER_EXTReady = true; } return _GL_TESS_GEN_VERTEX_ORDER_EXTContent; } }
        private static int _GL_TESS_GEN_VERTEX_ORDER_EXTContent = default;
        private static bool _GL_TESS_GEN_VERTEX_ORDER_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES"/>
        /// </summary>
        public static int GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES { get { if (!_GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OESReady) { _GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OESContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES"); _GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OESReady = true; } return _GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OESContent; } }
        private static int _GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OESContent = default;
        private static bool _GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES"/>
        /// </summary>
        public static int GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES { get { if (!_GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OESReady) { _GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OESContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES"); _GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OESReady = true; } return _GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OESContent; } }
        private static int _GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OESContent = default;
        private static bool _GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_TEXTURE_BINDING_BUFFER_EXT"/>
        /// </summary>
        public static int GL_TEXTURE_BINDING_BUFFER_EXT { get { if (!_GL_TEXTURE_BINDING_BUFFER_EXTReady) { _GL_TEXTURE_BINDING_BUFFER_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_BINDING_BUFFER_EXT"); _GL_TEXTURE_BINDING_BUFFER_EXTReady = true; } return _GL_TEXTURE_BINDING_BUFFER_EXTContent; } }
        private static int _GL_TEXTURE_BINDING_BUFFER_EXTContent = default;
        private static bool _GL_TEXTURE_BINDING_BUFFER_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT"/>
        /// </summary>
        public static int GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT { get { if (!_GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXTReady) { _GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT"); _GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXTReady = true; } return _GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXTContent; } }
        private static int _GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXTContent = default;
        private static bool _GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_TEXTURE_BORDER_COLOR_EXT"/>
        /// </summary>
        public static int GL_TEXTURE_BORDER_COLOR_EXT { get { if (!_GL_TEXTURE_BORDER_COLOR_EXTReady) { _GL_TEXTURE_BORDER_COLOR_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_BORDER_COLOR_EXT"); _GL_TEXTURE_BORDER_COLOR_EXTReady = true; } return _GL_TEXTURE_BORDER_COLOR_EXTContent; } }
        private static int _GL_TEXTURE_BORDER_COLOR_EXTContent = default;
        private static bool _GL_TEXTURE_BORDER_COLOR_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_TEXTURE_BUFFER_BINDING_EXT"/>
        /// </summary>
        public static int GL_TEXTURE_BUFFER_BINDING_EXT { get { if (!_GL_TEXTURE_BUFFER_BINDING_EXTReady) { _GL_TEXTURE_BUFFER_BINDING_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_BUFFER_BINDING_EXT"); _GL_TEXTURE_BUFFER_BINDING_EXTReady = true; } return _GL_TEXTURE_BUFFER_BINDING_EXTContent; } }
        private static int _GL_TEXTURE_BUFFER_BINDING_EXTContent = default;
        private static bool _GL_TEXTURE_BUFFER_BINDING_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT"/>
        /// </summary>
        public static int GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT { get { if (!_GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXTReady) { _GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT"); _GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXTReady = true; } return _GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXTContent; } }
        private static int _GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXTContent = default;
        private static bool _GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_TEXTURE_BUFFER_EXT"/>
        /// </summary>
        public static int GL_TEXTURE_BUFFER_EXT { get { if (!_GL_TEXTURE_BUFFER_EXTReady) { _GL_TEXTURE_BUFFER_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_BUFFER_EXT"); _GL_TEXTURE_BUFFER_EXTReady = true; } return _GL_TEXTURE_BUFFER_EXTContent; } }
        private static int _GL_TEXTURE_BUFFER_EXTContent = default;
        private static bool _GL_TEXTURE_BUFFER_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT"/>
        /// </summary>
        public static int GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT { get { if (!_GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXTReady) { _GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT"); _GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXTReady = true; } return _GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXTContent; } }
        private static int _GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXTContent = default;
        private static bool _GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_TEXTURE_BUFFER_OFFSET_EXT"/>
        /// </summary>
        public static int GL_TEXTURE_BUFFER_OFFSET_EXT { get { if (!_GL_TEXTURE_BUFFER_OFFSET_EXTReady) { _GL_TEXTURE_BUFFER_OFFSET_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_BUFFER_OFFSET_EXT"); _GL_TEXTURE_BUFFER_OFFSET_EXTReady = true; } return _GL_TEXTURE_BUFFER_OFFSET_EXTContent; } }
        private static int _GL_TEXTURE_BUFFER_OFFSET_EXTContent = default;
        private static bool _GL_TEXTURE_BUFFER_OFFSET_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_TEXTURE_BUFFER_SIZE_EXT"/>
        /// </summary>
        public static int GL_TEXTURE_BUFFER_SIZE_EXT { get { if (!_GL_TEXTURE_BUFFER_SIZE_EXTReady) { _GL_TEXTURE_BUFFER_SIZE_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_BUFFER_SIZE_EXT"); _GL_TEXTURE_BUFFER_SIZE_EXTReady = true; } return _GL_TEXTURE_BUFFER_SIZE_EXTContent; } }
        private static int _GL_TEXTURE_BUFFER_SIZE_EXTContent = default;
        private static bool _GL_TEXTURE_BUFFER_SIZE_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_TEXTURE_CUBE_MAP_ARRAY_EXT"/>
        /// </summary>
        public static int GL_TEXTURE_CUBE_MAP_ARRAY_EXT { get { if (!_GL_TEXTURE_CUBE_MAP_ARRAY_EXTReady) { _GL_TEXTURE_CUBE_MAP_ARRAY_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_CUBE_MAP_ARRAY_EXT"); _GL_TEXTURE_CUBE_MAP_ARRAY_EXTReady = true; } return _GL_TEXTURE_CUBE_MAP_ARRAY_EXTContent; } }
        private static int _GL_TEXTURE_CUBE_MAP_ARRAY_EXTContent = default;
        private static bool _GL_TEXTURE_CUBE_MAP_ARRAY_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_TEXTURE_SRGB_DECODE_EXT"/>
        /// </summary>
        public static int GL_TEXTURE_SRGB_DECODE_EXT { get { if (!_GL_TEXTURE_SRGB_DECODE_EXTReady) { _GL_TEXTURE_SRGB_DECODE_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_SRGB_DECODE_EXT"); _GL_TEXTURE_SRGB_DECODE_EXTReady = true; } return _GL_TEXTURE_SRGB_DECODE_EXTContent; } }
        private static int _GL_TEXTURE_SRGB_DECODE_EXTContent = default;
        private static bool _GL_TEXTURE_SRGB_DECODE_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_TRIANGLE_STRIP_ADJACENCY_EXT"/>
        /// </summary>
        public static int GL_TRIANGLE_STRIP_ADJACENCY_EXT { get { if (!_GL_TRIANGLE_STRIP_ADJACENCY_EXTReady) { _GL_TRIANGLE_STRIP_ADJACENCY_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_TRIANGLE_STRIP_ADJACENCY_EXT"); _GL_TRIANGLE_STRIP_ADJACENCY_EXTReady = true; } return _GL_TRIANGLE_STRIP_ADJACENCY_EXTContent; } }
        private static int _GL_TRIANGLE_STRIP_ADJACENCY_EXTContent = default;
        private static bool _GL_TRIANGLE_STRIP_ADJACENCY_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_TRIANGLES_ADJACENCY_EXT"/>
        /// </summary>
        public static int GL_TRIANGLES_ADJACENCY_EXT { get { if (!_GL_TRIANGLES_ADJACENCY_EXTReady) { _GL_TRIANGLES_ADJACENCY_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_TRIANGLES_ADJACENCY_EXT"); _GL_TRIANGLES_ADJACENCY_EXTReady = true; } return _GL_TRIANGLES_ADJACENCY_EXTContent; } }
        private static int _GL_TRIANGLES_ADJACENCY_EXTContent = default;
        private static bool _GL_TRIANGLES_ADJACENCY_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_UNDEFINED_VERTEX_EXT"/>
        /// </summary>
        public static int GL_UNDEFINED_VERTEX_EXT { get { if (!_GL_UNDEFINED_VERTEX_EXTReady) { _GL_UNDEFINED_VERTEX_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_UNDEFINED_VERTEX_EXT"); _GL_UNDEFINED_VERTEX_EXTReady = true; } return _GL_UNDEFINED_VERTEX_EXTContent; } }
        private static int _GL_UNDEFINED_VERTEX_EXTContent = default;
        private static bool _GL_UNDEFINED_VERTEX_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_UNSIGNED_INT_IMAGE_BUFFER_EXT"/>
        /// </summary>
        public static int GL_UNSIGNED_INT_IMAGE_BUFFER_EXT { get { if (!_GL_UNSIGNED_INT_IMAGE_BUFFER_EXTReady) { _GL_UNSIGNED_INT_IMAGE_BUFFER_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNED_INT_IMAGE_BUFFER_EXT"); _GL_UNSIGNED_INT_IMAGE_BUFFER_EXTReady = true; } return _GL_UNSIGNED_INT_IMAGE_BUFFER_EXTContent; } }
        private static int _GL_UNSIGNED_INT_IMAGE_BUFFER_EXTContent = default;
        private static bool _GL_UNSIGNED_INT_IMAGE_BUFFER_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT"/>
        /// </summary>
        public static int GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT { get { if (!_GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXTReady) { _GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT"); _GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXTReady = true; } return _GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXTContent; } }
        private static int _GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXTContent = default;
        private static bool _GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES"/>
        /// </summary>
        public static int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES { get { if (!_GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OESReady) { _GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OESContent = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES"); _GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OESReady = true; } return _GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OESContent; } }
        private static int _GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OESContent = default;
        private static bool _GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT"/>
        /// </summary>
        public static int GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT { get { if (!_GL_UNSIGNED_INT_SAMPLER_BUFFER_EXTReady) { _GL_UNSIGNED_INT_SAMPLER_BUFFER_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT"); _GL_UNSIGNED_INT_SAMPLER_BUFFER_EXTReady = true; } return _GL_UNSIGNED_INT_SAMPLER_BUFFER_EXTContent; } }
        private static int _GL_UNSIGNED_INT_SAMPLER_BUFFER_EXTContent = default;
        private static bool _GL_UNSIGNED_INT_SAMPLER_BUFFER_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT"/>
        /// </summary>
        public static int GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT { get { if (!_GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXTReady) { _GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT"); _GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXTReady = true; } return _GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXTContent; } }
        private static int _GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXTContent = default;
        private static bool _GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#GL_VERTEX_ARRAY_KHR"/>
        /// </summary>
        public static int GL_VERTEX_ARRAY_KHR { get { if (!_GL_VERTEX_ARRAY_KHRReady) { _GL_VERTEX_ARRAY_KHRContent = SGetField<int>(LocalBridgeClazz, "GL_VERTEX_ARRAY_KHR"); _GL_VERTEX_ARRAY_KHRReady = true; } return _GL_VERTEX_ARRAY_KHRContent; } }
        private static int _GL_VERTEX_ARRAY_KHRContent = default;
        private static bool _GL_VERTEX_ARRAY_KHRReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glGetDebugMessageCallbackKHR()"/>
        /// </summary>
        /// <returns><see cref="Android.Opengl.GLES31Ext.DebugProcKHR"/></returns>
        public static Android.Opengl.GLES31Ext.DebugProcKHR GlGetDebugMessageCallbackKHR()
        {
            return SExecuteWithSignature<Android.Opengl.GLES31Ext.DebugProcKHR>(LocalBridgeClazz, "glGetDebugMessageCallbackKHR", "()Landroid/opengl/GLES31Ext$DebugProcKHR;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glIsEnablediEXT(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool GlIsEnablediEXT(int arg0, int arg1)
        {
            return SExecute<bool>(LocalBridgeClazz, "glIsEnablediEXT", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glGetDebugMessageLogKHR(int,int,int[],int,int[],int,int[],int,int[],int,int[],int,byte[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        /// <param name="arg8"><see cref="int"/></param>
        /// <param name="arg9"><see cref="int"/></param>
        /// <param name="arg10"><see cref="int"/></param>
        /// <param name="arg11"><see cref="int"/></param>
        /// <param name="arg12"><see cref="byte"/></param>
        /// <param name="arg13"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GlGetDebugMessageLogKHR(int arg0, int arg1, int[] arg2, int arg3, int[] arg4, int arg5, int[] arg6, int arg7, int[] arg8, int arg9, int[] arg10, int arg11, byte[] arg12, int arg13)
        {
            return SExecute<int>(LocalBridgeClazz, "glGetDebugMessageLogKHR", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glGetDebugMessageLogKHR(int,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.ByteBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        /// <param name="arg3"><see cref="Java.Nio.IntBuffer"/></param>
        /// <param name="arg4"><see cref="Java.Nio.IntBuffer"/></param>
        /// <param name="arg5"><see cref="Java.Nio.IntBuffer"/></param>
        /// <param name="arg6"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GlGetDebugMessageLogKHR(int arg0, Java.Nio.IntBuffer arg1, Java.Nio.IntBuffer arg2, Java.Nio.IntBuffer arg3, Java.Nio.IntBuffer arg4, Java.Nio.IntBuffer arg5, Java.Nio.ByteBuffer arg6)
        {
            return SExecute<int>(LocalBridgeClazz, "glGetDebugMessageLogKHR", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glGetObjectLabelKHR(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String GlGetObjectLabelKHR(int arg0, int arg1)
        {
            return SExecute<Java.Lang.String>(LocalBridgeClazz, "glGetObjectLabelKHR", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glGetObjectPtrLabelKHR(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String GlGetObjectPtrLabelKHR(long arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "glGetObjectPtrLabelKHR", "(J)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glGetDebugMessageLogKHR(int,int[],int,int[],int,int[],int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        /// <param name="arg8"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String[] GlGetDebugMessageLogKHR(int arg0, int[] arg1, int arg2, int[] arg3, int arg4, int[] arg5, int arg6, int[] arg7, int arg8)
        {
            return SExecuteArray<Java.Lang.String>(LocalBridgeClazz, "glGetDebugMessageLogKHR", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glGetDebugMessageLogKHR(int,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        /// <param name="arg3"><see cref="Java.Nio.IntBuffer"/></param>
        /// <param name="arg4"><see cref="Java.Nio.IntBuffer"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String[] GlGetDebugMessageLogKHR(int arg0, Java.Nio.IntBuffer arg1, Java.Nio.IntBuffer arg2, Java.Nio.IntBuffer arg3, Java.Nio.IntBuffer arg4)
        {
            return SExecuteArray<Java.Lang.String>(LocalBridgeClazz, "glGetDebugMessageLogKHR", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glBlendBarrierKHR()"/>
        /// </summary>
        public static void GlBlendBarrierKHR()
        {
            SExecuteWithSignature(LocalBridgeClazz, "glBlendBarrierKHR", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glBlendEquationiEXT(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlBlendEquationiEXT(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glBlendEquationiEXT", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glBlendEquationSeparateiEXT(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlBlendEquationSeparateiEXT(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glBlendEquationSeparateiEXT", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glBlendFunciEXT(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlBlendFunciEXT(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glBlendFunciEXT", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glBlendFuncSeparateiEXT(int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlBlendFuncSeparateiEXT(int arg0, int arg1, int arg2, int arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glBlendFuncSeparateiEXT", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glColorMaskiEXT(int,boolean,boolean,boolean,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <param name="arg4"><see cref="bool"/></param>
        public static void GlColorMaskiEXT(int arg0, bool arg1, bool arg2, bool arg3, bool arg4)
        {
            SExecute(LocalBridgeClazz, "glColorMaskiEXT", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glCopyImageSubDataEXT(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        /// <param name="arg8"><see cref="int"/></param>
        /// <param name="arg9"><see cref="int"/></param>
        /// <param name="arg10"><see cref="int"/></param>
        /// <param name="arg11"><see cref="int"/></param>
        /// <param name="arg12"><see cref="int"/></param>
        /// <param name="arg13"><see cref="int"/></param>
        /// <param name="arg14"><see cref="int"/></param>
        public static void GlCopyImageSubDataEXT(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10, int arg11, int arg12, int arg13, int arg14)
        {
            SExecute(LocalBridgeClazz, "glCopyImageSubDataEXT", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glDebugMessageCallbackKHR(android.opengl.GLES31Ext.DebugProcKHR)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Opengl.GLES31Ext.DebugProcKHR"/></param>
        public static void GlDebugMessageCallbackKHR(Android.Opengl.GLES31Ext.DebugProcKHR arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glDebugMessageCallbackKHR", "(Landroid/opengl/GLES31Ext$DebugProcKHR;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glDebugMessageControlKHR(int,int,int,int,int[],int,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="bool"/></param>
        public static void GlDebugMessageControlKHR(int arg0, int arg1, int arg2, int arg3, int[] arg4, int arg5, bool arg6)
        {
            SExecute(LocalBridgeClazz, "glDebugMessageControlKHR", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glDebugMessageControlKHR(int,int,int,int,java.nio.IntBuffer,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="Java.Nio.IntBuffer"/></param>
        /// <param name="arg5"><see cref="bool"/></param>
        public static void GlDebugMessageControlKHR(int arg0, int arg1, int arg2, int arg3, Java.Nio.IntBuffer arg4, bool arg5)
        {
            SExecute(LocalBridgeClazz, "glDebugMessageControlKHR", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glDebugMessageInsertKHR(int,int,int,int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="Java.Lang.String"/></param>
        public static void GlDebugMessageInsertKHR(int arg0, int arg1, int arg2, int arg3, Java.Lang.String arg4)
        {
            SExecute(LocalBridgeClazz, "glDebugMessageInsertKHR", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glDisableiEXT(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlDisableiEXT(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glDisableiEXT", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glEnableiEXT(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlEnableiEXT(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glEnableiEXT", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glFramebufferTextureEXT(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlFramebufferTextureEXT(int arg0, int arg1, int arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glFramebufferTextureEXT", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glGetSamplerParameterIivEXT(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetSamplerParameterIivEXT(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetSamplerParameterIivEXT", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glGetSamplerParameterIivEXT(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetSamplerParameterIivEXT(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetSamplerParameterIivEXT", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glGetSamplerParameterIuivEXT(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetSamplerParameterIuivEXT(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetSamplerParameterIuivEXT", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glGetSamplerParameterIuivEXT(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetSamplerParameterIuivEXT(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetSamplerParameterIuivEXT", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glGetTexParameterIivEXT(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetTexParameterIivEXT(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetTexParameterIivEXT", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glGetTexParameterIivEXT(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetTexParameterIivEXT(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetTexParameterIivEXT", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glGetTexParameterIuivEXT(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetTexParameterIuivEXT(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetTexParameterIuivEXT", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glGetTexParameterIuivEXT(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetTexParameterIuivEXT(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetTexParameterIuivEXT", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glMinSampleShadingOES(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public static void GlMinSampleShadingOES(float arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glMinSampleShadingOES", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glObjectLabelKHR(int,int,int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        public static void GlObjectLabelKHR(int arg0, int arg1, int arg2, Java.Lang.String arg3)
        {
            SExecute(LocalBridgeClazz, "glObjectLabelKHR", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glObjectPtrLabelKHR(long,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        public static void GlObjectPtrLabelKHR(long arg0, Java.Lang.String arg1)
        {
            SExecute(LocalBridgeClazz, "glObjectPtrLabelKHR", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glPatchParameteriEXT(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlPatchParameteriEXT(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glPatchParameteriEXT", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glPopDebugGroupKHR()"/>
        /// </summary>
        public static void GlPopDebugGroupKHR()
        {
            SExecuteWithSignature(LocalBridgeClazz, "glPopDebugGroupKHR", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glPrimitiveBoundingBoxEXT(float,float,float,float,float,float,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        /// <param name="arg5"><see cref="float"/></param>
        /// <param name="arg6"><see cref="float"/></param>
        /// <param name="arg7"><see cref="float"/></param>
        public static void GlPrimitiveBoundingBoxEXT(float arg0, float arg1, float arg2, float arg3, float arg4, float arg5, float arg6, float arg7)
        {
            SExecute(LocalBridgeClazz, "glPrimitiveBoundingBoxEXT", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glPushDebugGroupKHR(int,int,int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        public static void GlPushDebugGroupKHR(int arg0, int arg1, int arg2, Java.Lang.String arg3)
        {
            SExecute(LocalBridgeClazz, "glPushDebugGroupKHR", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glSamplerParameterIivEXT(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlSamplerParameterIivEXT(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glSamplerParameterIivEXT", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glSamplerParameterIivEXT(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlSamplerParameterIivEXT(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glSamplerParameterIivEXT", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glSamplerParameterIuivEXT(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlSamplerParameterIuivEXT(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glSamplerParameterIuivEXT", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glSamplerParameterIuivEXT(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlSamplerParameterIuivEXT(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glSamplerParameterIuivEXT", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glTexBufferEXT(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlTexBufferEXT(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glTexBufferEXT", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glTexBufferRangeEXT(int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlTexBufferRangeEXT(int arg0, int arg1, int arg2, int arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glTexBufferRangeEXT", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glTexParameterIivEXT(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlTexParameterIivEXT(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glTexParameterIivEXT", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glTexParameterIivEXT(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlTexParameterIivEXT(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glTexParameterIivEXT", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glTexParameterIuivEXT(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlTexParameterIuivEXT(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glTexParameterIuivEXT", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glTexParameterIuivEXT(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlTexParameterIuivEXT(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glTexParameterIuivEXT", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.html#glTexStorage3DMultisampleOES(int,int,int,int,int,int,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="bool"/></param>
        public static void GlTexStorage3DMultisampleOES(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, bool arg6)
        {
            SExecute(LocalBridgeClazz, "glTexStorage3DMultisampleOES", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes
        #region DebugProcKHR
        public partial class DebugProcKHR
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/opengl/GLES31Ext.DebugProcKHR.html#onMessage(int,int,int,int,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="int"/></param>
            /// <param name="arg4"><see cref="Java.Lang.String"/></param>
            public void OnMessage(int arg0, int arg1, int arg2, int arg3, Java.Lang.String arg4)
            {
                IExecute("onMessage", arg0, arg1, arg2, arg3, arg4);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
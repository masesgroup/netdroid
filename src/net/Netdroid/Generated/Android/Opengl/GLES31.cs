/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.8.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Opengl
{
    #region GLES31
    public partial class GLES31
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_ACTIVE_ATOMIC_COUNTER_BUFFERS"/>
        /// </summary>
        public static int GL_ACTIVE_ATOMIC_COUNTER_BUFFERS { get { if (!_GL_ACTIVE_ATOMIC_COUNTER_BUFFERSReady) { _GL_ACTIVE_ATOMIC_COUNTER_BUFFERSContent = SGetField<int>(LocalBridgeClazz, "GL_ACTIVE_ATOMIC_COUNTER_BUFFERS"); _GL_ACTIVE_ATOMIC_COUNTER_BUFFERSReady = true; } return _GL_ACTIVE_ATOMIC_COUNTER_BUFFERSContent; } }
        private static int _GL_ACTIVE_ATOMIC_COUNTER_BUFFERSContent = default;
        private static bool _GL_ACTIVE_ATOMIC_COUNTER_BUFFERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_ACTIVE_PROGRAM"/>
        /// </summary>
        public static int GL_ACTIVE_PROGRAM { get { if (!_GL_ACTIVE_PROGRAMReady) { _GL_ACTIVE_PROGRAMContent = SGetField<int>(LocalBridgeClazz, "GL_ACTIVE_PROGRAM"); _GL_ACTIVE_PROGRAMReady = true; } return _GL_ACTIVE_PROGRAMContent; } }
        private static int _GL_ACTIVE_PROGRAMContent = default;
        private static bool _GL_ACTIVE_PROGRAMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_ACTIVE_RESOURCES"/>
        /// </summary>
        public static int GL_ACTIVE_RESOURCES { get { if (!_GL_ACTIVE_RESOURCESReady) { _GL_ACTIVE_RESOURCESContent = SGetField<int>(LocalBridgeClazz, "GL_ACTIVE_RESOURCES"); _GL_ACTIVE_RESOURCESReady = true; } return _GL_ACTIVE_RESOURCESContent; } }
        private static int _GL_ACTIVE_RESOURCESContent = default;
        private static bool _GL_ACTIVE_RESOURCESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_ACTIVE_VARIABLES"/>
        /// </summary>
        public static int GL_ACTIVE_VARIABLES { get { if (!_GL_ACTIVE_VARIABLESReady) { _GL_ACTIVE_VARIABLESContent = SGetField<int>(LocalBridgeClazz, "GL_ACTIVE_VARIABLES"); _GL_ACTIVE_VARIABLESReady = true; } return _GL_ACTIVE_VARIABLESContent; } }
        private static int _GL_ACTIVE_VARIABLESContent = default;
        private static bool _GL_ACTIVE_VARIABLESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_ALL_BARRIER_BITS"/>
        /// </summary>
        public static int GL_ALL_BARRIER_BITS { get { if (!_GL_ALL_BARRIER_BITSReady) { _GL_ALL_BARRIER_BITSContent = SGetField<int>(LocalBridgeClazz, "GL_ALL_BARRIER_BITS"); _GL_ALL_BARRIER_BITSReady = true; } return _GL_ALL_BARRIER_BITSContent; } }
        private static int _GL_ALL_BARRIER_BITSContent = default;
        private static bool _GL_ALL_BARRIER_BITSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_ALL_SHADER_BITS"/>
        /// </summary>
        public static int GL_ALL_SHADER_BITS { get { if (!_GL_ALL_SHADER_BITSReady) { _GL_ALL_SHADER_BITSContent = SGetField<int>(LocalBridgeClazz, "GL_ALL_SHADER_BITS"); _GL_ALL_SHADER_BITSReady = true; } return _GL_ALL_SHADER_BITSContent; } }
        private static int _GL_ALL_SHADER_BITSContent = default;
        private static bool _GL_ALL_SHADER_BITSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_ARRAY_SIZE"/>
        /// </summary>
        public static int GL_ARRAY_SIZE { get { if (!_GL_ARRAY_SIZEReady) { _GL_ARRAY_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_ARRAY_SIZE"); _GL_ARRAY_SIZEReady = true; } return _GL_ARRAY_SIZEContent; } }
        private static int _GL_ARRAY_SIZEContent = default;
        private static bool _GL_ARRAY_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_ARRAY_STRIDE"/>
        /// </summary>
        public static int GL_ARRAY_STRIDE { get { if (!_GL_ARRAY_STRIDEReady) { _GL_ARRAY_STRIDEContent = SGetField<int>(LocalBridgeClazz, "GL_ARRAY_STRIDE"); _GL_ARRAY_STRIDEReady = true; } return _GL_ARRAY_STRIDEContent; } }
        private static int _GL_ARRAY_STRIDEContent = default;
        private static bool _GL_ARRAY_STRIDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_ATOMIC_COUNTER_BARRIER_BIT"/>
        /// </summary>
        public static int GL_ATOMIC_COUNTER_BARRIER_BIT { get { if (!_GL_ATOMIC_COUNTER_BARRIER_BITReady) { _GL_ATOMIC_COUNTER_BARRIER_BITContent = SGetField<int>(LocalBridgeClazz, "GL_ATOMIC_COUNTER_BARRIER_BIT"); _GL_ATOMIC_COUNTER_BARRIER_BITReady = true; } return _GL_ATOMIC_COUNTER_BARRIER_BITContent; } }
        private static int _GL_ATOMIC_COUNTER_BARRIER_BITContent = default;
        private static bool _GL_ATOMIC_COUNTER_BARRIER_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_ATOMIC_COUNTER_BUFFER"/>
        /// </summary>
        public static int GL_ATOMIC_COUNTER_BUFFER { get { if (!_GL_ATOMIC_COUNTER_BUFFERReady) { _GL_ATOMIC_COUNTER_BUFFERContent = SGetField<int>(LocalBridgeClazz, "GL_ATOMIC_COUNTER_BUFFER"); _GL_ATOMIC_COUNTER_BUFFERReady = true; } return _GL_ATOMIC_COUNTER_BUFFERContent; } }
        private static int _GL_ATOMIC_COUNTER_BUFFERContent = default;
        private static bool _GL_ATOMIC_COUNTER_BUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_ATOMIC_COUNTER_BUFFER_BINDING"/>
        /// </summary>
        public static int GL_ATOMIC_COUNTER_BUFFER_BINDING { get { if (!_GL_ATOMIC_COUNTER_BUFFER_BINDINGReady) { _GL_ATOMIC_COUNTER_BUFFER_BINDINGContent = SGetField<int>(LocalBridgeClazz, "GL_ATOMIC_COUNTER_BUFFER_BINDING"); _GL_ATOMIC_COUNTER_BUFFER_BINDINGReady = true; } return _GL_ATOMIC_COUNTER_BUFFER_BINDINGContent; } }
        private static int _GL_ATOMIC_COUNTER_BUFFER_BINDINGContent = default;
        private static bool _GL_ATOMIC_COUNTER_BUFFER_BINDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_ATOMIC_COUNTER_BUFFER_INDEX"/>
        /// </summary>
        public static int GL_ATOMIC_COUNTER_BUFFER_INDEX { get { if (!_GL_ATOMIC_COUNTER_BUFFER_INDEXReady) { _GL_ATOMIC_COUNTER_BUFFER_INDEXContent = SGetField<int>(LocalBridgeClazz, "GL_ATOMIC_COUNTER_BUFFER_INDEX"); _GL_ATOMIC_COUNTER_BUFFER_INDEXReady = true; } return _GL_ATOMIC_COUNTER_BUFFER_INDEXContent; } }
        private static int _GL_ATOMIC_COUNTER_BUFFER_INDEXContent = default;
        private static bool _GL_ATOMIC_COUNTER_BUFFER_INDEXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_ATOMIC_COUNTER_BUFFER_SIZE"/>
        /// </summary>
        public static int GL_ATOMIC_COUNTER_BUFFER_SIZE { get { if (!_GL_ATOMIC_COUNTER_BUFFER_SIZEReady) { _GL_ATOMIC_COUNTER_BUFFER_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_ATOMIC_COUNTER_BUFFER_SIZE"); _GL_ATOMIC_COUNTER_BUFFER_SIZEReady = true; } return _GL_ATOMIC_COUNTER_BUFFER_SIZEContent; } }
        private static int _GL_ATOMIC_COUNTER_BUFFER_SIZEContent = default;
        private static bool _GL_ATOMIC_COUNTER_BUFFER_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_ATOMIC_COUNTER_BUFFER_START"/>
        /// </summary>
        public static int GL_ATOMIC_COUNTER_BUFFER_START { get { if (!_GL_ATOMIC_COUNTER_BUFFER_STARTReady) { _GL_ATOMIC_COUNTER_BUFFER_STARTContent = SGetField<int>(LocalBridgeClazz, "GL_ATOMIC_COUNTER_BUFFER_START"); _GL_ATOMIC_COUNTER_BUFFER_STARTReady = true; } return _GL_ATOMIC_COUNTER_BUFFER_STARTContent; } }
        private static int _GL_ATOMIC_COUNTER_BUFFER_STARTContent = default;
        private static bool _GL_ATOMIC_COUNTER_BUFFER_STARTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_BLOCK_INDEX"/>
        /// </summary>
        public static int GL_BLOCK_INDEX { get { if (!_GL_BLOCK_INDEXReady) { _GL_BLOCK_INDEXContent = SGetField<int>(LocalBridgeClazz, "GL_BLOCK_INDEX"); _GL_BLOCK_INDEXReady = true; } return _GL_BLOCK_INDEXContent; } }
        private static int _GL_BLOCK_INDEXContent = default;
        private static bool _GL_BLOCK_INDEXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_BUFFER_BINDING"/>
        /// </summary>
        public static int GL_BUFFER_BINDING { get { if (!_GL_BUFFER_BINDINGReady) { _GL_BUFFER_BINDINGContent = SGetField<int>(LocalBridgeClazz, "GL_BUFFER_BINDING"); _GL_BUFFER_BINDINGReady = true; } return _GL_BUFFER_BINDINGContent; } }
        private static int _GL_BUFFER_BINDINGContent = default;
        private static bool _GL_BUFFER_BINDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_BUFFER_DATA_SIZE"/>
        /// </summary>
        public static int GL_BUFFER_DATA_SIZE { get { if (!_GL_BUFFER_DATA_SIZEReady) { _GL_BUFFER_DATA_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_BUFFER_DATA_SIZE"); _GL_BUFFER_DATA_SIZEReady = true; } return _GL_BUFFER_DATA_SIZEContent; } }
        private static int _GL_BUFFER_DATA_SIZEContent = default;
        private static bool _GL_BUFFER_DATA_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_BUFFER_UPDATE_BARRIER_BIT"/>
        /// </summary>
        public static int GL_BUFFER_UPDATE_BARRIER_BIT { get { if (!_GL_BUFFER_UPDATE_BARRIER_BITReady) { _GL_BUFFER_UPDATE_BARRIER_BITContent = SGetField<int>(LocalBridgeClazz, "GL_BUFFER_UPDATE_BARRIER_BIT"); _GL_BUFFER_UPDATE_BARRIER_BITReady = true; } return _GL_BUFFER_UPDATE_BARRIER_BITContent; } }
        private static int _GL_BUFFER_UPDATE_BARRIER_BITContent = default;
        private static bool _GL_BUFFER_UPDATE_BARRIER_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_BUFFER_VARIABLE"/>
        /// </summary>
        public static int GL_BUFFER_VARIABLE { get { if (!_GL_BUFFER_VARIABLEReady) { _GL_BUFFER_VARIABLEContent = SGetField<int>(LocalBridgeClazz, "GL_BUFFER_VARIABLE"); _GL_BUFFER_VARIABLEReady = true; } return _GL_BUFFER_VARIABLEContent; } }
        private static int _GL_BUFFER_VARIABLEContent = default;
        private static bool _GL_BUFFER_VARIABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_COMMAND_BARRIER_BIT"/>
        /// </summary>
        public static int GL_COMMAND_BARRIER_BIT { get { if (!_GL_COMMAND_BARRIER_BITReady) { _GL_COMMAND_BARRIER_BITContent = SGetField<int>(LocalBridgeClazz, "GL_COMMAND_BARRIER_BIT"); _GL_COMMAND_BARRIER_BITReady = true; } return _GL_COMMAND_BARRIER_BITContent; } }
        private static int _GL_COMMAND_BARRIER_BITContent = default;
        private static bool _GL_COMMAND_BARRIER_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_COMPUTE_SHADER"/>
        /// </summary>
        public static int GL_COMPUTE_SHADER { get { if (!_GL_COMPUTE_SHADERReady) { _GL_COMPUTE_SHADERContent = SGetField<int>(LocalBridgeClazz, "GL_COMPUTE_SHADER"); _GL_COMPUTE_SHADERReady = true; } return _GL_COMPUTE_SHADERContent; } }
        private static int _GL_COMPUTE_SHADERContent = default;
        private static bool _GL_COMPUTE_SHADERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_COMPUTE_SHADER_BIT"/>
        /// </summary>
        public static int GL_COMPUTE_SHADER_BIT { get { if (!_GL_COMPUTE_SHADER_BITReady) { _GL_COMPUTE_SHADER_BITContent = SGetField<int>(LocalBridgeClazz, "GL_COMPUTE_SHADER_BIT"); _GL_COMPUTE_SHADER_BITReady = true; } return _GL_COMPUTE_SHADER_BITContent; } }
        private static int _GL_COMPUTE_SHADER_BITContent = default;
        private static bool _GL_COMPUTE_SHADER_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_COMPUTE_WORK_GROUP_SIZE"/>
        /// </summary>
        public static int GL_COMPUTE_WORK_GROUP_SIZE { get { if (!_GL_COMPUTE_WORK_GROUP_SIZEReady) { _GL_COMPUTE_WORK_GROUP_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_COMPUTE_WORK_GROUP_SIZE"); _GL_COMPUTE_WORK_GROUP_SIZEReady = true; } return _GL_COMPUTE_WORK_GROUP_SIZEContent; } }
        private static int _GL_COMPUTE_WORK_GROUP_SIZEContent = default;
        private static bool _GL_COMPUTE_WORK_GROUP_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_DEPTH_STENCIL_TEXTURE_MODE"/>
        /// </summary>
        public static int GL_DEPTH_STENCIL_TEXTURE_MODE { get { if (!_GL_DEPTH_STENCIL_TEXTURE_MODEReady) { _GL_DEPTH_STENCIL_TEXTURE_MODEContent = SGetField<int>(LocalBridgeClazz, "GL_DEPTH_STENCIL_TEXTURE_MODE"); _GL_DEPTH_STENCIL_TEXTURE_MODEReady = true; } return _GL_DEPTH_STENCIL_TEXTURE_MODEContent; } }
        private static int _GL_DEPTH_STENCIL_TEXTURE_MODEContent = default;
        private static bool _GL_DEPTH_STENCIL_TEXTURE_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_DISPATCH_INDIRECT_BUFFER"/>
        /// </summary>
        public static int GL_DISPATCH_INDIRECT_BUFFER { get { if (!_GL_DISPATCH_INDIRECT_BUFFERReady) { _GL_DISPATCH_INDIRECT_BUFFERContent = SGetField<int>(LocalBridgeClazz, "GL_DISPATCH_INDIRECT_BUFFER"); _GL_DISPATCH_INDIRECT_BUFFERReady = true; } return _GL_DISPATCH_INDIRECT_BUFFERContent; } }
        private static int _GL_DISPATCH_INDIRECT_BUFFERContent = default;
        private static bool _GL_DISPATCH_INDIRECT_BUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_DISPATCH_INDIRECT_BUFFER_BINDING"/>
        /// </summary>
        public static int GL_DISPATCH_INDIRECT_BUFFER_BINDING { get { if (!_GL_DISPATCH_INDIRECT_BUFFER_BINDINGReady) { _GL_DISPATCH_INDIRECT_BUFFER_BINDINGContent = SGetField<int>(LocalBridgeClazz, "GL_DISPATCH_INDIRECT_BUFFER_BINDING"); _GL_DISPATCH_INDIRECT_BUFFER_BINDINGReady = true; } return _GL_DISPATCH_INDIRECT_BUFFER_BINDINGContent; } }
        private static int _GL_DISPATCH_INDIRECT_BUFFER_BINDINGContent = default;
        private static bool _GL_DISPATCH_INDIRECT_BUFFER_BINDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_DRAW_INDIRECT_BUFFER"/>
        /// </summary>
        public static int GL_DRAW_INDIRECT_BUFFER { get { if (!_GL_DRAW_INDIRECT_BUFFERReady) { _GL_DRAW_INDIRECT_BUFFERContent = SGetField<int>(LocalBridgeClazz, "GL_DRAW_INDIRECT_BUFFER"); _GL_DRAW_INDIRECT_BUFFERReady = true; } return _GL_DRAW_INDIRECT_BUFFERContent; } }
        private static int _GL_DRAW_INDIRECT_BUFFERContent = default;
        private static bool _GL_DRAW_INDIRECT_BUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_DRAW_INDIRECT_BUFFER_BINDING"/>
        /// </summary>
        public static int GL_DRAW_INDIRECT_BUFFER_BINDING { get { if (!_GL_DRAW_INDIRECT_BUFFER_BINDINGReady) { _GL_DRAW_INDIRECT_BUFFER_BINDINGContent = SGetField<int>(LocalBridgeClazz, "GL_DRAW_INDIRECT_BUFFER_BINDING"); _GL_DRAW_INDIRECT_BUFFER_BINDINGReady = true; } return _GL_DRAW_INDIRECT_BUFFER_BINDINGContent; } }
        private static int _GL_DRAW_INDIRECT_BUFFER_BINDINGContent = default;
        private static bool _GL_DRAW_INDIRECT_BUFFER_BINDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_ELEMENT_ARRAY_BARRIER_BIT"/>
        /// </summary>
        public static int GL_ELEMENT_ARRAY_BARRIER_BIT { get { if (!_GL_ELEMENT_ARRAY_BARRIER_BITReady) { _GL_ELEMENT_ARRAY_BARRIER_BITContent = SGetField<int>(LocalBridgeClazz, "GL_ELEMENT_ARRAY_BARRIER_BIT"); _GL_ELEMENT_ARRAY_BARRIER_BITReady = true; } return _GL_ELEMENT_ARRAY_BARRIER_BITContent; } }
        private static int _GL_ELEMENT_ARRAY_BARRIER_BITContent = default;
        private static bool _GL_ELEMENT_ARRAY_BARRIER_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_FRAGMENT_SHADER_BIT"/>
        /// </summary>
        public static int GL_FRAGMENT_SHADER_BIT { get { if (!_GL_FRAGMENT_SHADER_BITReady) { _GL_FRAGMENT_SHADER_BITContent = SGetField<int>(LocalBridgeClazz, "GL_FRAGMENT_SHADER_BIT"); _GL_FRAGMENT_SHADER_BITReady = true; } return _GL_FRAGMENT_SHADER_BITContent; } }
        private static int _GL_FRAGMENT_SHADER_BITContent = default;
        private static bool _GL_FRAGMENT_SHADER_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_FRAMEBUFFER_BARRIER_BIT"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_BARRIER_BIT { get { if (!_GL_FRAMEBUFFER_BARRIER_BITReady) { _GL_FRAMEBUFFER_BARRIER_BITContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_BARRIER_BIT"); _GL_FRAMEBUFFER_BARRIER_BITReady = true; } return _GL_FRAMEBUFFER_BARRIER_BITContent; } }
        private static int _GL_FRAMEBUFFER_BARRIER_BITContent = default;
        private static bool _GL_FRAMEBUFFER_BARRIER_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS { get { if (!_GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONSReady) { _GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONSContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS"); _GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONSReady = true; } return _GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONSContent; } }
        private static int _GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONSContent = default;
        private static bool _GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_FRAMEBUFFER_DEFAULT_HEIGHT"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_DEFAULT_HEIGHT { get { if (!_GL_FRAMEBUFFER_DEFAULT_HEIGHTReady) { _GL_FRAMEBUFFER_DEFAULT_HEIGHTContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_DEFAULT_HEIGHT"); _GL_FRAMEBUFFER_DEFAULT_HEIGHTReady = true; } return _GL_FRAMEBUFFER_DEFAULT_HEIGHTContent; } }
        private static int _GL_FRAMEBUFFER_DEFAULT_HEIGHTContent = default;
        private static bool _GL_FRAMEBUFFER_DEFAULT_HEIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_FRAMEBUFFER_DEFAULT_SAMPLES"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_DEFAULT_SAMPLES { get { if (!_GL_FRAMEBUFFER_DEFAULT_SAMPLESReady) { _GL_FRAMEBUFFER_DEFAULT_SAMPLESContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_DEFAULT_SAMPLES"); _GL_FRAMEBUFFER_DEFAULT_SAMPLESReady = true; } return _GL_FRAMEBUFFER_DEFAULT_SAMPLESContent; } }
        private static int _GL_FRAMEBUFFER_DEFAULT_SAMPLESContent = default;
        private static bool _GL_FRAMEBUFFER_DEFAULT_SAMPLESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_FRAMEBUFFER_DEFAULT_WIDTH"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_DEFAULT_WIDTH { get { if (!_GL_FRAMEBUFFER_DEFAULT_WIDTHReady) { _GL_FRAMEBUFFER_DEFAULT_WIDTHContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_DEFAULT_WIDTH"); _GL_FRAMEBUFFER_DEFAULT_WIDTHReady = true; } return _GL_FRAMEBUFFER_DEFAULT_WIDTHContent; } }
        private static int _GL_FRAMEBUFFER_DEFAULT_WIDTHContent = default;
        private static bool _GL_FRAMEBUFFER_DEFAULT_WIDTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_IMAGE_2D"/>
        /// </summary>
        public static int GL_IMAGE_2D { get { if (!_GL_IMAGE_2DReady) { _GL_IMAGE_2DContent = SGetField<int>(LocalBridgeClazz, "GL_IMAGE_2D"); _GL_IMAGE_2DReady = true; } return _GL_IMAGE_2DContent; } }
        private static int _GL_IMAGE_2DContent = default;
        private static bool _GL_IMAGE_2DReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_IMAGE_2D_ARRAY"/>
        /// </summary>
        public static int GL_IMAGE_2D_ARRAY { get { if (!_GL_IMAGE_2D_ARRAYReady) { _GL_IMAGE_2D_ARRAYContent = SGetField<int>(LocalBridgeClazz, "GL_IMAGE_2D_ARRAY"); _GL_IMAGE_2D_ARRAYReady = true; } return _GL_IMAGE_2D_ARRAYContent; } }
        private static int _GL_IMAGE_2D_ARRAYContent = default;
        private static bool _GL_IMAGE_2D_ARRAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_IMAGE_3D"/>
        /// </summary>
        public static int GL_IMAGE_3D { get { if (!_GL_IMAGE_3DReady) { _GL_IMAGE_3DContent = SGetField<int>(LocalBridgeClazz, "GL_IMAGE_3D"); _GL_IMAGE_3DReady = true; } return _GL_IMAGE_3DContent; } }
        private static int _GL_IMAGE_3DContent = default;
        private static bool _GL_IMAGE_3DReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_IMAGE_BINDING_ACCESS"/>
        /// </summary>
        public static int GL_IMAGE_BINDING_ACCESS { get { if (!_GL_IMAGE_BINDING_ACCESSReady) { _GL_IMAGE_BINDING_ACCESSContent = SGetField<int>(LocalBridgeClazz, "GL_IMAGE_BINDING_ACCESS"); _GL_IMAGE_BINDING_ACCESSReady = true; } return _GL_IMAGE_BINDING_ACCESSContent; } }
        private static int _GL_IMAGE_BINDING_ACCESSContent = default;
        private static bool _GL_IMAGE_BINDING_ACCESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_IMAGE_BINDING_FORMAT"/>
        /// </summary>
        public static int GL_IMAGE_BINDING_FORMAT { get { if (!_GL_IMAGE_BINDING_FORMATReady) { _GL_IMAGE_BINDING_FORMATContent = SGetField<int>(LocalBridgeClazz, "GL_IMAGE_BINDING_FORMAT"); _GL_IMAGE_BINDING_FORMATReady = true; } return _GL_IMAGE_BINDING_FORMATContent; } }
        private static int _GL_IMAGE_BINDING_FORMATContent = default;
        private static bool _GL_IMAGE_BINDING_FORMATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_IMAGE_BINDING_LAYER"/>
        /// </summary>
        public static int GL_IMAGE_BINDING_LAYER { get { if (!_GL_IMAGE_BINDING_LAYERReady) { _GL_IMAGE_BINDING_LAYERContent = SGetField<int>(LocalBridgeClazz, "GL_IMAGE_BINDING_LAYER"); _GL_IMAGE_BINDING_LAYERReady = true; } return _GL_IMAGE_BINDING_LAYERContent; } }
        private static int _GL_IMAGE_BINDING_LAYERContent = default;
        private static bool _GL_IMAGE_BINDING_LAYERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_IMAGE_BINDING_LAYERED"/>
        /// </summary>
        public static int GL_IMAGE_BINDING_LAYERED { get { if (!_GL_IMAGE_BINDING_LAYEREDReady) { _GL_IMAGE_BINDING_LAYEREDContent = SGetField<int>(LocalBridgeClazz, "GL_IMAGE_BINDING_LAYERED"); _GL_IMAGE_BINDING_LAYEREDReady = true; } return _GL_IMAGE_BINDING_LAYEREDContent; } }
        private static int _GL_IMAGE_BINDING_LAYEREDContent = default;
        private static bool _GL_IMAGE_BINDING_LAYEREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_IMAGE_BINDING_LEVEL"/>
        /// </summary>
        public static int GL_IMAGE_BINDING_LEVEL { get { if (!_GL_IMAGE_BINDING_LEVELReady) { _GL_IMAGE_BINDING_LEVELContent = SGetField<int>(LocalBridgeClazz, "GL_IMAGE_BINDING_LEVEL"); _GL_IMAGE_BINDING_LEVELReady = true; } return _GL_IMAGE_BINDING_LEVELContent; } }
        private static int _GL_IMAGE_BINDING_LEVELContent = default;
        private static bool _GL_IMAGE_BINDING_LEVELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_IMAGE_BINDING_NAME"/>
        /// </summary>
        public static int GL_IMAGE_BINDING_NAME { get { if (!_GL_IMAGE_BINDING_NAMEReady) { _GL_IMAGE_BINDING_NAMEContent = SGetField<int>(LocalBridgeClazz, "GL_IMAGE_BINDING_NAME"); _GL_IMAGE_BINDING_NAMEReady = true; } return _GL_IMAGE_BINDING_NAMEContent; } }
        private static int _GL_IMAGE_BINDING_NAMEContent = default;
        private static bool _GL_IMAGE_BINDING_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_IMAGE_CUBE"/>
        /// </summary>
        public static int GL_IMAGE_CUBE { get { if (!_GL_IMAGE_CUBEReady) { _GL_IMAGE_CUBEContent = SGetField<int>(LocalBridgeClazz, "GL_IMAGE_CUBE"); _GL_IMAGE_CUBEReady = true; } return _GL_IMAGE_CUBEContent; } }
        private static int _GL_IMAGE_CUBEContent = default;
        private static bool _GL_IMAGE_CUBEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS"/>
        /// </summary>
        public static int GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS { get { if (!_GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASSReady) { _GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASSContent = SGetField<int>(LocalBridgeClazz, "GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS"); _GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASSReady = true; } return _GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASSContent; } }
        private static int _GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASSContent = default;
        private static bool _GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE"/>
        /// </summary>
        public static int GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE { get { if (!_GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZEReady) { _GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE"); _GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZEReady = true; } return _GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZEContent; } }
        private static int _GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZEContent = default;
        private static bool _GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_IMAGE_FORMAT_COMPATIBILITY_TYPE"/>
        /// </summary>
        public static int GL_IMAGE_FORMAT_COMPATIBILITY_TYPE { get { if (!_GL_IMAGE_FORMAT_COMPATIBILITY_TYPEReady) { _GL_IMAGE_FORMAT_COMPATIBILITY_TYPEContent = SGetField<int>(LocalBridgeClazz, "GL_IMAGE_FORMAT_COMPATIBILITY_TYPE"); _GL_IMAGE_FORMAT_COMPATIBILITY_TYPEReady = true; } return _GL_IMAGE_FORMAT_COMPATIBILITY_TYPEContent; } }
        private static int _GL_IMAGE_FORMAT_COMPATIBILITY_TYPEContent = default;
        private static bool _GL_IMAGE_FORMAT_COMPATIBILITY_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_INT_IMAGE_2D"/>
        /// </summary>
        public static int GL_INT_IMAGE_2D { get { if (!_GL_INT_IMAGE_2DReady) { _GL_INT_IMAGE_2DContent = SGetField<int>(LocalBridgeClazz, "GL_INT_IMAGE_2D"); _GL_INT_IMAGE_2DReady = true; } return _GL_INT_IMAGE_2DContent; } }
        private static int _GL_INT_IMAGE_2DContent = default;
        private static bool _GL_INT_IMAGE_2DReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_INT_IMAGE_2D_ARRAY"/>
        /// </summary>
        public static int GL_INT_IMAGE_2D_ARRAY { get { if (!_GL_INT_IMAGE_2D_ARRAYReady) { _GL_INT_IMAGE_2D_ARRAYContent = SGetField<int>(LocalBridgeClazz, "GL_INT_IMAGE_2D_ARRAY"); _GL_INT_IMAGE_2D_ARRAYReady = true; } return _GL_INT_IMAGE_2D_ARRAYContent; } }
        private static int _GL_INT_IMAGE_2D_ARRAYContent = default;
        private static bool _GL_INT_IMAGE_2D_ARRAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_INT_IMAGE_3D"/>
        /// </summary>
        public static int GL_INT_IMAGE_3D { get { if (!_GL_INT_IMAGE_3DReady) { _GL_INT_IMAGE_3DContent = SGetField<int>(LocalBridgeClazz, "GL_INT_IMAGE_3D"); _GL_INT_IMAGE_3DReady = true; } return _GL_INT_IMAGE_3DContent; } }
        private static int _GL_INT_IMAGE_3DContent = default;
        private static bool _GL_INT_IMAGE_3DReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_INT_IMAGE_CUBE"/>
        /// </summary>
        public static int GL_INT_IMAGE_CUBE { get { if (!_GL_INT_IMAGE_CUBEReady) { _GL_INT_IMAGE_CUBEContent = SGetField<int>(LocalBridgeClazz, "GL_INT_IMAGE_CUBE"); _GL_INT_IMAGE_CUBEReady = true; } return _GL_INT_IMAGE_CUBEContent; } }
        private static int _GL_INT_IMAGE_CUBEContent = default;
        private static bool _GL_INT_IMAGE_CUBEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_INT_SAMPLER_2D_MULTISAMPLE"/>
        /// </summary>
        public static int GL_INT_SAMPLER_2D_MULTISAMPLE { get { if (!_GL_INT_SAMPLER_2D_MULTISAMPLEReady) { _GL_INT_SAMPLER_2D_MULTISAMPLEContent = SGetField<int>(LocalBridgeClazz, "GL_INT_SAMPLER_2D_MULTISAMPLE"); _GL_INT_SAMPLER_2D_MULTISAMPLEReady = true; } return _GL_INT_SAMPLER_2D_MULTISAMPLEContent; } }
        private static int _GL_INT_SAMPLER_2D_MULTISAMPLEContent = default;
        private static bool _GL_INT_SAMPLER_2D_MULTISAMPLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_IS_ROW_MAJOR"/>
        /// </summary>
        public static int GL_IS_ROW_MAJOR { get { if (!_GL_IS_ROW_MAJORReady) { _GL_IS_ROW_MAJORContent = SGetField<int>(LocalBridgeClazz, "GL_IS_ROW_MAJOR"); _GL_IS_ROW_MAJORReady = true; } return _GL_IS_ROW_MAJORContent; } }
        private static int _GL_IS_ROW_MAJORContent = default;
        private static bool _GL_IS_ROW_MAJORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_LOCATION"/>
        /// </summary>
        public static int GL_LOCATION { get { if (!_GL_LOCATIONReady) { _GL_LOCATIONContent = SGetField<int>(LocalBridgeClazz, "GL_LOCATION"); _GL_LOCATIONReady = true; } return _GL_LOCATIONContent; } }
        private static int _GL_LOCATIONContent = default;
        private static bool _GL_LOCATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MATRIX_STRIDE"/>
        /// </summary>
        public static int GL_MATRIX_STRIDE { get { if (!_GL_MATRIX_STRIDEReady) { _GL_MATRIX_STRIDEContent = SGetField<int>(LocalBridgeClazz, "GL_MATRIX_STRIDE"); _GL_MATRIX_STRIDEReady = true; } return _GL_MATRIX_STRIDEContent; } }
        private static int _GL_MATRIX_STRIDEContent = default;
        private static bool _GL_MATRIX_STRIDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS"/>
        /// </summary>
        public static int GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS { get { if (!_GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGSReady) { _GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS"); _GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGSReady = true; } return _GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGSContent; } }
        private static int _GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGSContent = default;
        private static bool _GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE"/>
        /// </summary>
        public static int GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE { get { if (!_GL_MAX_ATOMIC_COUNTER_BUFFER_SIZEReady) { _GL_MAX_ATOMIC_COUNTER_BUFFER_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE"); _GL_MAX_ATOMIC_COUNTER_BUFFER_SIZEReady = true; } return _GL_MAX_ATOMIC_COUNTER_BUFFER_SIZEContent; } }
        private static int _GL_MAX_ATOMIC_COUNTER_BUFFER_SIZEContent = default;
        private static bool _GL_MAX_ATOMIC_COUNTER_BUFFER_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_COLOR_TEXTURE_SAMPLES"/>
        /// </summary>
        public static int GL_MAX_COLOR_TEXTURE_SAMPLES { get { if (!_GL_MAX_COLOR_TEXTURE_SAMPLESReady) { _GL_MAX_COLOR_TEXTURE_SAMPLESContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_COLOR_TEXTURE_SAMPLES"); _GL_MAX_COLOR_TEXTURE_SAMPLESReady = true; } return _GL_MAX_COLOR_TEXTURE_SAMPLESContent; } }
        private static int _GL_MAX_COLOR_TEXTURE_SAMPLESContent = default;
        private static bool _GL_MAX_COLOR_TEXTURE_SAMPLESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS"/>
        /// </summary>
        public static int GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS { get { if (!_GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERSReady) { _GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS"); _GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERSReady = true; } return _GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERSContent; } }
        private static int _GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERSContent = default;
        private static bool _GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_COMBINED_ATOMIC_COUNTERS"/>
        /// </summary>
        public static int GL_MAX_COMBINED_ATOMIC_COUNTERS { get { if (!_GL_MAX_COMBINED_ATOMIC_COUNTERSReady) { _GL_MAX_COMBINED_ATOMIC_COUNTERSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_COMBINED_ATOMIC_COUNTERS"); _GL_MAX_COMBINED_ATOMIC_COUNTERSReady = true; } return _GL_MAX_COMBINED_ATOMIC_COUNTERSContent; } }
        private static int _GL_MAX_COMBINED_ATOMIC_COUNTERSContent = default;
        private static bool _GL_MAX_COMBINED_ATOMIC_COUNTERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS"/>
        /// </summary>
        public static int GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS { get { if (!_GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTSReady) { _GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS"); _GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTSReady = true; } return _GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTSContent; } }
        private static int _GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTSContent = default;
        private static bool _GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_COMBINED_IMAGE_UNIFORMS"/>
        /// </summary>
        public static int GL_MAX_COMBINED_IMAGE_UNIFORMS { get { if (!_GL_MAX_COMBINED_IMAGE_UNIFORMSReady) { _GL_MAX_COMBINED_IMAGE_UNIFORMSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_COMBINED_IMAGE_UNIFORMS"); _GL_MAX_COMBINED_IMAGE_UNIFORMSReady = true; } return _GL_MAX_COMBINED_IMAGE_UNIFORMSContent; } }
        private static int _GL_MAX_COMBINED_IMAGE_UNIFORMSContent = default;
        private static bool _GL_MAX_COMBINED_IMAGE_UNIFORMSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES"/>
        /// </summary>
        public static int GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES { get { if (!_GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCESReady) { _GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCESContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES"); _GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCESReady = true; } return _GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCESContent; } }
        private static int _GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCESContent = default;
        private static bool _GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS"/>
        /// </summary>
        public static int GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS { get { if (!_GL_MAX_COMBINED_SHADER_STORAGE_BLOCKSReady) { _GL_MAX_COMBINED_SHADER_STORAGE_BLOCKSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS"); _GL_MAX_COMBINED_SHADER_STORAGE_BLOCKSReady = true; } return _GL_MAX_COMBINED_SHADER_STORAGE_BLOCKSContent; } }
        private static int _GL_MAX_COMBINED_SHADER_STORAGE_BLOCKSContent = default;
        private static bool _GL_MAX_COMBINED_SHADER_STORAGE_BLOCKSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS"/>
        /// </summary>
        public static int GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS { get { if (!_GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERSReady) { _GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS"); _GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERSReady = true; } return _GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERSContent; } }
        private static int _GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERSContent = default;
        private static bool _GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_COMPUTE_ATOMIC_COUNTERS"/>
        /// </summary>
        public static int GL_MAX_COMPUTE_ATOMIC_COUNTERS { get { if (!_GL_MAX_COMPUTE_ATOMIC_COUNTERSReady) { _GL_MAX_COMPUTE_ATOMIC_COUNTERSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_COMPUTE_ATOMIC_COUNTERS"); _GL_MAX_COMPUTE_ATOMIC_COUNTERSReady = true; } return _GL_MAX_COMPUTE_ATOMIC_COUNTERSContent; } }
        private static int _GL_MAX_COMPUTE_ATOMIC_COUNTERSContent = default;
        private static bool _GL_MAX_COMPUTE_ATOMIC_COUNTERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_COMPUTE_IMAGE_UNIFORMS"/>
        /// </summary>
        public static int GL_MAX_COMPUTE_IMAGE_UNIFORMS { get { if (!_GL_MAX_COMPUTE_IMAGE_UNIFORMSReady) { _GL_MAX_COMPUTE_IMAGE_UNIFORMSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_COMPUTE_IMAGE_UNIFORMS"); _GL_MAX_COMPUTE_IMAGE_UNIFORMSReady = true; } return _GL_MAX_COMPUTE_IMAGE_UNIFORMSContent; } }
        private static int _GL_MAX_COMPUTE_IMAGE_UNIFORMSContent = default;
        private static bool _GL_MAX_COMPUTE_IMAGE_UNIFORMSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS"/>
        /// </summary>
        public static int GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS { get { if (!_GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKSReady) { _GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS"); _GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKSReady = true; } return _GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKSContent; } }
        private static int _GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKSContent = default;
        private static bool _GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_COMPUTE_SHARED_MEMORY_SIZE"/>
        /// </summary>
        public static int GL_MAX_COMPUTE_SHARED_MEMORY_SIZE { get { if (!_GL_MAX_COMPUTE_SHARED_MEMORY_SIZEReady) { _GL_MAX_COMPUTE_SHARED_MEMORY_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_COMPUTE_SHARED_MEMORY_SIZE"); _GL_MAX_COMPUTE_SHARED_MEMORY_SIZEReady = true; } return _GL_MAX_COMPUTE_SHARED_MEMORY_SIZEContent; } }
        private static int _GL_MAX_COMPUTE_SHARED_MEMORY_SIZEContent = default;
        private static bool _GL_MAX_COMPUTE_SHARED_MEMORY_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS"/>
        /// </summary>
        public static int GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS { get { if (!_GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITSReady) { _GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS"); _GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITSReady = true; } return _GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITSContent; } }
        private static int _GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITSContent = default;
        private static bool _GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_COMPUTE_UNIFORM_BLOCKS"/>
        /// </summary>
        public static int GL_MAX_COMPUTE_UNIFORM_BLOCKS { get { if (!_GL_MAX_COMPUTE_UNIFORM_BLOCKSReady) { _GL_MAX_COMPUTE_UNIFORM_BLOCKSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_COMPUTE_UNIFORM_BLOCKS"); _GL_MAX_COMPUTE_UNIFORM_BLOCKSReady = true; } return _GL_MAX_COMPUTE_UNIFORM_BLOCKSContent; } }
        private static int _GL_MAX_COMPUTE_UNIFORM_BLOCKSContent = default;
        private static bool _GL_MAX_COMPUTE_UNIFORM_BLOCKSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_COMPUTE_UNIFORM_COMPONENTS"/>
        /// </summary>
        public static int GL_MAX_COMPUTE_UNIFORM_COMPONENTS { get { if (!_GL_MAX_COMPUTE_UNIFORM_COMPONENTSReady) { _GL_MAX_COMPUTE_UNIFORM_COMPONENTSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_COMPUTE_UNIFORM_COMPONENTS"); _GL_MAX_COMPUTE_UNIFORM_COMPONENTSReady = true; } return _GL_MAX_COMPUTE_UNIFORM_COMPONENTSContent; } }
        private static int _GL_MAX_COMPUTE_UNIFORM_COMPONENTSContent = default;
        private static bool _GL_MAX_COMPUTE_UNIFORM_COMPONENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_COMPUTE_WORK_GROUP_COUNT"/>
        /// </summary>
        public static int GL_MAX_COMPUTE_WORK_GROUP_COUNT { get { if (!_GL_MAX_COMPUTE_WORK_GROUP_COUNTReady) { _GL_MAX_COMPUTE_WORK_GROUP_COUNTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_COMPUTE_WORK_GROUP_COUNT"); _GL_MAX_COMPUTE_WORK_GROUP_COUNTReady = true; } return _GL_MAX_COMPUTE_WORK_GROUP_COUNTContent; } }
        private static int _GL_MAX_COMPUTE_WORK_GROUP_COUNTContent = default;
        private static bool _GL_MAX_COMPUTE_WORK_GROUP_COUNTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS"/>
        /// </summary>
        public static int GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS { get { if (!_GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONSReady) { _GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS"); _GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONSReady = true; } return _GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONSContent; } }
        private static int _GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONSContent = default;
        private static bool _GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_COMPUTE_WORK_GROUP_SIZE"/>
        /// </summary>
        public static int GL_MAX_COMPUTE_WORK_GROUP_SIZE { get { if (!_GL_MAX_COMPUTE_WORK_GROUP_SIZEReady) { _GL_MAX_COMPUTE_WORK_GROUP_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_COMPUTE_WORK_GROUP_SIZE"); _GL_MAX_COMPUTE_WORK_GROUP_SIZEReady = true; } return _GL_MAX_COMPUTE_WORK_GROUP_SIZEContent; } }
        private static int _GL_MAX_COMPUTE_WORK_GROUP_SIZEContent = default;
        private static bool _GL_MAX_COMPUTE_WORK_GROUP_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_DEPTH_TEXTURE_SAMPLES"/>
        /// </summary>
        public static int GL_MAX_DEPTH_TEXTURE_SAMPLES { get { if (!_GL_MAX_DEPTH_TEXTURE_SAMPLESReady) { _GL_MAX_DEPTH_TEXTURE_SAMPLESContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_DEPTH_TEXTURE_SAMPLES"); _GL_MAX_DEPTH_TEXTURE_SAMPLESReady = true; } return _GL_MAX_DEPTH_TEXTURE_SAMPLESContent; } }
        private static int _GL_MAX_DEPTH_TEXTURE_SAMPLESContent = default;
        private static bool _GL_MAX_DEPTH_TEXTURE_SAMPLESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS"/>
        /// </summary>
        public static int GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS { get { if (!_GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERSReady) { _GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS"); _GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERSReady = true; } return _GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERSContent; } }
        private static int _GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERSContent = default;
        private static bool _GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_FRAGMENT_ATOMIC_COUNTERS"/>
        /// </summary>
        public static int GL_MAX_FRAGMENT_ATOMIC_COUNTERS { get { if (!_GL_MAX_FRAGMENT_ATOMIC_COUNTERSReady) { _GL_MAX_FRAGMENT_ATOMIC_COUNTERSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_FRAGMENT_ATOMIC_COUNTERS"); _GL_MAX_FRAGMENT_ATOMIC_COUNTERSReady = true; } return _GL_MAX_FRAGMENT_ATOMIC_COUNTERSContent; } }
        private static int _GL_MAX_FRAGMENT_ATOMIC_COUNTERSContent = default;
        private static bool _GL_MAX_FRAGMENT_ATOMIC_COUNTERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_FRAGMENT_IMAGE_UNIFORMS"/>
        /// </summary>
        public static int GL_MAX_FRAGMENT_IMAGE_UNIFORMS { get { if (!_GL_MAX_FRAGMENT_IMAGE_UNIFORMSReady) { _GL_MAX_FRAGMENT_IMAGE_UNIFORMSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_FRAGMENT_IMAGE_UNIFORMS"); _GL_MAX_FRAGMENT_IMAGE_UNIFORMSReady = true; } return _GL_MAX_FRAGMENT_IMAGE_UNIFORMSContent; } }
        private static int _GL_MAX_FRAGMENT_IMAGE_UNIFORMSContent = default;
        private static bool _GL_MAX_FRAGMENT_IMAGE_UNIFORMSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS"/>
        /// </summary>
        public static int GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS { get { if (!_GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKSReady) { _GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS"); _GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKSReady = true; } return _GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKSContent; } }
        private static int _GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKSContent = default;
        private static bool _GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_FRAMEBUFFER_HEIGHT"/>
        /// </summary>
        public static int GL_MAX_FRAMEBUFFER_HEIGHT { get { if (!_GL_MAX_FRAMEBUFFER_HEIGHTReady) { _GL_MAX_FRAMEBUFFER_HEIGHTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_FRAMEBUFFER_HEIGHT"); _GL_MAX_FRAMEBUFFER_HEIGHTReady = true; } return _GL_MAX_FRAMEBUFFER_HEIGHTContent; } }
        private static int _GL_MAX_FRAMEBUFFER_HEIGHTContent = default;
        private static bool _GL_MAX_FRAMEBUFFER_HEIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_FRAMEBUFFER_SAMPLES"/>
        /// </summary>
        public static int GL_MAX_FRAMEBUFFER_SAMPLES { get { if (!_GL_MAX_FRAMEBUFFER_SAMPLESReady) { _GL_MAX_FRAMEBUFFER_SAMPLESContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_FRAMEBUFFER_SAMPLES"); _GL_MAX_FRAMEBUFFER_SAMPLESReady = true; } return _GL_MAX_FRAMEBUFFER_SAMPLESContent; } }
        private static int _GL_MAX_FRAMEBUFFER_SAMPLESContent = default;
        private static bool _GL_MAX_FRAMEBUFFER_SAMPLESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_FRAMEBUFFER_WIDTH"/>
        /// </summary>
        public static int GL_MAX_FRAMEBUFFER_WIDTH { get { if (!_GL_MAX_FRAMEBUFFER_WIDTHReady) { _GL_MAX_FRAMEBUFFER_WIDTHContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_FRAMEBUFFER_WIDTH"); _GL_MAX_FRAMEBUFFER_WIDTHReady = true; } return _GL_MAX_FRAMEBUFFER_WIDTHContent; } }
        private static int _GL_MAX_FRAMEBUFFER_WIDTHContent = default;
        private static bool _GL_MAX_FRAMEBUFFER_WIDTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_IMAGE_UNITS"/>
        /// </summary>
        public static int GL_MAX_IMAGE_UNITS { get { if (!_GL_MAX_IMAGE_UNITSReady) { _GL_MAX_IMAGE_UNITSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_IMAGE_UNITS"); _GL_MAX_IMAGE_UNITSReady = true; } return _GL_MAX_IMAGE_UNITSContent; } }
        private static int _GL_MAX_IMAGE_UNITSContent = default;
        private static bool _GL_MAX_IMAGE_UNITSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_INTEGER_SAMPLES"/>
        /// </summary>
        public static int GL_MAX_INTEGER_SAMPLES { get { if (!_GL_MAX_INTEGER_SAMPLESReady) { _GL_MAX_INTEGER_SAMPLESContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_INTEGER_SAMPLES"); _GL_MAX_INTEGER_SAMPLESReady = true; } return _GL_MAX_INTEGER_SAMPLESContent; } }
        private static int _GL_MAX_INTEGER_SAMPLESContent = default;
        private static bool _GL_MAX_INTEGER_SAMPLESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_NAME_LENGTH"/>
        /// </summary>
        public static int GL_MAX_NAME_LENGTH { get { if (!_GL_MAX_NAME_LENGTHReady) { _GL_MAX_NAME_LENGTHContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_NAME_LENGTH"); _GL_MAX_NAME_LENGTHReady = true; } return _GL_MAX_NAME_LENGTHContent; } }
        private static int _GL_MAX_NAME_LENGTHContent = default;
        private static bool _GL_MAX_NAME_LENGTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_NUM_ACTIVE_VARIABLES"/>
        /// </summary>
        public static int GL_MAX_NUM_ACTIVE_VARIABLES { get { if (!_GL_MAX_NUM_ACTIVE_VARIABLESReady) { _GL_MAX_NUM_ACTIVE_VARIABLESContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_NUM_ACTIVE_VARIABLES"); _GL_MAX_NUM_ACTIVE_VARIABLESReady = true; } return _GL_MAX_NUM_ACTIVE_VARIABLESContent; } }
        private static int _GL_MAX_NUM_ACTIVE_VARIABLESContent = default;
        private static bool _GL_MAX_NUM_ACTIVE_VARIABLESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET"/>
        /// </summary>
        public static int GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET { get { if (!_GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSETReady) { _GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSETContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET"); _GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSETReady = true; } return _GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSETContent; } }
        private static int _GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSETContent = default;
        private static bool _GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_SAMPLE_MASK_WORDS"/>
        /// </summary>
        public static int GL_MAX_SAMPLE_MASK_WORDS { get { if (!_GL_MAX_SAMPLE_MASK_WORDSReady) { _GL_MAX_SAMPLE_MASK_WORDSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_SAMPLE_MASK_WORDS"); _GL_MAX_SAMPLE_MASK_WORDSReady = true; } return _GL_MAX_SAMPLE_MASK_WORDSContent; } }
        private static int _GL_MAX_SAMPLE_MASK_WORDSContent = default;
        private static bool _GL_MAX_SAMPLE_MASK_WORDSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_SHADER_STORAGE_BLOCK_SIZE"/>
        /// </summary>
        public static int GL_MAX_SHADER_STORAGE_BLOCK_SIZE { get { if (!_GL_MAX_SHADER_STORAGE_BLOCK_SIZEReady) { _GL_MAX_SHADER_STORAGE_BLOCK_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_SHADER_STORAGE_BLOCK_SIZE"); _GL_MAX_SHADER_STORAGE_BLOCK_SIZEReady = true; } return _GL_MAX_SHADER_STORAGE_BLOCK_SIZEContent; } }
        private static int _GL_MAX_SHADER_STORAGE_BLOCK_SIZEContent = default;
        private static bool _GL_MAX_SHADER_STORAGE_BLOCK_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS"/>
        /// </summary>
        public static int GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS { get { if (!_GL_MAX_SHADER_STORAGE_BUFFER_BINDINGSReady) { _GL_MAX_SHADER_STORAGE_BUFFER_BINDINGSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS"); _GL_MAX_SHADER_STORAGE_BUFFER_BINDINGSReady = true; } return _GL_MAX_SHADER_STORAGE_BUFFER_BINDINGSContent; } }
        private static int _GL_MAX_SHADER_STORAGE_BUFFER_BINDINGSContent = default;
        private static bool _GL_MAX_SHADER_STORAGE_BUFFER_BINDINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_UNIFORM_LOCATIONS"/>
        /// </summary>
        public static int GL_MAX_UNIFORM_LOCATIONS { get { if (!_GL_MAX_UNIFORM_LOCATIONSReady) { _GL_MAX_UNIFORM_LOCATIONSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_UNIFORM_LOCATIONS"); _GL_MAX_UNIFORM_LOCATIONSReady = true; } return _GL_MAX_UNIFORM_LOCATIONSContent; } }
        private static int _GL_MAX_UNIFORM_LOCATIONSContent = default;
        private static bool _GL_MAX_UNIFORM_LOCATIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS"/>
        /// </summary>
        public static int GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS { get { if (!_GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERSReady) { _GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS"); _GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERSReady = true; } return _GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERSContent; } }
        private static int _GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERSContent = default;
        private static bool _GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_VERTEX_ATOMIC_COUNTERS"/>
        /// </summary>
        public static int GL_MAX_VERTEX_ATOMIC_COUNTERS { get { if (!_GL_MAX_VERTEX_ATOMIC_COUNTERSReady) { _GL_MAX_VERTEX_ATOMIC_COUNTERSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_VERTEX_ATOMIC_COUNTERS"); _GL_MAX_VERTEX_ATOMIC_COUNTERSReady = true; } return _GL_MAX_VERTEX_ATOMIC_COUNTERSContent; } }
        private static int _GL_MAX_VERTEX_ATOMIC_COUNTERSContent = default;
        private static bool _GL_MAX_VERTEX_ATOMIC_COUNTERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_VERTEX_ATTRIB_BINDINGS"/>
        /// </summary>
        public static int GL_MAX_VERTEX_ATTRIB_BINDINGS { get { if (!_GL_MAX_VERTEX_ATTRIB_BINDINGSReady) { _GL_MAX_VERTEX_ATTRIB_BINDINGSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_VERTEX_ATTRIB_BINDINGS"); _GL_MAX_VERTEX_ATTRIB_BINDINGSReady = true; } return _GL_MAX_VERTEX_ATTRIB_BINDINGSContent; } }
        private static int _GL_MAX_VERTEX_ATTRIB_BINDINGSContent = default;
        private static bool _GL_MAX_VERTEX_ATTRIB_BINDINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET"/>
        /// </summary>
        public static int GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET { get { if (!_GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSETReady) { _GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSETContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET"); _GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSETReady = true; } return _GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSETContent; } }
        private static int _GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSETContent = default;
        private static bool _GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_VERTEX_ATTRIB_STRIDE"/>
        /// </summary>
        public static int GL_MAX_VERTEX_ATTRIB_STRIDE { get { if (!_GL_MAX_VERTEX_ATTRIB_STRIDEReady) { _GL_MAX_VERTEX_ATTRIB_STRIDEContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_VERTEX_ATTRIB_STRIDE"); _GL_MAX_VERTEX_ATTRIB_STRIDEReady = true; } return _GL_MAX_VERTEX_ATTRIB_STRIDEContent; } }
        private static int _GL_MAX_VERTEX_ATTRIB_STRIDEContent = default;
        private static bool _GL_MAX_VERTEX_ATTRIB_STRIDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_VERTEX_IMAGE_UNIFORMS"/>
        /// </summary>
        public static int GL_MAX_VERTEX_IMAGE_UNIFORMS { get { if (!_GL_MAX_VERTEX_IMAGE_UNIFORMSReady) { _GL_MAX_VERTEX_IMAGE_UNIFORMSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_VERTEX_IMAGE_UNIFORMS"); _GL_MAX_VERTEX_IMAGE_UNIFORMSReady = true; } return _GL_MAX_VERTEX_IMAGE_UNIFORMSContent; } }
        private static int _GL_MAX_VERTEX_IMAGE_UNIFORMSContent = default;
        private static bool _GL_MAX_VERTEX_IMAGE_UNIFORMSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS"/>
        /// </summary>
        public static int GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS { get { if (!_GL_MAX_VERTEX_SHADER_STORAGE_BLOCKSReady) { _GL_MAX_VERTEX_SHADER_STORAGE_BLOCKSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS"); _GL_MAX_VERTEX_SHADER_STORAGE_BLOCKSReady = true; } return _GL_MAX_VERTEX_SHADER_STORAGE_BLOCKSContent; } }
        private static int _GL_MAX_VERTEX_SHADER_STORAGE_BLOCKSContent = default;
        private static bool _GL_MAX_VERTEX_SHADER_STORAGE_BLOCKSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET"/>
        /// </summary>
        public static int GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET { get { if (!_GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSETReady) { _GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSETContent = SGetField<int>(LocalBridgeClazz, "GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET"); _GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSETReady = true; } return _GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSETContent; } }
        private static int _GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSETContent = default;
        private static bool _GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_NAME_LENGTH"/>
        /// </summary>
        public static int GL_NAME_LENGTH { get { if (!_GL_NAME_LENGTHReady) { _GL_NAME_LENGTHContent = SGetField<int>(LocalBridgeClazz, "GL_NAME_LENGTH"); _GL_NAME_LENGTHReady = true; } return _GL_NAME_LENGTHContent; } }
        private static int _GL_NAME_LENGTHContent = default;
        private static bool _GL_NAME_LENGTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_NUM_ACTIVE_VARIABLES"/>
        /// </summary>
        public static int GL_NUM_ACTIVE_VARIABLES { get { if (!_GL_NUM_ACTIVE_VARIABLESReady) { _GL_NUM_ACTIVE_VARIABLESContent = SGetField<int>(LocalBridgeClazz, "GL_NUM_ACTIVE_VARIABLES"); _GL_NUM_ACTIVE_VARIABLESReady = true; } return _GL_NUM_ACTIVE_VARIABLESContent; } }
        private static int _GL_NUM_ACTIVE_VARIABLESContent = default;
        private static bool _GL_NUM_ACTIVE_VARIABLESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_OFFSET"/>
        /// </summary>
        public static int GL_OFFSET { get { if (!_GL_OFFSETReady) { _GL_OFFSETContent = SGetField<int>(LocalBridgeClazz, "GL_OFFSET"); _GL_OFFSETReady = true; } return _GL_OFFSETContent; } }
        private static int _GL_OFFSETContent = default;
        private static bool _GL_OFFSETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_PIXEL_BUFFER_BARRIER_BIT"/>
        /// </summary>
        public static int GL_PIXEL_BUFFER_BARRIER_BIT { get { if (!_GL_PIXEL_BUFFER_BARRIER_BITReady) { _GL_PIXEL_BUFFER_BARRIER_BITContent = SGetField<int>(LocalBridgeClazz, "GL_PIXEL_BUFFER_BARRIER_BIT"); _GL_PIXEL_BUFFER_BARRIER_BITReady = true; } return _GL_PIXEL_BUFFER_BARRIER_BITContent; } }
        private static int _GL_PIXEL_BUFFER_BARRIER_BITContent = default;
        private static bool _GL_PIXEL_BUFFER_BARRIER_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_PROGRAM_INPUT"/>
        /// </summary>
        public static int GL_PROGRAM_INPUT { get { if (!_GL_PROGRAM_INPUTReady) { _GL_PROGRAM_INPUTContent = SGetField<int>(LocalBridgeClazz, "GL_PROGRAM_INPUT"); _GL_PROGRAM_INPUTReady = true; } return _GL_PROGRAM_INPUTContent; } }
        private static int _GL_PROGRAM_INPUTContent = default;
        private static bool _GL_PROGRAM_INPUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_PROGRAM_OUTPUT"/>
        /// </summary>
        public static int GL_PROGRAM_OUTPUT { get { if (!_GL_PROGRAM_OUTPUTReady) { _GL_PROGRAM_OUTPUTContent = SGetField<int>(LocalBridgeClazz, "GL_PROGRAM_OUTPUT"); _GL_PROGRAM_OUTPUTReady = true; } return _GL_PROGRAM_OUTPUTContent; } }
        private static int _GL_PROGRAM_OUTPUTContent = default;
        private static bool _GL_PROGRAM_OUTPUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_PROGRAM_PIPELINE_BINDING"/>
        /// </summary>
        public static int GL_PROGRAM_PIPELINE_BINDING { get { if (!_GL_PROGRAM_PIPELINE_BINDINGReady) { _GL_PROGRAM_PIPELINE_BINDINGContent = SGetField<int>(LocalBridgeClazz, "GL_PROGRAM_PIPELINE_BINDING"); _GL_PROGRAM_PIPELINE_BINDINGReady = true; } return _GL_PROGRAM_PIPELINE_BINDINGContent; } }
        private static int _GL_PROGRAM_PIPELINE_BINDINGContent = default;
        private static bool _GL_PROGRAM_PIPELINE_BINDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_PROGRAM_SEPARABLE"/>
        /// </summary>
        public static int GL_PROGRAM_SEPARABLE { get { if (!_GL_PROGRAM_SEPARABLEReady) { _GL_PROGRAM_SEPARABLEContent = SGetField<int>(LocalBridgeClazz, "GL_PROGRAM_SEPARABLE"); _GL_PROGRAM_SEPARABLEReady = true; } return _GL_PROGRAM_SEPARABLEContent; } }
        private static int _GL_PROGRAM_SEPARABLEContent = default;
        private static bool _GL_PROGRAM_SEPARABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_READ_ONLY"/>
        /// </summary>
        public static int GL_READ_ONLY { get { if (!_GL_READ_ONLYReady) { _GL_READ_ONLYContent = SGetField<int>(LocalBridgeClazz, "GL_READ_ONLY"); _GL_READ_ONLYReady = true; } return _GL_READ_ONLYContent; } }
        private static int _GL_READ_ONLYContent = default;
        private static bool _GL_READ_ONLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_READ_WRITE"/>
        /// </summary>
        public static int GL_READ_WRITE { get { if (!_GL_READ_WRITEReady) { _GL_READ_WRITEContent = SGetField<int>(LocalBridgeClazz, "GL_READ_WRITE"); _GL_READ_WRITEReady = true; } return _GL_READ_WRITEContent; } }
        private static int _GL_READ_WRITEContent = default;
        private static bool _GL_READ_WRITEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_REFERENCED_BY_COMPUTE_SHADER"/>
        /// </summary>
        public static int GL_REFERENCED_BY_COMPUTE_SHADER { get { if (!_GL_REFERENCED_BY_COMPUTE_SHADERReady) { _GL_REFERENCED_BY_COMPUTE_SHADERContent = SGetField<int>(LocalBridgeClazz, "GL_REFERENCED_BY_COMPUTE_SHADER"); _GL_REFERENCED_BY_COMPUTE_SHADERReady = true; } return _GL_REFERENCED_BY_COMPUTE_SHADERContent; } }
        private static int _GL_REFERENCED_BY_COMPUTE_SHADERContent = default;
        private static bool _GL_REFERENCED_BY_COMPUTE_SHADERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_REFERENCED_BY_FRAGMENT_SHADER"/>
        /// </summary>
        public static int GL_REFERENCED_BY_FRAGMENT_SHADER { get { if (!_GL_REFERENCED_BY_FRAGMENT_SHADERReady) { _GL_REFERENCED_BY_FRAGMENT_SHADERContent = SGetField<int>(LocalBridgeClazz, "GL_REFERENCED_BY_FRAGMENT_SHADER"); _GL_REFERENCED_BY_FRAGMENT_SHADERReady = true; } return _GL_REFERENCED_BY_FRAGMENT_SHADERContent; } }
        private static int _GL_REFERENCED_BY_FRAGMENT_SHADERContent = default;
        private static bool _GL_REFERENCED_BY_FRAGMENT_SHADERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_REFERENCED_BY_VERTEX_SHADER"/>
        /// </summary>
        public static int GL_REFERENCED_BY_VERTEX_SHADER { get { if (!_GL_REFERENCED_BY_VERTEX_SHADERReady) { _GL_REFERENCED_BY_VERTEX_SHADERContent = SGetField<int>(LocalBridgeClazz, "GL_REFERENCED_BY_VERTEX_SHADER"); _GL_REFERENCED_BY_VERTEX_SHADERReady = true; } return _GL_REFERENCED_BY_VERTEX_SHADERContent; } }
        private static int _GL_REFERENCED_BY_VERTEX_SHADERContent = default;
        private static bool _GL_REFERENCED_BY_VERTEX_SHADERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_SAMPLE_MASK"/>
        /// </summary>
        public static int GL_SAMPLE_MASK { get { if (!_GL_SAMPLE_MASKReady) { _GL_SAMPLE_MASKContent = SGetField<int>(LocalBridgeClazz, "GL_SAMPLE_MASK"); _GL_SAMPLE_MASKReady = true; } return _GL_SAMPLE_MASKContent; } }
        private static int _GL_SAMPLE_MASKContent = default;
        private static bool _GL_SAMPLE_MASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_SAMPLE_MASK_VALUE"/>
        /// </summary>
        public static int GL_SAMPLE_MASK_VALUE { get { if (!_GL_SAMPLE_MASK_VALUEReady) { _GL_SAMPLE_MASK_VALUEContent = SGetField<int>(LocalBridgeClazz, "GL_SAMPLE_MASK_VALUE"); _GL_SAMPLE_MASK_VALUEReady = true; } return _GL_SAMPLE_MASK_VALUEContent; } }
        private static int _GL_SAMPLE_MASK_VALUEContent = default;
        private static bool _GL_SAMPLE_MASK_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_SAMPLE_POSITION"/>
        /// </summary>
        public static int GL_SAMPLE_POSITION { get { if (!_GL_SAMPLE_POSITIONReady) { _GL_SAMPLE_POSITIONContent = SGetField<int>(LocalBridgeClazz, "GL_SAMPLE_POSITION"); _GL_SAMPLE_POSITIONReady = true; } return _GL_SAMPLE_POSITIONContent; } }
        private static int _GL_SAMPLE_POSITIONContent = default;
        private static bool _GL_SAMPLE_POSITIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_SAMPLER_2D_MULTISAMPLE"/>
        /// </summary>
        public static int GL_SAMPLER_2D_MULTISAMPLE { get { if (!_GL_SAMPLER_2D_MULTISAMPLEReady) { _GL_SAMPLER_2D_MULTISAMPLEContent = SGetField<int>(LocalBridgeClazz, "GL_SAMPLER_2D_MULTISAMPLE"); _GL_SAMPLER_2D_MULTISAMPLEReady = true; } return _GL_SAMPLER_2D_MULTISAMPLEContent; } }
        private static int _GL_SAMPLER_2D_MULTISAMPLEContent = default;
        private static bool _GL_SAMPLER_2D_MULTISAMPLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_SHADER_IMAGE_ACCESS_BARRIER_BIT"/>
        /// </summary>
        public static int GL_SHADER_IMAGE_ACCESS_BARRIER_BIT { get { if (!_GL_SHADER_IMAGE_ACCESS_BARRIER_BITReady) { _GL_SHADER_IMAGE_ACCESS_BARRIER_BITContent = SGetField<int>(LocalBridgeClazz, "GL_SHADER_IMAGE_ACCESS_BARRIER_BIT"); _GL_SHADER_IMAGE_ACCESS_BARRIER_BITReady = true; } return _GL_SHADER_IMAGE_ACCESS_BARRIER_BITContent; } }
        private static int _GL_SHADER_IMAGE_ACCESS_BARRIER_BITContent = default;
        private static bool _GL_SHADER_IMAGE_ACCESS_BARRIER_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_SHADER_STORAGE_BARRIER_BIT"/>
        /// </summary>
        public static int GL_SHADER_STORAGE_BARRIER_BIT { get { if (!_GL_SHADER_STORAGE_BARRIER_BITReady) { _GL_SHADER_STORAGE_BARRIER_BITContent = SGetField<int>(LocalBridgeClazz, "GL_SHADER_STORAGE_BARRIER_BIT"); _GL_SHADER_STORAGE_BARRIER_BITReady = true; } return _GL_SHADER_STORAGE_BARRIER_BITContent; } }
        private static int _GL_SHADER_STORAGE_BARRIER_BITContent = default;
        private static bool _GL_SHADER_STORAGE_BARRIER_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_SHADER_STORAGE_BLOCK"/>
        /// </summary>
        public static int GL_SHADER_STORAGE_BLOCK { get { if (!_GL_SHADER_STORAGE_BLOCKReady) { _GL_SHADER_STORAGE_BLOCKContent = SGetField<int>(LocalBridgeClazz, "GL_SHADER_STORAGE_BLOCK"); _GL_SHADER_STORAGE_BLOCKReady = true; } return _GL_SHADER_STORAGE_BLOCKContent; } }
        private static int _GL_SHADER_STORAGE_BLOCKContent = default;
        private static bool _GL_SHADER_STORAGE_BLOCKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_SHADER_STORAGE_BUFFER"/>
        /// </summary>
        public static int GL_SHADER_STORAGE_BUFFER { get { if (!_GL_SHADER_STORAGE_BUFFERReady) { _GL_SHADER_STORAGE_BUFFERContent = SGetField<int>(LocalBridgeClazz, "GL_SHADER_STORAGE_BUFFER"); _GL_SHADER_STORAGE_BUFFERReady = true; } return _GL_SHADER_STORAGE_BUFFERContent; } }
        private static int _GL_SHADER_STORAGE_BUFFERContent = default;
        private static bool _GL_SHADER_STORAGE_BUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_SHADER_STORAGE_BUFFER_BINDING"/>
        /// </summary>
        public static int GL_SHADER_STORAGE_BUFFER_BINDING { get { if (!_GL_SHADER_STORAGE_BUFFER_BINDINGReady) { _GL_SHADER_STORAGE_BUFFER_BINDINGContent = SGetField<int>(LocalBridgeClazz, "GL_SHADER_STORAGE_BUFFER_BINDING"); _GL_SHADER_STORAGE_BUFFER_BINDINGReady = true; } return _GL_SHADER_STORAGE_BUFFER_BINDINGContent; } }
        private static int _GL_SHADER_STORAGE_BUFFER_BINDINGContent = default;
        private static bool _GL_SHADER_STORAGE_BUFFER_BINDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT"/>
        /// </summary>
        public static int GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT { get { if (!_GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENTReady) { _GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENTContent = SGetField<int>(LocalBridgeClazz, "GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT"); _GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENTReady = true; } return _GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENTContent; } }
        private static int _GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENTContent = default;
        private static bool _GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_SHADER_STORAGE_BUFFER_SIZE"/>
        /// </summary>
        public static int GL_SHADER_STORAGE_BUFFER_SIZE { get { if (!_GL_SHADER_STORAGE_BUFFER_SIZEReady) { _GL_SHADER_STORAGE_BUFFER_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_SHADER_STORAGE_BUFFER_SIZE"); _GL_SHADER_STORAGE_BUFFER_SIZEReady = true; } return _GL_SHADER_STORAGE_BUFFER_SIZEContent; } }
        private static int _GL_SHADER_STORAGE_BUFFER_SIZEContent = default;
        private static bool _GL_SHADER_STORAGE_BUFFER_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_SHADER_STORAGE_BUFFER_START"/>
        /// </summary>
        public static int GL_SHADER_STORAGE_BUFFER_START { get { if (!_GL_SHADER_STORAGE_BUFFER_STARTReady) { _GL_SHADER_STORAGE_BUFFER_STARTContent = SGetField<int>(LocalBridgeClazz, "GL_SHADER_STORAGE_BUFFER_START"); _GL_SHADER_STORAGE_BUFFER_STARTReady = true; } return _GL_SHADER_STORAGE_BUFFER_STARTContent; } }
        private static int _GL_SHADER_STORAGE_BUFFER_STARTContent = default;
        private static bool _GL_SHADER_STORAGE_BUFFER_STARTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_STENCIL_INDEX"/>
        /// </summary>
        public static int GL_STENCIL_INDEX { get { if (!_GL_STENCIL_INDEXReady) { _GL_STENCIL_INDEXContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_INDEX"); _GL_STENCIL_INDEXReady = true; } return _GL_STENCIL_INDEXContent; } }
        private static int _GL_STENCIL_INDEXContent = default;
        private static bool _GL_STENCIL_INDEXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_TEXTURE_2D_MULTISAMPLE"/>
        /// </summary>
        public static int GL_TEXTURE_2D_MULTISAMPLE { get { if (!_GL_TEXTURE_2D_MULTISAMPLEReady) { _GL_TEXTURE_2D_MULTISAMPLEContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_2D_MULTISAMPLE"); _GL_TEXTURE_2D_MULTISAMPLEReady = true; } return _GL_TEXTURE_2D_MULTISAMPLEContent; } }
        private static int _GL_TEXTURE_2D_MULTISAMPLEContent = default;
        private static bool _GL_TEXTURE_2D_MULTISAMPLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_TEXTURE_ALPHA_SIZE"/>
        /// </summary>
        public static int GL_TEXTURE_ALPHA_SIZE { get { if (!_GL_TEXTURE_ALPHA_SIZEReady) { _GL_TEXTURE_ALPHA_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_ALPHA_SIZE"); _GL_TEXTURE_ALPHA_SIZEReady = true; } return _GL_TEXTURE_ALPHA_SIZEContent; } }
        private static int _GL_TEXTURE_ALPHA_SIZEContent = default;
        private static bool _GL_TEXTURE_ALPHA_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_TEXTURE_ALPHA_TYPE"/>
        /// </summary>
        public static int GL_TEXTURE_ALPHA_TYPE { get { if (!_GL_TEXTURE_ALPHA_TYPEReady) { _GL_TEXTURE_ALPHA_TYPEContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_ALPHA_TYPE"); _GL_TEXTURE_ALPHA_TYPEReady = true; } return _GL_TEXTURE_ALPHA_TYPEContent; } }
        private static int _GL_TEXTURE_ALPHA_TYPEContent = default;
        private static bool _GL_TEXTURE_ALPHA_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_TEXTURE_BINDING_2D_MULTISAMPLE"/>
        /// </summary>
        public static int GL_TEXTURE_BINDING_2D_MULTISAMPLE { get { if (!_GL_TEXTURE_BINDING_2D_MULTISAMPLEReady) { _GL_TEXTURE_BINDING_2D_MULTISAMPLEContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_BINDING_2D_MULTISAMPLE"); _GL_TEXTURE_BINDING_2D_MULTISAMPLEReady = true; } return _GL_TEXTURE_BINDING_2D_MULTISAMPLEContent; } }
        private static int _GL_TEXTURE_BINDING_2D_MULTISAMPLEContent = default;
        private static bool _GL_TEXTURE_BINDING_2D_MULTISAMPLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_TEXTURE_BLUE_SIZE"/>
        /// </summary>
        public static int GL_TEXTURE_BLUE_SIZE { get { if (!_GL_TEXTURE_BLUE_SIZEReady) { _GL_TEXTURE_BLUE_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_BLUE_SIZE"); _GL_TEXTURE_BLUE_SIZEReady = true; } return _GL_TEXTURE_BLUE_SIZEContent; } }
        private static int _GL_TEXTURE_BLUE_SIZEContent = default;
        private static bool _GL_TEXTURE_BLUE_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_TEXTURE_BLUE_TYPE"/>
        /// </summary>
        public static int GL_TEXTURE_BLUE_TYPE { get { if (!_GL_TEXTURE_BLUE_TYPEReady) { _GL_TEXTURE_BLUE_TYPEContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_BLUE_TYPE"); _GL_TEXTURE_BLUE_TYPEReady = true; } return _GL_TEXTURE_BLUE_TYPEContent; } }
        private static int _GL_TEXTURE_BLUE_TYPEContent = default;
        private static bool _GL_TEXTURE_BLUE_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_TEXTURE_COMPRESSED"/>
        /// </summary>
        public static int GL_TEXTURE_COMPRESSED { get { if (!_GL_TEXTURE_COMPRESSEDReady) { _GL_TEXTURE_COMPRESSEDContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_COMPRESSED"); _GL_TEXTURE_COMPRESSEDReady = true; } return _GL_TEXTURE_COMPRESSEDContent; } }
        private static int _GL_TEXTURE_COMPRESSEDContent = default;
        private static bool _GL_TEXTURE_COMPRESSEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_TEXTURE_DEPTH"/>
        /// </summary>
        public static int GL_TEXTURE_DEPTH { get { if (!_GL_TEXTURE_DEPTHReady) { _GL_TEXTURE_DEPTHContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_DEPTH"); _GL_TEXTURE_DEPTHReady = true; } return _GL_TEXTURE_DEPTHContent; } }
        private static int _GL_TEXTURE_DEPTHContent = default;
        private static bool _GL_TEXTURE_DEPTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_TEXTURE_DEPTH_SIZE"/>
        /// </summary>
        public static int GL_TEXTURE_DEPTH_SIZE { get { if (!_GL_TEXTURE_DEPTH_SIZEReady) { _GL_TEXTURE_DEPTH_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_DEPTH_SIZE"); _GL_TEXTURE_DEPTH_SIZEReady = true; } return _GL_TEXTURE_DEPTH_SIZEContent; } }
        private static int _GL_TEXTURE_DEPTH_SIZEContent = default;
        private static bool _GL_TEXTURE_DEPTH_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_TEXTURE_DEPTH_TYPE"/>
        /// </summary>
        public static int GL_TEXTURE_DEPTH_TYPE { get { if (!_GL_TEXTURE_DEPTH_TYPEReady) { _GL_TEXTURE_DEPTH_TYPEContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_DEPTH_TYPE"); _GL_TEXTURE_DEPTH_TYPEReady = true; } return _GL_TEXTURE_DEPTH_TYPEContent; } }
        private static int _GL_TEXTURE_DEPTH_TYPEContent = default;
        private static bool _GL_TEXTURE_DEPTH_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_TEXTURE_FETCH_BARRIER_BIT"/>
        /// </summary>
        public static int GL_TEXTURE_FETCH_BARRIER_BIT { get { if (!_GL_TEXTURE_FETCH_BARRIER_BITReady) { _GL_TEXTURE_FETCH_BARRIER_BITContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_FETCH_BARRIER_BIT"); _GL_TEXTURE_FETCH_BARRIER_BITReady = true; } return _GL_TEXTURE_FETCH_BARRIER_BITContent; } }
        private static int _GL_TEXTURE_FETCH_BARRIER_BITContent = default;
        private static bool _GL_TEXTURE_FETCH_BARRIER_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_TEXTURE_FIXED_SAMPLE_LOCATIONS"/>
        /// </summary>
        public static int GL_TEXTURE_FIXED_SAMPLE_LOCATIONS { get { if (!_GL_TEXTURE_FIXED_SAMPLE_LOCATIONSReady) { _GL_TEXTURE_FIXED_SAMPLE_LOCATIONSContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_FIXED_SAMPLE_LOCATIONS"); _GL_TEXTURE_FIXED_SAMPLE_LOCATIONSReady = true; } return _GL_TEXTURE_FIXED_SAMPLE_LOCATIONSContent; } }
        private static int _GL_TEXTURE_FIXED_SAMPLE_LOCATIONSContent = default;
        private static bool _GL_TEXTURE_FIXED_SAMPLE_LOCATIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_TEXTURE_GREEN_SIZE"/>
        /// </summary>
        public static int GL_TEXTURE_GREEN_SIZE { get { if (!_GL_TEXTURE_GREEN_SIZEReady) { _GL_TEXTURE_GREEN_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_GREEN_SIZE"); _GL_TEXTURE_GREEN_SIZEReady = true; } return _GL_TEXTURE_GREEN_SIZEContent; } }
        private static int _GL_TEXTURE_GREEN_SIZEContent = default;
        private static bool _GL_TEXTURE_GREEN_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_TEXTURE_GREEN_TYPE"/>
        /// </summary>
        public static int GL_TEXTURE_GREEN_TYPE { get { if (!_GL_TEXTURE_GREEN_TYPEReady) { _GL_TEXTURE_GREEN_TYPEContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_GREEN_TYPE"); _GL_TEXTURE_GREEN_TYPEReady = true; } return _GL_TEXTURE_GREEN_TYPEContent; } }
        private static int _GL_TEXTURE_GREEN_TYPEContent = default;
        private static bool _GL_TEXTURE_GREEN_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_TEXTURE_HEIGHT"/>
        /// </summary>
        public static int GL_TEXTURE_HEIGHT { get { if (!_GL_TEXTURE_HEIGHTReady) { _GL_TEXTURE_HEIGHTContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_HEIGHT"); _GL_TEXTURE_HEIGHTReady = true; } return _GL_TEXTURE_HEIGHTContent; } }
        private static int _GL_TEXTURE_HEIGHTContent = default;
        private static bool _GL_TEXTURE_HEIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_TEXTURE_INTERNAL_FORMAT"/>
        /// </summary>
        public static int GL_TEXTURE_INTERNAL_FORMAT { get { if (!_GL_TEXTURE_INTERNAL_FORMATReady) { _GL_TEXTURE_INTERNAL_FORMATContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_INTERNAL_FORMAT"); _GL_TEXTURE_INTERNAL_FORMATReady = true; } return _GL_TEXTURE_INTERNAL_FORMATContent; } }
        private static int _GL_TEXTURE_INTERNAL_FORMATContent = default;
        private static bool _GL_TEXTURE_INTERNAL_FORMATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_TEXTURE_RED_SIZE"/>
        /// </summary>
        public static int GL_TEXTURE_RED_SIZE { get { if (!_GL_TEXTURE_RED_SIZEReady) { _GL_TEXTURE_RED_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_RED_SIZE"); _GL_TEXTURE_RED_SIZEReady = true; } return _GL_TEXTURE_RED_SIZEContent; } }
        private static int _GL_TEXTURE_RED_SIZEContent = default;
        private static bool _GL_TEXTURE_RED_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_TEXTURE_RED_TYPE"/>
        /// </summary>
        public static int GL_TEXTURE_RED_TYPE { get { if (!_GL_TEXTURE_RED_TYPEReady) { _GL_TEXTURE_RED_TYPEContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_RED_TYPE"); _GL_TEXTURE_RED_TYPEReady = true; } return _GL_TEXTURE_RED_TYPEContent; } }
        private static int _GL_TEXTURE_RED_TYPEContent = default;
        private static bool _GL_TEXTURE_RED_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_TEXTURE_SAMPLES"/>
        /// </summary>
        public static int GL_TEXTURE_SAMPLES { get { if (!_GL_TEXTURE_SAMPLESReady) { _GL_TEXTURE_SAMPLESContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_SAMPLES"); _GL_TEXTURE_SAMPLESReady = true; } return _GL_TEXTURE_SAMPLESContent; } }
        private static int _GL_TEXTURE_SAMPLESContent = default;
        private static bool _GL_TEXTURE_SAMPLESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_TEXTURE_SHARED_SIZE"/>
        /// </summary>
        public static int GL_TEXTURE_SHARED_SIZE { get { if (!_GL_TEXTURE_SHARED_SIZEReady) { _GL_TEXTURE_SHARED_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_SHARED_SIZE"); _GL_TEXTURE_SHARED_SIZEReady = true; } return _GL_TEXTURE_SHARED_SIZEContent; } }
        private static int _GL_TEXTURE_SHARED_SIZEContent = default;
        private static bool _GL_TEXTURE_SHARED_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_TEXTURE_STENCIL_SIZE"/>
        /// </summary>
        public static int GL_TEXTURE_STENCIL_SIZE { get { if (!_GL_TEXTURE_STENCIL_SIZEReady) { _GL_TEXTURE_STENCIL_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_STENCIL_SIZE"); _GL_TEXTURE_STENCIL_SIZEReady = true; } return _GL_TEXTURE_STENCIL_SIZEContent; } }
        private static int _GL_TEXTURE_STENCIL_SIZEContent = default;
        private static bool _GL_TEXTURE_STENCIL_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_TEXTURE_UPDATE_BARRIER_BIT"/>
        /// </summary>
        public static int GL_TEXTURE_UPDATE_BARRIER_BIT { get { if (!_GL_TEXTURE_UPDATE_BARRIER_BITReady) { _GL_TEXTURE_UPDATE_BARRIER_BITContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_UPDATE_BARRIER_BIT"); _GL_TEXTURE_UPDATE_BARRIER_BITReady = true; } return _GL_TEXTURE_UPDATE_BARRIER_BITContent; } }
        private static int _GL_TEXTURE_UPDATE_BARRIER_BITContent = default;
        private static bool _GL_TEXTURE_UPDATE_BARRIER_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_TEXTURE_WIDTH"/>
        /// </summary>
        public static int GL_TEXTURE_WIDTH { get { if (!_GL_TEXTURE_WIDTHReady) { _GL_TEXTURE_WIDTHContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_WIDTH"); _GL_TEXTURE_WIDTHReady = true; } return _GL_TEXTURE_WIDTHContent; } }
        private static int _GL_TEXTURE_WIDTHContent = default;
        private static bool _GL_TEXTURE_WIDTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_TOP_LEVEL_ARRAY_SIZE"/>
        /// </summary>
        public static int GL_TOP_LEVEL_ARRAY_SIZE { get { if (!_GL_TOP_LEVEL_ARRAY_SIZEReady) { _GL_TOP_LEVEL_ARRAY_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_TOP_LEVEL_ARRAY_SIZE"); _GL_TOP_LEVEL_ARRAY_SIZEReady = true; } return _GL_TOP_LEVEL_ARRAY_SIZEContent; } }
        private static int _GL_TOP_LEVEL_ARRAY_SIZEContent = default;
        private static bool _GL_TOP_LEVEL_ARRAY_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_TOP_LEVEL_ARRAY_STRIDE"/>
        /// </summary>
        public static int GL_TOP_LEVEL_ARRAY_STRIDE { get { if (!_GL_TOP_LEVEL_ARRAY_STRIDEReady) { _GL_TOP_LEVEL_ARRAY_STRIDEContent = SGetField<int>(LocalBridgeClazz, "GL_TOP_LEVEL_ARRAY_STRIDE"); _GL_TOP_LEVEL_ARRAY_STRIDEReady = true; } return _GL_TOP_LEVEL_ARRAY_STRIDEContent; } }
        private static int _GL_TOP_LEVEL_ARRAY_STRIDEContent = default;
        private static bool _GL_TOP_LEVEL_ARRAY_STRIDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_TRANSFORM_FEEDBACK_BARRIER_BIT"/>
        /// </summary>
        public static int GL_TRANSFORM_FEEDBACK_BARRIER_BIT { get { if (!_GL_TRANSFORM_FEEDBACK_BARRIER_BITReady) { _GL_TRANSFORM_FEEDBACK_BARRIER_BITContent = SGetField<int>(LocalBridgeClazz, "GL_TRANSFORM_FEEDBACK_BARRIER_BIT"); _GL_TRANSFORM_FEEDBACK_BARRIER_BITReady = true; } return _GL_TRANSFORM_FEEDBACK_BARRIER_BITContent; } }
        private static int _GL_TRANSFORM_FEEDBACK_BARRIER_BITContent = default;
        private static bool _GL_TRANSFORM_FEEDBACK_BARRIER_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_TRANSFORM_FEEDBACK_VARYING"/>
        /// </summary>
        public static int GL_TRANSFORM_FEEDBACK_VARYING { get { if (!_GL_TRANSFORM_FEEDBACK_VARYINGReady) { _GL_TRANSFORM_FEEDBACK_VARYINGContent = SGetField<int>(LocalBridgeClazz, "GL_TRANSFORM_FEEDBACK_VARYING"); _GL_TRANSFORM_FEEDBACK_VARYINGReady = true; } return _GL_TRANSFORM_FEEDBACK_VARYINGContent; } }
        private static int _GL_TRANSFORM_FEEDBACK_VARYINGContent = default;
        private static bool _GL_TRANSFORM_FEEDBACK_VARYINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_TYPE"/>
        /// </summary>
        public static int GL_TYPE { get { if (!_GL_TYPEReady) { _GL_TYPEContent = SGetField<int>(LocalBridgeClazz, "GL_TYPE"); _GL_TYPEReady = true; } return _GL_TYPEContent; } }
        private static int _GL_TYPEContent = default;
        private static bool _GL_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_UNIFORM"/>
        /// </summary>
        public static int GL_UNIFORM { get { if (!_GL_UNIFORMReady) { _GL_UNIFORMContent = SGetField<int>(LocalBridgeClazz, "GL_UNIFORM"); _GL_UNIFORMReady = true; } return _GL_UNIFORMContent; } }
        private static int _GL_UNIFORMContent = default;
        private static bool _GL_UNIFORMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_UNIFORM_BARRIER_BIT"/>
        /// </summary>
        public static int GL_UNIFORM_BARRIER_BIT { get { if (!_GL_UNIFORM_BARRIER_BITReady) { _GL_UNIFORM_BARRIER_BITContent = SGetField<int>(LocalBridgeClazz, "GL_UNIFORM_BARRIER_BIT"); _GL_UNIFORM_BARRIER_BITReady = true; } return _GL_UNIFORM_BARRIER_BITContent; } }
        private static int _GL_UNIFORM_BARRIER_BITContent = default;
        private static bool _GL_UNIFORM_BARRIER_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_UNIFORM_BLOCK"/>
        /// </summary>
        public static int GL_UNIFORM_BLOCK { get { if (!_GL_UNIFORM_BLOCKReady) { _GL_UNIFORM_BLOCKContent = SGetField<int>(LocalBridgeClazz, "GL_UNIFORM_BLOCK"); _GL_UNIFORM_BLOCKReady = true; } return _GL_UNIFORM_BLOCKContent; } }
        private static int _GL_UNIFORM_BLOCKContent = default;
        private static bool _GL_UNIFORM_BLOCKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_UNSIGNED_INT_ATOMIC_COUNTER"/>
        /// </summary>
        public static int GL_UNSIGNED_INT_ATOMIC_COUNTER { get { if (!_GL_UNSIGNED_INT_ATOMIC_COUNTERReady) { _GL_UNSIGNED_INT_ATOMIC_COUNTERContent = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNED_INT_ATOMIC_COUNTER"); _GL_UNSIGNED_INT_ATOMIC_COUNTERReady = true; } return _GL_UNSIGNED_INT_ATOMIC_COUNTERContent; } }
        private static int _GL_UNSIGNED_INT_ATOMIC_COUNTERContent = default;
        private static bool _GL_UNSIGNED_INT_ATOMIC_COUNTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_UNSIGNED_INT_IMAGE_2D"/>
        /// </summary>
        public static int GL_UNSIGNED_INT_IMAGE_2D { get { if (!_GL_UNSIGNED_INT_IMAGE_2DReady) { _GL_UNSIGNED_INT_IMAGE_2DContent = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNED_INT_IMAGE_2D"); _GL_UNSIGNED_INT_IMAGE_2DReady = true; } return _GL_UNSIGNED_INT_IMAGE_2DContent; } }
        private static int _GL_UNSIGNED_INT_IMAGE_2DContent = default;
        private static bool _GL_UNSIGNED_INT_IMAGE_2DReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_UNSIGNED_INT_IMAGE_2D_ARRAY"/>
        /// </summary>
        public static int GL_UNSIGNED_INT_IMAGE_2D_ARRAY { get { if (!_GL_UNSIGNED_INT_IMAGE_2D_ARRAYReady) { _GL_UNSIGNED_INT_IMAGE_2D_ARRAYContent = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNED_INT_IMAGE_2D_ARRAY"); _GL_UNSIGNED_INT_IMAGE_2D_ARRAYReady = true; } return _GL_UNSIGNED_INT_IMAGE_2D_ARRAYContent; } }
        private static int _GL_UNSIGNED_INT_IMAGE_2D_ARRAYContent = default;
        private static bool _GL_UNSIGNED_INT_IMAGE_2D_ARRAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_UNSIGNED_INT_IMAGE_3D"/>
        /// </summary>
        public static int GL_UNSIGNED_INT_IMAGE_3D { get { if (!_GL_UNSIGNED_INT_IMAGE_3DReady) { _GL_UNSIGNED_INT_IMAGE_3DContent = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNED_INT_IMAGE_3D"); _GL_UNSIGNED_INT_IMAGE_3DReady = true; } return _GL_UNSIGNED_INT_IMAGE_3DContent; } }
        private static int _GL_UNSIGNED_INT_IMAGE_3DContent = default;
        private static bool _GL_UNSIGNED_INT_IMAGE_3DReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_UNSIGNED_INT_IMAGE_CUBE"/>
        /// </summary>
        public static int GL_UNSIGNED_INT_IMAGE_CUBE { get { if (!_GL_UNSIGNED_INT_IMAGE_CUBEReady) { _GL_UNSIGNED_INT_IMAGE_CUBEContent = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNED_INT_IMAGE_CUBE"); _GL_UNSIGNED_INT_IMAGE_CUBEReady = true; } return _GL_UNSIGNED_INT_IMAGE_CUBEContent; } }
        private static int _GL_UNSIGNED_INT_IMAGE_CUBEContent = default;
        private static bool _GL_UNSIGNED_INT_IMAGE_CUBEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE"/>
        /// </summary>
        public static int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE { get { if (!_GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLEReady) { _GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLEContent = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE"); _GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLEReady = true; } return _GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLEContent; } }
        private static int _GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLEContent = default;
        private static bool _GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT"/>
        /// </summary>
        public static int GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT { get { if (!_GL_VERTEX_ATTRIB_ARRAY_BARRIER_BITReady) { _GL_VERTEX_ATTRIB_ARRAY_BARRIER_BITContent = SGetField<int>(LocalBridgeClazz, "GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT"); _GL_VERTEX_ATTRIB_ARRAY_BARRIER_BITReady = true; } return _GL_VERTEX_ATTRIB_ARRAY_BARRIER_BITContent; } }
        private static int _GL_VERTEX_ATTRIB_ARRAY_BARRIER_BITContent = default;
        private static bool _GL_VERTEX_ATTRIB_ARRAY_BARRIER_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_VERTEX_ATTRIB_BINDING"/>
        /// </summary>
        public static int GL_VERTEX_ATTRIB_BINDING { get { if (!_GL_VERTEX_ATTRIB_BINDINGReady) { _GL_VERTEX_ATTRIB_BINDINGContent = SGetField<int>(LocalBridgeClazz, "GL_VERTEX_ATTRIB_BINDING"); _GL_VERTEX_ATTRIB_BINDINGReady = true; } return _GL_VERTEX_ATTRIB_BINDINGContent; } }
        private static int _GL_VERTEX_ATTRIB_BINDINGContent = default;
        private static bool _GL_VERTEX_ATTRIB_BINDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_VERTEX_ATTRIB_RELATIVE_OFFSET"/>
        /// </summary>
        public static int GL_VERTEX_ATTRIB_RELATIVE_OFFSET { get { if (!_GL_VERTEX_ATTRIB_RELATIVE_OFFSETReady) { _GL_VERTEX_ATTRIB_RELATIVE_OFFSETContent = SGetField<int>(LocalBridgeClazz, "GL_VERTEX_ATTRIB_RELATIVE_OFFSET"); _GL_VERTEX_ATTRIB_RELATIVE_OFFSETReady = true; } return _GL_VERTEX_ATTRIB_RELATIVE_OFFSETContent; } }
        private static int _GL_VERTEX_ATTRIB_RELATIVE_OFFSETContent = default;
        private static bool _GL_VERTEX_ATTRIB_RELATIVE_OFFSETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_VERTEX_BINDING_BUFFER"/>
        /// </summary>
        public static int GL_VERTEX_BINDING_BUFFER { get { if (!_GL_VERTEX_BINDING_BUFFERReady) { _GL_VERTEX_BINDING_BUFFERContent = SGetField<int>(LocalBridgeClazz, "GL_VERTEX_BINDING_BUFFER"); _GL_VERTEX_BINDING_BUFFERReady = true; } return _GL_VERTEX_BINDING_BUFFERContent; } }
        private static int _GL_VERTEX_BINDING_BUFFERContent = default;
        private static bool _GL_VERTEX_BINDING_BUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_VERTEX_BINDING_DIVISOR"/>
        /// </summary>
        public static int GL_VERTEX_BINDING_DIVISOR { get { if (!_GL_VERTEX_BINDING_DIVISORReady) { _GL_VERTEX_BINDING_DIVISORContent = SGetField<int>(LocalBridgeClazz, "GL_VERTEX_BINDING_DIVISOR"); _GL_VERTEX_BINDING_DIVISORReady = true; } return _GL_VERTEX_BINDING_DIVISORContent; } }
        private static int _GL_VERTEX_BINDING_DIVISORContent = default;
        private static bool _GL_VERTEX_BINDING_DIVISORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_VERTEX_BINDING_OFFSET"/>
        /// </summary>
        public static int GL_VERTEX_BINDING_OFFSET { get { if (!_GL_VERTEX_BINDING_OFFSETReady) { _GL_VERTEX_BINDING_OFFSETContent = SGetField<int>(LocalBridgeClazz, "GL_VERTEX_BINDING_OFFSET"); _GL_VERTEX_BINDING_OFFSETReady = true; } return _GL_VERTEX_BINDING_OFFSETContent; } }
        private static int _GL_VERTEX_BINDING_OFFSETContent = default;
        private static bool _GL_VERTEX_BINDING_OFFSETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_VERTEX_BINDING_STRIDE"/>
        /// </summary>
        public static int GL_VERTEX_BINDING_STRIDE { get { if (!_GL_VERTEX_BINDING_STRIDEReady) { _GL_VERTEX_BINDING_STRIDEContent = SGetField<int>(LocalBridgeClazz, "GL_VERTEX_BINDING_STRIDE"); _GL_VERTEX_BINDING_STRIDEReady = true; } return _GL_VERTEX_BINDING_STRIDEContent; } }
        private static int _GL_VERTEX_BINDING_STRIDEContent = default;
        private static bool _GL_VERTEX_BINDING_STRIDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_VERTEX_SHADER_BIT"/>
        /// </summary>
        public static int GL_VERTEX_SHADER_BIT { get { if (!_GL_VERTEX_SHADER_BITReady) { _GL_VERTEX_SHADER_BITContent = SGetField<int>(LocalBridgeClazz, "GL_VERTEX_SHADER_BIT"); _GL_VERTEX_SHADER_BITReady = true; } return _GL_VERTEX_SHADER_BITContent; } }
        private static int _GL_VERTEX_SHADER_BITContent = default;
        private static bool _GL_VERTEX_SHADER_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#GL_WRITE_ONLY"/>
        /// </summary>
        public static int GL_WRITE_ONLY { get { if (!_GL_WRITE_ONLYReady) { _GL_WRITE_ONLYContent = SGetField<int>(LocalBridgeClazz, "GL_WRITE_ONLY"); _GL_WRITE_ONLYReady = true; } return _GL_WRITE_ONLYContent; } }
        private static int _GL_WRITE_ONLYContent = default;
        private static bool _GL_WRITE_ONLYReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glIsProgramPipeline(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool GlIsProgramPipeline(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "glIsProgramPipeline", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glCreateShaderProgramv(int,java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GlCreateShaderProgramv(int arg0, Java.Lang.String[] arg1)
        {
            return SExecute<int>(LocalBridgeClazz, "glCreateShaderProgramv", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glGetProgramResourceIndex(int,int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GlGetProgramResourceIndex(int arg0, int arg1, Java.Lang.String arg2)
        {
            return SExecute<int>(LocalBridgeClazz, "glGetProgramResourceIndex", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glGetProgramResourceLocation(int,int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GlGetProgramResourceLocation(int arg0, int arg1, Java.Lang.String arg2)
        {
            return SExecute<int>(LocalBridgeClazz, "glGetProgramResourceLocation", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glGetProgramPipelineInfoLog(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String GlGetProgramPipelineInfoLog(int arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "glGetProgramPipelineInfoLog", "(I)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glGetProgramResourceName(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String GlGetProgramResourceName(int arg0, int arg1, int arg2)
        {
            return SExecute<Java.Lang.String>(LocalBridgeClazz, "glGetProgramResourceName", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glActiveShaderProgram(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlActiveShaderProgram(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glActiveShaderProgram", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glBindImageTexture(int,int,int,boolean,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        public static void GlBindImageTexture(int arg0, int arg1, int arg2, bool arg3, int arg4, int arg5, int arg6)
        {
            SExecute(LocalBridgeClazz, "glBindImageTexture", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glBindProgramPipeline(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlBindProgramPipeline(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glBindProgramPipeline", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glBindVertexBuffer(int,int,long,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlBindVertexBuffer(int arg0, int arg1, long arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glBindVertexBuffer", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glDeleteProgramPipelines(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlDeleteProgramPipelines(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glDeleteProgramPipelines", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glDeleteProgramPipelines(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlDeleteProgramPipelines(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glDeleteProgramPipelines", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glDispatchCompute(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlDispatchCompute(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glDispatchCompute", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glDispatchComputeIndirect(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        public static void GlDispatchComputeIndirect(long arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glDispatchComputeIndirect", "(J)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glDrawArraysIndirect(int,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        public static void GlDrawArraysIndirect(int arg0, long arg1)
        {
            SExecute(LocalBridgeClazz, "glDrawArraysIndirect", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glDrawElementsIndirect(int,int,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        public static void GlDrawElementsIndirect(int arg0, int arg1, long arg2)
        {
            SExecute(LocalBridgeClazz, "glDrawElementsIndirect", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glFramebufferParameteri(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlFramebufferParameteri(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glFramebufferParameteri", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glGenProgramPipelines(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlGenProgramPipelines(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glGenProgramPipelines", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glGenProgramPipelines(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGenProgramPipelines(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glGenProgramPipelines", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glGetBooleani_v(int,int,boolean[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetBooleani_v(int arg0, int arg1, bool[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetBooleani_v", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glGetBooleani_v(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetBooleani_v(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetBooleani_v", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glGetFramebufferParameteriv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetFramebufferParameteriv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetFramebufferParameteriv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glGetFramebufferParameteriv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetFramebufferParameteriv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetFramebufferParameteriv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glGetMultisamplefv(int,int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetMultisamplefv(int arg0, int arg1, float[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetMultisamplefv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glGetMultisamplefv(int,int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlGetMultisamplefv(int arg0, int arg1, Java.Nio.FloatBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetMultisamplefv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glGetProgramInterfaceiv(int,int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlGetProgramInterfaceiv(int arg0, int arg1, int arg2, int[] arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glGetProgramInterfaceiv", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glGetProgramInterfaceiv(int,int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetProgramInterfaceiv(int arg0, int arg1, int arg2, Java.Nio.IntBuffer arg3)
        {
            SExecute(LocalBridgeClazz, "glGetProgramInterfaceiv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glGetProgramPipelineiv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetProgramPipelineiv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetProgramPipelineiv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glGetProgramPipelineiv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetProgramPipelineiv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetProgramPipelineiv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glGetProgramResourceiv(int,int,int,int,int[],int,int,int[],int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        /// <param name="arg8"><see cref="int"/></param>
        /// <param name="arg9"><see cref="int"/></param>
        /// <param name="arg10"><see cref="int"/></param>
        public static void GlGetProgramResourceiv(int arg0, int arg1, int arg2, int arg3, int[] arg4, int arg5, int arg6, int[] arg7, int arg8, int[] arg9, int arg10)
        {
            SExecute(LocalBridgeClazz, "glGetProgramResourceiv", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glGetProgramResourceiv(int,int,int,int,java.nio.IntBuffer,int,java.nio.IntBuffer,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="Java.Nio.IntBuffer"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="Java.Nio.IntBuffer"/></param>
        /// <param name="arg7"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetProgramResourceiv(int arg0, int arg1, int arg2, int arg3, Java.Nio.IntBuffer arg4, int arg5, Java.Nio.IntBuffer arg6, Java.Nio.IntBuffer arg7)
        {
            SExecute(LocalBridgeClazz, "glGetProgramResourceiv", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glGetTexLevelParameterfv(int,int,int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlGetTexLevelParameterfv(int arg0, int arg1, int arg2, float[] arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glGetTexLevelParameterfv", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glGetTexLevelParameterfv(int,int,int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlGetTexLevelParameterfv(int arg0, int arg1, int arg2, Java.Nio.FloatBuffer arg3)
        {
            SExecute(LocalBridgeClazz, "glGetTexLevelParameterfv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glGetTexLevelParameteriv(int,int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlGetTexLevelParameteriv(int arg0, int arg1, int arg2, int[] arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glGetTexLevelParameteriv", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glGetTexLevelParameteriv(int,int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetTexLevelParameteriv(int arg0, int arg1, int arg2, Java.Nio.IntBuffer arg3)
        {
            SExecute(LocalBridgeClazz, "glGetTexLevelParameteriv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glMemoryBarrier(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlMemoryBarrier(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glMemoryBarrier", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glMemoryBarrierByRegion(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlMemoryBarrierByRegion(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glMemoryBarrierByRegion", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniform1f(int,int,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        public static void GlProgramUniform1f(int arg0, int arg1, float arg2)
        {
            SExecute(LocalBridgeClazz, "glProgramUniform1f", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniform1fv(int,int,int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlProgramUniform1fv(int arg0, int arg1, int arg2, float[] arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glProgramUniform1fv", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniform1fv(int,int,int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlProgramUniform1fv(int arg0, int arg1, int arg2, Java.Nio.FloatBuffer arg3)
        {
            SExecute(LocalBridgeClazz, "glProgramUniform1fv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniform1i(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlProgramUniform1i(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glProgramUniform1i", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniform1iv(int,int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlProgramUniform1iv(int arg0, int arg1, int arg2, int[] arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glProgramUniform1iv", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniform1iv(int,int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlProgramUniform1iv(int arg0, int arg1, int arg2, Java.Nio.IntBuffer arg3)
        {
            SExecute(LocalBridgeClazz, "glProgramUniform1iv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniform1ui(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlProgramUniform1ui(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glProgramUniform1ui", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniform1uiv(int,int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlProgramUniform1uiv(int arg0, int arg1, int arg2, int[] arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glProgramUniform1uiv", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniform1uiv(int,int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlProgramUniform1uiv(int arg0, int arg1, int arg2, Java.Nio.IntBuffer arg3)
        {
            SExecute(LocalBridgeClazz, "glProgramUniform1uiv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniform2f(int,int,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        public static void GlProgramUniform2f(int arg0, int arg1, float arg2, float arg3)
        {
            SExecute(LocalBridgeClazz, "glProgramUniform2f", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniform2fv(int,int,int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlProgramUniform2fv(int arg0, int arg1, int arg2, float[] arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glProgramUniform2fv", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniform2fv(int,int,int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlProgramUniform2fv(int arg0, int arg1, int arg2, Java.Nio.FloatBuffer arg3)
        {
            SExecute(LocalBridgeClazz, "glProgramUniform2fv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniform2i(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlProgramUniform2i(int arg0, int arg1, int arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glProgramUniform2i", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniform2iv(int,int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlProgramUniform2iv(int arg0, int arg1, int arg2, int[] arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glProgramUniform2iv", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniform2iv(int,int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlProgramUniform2iv(int arg0, int arg1, int arg2, Java.Nio.IntBuffer arg3)
        {
            SExecute(LocalBridgeClazz, "glProgramUniform2iv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniform2ui(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlProgramUniform2ui(int arg0, int arg1, int arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glProgramUniform2ui", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniform2uiv(int,int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlProgramUniform2uiv(int arg0, int arg1, int arg2, int[] arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glProgramUniform2uiv", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniform2uiv(int,int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlProgramUniform2uiv(int arg0, int arg1, int arg2, Java.Nio.IntBuffer arg3)
        {
            SExecute(LocalBridgeClazz, "glProgramUniform2uiv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniform3f(int,int,float,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        public static void GlProgramUniform3f(int arg0, int arg1, float arg2, float arg3, float arg4)
        {
            SExecute(LocalBridgeClazz, "glProgramUniform3f", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniform3fv(int,int,int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlProgramUniform3fv(int arg0, int arg1, int arg2, float[] arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glProgramUniform3fv", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniform3fv(int,int,int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlProgramUniform3fv(int arg0, int arg1, int arg2, Java.Nio.FloatBuffer arg3)
        {
            SExecute(LocalBridgeClazz, "glProgramUniform3fv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniform3i(int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlProgramUniform3i(int arg0, int arg1, int arg2, int arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glProgramUniform3i", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniform3iv(int,int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlProgramUniform3iv(int arg0, int arg1, int arg2, int[] arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glProgramUniform3iv", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniform3iv(int,int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlProgramUniform3iv(int arg0, int arg1, int arg2, Java.Nio.IntBuffer arg3)
        {
            SExecute(LocalBridgeClazz, "glProgramUniform3iv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniform3ui(int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlProgramUniform3ui(int arg0, int arg1, int arg2, int arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glProgramUniform3ui", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniform3uiv(int,int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlProgramUniform3uiv(int arg0, int arg1, int arg2, int[] arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glProgramUniform3uiv", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniform3uiv(int,int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlProgramUniform3uiv(int arg0, int arg1, int arg2, Java.Nio.IntBuffer arg3)
        {
            SExecute(LocalBridgeClazz, "glProgramUniform3uiv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniform4f(int,int,float,float,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        /// <param name="arg5"><see cref="float"/></param>
        public static void GlProgramUniform4f(int arg0, int arg1, float arg2, float arg3, float arg4, float arg5)
        {
            SExecute(LocalBridgeClazz, "glProgramUniform4f", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniform4fv(int,int,int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlProgramUniform4fv(int arg0, int arg1, int arg2, float[] arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glProgramUniform4fv", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniform4fv(int,int,int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlProgramUniform4fv(int arg0, int arg1, int arg2, Java.Nio.FloatBuffer arg3)
        {
            SExecute(LocalBridgeClazz, "glProgramUniform4fv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniform4i(int,int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        public static void GlProgramUniform4i(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5)
        {
            SExecute(LocalBridgeClazz, "glProgramUniform4i", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniform4iv(int,int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlProgramUniform4iv(int arg0, int arg1, int arg2, int[] arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glProgramUniform4iv", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniform4iv(int,int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlProgramUniform4iv(int arg0, int arg1, int arg2, Java.Nio.IntBuffer arg3)
        {
            SExecute(LocalBridgeClazz, "glProgramUniform4iv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniform4ui(int,int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        public static void GlProgramUniform4ui(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5)
        {
            SExecute(LocalBridgeClazz, "glProgramUniform4ui", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniform4uiv(int,int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlProgramUniform4uiv(int arg0, int arg1, int arg2, int[] arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glProgramUniform4uiv", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniform4uiv(int,int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlProgramUniform4uiv(int arg0, int arg1, int arg2, Java.Nio.IntBuffer arg3)
        {
            SExecute(LocalBridgeClazz, "glProgramUniform4uiv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniformMatrix2fv(int,int,int,boolean,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        public static void GlProgramUniformMatrix2fv(int arg0, int arg1, int arg2, bool arg3, float[] arg4, int arg5)
        {
            SExecute(LocalBridgeClazz, "glProgramUniformMatrix2fv", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniformMatrix2fv(int,int,int,boolean,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <param name="arg4"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlProgramUniformMatrix2fv(int arg0, int arg1, int arg2, bool arg3, Java.Nio.FloatBuffer arg4)
        {
            SExecute(LocalBridgeClazz, "glProgramUniformMatrix2fv", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniformMatrix2x3fv(int,int,int,boolean,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        public static void GlProgramUniformMatrix2x3fv(int arg0, int arg1, int arg2, bool arg3, float[] arg4, int arg5)
        {
            SExecute(LocalBridgeClazz, "glProgramUniformMatrix2x3fv", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniformMatrix2x3fv(int,int,int,boolean,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <param name="arg4"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlProgramUniformMatrix2x3fv(int arg0, int arg1, int arg2, bool arg3, Java.Nio.FloatBuffer arg4)
        {
            SExecute(LocalBridgeClazz, "glProgramUniformMatrix2x3fv", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniformMatrix2x4fv(int,int,int,boolean,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        public static void GlProgramUniformMatrix2x4fv(int arg0, int arg1, int arg2, bool arg3, float[] arg4, int arg5)
        {
            SExecute(LocalBridgeClazz, "glProgramUniformMatrix2x4fv", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniformMatrix2x4fv(int,int,int,boolean,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <param name="arg4"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlProgramUniformMatrix2x4fv(int arg0, int arg1, int arg2, bool arg3, Java.Nio.FloatBuffer arg4)
        {
            SExecute(LocalBridgeClazz, "glProgramUniformMatrix2x4fv", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniformMatrix3fv(int,int,int,boolean,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        public static void GlProgramUniformMatrix3fv(int arg0, int arg1, int arg2, bool arg3, float[] arg4, int arg5)
        {
            SExecute(LocalBridgeClazz, "glProgramUniformMatrix3fv", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniformMatrix3fv(int,int,int,boolean,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <param name="arg4"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlProgramUniformMatrix3fv(int arg0, int arg1, int arg2, bool arg3, Java.Nio.FloatBuffer arg4)
        {
            SExecute(LocalBridgeClazz, "glProgramUniformMatrix3fv", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniformMatrix3x2fv(int,int,int,boolean,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        public static void GlProgramUniformMatrix3x2fv(int arg0, int arg1, int arg2, bool arg3, float[] arg4, int arg5)
        {
            SExecute(LocalBridgeClazz, "glProgramUniformMatrix3x2fv", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniformMatrix3x2fv(int,int,int,boolean,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <param name="arg4"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlProgramUniformMatrix3x2fv(int arg0, int arg1, int arg2, bool arg3, Java.Nio.FloatBuffer arg4)
        {
            SExecute(LocalBridgeClazz, "glProgramUniformMatrix3x2fv", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniformMatrix3x4fv(int,int,int,boolean,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        public static void GlProgramUniformMatrix3x4fv(int arg0, int arg1, int arg2, bool arg3, float[] arg4, int arg5)
        {
            SExecute(LocalBridgeClazz, "glProgramUniformMatrix3x4fv", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniformMatrix3x4fv(int,int,int,boolean,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <param name="arg4"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlProgramUniformMatrix3x4fv(int arg0, int arg1, int arg2, bool arg3, Java.Nio.FloatBuffer arg4)
        {
            SExecute(LocalBridgeClazz, "glProgramUniformMatrix3x4fv", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniformMatrix4fv(int,int,int,boolean,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        public static void GlProgramUniformMatrix4fv(int arg0, int arg1, int arg2, bool arg3, float[] arg4, int arg5)
        {
            SExecute(LocalBridgeClazz, "glProgramUniformMatrix4fv", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniformMatrix4fv(int,int,int,boolean,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <param name="arg4"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlProgramUniformMatrix4fv(int arg0, int arg1, int arg2, bool arg3, Java.Nio.FloatBuffer arg4)
        {
            SExecute(LocalBridgeClazz, "glProgramUniformMatrix4fv", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniformMatrix4x2fv(int,int,int,boolean,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        public static void GlProgramUniformMatrix4x2fv(int arg0, int arg1, int arg2, bool arg3, float[] arg4, int arg5)
        {
            SExecute(LocalBridgeClazz, "glProgramUniformMatrix4x2fv", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniformMatrix4x2fv(int,int,int,boolean,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <param name="arg4"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlProgramUniformMatrix4x2fv(int arg0, int arg1, int arg2, bool arg3, Java.Nio.FloatBuffer arg4)
        {
            SExecute(LocalBridgeClazz, "glProgramUniformMatrix4x2fv", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniformMatrix4x3fv(int,int,int,boolean,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        public static void GlProgramUniformMatrix4x3fv(int arg0, int arg1, int arg2, bool arg3, float[] arg4, int arg5)
        {
            SExecute(LocalBridgeClazz, "glProgramUniformMatrix4x3fv", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glProgramUniformMatrix4x3fv(int,int,int,boolean,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <param name="arg4"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlProgramUniformMatrix4x3fv(int arg0, int arg1, int arg2, bool arg3, Java.Nio.FloatBuffer arg4)
        {
            SExecute(LocalBridgeClazz, "glProgramUniformMatrix4x3fv", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glSampleMaski(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlSampleMaski(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glSampleMaski", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glTexStorage2DMultisample(int,int,int,int,int,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="bool"/></param>
        public static void GlTexStorage2DMultisample(int arg0, int arg1, int arg2, int arg3, int arg4, bool arg5)
        {
            SExecute(LocalBridgeClazz, "glTexStorage2DMultisample", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glUseProgramStages(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlUseProgramStages(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glUseProgramStages", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glValidateProgramPipeline(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlValidateProgramPipeline(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glValidateProgramPipeline", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glVertexAttribBinding(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlVertexAttribBinding(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glVertexAttribBinding", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glVertexAttribFormat(int,int,int,boolean,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlVertexAttribFormat(int arg0, int arg1, int arg2, bool arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glVertexAttribFormat", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glVertexAttribIFormat(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlVertexAttribIFormat(int arg0, int arg1, int arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glVertexAttribIFormat", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES31.html#glVertexBindingDivisor(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlVertexBindingDivisor(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glVertexBindingDivisor", arg0, arg1);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
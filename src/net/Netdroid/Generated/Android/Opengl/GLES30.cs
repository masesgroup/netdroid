/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Opengl
{
    #region GLES30
    public partial class GLES30
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH"/>
        /// </summary>
        public static int GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH { get { if (!_GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTHReady) { _GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTHContent = SGetField<int>(LocalBridgeClazz, "GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH"); _GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTHReady = true; } return _GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTHContent; } }
        private static int _GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTHContent = default;
        private static bool _GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_ACTIVE_UNIFORM_BLOCKS"/>
        /// </summary>
        public static int GL_ACTIVE_UNIFORM_BLOCKS { get { if (!_GL_ACTIVE_UNIFORM_BLOCKSReady) { _GL_ACTIVE_UNIFORM_BLOCKSContent = SGetField<int>(LocalBridgeClazz, "GL_ACTIVE_UNIFORM_BLOCKS"); _GL_ACTIVE_UNIFORM_BLOCKSReady = true; } return _GL_ACTIVE_UNIFORM_BLOCKSContent; } }
        private static int _GL_ACTIVE_UNIFORM_BLOCKSContent = default;
        private static bool _GL_ACTIVE_UNIFORM_BLOCKSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_ALREADY_SIGNALED"/>
        /// </summary>
        public static int GL_ALREADY_SIGNALED { get { if (!_GL_ALREADY_SIGNALEDReady) { _GL_ALREADY_SIGNALEDContent = SGetField<int>(LocalBridgeClazz, "GL_ALREADY_SIGNALED"); _GL_ALREADY_SIGNALEDReady = true; } return _GL_ALREADY_SIGNALEDContent; } }
        private static int _GL_ALREADY_SIGNALEDContent = default;
        private static bool _GL_ALREADY_SIGNALEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_ANY_SAMPLES_PASSED"/>
        /// </summary>
        public static int GL_ANY_SAMPLES_PASSED { get { if (!_GL_ANY_SAMPLES_PASSEDReady) { _GL_ANY_SAMPLES_PASSEDContent = SGetField<int>(LocalBridgeClazz, "GL_ANY_SAMPLES_PASSED"); _GL_ANY_SAMPLES_PASSEDReady = true; } return _GL_ANY_SAMPLES_PASSEDContent; } }
        private static int _GL_ANY_SAMPLES_PASSEDContent = default;
        private static bool _GL_ANY_SAMPLES_PASSEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_ANY_SAMPLES_PASSED_CONSERVATIVE"/>
        /// </summary>
        public static int GL_ANY_SAMPLES_PASSED_CONSERVATIVE { get { if (!_GL_ANY_SAMPLES_PASSED_CONSERVATIVEReady) { _GL_ANY_SAMPLES_PASSED_CONSERVATIVEContent = SGetField<int>(LocalBridgeClazz, "GL_ANY_SAMPLES_PASSED_CONSERVATIVE"); _GL_ANY_SAMPLES_PASSED_CONSERVATIVEReady = true; } return _GL_ANY_SAMPLES_PASSED_CONSERVATIVEContent; } }
        private static int _GL_ANY_SAMPLES_PASSED_CONSERVATIVEContent = default;
        private static bool _GL_ANY_SAMPLES_PASSED_CONSERVATIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_BLUE"/>
        /// </summary>
        public static int GL_BLUE { get { if (!_GL_BLUEReady) { _GL_BLUEContent = SGetField<int>(LocalBridgeClazz, "GL_BLUE"); _GL_BLUEReady = true; } return _GL_BLUEContent; } }
        private static int _GL_BLUEContent = default;
        private static bool _GL_BLUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_BUFFER_ACCESS_FLAGS"/>
        /// </summary>
        public static int GL_BUFFER_ACCESS_FLAGS { get { if (!_GL_BUFFER_ACCESS_FLAGSReady) { _GL_BUFFER_ACCESS_FLAGSContent = SGetField<int>(LocalBridgeClazz, "GL_BUFFER_ACCESS_FLAGS"); _GL_BUFFER_ACCESS_FLAGSReady = true; } return _GL_BUFFER_ACCESS_FLAGSContent; } }
        private static int _GL_BUFFER_ACCESS_FLAGSContent = default;
        private static bool _GL_BUFFER_ACCESS_FLAGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_BUFFER_MAP_LENGTH"/>
        /// </summary>
        public static int GL_BUFFER_MAP_LENGTH { get { if (!_GL_BUFFER_MAP_LENGTHReady) { _GL_BUFFER_MAP_LENGTHContent = SGetField<int>(LocalBridgeClazz, "GL_BUFFER_MAP_LENGTH"); _GL_BUFFER_MAP_LENGTHReady = true; } return _GL_BUFFER_MAP_LENGTHContent; } }
        private static int _GL_BUFFER_MAP_LENGTHContent = default;
        private static bool _GL_BUFFER_MAP_LENGTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_BUFFER_MAP_OFFSET"/>
        /// </summary>
        public static int GL_BUFFER_MAP_OFFSET { get { if (!_GL_BUFFER_MAP_OFFSETReady) { _GL_BUFFER_MAP_OFFSETContent = SGetField<int>(LocalBridgeClazz, "GL_BUFFER_MAP_OFFSET"); _GL_BUFFER_MAP_OFFSETReady = true; } return _GL_BUFFER_MAP_OFFSETContent; } }
        private static int _GL_BUFFER_MAP_OFFSETContent = default;
        private static bool _GL_BUFFER_MAP_OFFSETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_BUFFER_MAP_POINTER"/>
        /// </summary>
        public static int GL_BUFFER_MAP_POINTER { get { if (!_GL_BUFFER_MAP_POINTERReady) { _GL_BUFFER_MAP_POINTERContent = SGetField<int>(LocalBridgeClazz, "GL_BUFFER_MAP_POINTER"); _GL_BUFFER_MAP_POINTERReady = true; } return _GL_BUFFER_MAP_POINTERContent; } }
        private static int _GL_BUFFER_MAP_POINTERContent = default;
        private static bool _GL_BUFFER_MAP_POINTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_BUFFER_MAPPED"/>
        /// </summary>
        public static int GL_BUFFER_MAPPED { get { if (!_GL_BUFFER_MAPPEDReady) { _GL_BUFFER_MAPPEDContent = SGetField<int>(LocalBridgeClazz, "GL_BUFFER_MAPPED"); _GL_BUFFER_MAPPEDReady = true; } return _GL_BUFFER_MAPPEDContent; } }
        private static int _GL_BUFFER_MAPPEDContent = default;
        private static bool _GL_BUFFER_MAPPEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_COLOR"/>
        /// </summary>
        public static int GL_COLOR { get { if (!_GL_COLORReady) { _GL_COLORContent = SGetField<int>(LocalBridgeClazz, "GL_COLOR"); _GL_COLORReady = true; } return _GL_COLORContent; } }
        private static int _GL_COLORContent = default;
        private static bool _GL_COLORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_COLOR_ATTACHMENT1"/>
        /// </summary>
        public static int GL_COLOR_ATTACHMENT1 { get { if (!_GL_COLOR_ATTACHMENT1Ready) { _GL_COLOR_ATTACHMENT1Content = SGetField<int>(LocalBridgeClazz, "GL_COLOR_ATTACHMENT1"); _GL_COLOR_ATTACHMENT1Ready = true; } return _GL_COLOR_ATTACHMENT1Content; } }
        private static int _GL_COLOR_ATTACHMENT1Content = default;
        private static bool _GL_COLOR_ATTACHMENT1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_COLOR_ATTACHMENT10"/>
        /// </summary>
        public static int GL_COLOR_ATTACHMENT10 { get { if (!_GL_COLOR_ATTACHMENT10Ready) { _GL_COLOR_ATTACHMENT10Content = SGetField<int>(LocalBridgeClazz, "GL_COLOR_ATTACHMENT10"); _GL_COLOR_ATTACHMENT10Ready = true; } return _GL_COLOR_ATTACHMENT10Content; } }
        private static int _GL_COLOR_ATTACHMENT10Content = default;
        private static bool _GL_COLOR_ATTACHMENT10Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_COLOR_ATTACHMENT11"/>
        /// </summary>
        public static int GL_COLOR_ATTACHMENT11 { get { if (!_GL_COLOR_ATTACHMENT11Ready) { _GL_COLOR_ATTACHMENT11Content = SGetField<int>(LocalBridgeClazz, "GL_COLOR_ATTACHMENT11"); _GL_COLOR_ATTACHMENT11Ready = true; } return _GL_COLOR_ATTACHMENT11Content; } }
        private static int _GL_COLOR_ATTACHMENT11Content = default;
        private static bool _GL_COLOR_ATTACHMENT11Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_COLOR_ATTACHMENT12"/>
        /// </summary>
        public static int GL_COLOR_ATTACHMENT12 { get { if (!_GL_COLOR_ATTACHMENT12Ready) { _GL_COLOR_ATTACHMENT12Content = SGetField<int>(LocalBridgeClazz, "GL_COLOR_ATTACHMENT12"); _GL_COLOR_ATTACHMENT12Ready = true; } return _GL_COLOR_ATTACHMENT12Content; } }
        private static int _GL_COLOR_ATTACHMENT12Content = default;
        private static bool _GL_COLOR_ATTACHMENT12Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_COLOR_ATTACHMENT13"/>
        /// </summary>
        public static int GL_COLOR_ATTACHMENT13 { get { if (!_GL_COLOR_ATTACHMENT13Ready) { _GL_COLOR_ATTACHMENT13Content = SGetField<int>(LocalBridgeClazz, "GL_COLOR_ATTACHMENT13"); _GL_COLOR_ATTACHMENT13Ready = true; } return _GL_COLOR_ATTACHMENT13Content; } }
        private static int _GL_COLOR_ATTACHMENT13Content = default;
        private static bool _GL_COLOR_ATTACHMENT13Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_COLOR_ATTACHMENT14"/>
        /// </summary>
        public static int GL_COLOR_ATTACHMENT14 { get { if (!_GL_COLOR_ATTACHMENT14Ready) { _GL_COLOR_ATTACHMENT14Content = SGetField<int>(LocalBridgeClazz, "GL_COLOR_ATTACHMENT14"); _GL_COLOR_ATTACHMENT14Ready = true; } return _GL_COLOR_ATTACHMENT14Content; } }
        private static int _GL_COLOR_ATTACHMENT14Content = default;
        private static bool _GL_COLOR_ATTACHMENT14Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_COLOR_ATTACHMENT15"/>
        /// </summary>
        public static int GL_COLOR_ATTACHMENT15 { get { if (!_GL_COLOR_ATTACHMENT15Ready) { _GL_COLOR_ATTACHMENT15Content = SGetField<int>(LocalBridgeClazz, "GL_COLOR_ATTACHMENT15"); _GL_COLOR_ATTACHMENT15Ready = true; } return _GL_COLOR_ATTACHMENT15Content; } }
        private static int _GL_COLOR_ATTACHMENT15Content = default;
        private static bool _GL_COLOR_ATTACHMENT15Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_COLOR_ATTACHMENT2"/>
        /// </summary>
        public static int GL_COLOR_ATTACHMENT2 { get { if (!_GL_COLOR_ATTACHMENT2Ready) { _GL_COLOR_ATTACHMENT2Content = SGetField<int>(LocalBridgeClazz, "GL_COLOR_ATTACHMENT2"); _GL_COLOR_ATTACHMENT2Ready = true; } return _GL_COLOR_ATTACHMENT2Content; } }
        private static int _GL_COLOR_ATTACHMENT2Content = default;
        private static bool _GL_COLOR_ATTACHMENT2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_COLOR_ATTACHMENT3"/>
        /// </summary>
        public static int GL_COLOR_ATTACHMENT3 { get { if (!_GL_COLOR_ATTACHMENT3Ready) { _GL_COLOR_ATTACHMENT3Content = SGetField<int>(LocalBridgeClazz, "GL_COLOR_ATTACHMENT3"); _GL_COLOR_ATTACHMENT3Ready = true; } return _GL_COLOR_ATTACHMENT3Content; } }
        private static int _GL_COLOR_ATTACHMENT3Content = default;
        private static bool _GL_COLOR_ATTACHMENT3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_COLOR_ATTACHMENT4"/>
        /// </summary>
        public static int GL_COLOR_ATTACHMENT4 { get { if (!_GL_COLOR_ATTACHMENT4Ready) { _GL_COLOR_ATTACHMENT4Content = SGetField<int>(LocalBridgeClazz, "GL_COLOR_ATTACHMENT4"); _GL_COLOR_ATTACHMENT4Ready = true; } return _GL_COLOR_ATTACHMENT4Content; } }
        private static int _GL_COLOR_ATTACHMENT4Content = default;
        private static bool _GL_COLOR_ATTACHMENT4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_COLOR_ATTACHMENT5"/>
        /// </summary>
        public static int GL_COLOR_ATTACHMENT5 { get { if (!_GL_COLOR_ATTACHMENT5Ready) { _GL_COLOR_ATTACHMENT5Content = SGetField<int>(LocalBridgeClazz, "GL_COLOR_ATTACHMENT5"); _GL_COLOR_ATTACHMENT5Ready = true; } return _GL_COLOR_ATTACHMENT5Content; } }
        private static int _GL_COLOR_ATTACHMENT5Content = default;
        private static bool _GL_COLOR_ATTACHMENT5Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_COLOR_ATTACHMENT6"/>
        /// </summary>
        public static int GL_COLOR_ATTACHMENT6 { get { if (!_GL_COLOR_ATTACHMENT6Ready) { _GL_COLOR_ATTACHMENT6Content = SGetField<int>(LocalBridgeClazz, "GL_COLOR_ATTACHMENT6"); _GL_COLOR_ATTACHMENT6Ready = true; } return _GL_COLOR_ATTACHMENT6Content; } }
        private static int _GL_COLOR_ATTACHMENT6Content = default;
        private static bool _GL_COLOR_ATTACHMENT6Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_COLOR_ATTACHMENT7"/>
        /// </summary>
        public static int GL_COLOR_ATTACHMENT7 { get { if (!_GL_COLOR_ATTACHMENT7Ready) { _GL_COLOR_ATTACHMENT7Content = SGetField<int>(LocalBridgeClazz, "GL_COLOR_ATTACHMENT7"); _GL_COLOR_ATTACHMENT7Ready = true; } return _GL_COLOR_ATTACHMENT7Content; } }
        private static int _GL_COLOR_ATTACHMENT7Content = default;
        private static bool _GL_COLOR_ATTACHMENT7Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_COLOR_ATTACHMENT8"/>
        /// </summary>
        public static int GL_COLOR_ATTACHMENT8 { get { if (!_GL_COLOR_ATTACHMENT8Ready) { _GL_COLOR_ATTACHMENT8Content = SGetField<int>(LocalBridgeClazz, "GL_COLOR_ATTACHMENT8"); _GL_COLOR_ATTACHMENT8Ready = true; } return _GL_COLOR_ATTACHMENT8Content; } }
        private static int _GL_COLOR_ATTACHMENT8Content = default;
        private static bool _GL_COLOR_ATTACHMENT8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_COLOR_ATTACHMENT9"/>
        /// </summary>
        public static int GL_COLOR_ATTACHMENT9 { get { if (!_GL_COLOR_ATTACHMENT9Ready) { _GL_COLOR_ATTACHMENT9Content = SGetField<int>(LocalBridgeClazz, "GL_COLOR_ATTACHMENT9"); _GL_COLOR_ATTACHMENT9Ready = true; } return _GL_COLOR_ATTACHMENT9Content; } }
        private static int _GL_COLOR_ATTACHMENT9Content = default;
        private static bool _GL_COLOR_ATTACHMENT9Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_COMPARE_REF_TO_TEXTURE"/>
        /// </summary>
        public static int GL_COMPARE_REF_TO_TEXTURE { get { if (!_GL_COMPARE_REF_TO_TEXTUREReady) { _GL_COMPARE_REF_TO_TEXTUREContent = SGetField<int>(LocalBridgeClazz, "GL_COMPARE_REF_TO_TEXTURE"); _GL_COMPARE_REF_TO_TEXTUREReady = true; } return _GL_COMPARE_REF_TO_TEXTUREContent; } }
        private static int _GL_COMPARE_REF_TO_TEXTUREContent = default;
        private static bool _GL_COMPARE_REF_TO_TEXTUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_COMPRESSED_R11_EAC"/>
        /// </summary>
        public static int GL_COMPRESSED_R11_EAC { get { if (!_GL_COMPRESSED_R11_EACReady) { _GL_COMPRESSED_R11_EACContent = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_R11_EAC"); _GL_COMPRESSED_R11_EACReady = true; } return _GL_COMPRESSED_R11_EACContent; } }
        private static int _GL_COMPRESSED_R11_EACContent = default;
        private static bool _GL_COMPRESSED_R11_EACReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_COMPRESSED_RG11_EAC"/>
        /// </summary>
        public static int GL_COMPRESSED_RG11_EAC { get { if (!_GL_COMPRESSED_RG11_EACReady) { _GL_COMPRESSED_RG11_EACContent = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_RG11_EAC"); _GL_COMPRESSED_RG11_EACReady = true; } return _GL_COMPRESSED_RG11_EACContent; } }
        private static int _GL_COMPRESSED_RG11_EACContent = default;
        private static bool _GL_COMPRESSED_RG11_EACReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_COMPRESSED_RGB8_ETC2"/>
        /// </summary>
        public static int GL_COMPRESSED_RGB8_ETC2 { get { if (!_GL_COMPRESSED_RGB8_ETC2Ready) { _GL_COMPRESSED_RGB8_ETC2Content = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_RGB8_ETC2"); _GL_COMPRESSED_RGB8_ETC2Ready = true; } return _GL_COMPRESSED_RGB8_ETC2Content; } }
        private static int _GL_COMPRESSED_RGB8_ETC2Content = default;
        private static bool _GL_COMPRESSED_RGB8_ETC2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2"/>
        /// </summary>
        public static int GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 { get { if (!_GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2Ready) { _GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2Content = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2"); _GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2Ready = true; } return _GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2Content; } }
        private static int _GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2Content = default;
        private static bool _GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_COMPRESSED_RGBA8_ETC2_EAC"/>
        /// </summary>
        public static int GL_COMPRESSED_RGBA8_ETC2_EAC { get { if (!_GL_COMPRESSED_RGBA8_ETC2_EACReady) { _GL_COMPRESSED_RGBA8_ETC2_EACContent = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_RGBA8_ETC2_EAC"); _GL_COMPRESSED_RGBA8_ETC2_EACReady = true; } return _GL_COMPRESSED_RGBA8_ETC2_EACContent; } }
        private static int _GL_COMPRESSED_RGBA8_ETC2_EACContent = default;
        private static bool _GL_COMPRESSED_RGBA8_ETC2_EACReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_COMPRESSED_SIGNED_R11_EAC"/>
        /// </summary>
        public static int GL_COMPRESSED_SIGNED_R11_EAC { get { if (!_GL_COMPRESSED_SIGNED_R11_EACReady) { _GL_COMPRESSED_SIGNED_R11_EACContent = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_SIGNED_R11_EAC"); _GL_COMPRESSED_SIGNED_R11_EACReady = true; } return _GL_COMPRESSED_SIGNED_R11_EACContent; } }
        private static int _GL_COMPRESSED_SIGNED_R11_EACContent = default;
        private static bool _GL_COMPRESSED_SIGNED_R11_EACReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_COMPRESSED_SIGNED_RG11_EAC"/>
        /// </summary>
        public static int GL_COMPRESSED_SIGNED_RG11_EAC { get { if (!_GL_COMPRESSED_SIGNED_RG11_EACReady) { _GL_COMPRESSED_SIGNED_RG11_EACContent = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_SIGNED_RG11_EAC"); _GL_COMPRESSED_SIGNED_RG11_EACReady = true; } return _GL_COMPRESSED_SIGNED_RG11_EACContent; } }
        private static int _GL_COMPRESSED_SIGNED_RG11_EACContent = default;
        private static bool _GL_COMPRESSED_SIGNED_RG11_EACReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC"/>
        /// </summary>
        public static int GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC { get { if (!_GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EACReady) { _GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EACContent = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC"); _GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EACReady = true; } return _GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EACContent; } }
        private static int _GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EACContent = default;
        private static bool _GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EACReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_COMPRESSED_SRGB8_ETC2"/>
        /// </summary>
        public static int GL_COMPRESSED_SRGB8_ETC2 { get { if (!_GL_COMPRESSED_SRGB8_ETC2Ready) { _GL_COMPRESSED_SRGB8_ETC2Content = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_SRGB8_ETC2"); _GL_COMPRESSED_SRGB8_ETC2Ready = true; } return _GL_COMPRESSED_SRGB8_ETC2Content; } }
        private static int _GL_COMPRESSED_SRGB8_ETC2Content = default;
        private static bool _GL_COMPRESSED_SRGB8_ETC2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2"/>
        /// </summary>
        public static int GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 { get { if (!_GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2Ready) { _GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2Content = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2"); _GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2Ready = true; } return _GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2Content; } }
        private static int _GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2Content = default;
        private static bool _GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_CONDITION_SATISFIED"/>
        /// </summary>
        public static int GL_CONDITION_SATISFIED { get { if (!_GL_CONDITION_SATISFIEDReady) { _GL_CONDITION_SATISFIEDContent = SGetField<int>(LocalBridgeClazz, "GL_CONDITION_SATISFIED"); _GL_CONDITION_SATISFIEDReady = true; } return _GL_CONDITION_SATISFIEDContent; } }
        private static int _GL_CONDITION_SATISFIEDContent = default;
        private static bool _GL_CONDITION_SATISFIEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_COPY_READ_BUFFER"/>
        /// </summary>
        public static int GL_COPY_READ_BUFFER { get { if (!_GL_COPY_READ_BUFFERReady) { _GL_COPY_READ_BUFFERContent = SGetField<int>(LocalBridgeClazz, "GL_COPY_READ_BUFFER"); _GL_COPY_READ_BUFFERReady = true; } return _GL_COPY_READ_BUFFERContent; } }
        private static int _GL_COPY_READ_BUFFERContent = default;
        private static bool _GL_COPY_READ_BUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_COPY_READ_BUFFER_BINDING"/>
        /// </summary>
        public static int GL_COPY_READ_BUFFER_BINDING { get { if (!_GL_COPY_READ_BUFFER_BINDINGReady) { _GL_COPY_READ_BUFFER_BINDINGContent = SGetField<int>(LocalBridgeClazz, "GL_COPY_READ_BUFFER_BINDING"); _GL_COPY_READ_BUFFER_BINDINGReady = true; } return _GL_COPY_READ_BUFFER_BINDINGContent; } }
        private static int _GL_COPY_READ_BUFFER_BINDINGContent = default;
        private static bool _GL_COPY_READ_BUFFER_BINDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_COPY_WRITE_BUFFER"/>
        /// </summary>
        public static int GL_COPY_WRITE_BUFFER { get { if (!_GL_COPY_WRITE_BUFFERReady) { _GL_COPY_WRITE_BUFFERContent = SGetField<int>(LocalBridgeClazz, "GL_COPY_WRITE_BUFFER"); _GL_COPY_WRITE_BUFFERReady = true; } return _GL_COPY_WRITE_BUFFERContent; } }
        private static int _GL_COPY_WRITE_BUFFERContent = default;
        private static bool _GL_COPY_WRITE_BUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_COPY_WRITE_BUFFER_BINDING"/>
        /// </summary>
        public static int GL_COPY_WRITE_BUFFER_BINDING { get { if (!_GL_COPY_WRITE_BUFFER_BINDINGReady) { _GL_COPY_WRITE_BUFFER_BINDINGContent = SGetField<int>(LocalBridgeClazz, "GL_COPY_WRITE_BUFFER_BINDING"); _GL_COPY_WRITE_BUFFER_BINDINGReady = true; } return _GL_COPY_WRITE_BUFFER_BINDINGContent; } }
        private static int _GL_COPY_WRITE_BUFFER_BINDINGContent = default;
        private static bool _GL_COPY_WRITE_BUFFER_BINDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_CURRENT_QUERY"/>
        /// </summary>
        public static int GL_CURRENT_QUERY { get { if (!_GL_CURRENT_QUERYReady) { _GL_CURRENT_QUERYContent = SGetField<int>(LocalBridgeClazz, "GL_CURRENT_QUERY"); _GL_CURRENT_QUERYReady = true; } return _GL_CURRENT_QUERYContent; } }
        private static int _GL_CURRENT_QUERYContent = default;
        private static bool _GL_CURRENT_QUERYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_DEPTH"/>
        /// </summary>
        public static int GL_DEPTH { get { if (!_GL_DEPTHReady) { _GL_DEPTHContent = SGetField<int>(LocalBridgeClazz, "GL_DEPTH"); _GL_DEPTHReady = true; } return _GL_DEPTHContent; } }
        private static int _GL_DEPTHContent = default;
        private static bool _GL_DEPTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_DEPTH_COMPONENT24"/>
        /// </summary>
        public static int GL_DEPTH_COMPONENT24 { get { if (!_GL_DEPTH_COMPONENT24Ready) { _GL_DEPTH_COMPONENT24Content = SGetField<int>(LocalBridgeClazz, "GL_DEPTH_COMPONENT24"); _GL_DEPTH_COMPONENT24Ready = true; } return _GL_DEPTH_COMPONENT24Content; } }
        private static int _GL_DEPTH_COMPONENT24Content = default;
        private static bool _GL_DEPTH_COMPONENT24Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_DEPTH_COMPONENT32F"/>
        /// </summary>
        public static int GL_DEPTH_COMPONENT32F { get { if (!_GL_DEPTH_COMPONENT32FReady) { _GL_DEPTH_COMPONENT32FContent = SGetField<int>(LocalBridgeClazz, "GL_DEPTH_COMPONENT32F"); _GL_DEPTH_COMPONENT32FReady = true; } return _GL_DEPTH_COMPONENT32FContent; } }
        private static int _GL_DEPTH_COMPONENT32FContent = default;
        private static bool _GL_DEPTH_COMPONENT32FReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_DEPTH_STENCIL"/>
        /// </summary>
        public static int GL_DEPTH_STENCIL { get { if (!_GL_DEPTH_STENCILReady) { _GL_DEPTH_STENCILContent = SGetField<int>(LocalBridgeClazz, "GL_DEPTH_STENCIL"); _GL_DEPTH_STENCILReady = true; } return _GL_DEPTH_STENCILContent; } }
        private static int _GL_DEPTH_STENCILContent = default;
        private static bool _GL_DEPTH_STENCILReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_DEPTH_STENCIL_ATTACHMENT"/>
        /// </summary>
        public static int GL_DEPTH_STENCIL_ATTACHMENT { get { if (!_GL_DEPTH_STENCIL_ATTACHMENTReady) { _GL_DEPTH_STENCIL_ATTACHMENTContent = SGetField<int>(LocalBridgeClazz, "GL_DEPTH_STENCIL_ATTACHMENT"); _GL_DEPTH_STENCIL_ATTACHMENTReady = true; } return _GL_DEPTH_STENCIL_ATTACHMENTContent; } }
        private static int _GL_DEPTH_STENCIL_ATTACHMENTContent = default;
        private static bool _GL_DEPTH_STENCIL_ATTACHMENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_DEPTH24_STENCIL8"/>
        /// </summary>
        public static int GL_DEPTH24_STENCIL8 { get { if (!_GL_DEPTH24_STENCIL8Ready) { _GL_DEPTH24_STENCIL8Content = SGetField<int>(LocalBridgeClazz, "GL_DEPTH24_STENCIL8"); _GL_DEPTH24_STENCIL8Ready = true; } return _GL_DEPTH24_STENCIL8Content; } }
        private static int _GL_DEPTH24_STENCIL8Content = default;
        private static bool _GL_DEPTH24_STENCIL8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_DEPTH32F_STENCIL8"/>
        /// </summary>
        public static int GL_DEPTH32F_STENCIL8 { get { if (!_GL_DEPTH32F_STENCIL8Ready) { _GL_DEPTH32F_STENCIL8Content = SGetField<int>(LocalBridgeClazz, "GL_DEPTH32F_STENCIL8"); _GL_DEPTH32F_STENCIL8Ready = true; } return _GL_DEPTH32F_STENCIL8Content; } }
        private static int _GL_DEPTH32F_STENCIL8Content = default;
        private static bool _GL_DEPTH32F_STENCIL8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_DRAW_BUFFER0"/>
        /// </summary>
        public static int GL_DRAW_BUFFER0 { get { if (!_GL_DRAW_BUFFER0Ready) { _GL_DRAW_BUFFER0Content = SGetField<int>(LocalBridgeClazz, "GL_DRAW_BUFFER0"); _GL_DRAW_BUFFER0Ready = true; } return _GL_DRAW_BUFFER0Content; } }
        private static int _GL_DRAW_BUFFER0Content = default;
        private static bool _GL_DRAW_BUFFER0Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_DRAW_BUFFER1"/>
        /// </summary>
        public static int GL_DRAW_BUFFER1 { get { if (!_GL_DRAW_BUFFER1Ready) { _GL_DRAW_BUFFER1Content = SGetField<int>(LocalBridgeClazz, "GL_DRAW_BUFFER1"); _GL_DRAW_BUFFER1Ready = true; } return _GL_DRAW_BUFFER1Content; } }
        private static int _GL_DRAW_BUFFER1Content = default;
        private static bool _GL_DRAW_BUFFER1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_DRAW_BUFFER10"/>
        /// </summary>
        public static int GL_DRAW_BUFFER10 { get { if (!_GL_DRAW_BUFFER10Ready) { _GL_DRAW_BUFFER10Content = SGetField<int>(LocalBridgeClazz, "GL_DRAW_BUFFER10"); _GL_DRAW_BUFFER10Ready = true; } return _GL_DRAW_BUFFER10Content; } }
        private static int _GL_DRAW_BUFFER10Content = default;
        private static bool _GL_DRAW_BUFFER10Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_DRAW_BUFFER11"/>
        /// </summary>
        public static int GL_DRAW_BUFFER11 { get { if (!_GL_DRAW_BUFFER11Ready) { _GL_DRAW_BUFFER11Content = SGetField<int>(LocalBridgeClazz, "GL_DRAW_BUFFER11"); _GL_DRAW_BUFFER11Ready = true; } return _GL_DRAW_BUFFER11Content; } }
        private static int _GL_DRAW_BUFFER11Content = default;
        private static bool _GL_DRAW_BUFFER11Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_DRAW_BUFFER12"/>
        /// </summary>
        public static int GL_DRAW_BUFFER12 { get { if (!_GL_DRAW_BUFFER12Ready) { _GL_DRAW_BUFFER12Content = SGetField<int>(LocalBridgeClazz, "GL_DRAW_BUFFER12"); _GL_DRAW_BUFFER12Ready = true; } return _GL_DRAW_BUFFER12Content; } }
        private static int _GL_DRAW_BUFFER12Content = default;
        private static bool _GL_DRAW_BUFFER12Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_DRAW_BUFFER13"/>
        /// </summary>
        public static int GL_DRAW_BUFFER13 { get { if (!_GL_DRAW_BUFFER13Ready) { _GL_DRAW_BUFFER13Content = SGetField<int>(LocalBridgeClazz, "GL_DRAW_BUFFER13"); _GL_DRAW_BUFFER13Ready = true; } return _GL_DRAW_BUFFER13Content; } }
        private static int _GL_DRAW_BUFFER13Content = default;
        private static bool _GL_DRAW_BUFFER13Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_DRAW_BUFFER14"/>
        /// </summary>
        public static int GL_DRAW_BUFFER14 { get { if (!_GL_DRAW_BUFFER14Ready) { _GL_DRAW_BUFFER14Content = SGetField<int>(LocalBridgeClazz, "GL_DRAW_BUFFER14"); _GL_DRAW_BUFFER14Ready = true; } return _GL_DRAW_BUFFER14Content; } }
        private static int _GL_DRAW_BUFFER14Content = default;
        private static bool _GL_DRAW_BUFFER14Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_DRAW_BUFFER15"/>
        /// </summary>
        public static int GL_DRAW_BUFFER15 { get { if (!_GL_DRAW_BUFFER15Ready) { _GL_DRAW_BUFFER15Content = SGetField<int>(LocalBridgeClazz, "GL_DRAW_BUFFER15"); _GL_DRAW_BUFFER15Ready = true; } return _GL_DRAW_BUFFER15Content; } }
        private static int _GL_DRAW_BUFFER15Content = default;
        private static bool _GL_DRAW_BUFFER15Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_DRAW_BUFFER2"/>
        /// </summary>
        public static int GL_DRAW_BUFFER2 { get { if (!_GL_DRAW_BUFFER2Ready) { _GL_DRAW_BUFFER2Content = SGetField<int>(LocalBridgeClazz, "GL_DRAW_BUFFER2"); _GL_DRAW_BUFFER2Ready = true; } return _GL_DRAW_BUFFER2Content; } }
        private static int _GL_DRAW_BUFFER2Content = default;
        private static bool _GL_DRAW_BUFFER2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_DRAW_BUFFER3"/>
        /// </summary>
        public static int GL_DRAW_BUFFER3 { get { if (!_GL_DRAW_BUFFER3Ready) { _GL_DRAW_BUFFER3Content = SGetField<int>(LocalBridgeClazz, "GL_DRAW_BUFFER3"); _GL_DRAW_BUFFER3Ready = true; } return _GL_DRAW_BUFFER3Content; } }
        private static int _GL_DRAW_BUFFER3Content = default;
        private static bool _GL_DRAW_BUFFER3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_DRAW_BUFFER4"/>
        /// </summary>
        public static int GL_DRAW_BUFFER4 { get { if (!_GL_DRAW_BUFFER4Ready) { _GL_DRAW_BUFFER4Content = SGetField<int>(LocalBridgeClazz, "GL_DRAW_BUFFER4"); _GL_DRAW_BUFFER4Ready = true; } return _GL_DRAW_BUFFER4Content; } }
        private static int _GL_DRAW_BUFFER4Content = default;
        private static bool _GL_DRAW_BUFFER4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_DRAW_BUFFER5"/>
        /// </summary>
        public static int GL_DRAW_BUFFER5 { get { if (!_GL_DRAW_BUFFER5Ready) { _GL_DRAW_BUFFER5Content = SGetField<int>(LocalBridgeClazz, "GL_DRAW_BUFFER5"); _GL_DRAW_BUFFER5Ready = true; } return _GL_DRAW_BUFFER5Content; } }
        private static int _GL_DRAW_BUFFER5Content = default;
        private static bool _GL_DRAW_BUFFER5Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_DRAW_BUFFER6"/>
        /// </summary>
        public static int GL_DRAW_BUFFER6 { get { if (!_GL_DRAW_BUFFER6Ready) { _GL_DRAW_BUFFER6Content = SGetField<int>(LocalBridgeClazz, "GL_DRAW_BUFFER6"); _GL_DRAW_BUFFER6Ready = true; } return _GL_DRAW_BUFFER6Content; } }
        private static int _GL_DRAW_BUFFER6Content = default;
        private static bool _GL_DRAW_BUFFER6Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_DRAW_BUFFER7"/>
        /// </summary>
        public static int GL_DRAW_BUFFER7 { get { if (!_GL_DRAW_BUFFER7Ready) { _GL_DRAW_BUFFER7Content = SGetField<int>(LocalBridgeClazz, "GL_DRAW_BUFFER7"); _GL_DRAW_BUFFER7Ready = true; } return _GL_DRAW_BUFFER7Content; } }
        private static int _GL_DRAW_BUFFER7Content = default;
        private static bool _GL_DRAW_BUFFER7Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_DRAW_BUFFER8"/>
        /// </summary>
        public static int GL_DRAW_BUFFER8 { get { if (!_GL_DRAW_BUFFER8Ready) { _GL_DRAW_BUFFER8Content = SGetField<int>(LocalBridgeClazz, "GL_DRAW_BUFFER8"); _GL_DRAW_BUFFER8Ready = true; } return _GL_DRAW_BUFFER8Content; } }
        private static int _GL_DRAW_BUFFER8Content = default;
        private static bool _GL_DRAW_BUFFER8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_DRAW_BUFFER9"/>
        /// </summary>
        public static int GL_DRAW_BUFFER9 { get { if (!_GL_DRAW_BUFFER9Ready) { _GL_DRAW_BUFFER9Content = SGetField<int>(LocalBridgeClazz, "GL_DRAW_BUFFER9"); _GL_DRAW_BUFFER9Ready = true; } return _GL_DRAW_BUFFER9Content; } }
        private static int _GL_DRAW_BUFFER9Content = default;
        private static bool _GL_DRAW_BUFFER9Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_DRAW_FRAMEBUFFER"/>
        /// </summary>
        public static int GL_DRAW_FRAMEBUFFER { get { if (!_GL_DRAW_FRAMEBUFFERReady) { _GL_DRAW_FRAMEBUFFERContent = SGetField<int>(LocalBridgeClazz, "GL_DRAW_FRAMEBUFFER"); _GL_DRAW_FRAMEBUFFERReady = true; } return _GL_DRAW_FRAMEBUFFERContent; } }
        private static int _GL_DRAW_FRAMEBUFFERContent = default;
        private static bool _GL_DRAW_FRAMEBUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_DRAW_FRAMEBUFFER_BINDING"/>
        /// </summary>
        public static int GL_DRAW_FRAMEBUFFER_BINDING { get { if (!_GL_DRAW_FRAMEBUFFER_BINDINGReady) { _GL_DRAW_FRAMEBUFFER_BINDINGContent = SGetField<int>(LocalBridgeClazz, "GL_DRAW_FRAMEBUFFER_BINDING"); _GL_DRAW_FRAMEBUFFER_BINDINGReady = true; } return _GL_DRAW_FRAMEBUFFER_BINDINGContent; } }
        private static int _GL_DRAW_FRAMEBUFFER_BINDINGContent = default;
        private static bool _GL_DRAW_FRAMEBUFFER_BINDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_DYNAMIC_COPY"/>
        /// </summary>
        public static int GL_DYNAMIC_COPY { get { if (!_GL_DYNAMIC_COPYReady) { _GL_DYNAMIC_COPYContent = SGetField<int>(LocalBridgeClazz, "GL_DYNAMIC_COPY"); _GL_DYNAMIC_COPYReady = true; } return _GL_DYNAMIC_COPYContent; } }
        private static int _GL_DYNAMIC_COPYContent = default;
        private static bool _GL_DYNAMIC_COPYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_DYNAMIC_READ"/>
        /// </summary>
        public static int GL_DYNAMIC_READ { get { if (!_GL_DYNAMIC_READReady) { _GL_DYNAMIC_READContent = SGetField<int>(LocalBridgeClazz, "GL_DYNAMIC_READ"); _GL_DYNAMIC_READReady = true; } return _GL_DYNAMIC_READContent; } }
        private static int _GL_DYNAMIC_READContent = default;
        private static bool _GL_DYNAMIC_READReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_FLOAT_32_UNSIGNED_INT_24_8_REV"/>
        /// </summary>
        public static int GL_FLOAT_32_UNSIGNED_INT_24_8_REV { get { if (!_GL_FLOAT_32_UNSIGNED_INT_24_8_REVReady) { _GL_FLOAT_32_UNSIGNED_INT_24_8_REVContent = SGetField<int>(LocalBridgeClazz, "GL_FLOAT_32_UNSIGNED_INT_24_8_REV"); _GL_FLOAT_32_UNSIGNED_INT_24_8_REVReady = true; } return _GL_FLOAT_32_UNSIGNED_INT_24_8_REVContent; } }
        private static int _GL_FLOAT_32_UNSIGNED_INT_24_8_REVContent = default;
        private static bool _GL_FLOAT_32_UNSIGNED_INT_24_8_REVReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_FLOAT_MAT2x3"/>
        /// </summary>
        public static int GL_FLOAT_MAT2x3 { get { if (!_GL_FLOAT_MAT2x3Ready) { _GL_FLOAT_MAT2x3Content = SGetField<int>(LocalBridgeClazz, "GL_FLOAT_MAT2x3"); _GL_FLOAT_MAT2x3Ready = true; } return _GL_FLOAT_MAT2x3Content; } }
        private static int _GL_FLOAT_MAT2x3Content = default;
        private static bool _GL_FLOAT_MAT2x3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_FLOAT_MAT2x4"/>
        /// </summary>
        public static int GL_FLOAT_MAT2x4 { get { if (!_GL_FLOAT_MAT2x4Ready) { _GL_FLOAT_MAT2x4Content = SGetField<int>(LocalBridgeClazz, "GL_FLOAT_MAT2x4"); _GL_FLOAT_MAT2x4Ready = true; } return _GL_FLOAT_MAT2x4Content; } }
        private static int _GL_FLOAT_MAT2x4Content = default;
        private static bool _GL_FLOAT_MAT2x4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_FLOAT_MAT3x2"/>
        /// </summary>
        public static int GL_FLOAT_MAT3x2 { get { if (!_GL_FLOAT_MAT3x2Ready) { _GL_FLOAT_MAT3x2Content = SGetField<int>(LocalBridgeClazz, "GL_FLOAT_MAT3x2"); _GL_FLOAT_MAT3x2Ready = true; } return _GL_FLOAT_MAT3x2Content; } }
        private static int _GL_FLOAT_MAT3x2Content = default;
        private static bool _GL_FLOAT_MAT3x2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_FLOAT_MAT3x4"/>
        /// </summary>
        public static int GL_FLOAT_MAT3x4 { get { if (!_GL_FLOAT_MAT3x4Ready) { _GL_FLOAT_MAT3x4Content = SGetField<int>(LocalBridgeClazz, "GL_FLOAT_MAT3x4"); _GL_FLOAT_MAT3x4Ready = true; } return _GL_FLOAT_MAT3x4Content; } }
        private static int _GL_FLOAT_MAT3x4Content = default;
        private static bool _GL_FLOAT_MAT3x4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_FLOAT_MAT4x2"/>
        /// </summary>
        public static int GL_FLOAT_MAT4x2 { get { if (!_GL_FLOAT_MAT4x2Ready) { _GL_FLOAT_MAT4x2Content = SGetField<int>(LocalBridgeClazz, "GL_FLOAT_MAT4x2"); _GL_FLOAT_MAT4x2Ready = true; } return _GL_FLOAT_MAT4x2Content; } }
        private static int _GL_FLOAT_MAT4x2Content = default;
        private static bool _GL_FLOAT_MAT4x2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_FLOAT_MAT4x3"/>
        /// </summary>
        public static int GL_FLOAT_MAT4x3 { get { if (!_GL_FLOAT_MAT4x3Ready) { _GL_FLOAT_MAT4x3Content = SGetField<int>(LocalBridgeClazz, "GL_FLOAT_MAT4x3"); _GL_FLOAT_MAT4x3Ready = true; } return _GL_FLOAT_MAT4x3Content; } }
        private static int _GL_FLOAT_MAT4x3Content = default;
        private static bool _GL_FLOAT_MAT4x3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_FRAGMENT_SHADER_DERIVATIVE_HINT"/>
        /// </summary>
        public static int GL_FRAGMENT_SHADER_DERIVATIVE_HINT { get { if (!_GL_FRAGMENT_SHADER_DERIVATIVE_HINTReady) { _GL_FRAGMENT_SHADER_DERIVATIVE_HINTContent = SGetField<int>(LocalBridgeClazz, "GL_FRAGMENT_SHADER_DERIVATIVE_HINT"); _GL_FRAGMENT_SHADER_DERIVATIVE_HINTReady = true; } return _GL_FRAGMENT_SHADER_DERIVATIVE_HINTContent; } }
        private static int _GL_FRAGMENT_SHADER_DERIVATIVE_HINTContent = default;
        private static bool _GL_FRAGMENT_SHADER_DERIVATIVE_HINTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE { get { if (!_GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZEReady) { _GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE"); _GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZEReady = true; } return _GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZEContent; } }
        private static int _GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZEContent = default;
        private static bool _GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE { get { if (!_GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZEReady) { _GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE"); _GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZEReady = true; } return _GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZEContent; } }
        private static int _GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZEContent = default;
        private static bool _GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING { get { if (!_GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODINGReady) { _GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODINGContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING"); _GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODINGReady = true; } return _GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODINGContent; } }
        private static int _GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODINGContent = default;
        private static bool _GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE { get { if (!_GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPEReady) { _GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPEContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE"); _GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPEReady = true; } return _GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPEContent; } }
        private static int _GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPEContent = default;
        private static bool _GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE { get { if (!_GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZEReady) { _GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE"); _GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZEReady = true; } return _GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZEContent; } }
        private static int _GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZEContent = default;
        private static bool _GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE { get { if (!_GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZEReady) { _GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE"); _GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZEReady = true; } return _GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZEContent; } }
        private static int _GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZEContent = default;
        private static bool _GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE { get { if (!_GL_FRAMEBUFFER_ATTACHMENT_RED_SIZEReady) { _GL_FRAMEBUFFER_ATTACHMENT_RED_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE"); _GL_FRAMEBUFFER_ATTACHMENT_RED_SIZEReady = true; } return _GL_FRAMEBUFFER_ATTACHMENT_RED_SIZEContent; } }
        private static int _GL_FRAMEBUFFER_ATTACHMENT_RED_SIZEContent = default;
        private static bool _GL_FRAMEBUFFER_ATTACHMENT_RED_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE { get { if (!_GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZEReady) { _GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE"); _GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZEReady = true; } return _GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZEContent; } }
        private static int _GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZEContent = default;
        private static bool _GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER { get { if (!_GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYERReady) { _GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYERContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER"); _GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYERReady = true; } return _GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYERContent; } }
        private static int _GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYERContent = default;
        private static bool _GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_FRAMEBUFFER_DEFAULT"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_DEFAULT { get { if (!_GL_FRAMEBUFFER_DEFAULTReady) { _GL_FRAMEBUFFER_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_DEFAULT"); _GL_FRAMEBUFFER_DEFAULTReady = true; } return _GL_FRAMEBUFFER_DEFAULTContent; } }
        private static int _GL_FRAMEBUFFER_DEFAULTContent = default;
        private static bool _GL_FRAMEBUFFER_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE { get { if (!_GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLEReady) { _GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLEContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE"); _GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLEReady = true; } return _GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLEContent; } }
        private static int _GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLEContent = default;
        private static bool _GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_FRAMEBUFFER_UNDEFINED"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_UNDEFINED { get { if (!_GL_FRAMEBUFFER_UNDEFINEDReady) { _GL_FRAMEBUFFER_UNDEFINEDContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_UNDEFINED"); _GL_FRAMEBUFFER_UNDEFINEDReady = true; } return _GL_FRAMEBUFFER_UNDEFINEDContent; } }
        private static int _GL_FRAMEBUFFER_UNDEFINEDContent = default;
        private static bool _GL_FRAMEBUFFER_UNDEFINEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_GREEN"/>
        /// </summary>
        public static int GL_GREEN { get { if (!_GL_GREENReady) { _GL_GREENContent = SGetField<int>(LocalBridgeClazz, "GL_GREEN"); _GL_GREENReady = true; } return _GL_GREENContent; } }
        private static int _GL_GREENContent = default;
        private static bool _GL_GREENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_HALF_FLOAT"/>
        /// </summary>
        public static int GL_HALF_FLOAT { get { if (!_GL_HALF_FLOATReady) { _GL_HALF_FLOATContent = SGetField<int>(LocalBridgeClazz, "GL_HALF_FLOAT"); _GL_HALF_FLOATReady = true; } return _GL_HALF_FLOATContent; } }
        private static int _GL_HALF_FLOATContent = default;
        private static bool _GL_HALF_FLOATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_INT_2_10_10_10_REV"/>
        /// </summary>
        public static int GL_INT_2_10_10_10_REV { get { if (!_GL_INT_2_10_10_10_REVReady) { _GL_INT_2_10_10_10_REVContent = SGetField<int>(LocalBridgeClazz, "GL_INT_2_10_10_10_REV"); _GL_INT_2_10_10_10_REVReady = true; } return _GL_INT_2_10_10_10_REVContent; } }
        private static int _GL_INT_2_10_10_10_REVContent = default;
        private static bool _GL_INT_2_10_10_10_REVReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_INT_SAMPLER_2D"/>
        /// </summary>
        public static int GL_INT_SAMPLER_2D { get { if (!_GL_INT_SAMPLER_2DReady) { _GL_INT_SAMPLER_2DContent = SGetField<int>(LocalBridgeClazz, "GL_INT_SAMPLER_2D"); _GL_INT_SAMPLER_2DReady = true; } return _GL_INT_SAMPLER_2DContent; } }
        private static int _GL_INT_SAMPLER_2DContent = default;
        private static bool _GL_INT_SAMPLER_2DReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_INT_SAMPLER_2D_ARRAY"/>
        /// </summary>
        public static int GL_INT_SAMPLER_2D_ARRAY { get { if (!_GL_INT_SAMPLER_2D_ARRAYReady) { _GL_INT_SAMPLER_2D_ARRAYContent = SGetField<int>(LocalBridgeClazz, "GL_INT_SAMPLER_2D_ARRAY"); _GL_INT_SAMPLER_2D_ARRAYReady = true; } return _GL_INT_SAMPLER_2D_ARRAYContent; } }
        private static int _GL_INT_SAMPLER_2D_ARRAYContent = default;
        private static bool _GL_INT_SAMPLER_2D_ARRAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_INT_SAMPLER_3D"/>
        /// </summary>
        public static int GL_INT_SAMPLER_3D { get { if (!_GL_INT_SAMPLER_3DReady) { _GL_INT_SAMPLER_3DContent = SGetField<int>(LocalBridgeClazz, "GL_INT_SAMPLER_3D"); _GL_INT_SAMPLER_3DReady = true; } return _GL_INT_SAMPLER_3DContent; } }
        private static int _GL_INT_SAMPLER_3DContent = default;
        private static bool _GL_INT_SAMPLER_3DReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_INT_SAMPLER_CUBE"/>
        /// </summary>
        public static int GL_INT_SAMPLER_CUBE { get { if (!_GL_INT_SAMPLER_CUBEReady) { _GL_INT_SAMPLER_CUBEContent = SGetField<int>(LocalBridgeClazz, "GL_INT_SAMPLER_CUBE"); _GL_INT_SAMPLER_CUBEReady = true; } return _GL_INT_SAMPLER_CUBEContent; } }
        private static int _GL_INT_SAMPLER_CUBEContent = default;
        private static bool _GL_INT_SAMPLER_CUBEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_INTERLEAVED_ATTRIBS"/>
        /// </summary>
        public static int GL_INTERLEAVED_ATTRIBS { get { if (!_GL_INTERLEAVED_ATTRIBSReady) { _GL_INTERLEAVED_ATTRIBSContent = SGetField<int>(LocalBridgeClazz, "GL_INTERLEAVED_ATTRIBS"); _GL_INTERLEAVED_ATTRIBSReady = true; } return _GL_INTERLEAVED_ATTRIBSContent; } }
        private static int _GL_INTERLEAVED_ATTRIBSContent = default;
        private static bool _GL_INTERLEAVED_ATTRIBSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_INVALID_INDEX"/>
        /// </summary>
        public static int GL_INVALID_INDEX { get { if (!_GL_INVALID_INDEXReady) { _GL_INVALID_INDEXContent = SGetField<int>(LocalBridgeClazz, "GL_INVALID_INDEX"); _GL_INVALID_INDEXReady = true; } return _GL_INVALID_INDEXContent; } }
        private static int _GL_INVALID_INDEXContent = default;
        private static bool _GL_INVALID_INDEXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_MAJOR_VERSION"/>
        /// </summary>
        public static int GL_MAJOR_VERSION { get { if (!_GL_MAJOR_VERSIONReady) { _GL_MAJOR_VERSIONContent = SGetField<int>(LocalBridgeClazz, "GL_MAJOR_VERSION"); _GL_MAJOR_VERSIONReady = true; } return _GL_MAJOR_VERSIONContent; } }
        private static int _GL_MAJOR_VERSIONContent = default;
        private static bool _GL_MAJOR_VERSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_MAP_FLUSH_EXPLICIT_BIT"/>
        /// </summary>
        public static int GL_MAP_FLUSH_EXPLICIT_BIT { get { if (!_GL_MAP_FLUSH_EXPLICIT_BITReady) { _GL_MAP_FLUSH_EXPLICIT_BITContent = SGetField<int>(LocalBridgeClazz, "GL_MAP_FLUSH_EXPLICIT_BIT"); _GL_MAP_FLUSH_EXPLICIT_BITReady = true; } return _GL_MAP_FLUSH_EXPLICIT_BITContent; } }
        private static int _GL_MAP_FLUSH_EXPLICIT_BITContent = default;
        private static bool _GL_MAP_FLUSH_EXPLICIT_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_MAP_INVALIDATE_BUFFER_BIT"/>
        /// </summary>
        public static int GL_MAP_INVALIDATE_BUFFER_BIT { get { if (!_GL_MAP_INVALIDATE_BUFFER_BITReady) { _GL_MAP_INVALIDATE_BUFFER_BITContent = SGetField<int>(LocalBridgeClazz, "GL_MAP_INVALIDATE_BUFFER_BIT"); _GL_MAP_INVALIDATE_BUFFER_BITReady = true; } return _GL_MAP_INVALIDATE_BUFFER_BITContent; } }
        private static int _GL_MAP_INVALIDATE_BUFFER_BITContent = default;
        private static bool _GL_MAP_INVALIDATE_BUFFER_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_MAP_INVALIDATE_RANGE_BIT"/>
        /// </summary>
        public static int GL_MAP_INVALIDATE_RANGE_BIT { get { if (!_GL_MAP_INVALIDATE_RANGE_BITReady) { _GL_MAP_INVALIDATE_RANGE_BITContent = SGetField<int>(LocalBridgeClazz, "GL_MAP_INVALIDATE_RANGE_BIT"); _GL_MAP_INVALIDATE_RANGE_BITReady = true; } return _GL_MAP_INVALIDATE_RANGE_BITContent; } }
        private static int _GL_MAP_INVALIDATE_RANGE_BITContent = default;
        private static bool _GL_MAP_INVALIDATE_RANGE_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_MAP_READ_BIT"/>
        /// </summary>
        public static int GL_MAP_READ_BIT { get { if (!_GL_MAP_READ_BITReady) { _GL_MAP_READ_BITContent = SGetField<int>(LocalBridgeClazz, "GL_MAP_READ_BIT"); _GL_MAP_READ_BITReady = true; } return _GL_MAP_READ_BITContent; } }
        private static int _GL_MAP_READ_BITContent = default;
        private static bool _GL_MAP_READ_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_MAP_UNSYNCHRONIZED_BIT"/>
        /// </summary>
        public static int GL_MAP_UNSYNCHRONIZED_BIT { get { if (!_GL_MAP_UNSYNCHRONIZED_BITReady) { _GL_MAP_UNSYNCHRONIZED_BITContent = SGetField<int>(LocalBridgeClazz, "GL_MAP_UNSYNCHRONIZED_BIT"); _GL_MAP_UNSYNCHRONIZED_BITReady = true; } return _GL_MAP_UNSYNCHRONIZED_BITContent; } }
        private static int _GL_MAP_UNSYNCHRONIZED_BITContent = default;
        private static bool _GL_MAP_UNSYNCHRONIZED_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_MAP_WRITE_BIT"/>
        /// </summary>
        public static int GL_MAP_WRITE_BIT { get { if (!_GL_MAP_WRITE_BITReady) { _GL_MAP_WRITE_BITContent = SGetField<int>(LocalBridgeClazz, "GL_MAP_WRITE_BIT"); _GL_MAP_WRITE_BITReady = true; } return _GL_MAP_WRITE_BITContent; } }
        private static int _GL_MAP_WRITE_BITContent = default;
        private static bool _GL_MAP_WRITE_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_MAX"/>
        /// </summary>
        public static int GL_MAX { get { if (!_GL_MAXReady) { _GL_MAXContent = SGetField<int>(LocalBridgeClazz, "GL_MAX"); _GL_MAXReady = true; } return _GL_MAXContent; } }
        private static int _GL_MAXContent = default;
        private static bool _GL_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_MAX_3D_TEXTURE_SIZE"/>
        /// </summary>
        public static int GL_MAX_3D_TEXTURE_SIZE { get { if (!_GL_MAX_3D_TEXTURE_SIZEReady) { _GL_MAX_3D_TEXTURE_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_3D_TEXTURE_SIZE"); _GL_MAX_3D_TEXTURE_SIZEReady = true; } return _GL_MAX_3D_TEXTURE_SIZEContent; } }
        private static int _GL_MAX_3D_TEXTURE_SIZEContent = default;
        private static bool _GL_MAX_3D_TEXTURE_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_MAX_ARRAY_TEXTURE_LAYERS"/>
        /// </summary>
        public static int GL_MAX_ARRAY_TEXTURE_LAYERS { get { if (!_GL_MAX_ARRAY_TEXTURE_LAYERSReady) { _GL_MAX_ARRAY_TEXTURE_LAYERSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_ARRAY_TEXTURE_LAYERS"); _GL_MAX_ARRAY_TEXTURE_LAYERSReady = true; } return _GL_MAX_ARRAY_TEXTURE_LAYERSContent; } }
        private static int _GL_MAX_ARRAY_TEXTURE_LAYERSContent = default;
        private static bool _GL_MAX_ARRAY_TEXTURE_LAYERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_MAX_COLOR_ATTACHMENTS"/>
        /// </summary>
        public static int GL_MAX_COLOR_ATTACHMENTS { get { if (!_GL_MAX_COLOR_ATTACHMENTSReady) { _GL_MAX_COLOR_ATTACHMENTSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_COLOR_ATTACHMENTS"); _GL_MAX_COLOR_ATTACHMENTSReady = true; } return _GL_MAX_COLOR_ATTACHMENTSContent; } }
        private static int _GL_MAX_COLOR_ATTACHMENTSContent = default;
        private static bool _GL_MAX_COLOR_ATTACHMENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS"/>
        /// </summary>
        public static int GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS { get { if (!_GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTSReady) { _GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS"); _GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTSReady = true; } return _GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTSContent; } }
        private static int _GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTSContent = default;
        private static bool _GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_MAX_COMBINED_UNIFORM_BLOCKS"/>
        /// </summary>
        public static int GL_MAX_COMBINED_UNIFORM_BLOCKS { get { if (!_GL_MAX_COMBINED_UNIFORM_BLOCKSReady) { _GL_MAX_COMBINED_UNIFORM_BLOCKSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_COMBINED_UNIFORM_BLOCKS"); _GL_MAX_COMBINED_UNIFORM_BLOCKSReady = true; } return _GL_MAX_COMBINED_UNIFORM_BLOCKSContent; } }
        private static int _GL_MAX_COMBINED_UNIFORM_BLOCKSContent = default;
        private static bool _GL_MAX_COMBINED_UNIFORM_BLOCKSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS"/>
        /// </summary>
        public static int GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS { get { if (!_GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTSReady) { _GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS"); _GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTSReady = true; } return _GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTSContent; } }
        private static int _GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTSContent = default;
        private static bool _GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_MAX_DRAW_BUFFERS"/>
        /// </summary>
        public static int GL_MAX_DRAW_BUFFERS { get { if (!_GL_MAX_DRAW_BUFFERSReady) { _GL_MAX_DRAW_BUFFERSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_DRAW_BUFFERS"); _GL_MAX_DRAW_BUFFERSReady = true; } return _GL_MAX_DRAW_BUFFERSContent; } }
        private static int _GL_MAX_DRAW_BUFFERSContent = default;
        private static bool _GL_MAX_DRAW_BUFFERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_MAX_ELEMENT_INDEX"/>
        /// </summary>
        public static int GL_MAX_ELEMENT_INDEX { get { if (!_GL_MAX_ELEMENT_INDEXReady) { _GL_MAX_ELEMENT_INDEXContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_ELEMENT_INDEX"); _GL_MAX_ELEMENT_INDEXReady = true; } return _GL_MAX_ELEMENT_INDEXContent; } }
        private static int _GL_MAX_ELEMENT_INDEXContent = default;
        private static bool _GL_MAX_ELEMENT_INDEXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_MAX_ELEMENTS_INDICES"/>
        /// </summary>
        public static int GL_MAX_ELEMENTS_INDICES { get { if (!_GL_MAX_ELEMENTS_INDICESReady) { _GL_MAX_ELEMENTS_INDICESContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_ELEMENTS_INDICES"); _GL_MAX_ELEMENTS_INDICESReady = true; } return _GL_MAX_ELEMENTS_INDICESContent; } }
        private static int _GL_MAX_ELEMENTS_INDICESContent = default;
        private static bool _GL_MAX_ELEMENTS_INDICESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_MAX_ELEMENTS_VERTICES"/>
        /// </summary>
        public static int GL_MAX_ELEMENTS_VERTICES { get { if (!_GL_MAX_ELEMENTS_VERTICESReady) { _GL_MAX_ELEMENTS_VERTICESContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_ELEMENTS_VERTICES"); _GL_MAX_ELEMENTS_VERTICESReady = true; } return _GL_MAX_ELEMENTS_VERTICESContent; } }
        private static int _GL_MAX_ELEMENTS_VERTICESContent = default;
        private static bool _GL_MAX_ELEMENTS_VERTICESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_MAX_FRAGMENT_INPUT_COMPONENTS"/>
        /// </summary>
        public static int GL_MAX_FRAGMENT_INPUT_COMPONENTS { get { if (!_GL_MAX_FRAGMENT_INPUT_COMPONENTSReady) { _GL_MAX_FRAGMENT_INPUT_COMPONENTSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_FRAGMENT_INPUT_COMPONENTS"); _GL_MAX_FRAGMENT_INPUT_COMPONENTSReady = true; } return _GL_MAX_FRAGMENT_INPUT_COMPONENTSContent; } }
        private static int _GL_MAX_FRAGMENT_INPUT_COMPONENTSContent = default;
        private static bool _GL_MAX_FRAGMENT_INPUT_COMPONENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_MAX_FRAGMENT_UNIFORM_BLOCKS"/>
        /// </summary>
        public static int GL_MAX_FRAGMENT_UNIFORM_BLOCKS { get { if (!_GL_MAX_FRAGMENT_UNIFORM_BLOCKSReady) { _GL_MAX_FRAGMENT_UNIFORM_BLOCKSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_FRAGMENT_UNIFORM_BLOCKS"); _GL_MAX_FRAGMENT_UNIFORM_BLOCKSReady = true; } return _GL_MAX_FRAGMENT_UNIFORM_BLOCKSContent; } }
        private static int _GL_MAX_FRAGMENT_UNIFORM_BLOCKSContent = default;
        private static bool _GL_MAX_FRAGMENT_UNIFORM_BLOCKSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_MAX_FRAGMENT_UNIFORM_COMPONENTS"/>
        /// </summary>
        public static int GL_MAX_FRAGMENT_UNIFORM_COMPONENTS { get { if (!_GL_MAX_FRAGMENT_UNIFORM_COMPONENTSReady) { _GL_MAX_FRAGMENT_UNIFORM_COMPONENTSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_FRAGMENT_UNIFORM_COMPONENTS"); _GL_MAX_FRAGMENT_UNIFORM_COMPONENTSReady = true; } return _GL_MAX_FRAGMENT_UNIFORM_COMPONENTSContent; } }
        private static int _GL_MAX_FRAGMENT_UNIFORM_COMPONENTSContent = default;
        private static bool _GL_MAX_FRAGMENT_UNIFORM_COMPONENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_MAX_PROGRAM_TEXEL_OFFSET"/>
        /// </summary>
        public static int GL_MAX_PROGRAM_TEXEL_OFFSET { get { if (!_GL_MAX_PROGRAM_TEXEL_OFFSETReady) { _GL_MAX_PROGRAM_TEXEL_OFFSETContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_PROGRAM_TEXEL_OFFSET"); _GL_MAX_PROGRAM_TEXEL_OFFSETReady = true; } return _GL_MAX_PROGRAM_TEXEL_OFFSETContent; } }
        private static int _GL_MAX_PROGRAM_TEXEL_OFFSETContent = default;
        private static bool _GL_MAX_PROGRAM_TEXEL_OFFSETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_MAX_SAMPLES"/>
        /// </summary>
        public static int GL_MAX_SAMPLES { get { if (!_GL_MAX_SAMPLESReady) { _GL_MAX_SAMPLESContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_SAMPLES"); _GL_MAX_SAMPLESReady = true; } return _GL_MAX_SAMPLESContent; } }
        private static int _GL_MAX_SAMPLESContent = default;
        private static bool _GL_MAX_SAMPLESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_MAX_SERVER_WAIT_TIMEOUT"/>
        /// </summary>
        public static int GL_MAX_SERVER_WAIT_TIMEOUT { get { if (!_GL_MAX_SERVER_WAIT_TIMEOUTReady) { _GL_MAX_SERVER_WAIT_TIMEOUTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_SERVER_WAIT_TIMEOUT"); _GL_MAX_SERVER_WAIT_TIMEOUTReady = true; } return _GL_MAX_SERVER_WAIT_TIMEOUTContent; } }
        private static int _GL_MAX_SERVER_WAIT_TIMEOUTContent = default;
        private static bool _GL_MAX_SERVER_WAIT_TIMEOUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_MAX_TEXTURE_LOD_BIAS"/>
        /// </summary>
        public static int GL_MAX_TEXTURE_LOD_BIAS { get { if (!_GL_MAX_TEXTURE_LOD_BIASReady) { _GL_MAX_TEXTURE_LOD_BIASContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TEXTURE_LOD_BIAS"); _GL_MAX_TEXTURE_LOD_BIASReady = true; } return _GL_MAX_TEXTURE_LOD_BIASContent; } }
        private static int _GL_MAX_TEXTURE_LOD_BIASContent = default;
        private static bool _GL_MAX_TEXTURE_LOD_BIASReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS"/>
        /// </summary>
        public static int GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS { get { if (!_GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTSReady) { _GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS"); _GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTSReady = true; } return _GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTSContent; } }
        private static int _GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTSContent = default;
        private static bool _GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS"/>
        /// </summary>
        public static int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS { get { if (!_GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBSReady) { _GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS"); _GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBSReady = true; } return _GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBSContent; } }
        private static int _GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBSContent = default;
        private static bool _GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS"/>
        /// </summary>
        public static int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS { get { if (!_GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTSReady) { _GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS"); _GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTSReady = true; } return _GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTSContent; } }
        private static int _GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTSContent = default;
        private static bool _GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_MAX_UNIFORM_BLOCK_SIZE"/>
        /// </summary>
        public static int GL_MAX_UNIFORM_BLOCK_SIZE { get { if (!_GL_MAX_UNIFORM_BLOCK_SIZEReady) { _GL_MAX_UNIFORM_BLOCK_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_UNIFORM_BLOCK_SIZE"); _GL_MAX_UNIFORM_BLOCK_SIZEReady = true; } return _GL_MAX_UNIFORM_BLOCK_SIZEContent; } }
        private static int _GL_MAX_UNIFORM_BLOCK_SIZEContent = default;
        private static bool _GL_MAX_UNIFORM_BLOCK_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_MAX_UNIFORM_BUFFER_BINDINGS"/>
        /// </summary>
        public static int GL_MAX_UNIFORM_BUFFER_BINDINGS { get { if (!_GL_MAX_UNIFORM_BUFFER_BINDINGSReady) { _GL_MAX_UNIFORM_BUFFER_BINDINGSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_UNIFORM_BUFFER_BINDINGS"); _GL_MAX_UNIFORM_BUFFER_BINDINGSReady = true; } return _GL_MAX_UNIFORM_BUFFER_BINDINGSContent; } }
        private static int _GL_MAX_UNIFORM_BUFFER_BINDINGSContent = default;
        private static bool _GL_MAX_UNIFORM_BUFFER_BINDINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_MAX_VARYING_COMPONENTS"/>
        /// </summary>
        public static int GL_MAX_VARYING_COMPONENTS { get { if (!_GL_MAX_VARYING_COMPONENTSReady) { _GL_MAX_VARYING_COMPONENTSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_VARYING_COMPONENTS"); _GL_MAX_VARYING_COMPONENTSReady = true; } return _GL_MAX_VARYING_COMPONENTSContent; } }
        private static int _GL_MAX_VARYING_COMPONENTSContent = default;
        private static bool _GL_MAX_VARYING_COMPONENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_MAX_VERTEX_OUTPUT_COMPONENTS"/>
        /// </summary>
        public static int GL_MAX_VERTEX_OUTPUT_COMPONENTS { get { if (!_GL_MAX_VERTEX_OUTPUT_COMPONENTSReady) { _GL_MAX_VERTEX_OUTPUT_COMPONENTSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_VERTEX_OUTPUT_COMPONENTS"); _GL_MAX_VERTEX_OUTPUT_COMPONENTSReady = true; } return _GL_MAX_VERTEX_OUTPUT_COMPONENTSContent; } }
        private static int _GL_MAX_VERTEX_OUTPUT_COMPONENTSContent = default;
        private static bool _GL_MAX_VERTEX_OUTPUT_COMPONENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_MAX_VERTEX_UNIFORM_BLOCKS"/>
        /// </summary>
        public static int GL_MAX_VERTEX_UNIFORM_BLOCKS { get { if (!_GL_MAX_VERTEX_UNIFORM_BLOCKSReady) { _GL_MAX_VERTEX_UNIFORM_BLOCKSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_VERTEX_UNIFORM_BLOCKS"); _GL_MAX_VERTEX_UNIFORM_BLOCKSReady = true; } return _GL_MAX_VERTEX_UNIFORM_BLOCKSContent; } }
        private static int _GL_MAX_VERTEX_UNIFORM_BLOCKSContent = default;
        private static bool _GL_MAX_VERTEX_UNIFORM_BLOCKSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_MAX_VERTEX_UNIFORM_COMPONENTS"/>
        /// </summary>
        public static int GL_MAX_VERTEX_UNIFORM_COMPONENTS { get { if (!_GL_MAX_VERTEX_UNIFORM_COMPONENTSReady) { _GL_MAX_VERTEX_UNIFORM_COMPONENTSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_VERTEX_UNIFORM_COMPONENTS"); _GL_MAX_VERTEX_UNIFORM_COMPONENTSReady = true; } return _GL_MAX_VERTEX_UNIFORM_COMPONENTSContent; } }
        private static int _GL_MAX_VERTEX_UNIFORM_COMPONENTSContent = default;
        private static bool _GL_MAX_VERTEX_UNIFORM_COMPONENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_MIN"/>
        /// </summary>
        public static int GL_MIN { get { if (!_GL_MINReady) { _GL_MINContent = SGetField<int>(LocalBridgeClazz, "GL_MIN"); _GL_MINReady = true; } return _GL_MINContent; } }
        private static int _GL_MINContent = default;
        private static bool _GL_MINReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_MIN_PROGRAM_TEXEL_OFFSET"/>
        /// </summary>
        public static int GL_MIN_PROGRAM_TEXEL_OFFSET { get { if (!_GL_MIN_PROGRAM_TEXEL_OFFSETReady) { _GL_MIN_PROGRAM_TEXEL_OFFSETContent = SGetField<int>(LocalBridgeClazz, "GL_MIN_PROGRAM_TEXEL_OFFSET"); _GL_MIN_PROGRAM_TEXEL_OFFSETReady = true; } return _GL_MIN_PROGRAM_TEXEL_OFFSETContent; } }
        private static int _GL_MIN_PROGRAM_TEXEL_OFFSETContent = default;
        private static bool _GL_MIN_PROGRAM_TEXEL_OFFSETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_MINOR_VERSION"/>
        /// </summary>
        public static int GL_MINOR_VERSION { get { if (!_GL_MINOR_VERSIONReady) { _GL_MINOR_VERSIONContent = SGetField<int>(LocalBridgeClazz, "GL_MINOR_VERSION"); _GL_MINOR_VERSIONReady = true; } return _GL_MINOR_VERSIONContent; } }
        private static int _GL_MINOR_VERSIONContent = default;
        private static bool _GL_MINOR_VERSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_NUM_EXTENSIONS"/>
        /// </summary>
        public static int GL_NUM_EXTENSIONS { get { if (!_GL_NUM_EXTENSIONSReady) { _GL_NUM_EXTENSIONSContent = SGetField<int>(LocalBridgeClazz, "GL_NUM_EXTENSIONS"); _GL_NUM_EXTENSIONSReady = true; } return _GL_NUM_EXTENSIONSContent; } }
        private static int _GL_NUM_EXTENSIONSContent = default;
        private static bool _GL_NUM_EXTENSIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_NUM_PROGRAM_BINARY_FORMATS"/>
        /// </summary>
        public static int GL_NUM_PROGRAM_BINARY_FORMATS { get { if (!_GL_NUM_PROGRAM_BINARY_FORMATSReady) { _GL_NUM_PROGRAM_BINARY_FORMATSContent = SGetField<int>(LocalBridgeClazz, "GL_NUM_PROGRAM_BINARY_FORMATS"); _GL_NUM_PROGRAM_BINARY_FORMATSReady = true; } return _GL_NUM_PROGRAM_BINARY_FORMATSContent; } }
        private static int _GL_NUM_PROGRAM_BINARY_FORMATSContent = default;
        private static bool _GL_NUM_PROGRAM_BINARY_FORMATSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_NUM_SAMPLE_COUNTS"/>
        /// </summary>
        public static int GL_NUM_SAMPLE_COUNTS { get { if (!_GL_NUM_SAMPLE_COUNTSReady) { _GL_NUM_SAMPLE_COUNTSContent = SGetField<int>(LocalBridgeClazz, "GL_NUM_SAMPLE_COUNTS"); _GL_NUM_SAMPLE_COUNTSReady = true; } return _GL_NUM_SAMPLE_COUNTSContent; } }
        private static int _GL_NUM_SAMPLE_COUNTSContent = default;
        private static bool _GL_NUM_SAMPLE_COUNTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_OBJECT_TYPE"/>
        /// </summary>
        public static int GL_OBJECT_TYPE { get { if (!_GL_OBJECT_TYPEReady) { _GL_OBJECT_TYPEContent = SGetField<int>(LocalBridgeClazz, "GL_OBJECT_TYPE"); _GL_OBJECT_TYPEReady = true; } return _GL_OBJECT_TYPEContent; } }
        private static int _GL_OBJECT_TYPEContent = default;
        private static bool _GL_OBJECT_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_PACK_ROW_LENGTH"/>
        /// </summary>
        public static int GL_PACK_ROW_LENGTH { get { if (!_GL_PACK_ROW_LENGTHReady) { _GL_PACK_ROW_LENGTHContent = SGetField<int>(LocalBridgeClazz, "GL_PACK_ROW_LENGTH"); _GL_PACK_ROW_LENGTHReady = true; } return _GL_PACK_ROW_LENGTHContent; } }
        private static int _GL_PACK_ROW_LENGTHContent = default;
        private static bool _GL_PACK_ROW_LENGTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_PACK_SKIP_PIXELS"/>
        /// </summary>
        public static int GL_PACK_SKIP_PIXELS { get { if (!_GL_PACK_SKIP_PIXELSReady) { _GL_PACK_SKIP_PIXELSContent = SGetField<int>(LocalBridgeClazz, "GL_PACK_SKIP_PIXELS"); _GL_PACK_SKIP_PIXELSReady = true; } return _GL_PACK_SKIP_PIXELSContent; } }
        private static int _GL_PACK_SKIP_PIXELSContent = default;
        private static bool _GL_PACK_SKIP_PIXELSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_PACK_SKIP_ROWS"/>
        /// </summary>
        public static int GL_PACK_SKIP_ROWS { get { if (!_GL_PACK_SKIP_ROWSReady) { _GL_PACK_SKIP_ROWSContent = SGetField<int>(LocalBridgeClazz, "GL_PACK_SKIP_ROWS"); _GL_PACK_SKIP_ROWSReady = true; } return _GL_PACK_SKIP_ROWSContent; } }
        private static int _GL_PACK_SKIP_ROWSContent = default;
        private static bool _GL_PACK_SKIP_ROWSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_PIXEL_PACK_BUFFER"/>
        /// </summary>
        public static int GL_PIXEL_PACK_BUFFER { get { if (!_GL_PIXEL_PACK_BUFFERReady) { _GL_PIXEL_PACK_BUFFERContent = SGetField<int>(LocalBridgeClazz, "GL_PIXEL_PACK_BUFFER"); _GL_PIXEL_PACK_BUFFERReady = true; } return _GL_PIXEL_PACK_BUFFERContent; } }
        private static int _GL_PIXEL_PACK_BUFFERContent = default;
        private static bool _GL_PIXEL_PACK_BUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_PIXEL_PACK_BUFFER_BINDING"/>
        /// </summary>
        public static int GL_PIXEL_PACK_BUFFER_BINDING { get { if (!_GL_PIXEL_PACK_BUFFER_BINDINGReady) { _GL_PIXEL_PACK_BUFFER_BINDINGContent = SGetField<int>(LocalBridgeClazz, "GL_PIXEL_PACK_BUFFER_BINDING"); _GL_PIXEL_PACK_BUFFER_BINDINGReady = true; } return _GL_PIXEL_PACK_BUFFER_BINDINGContent; } }
        private static int _GL_PIXEL_PACK_BUFFER_BINDINGContent = default;
        private static bool _GL_PIXEL_PACK_BUFFER_BINDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_PIXEL_UNPACK_BUFFER"/>
        /// </summary>
        public static int GL_PIXEL_UNPACK_BUFFER { get { if (!_GL_PIXEL_UNPACK_BUFFERReady) { _GL_PIXEL_UNPACK_BUFFERContent = SGetField<int>(LocalBridgeClazz, "GL_PIXEL_UNPACK_BUFFER"); _GL_PIXEL_UNPACK_BUFFERReady = true; } return _GL_PIXEL_UNPACK_BUFFERContent; } }
        private static int _GL_PIXEL_UNPACK_BUFFERContent = default;
        private static bool _GL_PIXEL_UNPACK_BUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_PIXEL_UNPACK_BUFFER_BINDING"/>
        /// </summary>
        public static int GL_PIXEL_UNPACK_BUFFER_BINDING { get { if (!_GL_PIXEL_UNPACK_BUFFER_BINDINGReady) { _GL_PIXEL_UNPACK_BUFFER_BINDINGContent = SGetField<int>(LocalBridgeClazz, "GL_PIXEL_UNPACK_BUFFER_BINDING"); _GL_PIXEL_UNPACK_BUFFER_BINDINGReady = true; } return _GL_PIXEL_UNPACK_BUFFER_BINDINGContent; } }
        private static int _GL_PIXEL_UNPACK_BUFFER_BINDINGContent = default;
        private static bool _GL_PIXEL_UNPACK_BUFFER_BINDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_PRIMITIVE_RESTART_FIXED_INDEX"/>
        /// </summary>
        public static int GL_PRIMITIVE_RESTART_FIXED_INDEX { get { if (!_GL_PRIMITIVE_RESTART_FIXED_INDEXReady) { _GL_PRIMITIVE_RESTART_FIXED_INDEXContent = SGetField<int>(LocalBridgeClazz, "GL_PRIMITIVE_RESTART_FIXED_INDEX"); _GL_PRIMITIVE_RESTART_FIXED_INDEXReady = true; } return _GL_PRIMITIVE_RESTART_FIXED_INDEXContent; } }
        private static int _GL_PRIMITIVE_RESTART_FIXED_INDEXContent = default;
        private static bool _GL_PRIMITIVE_RESTART_FIXED_INDEXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_PROGRAM_BINARY_FORMATS"/>
        /// </summary>
        public static int GL_PROGRAM_BINARY_FORMATS { get { if (!_GL_PROGRAM_BINARY_FORMATSReady) { _GL_PROGRAM_BINARY_FORMATSContent = SGetField<int>(LocalBridgeClazz, "GL_PROGRAM_BINARY_FORMATS"); _GL_PROGRAM_BINARY_FORMATSReady = true; } return _GL_PROGRAM_BINARY_FORMATSContent; } }
        private static int _GL_PROGRAM_BINARY_FORMATSContent = default;
        private static bool _GL_PROGRAM_BINARY_FORMATSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_PROGRAM_BINARY_LENGTH"/>
        /// </summary>
        public static int GL_PROGRAM_BINARY_LENGTH { get { if (!_GL_PROGRAM_BINARY_LENGTHReady) { _GL_PROGRAM_BINARY_LENGTHContent = SGetField<int>(LocalBridgeClazz, "GL_PROGRAM_BINARY_LENGTH"); _GL_PROGRAM_BINARY_LENGTHReady = true; } return _GL_PROGRAM_BINARY_LENGTHContent; } }
        private static int _GL_PROGRAM_BINARY_LENGTHContent = default;
        private static bool _GL_PROGRAM_BINARY_LENGTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_PROGRAM_BINARY_RETRIEVABLE_HINT"/>
        /// </summary>
        public static int GL_PROGRAM_BINARY_RETRIEVABLE_HINT { get { if (!_GL_PROGRAM_BINARY_RETRIEVABLE_HINTReady) { _GL_PROGRAM_BINARY_RETRIEVABLE_HINTContent = SGetField<int>(LocalBridgeClazz, "GL_PROGRAM_BINARY_RETRIEVABLE_HINT"); _GL_PROGRAM_BINARY_RETRIEVABLE_HINTReady = true; } return _GL_PROGRAM_BINARY_RETRIEVABLE_HINTContent; } }
        private static int _GL_PROGRAM_BINARY_RETRIEVABLE_HINTContent = default;
        private static bool _GL_PROGRAM_BINARY_RETRIEVABLE_HINTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_QUERY_RESULT"/>
        /// </summary>
        public static int GL_QUERY_RESULT { get { if (!_GL_QUERY_RESULTReady) { _GL_QUERY_RESULTContent = SGetField<int>(LocalBridgeClazz, "GL_QUERY_RESULT"); _GL_QUERY_RESULTReady = true; } return _GL_QUERY_RESULTContent; } }
        private static int _GL_QUERY_RESULTContent = default;
        private static bool _GL_QUERY_RESULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_QUERY_RESULT_AVAILABLE"/>
        /// </summary>
        public static int GL_QUERY_RESULT_AVAILABLE { get { if (!_GL_QUERY_RESULT_AVAILABLEReady) { _GL_QUERY_RESULT_AVAILABLEContent = SGetField<int>(LocalBridgeClazz, "GL_QUERY_RESULT_AVAILABLE"); _GL_QUERY_RESULT_AVAILABLEReady = true; } return _GL_QUERY_RESULT_AVAILABLEContent; } }
        private static int _GL_QUERY_RESULT_AVAILABLEContent = default;
        private static bool _GL_QUERY_RESULT_AVAILABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_R11F_G11F_B10F"/>
        /// </summary>
        public static int GL_R11F_G11F_B10F { get { if (!_GL_R11F_G11F_B10FReady) { _GL_R11F_G11F_B10FContent = SGetField<int>(LocalBridgeClazz, "GL_R11F_G11F_B10F"); _GL_R11F_G11F_B10FReady = true; } return _GL_R11F_G11F_B10FContent; } }
        private static int _GL_R11F_G11F_B10FContent = default;
        private static bool _GL_R11F_G11F_B10FReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_R16F"/>
        /// </summary>
        public static int GL_R16F { get { if (!_GL_R16FReady) { _GL_R16FContent = SGetField<int>(LocalBridgeClazz, "GL_R16F"); _GL_R16FReady = true; } return _GL_R16FContent; } }
        private static int _GL_R16FContent = default;
        private static bool _GL_R16FReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_R16I"/>
        /// </summary>
        public static int GL_R16I { get { if (!_GL_R16IReady) { _GL_R16IContent = SGetField<int>(LocalBridgeClazz, "GL_R16I"); _GL_R16IReady = true; } return _GL_R16IContent; } }
        private static int _GL_R16IContent = default;
        private static bool _GL_R16IReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_R16UI"/>
        /// </summary>
        public static int GL_R16UI { get { if (!_GL_R16UIReady) { _GL_R16UIContent = SGetField<int>(LocalBridgeClazz, "GL_R16UI"); _GL_R16UIReady = true; } return _GL_R16UIContent; } }
        private static int _GL_R16UIContent = default;
        private static bool _GL_R16UIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_R32F"/>
        /// </summary>
        public static int GL_R32F { get { if (!_GL_R32FReady) { _GL_R32FContent = SGetField<int>(LocalBridgeClazz, "GL_R32F"); _GL_R32FReady = true; } return _GL_R32FContent; } }
        private static int _GL_R32FContent = default;
        private static bool _GL_R32FReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_R32I"/>
        /// </summary>
        public static int GL_R32I { get { if (!_GL_R32IReady) { _GL_R32IContent = SGetField<int>(LocalBridgeClazz, "GL_R32I"); _GL_R32IReady = true; } return _GL_R32IContent; } }
        private static int _GL_R32IContent = default;
        private static bool _GL_R32IReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_R32UI"/>
        /// </summary>
        public static int GL_R32UI { get { if (!_GL_R32UIReady) { _GL_R32UIContent = SGetField<int>(LocalBridgeClazz, "GL_R32UI"); _GL_R32UIReady = true; } return _GL_R32UIContent; } }
        private static int _GL_R32UIContent = default;
        private static bool _GL_R32UIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_R8"/>
        /// </summary>
        public static int GL_R8 { get { if (!_GL_R8Ready) { _GL_R8Content = SGetField<int>(LocalBridgeClazz, "GL_R8"); _GL_R8Ready = true; } return _GL_R8Content; } }
        private static int _GL_R8Content = default;
        private static bool _GL_R8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_R8_SNORM"/>
        /// </summary>
        public static int GL_R8_SNORM { get { if (!_GL_R8_SNORMReady) { _GL_R8_SNORMContent = SGetField<int>(LocalBridgeClazz, "GL_R8_SNORM"); _GL_R8_SNORMReady = true; } return _GL_R8_SNORMContent; } }
        private static int _GL_R8_SNORMContent = default;
        private static bool _GL_R8_SNORMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_R8I"/>
        /// </summary>
        public static int GL_R8I { get { if (!_GL_R8IReady) { _GL_R8IContent = SGetField<int>(LocalBridgeClazz, "GL_R8I"); _GL_R8IReady = true; } return _GL_R8IContent; } }
        private static int _GL_R8IContent = default;
        private static bool _GL_R8IReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_R8UI"/>
        /// </summary>
        public static int GL_R8UI { get { if (!_GL_R8UIReady) { _GL_R8UIContent = SGetField<int>(LocalBridgeClazz, "GL_R8UI"); _GL_R8UIReady = true; } return _GL_R8UIContent; } }
        private static int _GL_R8UIContent = default;
        private static bool _GL_R8UIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RASTERIZER_DISCARD"/>
        /// </summary>
        public static int GL_RASTERIZER_DISCARD { get { if (!_GL_RASTERIZER_DISCARDReady) { _GL_RASTERIZER_DISCARDContent = SGetField<int>(LocalBridgeClazz, "GL_RASTERIZER_DISCARD"); _GL_RASTERIZER_DISCARDReady = true; } return _GL_RASTERIZER_DISCARDContent; } }
        private static int _GL_RASTERIZER_DISCARDContent = default;
        private static bool _GL_RASTERIZER_DISCARDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_READ_BUFFER"/>
        /// </summary>
        public static int GL_READ_BUFFER { get { if (!_GL_READ_BUFFERReady) { _GL_READ_BUFFERContent = SGetField<int>(LocalBridgeClazz, "GL_READ_BUFFER"); _GL_READ_BUFFERReady = true; } return _GL_READ_BUFFERContent; } }
        private static int _GL_READ_BUFFERContent = default;
        private static bool _GL_READ_BUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_READ_FRAMEBUFFER"/>
        /// </summary>
        public static int GL_READ_FRAMEBUFFER { get { if (!_GL_READ_FRAMEBUFFERReady) { _GL_READ_FRAMEBUFFERContent = SGetField<int>(LocalBridgeClazz, "GL_READ_FRAMEBUFFER"); _GL_READ_FRAMEBUFFERReady = true; } return _GL_READ_FRAMEBUFFERContent; } }
        private static int _GL_READ_FRAMEBUFFERContent = default;
        private static bool _GL_READ_FRAMEBUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_READ_FRAMEBUFFER_BINDING"/>
        /// </summary>
        public static int GL_READ_FRAMEBUFFER_BINDING { get { if (!_GL_READ_FRAMEBUFFER_BINDINGReady) { _GL_READ_FRAMEBUFFER_BINDINGContent = SGetField<int>(LocalBridgeClazz, "GL_READ_FRAMEBUFFER_BINDING"); _GL_READ_FRAMEBUFFER_BINDINGReady = true; } return _GL_READ_FRAMEBUFFER_BINDINGContent; } }
        private static int _GL_READ_FRAMEBUFFER_BINDINGContent = default;
        private static bool _GL_READ_FRAMEBUFFER_BINDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RED"/>
        /// </summary>
        public static int GL_RED { get { if (!_GL_REDReady) { _GL_REDContent = SGetField<int>(LocalBridgeClazz, "GL_RED"); _GL_REDReady = true; } return _GL_REDContent; } }
        private static int _GL_REDContent = default;
        private static bool _GL_REDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RED_INTEGER"/>
        /// </summary>
        public static int GL_RED_INTEGER { get { if (!_GL_RED_INTEGERReady) { _GL_RED_INTEGERContent = SGetField<int>(LocalBridgeClazz, "GL_RED_INTEGER"); _GL_RED_INTEGERReady = true; } return _GL_RED_INTEGERContent; } }
        private static int _GL_RED_INTEGERContent = default;
        private static bool _GL_RED_INTEGERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RENDERBUFFER_SAMPLES"/>
        /// </summary>
        public static int GL_RENDERBUFFER_SAMPLES { get { if (!_GL_RENDERBUFFER_SAMPLESReady) { _GL_RENDERBUFFER_SAMPLESContent = SGetField<int>(LocalBridgeClazz, "GL_RENDERBUFFER_SAMPLES"); _GL_RENDERBUFFER_SAMPLESReady = true; } return _GL_RENDERBUFFER_SAMPLESContent; } }
        private static int _GL_RENDERBUFFER_SAMPLESContent = default;
        private static bool _GL_RENDERBUFFER_SAMPLESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RG"/>
        /// </summary>
        public static int GL_RG { get { if (!_GL_RGReady) { _GL_RGContent = SGetField<int>(LocalBridgeClazz, "GL_RG"); _GL_RGReady = true; } return _GL_RGContent; } }
        private static int _GL_RGContent = default;
        private static bool _GL_RGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RG_INTEGER"/>
        /// </summary>
        public static int GL_RG_INTEGER { get { if (!_GL_RG_INTEGERReady) { _GL_RG_INTEGERContent = SGetField<int>(LocalBridgeClazz, "GL_RG_INTEGER"); _GL_RG_INTEGERReady = true; } return _GL_RG_INTEGERContent; } }
        private static int _GL_RG_INTEGERContent = default;
        private static bool _GL_RG_INTEGERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RG16F"/>
        /// </summary>
        public static int GL_RG16F { get { if (!_GL_RG16FReady) { _GL_RG16FContent = SGetField<int>(LocalBridgeClazz, "GL_RG16F"); _GL_RG16FReady = true; } return _GL_RG16FContent; } }
        private static int _GL_RG16FContent = default;
        private static bool _GL_RG16FReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RG16I"/>
        /// </summary>
        public static int GL_RG16I { get { if (!_GL_RG16IReady) { _GL_RG16IContent = SGetField<int>(LocalBridgeClazz, "GL_RG16I"); _GL_RG16IReady = true; } return _GL_RG16IContent; } }
        private static int _GL_RG16IContent = default;
        private static bool _GL_RG16IReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RG16UI"/>
        /// </summary>
        public static int GL_RG16UI { get { if (!_GL_RG16UIReady) { _GL_RG16UIContent = SGetField<int>(LocalBridgeClazz, "GL_RG16UI"); _GL_RG16UIReady = true; } return _GL_RG16UIContent; } }
        private static int _GL_RG16UIContent = default;
        private static bool _GL_RG16UIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RG32F"/>
        /// </summary>
        public static int GL_RG32F { get { if (!_GL_RG32FReady) { _GL_RG32FContent = SGetField<int>(LocalBridgeClazz, "GL_RG32F"); _GL_RG32FReady = true; } return _GL_RG32FContent; } }
        private static int _GL_RG32FContent = default;
        private static bool _GL_RG32FReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RG32I"/>
        /// </summary>
        public static int GL_RG32I { get { if (!_GL_RG32IReady) { _GL_RG32IContent = SGetField<int>(LocalBridgeClazz, "GL_RG32I"); _GL_RG32IReady = true; } return _GL_RG32IContent; } }
        private static int _GL_RG32IContent = default;
        private static bool _GL_RG32IReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RG32UI"/>
        /// </summary>
        public static int GL_RG32UI { get { if (!_GL_RG32UIReady) { _GL_RG32UIContent = SGetField<int>(LocalBridgeClazz, "GL_RG32UI"); _GL_RG32UIReady = true; } return _GL_RG32UIContent; } }
        private static int _GL_RG32UIContent = default;
        private static bool _GL_RG32UIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RG8"/>
        /// </summary>
        public static int GL_RG8 { get { if (!_GL_RG8Ready) { _GL_RG8Content = SGetField<int>(LocalBridgeClazz, "GL_RG8"); _GL_RG8Ready = true; } return _GL_RG8Content; } }
        private static int _GL_RG8Content = default;
        private static bool _GL_RG8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RG8_SNORM"/>
        /// </summary>
        public static int GL_RG8_SNORM { get { if (!_GL_RG8_SNORMReady) { _GL_RG8_SNORMContent = SGetField<int>(LocalBridgeClazz, "GL_RG8_SNORM"); _GL_RG8_SNORMReady = true; } return _GL_RG8_SNORMContent; } }
        private static int _GL_RG8_SNORMContent = default;
        private static bool _GL_RG8_SNORMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RG8I"/>
        /// </summary>
        public static int GL_RG8I { get { if (!_GL_RG8IReady) { _GL_RG8IContent = SGetField<int>(LocalBridgeClazz, "GL_RG8I"); _GL_RG8IReady = true; } return _GL_RG8IContent; } }
        private static int _GL_RG8IContent = default;
        private static bool _GL_RG8IReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RG8UI"/>
        /// </summary>
        public static int GL_RG8UI { get { if (!_GL_RG8UIReady) { _GL_RG8UIContent = SGetField<int>(LocalBridgeClazz, "GL_RG8UI"); _GL_RG8UIReady = true; } return _GL_RG8UIContent; } }
        private static int _GL_RG8UIContent = default;
        private static bool _GL_RG8UIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RGB_INTEGER"/>
        /// </summary>
        public static int GL_RGB_INTEGER { get { if (!_GL_RGB_INTEGERReady) { _GL_RGB_INTEGERContent = SGetField<int>(LocalBridgeClazz, "GL_RGB_INTEGER"); _GL_RGB_INTEGERReady = true; } return _GL_RGB_INTEGERContent; } }
        private static int _GL_RGB_INTEGERContent = default;
        private static bool _GL_RGB_INTEGERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RGB10_A2"/>
        /// </summary>
        public static int GL_RGB10_A2 { get { if (!_GL_RGB10_A2Ready) { _GL_RGB10_A2Content = SGetField<int>(LocalBridgeClazz, "GL_RGB10_A2"); _GL_RGB10_A2Ready = true; } return _GL_RGB10_A2Content; } }
        private static int _GL_RGB10_A2Content = default;
        private static bool _GL_RGB10_A2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RGB10_A2UI"/>
        /// </summary>
        public static int GL_RGB10_A2UI { get { if (!_GL_RGB10_A2UIReady) { _GL_RGB10_A2UIContent = SGetField<int>(LocalBridgeClazz, "GL_RGB10_A2UI"); _GL_RGB10_A2UIReady = true; } return _GL_RGB10_A2UIContent; } }
        private static int _GL_RGB10_A2UIContent = default;
        private static bool _GL_RGB10_A2UIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RGB16F"/>
        /// </summary>
        public static int GL_RGB16F { get { if (!_GL_RGB16FReady) { _GL_RGB16FContent = SGetField<int>(LocalBridgeClazz, "GL_RGB16F"); _GL_RGB16FReady = true; } return _GL_RGB16FContent; } }
        private static int _GL_RGB16FContent = default;
        private static bool _GL_RGB16FReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RGB16I"/>
        /// </summary>
        public static int GL_RGB16I { get { if (!_GL_RGB16IReady) { _GL_RGB16IContent = SGetField<int>(LocalBridgeClazz, "GL_RGB16I"); _GL_RGB16IReady = true; } return _GL_RGB16IContent; } }
        private static int _GL_RGB16IContent = default;
        private static bool _GL_RGB16IReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RGB16UI"/>
        /// </summary>
        public static int GL_RGB16UI { get { if (!_GL_RGB16UIReady) { _GL_RGB16UIContent = SGetField<int>(LocalBridgeClazz, "GL_RGB16UI"); _GL_RGB16UIReady = true; } return _GL_RGB16UIContent; } }
        private static int _GL_RGB16UIContent = default;
        private static bool _GL_RGB16UIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RGB32F"/>
        /// </summary>
        public static int GL_RGB32F { get { if (!_GL_RGB32FReady) { _GL_RGB32FContent = SGetField<int>(LocalBridgeClazz, "GL_RGB32F"); _GL_RGB32FReady = true; } return _GL_RGB32FContent; } }
        private static int _GL_RGB32FContent = default;
        private static bool _GL_RGB32FReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RGB32I"/>
        /// </summary>
        public static int GL_RGB32I { get { if (!_GL_RGB32IReady) { _GL_RGB32IContent = SGetField<int>(LocalBridgeClazz, "GL_RGB32I"); _GL_RGB32IReady = true; } return _GL_RGB32IContent; } }
        private static int _GL_RGB32IContent = default;
        private static bool _GL_RGB32IReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RGB32UI"/>
        /// </summary>
        public static int GL_RGB32UI { get { if (!_GL_RGB32UIReady) { _GL_RGB32UIContent = SGetField<int>(LocalBridgeClazz, "GL_RGB32UI"); _GL_RGB32UIReady = true; } return _GL_RGB32UIContent; } }
        private static int _GL_RGB32UIContent = default;
        private static bool _GL_RGB32UIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RGB8"/>
        /// </summary>
        public static int GL_RGB8 { get { if (!_GL_RGB8Ready) { _GL_RGB8Content = SGetField<int>(LocalBridgeClazz, "GL_RGB8"); _GL_RGB8Ready = true; } return _GL_RGB8Content; } }
        private static int _GL_RGB8Content = default;
        private static bool _GL_RGB8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RGB8_SNORM"/>
        /// </summary>
        public static int GL_RGB8_SNORM { get { if (!_GL_RGB8_SNORMReady) { _GL_RGB8_SNORMContent = SGetField<int>(LocalBridgeClazz, "GL_RGB8_SNORM"); _GL_RGB8_SNORMReady = true; } return _GL_RGB8_SNORMContent; } }
        private static int _GL_RGB8_SNORMContent = default;
        private static bool _GL_RGB8_SNORMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RGB8I"/>
        /// </summary>
        public static int GL_RGB8I { get { if (!_GL_RGB8IReady) { _GL_RGB8IContent = SGetField<int>(LocalBridgeClazz, "GL_RGB8I"); _GL_RGB8IReady = true; } return _GL_RGB8IContent; } }
        private static int _GL_RGB8IContent = default;
        private static bool _GL_RGB8IReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RGB8UI"/>
        /// </summary>
        public static int GL_RGB8UI { get { if (!_GL_RGB8UIReady) { _GL_RGB8UIContent = SGetField<int>(LocalBridgeClazz, "GL_RGB8UI"); _GL_RGB8UIReady = true; } return _GL_RGB8UIContent; } }
        private static int _GL_RGB8UIContent = default;
        private static bool _GL_RGB8UIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RGB9_E5"/>
        /// </summary>
        public static int GL_RGB9_E5 { get { if (!_GL_RGB9_E5Ready) { _GL_RGB9_E5Content = SGetField<int>(LocalBridgeClazz, "GL_RGB9_E5"); _GL_RGB9_E5Ready = true; } return _GL_RGB9_E5Content; } }
        private static int _GL_RGB9_E5Content = default;
        private static bool _GL_RGB9_E5Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RGBA_INTEGER"/>
        /// </summary>
        public static int GL_RGBA_INTEGER { get { if (!_GL_RGBA_INTEGERReady) { _GL_RGBA_INTEGERContent = SGetField<int>(LocalBridgeClazz, "GL_RGBA_INTEGER"); _GL_RGBA_INTEGERReady = true; } return _GL_RGBA_INTEGERContent; } }
        private static int _GL_RGBA_INTEGERContent = default;
        private static bool _GL_RGBA_INTEGERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RGBA16F"/>
        /// </summary>
        public static int GL_RGBA16F { get { if (!_GL_RGBA16FReady) { _GL_RGBA16FContent = SGetField<int>(LocalBridgeClazz, "GL_RGBA16F"); _GL_RGBA16FReady = true; } return _GL_RGBA16FContent; } }
        private static int _GL_RGBA16FContent = default;
        private static bool _GL_RGBA16FReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RGBA16I"/>
        /// </summary>
        public static int GL_RGBA16I { get { if (!_GL_RGBA16IReady) { _GL_RGBA16IContent = SGetField<int>(LocalBridgeClazz, "GL_RGBA16I"); _GL_RGBA16IReady = true; } return _GL_RGBA16IContent; } }
        private static int _GL_RGBA16IContent = default;
        private static bool _GL_RGBA16IReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RGBA16UI"/>
        /// </summary>
        public static int GL_RGBA16UI { get { if (!_GL_RGBA16UIReady) { _GL_RGBA16UIContent = SGetField<int>(LocalBridgeClazz, "GL_RGBA16UI"); _GL_RGBA16UIReady = true; } return _GL_RGBA16UIContent; } }
        private static int _GL_RGBA16UIContent = default;
        private static bool _GL_RGBA16UIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RGBA32F"/>
        /// </summary>
        public static int GL_RGBA32F { get { if (!_GL_RGBA32FReady) { _GL_RGBA32FContent = SGetField<int>(LocalBridgeClazz, "GL_RGBA32F"); _GL_RGBA32FReady = true; } return _GL_RGBA32FContent; } }
        private static int _GL_RGBA32FContent = default;
        private static bool _GL_RGBA32FReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RGBA32I"/>
        /// </summary>
        public static int GL_RGBA32I { get { if (!_GL_RGBA32IReady) { _GL_RGBA32IContent = SGetField<int>(LocalBridgeClazz, "GL_RGBA32I"); _GL_RGBA32IReady = true; } return _GL_RGBA32IContent; } }
        private static int _GL_RGBA32IContent = default;
        private static bool _GL_RGBA32IReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RGBA32UI"/>
        /// </summary>
        public static int GL_RGBA32UI { get { if (!_GL_RGBA32UIReady) { _GL_RGBA32UIContent = SGetField<int>(LocalBridgeClazz, "GL_RGBA32UI"); _GL_RGBA32UIReady = true; } return _GL_RGBA32UIContent; } }
        private static int _GL_RGBA32UIContent = default;
        private static bool _GL_RGBA32UIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RGBA8"/>
        /// </summary>
        public static int GL_RGBA8 { get { if (!_GL_RGBA8Ready) { _GL_RGBA8Content = SGetField<int>(LocalBridgeClazz, "GL_RGBA8"); _GL_RGBA8Ready = true; } return _GL_RGBA8Content; } }
        private static int _GL_RGBA8Content = default;
        private static bool _GL_RGBA8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RGBA8_SNORM"/>
        /// </summary>
        public static int GL_RGBA8_SNORM { get { if (!_GL_RGBA8_SNORMReady) { _GL_RGBA8_SNORMContent = SGetField<int>(LocalBridgeClazz, "GL_RGBA8_SNORM"); _GL_RGBA8_SNORMReady = true; } return _GL_RGBA8_SNORMContent; } }
        private static int _GL_RGBA8_SNORMContent = default;
        private static bool _GL_RGBA8_SNORMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RGBA8I"/>
        /// </summary>
        public static int GL_RGBA8I { get { if (!_GL_RGBA8IReady) { _GL_RGBA8IContent = SGetField<int>(LocalBridgeClazz, "GL_RGBA8I"); _GL_RGBA8IReady = true; } return _GL_RGBA8IContent; } }
        private static int _GL_RGBA8IContent = default;
        private static bool _GL_RGBA8IReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_RGBA8UI"/>
        /// </summary>
        public static int GL_RGBA8UI { get { if (!_GL_RGBA8UIReady) { _GL_RGBA8UIContent = SGetField<int>(LocalBridgeClazz, "GL_RGBA8UI"); _GL_RGBA8UIReady = true; } return _GL_RGBA8UIContent; } }
        private static int _GL_RGBA8UIContent = default;
        private static bool _GL_RGBA8UIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_SAMPLER_2D_ARRAY"/>
        /// </summary>
        public static int GL_SAMPLER_2D_ARRAY { get { if (!_GL_SAMPLER_2D_ARRAYReady) { _GL_SAMPLER_2D_ARRAYContent = SGetField<int>(LocalBridgeClazz, "GL_SAMPLER_2D_ARRAY"); _GL_SAMPLER_2D_ARRAYReady = true; } return _GL_SAMPLER_2D_ARRAYContent; } }
        private static int _GL_SAMPLER_2D_ARRAYContent = default;
        private static bool _GL_SAMPLER_2D_ARRAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_SAMPLER_2D_ARRAY_SHADOW"/>
        /// </summary>
        public static int GL_SAMPLER_2D_ARRAY_SHADOW { get { if (!_GL_SAMPLER_2D_ARRAY_SHADOWReady) { _GL_SAMPLER_2D_ARRAY_SHADOWContent = SGetField<int>(LocalBridgeClazz, "GL_SAMPLER_2D_ARRAY_SHADOW"); _GL_SAMPLER_2D_ARRAY_SHADOWReady = true; } return _GL_SAMPLER_2D_ARRAY_SHADOWContent; } }
        private static int _GL_SAMPLER_2D_ARRAY_SHADOWContent = default;
        private static bool _GL_SAMPLER_2D_ARRAY_SHADOWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_SAMPLER_2D_SHADOW"/>
        /// </summary>
        public static int GL_SAMPLER_2D_SHADOW { get { if (!_GL_SAMPLER_2D_SHADOWReady) { _GL_SAMPLER_2D_SHADOWContent = SGetField<int>(LocalBridgeClazz, "GL_SAMPLER_2D_SHADOW"); _GL_SAMPLER_2D_SHADOWReady = true; } return _GL_SAMPLER_2D_SHADOWContent; } }
        private static int _GL_SAMPLER_2D_SHADOWContent = default;
        private static bool _GL_SAMPLER_2D_SHADOWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_SAMPLER_3D"/>
        /// </summary>
        public static int GL_SAMPLER_3D { get { if (!_GL_SAMPLER_3DReady) { _GL_SAMPLER_3DContent = SGetField<int>(LocalBridgeClazz, "GL_SAMPLER_3D"); _GL_SAMPLER_3DReady = true; } return _GL_SAMPLER_3DContent; } }
        private static int _GL_SAMPLER_3DContent = default;
        private static bool _GL_SAMPLER_3DReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_SAMPLER_BINDING"/>
        /// </summary>
        public static int GL_SAMPLER_BINDING { get { if (!_GL_SAMPLER_BINDINGReady) { _GL_SAMPLER_BINDINGContent = SGetField<int>(LocalBridgeClazz, "GL_SAMPLER_BINDING"); _GL_SAMPLER_BINDINGReady = true; } return _GL_SAMPLER_BINDINGContent; } }
        private static int _GL_SAMPLER_BINDINGContent = default;
        private static bool _GL_SAMPLER_BINDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_SAMPLER_CUBE_SHADOW"/>
        /// </summary>
        public static int GL_SAMPLER_CUBE_SHADOW { get { if (!_GL_SAMPLER_CUBE_SHADOWReady) { _GL_SAMPLER_CUBE_SHADOWContent = SGetField<int>(LocalBridgeClazz, "GL_SAMPLER_CUBE_SHADOW"); _GL_SAMPLER_CUBE_SHADOWReady = true; } return _GL_SAMPLER_CUBE_SHADOWContent; } }
        private static int _GL_SAMPLER_CUBE_SHADOWContent = default;
        private static bool _GL_SAMPLER_CUBE_SHADOWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_SEPARATE_ATTRIBS"/>
        /// </summary>
        public static int GL_SEPARATE_ATTRIBS { get { if (!_GL_SEPARATE_ATTRIBSReady) { _GL_SEPARATE_ATTRIBSContent = SGetField<int>(LocalBridgeClazz, "GL_SEPARATE_ATTRIBS"); _GL_SEPARATE_ATTRIBSReady = true; } return _GL_SEPARATE_ATTRIBSContent; } }
        private static int _GL_SEPARATE_ATTRIBSContent = default;
        private static bool _GL_SEPARATE_ATTRIBSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_SIGNALED"/>
        /// </summary>
        public static int GL_SIGNALED { get { if (!_GL_SIGNALEDReady) { _GL_SIGNALEDContent = SGetField<int>(LocalBridgeClazz, "GL_SIGNALED"); _GL_SIGNALEDReady = true; } return _GL_SIGNALEDContent; } }
        private static int _GL_SIGNALEDContent = default;
        private static bool _GL_SIGNALEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_SIGNED_NORMALIZED"/>
        /// </summary>
        public static int GL_SIGNED_NORMALIZED { get { if (!_GL_SIGNED_NORMALIZEDReady) { _GL_SIGNED_NORMALIZEDContent = SGetField<int>(LocalBridgeClazz, "GL_SIGNED_NORMALIZED"); _GL_SIGNED_NORMALIZEDReady = true; } return _GL_SIGNED_NORMALIZEDContent; } }
        private static int _GL_SIGNED_NORMALIZEDContent = default;
        private static bool _GL_SIGNED_NORMALIZEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_SRGB"/>
        /// </summary>
        public static int GL_SRGB { get { if (!_GL_SRGBReady) { _GL_SRGBContent = SGetField<int>(LocalBridgeClazz, "GL_SRGB"); _GL_SRGBReady = true; } return _GL_SRGBContent; } }
        private static int _GL_SRGBContent = default;
        private static bool _GL_SRGBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_SRGB8"/>
        /// </summary>
        public static int GL_SRGB8 { get { if (!_GL_SRGB8Ready) { _GL_SRGB8Content = SGetField<int>(LocalBridgeClazz, "GL_SRGB8"); _GL_SRGB8Ready = true; } return _GL_SRGB8Content; } }
        private static int _GL_SRGB8Content = default;
        private static bool _GL_SRGB8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_SRGB8_ALPHA8"/>
        /// </summary>
        public static int GL_SRGB8_ALPHA8 { get { if (!_GL_SRGB8_ALPHA8Ready) { _GL_SRGB8_ALPHA8Content = SGetField<int>(LocalBridgeClazz, "GL_SRGB8_ALPHA8"); _GL_SRGB8_ALPHA8Ready = true; } return _GL_SRGB8_ALPHA8Content; } }
        private static int _GL_SRGB8_ALPHA8Content = default;
        private static bool _GL_SRGB8_ALPHA8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_STATIC_COPY"/>
        /// </summary>
        public static int GL_STATIC_COPY { get { if (!_GL_STATIC_COPYReady) { _GL_STATIC_COPYContent = SGetField<int>(LocalBridgeClazz, "GL_STATIC_COPY"); _GL_STATIC_COPYReady = true; } return _GL_STATIC_COPYContent; } }
        private static int _GL_STATIC_COPYContent = default;
        private static bool _GL_STATIC_COPYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_STATIC_READ"/>
        /// </summary>
        public static int GL_STATIC_READ { get { if (!_GL_STATIC_READReady) { _GL_STATIC_READContent = SGetField<int>(LocalBridgeClazz, "GL_STATIC_READ"); _GL_STATIC_READReady = true; } return _GL_STATIC_READContent; } }
        private static int _GL_STATIC_READContent = default;
        private static bool _GL_STATIC_READReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_STENCIL"/>
        /// </summary>
        public static int GL_STENCIL { get { if (!_GL_STENCILReady) { _GL_STENCILContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL"); _GL_STENCILReady = true; } return _GL_STENCILContent; } }
        private static int _GL_STENCILContent = default;
        private static bool _GL_STENCILReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_STREAM_COPY"/>
        /// </summary>
        public static int GL_STREAM_COPY { get { if (!_GL_STREAM_COPYReady) { _GL_STREAM_COPYContent = SGetField<int>(LocalBridgeClazz, "GL_STREAM_COPY"); _GL_STREAM_COPYReady = true; } return _GL_STREAM_COPYContent; } }
        private static int _GL_STREAM_COPYContent = default;
        private static bool _GL_STREAM_COPYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_STREAM_READ"/>
        /// </summary>
        public static int GL_STREAM_READ { get { if (!_GL_STREAM_READReady) { _GL_STREAM_READContent = SGetField<int>(LocalBridgeClazz, "GL_STREAM_READ"); _GL_STREAM_READReady = true; } return _GL_STREAM_READContent; } }
        private static int _GL_STREAM_READContent = default;
        private static bool _GL_STREAM_READReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_SYNC_CONDITION"/>
        /// </summary>
        public static int GL_SYNC_CONDITION { get { if (!_GL_SYNC_CONDITIONReady) { _GL_SYNC_CONDITIONContent = SGetField<int>(LocalBridgeClazz, "GL_SYNC_CONDITION"); _GL_SYNC_CONDITIONReady = true; } return _GL_SYNC_CONDITIONContent; } }
        private static int _GL_SYNC_CONDITIONContent = default;
        private static bool _GL_SYNC_CONDITIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_SYNC_FENCE"/>
        /// </summary>
        public static int GL_SYNC_FENCE { get { if (!_GL_SYNC_FENCEReady) { _GL_SYNC_FENCEContent = SGetField<int>(LocalBridgeClazz, "GL_SYNC_FENCE"); _GL_SYNC_FENCEReady = true; } return _GL_SYNC_FENCEContent; } }
        private static int _GL_SYNC_FENCEContent = default;
        private static bool _GL_SYNC_FENCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_SYNC_FLAGS"/>
        /// </summary>
        public static int GL_SYNC_FLAGS { get { if (!_GL_SYNC_FLAGSReady) { _GL_SYNC_FLAGSContent = SGetField<int>(LocalBridgeClazz, "GL_SYNC_FLAGS"); _GL_SYNC_FLAGSReady = true; } return _GL_SYNC_FLAGSContent; } }
        private static int _GL_SYNC_FLAGSContent = default;
        private static bool _GL_SYNC_FLAGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_SYNC_FLUSH_COMMANDS_BIT"/>
        /// </summary>
        public static int GL_SYNC_FLUSH_COMMANDS_BIT { get { if (!_GL_SYNC_FLUSH_COMMANDS_BITReady) { _GL_SYNC_FLUSH_COMMANDS_BITContent = SGetField<int>(LocalBridgeClazz, "GL_SYNC_FLUSH_COMMANDS_BIT"); _GL_SYNC_FLUSH_COMMANDS_BITReady = true; } return _GL_SYNC_FLUSH_COMMANDS_BITContent; } }
        private static int _GL_SYNC_FLUSH_COMMANDS_BITContent = default;
        private static bool _GL_SYNC_FLUSH_COMMANDS_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_SYNC_GPU_COMMANDS_COMPLETE"/>
        /// </summary>
        public static int GL_SYNC_GPU_COMMANDS_COMPLETE { get { if (!_GL_SYNC_GPU_COMMANDS_COMPLETEReady) { _GL_SYNC_GPU_COMMANDS_COMPLETEContent = SGetField<int>(LocalBridgeClazz, "GL_SYNC_GPU_COMMANDS_COMPLETE"); _GL_SYNC_GPU_COMMANDS_COMPLETEReady = true; } return _GL_SYNC_GPU_COMMANDS_COMPLETEContent; } }
        private static int _GL_SYNC_GPU_COMMANDS_COMPLETEContent = default;
        private static bool _GL_SYNC_GPU_COMMANDS_COMPLETEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_SYNC_STATUS"/>
        /// </summary>
        public static int GL_SYNC_STATUS { get { if (!_GL_SYNC_STATUSReady) { _GL_SYNC_STATUSContent = SGetField<int>(LocalBridgeClazz, "GL_SYNC_STATUS"); _GL_SYNC_STATUSReady = true; } return _GL_SYNC_STATUSContent; } }
        private static int _GL_SYNC_STATUSContent = default;
        private static bool _GL_SYNC_STATUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_TEXTURE_2D_ARRAY"/>
        /// </summary>
        public static int GL_TEXTURE_2D_ARRAY { get { if (!_GL_TEXTURE_2D_ARRAYReady) { _GL_TEXTURE_2D_ARRAYContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_2D_ARRAY"); _GL_TEXTURE_2D_ARRAYReady = true; } return _GL_TEXTURE_2D_ARRAYContent; } }
        private static int _GL_TEXTURE_2D_ARRAYContent = default;
        private static bool _GL_TEXTURE_2D_ARRAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_TEXTURE_3D"/>
        /// </summary>
        public static int GL_TEXTURE_3D { get { if (!_GL_TEXTURE_3DReady) { _GL_TEXTURE_3DContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_3D"); _GL_TEXTURE_3DReady = true; } return _GL_TEXTURE_3DContent; } }
        private static int _GL_TEXTURE_3DContent = default;
        private static bool _GL_TEXTURE_3DReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_TEXTURE_BASE_LEVEL"/>
        /// </summary>
        public static int GL_TEXTURE_BASE_LEVEL { get { if (!_GL_TEXTURE_BASE_LEVELReady) { _GL_TEXTURE_BASE_LEVELContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_BASE_LEVEL"); _GL_TEXTURE_BASE_LEVELReady = true; } return _GL_TEXTURE_BASE_LEVELContent; } }
        private static int _GL_TEXTURE_BASE_LEVELContent = default;
        private static bool _GL_TEXTURE_BASE_LEVELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_TEXTURE_BINDING_2D_ARRAY"/>
        /// </summary>
        public static int GL_TEXTURE_BINDING_2D_ARRAY { get { if (!_GL_TEXTURE_BINDING_2D_ARRAYReady) { _GL_TEXTURE_BINDING_2D_ARRAYContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_BINDING_2D_ARRAY"); _GL_TEXTURE_BINDING_2D_ARRAYReady = true; } return _GL_TEXTURE_BINDING_2D_ARRAYContent; } }
        private static int _GL_TEXTURE_BINDING_2D_ARRAYContent = default;
        private static bool _GL_TEXTURE_BINDING_2D_ARRAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_TEXTURE_BINDING_3D"/>
        /// </summary>
        public static int GL_TEXTURE_BINDING_3D { get { if (!_GL_TEXTURE_BINDING_3DReady) { _GL_TEXTURE_BINDING_3DContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_BINDING_3D"); _GL_TEXTURE_BINDING_3DReady = true; } return _GL_TEXTURE_BINDING_3DContent; } }
        private static int _GL_TEXTURE_BINDING_3DContent = default;
        private static bool _GL_TEXTURE_BINDING_3DReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_TEXTURE_COMPARE_FUNC"/>
        /// </summary>
        public static int GL_TEXTURE_COMPARE_FUNC { get { if (!_GL_TEXTURE_COMPARE_FUNCReady) { _GL_TEXTURE_COMPARE_FUNCContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_COMPARE_FUNC"); _GL_TEXTURE_COMPARE_FUNCReady = true; } return _GL_TEXTURE_COMPARE_FUNCContent; } }
        private static int _GL_TEXTURE_COMPARE_FUNCContent = default;
        private static bool _GL_TEXTURE_COMPARE_FUNCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_TEXTURE_COMPARE_MODE"/>
        /// </summary>
        public static int GL_TEXTURE_COMPARE_MODE { get { if (!_GL_TEXTURE_COMPARE_MODEReady) { _GL_TEXTURE_COMPARE_MODEContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_COMPARE_MODE"); _GL_TEXTURE_COMPARE_MODEReady = true; } return _GL_TEXTURE_COMPARE_MODEContent; } }
        private static int _GL_TEXTURE_COMPARE_MODEContent = default;
        private static bool _GL_TEXTURE_COMPARE_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_TEXTURE_IMMUTABLE_FORMAT"/>
        /// </summary>
        public static int GL_TEXTURE_IMMUTABLE_FORMAT { get { if (!_GL_TEXTURE_IMMUTABLE_FORMATReady) { _GL_TEXTURE_IMMUTABLE_FORMATContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_IMMUTABLE_FORMAT"); _GL_TEXTURE_IMMUTABLE_FORMATReady = true; } return _GL_TEXTURE_IMMUTABLE_FORMATContent; } }
        private static int _GL_TEXTURE_IMMUTABLE_FORMATContent = default;
        private static bool _GL_TEXTURE_IMMUTABLE_FORMATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_TEXTURE_IMMUTABLE_LEVELS"/>
        /// </summary>
        public static int GL_TEXTURE_IMMUTABLE_LEVELS { get { if (!_GL_TEXTURE_IMMUTABLE_LEVELSReady) { _GL_TEXTURE_IMMUTABLE_LEVELSContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_IMMUTABLE_LEVELS"); _GL_TEXTURE_IMMUTABLE_LEVELSReady = true; } return _GL_TEXTURE_IMMUTABLE_LEVELSContent; } }
        private static int _GL_TEXTURE_IMMUTABLE_LEVELSContent = default;
        private static bool _GL_TEXTURE_IMMUTABLE_LEVELSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_TEXTURE_MAX_LEVEL"/>
        /// </summary>
        public static int GL_TEXTURE_MAX_LEVEL { get { if (!_GL_TEXTURE_MAX_LEVELReady) { _GL_TEXTURE_MAX_LEVELContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_MAX_LEVEL"); _GL_TEXTURE_MAX_LEVELReady = true; } return _GL_TEXTURE_MAX_LEVELContent; } }
        private static int _GL_TEXTURE_MAX_LEVELContent = default;
        private static bool _GL_TEXTURE_MAX_LEVELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_TEXTURE_MAX_LOD"/>
        /// </summary>
        public static int GL_TEXTURE_MAX_LOD { get { if (!_GL_TEXTURE_MAX_LODReady) { _GL_TEXTURE_MAX_LODContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_MAX_LOD"); _GL_TEXTURE_MAX_LODReady = true; } return _GL_TEXTURE_MAX_LODContent; } }
        private static int _GL_TEXTURE_MAX_LODContent = default;
        private static bool _GL_TEXTURE_MAX_LODReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_TEXTURE_MIN_LOD"/>
        /// </summary>
        public static int GL_TEXTURE_MIN_LOD { get { if (!_GL_TEXTURE_MIN_LODReady) { _GL_TEXTURE_MIN_LODContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_MIN_LOD"); _GL_TEXTURE_MIN_LODReady = true; } return _GL_TEXTURE_MIN_LODContent; } }
        private static int _GL_TEXTURE_MIN_LODContent = default;
        private static bool _GL_TEXTURE_MIN_LODReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_TEXTURE_SWIZZLE_A"/>
        /// </summary>
        public static int GL_TEXTURE_SWIZZLE_A { get { if (!_GL_TEXTURE_SWIZZLE_AReady) { _GL_TEXTURE_SWIZZLE_AContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_SWIZZLE_A"); _GL_TEXTURE_SWIZZLE_AReady = true; } return _GL_TEXTURE_SWIZZLE_AContent; } }
        private static int _GL_TEXTURE_SWIZZLE_AContent = default;
        private static bool _GL_TEXTURE_SWIZZLE_AReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_TEXTURE_SWIZZLE_B"/>
        /// </summary>
        public static int GL_TEXTURE_SWIZZLE_B { get { if (!_GL_TEXTURE_SWIZZLE_BReady) { _GL_TEXTURE_SWIZZLE_BContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_SWIZZLE_B"); _GL_TEXTURE_SWIZZLE_BReady = true; } return _GL_TEXTURE_SWIZZLE_BContent; } }
        private static int _GL_TEXTURE_SWIZZLE_BContent = default;
        private static bool _GL_TEXTURE_SWIZZLE_BReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_TEXTURE_SWIZZLE_G"/>
        /// </summary>
        public static int GL_TEXTURE_SWIZZLE_G { get { if (!_GL_TEXTURE_SWIZZLE_GReady) { _GL_TEXTURE_SWIZZLE_GContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_SWIZZLE_G"); _GL_TEXTURE_SWIZZLE_GReady = true; } return _GL_TEXTURE_SWIZZLE_GContent; } }
        private static int _GL_TEXTURE_SWIZZLE_GContent = default;
        private static bool _GL_TEXTURE_SWIZZLE_GReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_TEXTURE_SWIZZLE_R"/>
        /// </summary>
        public static int GL_TEXTURE_SWIZZLE_R { get { if (!_GL_TEXTURE_SWIZZLE_RReady) { _GL_TEXTURE_SWIZZLE_RContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_SWIZZLE_R"); _GL_TEXTURE_SWIZZLE_RReady = true; } return _GL_TEXTURE_SWIZZLE_RContent; } }
        private static int _GL_TEXTURE_SWIZZLE_RContent = default;
        private static bool _GL_TEXTURE_SWIZZLE_RReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_TEXTURE_WRAP_R"/>
        /// </summary>
        public static int GL_TEXTURE_WRAP_R { get { if (!_GL_TEXTURE_WRAP_RReady) { _GL_TEXTURE_WRAP_RContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_WRAP_R"); _GL_TEXTURE_WRAP_RReady = true; } return _GL_TEXTURE_WRAP_RContent; } }
        private static int _GL_TEXTURE_WRAP_RContent = default;
        private static bool _GL_TEXTURE_WRAP_RReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_TIMEOUT_EXPIRED"/>
        /// </summary>
        public static int GL_TIMEOUT_EXPIRED { get { if (!_GL_TIMEOUT_EXPIREDReady) { _GL_TIMEOUT_EXPIREDContent = SGetField<int>(LocalBridgeClazz, "GL_TIMEOUT_EXPIRED"); _GL_TIMEOUT_EXPIREDReady = true; } return _GL_TIMEOUT_EXPIREDContent; } }
        private static int _GL_TIMEOUT_EXPIREDContent = default;
        private static bool _GL_TIMEOUT_EXPIREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_TRANSFORM_FEEDBACK"/>
        /// </summary>
        public static int GL_TRANSFORM_FEEDBACK { get { if (!_GL_TRANSFORM_FEEDBACKReady) { _GL_TRANSFORM_FEEDBACKContent = SGetField<int>(LocalBridgeClazz, "GL_TRANSFORM_FEEDBACK"); _GL_TRANSFORM_FEEDBACKReady = true; } return _GL_TRANSFORM_FEEDBACKContent; } }
        private static int _GL_TRANSFORM_FEEDBACKContent = default;
        private static bool _GL_TRANSFORM_FEEDBACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_TRANSFORM_FEEDBACK_ACTIVE"/>
        /// </summary>
        public static int GL_TRANSFORM_FEEDBACK_ACTIVE { get { if (!_GL_TRANSFORM_FEEDBACK_ACTIVEReady) { _GL_TRANSFORM_FEEDBACK_ACTIVEContent = SGetField<int>(LocalBridgeClazz, "GL_TRANSFORM_FEEDBACK_ACTIVE"); _GL_TRANSFORM_FEEDBACK_ACTIVEReady = true; } return _GL_TRANSFORM_FEEDBACK_ACTIVEContent; } }
        private static int _GL_TRANSFORM_FEEDBACK_ACTIVEContent = default;
        private static bool _GL_TRANSFORM_FEEDBACK_ACTIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_TRANSFORM_FEEDBACK_BINDING"/>
        /// </summary>
        public static int GL_TRANSFORM_FEEDBACK_BINDING { get { if (!_GL_TRANSFORM_FEEDBACK_BINDINGReady) { _GL_TRANSFORM_FEEDBACK_BINDINGContent = SGetField<int>(LocalBridgeClazz, "GL_TRANSFORM_FEEDBACK_BINDING"); _GL_TRANSFORM_FEEDBACK_BINDINGReady = true; } return _GL_TRANSFORM_FEEDBACK_BINDINGContent; } }
        private static int _GL_TRANSFORM_FEEDBACK_BINDINGContent = default;
        private static bool _GL_TRANSFORM_FEEDBACK_BINDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_TRANSFORM_FEEDBACK_BUFFER"/>
        /// </summary>
        public static int GL_TRANSFORM_FEEDBACK_BUFFER { get { if (!_GL_TRANSFORM_FEEDBACK_BUFFERReady) { _GL_TRANSFORM_FEEDBACK_BUFFERContent = SGetField<int>(LocalBridgeClazz, "GL_TRANSFORM_FEEDBACK_BUFFER"); _GL_TRANSFORM_FEEDBACK_BUFFERReady = true; } return _GL_TRANSFORM_FEEDBACK_BUFFERContent; } }
        private static int _GL_TRANSFORM_FEEDBACK_BUFFERContent = default;
        private static bool _GL_TRANSFORM_FEEDBACK_BUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING"/>
        /// </summary>
        public static int GL_TRANSFORM_FEEDBACK_BUFFER_BINDING { get { if (!_GL_TRANSFORM_FEEDBACK_BUFFER_BINDINGReady) { _GL_TRANSFORM_FEEDBACK_BUFFER_BINDINGContent = SGetField<int>(LocalBridgeClazz, "GL_TRANSFORM_FEEDBACK_BUFFER_BINDING"); _GL_TRANSFORM_FEEDBACK_BUFFER_BINDINGReady = true; } return _GL_TRANSFORM_FEEDBACK_BUFFER_BINDINGContent; } }
        private static int _GL_TRANSFORM_FEEDBACK_BUFFER_BINDINGContent = default;
        private static bool _GL_TRANSFORM_FEEDBACK_BUFFER_BINDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_TRANSFORM_FEEDBACK_BUFFER_MODE"/>
        /// </summary>
        public static int GL_TRANSFORM_FEEDBACK_BUFFER_MODE { get { if (!_GL_TRANSFORM_FEEDBACK_BUFFER_MODEReady) { _GL_TRANSFORM_FEEDBACK_BUFFER_MODEContent = SGetField<int>(LocalBridgeClazz, "GL_TRANSFORM_FEEDBACK_BUFFER_MODE"); _GL_TRANSFORM_FEEDBACK_BUFFER_MODEReady = true; } return _GL_TRANSFORM_FEEDBACK_BUFFER_MODEContent; } }
        private static int _GL_TRANSFORM_FEEDBACK_BUFFER_MODEContent = default;
        private static bool _GL_TRANSFORM_FEEDBACK_BUFFER_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE"/>
        /// </summary>
        public static int GL_TRANSFORM_FEEDBACK_BUFFER_SIZE { get { if (!_GL_TRANSFORM_FEEDBACK_BUFFER_SIZEReady) { _GL_TRANSFORM_FEEDBACK_BUFFER_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_TRANSFORM_FEEDBACK_BUFFER_SIZE"); _GL_TRANSFORM_FEEDBACK_BUFFER_SIZEReady = true; } return _GL_TRANSFORM_FEEDBACK_BUFFER_SIZEContent; } }
        private static int _GL_TRANSFORM_FEEDBACK_BUFFER_SIZEContent = default;
        private static bool _GL_TRANSFORM_FEEDBACK_BUFFER_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_TRANSFORM_FEEDBACK_BUFFER_START"/>
        /// </summary>
        public static int GL_TRANSFORM_FEEDBACK_BUFFER_START { get { if (!_GL_TRANSFORM_FEEDBACK_BUFFER_STARTReady) { _GL_TRANSFORM_FEEDBACK_BUFFER_STARTContent = SGetField<int>(LocalBridgeClazz, "GL_TRANSFORM_FEEDBACK_BUFFER_START"); _GL_TRANSFORM_FEEDBACK_BUFFER_STARTReady = true; } return _GL_TRANSFORM_FEEDBACK_BUFFER_STARTContent; } }
        private static int _GL_TRANSFORM_FEEDBACK_BUFFER_STARTContent = default;
        private static bool _GL_TRANSFORM_FEEDBACK_BUFFER_STARTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_TRANSFORM_FEEDBACK_PAUSED"/>
        /// </summary>
        public static int GL_TRANSFORM_FEEDBACK_PAUSED { get { if (!_GL_TRANSFORM_FEEDBACK_PAUSEDReady) { _GL_TRANSFORM_FEEDBACK_PAUSEDContent = SGetField<int>(LocalBridgeClazz, "GL_TRANSFORM_FEEDBACK_PAUSED"); _GL_TRANSFORM_FEEDBACK_PAUSEDReady = true; } return _GL_TRANSFORM_FEEDBACK_PAUSEDContent; } }
        private static int _GL_TRANSFORM_FEEDBACK_PAUSEDContent = default;
        private static bool _GL_TRANSFORM_FEEDBACK_PAUSEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN"/>
        /// </summary>
        public static int GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN { get { if (!_GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTENReady) { _GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTENContent = SGetField<int>(LocalBridgeClazz, "GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN"); _GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTENReady = true; } return _GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTENContent; } }
        private static int _GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTENContent = default;
        private static bool _GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH"/>
        /// </summary>
        public static int GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH { get { if (!_GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTHReady) { _GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTHContent = SGetField<int>(LocalBridgeClazz, "GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH"); _GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTHReady = true; } return _GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTHContent; } }
        private static int _GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTHContent = default;
        private static bool _GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_TRANSFORM_FEEDBACK_VARYINGS"/>
        /// </summary>
        public static int GL_TRANSFORM_FEEDBACK_VARYINGS { get { if (!_GL_TRANSFORM_FEEDBACK_VARYINGSReady) { _GL_TRANSFORM_FEEDBACK_VARYINGSContent = SGetField<int>(LocalBridgeClazz, "GL_TRANSFORM_FEEDBACK_VARYINGS"); _GL_TRANSFORM_FEEDBACK_VARYINGSReady = true; } return _GL_TRANSFORM_FEEDBACK_VARYINGSContent; } }
        private static int _GL_TRANSFORM_FEEDBACK_VARYINGSContent = default;
        private static bool _GL_TRANSFORM_FEEDBACK_VARYINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_UNIFORM_ARRAY_STRIDE"/>
        /// </summary>
        public static int GL_UNIFORM_ARRAY_STRIDE { get { if (!_GL_UNIFORM_ARRAY_STRIDEReady) { _GL_UNIFORM_ARRAY_STRIDEContent = SGetField<int>(LocalBridgeClazz, "GL_UNIFORM_ARRAY_STRIDE"); _GL_UNIFORM_ARRAY_STRIDEReady = true; } return _GL_UNIFORM_ARRAY_STRIDEContent; } }
        private static int _GL_UNIFORM_ARRAY_STRIDEContent = default;
        private static bool _GL_UNIFORM_ARRAY_STRIDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES"/>
        /// </summary>
        public static int GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES { get { if (!_GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICESReady) { _GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICESContent = SGetField<int>(LocalBridgeClazz, "GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES"); _GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICESReady = true; } return _GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICESContent; } }
        private static int _GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICESContent = default;
        private static bool _GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS"/>
        /// </summary>
        public static int GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS { get { if (!_GL_UNIFORM_BLOCK_ACTIVE_UNIFORMSReady) { _GL_UNIFORM_BLOCK_ACTIVE_UNIFORMSContent = SGetField<int>(LocalBridgeClazz, "GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS"); _GL_UNIFORM_BLOCK_ACTIVE_UNIFORMSReady = true; } return _GL_UNIFORM_BLOCK_ACTIVE_UNIFORMSContent; } }
        private static int _GL_UNIFORM_BLOCK_ACTIVE_UNIFORMSContent = default;
        private static bool _GL_UNIFORM_BLOCK_ACTIVE_UNIFORMSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_UNIFORM_BLOCK_BINDING"/>
        /// </summary>
        public static int GL_UNIFORM_BLOCK_BINDING { get { if (!_GL_UNIFORM_BLOCK_BINDINGReady) { _GL_UNIFORM_BLOCK_BINDINGContent = SGetField<int>(LocalBridgeClazz, "GL_UNIFORM_BLOCK_BINDING"); _GL_UNIFORM_BLOCK_BINDINGReady = true; } return _GL_UNIFORM_BLOCK_BINDINGContent; } }
        private static int _GL_UNIFORM_BLOCK_BINDINGContent = default;
        private static bool _GL_UNIFORM_BLOCK_BINDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_UNIFORM_BLOCK_DATA_SIZE"/>
        /// </summary>
        public static int GL_UNIFORM_BLOCK_DATA_SIZE { get { if (!_GL_UNIFORM_BLOCK_DATA_SIZEReady) { _GL_UNIFORM_BLOCK_DATA_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_UNIFORM_BLOCK_DATA_SIZE"); _GL_UNIFORM_BLOCK_DATA_SIZEReady = true; } return _GL_UNIFORM_BLOCK_DATA_SIZEContent; } }
        private static int _GL_UNIFORM_BLOCK_DATA_SIZEContent = default;
        private static bool _GL_UNIFORM_BLOCK_DATA_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_UNIFORM_BLOCK_INDEX"/>
        /// </summary>
        public static int GL_UNIFORM_BLOCK_INDEX { get { if (!_GL_UNIFORM_BLOCK_INDEXReady) { _GL_UNIFORM_BLOCK_INDEXContent = SGetField<int>(LocalBridgeClazz, "GL_UNIFORM_BLOCK_INDEX"); _GL_UNIFORM_BLOCK_INDEXReady = true; } return _GL_UNIFORM_BLOCK_INDEXContent; } }
        private static int _GL_UNIFORM_BLOCK_INDEXContent = default;
        private static bool _GL_UNIFORM_BLOCK_INDEXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_UNIFORM_BLOCK_NAME_LENGTH"/>
        /// </summary>
        public static int GL_UNIFORM_BLOCK_NAME_LENGTH { get { if (!_GL_UNIFORM_BLOCK_NAME_LENGTHReady) { _GL_UNIFORM_BLOCK_NAME_LENGTHContent = SGetField<int>(LocalBridgeClazz, "GL_UNIFORM_BLOCK_NAME_LENGTH"); _GL_UNIFORM_BLOCK_NAME_LENGTHReady = true; } return _GL_UNIFORM_BLOCK_NAME_LENGTHContent; } }
        private static int _GL_UNIFORM_BLOCK_NAME_LENGTHContent = default;
        private static bool _GL_UNIFORM_BLOCK_NAME_LENGTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER"/>
        /// </summary>
        public static int GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER { get { if (!_GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADERReady) { _GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADERContent = SGetField<int>(LocalBridgeClazz, "GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER"); _GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADERReady = true; } return _GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADERContent; } }
        private static int _GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADERContent = default;
        private static bool _GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER"/>
        /// </summary>
        public static int GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER { get { if (!_GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADERReady) { _GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADERContent = SGetField<int>(LocalBridgeClazz, "GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER"); _GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADERReady = true; } return _GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADERContent; } }
        private static int _GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADERContent = default;
        private static bool _GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_UNIFORM_BUFFER"/>
        /// </summary>
        public static int GL_UNIFORM_BUFFER { get { if (!_GL_UNIFORM_BUFFERReady) { _GL_UNIFORM_BUFFERContent = SGetField<int>(LocalBridgeClazz, "GL_UNIFORM_BUFFER"); _GL_UNIFORM_BUFFERReady = true; } return _GL_UNIFORM_BUFFERContent; } }
        private static int _GL_UNIFORM_BUFFERContent = default;
        private static bool _GL_UNIFORM_BUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_UNIFORM_BUFFER_BINDING"/>
        /// </summary>
        public static int GL_UNIFORM_BUFFER_BINDING { get { if (!_GL_UNIFORM_BUFFER_BINDINGReady) { _GL_UNIFORM_BUFFER_BINDINGContent = SGetField<int>(LocalBridgeClazz, "GL_UNIFORM_BUFFER_BINDING"); _GL_UNIFORM_BUFFER_BINDINGReady = true; } return _GL_UNIFORM_BUFFER_BINDINGContent; } }
        private static int _GL_UNIFORM_BUFFER_BINDINGContent = default;
        private static bool _GL_UNIFORM_BUFFER_BINDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT"/>
        /// </summary>
        public static int GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT { get { if (!_GL_UNIFORM_BUFFER_OFFSET_ALIGNMENTReady) { _GL_UNIFORM_BUFFER_OFFSET_ALIGNMENTContent = SGetField<int>(LocalBridgeClazz, "GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT"); _GL_UNIFORM_BUFFER_OFFSET_ALIGNMENTReady = true; } return _GL_UNIFORM_BUFFER_OFFSET_ALIGNMENTContent; } }
        private static int _GL_UNIFORM_BUFFER_OFFSET_ALIGNMENTContent = default;
        private static bool _GL_UNIFORM_BUFFER_OFFSET_ALIGNMENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_UNIFORM_BUFFER_SIZE"/>
        /// </summary>
        public static int GL_UNIFORM_BUFFER_SIZE { get { if (!_GL_UNIFORM_BUFFER_SIZEReady) { _GL_UNIFORM_BUFFER_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_UNIFORM_BUFFER_SIZE"); _GL_UNIFORM_BUFFER_SIZEReady = true; } return _GL_UNIFORM_BUFFER_SIZEContent; } }
        private static int _GL_UNIFORM_BUFFER_SIZEContent = default;
        private static bool _GL_UNIFORM_BUFFER_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_UNIFORM_BUFFER_START"/>
        /// </summary>
        public static int GL_UNIFORM_BUFFER_START { get { if (!_GL_UNIFORM_BUFFER_STARTReady) { _GL_UNIFORM_BUFFER_STARTContent = SGetField<int>(LocalBridgeClazz, "GL_UNIFORM_BUFFER_START"); _GL_UNIFORM_BUFFER_STARTReady = true; } return _GL_UNIFORM_BUFFER_STARTContent; } }
        private static int _GL_UNIFORM_BUFFER_STARTContent = default;
        private static bool _GL_UNIFORM_BUFFER_STARTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_UNIFORM_IS_ROW_MAJOR"/>
        /// </summary>
        public static int GL_UNIFORM_IS_ROW_MAJOR { get { if (!_GL_UNIFORM_IS_ROW_MAJORReady) { _GL_UNIFORM_IS_ROW_MAJORContent = SGetField<int>(LocalBridgeClazz, "GL_UNIFORM_IS_ROW_MAJOR"); _GL_UNIFORM_IS_ROW_MAJORReady = true; } return _GL_UNIFORM_IS_ROW_MAJORContent; } }
        private static int _GL_UNIFORM_IS_ROW_MAJORContent = default;
        private static bool _GL_UNIFORM_IS_ROW_MAJORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_UNIFORM_MATRIX_STRIDE"/>
        /// </summary>
        public static int GL_UNIFORM_MATRIX_STRIDE { get { if (!_GL_UNIFORM_MATRIX_STRIDEReady) { _GL_UNIFORM_MATRIX_STRIDEContent = SGetField<int>(LocalBridgeClazz, "GL_UNIFORM_MATRIX_STRIDE"); _GL_UNIFORM_MATRIX_STRIDEReady = true; } return _GL_UNIFORM_MATRIX_STRIDEContent; } }
        private static int _GL_UNIFORM_MATRIX_STRIDEContent = default;
        private static bool _GL_UNIFORM_MATRIX_STRIDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_UNIFORM_NAME_LENGTH"/>
        /// </summary>
        public static int GL_UNIFORM_NAME_LENGTH { get { if (!_GL_UNIFORM_NAME_LENGTHReady) { _GL_UNIFORM_NAME_LENGTHContent = SGetField<int>(LocalBridgeClazz, "GL_UNIFORM_NAME_LENGTH"); _GL_UNIFORM_NAME_LENGTHReady = true; } return _GL_UNIFORM_NAME_LENGTHContent; } }
        private static int _GL_UNIFORM_NAME_LENGTHContent = default;
        private static bool _GL_UNIFORM_NAME_LENGTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_UNIFORM_OFFSET"/>
        /// </summary>
        public static int GL_UNIFORM_OFFSET { get { if (!_GL_UNIFORM_OFFSETReady) { _GL_UNIFORM_OFFSETContent = SGetField<int>(LocalBridgeClazz, "GL_UNIFORM_OFFSET"); _GL_UNIFORM_OFFSETReady = true; } return _GL_UNIFORM_OFFSETContent; } }
        private static int _GL_UNIFORM_OFFSETContent = default;
        private static bool _GL_UNIFORM_OFFSETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_UNIFORM_SIZE"/>
        /// </summary>
        public static int GL_UNIFORM_SIZE { get { if (!_GL_UNIFORM_SIZEReady) { _GL_UNIFORM_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_UNIFORM_SIZE"); _GL_UNIFORM_SIZEReady = true; } return _GL_UNIFORM_SIZEContent; } }
        private static int _GL_UNIFORM_SIZEContent = default;
        private static bool _GL_UNIFORM_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_UNIFORM_TYPE"/>
        /// </summary>
        public static int GL_UNIFORM_TYPE { get { if (!_GL_UNIFORM_TYPEReady) { _GL_UNIFORM_TYPEContent = SGetField<int>(LocalBridgeClazz, "GL_UNIFORM_TYPE"); _GL_UNIFORM_TYPEReady = true; } return _GL_UNIFORM_TYPEContent; } }
        private static int _GL_UNIFORM_TYPEContent = default;
        private static bool _GL_UNIFORM_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_UNPACK_IMAGE_HEIGHT"/>
        /// </summary>
        public static int GL_UNPACK_IMAGE_HEIGHT { get { if (!_GL_UNPACK_IMAGE_HEIGHTReady) { _GL_UNPACK_IMAGE_HEIGHTContent = SGetField<int>(LocalBridgeClazz, "GL_UNPACK_IMAGE_HEIGHT"); _GL_UNPACK_IMAGE_HEIGHTReady = true; } return _GL_UNPACK_IMAGE_HEIGHTContent; } }
        private static int _GL_UNPACK_IMAGE_HEIGHTContent = default;
        private static bool _GL_UNPACK_IMAGE_HEIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_UNPACK_ROW_LENGTH"/>
        /// </summary>
        public static int GL_UNPACK_ROW_LENGTH { get { if (!_GL_UNPACK_ROW_LENGTHReady) { _GL_UNPACK_ROW_LENGTHContent = SGetField<int>(LocalBridgeClazz, "GL_UNPACK_ROW_LENGTH"); _GL_UNPACK_ROW_LENGTHReady = true; } return _GL_UNPACK_ROW_LENGTHContent; } }
        private static int _GL_UNPACK_ROW_LENGTHContent = default;
        private static bool _GL_UNPACK_ROW_LENGTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_UNPACK_SKIP_IMAGES"/>
        /// </summary>
        public static int GL_UNPACK_SKIP_IMAGES { get { if (!_GL_UNPACK_SKIP_IMAGESReady) { _GL_UNPACK_SKIP_IMAGESContent = SGetField<int>(LocalBridgeClazz, "GL_UNPACK_SKIP_IMAGES"); _GL_UNPACK_SKIP_IMAGESReady = true; } return _GL_UNPACK_SKIP_IMAGESContent; } }
        private static int _GL_UNPACK_SKIP_IMAGESContent = default;
        private static bool _GL_UNPACK_SKIP_IMAGESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_UNPACK_SKIP_PIXELS"/>
        /// </summary>
        public static int GL_UNPACK_SKIP_PIXELS { get { if (!_GL_UNPACK_SKIP_PIXELSReady) { _GL_UNPACK_SKIP_PIXELSContent = SGetField<int>(LocalBridgeClazz, "GL_UNPACK_SKIP_PIXELS"); _GL_UNPACK_SKIP_PIXELSReady = true; } return _GL_UNPACK_SKIP_PIXELSContent; } }
        private static int _GL_UNPACK_SKIP_PIXELSContent = default;
        private static bool _GL_UNPACK_SKIP_PIXELSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_UNPACK_SKIP_ROWS"/>
        /// </summary>
        public static int GL_UNPACK_SKIP_ROWS { get { if (!_GL_UNPACK_SKIP_ROWSReady) { _GL_UNPACK_SKIP_ROWSContent = SGetField<int>(LocalBridgeClazz, "GL_UNPACK_SKIP_ROWS"); _GL_UNPACK_SKIP_ROWSReady = true; } return _GL_UNPACK_SKIP_ROWSContent; } }
        private static int _GL_UNPACK_SKIP_ROWSContent = default;
        private static bool _GL_UNPACK_SKIP_ROWSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_UNSIGNALED"/>
        /// </summary>
        public static int GL_UNSIGNALED { get { if (!_GL_UNSIGNALEDReady) { _GL_UNSIGNALEDContent = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNALED"); _GL_UNSIGNALEDReady = true; } return _GL_UNSIGNALEDContent; } }
        private static int _GL_UNSIGNALEDContent = default;
        private static bool _GL_UNSIGNALEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_UNSIGNED_INT_10F_11F_11F_REV"/>
        /// </summary>
        public static int GL_UNSIGNED_INT_10F_11F_11F_REV { get { if (!_GL_UNSIGNED_INT_10F_11F_11F_REVReady) { _GL_UNSIGNED_INT_10F_11F_11F_REVContent = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNED_INT_10F_11F_11F_REV"); _GL_UNSIGNED_INT_10F_11F_11F_REVReady = true; } return _GL_UNSIGNED_INT_10F_11F_11F_REVContent; } }
        private static int _GL_UNSIGNED_INT_10F_11F_11F_REVContent = default;
        private static bool _GL_UNSIGNED_INT_10F_11F_11F_REVReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_UNSIGNED_INT_2_10_10_10_REV"/>
        /// </summary>
        public static int GL_UNSIGNED_INT_2_10_10_10_REV { get { if (!_GL_UNSIGNED_INT_2_10_10_10_REVReady) { _GL_UNSIGNED_INT_2_10_10_10_REVContent = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNED_INT_2_10_10_10_REV"); _GL_UNSIGNED_INT_2_10_10_10_REVReady = true; } return _GL_UNSIGNED_INT_2_10_10_10_REVContent; } }
        private static int _GL_UNSIGNED_INT_2_10_10_10_REVContent = default;
        private static bool _GL_UNSIGNED_INT_2_10_10_10_REVReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_UNSIGNED_INT_24_8"/>
        /// </summary>
        public static int GL_UNSIGNED_INT_24_8 { get { if (!_GL_UNSIGNED_INT_24_8Ready) { _GL_UNSIGNED_INT_24_8Content = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNED_INT_24_8"); _GL_UNSIGNED_INT_24_8Ready = true; } return _GL_UNSIGNED_INT_24_8Content; } }
        private static int _GL_UNSIGNED_INT_24_8Content = default;
        private static bool _GL_UNSIGNED_INT_24_8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_UNSIGNED_INT_5_9_9_9_REV"/>
        /// </summary>
        public static int GL_UNSIGNED_INT_5_9_9_9_REV { get { if (!_GL_UNSIGNED_INT_5_9_9_9_REVReady) { _GL_UNSIGNED_INT_5_9_9_9_REVContent = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNED_INT_5_9_9_9_REV"); _GL_UNSIGNED_INT_5_9_9_9_REVReady = true; } return _GL_UNSIGNED_INT_5_9_9_9_REVContent; } }
        private static int _GL_UNSIGNED_INT_5_9_9_9_REVContent = default;
        private static bool _GL_UNSIGNED_INT_5_9_9_9_REVReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_UNSIGNED_INT_SAMPLER_2D"/>
        /// </summary>
        public static int GL_UNSIGNED_INT_SAMPLER_2D { get { if (!_GL_UNSIGNED_INT_SAMPLER_2DReady) { _GL_UNSIGNED_INT_SAMPLER_2DContent = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNED_INT_SAMPLER_2D"); _GL_UNSIGNED_INT_SAMPLER_2DReady = true; } return _GL_UNSIGNED_INT_SAMPLER_2DContent; } }
        private static int _GL_UNSIGNED_INT_SAMPLER_2DContent = default;
        private static bool _GL_UNSIGNED_INT_SAMPLER_2DReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_UNSIGNED_INT_SAMPLER_2D_ARRAY"/>
        /// </summary>
        public static int GL_UNSIGNED_INT_SAMPLER_2D_ARRAY { get { if (!_GL_UNSIGNED_INT_SAMPLER_2D_ARRAYReady) { _GL_UNSIGNED_INT_SAMPLER_2D_ARRAYContent = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNED_INT_SAMPLER_2D_ARRAY"); _GL_UNSIGNED_INT_SAMPLER_2D_ARRAYReady = true; } return _GL_UNSIGNED_INT_SAMPLER_2D_ARRAYContent; } }
        private static int _GL_UNSIGNED_INT_SAMPLER_2D_ARRAYContent = default;
        private static bool _GL_UNSIGNED_INT_SAMPLER_2D_ARRAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_UNSIGNED_INT_SAMPLER_3D"/>
        /// </summary>
        public static int GL_UNSIGNED_INT_SAMPLER_3D { get { if (!_GL_UNSIGNED_INT_SAMPLER_3DReady) { _GL_UNSIGNED_INT_SAMPLER_3DContent = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNED_INT_SAMPLER_3D"); _GL_UNSIGNED_INT_SAMPLER_3DReady = true; } return _GL_UNSIGNED_INT_SAMPLER_3DContent; } }
        private static int _GL_UNSIGNED_INT_SAMPLER_3DContent = default;
        private static bool _GL_UNSIGNED_INT_SAMPLER_3DReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_UNSIGNED_INT_SAMPLER_CUBE"/>
        /// </summary>
        public static int GL_UNSIGNED_INT_SAMPLER_CUBE { get { if (!_GL_UNSIGNED_INT_SAMPLER_CUBEReady) { _GL_UNSIGNED_INT_SAMPLER_CUBEContent = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNED_INT_SAMPLER_CUBE"); _GL_UNSIGNED_INT_SAMPLER_CUBEReady = true; } return _GL_UNSIGNED_INT_SAMPLER_CUBEContent; } }
        private static int _GL_UNSIGNED_INT_SAMPLER_CUBEContent = default;
        private static bool _GL_UNSIGNED_INT_SAMPLER_CUBEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_UNSIGNED_INT_VEC2"/>
        /// </summary>
        public static int GL_UNSIGNED_INT_VEC2 { get { if (!_GL_UNSIGNED_INT_VEC2Ready) { _GL_UNSIGNED_INT_VEC2Content = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNED_INT_VEC2"); _GL_UNSIGNED_INT_VEC2Ready = true; } return _GL_UNSIGNED_INT_VEC2Content; } }
        private static int _GL_UNSIGNED_INT_VEC2Content = default;
        private static bool _GL_UNSIGNED_INT_VEC2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_UNSIGNED_INT_VEC3"/>
        /// </summary>
        public static int GL_UNSIGNED_INT_VEC3 { get { if (!_GL_UNSIGNED_INT_VEC3Ready) { _GL_UNSIGNED_INT_VEC3Content = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNED_INT_VEC3"); _GL_UNSIGNED_INT_VEC3Ready = true; } return _GL_UNSIGNED_INT_VEC3Content; } }
        private static int _GL_UNSIGNED_INT_VEC3Content = default;
        private static bool _GL_UNSIGNED_INT_VEC3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_UNSIGNED_INT_VEC4"/>
        /// </summary>
        public static int GL_UNSIGNED_INT_VEC4 { get { if (!_GL_UNSIGNED_INT_VEC4Ready) { _GL_UNSIGNED_INT_VEC4Content = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNED_INT_VEC4"); _GL_UNSIGNED_INT_VEC4Ready = true; } return _GL_UNSIGNED_INT_VEC4Content; } }
        private static int _GL_UNSIGNED_INT_VEC4Content = default;
        private static bool _GL_UNSIGNED_INT_VEC4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_UNSIGNED_NORMALIZED"/>
        /// </summary>
        public static int GL_UNSIGNED_NORMALIZED { get { if (!_GL_UNSIGNED_NORMALIZEDReady) { _GL_UNSIGNED_NORMALIZEDContent = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNED_NORMALIZED"); _GL_UNSIGNED_NORMALIZEDReady = true; } return _GL_UNSIGNED_NORMALIZEDContent; } }
        private static int _GL_UNSIGNED_NORMALIZEDContent = default;
        private static bool _GL_UNSIGNED_NORMALIZEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_VERTEX_ARRAY_BINDING"/>
        /// </summary>
        public static int GL_VERTEX_ARRAY_BINDING { get { if (!_GL_VERTEX_ARRAY_BINDINGReady) { _GL_VERTEX_ARRAY_BINDINGContent = SGetField<int>(LocalBridgeClazz, "GL_VERTEX_ARRAY_BINDING"); _GL_VERTEX_ARRAY_BINDINGReady = true; } return _GL_VERTEX_ARRAY_BINDINGContent; } }
        private static int _GL_VERTEX_ARRAY_BINDINGContent = default;
        private static bool _GL_VERTEX_ARRAY_BINDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_VERTEX_ATTRIB_ARRAY_DIVISOR"/>
        /// </summary>
        public static int GL_VERTEX_ATTRIB_ARRAY_DIVISOR { get { if (!_GL_VERTEX_ATTRIB_ARRAY_DIVISORReady) { _GL_VERTEX_ATTRIB_ARRAY_DIVISORContent = SGetField<int>(LocalBridgeClazz, "GL_VERTEX_ATTRIB_ARRAY_DIVISOR"); _GL_VERTEX_ATTRIB_ARRAY_DIVISORReady = true; } return _GL_VERTEX_ATTRIB_ARRAY_DIVISORContent; } }
        private static int _GL_VERTEX_ATTRIB_ARRAY_DIVISORContent = default;
        private static bool _GL_VERTEX_ATTRIB_ARRAY_DIVISORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_VERTEX_ATTRIB_ARRAY_INTEGER"/>
        /// </summary>
        public static int GL_VERTEX_ATTRIB_ARRAY_INTEGER { get { if (!_GL_VERTEX_ATTRIB_ARRAY_INTEGERReady) { _GL_VERTEX_ATTRIB_ARRAY_INTEGERContent = SGetField<int>(LocalBridgeClazz, "GL_VERTEX_ATTRIB_ARRAY_INTEGER"); _GL_VERTEX_ATTRIB_ARRAY_INTEGERReady = true; } return _GL_VERTEX_ATTRIB_ARRAY_INTEGERContent; } }
        private static int _GL_VERTEX_ATTRIB_ARRAY_INTEGERContent = default;
        private static bool _GL_VERTEX_ATTRIB_ARRAY_INTEGERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_WAIT_FAILED"/>
        /// </summary>
        public static int GL_WAIT_FAILED { get { if (!_GL_WAIT_FAILEDReady) { _GL_WAIT_FAILEDContent = SGetField<int>(LocalBridgeClazz, "GL_WAIT_FAILED"); _GL_WAIT_FAILEDReady = true; } return _GL_WAIT_FAILEDContent; } }
        private static int _GL_WAIT_FAILEDContent = default;
        private static bool _GL_WAIT_FAILEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#GL_TIMEOUT_IGNORED"/>
        /// </summary>
        public static long GL_TIMEOUT_IGNORED { get { if (!_GL_TIMEOUT_IGNOREDReady) { _GL_TIMEOUT_IGNOREDContent = SGetField<long>(LocalBridgeClazz, "GL_TIMEOUT_IGNORED"); _GL_TIMEOUT_IGNOREDReady = true; } return _GL_TIMEOUT_IGNOREDContent; } }
        private static long _GL_TIMEOUT_IGNOREDContent = default;
        private static bool _GL_TIMEOUT_IGNOREDReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glIsQuery(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool GlIsQuery(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "glIsQuery", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glIsSampler(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool GlIsSampler(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "glIsSampler", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glIsSync(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool GlIsSync(long arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "glIsSync", "(J)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glIsTransformFeedback(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool GlIsTransformFeedback(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "glIsTransformFeedback", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glIsVertexArray(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool GlIsVertexArray(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "glIsVertexArray", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glUnmapBuffer(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool GlUnmapBuffer(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "glUnmapBuffer", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glClientWaitSync(long,int,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GlClientWaitSync(long arg0, int arg1, long arg2)
        {
            return SExecute<int>(LocalBridgeClazz, "glClientWaitSync", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetFragDataLocation(int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GlGetFragDataLocation(int arg0, Java.Lang.String arg1)
        {
            return SExecute<int>(LocalBridgeClazz, "glGetFragDataLocation", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetUniformBlockIndex(int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GlGetUniformBlockIndex(int arg0, Java.Lang.String arg1)
        {
            return SExecute<int>(LocalBridgeClazz, "glGetUniformBlockIndex", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetActiveUniformBlockName(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String GlGetActiveUniformBlockName(int arg0, int arg1)
        {
            return SExecute<Java.Lang.String>(LocalBridgeClazz, "glGetActiveUniformBlockName", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetStringi(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String GlGetStringi(int arg0, int arg1)
        {
            return SExecute<Java.Lang.String>(LocalBridgeClazz, "glGetStringi", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetTransformFeedbackVarying(int,int,int[],int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String GlGetTransformFeedbackVarying(int arg0, int arg1, int[] arg2, int arg3, int[] arg4, int arg5)
        {
            return SExecute<Java.Lang.String>(LocalBridgeClazz, "glGetTransformFeedbackVarying", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetTransformFeedbackVarying(int,int,java.nio.IntBuffer,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        /// <param name="arg3"><see cref="Java.Nio.IntBuffer"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String GlGetTransformFeedbackVarying(int arg0, int arg1, Java.Nio.IntBuffer arg2, Java.Nio.IntBuffer arg3)
        {
            return SExecute<Java.Lang.String>(LocalBridgeClazz, "glGetTransformFeedbackVarying", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetBufferPointerv(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Java.Nio.Buffer"/></returns>
        public static Java.Nio.Buffer GlGetBufferPointerv(int arg0, int arg1)
        {
            return SExecute<Java.Nio.Buffer>(LocalBridgeClazz, "glGetBufferPointerv", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glMapBufferRange(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="Java.Nio.Buffer"/></returns>
        public static Java.Nio.Buffer GlMapBufferRange(int arg0, int arg1, int arg2, int arg3)
        {
            return SExecute<Java.Nio.Buffer>(LocalBridgeClazz, "glMapBufferRange", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glFenceSync(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="long"/></returns>
        public static long GlFenceSync(int arg0, int arg1)
        {
            return SExecute<long>(LocalBridgeClazz, "glFenceSync", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glBeginQuery(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlBeginQuery(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glBeginQuery", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glBeginTransformFeedback(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlBeginTransformFeedback(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glBeginTransformFeedback", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glBindBufferBase(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlBindBufferBase(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glBindBufferBase", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glBindBufferRange(int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlBindBufferRange(int arg0, int arg1, int arg2, int arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glBindBufferRange", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glBindSampler(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlBindSampler(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glBindSampler", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glBindTransformFeedback(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlBindTransformFeedback(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glBindTransformFeedback", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glBindVertexArray(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlBindVertexArray(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glBindVertexArray", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glBlitFramebuffer(int,int,int,int,int,int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        /// <param name="arg8"><see cref="int"/></param>
        /// <param name="arg9"><see cref="int"/></param>
        public static void GlBlitFramebuffer(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9)
        {
            SExecute(LocalBridgeClazz, "glBlitFramebuffer", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glClearBufferfi(int,int,float,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlClearBufferfi(int arg0, int arg1, float arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glClearBufferfi", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glClearBufferfv(int,int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlClearBufferfv(int arg0, int arg1, float[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glClearBufferfv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glClearBufferfv(int,int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlClearBufferfv(int arg0, int arg1, Java.Nio.FloatBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glClearBufferfv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glClearBufferiv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlClearBufferiv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glClearBufferiv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glClearBufferiv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlClearBufferiv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glClearBufferiv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glClearBufferuiv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlClearBufferuiv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glClearBufferuiv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glClearBufferuiv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlClearBufferuiv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glClearBufferuiv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glCompressedTexImage3D(int,int,int,int,int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        /// <param name="arg8"><see cref="int"/></param>
        public static void GlCompressedTexImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8)
        {
            SExecute(LocalBridgeClazz, "glCompressedTexImage3D", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glCompressedTexImage3D(int,int,int,int,int,int,int,int,java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        /// <param name="arg8"><see cref="Java.Nio.Buffer"/></param>
        public static void GlCompressedTexImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, Java.Nio.Buffer arg8)
        {
            SExecute(LocalBridgeClazz, "glCompressedTexImage3D", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glCompressedTexSubImage3D(int,int,int,int,int,int,int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        /// <param name="arg8"><see cref="int"/></param>
        /// <param name="arg9"><see cref="int"/></param>
        /// <param name="arg10"><see cref="int"/></param>
        public static void GlCompressedTexSubImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10)
        {
            SExecute(LocalBridgeClazz, "glCompressedTexSubImage3D", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glCompressedTexSubImage3D(int,int,int,int,int,int,int,int,int,int,java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        /// <param name="arg8"><see cref="int"/></param>
        /// <param name="arg9"><see cref="int"/></param>
        /// <param name="arg10"><see cref="Java.Nio.Buffer"/></param>
        public static void GlCompressedTexSubImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, Java.Nio.Buffer arg10)
        {
            SExecute(LocalBridgeClazz, "glCompressedTexSubImage3D", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glCopyBufferSubData(int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlCopyBufferSubData(int arg0, int arg1, int arg2, int arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glCopyBufferSubData", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glCopyTexSubImage3D(int,int,int,int,int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        /// <param name="arg8"><see cref="int"/></param>
        public static void GlCopyTexSubImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8)
        {
            SExecute(LocalBridgeClazz, "glCopyTexSubImage3D", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glDeleteQueries(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlDeleteQueries(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glDeleteQueries", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glDeleteQueries(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlDeleteQueries(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glDeleteQueries", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glDeleteSamplers(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlDeleteSamplers(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glDeleteSamplers", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glDeleteSamplers(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlDeleteSamplers(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glDeleteSamplers", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glDeleteSync(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        public static void GlDeleteSync(long arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glDeleteSync", "(J)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glDeleteTransformFeedbacks(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlDeleteTransformFeedbacks(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glDeleteTransformFeedbacks", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glDeleteTransformFeedbacks(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlDeleteTransformFeedbacks(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glDeleteTransformFeedbacks", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glDeleteVertexArrays(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlDeleteVertexArrays(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glDeleteVertexArrays", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glDeleteVertexArrays(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlDeleteVertexArrays(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glDeleteVertexArrays", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glDrawArraysInstanced(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlDrawArraysInstanced(int arg0, int arg1, int arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glDrawArraysInstanced", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glDrawBuffers(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlDrawBuffers(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glDrawBuffers", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glDrawBuffers(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlDrawBuffers(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glDrawBuffers", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glDrawElementsInstanced(int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlDrawElementsInstanced(int arg0, int arg1, int arg2, int arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glDrawElementsInstanced", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glDrawElementsInstanced(int,int,int,java.nio.Buffer,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.Buffer"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlDrawElementsInstanced(int arg0, int arg1, int arg2, Java.Nio.Buffer arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glDrawElementsInstanced", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glDrawRangeElements(int,int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        public static void GlDrawRangeElements(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5)
        {
            SExecute(LocalBridgeClazz, "glDrawRangeElements", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glDrawRangeElements(int,int,int,int,int,java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="Java.Nio.Buffer"/></param>
        public static void GlDrawRangeElements(int arg0, int arg1, int arg2, int arg3, int arg4, Java.Nio.Buffer arg5)
        {
            SExecute(LocalBridgeClazz, "glDrawRangeElements", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glEndQuery(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlEndQuery(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glEndQuery", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glEndTransformFeedback()"/>
        /// </summary>
        public static void GlEndTransformFeedback()
        {
            SExecuteWithSignature(LocalBridgeClazz, "glEndTransformFeedback", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glFlushMappedBufferRange(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlFlushMappedBufferRange(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glFlushMappedBufferRange", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glFramebufferTextureLayer(int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlFramebufferTextureLayer(int arg0, int arg1, int arg2, int arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glFramebufferTextureLayer", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGenQueries(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlGenQueries(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glGenQueries", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGenQueries(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGenQueries(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glGenQueries", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGenSamplers(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlGenSamplers(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glGenSamplers", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGenSamplers(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGenSamplers(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glGenSamplers", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGenTransformFeedbacks(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlGenTransformFeedbacks(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glGenTransformFeedbacks", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGenTransformFeedbacks(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGenTransformFeedbacks(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glGenTransformFeedbacks", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGenVertexArrays(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlGenVertexArrays(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glGenVertexArrays", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGenVertexArrays(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGenVertexArrays(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glGenVertexArrays", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetActiveUniformBlockiv(int,int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlGetActiveUniformBlockiv(int arg0, int arg1, int arg2, int[] arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glGetActiveUniformBlockiv", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetActiveUniformBlockiv(int,int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetActiveUniformBlockiv(int arg0, int arg1, int arg2, Java.Nio.IntBuffer arg3)
        {
            SExecute(LocalBridgeClazz, "glGetActiveUniformBlockiv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetActiveUniformBlockName(int,int,int,int[],int,byte[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="byte"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        public static void GlGetActiveUniformBlockName(int arg0, int arg1, int arg2, int[] arg3, int arg4, byte[] arg5, int arg6)
        {
            SExecute(LocalBridgeClazz, "glGetActiveUniformBlockName", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetActiveUniformBlockName(int,int,java.nio.Buffer,java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.Buffer"/></param>
        /// <param name="arg3"><see cref="Java.Nio.Buffer"/></param>
        public static void GlGetActiveUniformBlockName(int arg0, int arg1, Java.Nio.Buffer arg2, Java.Nio.Buffer arg3)
        {
            SExecute(LocalBridgeClazz, "glGetActiveUniformBlockName", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetActiveUniformsiv(int,int,int[],int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        public static void GlGetActiveUniformsiv(int arg0, int arg1, int[] arg2, int arg3, int arg4, int[] arg5, int arg6)
        {
            SExecute(LocalBridgeClazz, "glGetActiveUniformsiv", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetActiveUniformsiv(int,int,java.nio.IntBuffer,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetActiveUniformsiv(int arg0, int arg1, Java.Nio.IntBuffer arg2, int arg3, Java.Nio.IntBuffer arg4)
        {
            SExecute(LocalBridgeClazz, "glGetActiveUniformsiv", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetBufferParameteri64v(int,int,java.nio.LongBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.LongBuffer"/></param>
        public static void GlGetBufferParameteri64v(int arg0, int arg1, Java.Nio.LongBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetBufferParameteri64v", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetBufferParameteri64v(int,int,long[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetBufferParameteri64v(int arg0, int arg1, long[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetBufferParameteri64v", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetInteger64i_v(int,int,java.nio.LongBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.LongBuffer"/></param>
        public static void GlGetInteger64i_v(int arg0, int arg1, Java.Nio.LongBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetInteger64i_v", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetInteger64i_v(int,int,long[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetInteger64i_v(int arg0, int arg1, long[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetInteger64i_v", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetInteger64v(int,java.nio.LongBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.LongBuffer"/></param>
        public static void GlGetInteger64v(int arg0, Java.Nio.LongBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glGetInteger64v", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetInteger64v(int,long[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlGetInteger64v(int arg0, long[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glGetInteger64v", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetIntegeri_v(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetIntegeri_v(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetIntegeri_v", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetIntegeri_v(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetIntegeri_v(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetIntegeri_v", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetInternalformativ(int,int,int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        public static void GlGetInternalformativ(int arg0, int arg1, int arg2, int arg3, int[] arg4, int arg5)
        {
            SExecute(LocalBridgeClazz, "glGetInternalformativ", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetInternalformativ(int,int,int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetInternalformativ(int arg0, int arg1, int arg2, int arg3, Java.Nio.IntBuffer arg4)
        {
            SExecute(LocalBridgeClazz, "glGetInternalformativ", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetProgramBinary(int,int,int[],int,int[],int,java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="Java.Nio.Buffer"/></param>
        public static void GlGetProgramBinary(int arg0, int arg1, int[] arg2, int arg3, int[] arg4, int arg5, Java.Nio.Buffer arg6)
        {
            SExecute(LocalBridgeClazz, "glGetProgramBinary", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetProgramBinary(int,int,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        /// <param name="arg3"><see cref="Java.Nio.IntBuffer"/></param>
        /// <param name="arg4"><see cref="Java.Nio.Buffer"/></param>
        public static void GlGetProgramBinary(int arg0, int arg1, Java.Nio.IntBuffer arg2, Java.Nio.IntBuffer arg3, Java.Nio.Buffer arg4)
        {
            SExecute(LocalBridgeClazz, "glGetProgramBinary", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetQueryiv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetQueryiv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetQueryiv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetQueryiv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetQueryiv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetQueryiv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetQueryObjectuiv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetQueryObjectuiv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetQueryObjectuiv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetQueryObjectuiv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetQueryObjectuiv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetQueryObjectuiv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetSamplerParameterfv(int,int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetSamplerParameterfv(int arg0, int arg1, float[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetSamplerParameterfv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetSamplerParameterfv(int,int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlGetSamplerParameterfv(int arg0, int arg1, Java.Nio.FloatBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetSamplerParameterfv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetSamplerParameteriv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetSamplerParameteriv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetSamplerParameteriv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetSamplerParameteriv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetSamplerParameteriv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetSamplerParameteriv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetSynciv(long,int,int,int[],int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        public static void GlGetSynciv(long arg0, int arg1, int arg2, int[] arg3, int arg4, int[] arg5, int arg6)
        {
            SExecute(LocalBridgeClazz, "glGetSynciv", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetSynciv(long,int,int,java.nio.IntBuffer,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.IntBuffer"/></param>
        /// <param name="arg4"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetSynciv(long arg0, int arg1, int arg2, Java.Nio.IntBuffer arg3, Java.Nio.IntBuffer arg4)
        {
            SExecute(LocalBridgeClazz, "glGetSynciv", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetTransformFeedbackVarying(int,int,int,int[],int,int[],int,int[],int,byte[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        /// <param name="arg8"><see cref="int"/></param>
        /// <param name="arg9"><see cref="byte"/></param>
        /// <param name="arg10"><see cref="int"/></param>
        public static void GlGetTransformFeedbackVarying(int arg0, int arg1, int arg2, int[] arg3, int arg4, int[] arg5, int arg6, int[] arg7, int arg8, byte[] arg9, int arg10)
        {
            SExecute(LocalBridgeClazz, "glGetTransformFeedbackVarying", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetTransformFeedbackVarying(int,int,int,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.ByteBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.IntBuffer"/></param>
        /// <param name="arg4"><see cref="Java.Nio.IntBuffer"/></param>
        /// <param name="arg5"><see cref="Java.Nio.IntBuffer"/></param>
        /// <param name="arg6"><see cref="Java.Nio.ByteBuffer"/></param>
        public static void GlGetTransformFeedbackVarying(int arg0, int arg1, int arg2, Java.Nio.IntBuffer arg3, Java.Nio.IntBuffer arg4, Java.Nio.IntBuffer arg5, Java.Nio.ByteBuffer arg6)
        {
            SExecute(LocalBridgeClazz, "glGetTransformFeedbackVarying", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetUniformIndices(int,java.lang.String[],int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetUniformIndices(int arg0, Java.Lang.String[] arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetUniformIndices", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetUniformIndices(int,java.lang.String[],java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetUniformIndices(int arg0, Java.Lang.String[] arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetUniformIndices", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetUniformuiv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetUniformuiv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetUniformuiv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetUniformuiv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetUniformuiv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetUniformuiv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetVertexAttribIiv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetVertexAttribIiv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetVertexAttribIiv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetVertexAttribIiv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetVertexAttribIiv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetVertexAttribIiv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetVertexAttribIuiv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetVertexAttribIuiv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetVertexAttribIuiv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glGetVertexAttribIuiv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetVertexAttribIuiv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetVertexAttribIuiv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glInvalidateFramebuffer(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlInvalidateFramebuffer(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glInvalidateFramebuffer", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glInvalidateFramebuffer(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlInvalidateFramebuffer(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glInvalidateFramebuffer", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glInvalidateSubFramebuffer(int,int,int[],int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        public static void GlInvalidateSubFramebuffer(int arg0, int arg1, int[] arg2, int arg3, int arg4, int arg5, int arg6, int arg7)
        {
            SExecute(LocalBridgeClazz, "glInvalidateSubFramebuffer", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glInvalidateSubFramebuffer(int,int,java.nio.IntBuffer,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        public static void GlInvalidateSubFramebuffer(int arg0, int arg1, Java.Nio.IntBuffer arg2, int arg3, int arg4, int arg5, int arg6)
        {
            SExecute(LocalBridgeClazz, "glInvalidateSubFramebuffer", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glPauseTransformFeedback()"/>
        /// </summary>
        public static void GlPauseTransformFeedback()
        {
            SExecuteWithSignature(LocalBridgeClazz, "glPauseTransformFeedback", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glProgramBinary(int,int,java.nio.Buffer,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.Buffer"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlProgramBinary(int arg0, int arg1, Java.Nio.Buffer arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glProgramBinary", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glProgramParameteri(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlProgramParameteri(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glProgramParameteri", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glReadBuffer(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlReadBuffer(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glReadBuffer", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glReadPixels(int,int,int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        public static void GlReadPixels(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6)
        {
            SExecute(LocalBridgeClazz, "glReadPixels", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glRenderbufferStorageMultisample(int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlRenderbufferStorageMultisample(int arg0, int arg1, int arg2, int arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glRenderbufferStorageMultisample", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glResumeTransformFeedback()"/>
        /// </summary>
        public static void GlResumeTransformFeedback()
        {
            SExecuteWithSignature(LocalBridgeClazz, "glResumeTransformFeedback", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glSamplerParameterf(int,int,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        public static void GlSamplerParameterf(int arg0, int arg1, float arg2)
        {
            SExecute(LocalBridgeClazz, "glSamplerParameterf", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glSamplerParameterfv(int,int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlSamplerParameterfv(int arg0, int arg1, float[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glSamplerParameterfv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glSamplerParameterfv(int,int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlSamplerParameterfv(int arg0, int arg1, Java.Nio.FloatBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glSamplerParameterfv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glSamplerParameteri(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlSamplerParameteri(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glSamplerParameteri", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glSamplerParameteriv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlSamplerParameteriv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glSamplerParameteriv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glSamplerParameteriv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlSamplerParameteriv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glSamplerParameteriv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glTexImage3D(int,int,int,int,int,int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        /// <param name="arg8"><see cref="int"/></param>
        /// <param name="arg9"><see cref="int"/></param>
        public static void GlTexImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9)
        {
            SExecute(LocalBridgeClazz, "glTexImage3D", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glTexImage3D(int,int,int,int,int,int,int,int,int,java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        /// <param name="arg8"><see cref="int"/></param>
        /// <param name="arg9"><see cref="Java.Nio.Buffer"/></param>
        public static void GlTexImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, Java.Nio.Buffer arg9)
        {
            SExecute(LocalBridgeClazz, "glTexImage3D", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glTexStorage2D(int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlTexStorage2D(int arg0, int arg1, int arg2, int arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glTexStorage2D", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glTexStorage3D(int,int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        public static void GlTexStorage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5)
        {
            SExecute(LocalBridgeClazz, "glTexStorage3D", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glTexSubImage3D(int,int,int,int,int,int,int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        /// <param name="arg8"><see cref="int"/></param>
        /// <param name="arg9"><see cref="int"/></param>
        /// <param name="arg10"><see cref="int"/></param>
        public static void GlTexSubImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10)
        {
            SExecute(LocalBridgeClazz, "glTexSubImage3D", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glTexSubImage3D(int,int,int,int,int,int,int,int,int,int,java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        /// <param name="arg8"><see cref="int"/></param>
        /// <param name="arg9"><see cref="int"/></param>
        /// <param name="arg10"><see cref="Java.Nio.Buffer"/></param>
        public static void GlTexSubImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, Java.Nio.Buffer arg10)
        {
            SExecute(LocalBridgeClazz, "glTexSubImage3D", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glTransformFeedbackVaryings(int,java.lang.String[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlTransformFeedbackVaryings(int arg0, Java.Lang.String[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glTransformFeedbackVaryings", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glUniform1ui(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlUniform1ui(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glUniform1ui", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glUniform1uiv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlUniform1uiv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glUniform1uiv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glUniform1uiv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlUniform1uiv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glUniform1uiv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glUniform2ui(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlUniform2ui(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glUniform2ui", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glUniform2uiv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlUniform2uiv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glUniform2uiv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glUniform2uiv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlUniform2uiv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glUniform2uiv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glUniform3ui(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlUniform3ui(int arg0, int arg1, int arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glUniform3ui", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glUniform3uiv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlUniform3uiv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glUniform3uiv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glUniform3uiv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlUniform3uiv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glUniform3uiv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glUniform4ui(int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlUniform4ui(int arg0, int arg1, int arg2, int arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glUniform4ui", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glUniform4uiv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlUniform4uiv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glUniform4uiv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glUniform4uiv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlUniform4uiv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glUniform4uiv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glUniformBlockBinding(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlUniformBlockBinding(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glUniformBlockBinding", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glUniformMatrix2x3fv(int,int,boolean,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlUniformMatrix2x3fv(int arg0, int arg1, bool arg2, float[] arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glUniformMatrix2x3fv", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glUniformMatrix2x3fv(int,int,boolean,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <param name="arg3"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlUniformMatrix2x3fv(int arg0, int arg1, bool arg2, Java.Nio.FloatBuffer arg3)
        {
            SExecute(LocalBridgeClazz, "glUniformMatrix2x3fv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glUniformMatrix2x4fv(int,int,boolean,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlUniformMatrix2x4fv(int arg0, int arg1, bool arg2, float[] arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glUniformMatrix2x4fv", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glUniformMatrix2x4fv(int,int,boolean,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <param name="arg3"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlUniformMatrix2x4fv(int arg0, int arg1, bool arg2, Java.Nio.FloatBuffer arg3)
        {
            SExecute(LocalBridgeClazz, "glUniformMatrix2x4fv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glUniformMatrix3x2fv(int,int,boolean,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlUniformMatrix3x2fv(int arg0, int arg1, bool arg2, float[] arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glUniformMatrix3x2fv", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glUniformMatrix3x2fv(int,int,boolean,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <param name="arg3"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlUniformMatrix3x2fv(int arg0, int arg1, bool arg2, Java.Nio.FloatBuffer arg3)
        {
            SExecute(LocalBridgeClazz, "glUniformMatrix3x2fv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glUniformMatrix3x4fv(int,int,boolean,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlUniformMatrix3x4fv(int arg0, int arg1, bool arg2, float[] arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glUniformMatrix3x4fv", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glUniformMatrix3x4fv(int,int,boolean,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <param name="arg3"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlUniformMatrix3x4fv(int arg0, int arg1, bool arg2, Java.Nio.FloatBuffer arg3)
        {
            SExecute(LocalBridgeClazz, "glUniformMatrix3x4fv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glUniformMatrix4x2fv(int,int,boolean,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlUniformMatrix4x2fv(int arg0, int arg1, bool arg2, float[] arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glUniformMatrix4x2fv", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glUniformMatrix4x2fv(int,int,boolean,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <param name="arg3"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlUniformMatrix4x2fv(int arg0, int arg1, bool arg2, Java.Nio.FloatBuffer arg3)
        {
            SExecute(LocalBridgeClazz, "glUniformMatrix4x2fv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glUniformMatrix4x3fv(int,int,boolean,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlUniformMatrix4x3fv(int arg0, int arg1, bool arg2, float[] arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glUniformMatrix4x3fv", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glUniformMatrix4x3fv(int,int,boolean,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <param name="arg3"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlUniformMatrix4x3fv(int arg0, int arg1, bool arg2, Java.Nio.FloatBuffer arg3)
        {
            SExecute(LocalBridgeClazz, "glUniformMatrix4x3fv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glVertexAttribDivisor(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlVertexAttribDivisor(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glVertexAttribDivisor", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glVertexAttribI4i(int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlVertexAttribI4i(int arg0, int arg1, int arg2, int arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glVertexAttribI4i", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glVertexAttribI4iv(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlVertexAttribI4iv(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glVertexAttribI4iv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glVertexAttribI4iv(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlVertexAttribI4iv(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glVertexAttribI4iv", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glVertexAttribI4ui(int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlVertexAttribI4ui(int arg0, int arg1, int arg2, int arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glVertexAttribI4ui", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glVertexAttribI4uiv(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlVertexAttribI4uiv(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glVertexAttribI4uiv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glVertexAttribI4uiv(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlVertexAttribI4uiv(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glVertexAttribI4uiv", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glVertexAttribIPointer(int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlVertexAttribIPointer(int arg0, int arg1, int arg2, int arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glVertexAttribIPointer", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glWaitSync(long,int,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        public static void GlWaitSync(long arg0, int arg1, long arg2)
        {
            SExecute(LocalBridgeClazz, "glWaitSync", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES30.html#glVertexAttribIPointer(int,int,int,int,java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="Java.Nio.Buffer"/></param>
        public static void GlVertexAttribIPointer(int arg0, int arg1, int arg2, int arg3, Java.Nio.Buffer arg4)
        {
            SExecute(LocalBridgeClazz, "glVertexAttribIPointer", arg0, arg1, arg2, arg3, arg4);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
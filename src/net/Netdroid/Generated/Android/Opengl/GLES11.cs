/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.5.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Opengl
{
    #region GLES11
    public partial class GLES11
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_ACTIVE_TEXTURE"/>
        /// </summary>
        public static int GL_ACTIVE_TEXTURE { get { if (!_GL_ACTIVE_TEXTUREReady) { _GL_ACTIVE_TEXTUREContent = SGetField<int>(LocalBridgeClazz, "GL_ACTIVE_TEXTURE"); _GL_ACTIVE_TEXTUREReady = true; } return _GL_ACTIVE_TEXTUREContent; } }
        private static int _GL_ACTIVE_TEXTUREContent = default;
        private static bool _GL_ACTIVE_TEXTUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_ADD_SIGNED"/>
        /// </summary>
        public static int GL_ADD_SIGNED { get { if (!_GL_ADD_SIGNEDReady) { _GL_ADD_SIGNEDContent = SGetField<int>(LocalBridgeClazz, "GL_ADD_SIGNED"); _GL_ADD_SIGNEDReady = true; } return _GL_ADD_SIGNEDContent; } }
        private static int _GL_ADD_SIGNEDContent = default;
        private static bool _GL_ADD_SIGNEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_ALPHA_SCALE"/>
        /// </summary>
        public static int GL_ALPHA_SCALE { get { if (!_GL_ALPHA_SCALEReady) { _GL_ALPHA_SCALEContent = SGetField<int>(LocalBridgeClazz, "GL_ALPHA_SCALE"); _GL_ALPHA_SCALEReady = true; } return _GL_ALPHA_SCALEContent; } }
        private static int _GL_ALPHA_SCALEContent = default;
        private static bool _GL_ALPHA_SCALEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_ALPHA_TEST_FUNC"/>
        /// </summary>
        public static int GL_ALPHA_TEST_FUNC { get { if (!_GL_ALPHA_TEST_FUNCReady) { _GL_ALPHA_TEST_FUNCContent = SGetField<int>(LocalBridgeClazz, "GL_ALPHA_TEST_FUNC"); _GL_ALPHA_TEST_FUNCReady = true; } return _GL_ALPHA_TEST_FUNCContent; } }
        private static int _GL_ALPHA_TEST_FUNCContent = default;
        private static bool _GL_ALPHA_TEST_FUNCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_ALPHA_TEST_REF"/>
        /// </summary>
        public static int GL_ALPHA_TEST_REF { get { if (!_GL_ALPHA_TEST_REFReady) { _GL_ALPHA_TEST_REFContent = SGetField<int>(LocalBridgeClazz, "GL_ALPHA_TEST_REF"); _GL_ALPHA_TEST_REFReady = true; } return _GL_ALPHA_TEST_REFContent; } }
        private static int _GL_ALPHA_TEST_REFContent = default;
        private static bool _GL_ALPHA_TEST_REFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_ARRAY_BUFFER"/>
        /// </summary>
        public static int GL_ARRAY_BUFFER { get { if (!_GL_ARRAY_BUFFERReady) { _GL_ARRAY_BUFFERContent = SGetField<int>(LocalBridgeClazz, "GL_ARRAY_BUFFER"); _GL_ARRAY_BUFFERReady = true; } return _GL_ARRAY_BUFFERContent; } }
        private static int _GL_ARRAY_BUFFERContent = default;
        private static bool _GL_ARRAY_BUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_ARRAY_BUFFER_BINDING"/>
        /// </summary>
        public static int GL_ARRAY_BUFFER_BINDING { get { if (!_GL_ARRAY_BUFFER_BINDINGReady) { _GL_ARRAY_BUFFER_BINDINGContent = SGetField<int>(LocalBridgeClazz, "GL_ARRAY_BUFFER_BINDING"); _GL_ARRAY_BUFFER_BINDINGReady = true; } return _GL_ARRAY_BUFFER_BINDINGContent; } }
        private static int _GL_ARRAY_BUFFER_BINDINGContent = default;
        private static bool _GL_ARRAY_BUFFER_BINDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_BLEND_DST"/>
        /// </summary>
        public static int GL_BLEND_DST { get { if (!_GL_BLEND_DSTReady) { _GL_BLEND_DSTContent = SGetField<int>(LocalBridgeClazz, "GL_BLEND_DST"); _GL_BLEND_DSTReady = true; } return _GL_BLEND_DSTContent; } }
        private static int _GL_BLEND_DSTContent = default;
        private static bool _GL_BLEND_DSTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_BLEND_SRC"/>
        /// </summary>
        public static int GL_BLEND_SRC { get { if (!_GL_BLEND_SRCReady) { _GL_BLEND_SRCContent = SGetField<int>(LocalBridgeClazz, "GL_BLEND_SRC"); _GL_BLEND_SRCReady = true; } return _GL_BLEND_SRCContent; } }
        private static int _GL_BLEND_SRCContent = default;
        private static bool _GL_BLEND_SRCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_BUFFER_ACCESS"/>
        /// </summary>
        public static int GL_BUFFER_ACCESS { get { if (!_GL_BUFFER_ACCESSReady) { _GL_BUFFER_ACCESSContent = SGetField<int>(LocalBridgeClazz, "GL_BUFFER_ACCESS"); _GL_BUFFER_ACCESSReady = true; } return _GL_BUFFER_ACCESSContent; } }
        private static int _GL_BUFFER_ACCESSContent = default;
        private static bool _GL_BUFFER_ACCESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_BUFFER_SIZE"/>
        /// </summary>
        public static int GL_BUFFER_SIZE { get { if (!_GL_BUFFER_SIZEReady) { _GL_BUFFER_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_BUFFER_SIZE"); _GL_BUFFER_SIZEReady = true; } return _GL_BUFFER_SIZEContent; } }
        private static int _GL_BUFFER_SIZEContent = default;
        private static bool _GL_BUFFER_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_BUFFER_USAGE"/>
        /// </summary>
        public static int GL_BUFFER_USAGE { get { if (!_GL_BUFFER_USAGEReady) { _GL_BUFFER_USAGEContent = SGetField<int>(LocalBridgeClazz, "GL_BUFFER_USAGE"); _GL_BUFFER_USAGEReady = true; } return _GL_BUFFER_USAGEContent; } }
        private static int _GL_BUFFER_USAGEContent = default;
        private static bool _GL_BUFFER_USAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_CLIENT_ACTIVE_TEXTURE"/>
        /// </summary>
        public static int GL_CLIENT_ACTIVE_TEXTURE { get { if (!_GL_CLIENT_ACTIVE_TEXTUREReady) { _GL_CLIENT_ACTIVE_TEXTUREContent = SGetField<int>(LocalBridgeClazz, "GL_CLIENT_ACTIVE_TEXTURE"); _GL_CLIENT_ACTIVE_TEXTUREReady = true; } return _GL_CLIENT_ACTIVE_TEXTUREContent; } }
        private static int _GL_CLIENT_ACTIVE_TEXTUREContent = default;
        private static bool _GL_CLIENT_ACTIVE_TEXTUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_CLIP_PLANE0"/>
        /// </summary>
        public static int GL_CLIP_PLANE0 { get { if (!_GL_CLIP_PLANE0Ready) { _GL_CLIP_PLANE0Content = SGetField<int>(LocalBridgeClazz, "GL_CLIP_PLANE0"); _GL_CLIP_PLANE0Ready = true; } return _GL_CLIP_PLANE0Content; } }
        private static int _GL_CLIP_PLANE0Content = default;
        private static bool _GL_CLIP_PLANE0Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_CLIP_PLANE1"/>
        /// </summary>
        public static int GL_CLIP_PLANE1 { get { if (!_GL_CLIP_PLANE1Ready) { _GL_CLIP_PLANE1Content = SGetField<int>(LocalBridgeClazz, "GL_CLIP_PLANE1"); _GL_CLIP_PLANE1Ready = true; } return _GL_CLIP_PLANE1Content; } }
        private static int _GL_CLIP_PLANE1Content = default;
        private static bool _GL_CLIP_PLANE1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_CLIP_PLANE2"/>
        /// </summary>
        public static int GL_CLIP_PLANE2 { get { if (!_GL_CLIP_PLANE2Ready) { _GL_CLIP_PLANE2Content = SGetField<int>(LocalBridgeClazz, "GL_CLIP_PLANE2"); _GL_CLIP_PLANE2Ready = true; } return _GL_CLIP_PLANE2Content; } }
        private static int _GL_CLIP_PLANE2Content = default;
        private static bool _GL_CLIP_PLANE2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_CLIP_PLANE3"/>
        /// </summary>
        public static int GL_CLIP_PLANE3 { get { if (!_GL_CLIP_PLANE3Ready) { _GL_CLIP_PLANE3Content = SGetField<int>(LocalBridgeClazz, "GL_CLIP_PLANE3"); _GL_CLIP_PLANE3Ready = true; } return _GL_CLIP_PLANE3Content; } }
        private static int _GL_CLIP_PLANE3Content = default;
        private static bool _GL_CLIP_PLANE3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_CLIP_PLANE4"/>
        /// </summary>
        public static int GL_CLIP_PLANE4 { get { if (!_GL_CLIP_PLANE4Ready) { _GL_CLIP_PLANE4Content = SGetField<int>(LocalBridgeClazz, "GL_CLIP_PLANE4"); _GL_CLIP_PLANE4Ready = true; } return _GL_CLIP_PLANE4Content; } }
        private static int _GL_CLIP_PLANE4Content = default;
        private static bool _GL_CLIP_PLANE4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_CLIP_PLANE5"/>
        /// </summary>
        public static int GL_CLIP_PLANE5 { get { if (!_GL_CLIP_PLANE5Ready) { _GL_CLIP_PLANE5Content = SGetField<int>(LocalBridgeClazz, "GL_CLIP_PLANE5"); _GL_CLIP_PLANE5Ready = true; } return _GL_CLIP_PLANE5Content; } }
        private static int _GL_CLIP_PLANE5Content = default;
        private static bool _GL_CLIP_PLANE5Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_COLOR_ARRAY_BUFFER_BINDING"/>
        /// </summary>
        public static int GL_COLOR_ARRAY_BUFFER_BINDING { get { if (!_GL_COLOR_ARRAY_BUFFER_BINDINGReady) { _GL_COLOR_ARRAY_BUFFER_BINDINGContent = SGetField<int>(LocalBridgeClazz, "GL_COLOR_ARRAY_BUFFER_BINDING"); _GL_COLOR_ARRAY_BUFFER_BINDINGReady = true; } return _GL_COLOR_ARRAY_BUFFER_BINDINGContent; } }
        private static int _GL_COLOR_ARRAY_BUFFER_BINDINGContent = default;
        private static bool _GL_COLOR_ARRAY_BUFFER_BINDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_COLOR_ARRAY_POINTER"/>
        /// </summary>
        public static int GL_COLOR_ARRAY_POINTER { get { if (!_GL_COLOR_ARRAY_POINTERReady) { _GL_COLOR_ARRAY_POINTERContent = SGetField<int>(LocalBridgeClazz, "GL_COLOR_ARRAY_POINTER"); _GL_COLOR_ARRAY_POINTERReady = true; } return _GL_COLOR_ARRAY_POINTERContent; } }
        private static int _GL_COLOR_ARRAY_POINTERContent = default;
        private static bool _GL_COLOR_ARRAY_POINTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_COLOR_ARRAY_SIZE"/>
        /// </summary>
        public static int GL_COLOR_ARRAY_SIZE { get { if (!_GL_COLOR_ARRAY_SIZEReady) { _GL_COLOR_ARRAY_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_COLOR_ARRAY_SIZE"); _GL_COLOR_ARRAY_SIZEReady = true; } return _GL_COLOR_ARRAY_SIZEContent; } }
        private static int _GL_COLOR_ARRAY_SIZEContent = default;
        private static bool _GL_COLOR_ARRAY_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_COLOR_ARRAY_STRIDE"/>
        /// </summary>
        public static int GL_COLOR_ARRAY_STRIDE { get { if (!_GL_COLOR_ARRAY_STRIDEReady) { _GL_COLOR_ARRAY_STRIDEContent = SGetField<int>(LocalBridgeClazz, "GL_COLOR_ARRAY_STRIDE"); _GL_COLOR_ARRAY_STRIDEReady = true; } return _GL_COLOR_ARRAY_STRIDEContent; } }
        private static int _GL_COLOR_ARRAY_STRIDEContent = default;
        private static bool _GL_COLOR_ARRAY_STRIDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_COLOR_ARRAY_TYPE"/>
        /// </summary>
        public static int GL_COLOR_ARRAY_TYPE { get { if (!_GL_COLOR_ARRAY_TYPEReady) { _GL_COLOR_ARRAY_TYPEContent = SGetField<int>(LocalBridgeClazz, "GL_COLOR_ARRAY_TYPE"); _GL_COLOR_ARRAY_TYPEReady = true; } return _GL_COLOR_ARRAY_TYPEContent; } }
        private static int _GL_COLOR_ARRAY_TYPEContent = default;
        private static bool _GL_COLOR_ARRAY_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_COLOR_CLEAR_VALUE"/>
        /// </summary>
        public static int GL_COLOR_CLEAR_VALUE { get { if (!_GL_COLOR_CLEAR_VALUEReady) { _GL_COLOR_CLEAR_VALUEContent = SGetField<int>(LocalBridgeClazz, "GL_COLOR_CLEAR_VALUE"); _GL_COLOR_CLEAR_VALUEReady = true; } return _GL_COLOR_CLEAR_VALUEContent; } }
        private static int _GL_COLOR_CLEAR_VALUEContent = default;
        private static bool _GL_COLOR_CLEAR_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_COLOR_WRITEMASK"/>
        /// </summary>
        public static int GL_COLOR_WRITEMASK { get { if (!_GL_COLOR_WRITEMASKReady) { _GL_COLOR_WRITEMASKContent = SGetField<int>(LocalBridgeClazz, "GL_COLOR_WRITEMASK"); _GL_COLOR_WRITEMASKReady = true; } return _GL_COLOR_WRITEMASKContent; } }
        private static int _GL_COLOR_WRITEMASKContent = default;
        private static bool _GL_COLOR_WRITEMASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_COMBINE"/>
        /// </summary>
        public static int GL_COMBINE { get { if (!_GL_COMBINEReady) { _GL_COMBINEContent = SGetField<int>(LocalBridgeClazz, "GL_COMBINE"); _GL_COMBINEReady = true; } return _GL_COMBINEContent; } }
        private static int _GL_COMBINEContent = default;
        private static bool _GL_COMBINEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_COMBINE_ALPHA"/>
        /// </summary>
        public static int GL_COMBINE_ALPHA { get { if (!_GL_COMBINE_ALPHAReady) { _GL_COMBINE_ALPHAContent = SGetField<int>(LocalBridgeClazz, "GL_COMBINE_ALPHA"); _GL_COMBINE_ALPHAReady = true; } return _GL_COMBINE_ALPHAContent; } }
        private static int _GL_COMBINE_ALPHAContent = default;
        private static bool _GL_COMBINE_ALPHAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_COMBINE_RGB"/>
        /// </summary>
        public static int GL_COMBINE_RGB { get { if (!_GL_COMBINE_RGBReady) { _GL_COMBINE_RGBContent = SGetField<int>(LocalBridgeClazz, "GL_COMBINE_RGB"); _GL_COMBINE_RGBReady = true; } return _GL_COMBINE_RGBContent; } }
        private static int _GL_COMBINE_RGBContent = default;
        private static bool _GL_COMBINE_RGBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_CONSTANT"/>
        /// </summary>
        public static int GL_CONSTANT { get { if (!_GL_CONSTANTReady) { _GL_CONSTANTContent = SGetField<int>(LocalBridgeClazz, "GL_CONSTANT"); _GL_CONSTANTReady = true; } return _GL_CONSTANTContent; } }
        private static int _GL_CONSTANTContent = default;
        private static bool _GL_CONSTANTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_COORD_REPLACE_OES"/>
        /// </summary>
        public static int GL_COORD_REPLACE_OES { get { if (!_GL_COORD_REPLACE_OESReady) { _GL_COORD_REPLACE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_COORD_REPLACE_OES"); _GL_COORD_REPLACE_OESReady = true; } return _GL_COORD_REPLACE_OESContent; } }
        private static int _GL_COORD_REPLACE_OESContent = default;
        private static bool _GL_COORD_REPLACE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_CULL_FACE_MODE"/>
        /// </summary>
        public static int GL_CULL_FACE_MODE { get { if (!_GL_CULL_FACE_MODEReady) { _GL_CULL_FACE_MODEContent = SGetField<int>(LocalBridgeClazz, "GL_CULL_FACE_MODE"); _GL_CULL_FACE_MODEReady = true; } return _GL_CULL_FACE_MODEContent; } }
        private static int _GL_CULL_FACE_MODEContent = default;
        private static bool _GL_CULL_FACE_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_CURRENT_COLOR"/>
        /// </summary>
        public static int GL_CURRENT_COLOR { get { if (!_GL_CURRENT_COLORReady) { _GL_CURRENT_COLORContent = SGetField<int>(LocalBridgeClazz, "GL_CURRENT_COLOR"); _GL_CURRENT_COLORReady = true; } return _GL_CURRENT_COLORContent; } }
        private static int _GL_CURRENT_COLORContent = default;
        private static bool _GL_CURRENT_COLORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_CURRENT_NORMAL"/>
        /// </summary>
        public static int GL_CURRENT_NORMAL { get { if (!_GL_CURRENT_NORMALReady) { _GL_CURRENT_NORMALContent = SGetField<int>(LocalBridgeClazz, "GL_CURRENT_NORMAL"); _GL_CURRENT_NORMALReady = true; } return _GL_CURRENT_NORMALContent; } }
        private static int _GL_CURRENT_NORMALContent = default;
        private static bool _GL_CURRENT_NORMALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_CURRENT_TEXTURE_COORDS"/>
        /// </summary>
        public static int GL_CURRENT_TEXTURE_COORDS { get { if (!_GL_CURRENT_TEXTURE_COORDSReady) { _GL_CURRENT_TEXTURE_COORDSContent = SGetField<int>(LocalBridgeClazz, "GL_CURRENT_TEXTURE_COORDS"); _GL_CURRENT_TEXTURE_COORDSReady = true; } return _GL_CURRENT_TEXTURE_COORDSContent; } }
        private static int _GL_CURRENT_TEXTURE_COORDSContent = default;
        private static bool _GL_CURRENT_TEXTURE_COORDSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_DEPTH_CLEAR_VALUE"/>
        /// </summary>
        public static int GL_DEPTH_CLEAR_VALUE { get { if (!_GL_DEPTH_CLEAR_VALUEReady) { _GL_DEPTH_CLEAR_VALUEContent = SGetField<int>(LocalBridgeClazz, "GL_DEPTH_CLEAR_VALUE"); _GL_DEPTH_CLEAR_VALUEReady = true; } return _GL_DEPTH_CLEAR_VALUEContent; } }
        private static int _GL_DEPTH_CLEAR_VALUEContent = default;
        private static bool _GL_DEPTH_CLEAR_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_DEPTH_FUNC"/>
        /// </summary>
        public static int GL_DEPTH_FUNC { get { if (!_GL_DEPTH_FUNCReady) { _GL_DEPTH_FUNCContent = SGetField<int>(LocalBridgeClazz, "GL_DEPTH_FUNC"); _GL_DEPTH_FUNCReady = true; } return _GL_DEPTH_FUNCContent; } }
        private static int _GL_DEPTH_FUNCContent = default;
        private static bool _GL_DEPTH_FUNCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_DEPTH_RANGE"/>
        /// </summary>
        public static int GL_DEPTH_RANGE { get { if (!_GL_DEPTH_RANGEReady) { _GL_DEPTH_RANGEContent = SGetField<int>(LocalBridgeClazz, "GL_DEPTH_RANGE"); _GL_DEPTH_RANGEReady = true; } return _GL_DEPTH_RANGEContent; } }
        private static int _GL_DEPTH_RANGEContent = default;
        private static bool _GL_DEPTH_RANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_DEPTH_WRITEMASK"/>
        /// </summary>
        public static int GL_DEPTH_WRITEMASK { get { if (!_GL_DEPTH_WRITEMASKReady) { _GL_DEPTH_WRITEMASKContent = SGetField<int>(LocalBridgeClazz, "GL_DEPTH_WRITEMASK"); _GL_DEPTH_WRITEMASKReady = true; } return _GL_DEPTH_WRITEMASKContent; } }
        private static int _GL_DEPTH_WRITEMASKContent = default;
        private static bool _GL_DEPTH_WRITEMASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_DOT3_RGB"/>
        /// </summary>
        public static int GL_DOT3_RGB { get { if (!_GL_DOT3_RGBReady) { _GL_DOT3_RGBContent = SGetField<int>(LocalBridgeClazz, "GL_DOT3_RGB"); _GL_DOT3_RGBReady = true; } return _GL_DOT3_RGBContent; } }
        private static int _GL_DOT3_RGBContent = default;
        private static bool _GL_DOT3_RGBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_DOT3_RGBA"/>
        /// </summary>
        public static int GL_DOT3_RGBA { get { if (!_GL_DOT3_RGBAReady) { _GL_DOT3_RGBAContent = SGetField<int>(LocalBridgeClazz, "GL_DOT3_RGBA"); _GL_DOT3_RGBAReady = true; } return _GL_DOT3_RGBAContent; } }
        private static int _GL_DOT3_RGBAContent = default;
        private static bool _GL_DOT3_RGBAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_DYNAMIC_DRAW"/>
        /// </summary>
        public static int GL_DYNAMIC_DRAW { get { if (!_GL_DYNAMIC_DRAWReady) { _GL_DYNAMIC_DRAWContent = SGetField<int>(LocalBridgeClazz, "GL_DYNAMIC_DRAW"); _GL_DYNAMIC_DRAWReady = true; } return _GL_DYNAMIC_DRAWContent; } }
        private static int _GL_DYNAMIC_DRAWContent = default;
        private static bool _GL_DYNAMIC_DRAWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_ELEMENT_ARRAY_BUFFER"/>
        /// </summary>
        public static int GL_ELEMENT_ARRAY_BUFFER { get { if (!_GL_ELEMENT_ARRAY_BUFFERReady) { _GL_ELEMENT_ARRAY_BUFFERContent = SGetField<int>(LocalBridgeClazz, "GL_ELEMENT_ARRAY_BUFFER"); _GL_ELEMENT_ARRAY_BUFFERReady = true; } return _GL_ELEMENT_ARRAY_BUFFERContent; } }
        private static int _GL_ELEMENT_ARRAY_BUFFERContent = default;
        private static bool _GL_ELEMENT_ARRAY_BUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_ELEMENT_ARRAY_BUFFER_BINDING"/>
        /// </summary>
        public static int GL_ELEMENT_ARRAY_BUFFER_BINDING { get { if (!_GL_ELEMENT_ARRAY_BUFFER_BINDINGReady) { _GL_ELEMENT_ARRAY_BUFFER_BINDINGContent = SGetField<int>(LocalBridgeClazz, "GL_ELEMENT_ARRAY_BUFFER_BINDING"); _GL_ELEMENT_ARRAY_BUFFER_BINDINGReady = true; } return _GL_ELEMENT_ARRAY_BUFFER_BINDINGContent; } }
        private static int _GL_ELEMENT_ARRAY_BUFFER_BINDINGContent = default;
        private static bool _GL_ELEMENT_ARRAY_BUFFER_BINDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_FRONT_FACE"/>
        /// </summary>
        public static int GL_FRONT_FACE { get { if (!_GL_FRONT_FACEReady) { _GL_FRONT_FACEContent = SGetField<int>(LocalBridgeClazz, "GL_FRONT_FACE"); _GL_FRONT_FACEReady = true; } return _GL_FRONT_FACEContent; } }
        private static int _GL_FRONT_FACEContent = default;
        private static bool _GL_FRONT_FACEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_GENERATE_MIPMAP"/>
        /// </summary>
        public static int GL_GENERATE_MIPMAP { get { if (!_GL_GENERATE_MIPMAPReady) { _GL_GENERATE_MIPMAPContent = SGetField<int>(LocalBridgeClazz, "GL_GENERATE_MIPMAP"); _GL_GENERATE_MIPMAPReady = true; } return _GL_GENERATE_MIPMAPContent; } }
        private static int _GL_GENERATE_MIPMAPContent = default;
        private static bool _GL_GENERATE_MIPMAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_GENERATE_MIPMAP_HINT"/>
        /// </summary>
        public static int GL_GENERATE_MIPMAP_HINT { get { if (!_GL_GENERATE_MIPMAP_HINTReady) { _GL_GENERATE_MIPMAP_HINTContent = SGetField<int>(LocalBridgeClazz, "GL_GENERATE_MIPMAP_HINT"); _GL_GENERATE_MIPMAP_HINTReady = true; } return _GL_GENERATE_MIPMAP_HINTContent; } }
        private static int _GL_GENERATE_MIPMAP_HINTContent = default;
        private static bool _GL_GENERATE_MIPMAP_HINTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_INTERPOLATE"/>
        /// </summary>
        public static int GL_INTERPOLATE { get { if (!_GL_INTERPOLATEReady) { _GL_INTERPOLATEContent = SGetField<int>(LocalBridgeClazz, "GL_INTERPOLATE"); _GL_INTERPOLATEReady = true; } return _GL_INTERPOLATEContent; } }
        private static int _GL_INTERPOLATEContent = default;
        private static bool _GL_INTERPOLATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_LINE_WIDTH"/>
        /// </summary>
        public static int GL_LINE_WIDTH { get { if (!_GL_LINE_WIDTHReady) { _GL_LINE_WIDTHContent = SGetField<int>(LocalBridgeClazz, "GL_LINE_WIDTH"); _GL_LINE_WIDTHReady = true; } return _GL_LINE_WIDTHContent; } }
        private static int _GL_LINE_WIDTHContent = default;
        private static bool _GL_LINE_WIDTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_LOGIC_OP_MODE"/>
        /// </summary>
        public static int GL_LOGIC_OP_MODE { get { if (!_GL_LOGIC_OP_MODEReady) { _GL_LOGIC_OP_MODEContent = SGetField<int>(LocalBridgeClazz, "GL_LOGIC_OP_MODE"); _GL_LOGIC_OP_MODEReady = true; } return _GL_LOGIC_OP_MODEContent; } }
        private static int _GL_LOGIC_OP_MODEContent = default;
        private static bool _GL_LOGIC_OP_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_MATRIX_MODE"/>
        /// </summary>
        public static int GL_MATRIX_MODE { get { if (!_GL_MATRIX_MODEReady) { _GL_MATRIX_MODEContent = SGetField<int>(LocalBridgeClazz, "GL_MATRIX_MODE"); _GL_MATRIX_MODEReady = true; } return _GL_MATRIX_MODEContent; } }
        private static int _GL_MATRIX_MODEContent = default;
        private static bool _GL_MATRIX_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_MAX_CLIP_PLANES"/>
        /// </summary>
        public static int GL_MAX_CLIP_PLANES { get { if (!_GL_MAX_CLIP_PLANESReady) { _GL_MAX_CLIP_PLANESContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_CLIP_PLANES"); _GL_MAX_CLIP_PLANESReady = true; } return _GL_MAX_CLIP_PLANESContent; } }
        private static int _GL_MAX_CLIP_PLANESContent = default;
        private static bool _GL_MAX_CLIP_PLANESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_MODELVIEW_MATRIX"/>
        /// </summary>
        public static int GL_MODELVIEW_MATRIX { get { if (!_GL_MODELVIEW_MATRIXReady) { _GL_MODELVIEW_MATRIXContent = SGetField<int>(LocalBridgeClazz, "GL_MODELVIEW_MATRIX"); _GL_MODELVIEW_MATRIXReady = true; } return _GL_MODELVIEW_MATRIXContent; } }
        private static int _GL_MODELVIEW_MATRIXContent = default;
        private static bool _GL_MODELVIEW_MATRIXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES"/>
        /// </summary>
        public static int GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES { get { if (!_GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OESReady) { _GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OESContent = SGetField<int>(LocalBridgeClazz, "GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES"); _GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OESReady = true; } return _GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OESContent; } }
        private static int _GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OESContent = default;
        private static bool _GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_MODELVIEW_STACK_DEPTH"/>
        /// </summary>
        public static int GL_MODELVIEW_STACK_DEPTH { get { if (!_GL_MODELVIEW_STACK_DEPTHReady) { _GL_MODELVIEW_STACK_DEPTHContent = SGetField<int>(LocalBridgeClazz, "GL_MODELVIEW_STACK_DEPTH"); _GL_MODELVIEW_STACK_DEPTHReady = true; } return _GL_MODELVIEW_STACK_DEPTHContent; } }
        private static int _GL_MODELVIEW_STACK_DEPTHContent = default;
        private static bool _GL_MODELVIEW_STACK_DEPTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_NORMAL_ARRAY_BUFFER_BINDING"/>
        /// </summary>
        public static int GL_NORMAL_ARRAY_BUFFER_BINDING { get { if (!_GL_NORMAL_ARRAY_BUFFER_BINDINGReady) { _GL_NORMAL_ARRAY_BUFFER_BINDINGContent = SGetField<int>(LocalBridgeClazz, "GL_NORMAL_ARRAY_BUFFER_BINDING"); _GL_NORMAL_ARRAY_BUFFER_BINDINGReady = true; } return _GL_NORMAL_ARRAY_BUFFER_BINDINGContent; } }
        private static int _GL_NORMAL_ARRAY_BUFFER_BINDINGContent = default;
        private static bool _GL_NORMAL_ARRAY_BUFFER_BINDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_NORMAL_ARRAY_POINTER"/>
        /// </summary>
        public static int GL_NORMAL_ARRAY_POINTER { get { if (!_GL_NORMAL_ARRAY_POINTERReady) { _GL_NORMAL_ARRAY_POINTERContent = SGetField<int>(LocalBridgeClazz, "GL_NORMAL_ARRAY_POINTER"); _GL_NORMAL_ARRAY_POINTERReady = true; } return _GL_NORMAL_ARRAY_POINTERContent; } }
        private static int _GL_NORMAL_ARRAY_POINTERContent = default;
        private static bool _GL_NORMAL_ARRAY_POINTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_NORMAL_ARRAY_STRIDE"/>
        /// </summary>
        public static int GL_NORMAL_ARRAY_STRIDE { get { if (!_GL_NORMAL_ARRAY_STRIDEReady) { _GL_NORMAL_ARRAY_STRIDEContent = SGetField<int>(LocalBridgeClazz, "GL_NORMAL_ARRAY_STRIDE"); _GL_NORMAL_ARRAY_STRIDEReady = true; } return _GL_NORMAL_ARRAY_STRIDEContent; } }
        private static int _GL_NORMAL_ARRAY_STRIDEContent = default;
        private static bool _GL_NORMAL_ARRAY_STRIDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_NORMAL_ARRAY_TYPE"/>
        /// </summary>
        public static int GL_NORMAL_ARRAY_TYPE { get { if (!_GL_NORMAL_ARRAY_TYPEReady) { _GL_NORMAL_ARRAY_TYPEContent = SGetField<int>(LocalBridgeClazz, "GL_NORMAL_ARRAY_TYPE"); _GL_NORMAL_ARRAY_TYPEReady = true; } return _GL_NORMAL_ARRAY_TYPEContent; } }
        private static int _GL_NORMAL_ARRAY_TYPEContent = default;
        private static bool _GL_NORMAL_ARRAY_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_OPERAND0_ALPHA"/>
        /// </summary>
        public static int GL_OPERAND0_ALPHA { get { if (!_GL_OPERAND0_ALPHAReady) { _GL_OPERAND0_ALPHAContent = SGetField<int>(LocalBridgeClazz, "GL_OPERAND0_ALPHA"); _GL_OPERAND0_ALPHAReady = true; } return _GL_OPERAND0_ALPHAContent; } }
        private static int _GL_OPERAND0_ALPHAContent = default;
        private static bool _GL_OPERAND0_ALPHAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_OPERAND0_RGB"/>
        /// </summary>
        public static int GL_OPERAND0_RGB { get { if (!_GL_OPERAND0_RGBReady) { _GL_OPERAND0_RGBContent = SGetField<int>(LocalBridgeClazz, "GL_OPERAND0_RGB"); _GL_OPERAND0_RGBReady = true; } return _GL_OPERAND0_RGBContent; } }
        private static int _GL_OPERAND0_RGBContent = default;
        private static bool _GL_OPERAND0_RGBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_OPERAND1_ALPHA"/>
        /// </summary>
        public static int GL_OPERAND1_ALPHA { get { if (!_GL_OPERAND1_ALPHAReady) { _GL_OPERAND1_ALPHAContent = SGetField<int>(LocalBridgeClazz, "GL_OPERAND1_ALPHA"); _GL_OPERAND1_ALPHAReady = true; } return _GL_OPERAND1_ALPHAContent; } }
        private static int _GL_OPERAND1_ALPHAContent = default;
        private static bool _GL_OPERAND1_ALPHAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_OPERAND1_RGB"/>
        /// </summary>
        public static int GL_OPERAND1_RGB { get { if (!_GL_OPERAND1_RGBReady) { _GL_OPERAND1_RGBContent = SGetField<int>(LocalBridgeClazz, "GL_OPERAND1_RGB"); _GL_OPERAND1_RGBReady = true; } return _GL_OPERAND1_RGBContent; } }
        private static int _GL_OPERAND1_RGBContent = default;
        private static bool _GL_OPERAND1_RGBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_OPERAND2_ALPHA"/>
        /// </summary>
        public static int GL_OPERAND2_ALPHA { get { if (!_GL_OPERAND2_ALPHAReady) { _GL_OPERAND2_ALPHAContent = SGetField<int>(LocalBridgeClazz, "GL_OPERAND2_ALPHA"); _GL_OPERAND2_ALPHAReady = true; } return _GL_OPERAND2_ALPHAContent; } }
        private static int _GL_OPERAND2_ALPHAContent = default;
        private static bool _GL_OPERAND2_ALPHAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_OPERAND2_RGB"/>
        /// </summary>
        public static int GL_OPERAND2_RGB { get { if (!_GL_OPERAND2_RGBReady) { _GL_OPERAND2_RGBContent = SGetField<int>(LocalBridgeClazz, "GL_OPERAND2_RGB"); _GL_OPERAND2_RGBReady = true; } return _GL_OPERAND2_RGBContent; } }
        private static int _GL_OPERAND2_RGBContent = default;
        private static bool _GL_OPERAND2_RGBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_POINT_DISTANCE_ATTENUATION"/>
        /// </summary>
        public static int GL_POINT_DISTANCE_ATTENUATION { get { if (!_GL_POINT_DISTANCE_ATTENUATIONReady) { _GL_POINT_DISTANCE_ATTENUATIONContent = SGetField<int>(LocalBridgeClazz, "GL_POINT_DISTANCE_ATTENUATION"); _GL_POINT_DISTANCE_ATTENUATIONReady = true; } return _GL_POINT_DISTANCE_ATTENUATIONContent; } }
        private static int _GL_POINT_DISTANCE_ATTENUATIONContent = default;
        private static bool _GL_POINT_DISTANCE_ATTENUATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_POINT_FADE_THRESHOLD_SIZE"/>
        /// </summary>
        public static int GL_POINT_FADE_THRESHOLD_SIZE { get { if (!_GL_POINT_FADE_THRESHOLD_SIZEReady) { _GL_POINT_FADE_THRESHOLD_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_POINT_FADE_THRESHOLD_SIZE"); _GL_POINT_FADE_THRESHOLD_SIZEReady = true; } return _GL_POINT_FADE_THRESHOLD_SIZEContent; } }
        private static int _GL_POINT_FADE_THRESHOLD_SIZEContent = default;
        private static bool _GL_POINT_FADE_THRESHOLD_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_POINT_SIZE"/>
        /// </summary>
        public static int GL_POINT_SIZE { get { if (!_GL_POINT_SIZEReady) { _GL_POINT_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_POINT_SIZE"); _GL_POINT_SIZEReady = true; } return _GL_POINT_SIZEContent; } }
        private static int _GL_POINT_SIZEContent = default;
        private static bool _GL_POINT_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES"/>
        /// </summary>
        public static int GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES { get { if (!_GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OESReady) { _GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OESContent = SGetField<int>(LocalBridgeClazz, "GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES"); _GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OESReady = true; } return _GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OESContent; } }
        private static int _GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OESContent = default;
        private static bool _GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_POINT_SIZE_ARRAY_OES"/>
        /// </summary>
        public static int GL_POINT_SIZE_ARRAY_OES { get { if (!_GL_POINT_SIZE_ARRAY_OESReady) { _GL_POINT_SIZE_ARRAY_OESContent = SGetField<int>(LocalBridgeClazz, "GL_POINT_SIZE_ARRAY_OES"); _GL_POINT_SIZE_ARRAY_OESReady = true; } return _GL_POINT_SIZE_ARRAY_OESContent; } }
        private static int _GL_POINT_SIZE_ARRAY_OESContent = default;
        private static bool _GL_POINT_SIZE_ARRAY_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_POINT_SIZE_ARRAY_POINTER_OES"/>
        /// </summary>
        public static int GL_POINT_SIZE_ARRAY_POINTER_OES { get { if (!_GL_POINT_SIZE_ARRAY_POINTER_OESReady) { _GL_POINT_SIZE_ARRAY_POINTER_OESContent = SGetField<int>(LocalBridgeClazz, "GL_POINT_SIZE_ARRAY_POINTER_OES"); _GL_POINT_SIZE_ARRAY_POINTER_OESReady = true; } return _GL_POINT_SIZE_ARRAY_POINTER_OESContent; } }
        private static int _GL_POINT_SIZE_ARRAY_POINTER_OESContent = default;
        private static bool _GL_POINT_SIZE_ARRAY_POINTER_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_POINT_SIZE_ARRAY_STRIDE_OES"/>
        /// </summary>
        public static int GL_POINT_SIZE_ARRAY_STRIDE_OES { get { if (!_GL_POINT_SIZE_ARRAY_STRIDE_OESReady) { _GL_POINT_SIZE_ARRAY_STRIDE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_POINT_SIZE_ARRAY_STRIDE_OES"); _GL_POINT_SIZE_ARRAY_STRIDE_OESReady = true; } return _GL_POINT_SIZE_ARRAY_STRIDE_OESContent; } }
        private static int _GL_POINT_SIZE_ARRAY_STRIDE_OESContent = default;
        private static bool _GL_POINT_SIZE_ARRAY_STRIDE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_POINT_SIZE_ARRAY_TYPE_OES"/>
        /// </summary>
        public static int GL_POINT_SIZE_ARRAY_TYPE_OES { get { if (!_GL_POINT_SIZE_ARRAY_TYPE_OESReady) { _GL_POINT_SIZE_ARRAY_TYPE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_POINT_SIZE_ARRAY_TYPE_OES"); _GL_POINT_SIZE_ARRAY_TYPE_OESReady = true; } return _GL_POINT_SIZE_ARRAY_TYPE_OESContent; } }
        private static int _GL_POINT_SIZE_ARRAY_TYPE_OESContent = default;
        private static bool _GL_POINT_SIZE_ARRAY_TYPE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_POINT_SIZE_MAX"/>
        /// </summary>
        public static int GL_POINT_SIZE_MAX { get { if (!_GL_POINT_SIZE_MAXReady) { _GL_POINT_SIZE_MAXContent = SGetField<int>(LocalBridgeClazz, "GL_POINT_SIZE_MAX"); _GL_POINT_SIZE_MAXReady = true; } return _GL_POINT_SIZE_MAXContent; } }
        private static int _GL_POINT_SIZE_MAXContent = default;
        private static bool _GL_POINT_SIZE_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_POINT_SIZE_MIN"/>
        /// </summary>
        public static int GL_POINT_SIZE_MIN { get { if (!_GL_POINT_SIZE_MINReady) { _GL_POINT_SIZE_MINContent = SGetField<int>(LocalBridgeClazz, "GL_POINT_SIZE_MIN"); _GL_POINT_SIZE_MINReady = true; } return _GL_POINT_SIZE_MINContent; } }
        private static int _GL_POINT_SIZE_MINContent = default;
        private static bool _GL_POINT_SIZE_MINReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_POINT_SPRITE_OES"/>
        /// </summary>
        public static int GL_POINT_SPRITE_OES { get { if (!_GL_POINT_SPRITE_OESReady) { _GL_POINT_SPRITE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_POINT_SPRITE_OES"); _GL_POINT_SPRITE_OESReady = true; } return _GL_POINT_SPRITE_OESContent; } }
        private static int _GL_POINT_SPRITE_OESContent = default;
        private static bool _GL_POINT_SPRITE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_POLYGON_OFFSET_FACTOR"/>
        /// </summary>
        public static int GL_POLYGON_OFFSET_FACTOR { get { if (!_GL_POLYGON_OFFSET_FACTORReady) { _GL_POLYGON_OFFSET_FACTORContent = SGetField<int>(LocalBridgeClazz, "GL_POLYGON_OFFSET_FACTOR"); _GL_POLYGON_OFFSET_FACTORReady = true; } return _GL_POLYGON_OFFSET_FACTORContent; } }
        private static int _GL_POLYGON_OFFSET_FACTORContent = default;
        private static bool _GL_POLYGON_OFFSET_FACTORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_POLYGON_OFFSET_UNITS"/>
        /// </summary>
        public static int GL_POLYGON_OFFSET_UNITS { get { if (!_GL_POLYGON_OFFSET_UNITSReady) { _GL_POLYGON_OFFSET_UNITSContent = SGetField<int>(LocalBridgeClazz, "GL_POLYGON_OFFSET_UNITS"); _GL_POLYGON_OFFSET_UNITSReady = true; } return _GL_POLYGON_OFFSET_UNITSContent; } }
        private static int _GL_POLYGON_OFFSET_UNITSContent = default;
        private static bool _GL_POLYGON_OFFSET_UNITSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_PREVIOUS"/>
        /// </summary>
        public static int GL_PREVIOUS { get { if (!_GL_PREVIOUSReady) { _GL_PREVIOUSContent = SGetField<int>(LocalBridgeClazz, "GL_PREVIOUS"); _GL_PREVIOUSReady = true; } return _GL_PREVIOUSContent; } }
        private static int _GL_PREVIOUSContent = default;
        private static bool _GL_PREVIOUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_PRIMARY_COLOR"/>
        /// </summary>
        public static int GL_PRIMARY_COLOR { get { if (!_GL_PRIMARY_COLORReady) { _GL_PRIMARY_COLORContent = SGetField<int>(LocalBridgeClazz, "GL_PRIMARY_COLOR"); _GL_PRIMARY_COLORReady = true; } return _GL_PRIMARY_COLORContent; } }
        private static int _GL_PRIMARY_COLORContent = default;
        private static bool _GL_PRIMARY_COLORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_PROJECTION_MATRIX"/>
        /// </summary>
        public static int GL_PROJECTION_MATRIX { get { if (!_GL_PROJECTION_MATRIXReady) { _GL_PROJECTION_MATRIXContent = SGetField<int>(LocalBridgeClazz, "GL_PROJECTION_MATRIX"); _GL_PROJECTION_MATRIXReady = true; } return _GL_PROJECTION_MATRIXContent; } }
        private static int _GL_PROJECTION_MATRIXContent = default;
        private static bool _GL_PROJECTION_MATRIXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES"/>
        /// </summary>
        public static int GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES { get { if (!_GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OESReady) { _GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OESContent = SGetField<int>(LocalBridgeClazz, "GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES"); _GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OESReady = true; } return _GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OESContent; } }
        private static int _GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OESContent = default;
        private static bool _GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_PROJECTION_STACK_DEPTH"/>
        /// </summary>
        public static int GL_PROJECTION_STACK_DEPTH { get { if (!_GL_PROJECTION_STACK_DEPTHReady) { _GL_PROJECTION_STACK_DEPTHContent = SGetField<int>(LocalBridgeClazz, "GL_PROJECTION_STACK_DEPTH"); _GL_PROJECTION_STACK_DEPTHReady = true; } return _GL_PROJECTION_STACK_DEPTHContent; } }
        private static int _GL_PROJECTION_STACK_DEPTHContent = default;
        private static bool _GL_PROJECTION_STACK_DEPTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_RGB_SCALE"/>
        /// </summary>
        public static int GL_RGB_SCALE { get { if (!_GL_RGB_SCALEReady) { _GL_RGB_SCALEContent = SGetField<int>(LocalBridgeClazz, "GL_RGB_SCALE"); _GL_RGB_SCALEReady = true; } return _GL_RGB_SCALEContent; } }
        private static int _GL_RGB_SCALEContent = default;
        private static bool _GL_RGB_SCALEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_SAMPLE_BUFFERS"/>
        /// </summary>
        public static int GL_SAMPLE_BUFFERS { get { if (!_GL_SAMPLE_BUFFERSReady) { _GL_SAMPLE_BUFFERSContent = SGetField<int>(LocalBridgeClazz, "GL_SAMPLE_BUFFERS"); _GL_SAMPLE_BUFFERSReady = true; } return _GL_SAMPLE_BUFFERSContent; } }
        private static int _GL_SAMPLE_BUFFERSContent = default;
        private static bool _GL_SAMPLE_BUFFERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_SAMPLE_COVERAGE_INVERT"/>
        /// </summary>
        public static int GL_SAMPLE_COVERAGE_INVERT { get { if (!_GL_SAMPLE_COVERAGE_INVERTReady) { _GL_SAMPLE_COVERAGE_INVERTContent = SGetField<int>(LocalBridgeClazz, "GL_SAMPLE_COVERAGE_INVERT"); _GL_SAMPLE_COVERAGE_INVERTReady = true; } return _GL_SAMPLE_COVERAGE_INVERTContent; } }
        private static int _GL_SAMPLE_COVERAGE_INVERTContent = default;
        private static bool _GL_SAMPLE_COVERAGE_INVERTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_SAMPLE_COVERAGE_VALUE"/>
        /// </summary>
        public static int GL_SAMPLE_COVERAGE_VALUE { get { if (!_GL_SAMPLE_COVERAGE_VALUEReady) { _GL_SAMPLE_COVERAGE_VALUEContent = SGetField<int>(LocalBridgeClazz, "GL_SAMPLE_COVERAGE_VALUE"); _GL_SAMPLE_COVERAGE_VALUEReady = true; } return _GL_SAMPLE_COVERAGE_VALUEContent; } }
        private static int _GL_SAMPLE_COVERAGE_VALUEContent = default;
        private static bool _GL_SAMPLE_COVERAGE_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_SAMPLES"/>
        /// </summary>
        public static int GL_SAMPLES { get { if (!_GL_SAMPLESReady) { _GL_SAMPLESContent = SGetField<int>(LocalBridgeClazz, "GL_SAMPLES"); _GL_SAMPLESReady = true; } return _GL_SAMPLESContent; } }
        private static int _GL_SAMPLESContent = default;
        private static bool _GL_SAMPLESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_SCISSOR_BOX"/>
        /// </summary>
        public static int GL_SCISSOR_BOX { get { if (!_GL_SCISSOR_BOXReady) { _GL_SCISSOR_BOXContent = SGetField<int>(LocalBridgeClazz, "GL_SCISSOR_BOX"); _GL_SCISSOR_BOXReady = true; } return _GL_SCISSOR_BOXContent; } }
        private static int _GL_SCISSOR_BOXContent = default;
        private static bool _GL_SCISSOR_BOXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_SHADE_MODEL"/>
        /// </summary>
        public static int GL_SHADE_MODEL { get { if (!_GL_SHADE_MODELReady) { _GL_SHADE_MODELContent = SGetField<int>(LocalBridgeClazz, "GL_SHADE_MODEL"); _GL_SHADE_MODELReady = true; } return _GL_SHADE_MODELContent; } }
        private static int _GL_SHADE_MODELContent = default;
        private static bool _GL_SHADE_MODELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_SRC0_ALPHA"/>
        /// </summary>
        public static int GL_SRC0_ALPHA { get { if (!_GL_SRC0_ALPHAReady) { _GL_SRC0_ALPHAContent = SGetField<int>(LocalBridgeClazz, "GL_SRC0_ALPHA"); _GL_SRC0_ALPHAReady = true; } return _GL_SRC0_ALPHAContent; } }
        private static int _GL_SRC0_ALPHAContent = default;
        private static bool _GL_SRC0_ALPHAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_SRC0_RGB"/>
        /// </summary>
        public static int GL_SRC0_RGB { get { if (!_GL_SRC0_RGBReady) { _GL_SRC0_RGBContent = SGetField<int>(LocalBridgeClazz, "GL_SRC0_RGB"); _GL_SRC0_RGBReady = true; } return _GL_SRC0_RGBContent; } }
        private static int _GL_SRC0_RGBContent = default;
        private static bool _GL_SRC0_RGBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_SRC1_ALPHA"/>
        /// </summary>
        public static int GL_SRC1_ALPHA { get { if (!_GL_SRC1_ALPHAReady) { _GL_SRC1_ALPHAContent = SGetField<int>(LocalBridgeClazz, "GL_SRC1_ALPHA"); _GL_SRC1_ALPHAReady = true; } return _GL_SRC1_ALPHAContent; } }
        private static int _GL_SRC1_ALPHAContent = default;
        private static bool _GL_SRC1_ALPHAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_SRC1_RGB"/>
        /// </summary>
        public static int GL_SRC1_RGB { get { if (!_GL_SRC1_RGBReady) { _GL_SRC1_RGBContent = SGetField<int>(LocalBridgeClazz, "GL_SRC1_RGB"); _GL_SRC1_RGBReady = true; } return _GL_SRC1_RGBContent; } }
        private static int _GL_SRC1_RGBContent = default;
        private static bool _GL_SRC1_RGBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_SRC2_ALPHA"/>
        /// </summary>
        public static int GL_SRC2_ALPHA { get { if (!_GL_SRC2_ALPHAReady) { _GL_SRC2_ALPHAContent = SGetField<int>(LocalBridgeClazz, "GL_SRC2_ALPHA"); _GL_SRC2_ALPHAReady = true; } return _GL_SRC2_ALPHAContent; } }
        private static int _GL_SRC2_ALPHAContent = default;
        private static bool _GL_SRC2_ALPHAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_SRC2_RGB"/>
        /// </summary>
        public static int GL_SRC2_RGB { get { if (!_GL_SRC2_RGBReady) { _GL_SRC2_RGBContent = SGetField<int>(LocalBridgeClazz, "GL_SRC2_RGB"); _GL_SRC2_RGBReady = true; } return _GL_SRC2_RGBContent; } }
        private static int _GL_SRC2_RGBContent = default;
        private static bool _GL_SRC2_RGBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_STATIC_DRAW"/>
        /// </summary>
        public static int GL_STATIC_DRAW { get { if (!_GL_STATIC_DRAWReady) { _GL_STATIC_DRAWContent = SGetField<int>(LocalBridgeClazz, "GL_STATIC_DRAW"); _GL_STATIC_DRAWReady = true; } return _GL_STATIC_DRAWContent; } }
        private static int _GL_STATIC_DRAWContent = default;
        private static bool _GL_STATIC_DRAWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_STENCIL_CLEAR_VALUE"/>
        /// </summary>
        public static int GL_STENCIL_CLEAR_VALUE { get { if (!_GL_STENCIL_CLEAR_VALUEReady) { _GL_STENCIL_CLEAR_VALUEContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_CLEAR_VALUE"); _GL_STENCIL_CLEAR_VALUEReady = true; } return _GL_STENCIL_CLEAR_VALUEContent; } }
        private static int _GL_STENCIL_CLEAR_VALUEContent = default;
        private static bool _GL_STENCIL_CLEAR_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_STENCIL_FAIL"/>
        /// </summary>
        public static int GL_STENCIL_FAIL { get { if (!_GL_STENCIL_FAILReady) { _GL_STENCIL_FAILContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_FAIL"); _GL_STENCIL_FAILReady = true; } return _GL_STENCIL_FAILContent; } }
        private static int _GL_STENCIL_FAILContent = default;
        private static bool _GL_STENCIL_FAILReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_STENCIL_FUNC"/>
        /// </summary>
        public static int GL_STENCIL_FUNC { get { if (!_GL_STENCIL_FUNCReady) { _GL_STENCIL_FUNCContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_FUNC"); _GL_STENCIL_FUNCReady = true; } return _GL_STENCIL_FUNCContent; } }
        private static int _GL_STENCIL_FUNCContent = default;
        private static bool _GL_STENCIL_FUNCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_STENCIL_PASS_DEPTH_FAIL"/>
        /// </summary>
        public static int GL_STENCIL_PASS_DEPTH_FAIL { get { if (!_GL_STENCIL_PASS_DEPTH_FAILReady) { _GL_STENCIL_PASS_DEPTH_FAILContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_PASS_DEPTH_FAIL"); _GL_STENCIL_PASS_DEPTH_FAILReady = true; } return _GL_STENCIL_PASS_DEPTH_FAILContent; } }
        private static int _GL_STENCIL_PASS_DEPTH_FAILContent = default;
        private static bool _GL_STENCIL_PASS_DEPTH_FAILReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_STENCIL_PASS_DEPTH_PASS"/>
        /// </summary>
        public static int GL_STENCIL_PASS_DEPTH_PASS { get { if (!_GL_STENCIL_PASS_DEPTH_PASSReady) { _GL_STENCIL_PASS_DEPTH_PASSContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_PASS_DEPTH_PASS"); _GL_STENCIL_PASS_DEPTH_PASSReady = true; } return _GL_STENCIL_PASS_DEPTH_PASSContent; } }
        private static int _GL_STENCIL_PASS_DEPTH_PASSContent = default;
        private static bool _GL_STENCIL_PASS_DEPTH_PASSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_STENCIL_REF"/>
        /// </summary>
        public static int GL_STENCIL_REF { get { if (!_GL_STENCIL_REFReady) { _GL_STENCIL_REFContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_REF"); _GL_STENCIL_REFReady = true; } return _GL_STENCIL_REFContent; } }
        private static int _GL_STENCIL_REFContent = default;
        private static bool _GL_STENCIL_REFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_STENCIL_VALUE_MASK"/>
        /// </summary>
        public static int GL_STENCIL_VALUE_MASK { get { if (!_GL_STENCIL_VALUE_MASKReady) { _GL_STENCIL_VALUE_MASKContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_VALUE_MASK"); _GL_STENCIL_VALUE_MASKReady = true; } return _GL_STENCIL_VALUE_MASKContent; } }
        private static int _GL_STENCIL_VALUE_MASKContent = default;
        private static bool _GL_STENCIL_VALUE_MASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_STENCIL_WRITEMASK"/>
        /// </summary>
        public static int GL_STENCIL_WRITEMASK { get { if (!_GL_STENCIL_WRITEMASKReady) { _GL_STENCIL_WRITEMASKContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_WRITEMASK"); _GL_STENCIL_WRITEMASKReady = true; } return _GL_STENCIL_WRITEMASKContent; } }
        private static int _GL_STENCIL_WRITEMASKContent = default;
        private static bool _GL_STENCIL_WRITEMASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_SUBTRACT"/>
        /// </summary>
        public static int GL_SUBTRACT { get { if (!_GL_SUBTRACTReady) { _GL_SUBTRACTContent = SGetField<int>(LocalBridgeClazz, "GL_SUBTRACT"); _GL_SUBTRACTReady = true; } return _GL_SUBTRACTContent; } }
        private static int _GL_SUBTRACTContent = default;
        private static bool _GL_SUBTRACTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_TEXTURE_BINDING_2D"/>
        /// </summary>
        public static int GL_TEXTURE_BINDING_2D { get { if (!_GL_TEXTURE_BINDING_2DReady) { _GL_TEXTURE_BINDING_2DContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_BINDING_2D"); _GL_TEXTURE_BINDING_2DReady = true; } return _GL_TEXTURE_BINDING_2DContent; } }
        private static int _GL_TEXTURE_BINDING_2DContent = default;
        private static bool _GL_TEXTURE_BINDING_2DReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING"/>
        /// </summary>
        public static int GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING { get { if (!_GL_TEXTURE_COORD_ARRAY_BUFFER_BINDINGReady) { _GL_TEXTURE_COORD_ARRAY_BUFFER_BINDINGContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING"); _GL_TEXTURE_COORD_ARRAY_BUFFER_BINDINGReady = true; } return _GL_TEXTURE_COORD_ARRAY_BUFFER_BINDINGContent; } }
        private static int _GL_TEXTURE_COORD_ARRAY_BUFFER_BINDINGContent = default;
        private static bool _GL_TEXTURE_COORD_ARRAY_BUFFER_BINDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_TEXTURE_COORD_ARRAY_POINTER"/>
        /// </summary>
        public static int GL_TEXTURE_COORD_ARRAY_POINTER { get { if (!_GL_TEXTURE_COORD_ARRAY_POINTERReady) { _GL_TEXTURE_COORD_ARRAY_POINTERContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_COORD_ARRAY_POINTER"); _GL_TEXTURE_COORD_ARRAY_POINTERReady = true; } return _GL_TEXTURE_COORD_ARRAY_POINTERContent; } }
        private static int _GL_TEXTURE_COORD_ARRAY_POINTERContent = default;
        private static bool _GL_TEXTURE_COORD_ARRAY_POINTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_TEXTURE_COORD_ARRAY_SIZE"/>
        /// </summary>
        public static int GL_TEXTURE_COORD_ARRAY_SIZE { get { if (!_GL_TEXTURE_COORD_ARRAY_SIZEReady) { _GL_TEXTURE_COORD_ARRAY_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_COORD_ARRAY_SIZE"); _GL_TEXTURE_COORD_ARRAY_SIZEReady = true; } return _GL_TEXTURE_COORD_ARRAY_SIZEContent; } }
        private static int _GL_TEXTURE_COORD_ARRAY_SIZEContent = default;
        private static bool _GL_TEXTURE_COORD_ARRAY_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_TEXTURE_COORD_ARRAY_STRIDE"/>
        /// </summary>
        public static int GL_TEXTURE_COORD_ARRAY_STRIDE { get { if (!_GL_TEXTURE_COORD_ARRAY_STRIDEReady) { _GL_TEXTURE_COORD_ARRAY_STRIDEContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_COORD_ARRAY_STRIDE"); _GL_TEXTURE_COORD_ARRAY_STRIDEReady = true; } return _GL_TEXTURE_COORD_ARRAY_STRIDEContent; } }
        private static int _GL_TEXTURE_COORD_ARRAY_STRIDEContent = default;
        private static bool _GL_TEXTURE_COORD_ARRAY_STRIDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_TEXTURE_COORD_ARRAY_TYPE"/>
        /// </summary>
        public static int GL_TEXTURE_COORD_ARRAY_TYPE { get { if (!_GL_TEXTURE_COORD_ARRAY_TYPEReady) { _GL_TEXTURE_COORD_ARRAY_TYPEContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_COORD_ARRAY_TYPE"); _GL_TEXTURE_COORD_ARRAY_TYPEReady = true; } return _GL_TEXTURE_COORD_ARRAY_TYPEContent; } }
        private static int _GL_TEXTURE_COORD_ARRAY_TYPEContent = default;
        private static bool _GL_TEXTURE_COORD_ARRAY_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_TEXTURE_MATRIX"/>
        /// </summary>
        public static int GL_TEXTURE_MATRIX { get { if (!_GL_TEXTURE_MATRIXReady) { _GL_TEXTURE_MATRIXContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_MATRIX"); _GL_TEXTURE_MATRIXReady = true; } return _GL_TEXTURE_MATRIXContent; } }
        private static int _GL_TEXTURE_MATRIXContent = default;
        private static bool _GL_TEXTURE_MATRIXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES"/>
        /// </summary>
        public static int GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES { get { if (!_GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OESReady) { _GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OESContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES"); _GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OESReady = true; } return _GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OESContent; } }
        private static int _GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OESContent = default;
        private static bool _GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_TEXTURE_STACK_DEPTH"/>
        /// </summary>
        public static int GL_TEXTURE_STACK_DEPTH { get { if (!_GL_TEXTURE_STACK_DEPTHReady) { _GL_TEXTURE_STACK_DEPTHContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_STACK_DEPTH"); _GL_TEXTURE_STACK_DEPTHReady = true; } return _GL_TEXTURE_STACK_DEPTHContent; } }
        private static int _GL_TEXTURE_STACK_DEPTHContent = default;
        private static bool _GL_TEXTURE_STACK_DEPTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_VERTEX_ARRAY_BUFFER_BINDING"/>
        /// </summary>
        public static int GL_VERTEX_ARRAY_BUFFER_BINDING { get { if (!_GL_VERTEX_ARRAY_BUFFER_BINDINGReady) { _GL_VERTEX_ARRAY_BUFFER_BINDINGContent = SGetField<int>(LocalBridgeClazz, "GL_VERTEX_ARRAY_BUFFER_BINDING"); _GL_VERTEX_ARRAY_BUFFER_BINDINGReady = true; } return _GL_VERTEX_ARRAY_BUFFER_BINDINGContent; } }
        private static int _GL_VERTEX_ARRAY_BUFFER_BINDINGContent = default;
        private static bool _GL_VERTEX_ARRAY_BUFFER_BINDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_VERTEX_ARRAY_POINTER"/>
        /// </summary>
        public static int GL_VERTEX_ARRAY_POINTER { get { if (!_GL_VERTEX_ARRAY_POINTERReady) { _GL_VERTEX_ARRAY_POINTERContent = SGetField<int>(LocalBridgeClazz, "GL_VERTEX_ARRAY_POINTER"); _GL_VERTEX_ARRAY_POINTERReady = true; } return _GL_VERTEX_ARRAY_POINTERContent; } }
        private static int _GL_VERTEX_ARRAY_POINTERContent = default;
        private static bool _GL_VERTEX_ARRAY_POINTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_VERTEX_ARRAY_SIZE"/>
        /// </summary>
        public static int GL_VERTEX_ARRAY_SIZE { get { if (!_GL_VERTEX_ARRAY_SIZEReady) { _GL_VERTEX_ARRAY_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_VERTEX_ARRAY_SIZE"); _GL_VERTEX_ARRAY_SIZEReady = true; } return _GL_VERTEX_ARRAY_SIZEContent; } }
        private static int _GL_VERTEX_ARRAY_SIZEContent = default;
        private static bool _GL_VERTEX_ARRAY_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_VERTEX_ARRAY_STRIDE"/>
        /// </summary>
        public static int GL_VERTEX_ARRAY_STRIDE { get { if (!_GL_VERTEX_ARRAY_STRIDEReady) { _GL_VERTEX_ARRAY_STRIDEContent = SGetField<int>(LocalBridgeClazz, "GL_VERTEX_ARRAY_STRIDE"); _GL_VERTEX_ARRAY_STRIDEReady = true; } return _GL_VERTEX_ARRAY_STRIDEContent; } }
        private static int _GL_VERTEX_ARRAY_STRIDEContent = default;
        private static bool _GL_VERTEX_ARRAY_STRIDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_VERTEX_ARRAY_TYPE"/>
        /// </summary>
        public static int GL_VERTEX_ARRAY_TYPE { get { if (!_GL_VERTEX_ARRAY_TYPEReady) { _GL_VERTEX_ARRAY_TYPEContent = SGetField<int>(LocalBridgeClazz, "GL_VERTEX_ARRAY_TYPE"); _GL_VERTEX_ARRAY_TYPEReady = true; } return _GL_VERTEX_ARRAY_TYPEContent; } }
        private static int _GL_VERTEX_ARRAY_TYPEContent = default;
        private static bool _GL_VERTEX_ARRAY_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_VIEWPORT"/>
        /// </summary>
        public static int GL_VIEWPORT { get { if (!_GL_VIEWPORTReady) { _GL_VIEWPORTContent = SGetField<int>(LocalBridgeClazz, "GL_VIEWPORT"); _GL_VIEWPORTReady = true; } return _GL_VIEWPORTContent; } }
        private static int _GL_VIEWPORTContent = default;
        private static bool _GL_VIEWPORTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#GL_WRITE_ONLY"/>
        /// </summary>
        public static int GL_WRITE_ONLY { get { if (!_GL_WRITE_ONLYReady) { _GL_WRITE_ONLYContent = SGetField<int>(LocalBridgeClazz, "GL_WRITE_ONLY"); _GL_WRITE_ONLYReady = true; } return _GL_WRITE_ONLYContent; } }
        private static int _GL_WRITE_ONLYContent = default;
        private static bool _GL_WRITE_ONLYReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glIsBuffer(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool GlIsBuffer(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "glIsBuffer", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glIsEnabled(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool GlIsEnabled(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "glIsEnabled", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glIsTexture(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool GlIsTexture(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "glIsTexture", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glBindBuffer(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlBindBuffer(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glBindBuffer", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glBufferData(int,int,java.nio.Buffer,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.Buffer"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlBufferData(int arg0, int arg1, Java.Nio.Buffer arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glBufferData", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glBufferSubData(int,int,int,java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.Buffer"/></param>
        public static void GlBufferSubData(int arg0, int arg1, int arg2, Java.Nio.Buffer arg3)
        {
            SExecute(LocalBridgeClazz, "glBufferSubData", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glClipPlanef(int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlClipPlanef(int arg0, float[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glClipPlanef", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glClipPlanef(int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlClipPlanef(int arg0, Java.Nio.FloatBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glClipPlanef", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glClipPlanex(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlClipPlanex(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glClipPlanex", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glClipPlanex(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlClipPlanex(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glClipPlanex", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glColor4ub(byte,byte,byte,byte)"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        /// <param name="arg2"><see cref="byte"/></param>
        /// <param name="arg3"><see cref="byte"/></param>
        public static void GlColor4ub(byte arg0, byte arg1, byte arg2, byte arg3)
        {
            SExecute(LocalBridgeClazz, "glColor4ub", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glColorPointer(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlColorPointer(int arg0, int arg1, int arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glColorPointer", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glDeleteBuffers(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlDeleteBuffers(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glDeleteBuffers", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glDeleteBuffers(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlDeleteBuffers(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glDeleteBuffers", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glDrawElements(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlDrawElements(int arg0, int arg1, int arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glDrawElements", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glGenBuffers(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlGenBuffers(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glGenBuffers", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glGenBuffers(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGenBuffers(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glGenBuffers", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glGetBooleanv(int,boolean[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlGetBooleanv(int arg0, bool[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glGetBooleanv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glGetBooleanv(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetBooleanv(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glGetBooleanv", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glGetBufferParameteriv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetBufferParameteriv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetBufferParameteriv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glGetBufferParameteriv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetBufferParameteriv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetBufferParameteriv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glGetClipPlanef(int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlGetClipPlanef(int arg0, float[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glGetClipPlanef", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glGetClipPlanef(int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlGetClipPlanef(int arg0, Java.Nio.FloatBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glGetClipPlanef", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glGetClipPlanex(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlGetClipPlanex(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glGetClipPlanex", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glGetClipPlanex(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetClipPlanex(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glGetClipPlanex", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glGetFixedv(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlGetFixedv(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glGetFixedv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glGetFixedv(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetFixedv(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glGetFixedv", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glGetFloatv(int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlGetFloatv(int arg0, float[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glGetFloatv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glGetFloatv(int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlGetFloatv(int arg0, Java.Nio.FloatBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glGetFloatv", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glGetLightfv(int,int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetLightfv(int arg0, int arg1, float[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetLightfv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glGetLightfv(int,int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlGetLightfv(int arg0, int arg1, Java.Nio.FloatBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetLightfv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glGetLightxv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetLightxv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetLightxv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glGetLightxv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetLightxv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetLightxv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glGetMaterialfv(int,int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetMaterialfv(int arg0, int arg1, float[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetMaterialfv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glGetMaterialfv(int,int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlGetMaterialfv(int arg0, int arg1, Java.Nio.FloatBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetMaterialfv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glGetMaterialxv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetMaterialxv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetMaterialxv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glGetMaterialxv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetMaterialxv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetMaterialxv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glGetTexEnvfv(int,int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetTexEnvfv(int arg0, int arg1, float[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetTexEnvfv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glGetTexEnvfv(int,int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlGetTexEnvfv(int arg0, int arg1, Java.Nio.FloatBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetTexEnvfv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glGetTexEnviv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetTexEnviv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetTexEnviv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glGetTexEnviv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetTexEnviv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetTexEnviv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glGetTexEnvxv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetTexEnvxv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetTexEnvxv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glGetTexEnvxv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetTexEnvxv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetTexEnvxv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glGetTexParameterfv(int,int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetTexParameterfv(int arg0, int arg1, float[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetTexParameterfv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glGetTexParameterfv(int,int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlGetTexParameterfv(int arg0, int arg1, Java.Nio.FloatBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetTexParameterfv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glGetTexParameteriv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetTexParameteriv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetTexParameteriv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glGetTexParameteriv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetTexParameteriv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetTexParameteriv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glGetTexParameterxv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetTexParameterxv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetTexParameterxv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glGetTexParameterxv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetTexParameterxv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetTexParameterxv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glNormalPointer(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlNormalPointer(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glNormalPointer", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glPointParameterf(int,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public static void GlPointParameterf(int arg0, float arg1)
        {
            SExecute(LocalBridgeClazz, "glPointParameterf", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glPointParameterfv(int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlPointParameterfv(int arg0, float[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glPointParameterfv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glPointParameterfv(int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlPointParameterfv(int arg0, Java.Nio.FloatBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glPointParameterfv", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glPointParameterx(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlPointParameterx(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glPointParameterx", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glPointParameterxv(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlPointParameterxv(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glPointParameterxv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glPointParameterxv(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlPointParameterxv(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glPointParameterxv", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glTexCoordPointer(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlTexCoordPointer(int arg0, int arg1, int arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glTexCoordPointer", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glTexEnvi(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlTexEnvi(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glTexEnvi", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glTexEnviv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlTexEnviv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glTexEnviv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glTexEnviv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlTexEnviv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glTexEnviv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glTexParameterfv(int,int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlTexParameterfv(int arg0, int arg1, float[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glTexParameterfv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glTexParameterfv(int,int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlTexParameterfv(int arg0, int arg1, Java.Nio.FloatBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glTexParameterfv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glTexParameteri(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlTexParameteri(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glTexParameteri", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glTexParameteriv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlTexParameteriv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glTexParameteriv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glTexParameteriv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlTexParameteriv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glTexParameteriv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glTexParameterxv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlTexParameterxv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glTexParameterxv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glTexParameterxv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlTexParameterxv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glTexParameterxv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glVertexPointer(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlVertexPointer(int arg0, int arg1, int arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glVertexPointer", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11.html#glPointSizePointerOES(int,int,java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.Buffer"/></param>
        public static void GlPointSizePointerOES(int arg0, int arg1, Java.Nio.Buffer arg2)
        {
            SExecute(LocalBridgeClazz, "glPointSizePointerOES", arg0, arg1, arg2);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
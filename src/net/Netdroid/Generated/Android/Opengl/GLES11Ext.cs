/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.6.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Opengl
{
    #region GLES11Ext
    public partial class GLES11Ext
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_3DC_X_AMD"/>
        /// </summary>
        public static int GL_3DC_X_AMD { get { if (!_GL_3DC_X_AMDReady) { _GL_3DC_X_AMDContent = SGetField<int>(LocalBridgeClazz, "GL_3DC_X_AMD"); _GL_3DC_X_AMDReady = true; } return _GL_3DC_X_AMDContent; } }
        private static int _GL_3DC_X_AMDContent = default;
        private static bool _GL_3DC_X_AMDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_3DC_XY_AMD"/>
        /// </summary>
        public static int GL_3DC_XY_AMD { get { if (!_GL_3DC_XY_AMDReady) { _GL_3DC_XY_AMDContent = SGetField<int>(LocalBridgeClazz, "GL_3DC_XY_AMD"); _GL_3DC_XY_AMDReady = true; } return _GL_3DC_XY_AMDContent; } }
        private static int _GL_3DC_XY_AMDContent = default;
        private static bool _GL_3DC_XY_AMDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_ATC_RGB_AMD"/>
        /// </summary>
        public static int GL_ATC_RGB_AMD { get { if (!_GL_ATC_RGB_AMDReady) { _GL_ATC_RGB_AMDContent = SGetField<int>(LocalBridgeClazz, "GL_ATC_RGB_AMD"); _GL_ATC_RGB_AMDReady = true; } return _GL_ATC_RGB_AMDContent; } }
        private static int _GL_ATC_RGB_AMDContent = default;
        private static bool _GL_ATC_RGB_AMDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_ATC_RGBA_EXPLICIT_ALPHA_AMD"/>
        /// </summary>
        public static int GL_ATC_RGBA_EXPLICIT_ALPHA_AMD { get { if (!_GL_ATC_RGBA_EXPLICIT_ALPHA_AMDReady) { _GL_ATC_RGBA_EXPLICIT_ALPHA_AMDContent = SGetField<int>(LocalBridgeClazz, "GL_ATC_RGBA_EXPLICIT_ALPHA_AMD"); _GL_ATC_RGBA_EXPLICIT_ALPHA_AMDReady = true; } return _GL_ATC_RGBA_EXPLICIT_ALPHA_AMDContent; } }
        private static int _GL_ATC_RGBA_EXPLICIT_ALPHA_AMDContent = default;
        private static bool _GL_ATC_RGBA_EXPLICIT_ALPHA_AMDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD"/>
        /// </summary>
        public static int GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD { get { if (!_GL_ATC_RGBA_INTERPOLATED_ALPHA_AMDReady) { _GL_ATC_RGBA_INTERPOLATED_ALPHA_AMDContent = SGetField<int>(LocalBridgeClazz, "GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD"); _GL_ATC_RGBA_INTERPOLATED_ALPHA_AMDReady = true; } return _GL_ATC_RGBA_INTERPOLATED_ALPHA_AMDContent; } }
        private static int _GL_ATC_RGBA_INTERPOLATED_ALPHA_AMDContent = default;
        private static bool _GL_ATC_RGBA_INTERPOLATED_ALPHA_AMDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_BGRA"/>
        /// </summary>
        public static int GL_BGRA { get { if (!_GL_BGRAReady) { _GL_BGRAContent = SGetField<int>(LocalBridgeClazz, "GL_BGRA"); _GL_BGRAReady = true; } return _GL_BGRAContent; } }
        private static int _GL_BGRAContent = default;
        private static bool _GL_BGRAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_BLEND_DST_ALPHA_OES"/>
        /// </summary>
        public static int GL_BLEND_DST_ALPHA_OES { get { if (!_GL_BLEND_DST_ALPHA_OESReady) { _GL_BLEND_DST_ALPHA_OESContent = SGetField<int>(LocalBridgeClazz, "GL_BLEND_DST_ALPHA_OES"); _GL_BLEND_DST_ALPHA_OESReady = true; } return _GL_BLEND_DST_ALPHA_OESContent; } }
        private static int _GL_BLEND_DST_ALPHA_OESContent = default;
        private static bool _GL_BLEND_DST_ALPHA_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_BLEND_DST_RGB_OES"/>
        /// </summary>
        public static int GL_BLEND_DST_RGB_OES { get { if (!_GL_BLEND_DST_RGB_OESReady) { _GL_BLEND_DST_RGB_OESContent = SGetField<int>(LocalBridgeClazz, "GL_BLEND_DST_RGB_OES"); _GL_BLEND_DST_RGB_OESReady = true; } return _GL_BLEND_DST_RGB_OESContent; } }
        private static int _GL_BLEND_DST_RGB_OESContent = default;
        private static bool _GL_BLEND_DST_RGB_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_BLEND_EQUATION_ALPHA_OES"/>
        /// </summary>
        public static int GL_BLEND_EQUATION_ALPHA_OES { get { if (!_GL_BLEND_EQUATION_ALPHA_OESReady) { _GL_BLEND_EQUATION_ALPHA_OESContent = SGetField<int>(LocalBridgeClazz, "GL_BLEND_EQUATION_ALPHA_OES"); _GL_BLEND_EQUATION_ALPHA_OESReady = true; } return _GL_BLEND_EQUATION_ALPHA_OESContent; } }
        private static int _GL_BLEND_EQUATION_ALPHA_OESContent = default;
        private static bool _GL_BLEND_EQUATION_ALPHA_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_BLEND_EQUATION_OES"/>
        /// </summary>
        public static int GL_BLEND_EQUATION_OES { get { if (!_GL_BLEND_EQUATION_OESReady) { _GL_BLEND_EQUATION_OESContent = SGetField<int>(LocalBridgeClazz, "GL_BLEND_EQUATION_OES"); _GL_BLEND_EQUATION_OESReady = true; } return _GL_BLEND_EQUATION_OESContent; } }
        private static int _GL_BLEND_EQUATION_OESContent = default;
        private static bool _GL_BLEND_EQUATION_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_BLEND_EQUATION_RGB_OES"/>
        /// </summary>
        public static int GL_BLEND_EQUATION_RGB_OES { get { if (!_GL_BLEND_EQUATION_RGB_OESReady) { _GL_BLEND_EQUATION_RGB_OESContent = SGetField<int>(LocalBridgeClazz, "GL_BLEND_EQUATION_RGB_OES"); _GL_BLEND_EQUATION_RGB_OESReady = true; } return _GL_BLEND_EQUATION_RGB_OESContent; } }
        private static int _GL_BLEND_EQUATION_RGB_OESContent = default;
        private static bool _GL_BLEND_EQUATION_RGB_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_BLEND_SRC_ALPHA_OES"/>
        /// </summary>
        public static int GL_BLEND_SRC_ALPHA_OES { get { if (!_GL_BLEND_SRC_ALPHA_OESReady) { _GL_BLEND_SRC_ALPHA_OESContent = SGetField<int>(LocalBridgeClazz, "GL_BLEND_SRC_ALPHA_OES"); _GL_BLEND_SRC_ALPHA_OESReady = true; } return _GL_BLEND_SRC_ALPHA_OESContent; } }
        private static int _GL_BLEND_SRC_ALPHA_OESContent = default;
        private static bool _GL_BLEND_SRC_ALPHA_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_BLEND_SRC_RGB_OES"/>
        /// </summary>
        public static int GL_BLEND_SRC_RGB_OES { get { if (!_GL_BLEND_SRC_RGB_OESReady) { _GL_BLEND_SRC_RGB_OESContent = SGetField<int>(LocalBridgeClazz, "GL_BLEND_SRC_RGB_OES"); _GL_BLEND_SRC_RGB_OESReady = true; } return _GL_BLEND_SRC_RGB_OESContent; } }
        private static int _GL_BLEND_SRC_RGB_OESContent = default;
        private static bool _GL_BLEND_SRC_RGB_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_BUFFER_ACCESS_OES"/>
        /// </summary>
        public static int GL_BUFFER_ACCESS_OES { get { if (!_GL_BUFFER_ACCESS_OESReady) { _GL_BUFFER_ACCESS_OESContent = SGetField<int>(LocalBridgeClazz, "GL_BUFFER_ACCESS_OES"); _GL_BUFFER_ACCESS_OESReady = true; } return _GL_BUFFER_ACCESS_OESContent; } }
        private static int _GL_BUFFER_ACCESS_OESContent = default;
        private static bool _GL_BUFFER_ACCESS_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_BUFFER_MAP_POINTER_OES"/>
        /// </summary>
        public static int GL_BUFFER_MAP_POINTER_OES { get { if (!_GL_BUFFER_MAP_POINTER_OESReady) { _GL_BUFFER_MAP_POINTER_OESContent = SGetField<int>(LocalBridgeClazz, "GL_BUFFER_MAP_POINTER_OES"); _GL_BUFFER_MAP_POINTER_OESReady = true; } return _GL_BUFFER_MAP_POINTER_OESContent; } }
        private static int _GL_BUFFER_MAP_POINTER_OESContent = default;
        private static bool _GL_BUFFER_MAP_POINTER_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_BUFFER_MAPPED_OES"/>
        /// </summary>
        public static int GL_BUFFER_MAPPED_OES { get { if (!_GL_BUFFER_MAPPED_OESReady) { _GL_BUFFER_MAPPED_OESContent = SGetField<int>(LocalBridgeClazz, "GL_BUFFER_MAPPED_OES"); _GL_BUFFER_MAPPED_OESReady = true; } return _GL_BUFFER_MAPPED_OESContent; } }
        private static int _GL_BUFFER_MAPPED_OESContent = default;
        private static bool _GL_BUFFER_MAPPED_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_COLOR_ATTACHMENT0_OES"/>
        /// </summary>
        public static int GL_COLOR_ATTACHMENT0_OES { get { if (!_GL_COLOR_ATTACHMENT0_OESReady) { _GL_COLOR_ATTACHMENT0_OESContent = SGetField<int>(LocalBridgeClazz, "GL_COLOR_ATTACHMENT0_OES"); _GL_COLOR_ATTACHMENT0_OESReady = true; } return _GL_COLOR_ATTACHMENT0_OESContent; } }
        private static int _GL_COLOR_ATTACHMENT0_OESContent = default;
        private static bool _GL_COLOR_ATTACHMENT0_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_CURRENT_PALETTE_MATRIX_OES"/>
        /// </summary>
        public static int GL_CURRENT_PALETTE_MATRIX_OES { get { if (!_GL_CURRENT_PALETTE_MATRIX_OESReady) { _GL_CURRENT_PALETTE_MATRIX_OESContent = SGetField<int>(LocalBridgeClazz, "GL_CURRENT_PALETTE_MATRIX_OES"); _GL_CURRENT_PALETTE_MATRIX_OESReady = true; } return _GL_CURRENT_PALETTE_MATRIX_OESContent; } }
        private static int _GL_CURRENT_PALETTE_MATRIX_OESContent = default;
        private static bool _GL_CURRENT_PALETTE_MATRIX_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_DECR_WRAP_OES"/>
        /// </summary>
        public static int GL_DECR_WRAP_OES { get { if (!_GL_DECR_WRAP_OESReady) { _GL_DECR_WRAP_OESContent = SGetField<int>(LocalBridgeClazz, "GL_DECR_WRAP_OES"); _GL_DECR_WRAP_OESReady = true; } return _GL_DECR_WRAP_OESContent; } }
        private static int _GL_DECR_WRAP_OESContent = default;
        private static bool _GL_DECR_WRAP_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_DEPTH_ATTACHMENT_OES"/>
        /// </summary>
        public static int GL_DEPTH_ATTACHMENT_OES { get { if (!_GL_DEPTH_ATTACHMENT_OESReady) { _GL_DEPTH_ATTACHMENT_OESContent = SGetField<int>(LocalBridgeClazz, "GL_DEPTH_ATTACHMENT_OES"); _GL_DEPTH_ATTACHMENT_OESReady = true; } return _GL_DEPTH_ATTACHMENT_OESContent; } }
        private static int _GL_DEPTH_ATTACHMENT_OESContent = default;
        private static bool _GL_DEPTH_ATTACHMENT_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_DEPTH_COMPONENT16_OES"/>
        /// </summary>
        public static int GL_DEPTH_COMPONENT16_OES { get { if (!_GL_DEPTH_COMPONENT16_OESReady) { _GL_DEPTH_COMPONENT16_OESContent = SGetField<int>(LocalBridgeClazz, "GL_DEPTH_COMPONENT16_OES"); _GL_DEPTH_COMPONENT16_OESReady = true; } return _GL_DEPTH_COMPONENT16_OESContent; } }
        private static int _GL_DEPTH_COMPONENT16_OESContent = default;
        private static bool _GL_DEPTH_COMPONENT16_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_DEPTH_COMPONENT24_OES"/>
        /// </summary>
        public static int GL_DEPTH_COMPONENT24_OES { get { if (!_GL_DEPTH_COMPONENT24_OESReady) { _GL_DEPTH_COMPONENT24_OESContent = SGetField<int>(LocalBridgeClazz, "GL_DEPTH_COMPONENT24_OES"); _GL_DEPTH_COMPONENT24_OESReady = true; } return _GL_DEPTH_COMPONENT24_OESContent; } }
        private static int _GL_DEPTH_COMPONENT24_OESContent = default;
        private static bool _GL_DEPTH_COMPONENT24_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_DEPTH_COMPONENT32_OES"/>
        /// </summary>
        public static int GL_DEPTH_COMPONENT32_OES { get { if (!_GL_DEPTH_COMPONENT32_OESReady) { _GL_DEPTH_COMPONENT32_OESContent = SGetField<int>(LocalBridgeClazz, "GL_DEPTH_COMPONENT32_OES"); _GL_DEPTH_COMPONENT32_OESReady = true; } return _GL_DEPTH_COMPONENT32_OESContent; } }
        private static int _GL_DEPTH_COMPONENT32_OESContent = default;
        private static bool _GL_DEPTH_COMPONENT32_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_DEPTH_STENCIL_OES"/>
        /// </summary>
        public static int GL_DEPTH_STENCIL_OES { get { if (!_GL_DEPTH_STENCIL_OESReady) { _GL_DEPTH_STENCIL_OESContent = SGetField<int>(LocalBridgeClazz, "GL_DEPTH_STENCIL_OES"); _GL_DEPTH_STENCIL_OESReady = true; } return _GL_DEPTH_STENCIL_OESContent; } }
        private static int _GL_DEPTH_STENCIL_OESContent = default;
        private static bool _GL_DEPTH_STENCIL_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_DEPTH24_STENCIL8_OES"/>
        /// </summary>
        public static int GL_DEPTH24_STENCIL8_OES { get { if (!_GL_DEPTH24_STENCIL8_OESReady) { _GL_DEPTH24_STENCIL8_OESContent = SGetField<int>(LocalBridgeClazz, "GL_DEPTH24_STENCIL8_OES"); _GL_DEPTH24_STENCIL8_OESReady = true; } return _GL_DEPTH24_STENCIL8_OESContent; } }
        private static int _GL_DEPTH24_STENCIL8_OESContent = default;
        private static bool _GL_DEPTH24_STENCIL8_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_ETC1_RGB8_OES"/>
        /// </summary>
        public static int GL_ETC1_RGB8_OES { get { if (!_GL_ETC1_RGB8_OESReady) { _GL_ETC1_RGB8_OESContent = SGetField<int>(LocalBridgeClazz, "GL_ETC1_RGB8_OES"); _GL_ETC1_RGB8_OESReady = true; } return _GL_ETC1_RGB8_OESContent; } }
        private static int _GL_ETC1_RGB8_OESContent = default;
        private static bool _GL_ETC1_RGB8_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_FIXED_OES"/>
        /// </summary>
        public static int GL_FIXED_OES { get { if (!_GL_FIXED_OESReady) { _GL_FIXED_OESContent = SGetField<int>(LocalBridgeClazz, "GL_FIXED_OES"); _GL_FIXED_OESReady = true; } return _GL_FIXED_OESContent; } }
        private static int _GL_FIXED_OESContent = default;
        private static bool _GL_FIXED_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES { get { if (!_GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OESReady) { _GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OESContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES"); _GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OESReady = true; } return _GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OESContent; } }
        private static int _GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OESContent = default;
        private static bool _GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES { get { if (!_GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OESReady) { _GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES"); _GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OESReady = true; } return _GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OESContent; } }
        private static int _GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OESContent = default;
        private static bool _GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES { get { if (!_GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OESReady) { _GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES"); _GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OESReady = true; } return _GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OESContent; } }
        private static int _GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OESContent = default;
        private static bool _GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES { get { if (!_GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OESReady) { _GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OESContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES"); _GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OESReady = true; } return _GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OESContent; } }
        private static int _GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OESContent = default;
        private static bool _GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_FRAMEBUFFER_BINDING_OES"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_BINDING_OES { get { if (!_GL_FRAMEBUFFER_BINDING_OESReady) { _GL_FRAMEBUFFER_BINDING_OESContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_BINDING_OES"); _GL_FRAMEBUFFER_BINDING_OESReady = true; } return _GL_FRAMEBUFFER_BINDING_OESContent; } }
        private static int _GL_FRAMEBUFFER_BINDING_OESContent = default;
        private static bool _GL_FRAMEBUFFER_BINDING_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_FRAMEBUFFER_COMPLETE_OES"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_COMPLETE_OES { get { if (!_GL_FRAMEBUFFER_COMPLETE_OESReady) { _GL_FRAMEBUFFER_COMPLETE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_COMPLETE_OES"); _GL_FRAMEBUFFER_COMPLETE_OESReady = true; } return _GL_FRAMEBUFFER_COMPLETE_OESContent; } }
        private static int _GL_FRAMEBUFFER_COMPLETE_OESContent = default;
        private static bool _GL_FRAMEBUFFER_COMPLETE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES { get { if (!_GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OESReady) { _GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OESContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES"); _GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OESReady = true; } return _GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OESContent; } }
        private static int _GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OESContent = default;
        private static bool _GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES { get { if (!_GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OESReady) { _GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OESContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES"); _GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OESReady = true; } return _GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OESContent; } }
        private static int _GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OESContent = default;
        private static bool _GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES { get { if (!_GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OESReady) { _GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OESContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES"); _GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OESReady = true; } return _GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OESContent; } }
        private static int _GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OESContent = default;
        private static bool _GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES { get { if (!_GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OESReady) { _GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OESContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES"); _GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OESReady = true; } return _GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OESContent; } }
        private static int _GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OESContent = default;
        private static bool _GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_FRAMEBUFFER_OES"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_OES { get { if (!_GL_FRAMEBUFFER_OESReady) { _GL_FRAMEBUFFER_OESContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_OES"); _GL_FRAMEBUFFER_OESReady = true; } return _GL_FRAMEBUFFER_OESContent; } }
        private static int _GL_FRAMEBUFFER_OESContent = default;
        private static bool _GL_FRAMEBUFFER_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_FRAMEBUFFER_UNSUPPORTED_OES"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_UNSUPPORTED_OES { get { if (!_GL_FRAMEBUFFER_UNSUPPORTED_OESReady) { _GL_FRAMEBUFFER_UNSUPPORTED_OESContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_UNSUPPORTED_OES"); _GL_FRAMEBUFFER_UNSUPPORTED_OESReady = true; } return _GL_FRAMEBUFFER_UNSUPPORTED_OESContent; } }
        private static int _GL_FRAMEBUFFER_UNSUPPORTED_OESContent = default;
        private static bool _GL_FRAMEBUFFER_UNSUPPORTED_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_FUNC_ADD_OES"/>
        /// </summary>
        public static int GL_FUNC_ADD_OES { get { if (!_GL_FUNC_ADD_OESReady) { _GL_FUNC_ADD_OESContent = SGetField<int>(LocalBridgeClazz, "GL_FUNC_ADD_OES"); _GL_FUNC_ADD_OESReady = true; } return _GL_FUNC_ADD_OESContent; } }
        private static int _GL_FUNC_ADD_OESContent = default;
        private static bool _GL_FUNC_ADD_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_FUNC_REVERSE_SUBTRACT_OES"/>
        /// </summary>
        public static int GL_FUNC_REVERSE_SUBTRACT_OES { get { if (!_GL_FUNC_REVERSE_SUBTRACT_OESReady) { _GL_FUNC_REVERSE_SUBTRACT_OESContent = SGetField<int>(LocalBridgeClazz, "GL_FUNC_REVERSE_SUBTRACT_OES"); _GL_FUNC_REVERSE_SUBTRACT_OESReady = true; } return _GL_FUNC_REVERSE_SUBTRACT_OESContent; } }
        private static int _GL_FUNC_REVERSE_SUBTRACT_OESContent = default;
        private static bool _GL_FUNC_REVERSE_SUBTRACT_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_FUNC_SUBTRACT_OES"/>
        /// </summary>
        public static int GL_FUNC_SUBTRACT_OES { get { if (!_GL_FUNC_SUBTRACT_OESReady) { _GL_FUNC_SUBTRACT_OESContent = SGetField<int>(LocalBridgeClazz, "GL_FUNC_SUBTRACT_OES"); _GL_FUNC_SUBTRACT_OESReady = true; } return _GL_FUNC_SUBTRACT_OESContent; } }
        private static int _GL_FUNC_SUBTRACT_OESContent = default;
        private static bool _GL_FUNC_SUBTRACT_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_INCR_WRAP_OES"/>
        /// </summary>
        public static int GL_INCR_WRAP_OES { get { if (!_GL_INCR_WRAP_OESReady) { _GL_INCR_WRAP_OESContent = SGetField<int>(LocalBridgeClazz, "GL_INCR_WRAP_OES"); _GL_INCR_WRAP_OESReady = true; } return _GL_INCR_WRAP_OESContent; } }
        private static int _GL_INCR_WRAP_OESContent = default;
        private static bool _GL_INCR_WRAP_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_INVALID_FRAMEBUFFER_OPERATION_OES"/>
        /// </summary>
        public static int GL_INVALID_FRAMEBUFFER_OPERATION_OES { get { if (!_GL_INVALID_FRAMEBUFFER_OPERATION_OESReady) { _GL_INVALID_FRAMEBUFFER_OPERATION_OESContent = SGetField<int>(LocalBridgeClazz, "GL_INVALID_FRAMEBUFFER_OPERATION_OES"); _GL_INVALID_FRAMEBUFFER_OPERATION_OESReady = true; } return _GL_INVALID_FRAMEBUFFER_OPERATION_OESContent; } }
        private static int _GL_INVALID_FRAMEBUFFER_OPERATION_OESContent = default;
        private static bool _GL_INVALID_FRAMEBUFFER_OPERATION_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES"/>
        /// </summary>
        public static int GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES { get { if (!_GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OESReady) { _GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OESContent = SGetField<int>(LocalBridgeClazz, "GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES"); _GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OESReady = true; } return _GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OESContent; } }
        private static int _GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OESContent = default;
        private static bool _GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_MATRIX_INDEX_ARRAY_OES"/>
        /// </summary>
        public static int GL_MATRIX_INDEX_ARRAY_OES { get { if (!_GL_MATRIX_INDEX_ARRAY_OESReady) { _GL_MATRIX_INDEX_ARRAY_OESContent = SGetField<int>(LocalBridgeClazz, "GL_MATRIX_INDEX_ARRAY_OES"); _GL_MATRIX_INDEX_ARRAY_OESReady = true; } return _GL_MATRIX_INDEX_ARRAY_OESContent; } }
        private static int _GL_MATRIX_INDEX_ARRAY_OESContent = default;
        private static bool _GL_MATRIX_INDEX_ARRAY_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_MATRIX_INDEX_ARRAY_POINTER_OES"/>
        /// </summary>
        public static int GL_MATRIX_INDEX_ARRAY_POINTER_OES { get { if (!_GL_MATRIX_INDEX_ARRAY_POINTER_OESReady) { _GL_MATRIX_INDEX_ARRAY_POINTER_OESContent = SGetField<int>(LocalBridgeClazz, "GL_MATRIX_INDEX_ARRAY_POINTER_OES"); _GL_MATRIX_INDEX_ARRAY_POINTER_OESReady = true; } return _GL_MATRIX_INDEX_ARRAY_POINTER_OESContent; } }
        private static int _GL_MATRIX_INDEX_ARRAY_POINTER_OESContent = default;
        private static bool _GL_MATRIX_INDEX_ARRAY_POINTER_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_MATRIX_INDEX_ARRAY_SIZE_OES"/>
        /// </summary>
        public static int GL_MATRIX_INDEX_ARRAY_SIZE_OES { get { if (!_GL_MATRIX_INDEX_ARRAY_SIZE_OESReady) { _GL_MATRIX_INDEX_ARRAY_SIZE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_MATRIX_INDEX_ARRAY_SIZE_OES"); _GL_MATRIX_INDEX_ARRAY_SIZE_OESReady = true; } return _GL_MATRIX_INDEX_ARRAY_SIZE_OESContent; } }
        private static int _GL_MATRIX_INDEX_ARRAY_SIZE_OESContent = default;
        private static bool _GL_MATRIX_INDEX_ARRAY_SIZE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_MATRIX_INDEX_ARRAY_STRIDE_OES"/>
        /// </summary>
        public static int GL_MATRIX_INDEX_ARRAY_STRIDE_OES { get { if (!_GL_MATRIX_INDEX_ARRAY_STRIDE_OESReady) { _GL_MATRIX_INDEX_ARRAY_STRIDE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_MATRIX_INDEX_ARRAY_STRIDE_OES"); _GL_MATRIX_INDEX_ARRAY_STRIDE_OESReady = true; } return _GL_MATRIX_INDEX_ARRAY_STRIDE_OESContent; } }
        private static int _GL_MATRIX_INDEX_ARRAY_STRIDE_OESContent = default;
        private static bool _GL_MATRIX_INDEX_ARRAY_STRIDE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_MATRIX_INDEX_ARRAY_TYPE_OES"/>
        /// </summary>
        public static int GL_MATRIX_INDEX_ARRAY_TYPE_OES { get { if (!_GL_MATRIX_INDEX_ARRAY_TYPE_OESReady) { _GL_MATRIX_INDEX_ARRAY_TYPE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_MATRIX_INDEX_ARRAY_TYPE_OES"); _GL_MATRIX_INDEX_ARRAY_TYPE_OESReady = true; } return _GL_MATRIX_INDEX_ARRAY_TYPE_OESContent; } }
        private static int _GL_MATRIX_INDEX_ARRAY_TYPE_OESContent = default;
        private static bool _GL_MATRIX_INDEX_ARRAY_TYPE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_MATRIX_PALETTE_OES"/>
        /// </summary>
        public static int GL_MATRIX_PALETTE_OES { get { if (!_GL_MATRIX_PALETTE_OESReady) { _GL_MATRIX_PALETTE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_MATRIX_PALETTE_OES"); _GL_MATRIX_PALETTE_OESReady = true; } return _GL_MATRIX_PALETTE_OESContent; } }
        private static int _GL_MATRIX_PALETTE_OESContent = default;
        private static bool _GL_MATRIX_PALETTE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES"/>
        /// </summary>
        public static int GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES { get { if (!_GL_MAX_CUBE_MAP_TEXTURE_SIZE_OESReady) { _GL_MAX_CUBE_MAP_TEXTURE_SIZE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES"); _GL_MAX_CUBE_MAP_TEXTURE_SIZE_OESReady = true; } return _GL_MAX_CUBE_MAP_TEXTURE_SIZE_OESContent; } }
        private static int _GL_MAX_CUBE_MAP_TEXTURE_SIZE_OESContent = default;
        private static bool _GL_MAX_CUBE_MAP_TEXTURE_SIZE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_MAX_PALETTE_MATRICES_OES"/>
        /// </summary>
        public static int GL_MAX_PALETTE_MATRICES_OES { get { if (!_GL_MAX_PALETTE_MATRICES_OESReady) { _GL_MAX_PALETTE_MATRICES_OESContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_PALETTE_MATRICES_OES"); _GL_MAX_PALETTE_MATRICES_OESReady = true; } return _GL_MAX_PALETTE_MATRICES_OESContent; } }
        private static int _GL_MAX_PALETTE_MATRICES_OESContent = default;
        private static bool _GL_MAX_PALETTE_MATRICES_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_MAX_RENDERBUFFER_SIZE_OES"/>
        /// </summary>
        public static int GL_MAX_RENDERBUFFER_SIZE_OES { get { if (!_GL_MAX_RENDERBUFFER_SIZE_OESReady) { _GL_MAX_RENDERBUFFER_SIZE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_RENDERBUFFER_SIZE_OES"); _GL_MAX_RENDERBUFFER_SIZE_OESReady = true; } return _GL_MAX_RENDERBUFFER_SIZE_OESContent; } }
        private static int _GL_MAX_RENDERBUFFER_SIZE_OESContent = default;
        private static bool _GL_MAX_RENDERBUFFER_SIZE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT"/>
        /// </summary>
        public static int GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT { get { if (!_GL_MAX_TEXTURE_MAX_ANISOTROPY_EXTReady) { _GL_MAX_TEXTURE_MAX_ANISOTROPY_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT"); _GL_MAX_TEXTURE_MAX_ANISOTROPY_EXTReady = true; } return _GL_MAX_TEXTURE_MAX_ANISOTROPY_EXTContent; } }
        private static int _GL_MAX_TEXTURE_MAX_ANISOTROPY_EXTContent = default;
        private static bool _GL_MAX_TEXTURE_MAX_ANISOTROPY_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_MAX_VERTEX_UNITS_OES"/>
        /// </summary>
        public static int GL_MAX_VERTEX_UNITS_OES { get { if (!_GL_MAX_VERTEX_UNITS_OESReady) { _GL_MAX_VERTEX_UNITS_OESContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_VERTEX_UNITS_OES"); _GL_MAX_VERTEX_UNITS_OESReady = true; } return _GL_MAX_VERTEX_UNITS_OESContent; } }
        private static int _GL_MAX_VERTEX_UNITS_OESContent = default;
        private static bool _GL_MAX_VERTEX_UNITS_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_MIRRORED_REPEAT_OES"/>
        /// </summary>
        public static int GL_MIRRORED_REPEAT_OES { get { if (!_GL_MIRRORED_REPEAT_OESReady) { _GL_MIRRORED_REPEAT_OESContent = SGetField<int>(LocalBridgeClazz, "GL_MIRRORED_REPEAT_OES"); _GL_MIRRORED_REPEAT_OESReady = true; } return _GL_MIRRORED_REPEAT_OESContent; } }
        private static int _GL_MIRRORED_REPEAT_OESContent = default;
        private static bool _GL_MIRRORED_REPEAT_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES"/>
        /// </summary>
        public static int GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES { get { if (!_GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OESReady) { _GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OESContent = SGetField<int>(LocalBridgeClazz, "GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES"); _GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OESReady = true; } return _GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OESContent; } }
        private static int _GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OESContent = default;
        private static bool _GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_NONE_OES"/>
        /// </summary>
        public static int GL_NONE_OES { get { if (!_GL_NONE_OESReady) { _GL_NONE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_NONE_OES"); _GL_NONE_OESReady = true; } return _GL_NONE_OESContent; } }
        private static int _GL_NONE_OESContent = default;
        private static bool _GL_NONE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_NORMAL_MAP_OES"/>
        /// </summary>
        public static int GL_NORMAL_MAP_OES { get { if (!_GL_NORMAL_MAP_OESReady) { _GL_NORMAL_MAP_OESContent = SGetField<int>(LocalBridgeClazz, "GL_NORMAL_MAP_OES"); _GL_NORMAL_MAP_OESReady = true; } return _GL_NORMAL_MAP_OESContent; } }
        private static int _GL_NORMAL_MAP_OESContent = default;
        private static bool _GL_NORMAL_MAP_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES"/>
        /// </summary>
        public static int GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES { get { if (!_GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OESReady) { _GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OESContent = SGetField<int>(LocalBridgeClazz, "GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES"); _GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OESReady = true; } return _GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OESContent; } }
        private static int _GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OESContent = default;
        private static bool _GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_REFLECTION_MAP_OES"/>
        /// </summary>
        public static int GL_REFLECTION_MAP_OES { get { if (!_GL_REFLECTION_MAP_OESReady) { _GL_REFLECTION_MAP_OESContent = SGetField<int>(LocalBridgeClazz, "GL_REFLECTION_MAP_OES"); _GL_REFLECTION_MAP_OESReady = true; } return _GL_REFLECTION_MAP_OESContent; } }
        private static int _GL_REFLECTION_MAP_OESContent = default;
        private static bool _GL_REFLECTION_MAP_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_RENDERBUFFER_ALPHA_SIZE_OES"/>
        /// </summary>
        public static int GL_RENDERBUFFER_ALPHA_SIZE_OES { get { if (!_GL_RENDERBUFFER_ALPHA_SIZE_OESReady) { _GL_RENDERBUFFER_ALPHA_SIZE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_RENDERBUFFER_ALPHA_SIZE_OES"); _GL_RENDERBUFFER_ALPHA_SIZE_OESReady = true; } return _GL_RENDERBUFFER_ALPHA_SIZE_OESContent; } }
        private static int _GL_RENDERBUFFER_ALPHA_SIZE_OESContent = default;
        private static bool _GL_RENDERBUFFER_ALPHA_SIZE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_RENDERBUFFER_BINDING_OES"/>
        /// </summary>
        public static int GL_RENDERBUFFER_BINDING_OES { get { if (!_GL_RENDERBUFFER_BINDING_OESReady) { _GL_RENDERBUFFER_BINDING_OESContent = SGetField<int>(LocalBridgeClazz, "GL_RENDERBUFFER_BINDING_OES"); _GL_RENDERBUFFER_BINDING_OESReady = true; } return _GL_RENDERBUFFER_BINDING_OESContent; } }
        private static int _GL_RENDERBUFFER_BINDING_OESContent = default;
        private static bool _GL_RENDERBUFFER_BINDING_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_RENDERBUFFER_BLUE_SIZE_OES"/>
        /// </summary>
        public static int GL_RENDERBUFFER_BLUE_SIZE_OES { get { if (!_GL_RENDERBUFFER_BLUE_SIZE_OESReady) { _GL_RENDERBUFFER_BLUE_SIZE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_RENDERBUFFER_BLUE_SIZE_OES"); _GL_RENDERBUFFER_BLUE_SIZE_OESReady = true; } return _GL_RENDERBUFFER_BLUE_SIZE_OESContent; } }
        private static int _GL_RENDERBUFFER_BLUE_SIZE_OESContent = default;
        private static bool _GL_RENDERBUFFER_BLUE_SIZE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_RENDERBUFFER_DEPTH_SIZE_OES"/>
        /// </summary>
        public static int GL_RENDERBUFFER_DEPTH_SIZE_OES { get { if (!_GL_RENDERBUFFER_DEPTH_SIZE_OESReady) { _GL_RENDERBUFFER_DEPTH_SIZE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_RENDERBUFFER_DEPTH_SIZE_OES"); _GL_RENDERBUFFER_DEPTH_SIZE_OESReady = true; } return _GL_RENDERBUFFER_DEPTH_SIZE_OESContent; } }
        private static int _GL_RENDERBUFFER_DEPTH_SIZE_OESContent = default;
        private static bool _GL_RENDERBUFFER_DEPTH_SIZE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_RENDERBUFFER_GREEN_SIZE_OES"/>
        /// </summary>
        public static int GL_RENDERBUFFER_GREEN_SIZE_OES { get { if (!_GL_RENDERBUFFER_GREEN_SIZE_OESReady) { _GL_RENDERBUFFER_GREEN_SIZE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_RENDERBUFFER_GREEN_SIZE_OES"); _GL_RENDERBUFFER_GREEN_SIZE_OESReady = true; } return _GL_RENDERBUFFER_GREEN_SIZE_OESContent; } }
        private static int _GL_RENDERBUFFER_GREEN_SIZE_OESContent = default;
        private static bool _GL_RENDERBUFFER_GREEN_SIZE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_RENDERBUFFER_HEIGHT_OES"/>
        /// </summary>
        public static int GL_RENDERBUFFER_HEIGHT_OES { get { if (!_GL_RENDERBUFFER_HEIGHT_OESReady) { _GL_RENDERBUFFER_HEIGHT_OESContent = SGetField<int>(LocalBridgeClazz, "GL_RENDERBUFFER_HEIGHT_OES"); _GL_RENDERBUFFER_HEIGHT_OESReady = true; } return _GL_RENDERBUFFER_HEIGHT_OESContent; } }
        private static int _GL_RENDERBUFFER_HEIGHT_OESContent = default;
        private static bool _GL_RENDERBUFFER_HEIGHT_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_RENDERBUFFER_INTERNAL_FORMAT_OES"/>
        /// </summary>
        public static int GL_RENDERBUFFER_INTERNAL_FORMAT_OES { get { if (!_GL_RENDERBUFFER_INTERNAL_FORMAT_OESReady) { _GL_RENDERBUFFER_INTERNAL_FORMAT_OESContent = SGetField<int>(LocalBridgeClazz, "GL_RENDERBUFFER_INTERNAL_FORMAT_OES"); _GL_RENDERBUFFER_INTERNAL_FORMAT_OESReady = true; } return _GL_RENDERBUFFER_INTERNAL_FORMAT_OESContent; } }
        private static int _GL_RENDERBUFFER_INTERNAL_FORMAT_OESContent = default;
        private static bool _GL_RENDERBUFFER_INTERNAL_FORMAT_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_RENDERBUFFER_OES"/>
        /// </summary>
        public static int GL_RENDERBUFFER_OES { get { if (!_GL_RENDERBUFFER_OESReady) { _GL_RENDERBUFFER_OESContent = SGetField<int>(LocalBridgeClazz, "GL_RENDERBUFFER_OES"); _GL_RENDERBUFFER_OESReady = true; } return _GL_RENDERBUFFER_OESContent; } }
        private static int _GL_RENDERBUFFER_OESContent = default;
        private static bool _GL_RENDERBUFFER_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_RENDERBUFFER_RED_SIZE_OES"/>
        /// </summary>
        public static int GL_RENDERBUFFER_RED_SIZE_OES { get { if (!_GL_RENDERBUFFER_RED_SIZE_OESReady) { _GL_RENDERBUFFER_RED_SIZE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_RENDERBUFFER_RED_SIZE_OES"); _GL_RENDERBUFFER_RED_SIZE_OESReady = true; } return _GL_RENDERBUFFER_RED_SIZE_OESContent; } }
        private static int _GL_RENDERBUFFER_RED_SIZE_OESContent = default;
        private static bool _GL_RENDERBUFFER_RED_SIZE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_RENDERBUFFER_STENCIL_SIZE_OES"/>
        /// </summary>
        public static int GL_RENDERBUFFER_STENCIL_SIZE_OES { get { if (!_GL_RENDERBUFFER_STENCIL_SIZE_OESReady) { _GL_RENDERBUFFER_STENCIL_SIZE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_RENDERBUFFER_STENCIL_SIZE_OES"); _GL_RENDERBUFFER_STENCIL_SIZE_OESReady = true; } return _GL_RENDERBUFFER_STENCIL_SIZE_OESContent; } }
        private static int _GL_RENDERBUFFER_STENCIL_SIZE_OESContent = default;
        private static bool _GL_RENDERBUFFER_STENCIL_SIZE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_RENDERBUFFER_WIDTH_OES"/>
        /// </summary>
        public static int GL_RENDERBUFFER_WIDTH_OES { get { if (!_GL_RENDERBUFFER_WIDTH_OESReady) { _GL_RENDERBUFFER_WIDTH_OESContent = SGetField<int>(LocalBridgeClazz, "GL_RENDERBUFFER_WIDTH_OES"); _GL_RENDERBUFFER_WIDTH_OESReady = true; } return _GL_RENDERBUFFER_WIDTH_OESContent; } }
        private static int _GL_RENDERBUFFER_WIDTH_OESContent = default;
        private static bool _GL_RENDERBUFFER_WIDTH_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES"/>
        /// </summary>
        public static int GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES { get { if (!_GL_REQUIRED_TEXTURE_IMAGE_UNITS_OESReady) { _GL_REQUIRED_TEXTURE_IMAGE_UNITS_OESContent = SGetField<int>(LocalBridgeClazz, "GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES"); _GL_REQUIRED_TEXTURE_IMAGE_UNITS_OESReady = true; } return _GL_REQUIRED_TEXTURE_IMAGE_UNITS_OESContent; } }
        private static int _GL_REQUIRED_TEXTURE_IMAGE_UNITS_OESContent = default;
        private static bool _GL_REQUIRED_TEXTURE_IMAGE_UNITS_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_RGB5_A1_OES"/>
        /// </summary>
        public static int GL_RGB5_A1_OES { get { if (!_GL_RGB5_A1_OESReady) { _GL_RGB5_A1_OESContent = SGetField<int>(LocalBridgeClazz, "GL_RGB5_A1_OES"); _GL_RGB5_A1_OESReady = true; } return _GL_RGB5_A1_OESContent; } }
        private static int _GL_RGB5_A1_OESContent = default;
        private static bool _GL_RGB5_A1_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_RGB565_OES"/>
        /// </summary>
        public static int GL_RGB565_OES { get { if (!_GL_RGB565_OESReady) { _GL_RGB565_OESContent = SGetField<int>(LocalBridgeClazz, "GL_RGB565_OES"); _GL_RGB565_OESReady = true; } return _GL_RGB565_OESContent; } }
        private static int _GL_RGB565_OESContent = default;
        private static bool _GL_RGB565_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_RGB8_OES"/>
        /// </summary>
        public static int GL_RGB8_OES { get { if (!_GL_RGB8_OESReady) { _GL_RGB8_OESContent = SGetField<int>(LocalBridgeClazz, "GL_RGB8_OES"); _GL_RGB8_OESReady = true; } return _GL_RGB8_OESContent; } }
        private static int _GL_RGB8_OESContent = default;
        private static bool _GL_RGB8_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_RGBA4_OES"/>
        /// </summary>
        public static int GL_RGBA4_OES { get { if (!_GL_RGBA4_OESReady) { _GL_RGBA4_OESContent = SGetField<int>(LocalBridgeClazz, "GL_RGBA4_OES"); _GL_RGBA4_OESReady = true; } return _GL_RGBA4_OESContent; } }
        private static int _GL_RGBA4_OESContent = default;
        private static bool _GL_RGBA4_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_RGBA8_OES"/>
        /// </summary>
        public static int GL_RGBA8_OES { get { if (!_GL_RGBA8_OESReady) { _GL_RGBA8_OESContent = SGetField<int>(LocalBridgeClazz, "GL_RGBA8_OES"); _GL_RGBA8_OESReady = true; } return _GL_RGBA8_OESContent; } }
        private static int _GL_RGBA8_OESContent = default;
        private static bool _GL_RGBA8_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_SAMPLER_EXTERNAL_OES"/>
        /// </summary>
        public static int GL_SAMPLER_EXTERNAL_OES { get { if (!_GL_SAMPLER_EXTERNAL_OESReady) { _GL_SAMPLER_EXTERNAL_OESContent = SGetField<int>(LocalBridgeClazz, "GL_SAMPLER_EXTERNAL_OES"); _GL_SAMPLER_EXTERNAL_OESReady = true; } return _GL_SAMPLER_EXTERNAL_OESContent; } }
        private static int _GL_SAMPLER_EXTERNAL_OESContent = default;
        private static bool _GL_SAMPLER_EXTERNAL_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_STENCIL_ATTACHMENT_OES"/>
        /// </summary>
        public static int GL_STENCIL_ATTACHMENT_OES { get { if (!_GL_STENCIL_ATTACHMENT_OESReady) { _GL_STENCIL_ATTACHMENT_OESContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_ATTACHMENT_OES"); _GL_STENCIL_ATTACHMENT_OESReady = true; } return _GL_STENCIL_ATTACHMENT_OESContent; } }
        private static int _GL_STENCIL_ATTACHMENT_OESContent = default;
        private static bool _GL_STENCIL_ATTACHMENT_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_STENCIL_INDEX1_OES"/>
        /// </summary>
        public static int GL_STENCIL_INDEX1_OES { get { if (!_GL_STENCIL_INDEX1_OESReady) { _GL_STENCIL_INDEX1_OESContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_INDEX1_OES"); _GL_STENCIL_INDEX1_OESReady = true; } return _GL_STENCIL_INDEX1_OESContent; } }
        private static int _GL_STENCIL_INDEX1_OESContent = default;
        private static bool _GL_STENCIL_INDEX1_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_STENCIL_INDEX4_OES"/>
        /// </summary>
        public static int GL_STENCIL_INDEX4_OES { get { if (!_GL_STENCIL_INDEX4_OESReady) { _GL_STENCIL_INDEX4_OESContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_INDEX4_OES"); _GL_STENCIL_INDEX4_OESReady = true; } return _GL_STENCIL_INDEX4_OESContent; } }
        private static int _GL_STENCIL_INDEX4_OESContent = default;
        private static bool _GL_STENCIL_INDEX4_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_STENCIL_INDEX8_OES"/>
        /// </summary>
        public static int GL_STENCIL_INDEX8_OES { get { if (!_GL_STENCIL_INDEX8_OESReady) { _GL_STENCIL_INDEX8_OESContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_INDEX8_OES"); _GL_STENCIL_INDEX8_OESReady = true; } return _GL_STENCIL_INDEX8_OESContent; } }
        private static int _GL_STENCIL_INDEX8_OESContent = default;
        private static bool _GL_STENCIL_INDEX8_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_TEXTURE_BINDING_CUBE_MAP_OES"/>
        /// </summary>
        public static int GL_TEXTURE_BINDING_CUBE_MAP_OES { get { if (!_GL_TEXTURE_BINDING_CUBE_MAP_OESReady) { _GL_TEXTURE_BINDING_CUBE_MAP_OESContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_BINDING_CUBE_MAP_OES"); _GL_TEXTURE_BINDING_CUBE_MAP_OESReady = true; } return _GL_TEXTURE_BINDING_CUBE_MAP_OESContent; } }
        private static int _GL_TEXTURE_BINDING_CUBE_MAP_OESContent = default;
        private static bool _GL_TEXTURE_BINDING_CUBE_MAP_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_TEXTURE_BINDING_EXTERNAL_OES"/>
        /// </summary>
        public static int GL_TEXTURE_BINDING_EXTERNAL_OES { get { if (!_GL_TEXTURE_BINDING_EXTERNAL_OESReady) { _GL_TEXTURE_BINDING_EXTERNAL_OESContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_BINDING_EXTERNAL_OES"); _GL_TEXTURE_BINDING_EXTERNAL_OESReady = true; } return _GL_TEXTURE_BINDING_EXTERNAL_OESContent; } }
        private static int _GL_TEXTURE_BINDING_EXTERNAL_OESContent = default;
        private static bool _GL_TEXTURE_BINDING_EXTERNAL_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_TEXTURE_CROP_RECT_OES"/>
        /// </summary>
        public static int GL_TEXTURE_CROP_RECT_OES { get { if (!_GL_TEXTURE_CROP_RECT_OESReady) { _GL_TEXTURE_CROP_RECT_OESContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_CROP_RECT_OES"); _GL_TEXTURE_CROP_RECT_OESReady = true; } return _GL_TEXTURE_CROP_RECT_OESContent; } }
        private static int _GL_TEXTURE_CROP_RECT_OESContent = default;
        private static bool _GL_TEXTURE_CROP_RECT_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES"/>
        /// </summary>
        public static int GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES { get { if (!_GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OESReady) { _GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OESContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES"); _GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OESReady = true; } return _GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OESContent; } }
        private static int _GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OESContent = default;
        private static bool _GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES"/>
        /// </summary>
        public static int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES { get { if (!_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OESReady) { _GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OESContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES"); _GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OESReady = true; } return _GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OESContent; } }
        private static int _GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OESContent = default;
        private static bool _GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES"/>
        /// </summary>
        public static int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES { get { if (!_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OESReady) { _GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OESContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES"); _GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OESReady = true; } return _GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OESContent; } }
        private static int _GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OESContent = default;
        private static bool _GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_TEXTURE_CUBE_MAP_OES"/>
        /// </summary>
        public static int GL_TEXTURE_CUBE_MAP_OES { get { if (!_GL_TEXTURE_CUBE_MAP_OESReady) { _GL_TEXTURE_CUBE_MAP_OESContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_CUBE_MAP_OES"); _GL_TEXTURE_CUBE_MAP_OESReady = true; } return _GL_TEXTURE_CUBE_MAP_OESContent; } }
        private static int _GL_TEXTURE_CUBE_MAP_OESContent = default;
        private static bool _GL_TEXTURE_CUBE_MAP_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES"/>
        /// </summary>
        public static int GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES { get { if (!_GL_TEXTURE_CUBE_MAP_POSITIVE_X_OESReady) { _GL_TEXTURE_CUBE_MAP_POSITIVE_X_OESContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES"); _GL_TEXTURE_CUBE_MAP_POSITIVE_X_OESReady = true; } return _GL_TEXTURE_CUBE_MAP_POSITIVE_X_OESContent; } }
        private static int _GL_TEXTURE_CUBE_MAP_POSITIVE_X_OESContent = default;
        private static bool _GL_TEXTURE_CUBE_MAP_POSITIVE_X_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES"/>
        /// </summary>
        public static int GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES { get { if (!_GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OESReady) { _GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OESContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES"); _GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OESReady = true; } return _GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OESContent; } }
        private static int _GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OESContent = default;
        private static bool _GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES"/>
        /// </summary>
        public static int GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES { get { if (!_GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OESReady) { _GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OESContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES"); _GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OESReady = true; } return _GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OESContent; } }
        private static int _GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OESContent = default;
        private static bool _GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_TEXTURE_EXTERNAL_OES"/>
        /// </summary>
        public static int GL_TEXTURE_EXTERNAL_OES { get { if (!_GL_TEXTURE_EXTERNAL_OESReady) { _GL_TEXTURE_EXTERNAL_OESContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_EXTERNAL_OES"); _GL_TEXTURE_EXTERNAL_OESReady = true; } return _GL_TEXTURE_EXTERNAL_OESContent; } }
        private static int _GL_TEXTURE_EXTERNAL_OESContent = default;
        private static bool _GL_TEXTURE_EXTERNAL_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_TEXTURE_GEN_MODE_OES"/>
        /// </summary>
        public static int GL_TEXTURE_GEN_MODE_OES { get { if (!_GL_TEXTURE_GEN_MODE_OESReady) { _GL_TEXTURE_GEN_MODE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_GEN_MODE_OES"); _GL_TEXTURE_GEN_MODE_OESReady = true; } return _GL_TEXTURE_GEN_MODE_OESContent; } }
        private static int _GL_TEXTURE_GEN_MODE_OESContent = default;
        private static bool _GL_TEXTURE_GEN_MODE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_TEXTURE_GEN_STR_OES"/>
        /// </summary>
        public static int GL_TEXTURE_GEN_STR_OES { get { if (!_GL_TEXTURE_GEN_STR_OESReady) { _GL_TEXTURE_GEN_STR_OESContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_GEN_STR_OES"); _GL_TEXTURE_GEN_STR_OESReady = true; } return _GL_TEXTURE_GEN_STR_OESContent; } }
        private static int _GL_TEXTURE_GEN_STR_OESContent = default;
        private static bool _GL_TEXTURE_GEN_STR_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES"/>
        /// </summary>
        public static int GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES { get { if (!_GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OESReady) { _GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OESContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES"); _GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OESReady = true; } return _GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OESContent; } }
        private static int _GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OESContent = default;
        private static bool _GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_TEXTURE_MAX_ANISOTROPY_EXT"/>
        /// </summary>
        public static int GL_TEXTURE_MAX_ANISOTROPY_EXT { get { if (!_GL_TEXTURE_MAX_ANISOTROPY_EXTReady) { _GL_TEXTURE_MAX_ANISOTROPY_EXTContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_MAX_ANISOTROPY_EXT"); _GL_TEXTURE_MAX_ANISOTROPY_EXTReady = true; } return _GL_TEXTURE_MAX_ANISOTROPY_EXTContent; } }
        private static int _GL_TEXTURE_MAX_ANISOTROPY_EXTContent = default;
        private static bool _GL_TEXTURE_MAX_ANISOTROPY_EXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_UNSIGNED_INT_24_8_OES"/>
        /// </summary>
        public static int GL_UNSIGNED_INT_24_8_OES { get { if (!_GL_UNSIGNED_INT_24_8_OESReady) { _GL_UNSIGNED_INT_24_8_OESContent = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNED_INT_24_8_OES"); _GL_UNSIGNED_INT_24_8_OESReady = true; } return _GL_UNSIGNED_INT_24_8_OESContent; } }
        private static int _GL_UNSIGNED_INT_24_8_OESContent = default;
        private static bool _GL_UNSIGNED_INT_24_8_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_WEIGHT_ARRAY_BUFFER_BINDING_OES"/>
        /// </summary>
        public static int GL_WEIGHT_ARRAY_BUFFER_BINDING_OES { get { if (!_GL_WEIGHT_ARRAY_BUFFER_BINDING_OESReady) { _GL_WEIGHT_ARRAY_BUFFER_BINDING_OESContent = SGetField<int>(LocalBridgeClazz, "GL_WEIGHT_ARRAY_BUFFER_BINDING_OES"); _GL_WEIGHT_ARRAY_BUFFER_BINDING_OESReady = true; } return _GL_WEIGHT_ARRAY_BUFFER_BINDING_OESContent; } }
        private static int _GL_WEIGHT_ARRAY_BUFFER_BINDING_OESContent = default;
        private static bool _GL_WEIGHT_ARRAY_BUFFER_BINDING_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_WEIGHT_ARRAY_OES"/>
        /// </summary>
        public static int GL_WEIGHT_ARRAY_OES { get { if (!_GL_WEIGHT_ARRAY_OESReady) { _GL_WEIGHT_ARRAY_OESContent = SGetField<int>(LocalBridgeClazz, "GL_WEIGHT_ARRAY_OES"); _GL_WEIGHT_ARRAY_OESReady = true; } return _GL_WEIGHT_ARRAY_OESContent; } }
        private static int _GL_WEIGHT_ARRAY_OESContent = default;
        private static bool _GL_WEIGHT_ARRAY_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_WEIGHT_ARRAY_POINTER_OES"/>
        /// </summary>
        public static int GL_WEIGHT_ARRAY_POINTER_OES { get { if (!_GL_WEIGHT_ARRAY_POINTER_OESReady) { _GL_WEIGHT_ARRAY_POINTER_OESContent = SGetField<int>(LocalBridgeClazz, "GL_WEIGHT_ARRAY_POINTER_OES"); _GL_WEIGHT_ARRAY_POINTER_OESReady = true; } return _GL_WEIGHT_ARRAY_POINTER_OESContent; } }
        private static int _GL_WEIGHT_ARRAY_POINTER_OESContent = default;
        private static bool _GL_WEIGHT_ARRAY_POINTER_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_WEIGHT_ARRAY_SIZE_OES"/>
        /// </summary>
        public static int GL_WEIGHT_ARRAY_SIZE_OES { get { if (!_GL_WEIGHT_ARRAY_SIZE_OESReady) { _GL_WEIGHT_ARRAY_SIZE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_WEIGHT_ARRAY_SIZE_OES"); _GL_WEIGHT_ARRAY_SIZE_OESReady = true; } return _GL_WEIGHT_ARRAY_SIZE_OESContent; } }
        private static int _GL_WEIGHT_ARRAY_SIZE_OESContent = default;
        private static bool _GL_WEIGHT_ARRAY_SIZE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_WEIGHT_ARRAY_STRIDE_OES"/>
        /// </summary>
        public static int GL_WEIGHT_ARRAY_STRIDE_OES { get { if (!_GL_WEIGHT_ARRAY_STRIDE_OESReady) { _GL_WEIGHT_ARRAY_STRIDE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_WEIGHT_ARRAY_STRIDE_OES"); _GL_WEIGHT_ARRAY_STRIDE_OESReady = true; } return _GL_WEIGHT_ARRAY_STRIDE_OESContent; } }
        private static int _GL_WEIGHT_ARRAY_STRIDE_OESContent = default;
        private static bool _GL_WEIGHT_ARRAY_STRIDE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_WEIGHT_ARRAY_TYPE_OES"/>
        /// </summary>
        public static int GL_WEIGHT_ARRAY_TYPE_OES { get { if (!_GL_WEIGHT_ARRAY_TYPE_OESReady) { _GL_WEIGHT_ARRAY_TYPE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_WEIGHT_ARRAY_TYPE_OES"); _GL_WEIGHT_ARRAY_TYPE_OESReady = true; } return _GL_WEIGHT_ARRAY_TYPE_OESContent; } }
        private static int _GL_WEIGHT_ARRAY_TYPE_OESContent = default;
        private static bool _GL_WEIGHT_ARRAY_TYPE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#GL_WRITE_ONLY_OES"/>
        /// </summary>
        public static int GL_WRITE_ONLY_OES { get { if (!_GL_WRITE_ONLY_OESReady) { _GL_WRITE_ONLY_OESContent = SGetField<int>(LocalBridgeClazz, "GL_WRITE_ONLY_OES"); _GL_WRITE_ONLY_OESReady = true; } return _GL_WRITE_ONLY_OESContent; } }
        private static int _GL_WRITE_ONLY_OESContent = default;
        private static bool _GL_WRITE_ONLY_OESReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glIsFramebufferOES(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool GlIsFramebufferOES(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "glIsFramebufferOES", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glIsRenderbufferOES(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool GlIsRenderbufferOES(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "glIsRenderbufferOES", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glCheckFramebufferStatusOES(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GlCheckFramebufferStatusOES(int arg0)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "glCheckFramebufferStatusOES", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glAlphaFuncxOES(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlAlphaFuncxOES(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glAlphaFuncxOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glBindFramebufferOES(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlBindFramebufferOES(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glBindFramebufferOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glBindRenderbufferOES(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlBindRenderbufferOES(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glBindRenderbufferOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glBlendEquationOES(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlBlendEquationOES(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glBlendEquationOES", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glBlendEquationSeparateOES(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlBlendEquationSeparateOES(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glBlendEquationSeparateOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glBlendFuncSeparateOES(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlBlendFuncSeparateOES(int arg0, int arg1, int arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glBlendFuncSeparateOES", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glClearColorxOES(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlClearColorxOES(int arg0, int arg1, int arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glClearColorxOES", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glClearDepthfOES(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public static void GlClearDepthfOES(float arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glClearDepthfOES", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glClearDepthxOES(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlClearDepthxOES(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glClearDepthxOES", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glClipPlanefOES(int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlClipPlanefOES(int arg0, float[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glClipPlanefOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glClipPlanefOES(int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlClipPlanefOES(int arg0, Java.Nio.FloatBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glClipPlanefOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glClipPlanexOES(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlClipPlanexOES(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glClipPlanexOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glClipPlanexOES(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlClipPlanexOES(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glClipPlanexOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glColor4xOES(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlColor4xOES(int arg0, int arg1, int arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glColor4xOES", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glCurrentPaletteMatrixOES(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlCurrentPaletteMatrixOES(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glCurrentPaletteMatrixOES", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glDeleteFramebuffersOES(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlDeleteFramebuffersOES(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glDeleteFramebuffersOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glDeleteFramebuffersOES(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlDeleteFramebuffersOES(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glDeleteFramebuffersOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glDeleteRenderbuffersOES(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlDeleteRenderbuffersOES(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glDeleteRenderbuffersOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glDeleteRenderbuffersOES(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlDeleteRenderbuffersOES(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glDeleteRenderbuffersOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glDepthRangefOES(float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public static void GlDepthRangefOES(float arg0, float arg1)
        {
            SExecute(LocalBridgeClazz, "glDepthRangefOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glDepthRangexOES(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlDepthRangexOES(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glDepthRangexOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glDrawTexfOES(float,float,float,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        public static void GlDrawTexfOES(float arg0, float arg1, float arg2, float arg3, float arg4)
        {
            SExecute(LocalBridgeClazz, "glDrawTexfOES", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glDrawTexfvOES(float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlDrawTexfvOES(float[] arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glDrawTexfvOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glDrawTexfvOES(java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlDrawTexfvOES(Java.Nio.FloatBuffer arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glDrawTexfvOES", "(Ljava/nio/FloatBuffer;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glDrawTexiOES(int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlDrawTexiOES(int arg0, int arg1, int arg2, int arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glDrawTexiOES", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glDrawTexivOES(int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlDrawTexivOES(int[] arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glDrawTexivOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glDrawTexivOES(java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlDrawTexivOES(Java.Nio.IntBuffer arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glDrawTexivOES", "(Ljava/nio/IntBuffer;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glDrawTexsOES(short,short,short,short,short)"/>
        /// </summary>
        /// <param name="arg0"><see cref="short"/></param>
        /// <param name="arg1"><see cref="short"/></param>
        /// <param name="arg2"><see cref="short"/></param>
        /// <param name="arg3"><see cref="short"/></param>
        /// <param name="arg4"><see cref="short"/></param>
        public static void GlDrawTexsOES(short arg0, short arg1, short arg2, short arg3, short arg4)
        {
            SExecute(LocalBridgeClazz, "glDrawTexsOES", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glDrawTexsvOES(java.nio.ShortBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ShortBuffer"/></param>
        public static void GlDrawTexsvOES(Java.Nio.ShortBuffer arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glDrawTexsvOES", "(Ljava/nio/ShortBuffer;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glDrawTexsvOES(short[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="short"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlDrawTexsvOES(short[] arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glDrawTexsvOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glDrawTexxOES(int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlDrawTexxOES(int arg0, int arg1, int arg2, int arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glDrawTexxOES", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glDrawTexxvOES(int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlDrawTexxvOES(int[] arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glDrawTexxvOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glDrawTexxvOES(java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlDrawTexxvOES(Java.Nio.IntBuffer arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glDrawTexxvOES", "(Ljava/nio/IntBuffer;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glEGLImageTargetRenderbufferStorageOES(int,java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.Buffer"/></param>
        public static void GlEGLImageTargetRenderbufferStorageOES(int arg0, Java.Nio.Buffer arg1)
        {
            SExecute(LocalBridgeClazz, "glEGLImageTargetRenderbufferStorageOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glEGLImageTargetTexture2DOES(int,java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.Buffer"/></param>
        public static void GlEGLImageTargetTexture2DOES(int arg0, Java.Nio.Buffer arg1)
        {
            SExecute(LocalBridgeClazz, "glEGLImageTargetTexture2DOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glFogxOES(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlFogxOES(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glFogxOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glFogxvOES(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlFogxvOES(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glFogxvOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glFogxvOES(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlFogxvOES(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glFogxvOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glFramebufferRenderbufferOES(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlFramebufferRenderbufferOES(int arg0, int arg1, int arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glFramebufferRenderbufferOES", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glFramebufferTexture2DOES(int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlFramebufferTexture2DOES(int arg0, int arg1, int arg2, int arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glFramebufferTexture2DOES", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glFrustumfOES(float,float,float,float,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        /// <param name="arg5"><see cref="float"/></param>
        public static void GlFrustumfOES(float arg0, float arg1, float arg2, float arg3, float arg4, float arg5)
        {
            SExecute(LocalBridgeClazz, "glFrustumfOES", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glFrustumxOES(int,int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        public static void GlFrustumxOES(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5)
        {
            SExecute(LocalBridgeClazz, "glFrustumxOES", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glGenerateMipmapOES(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlGenerateMipmapOES(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glGenerateMipmapOES", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glGenFramebuffersOES(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlGenFramebuffersOES(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glGenFramebuffersOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glGenFramebuffersOES(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGenFramebuffersOES(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glGenFramebuffersOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glGenRenderbuffersOES(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlGenRenderbuffersOES(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glGenRenderbuffersOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glGenRenderbuffersOES(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGenRenderbuffersOES(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glGenRenderbuffersOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glGetClipPlanefOES(int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlGetClipPlanefOES(int arg0, float[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glGetClipPlanefOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glGetClipPlanefOES(int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlGetClipPlanefOES(int arg0, Java.Nio.FloatBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glGetClipPlanefOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glGetClipPlanexOES(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlGetClipPlanexOES(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glGetClipPlanexOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glGetClipPlanexOES(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetClipPlanexOES(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glGetClipPlanexOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glGetFixedvOES(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlGetFixedvOES(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glGetFixedvOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glGetFixedvOES(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetFixedvOES(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glGetFixedvOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glGetFramebufferAttachmentParameterivOES(int,int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlGetFramebufferAttachmentParameterivOES(int arg0, int arg1, int arg2, int[] arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glGetFramebufferAttachmentParameterivOES", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glGetFramebufferAttachmentParameterivOES(int,int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetFramebufferAttachmentParameterivOES(int arg0, int arg1, int arg2, Java.Nio.IntBuffer arg3)
        {
            SExecute(LocalBridgeClazz, "glGetFramebufferAttachmentParameterivOES", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glGetLightxvOES(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetLightxvOES(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetLightxvOES", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glGetLightxvOES(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetLightxvOES(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetLightxvOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glGetMaterialxvOES(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetMaterialxvOES(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetMaterialxvOES", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glGetMaterialxvOES(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetMaterialxvOES(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetMaterialxvOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glGetRenderbufferParameterivOES(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetRenderbufferParameterivOES(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetRenderbufferParameterivOES", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glGetRenderbufferParameterivOES(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetRenderbufferParameterivOES(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetRenderbufferParameterivOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glGetTexEnvxvOES(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetTexEnvxvOES(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetTexEnvxvOES", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glGetTexEnvxvOES(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetTexEnvxvOES(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetTexEnvxvOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glGetTexGenfvOES(int,int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetTexGenfvOES(int arg0, int arg1, float[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetTexGenfvOES", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glGetTexGenfvOES(int,int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlGetTexGenfvOES(int arg0, int arg1, Java.Nio.FloatBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetTexGenfvOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glGetTexGenivOES(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetTexGenivOES(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetTexGenivOES", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glGetTexGenivOES(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetTexGenivOES(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetTexGenivOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glGetTexGenxvOES(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetTexGenxvOES(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetTexGenxvOES", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glGetTexGenxvOES(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetTexGenxvOES(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetTexGenxvOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glGetTexParameterxvOES(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlGetTexParameterxvOES(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glGetTexParameterxvOES", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glGetTexParameterxvOES(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetTexParameterxvOES(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glGetTexParameterxvOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glLightModelxOES(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlLightModelxOES(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glLightModelxOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glLightModelxvOES(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlLightModelxvOES(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glLightModelxvOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glLightModelxvOES(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlLightModelxvOES(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glLightModelxvOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glLightxOES(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlLightxOES(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glLightxOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glLightxvOES(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlLightxvOES(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glLightxvOES", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glLightxvOES(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlLightxvOES(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glLightxvOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glLineWidthxOES(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlLineWidthxOES(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glLineWidthxOES", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glLoadMatrixxOES(int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlLoadMatrixxOES(int[] arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glLoadMatrixxOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glLoadMatrixxOES(java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlLoadMatrixxOES(Java.Nio.IntBuffer arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glLoadMatrixxOES", "(Ljava/nio/IntBuffer;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glLoadPaletteFromModelViewMatrixOES()"/>
        /// </summary>
        public static void GlLoadPaletteFromModelViewMatrixOES()
        {
            SExecuteWithSignature(LocalBridgeClazz, "glLoadPaletteFromModelViewMatrixOES", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glMaterialxOES(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlMaterialxOES(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glMaterialxOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glMaterialxvOES(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlMaterialxvOES(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glMaterialxvOES", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glMaterialxvOES(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlMaterialxvOES(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glMaterialxvOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glMultiTexCoord4xOES(int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlMultiTexCoord4xOES(int arg0, int arg1, int arg2, int arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glMultiTexCoord4xOES", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glMultMatrixxOES(int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlMultMatrixxOES(int[] arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glMultMatrixxOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glMultMatrixxOES(java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlMultMatrixxOES(Java.Nio.IntBuffer arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glMultMatrixxOES", "(Ljava/nio/IntBuffer;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glNormal3xOES(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlNormal3xOES(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glNormal3xOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glOrthofOES(float,float,float,float,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        /// <param name="arg5"><see cref="float"/></param>
        public static void GlOrthofOES(float arg0, float arg1, float arg2, float arg3, float arg4, float arg5)
        {
            SExecute(LocalBridgeClazz, "glOrthofOES", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glOrthoxOES(int,int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        public static void GlOrthoxOES(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5)
        {
            SExecute(LocalBridgeClazz, "glOrthoxOES", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glPointParameterxOES(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlPointParameterxOES(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glPointParameterxOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glPointParameterxvOES(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlPointParameterxvOES(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glPointParameterxvOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glPointParameterxvOES(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlPointParameterxvOES(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glPointParameterxvOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glPointSizexOES(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlPointSizexOES(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glPointSizexOES", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glPolygonOffsetxOES(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlPolygonOffsetxOES(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glPolygonOffsetxOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glRenderbufferStorageOES(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlRenderbufferStorageOES(int arg0, int arg1, int arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glRenderbufferStorageOES", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glRotatexOES(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlRotatexOES(int arg0, int arg1, int arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glRotatexOES", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glSampleCoveragexOES(int,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public static void GlSampleCoveragexOES(int arg0, bool arg1)
        {
            SExecute(LocalBridgeClazz, "glSampleCoveragexOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glScalexOES(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlScalexOES(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glScalexOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glTexEnvxOES(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlTexEnvxOES(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glTexEnvxOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glTexEnvxvOES(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlTexEnvxvOES(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glTexEnvxvOES", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glTexEnvxvOES(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlTexEnvxvOES(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glTexEnvxvOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glTexGenfOES(int,int,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        public static void GlTexGenfOES(int arg0, int arg1, float arg2)
        {
            SExecute(LocalBridgeClazz, "glTexGenfOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glTexGenfvOES(int,int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlTexGenfvOES(int arg0, int arg1, float[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glTexGenfvOES", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glTexGenfvOES(int,int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlTexGenfvOES(int arg0, int arg1, Java.Nio.FloatBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glTexGenfvOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glTexGeniOES(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlTexGeniOES(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glTexGeniOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glTexGenivOES(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlTexGenivOES(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glTexGenivOES", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glTexGenivOES(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlTexGenivOES(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glTexGenivOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glTexGenxOES(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlTexGenxOES(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glTexGenxOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glTexGenxvOES(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlTexGenxvOES(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glTexGenxvOES", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glTexGenxvOES(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlTexGenxvOES(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glTexGenxvOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glTexParameterxOES(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlTexParameterxOES(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glTexParameterxOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glTexParameterxvOES(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlTexParameterxvOES(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glTexParameterxvOES", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glTexParameterxvOES(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlTexParameterxvOES(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glTexParameterxvOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glTranslatexOES(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlTranslatexOES(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glTranslatexOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glMatrixIndexPointerOES(int,int,int,java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.Buffer"/></param>
        public static void GlMatrixIndexPointerOES(int arg0, int arg1, int arg2, Java.Nio.Buffer arg3)
        {
            SExecute(LocalBridgeClazz, "glMatrixIndexPointerOES", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES11Ext.html#glWeightPointerOES(int,int,int,java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.Buffer"/></param>
        public static void GlWeightPointerOES(int arg0, int arg1, int arg2, Java.Nio.Buffer arg3)
        {
            SExecute(LocalBridgeClazz, "glWeightPointerOES", arg0, arg1, arg2, arg3);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
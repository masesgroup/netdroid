/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Opengl
{
    #region ETC1 declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/opengl/ETC1.html"/>
    /// </summary>
    public partial class ETC1 : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ETC1>
    {
        const string _bridgeClassName = "android.opengl.ETC1";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public ETC1() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public ETC1(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region ETC1 implementation
    public partial class ETC1
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/ETC1.html#DECODED_BLOCK_SIZE"/>
        /// </summary>
        public static int DECODED_BLOCK_SIZE { get { if (!_DECODED_BLOCK_SIZEReady) { _DECODED_BLOCK_SIZEContent = SGetField<int>(LocalBridgeClazz, "DECODED_BLOCK_SIZE"); _DECODED_BLOCK_SIZEReady = true; } return _DECODED_BLOCK_SIZEContent; } }
        private static int _DECODED_BLOCK_SIZEContent = default;
        private static bool _DECODED_BLOCK_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/ETC1.html#ENCODED_BLOCK_SIZE"/>
        /// </summary>
        public static int ENCODED_BLOCK_SIZE { get { if (!_ENCODED_BLOCK_SIZEReady) { _ENCODED_BLOCK_SIZEContent = SGetField<int>(LocalBridgeClazz, "ENCODED_BLOCK_SIZE"); _ENCODED_BLOCK_SIZEReady = true; } return _ENCODED_BLOCK_SIZEContent; } }
        private static int _ENCODED_BLOCK_SIZEContent = default;
        private static bool _ENCODED_BLOCK_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/ETC1.html#ETC_PKM_HEADER_SIZE"/>
        /// </summary>
        public static int ETC_PKM_HEADER_SIZE { get { if (!_ETC_PKM_HEADER_SIZEReady) { _ETC_PKM_HEADER_SIZEContent = SGetField<int>(LocalBridgeClazz, "ETC_PKM_HEADER_SIZE"); _ETC_PKM_HEADER_SIZEReady = true; } return _ETC_PKM_HEADER_SIZEContent; } }
        private static int _ETC_PKM_HEADER_SIZEContent = default;
        private static bool _ETC_PKM_HEADER_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/ETC1.html#ETC1_RGB8_OES"/>
        /// </summary>
        public static int ETC1_RGB8_OES { get { if (!_ETC1_RGB8_OESReady) { _ETC1_RGB8_OESContent = SGetField<int>(LocalBridgeClazz, "ETC1_RGB8_OES"); _ETC1_RGB8_OESReady = true; } return _ETC1_RGB8_OESContent; } }
        private static int _ETC1_RGB8_OESContent = default;
        private static bool _ETC1_RGB8_OESReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/ETC1.html#isValid(java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.Buffer"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsValid(Java.Nio.Buffer arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isValid", "(Ljava/nio/Buffer;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/ETC1.html#getEncodedDataSize(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GetEncodedDataSize(int arg0, int arg1)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "getEncodedDataSize", "(II)I", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/ETC1.html#getHeight(java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.Buffer"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GetHeight(Java.Nio.Buffer arg0)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "getHeight", "(Ljava/nio/Buffer;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/ETC1.html#getWidth(java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.Buffer"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GetWidth(Java.Nio.Buffer arg0)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "getWidth", "(Ljava/nio/Buffer;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/ETC1.html#decodeBlock(java.nio.Buffer,java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.Buffer"/></param>
        /// <param name="arg1"><see cref="Java.Nio.Buffer"/></param>
        public static void DecodeBlock(Java.Nio.Buffer arg0, Java.Nio.Buffer arg1)
        {
            SExecuteWithSignature(LocalBridgeClazz, "decodeBlock", "(Ljava/nio/Buffer;Ljava/nio/Buffer;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/ETC1.html#decodeImage(java.nio.Buffer,java.nio.Buffer,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.Buffer"/></param>
        /// <param name="arg1"><see cref="Java.Nio.Buffer"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        public static void DecodeImage(Java.Nio.Buffer arg0, Java.Nio.Buffer arg1, int arg2, int arg3, int arg4, int arg5)
        {
            SExecuteWithSignature(LocalBridgeClazz, "decodeImage", "(Ljava/nio/Buffer;Ljava/nio/Buffer;IIII)V", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/ETC1.html#encodeBlock(java.nio.Buffer,int,java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.Buffer"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.Buffer"/></param>
        public static void EncodeBlock(Java.Nio.Buffer arg0, int arg1, Java.Nio.Buffer arg2)
        {
            SExecuteWithSignature(LocalBridgeClazz, "encodeBlock", "(Ljava/nio/Buffer;ILjava/nio/Buffer;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/ETC1.html#encodeImage(java.nio.Buffer,int,int,int,int,java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.Buffer"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="Java.Nio.Buffer"/></param>
        public static void EncodeImage(Java.Nio.Buffer arg0, int arg1, int arg2, int arg3, int arg4, Java.Nio.Buffer arg5)
        {
            SExecuteWithSignature(LocalBridgeClazz, "encodeImage", "(Ljava/nio/Buffer;IIIILjava/nio/Buffer;)V", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/ETC1.html#formatHeader(java.nio.Buffer,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.Buffer"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void FormatHeader(Java.Nio.Buffer arg0, int arg1, int arg2)
        {
            SExecuteWithSignature(LocalBridgeClazz, "formatHeader", "(Ljava/nio/Buffer;II)V", arg0, arg1, arg2);
        }
    
        #endregion
    
        #region Instance methods
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
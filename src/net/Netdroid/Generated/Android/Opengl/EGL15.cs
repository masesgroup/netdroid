/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Opengl
{
    #region EGL15 declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html"/>
    /// </summary>
    public partial class EGL15 : MASES.JCOBridge.C2JBridge.JVMBridgeBase<EGL15>
    {
        const string _bridgeClassName = "android.opengl.EGL15";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public EGL15() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public EGL15(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region EGL15 implementation
    public partial class EGL15
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_NO_CONTEXT"/>
        /// </summary>
        public static Android.Opengl.EGLContext EGL_NO_CONTEXT { get { if (!_EGL_NO_CONTEXTReady) { _EGL_NO_CONTEXTContent = SGetField<Android.Opengl.EGLContext>(LocalBridgeClazz, "EGL_NO_CONTEXT"); _EGL_NO_CONTEXTReady = true; } return _EGL_NO_CONTEXTContent; } }
        private static Android.Opengl.EGLContext _EGL_NO_CONTEXTContent = default;
        private static bool _EGL_NO_CONTEXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_NO_DISPLAY"/>
        /// </summary>
        public static Android.Opengl.EGLDisplay EGL_NO_DISPLAY { get { if (!_EGL_NO_DISPLAYReady) { _EGL_NO_DISPLAYContent = SGetField<Android.Opengl.EGLDisplay>(LocalBridgeClazz, "EGL_NO_DISPLAY"); _EGL_NO_DISPLAYReady = true; } return _EGL_NO_DISPLAYContent; } }
        private static Android.Opengl.EGLDisplay _EGL_NO_DISPLAYContent = default;
        private static bool _EGL_NO_DISPLAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_NO_IMAGE"/>
        /// </summary>
        public static Android.Opengl.EGLImage EGL_NO_IMAGE { get { if (!_EGL_NO_IMAGEReady) { _EGL_NO_IMAGEContent = SGetField<Android.Opengl.EGLImage>(LocalBridgeClazz, "EGL_NO_IMAGE"); _EGL_NO_IMAGEReady = true; } return _EGL_NO_IMAGEContent; } }
        private static Android.Opengl.EGLImage _EGL_NO_IMAGEContent = default;
        private static bool _EGL_NO_IMAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_NO_SURFACE"/>
        /// </summary>
        public static Android.Opengl.EGLSurface EGL_NO_SURFACE { get { if (!_EGL_NO_SURFACEReady) { _EGL_NO_SURFACEContent = SGetField<Android.Opengl.EGLSurface>(LocalBridgeClazz, "EGL_NO_SURFACE"); _EGL_NO_SURFACEReady = true; } return _EGL_NO_SURFACEContent; } }
        private static Android.Opengl.EGLSurface _EGL_NO_SURFACEContent = default;
        private static bool _EGL_NO_SURFACEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_NO_SYNC"/>
        /// </summary>
        public static Android.Opengl.EGLSync EGL_NO_SYNC { get { if (!_EGL_NO_SYNCReady) { _EGL_NO_SYNCContent = SGetField<Android.Opengl.EGLSync>(LocalBridgeClazz, "EGL_NO_SYNC"); _EGL_NO_SYNCReady = true; } return _EGL_NO_SYNCContent; } }
        private static Android.Opengl.EGLSync _EGL_NO_SYNCContent = default;
        private static bool _EGL_NO_SYNCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_CL_EVENT_HANDLE"/>
        /// </summary>
        public static int EGL_CL_EVENT_HANDLE { get { if (!_EGL_CL_EVENT_HANDLEReady) { _EGL_CL_EVENT_HANDLEContent = SGetField<int>(LocalBridgeClazz, "EGL_CL_EVENT_HANDLE"); _EGL_CL_EVENT_HANDLEReady = true; } return _EGL_CL_EVENT_HANDLEContent; } }
        private static int _EGL_CL_EVENT_HANDLEContent = default;
        private static bool _EGL_CL_EVENT_HANDLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_CONDITION_SATISFIED"/>
        /// </summary>
        public static int EGL_CONDITION_SATISFIED { get { if (!_EGL_CONDITION_SATISFIEDReady) { _EGL_CONDITION_SATISFIEDContent = SGetField<int>(LocalBridgeClazz, "EGL_CONDITION_SATISFIED"); _EGL_CONDITION_SATISFIEDReady = true; } return _EGL_CONDITION_SATISFIEDContent; } }
        private static int _EGL_CONDITION_SATISFIEDContent = default;
        private static bool _EGL_CONDITION_SATISFIEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_CONTEXT_MAJOR_VERSION"/>
        /// </summary>
        public static int EGL_CONTEXT_MAJOR_VERSION { get { if (!_EGL_CONTEXT_MAJOR_VERSIONReady) { _EGL_CONTEXT_MAJOR_VERSIONContent = SGetField<int>(LocalBridgeClazz, "EGL_CONTEXT_MAJOR_VERSION"); _EGL_CONTEXT_MAJOR_VERSIONReady = true; } return _EGL_CONTEXT_MAJOR_VERSIONContent; } }
        private static int _EGL_CONTEXT_MAJOR_VERSIONContent = default;
        private static bool _EGL_CONTEXT_MAJOR_VERSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_CONTEXT_MINOR_VERSION"/>
        /// </summary>
        public static int EGL_CONTEXT_MINOR_VERSION { get { if (!_EGL_CONTEXT_MINOR_VERSIONReady) { _EGL_CONTEXT_MINOR_VERSIONContent = SGetField<int>(LocalBridgeClazz, "EGL_CONTEXT_MINOR_VERSION"); _EGL_CONTEXT_MINOR_VERSIONReady = true; } return _EGL_CONTEXT_MINOR_VERSIONContent; } }
        private static int _EGL_CONTEXT_MINOR_VERSIONContent = default;
        private static bool _EGL_CONTEXT_MINOR_VERSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT"/>
        /// </summary>
        public static int EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT { get { if (!_EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BITReady) { _EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BITContent = SGetField<int>(LocalBridgeClazz, "EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT"); _EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BITReady = true; } return _EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BITContent; } }
        private static int _EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BITContent = default;
        private static bool _EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT"/>
        /// </summary>
        public static int EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT { get { if (!_EGL_CONTEXT_OPENGL_CORE_PROFILE_BITReady) { _EGL_CONTEXT_OPENGL_CORE_PROFILE_BITContent = SGetField<int>(LocalBridgeClazz, "EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT"); _EGL_CONTEXT_OPENGL_CORE_PROFILE_BITReady = true; } return _EGL_CONTEXT_OPENGL_CORE_PROFILE_BITContent; } }
        private static int _EGL_CONTEXT_OPENGL_CORE_PROFILE_BITContent = default;
        private static bool _EGL_CONTEXT_OPENGL_CORE_PROFILE_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_CONTEXT_OPENGL_DEBUG"/>
        /// </summary>
        public static int EGL_CONTEXT_OPENGL_DEBUG { get { if (!_EGL_CONTEXT_OPENGL_DEBUGReady) { _EGL_CONTEXT_OPENGL_DEBUGContent = SGetField<int>(LocalBridgeClazz, "EGL_CONTEXT_OPENGL_DEBUG"); _EGL_CONTEXT_OPENGL_DEBUGReady = true; } return _EGL_CONTEXT_OPENGL_DEBUGContent; } }
        private static int _EGL_CONTEXT_OPENGL_DEBUGContent = default;
        private static bool _EGL_CONTEXT_OPENGL_DEBUGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE"/>
        /// </summary>
        public static int EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE { get { if (!_EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLEReady) { _EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLEContent = SGetField<int>(LocalBridgeClazz, "EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE"); _EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLEReady = true; } return _EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLEContent; } }
        private static int _EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLEContent = default;
        private static bool _EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_CONTEXT_OPENGL_PROFILE_MASK"/>
        /// </summary>
        public static int EGL_CONTEXT_OPENGL_PROFILE_MASK { get { if (!_EGL_CONTEXT_OPENGL_PROFILE_MASKReady) { _EGL_CONTEXT_OPENGL_PROFILE_MASKContent = SGetField<int>(LocalBridgeClazz, "EGL_CONTEXT_OPENGL_PROFILE_MASK"); _EGL_CONTEXT_OPENGL_PROFILE_MASKReady = true; } return _EGL_CONTEXT_OPENGL_PROFILE_MASKContent; } }
        private static int _EGL_CONTEXT_OPENGL_PROFILE_MASKContent = default;
        private static bool _EGL_CONTEXT_OPENGL_PROFILE_MASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY"/>
        /// </summary>
        public static int EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY { get { if (!_EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGYReady) { _EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGYContent = SGetField<int>(LocalBridgeClazz, "EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY"); _EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGYReady = true; } return _EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGYContent; } }
        private static int _EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGYContent = default;
        private static bool _EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_CONTEXT_OPENGL_ROBUST_ACCESS"/>
        /// </summary>
        public static int EGL_CONTEXT_OPENGL_ROBUST_ACCESS { get { if (!_EGL_CONTEXT_OPENGL_ROBUST_ACCESSReady) { _EGL_CONTEXT_OPENGL_ROBUST_ACCESSContent = SGetField<int>(LocalBridgeClazz, "EGL_CONTEXT_OPENGL_ROBUST_ACCESS"); _EGL_CONTEXT_OPENGL_ROBUST_ACCESSReady = true; } return _EGL_CONTEXT_OPENGL_ROBUST_ACCESSContent; } }
        private static int _EGL_CONTEXT_OPENGL_ROBUST_ACCESSContent = default;
        private static bool _EGL_CONTEXT_OPENGL_ROBUST_ACCESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_GL_COLORSPACE"/>
        /// </summary>
        public static int EGL_GL_COLORSPACE { get { if (!_EGL_GL_COLORSPACEReady) { _EGL_GL_COLORSPACEContent = SGetField<int>(LocalBridgeClazz, "EGL_GL_COLORSPACE"); _EGL_GL_COLORSPACEReady = true; } return _EGL_GL_COLORSPACEContent; } }
        private static int _EGL_GL_COLORSPACEContent = default;
        private static bool _EGL_GL_COLORSPACEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_GL_COLORSPACE_LINEAR"/>
        /// </summary>
        public static int EGL_GL_COLORSPACE_LINEAR { get { if (!_EGL_GL_COLORSPACE_LINEARReady) { _EGL_GL_COLORSPACE_LINEARContent = SGetField<int>(LocalBridgeClazz, "EGL_GL_COLORSPACE_LINEAR"); _EGL_GL_COLORSPACE_LINEARReady = true; } return _EGL_GL_COLORSPACE_LINEARContent; } }
        private static int _EGL_GL_COLORSPACE_LINEARContent = default;
        private static bool _EGL_GL_COLORSPACE_LINEARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_GL_COLORSPACE_SRGB"/>
        /// </summary>
        public static int EGL_GL_COLORSPACE_SRGB { get { if (!_EGL_GL_COLORSPACE_SRGBReady) { _EGL_GL_COLORSPACE_SRGBContent = SGetField<int>(LocalBridgeClazz, "EGL_GL_COLORSPACE_SRGB"); _EGL_GL_COLORSPACE_SRGBReady = true; } return _EGL_GL_COLORSPACE_SRGBContent; } }
        private static int _EGL_GL_COLORSPACE_SRGBContent = default;
        private static bool _EGL_GL_COLORSPACE_SRGBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_GL_RENDERBUFFER"/>
        /// </summary>
        public static int EGL_GL_RENDERBUFFER { get { if (!_EGL_GL_RENDERBUFFERReady) { _EGL_GL_RENDERBUFFERContent = SGetField<int>(LocalBridgeClazz, "EGL_GL_RENDERBUFFER"); _EGL_GL_RENDERBUFFERReady = true; } return _EGL_GL_RENDERBUFFERContent; } }
        private static int _EGL_GL_RENDERBUFFERContent = default;
        private static bool _EGL_GL_RENDERBUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_GL_TEXTURE_2D"/>
        /// </summary>
        public static int EGL_GL_TEXTURE_2D { get { if (!_EGL_GL_TEXTURE_2DReady) { _EGL_GL_TEXTURE_2DContent = SGetField<int>(LocalBridgeClazz, "EGL_GL_TEXTURE_2D"); _EGL_GL_TEXTURE_2DReady = true; } return _EGL_GL_TEXTURE_2DContent; } }
        private static int _EGL_GL_TEXTURE_2DContent = default;
        private static bool _EGL_GL_TEXTURE_2DReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_GL_TEXTURE_3D"/>
        /// </summary>
        public static int EGL_GL_TEXTURE_3D { get { if (!_EGL_GL_TEXTURE_3DReady) { _EGL_GL_TEXTURE_3DContent = SGetField<int>(LocalBridgeClazz, "EGL_GL_TEXTURE_3D"); _EGL_GL_TEXTURE_3DReady = true; } return _EGL_GL_TEXTURE_3DContent; } }
        private static int _EGL_GL_TEXTURE_3DContent = default;
        private static bool _EGL_GL_TEXTURE_3DReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X"/>
        /// </summary>
        public static int EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X { get { if (!_EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_XReady) { _EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_XContent = SGetField<int>(LocalBridgeClazz, "EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X"); _EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_XReady = true; } return _EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_XContent; } }
        private static int _EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_XContent = default;
        private static bool _EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_XReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y"/>
        /// </summary>
        public static int EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y { get { if (!_EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_YReady) { _EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_YContent = SGetField<int>(LocalBridgeClazz, "EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y"); _EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_YReady = true; } return _EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_YContent; } }
        private static int _EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_YContent = default;
        private static bool _EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_YReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z"/>
        /// </summary>
        public static int EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z { get { if (!_EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_ZReady) { _EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_ZContent = SGetField<int>(LocalBridgeClazz, "EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z"); _EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_ZReady = true; } return _EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_ZContent; } }
        private static int _EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_ZContent = default;
        private static bool _EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_ZReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X"/>
        /// </summary>
        public static int EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X { get { if (!_EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_XReady) { _EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_XContent = SGetField<int>(LocalBridgeClazz, "EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X"); _EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_XReady = true; } return _EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_XContent; } }
        private static int _EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_XContent = default;
        private static bool _EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_XReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y"/>
        /// </summary>
        public static int EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y { get { if (!_EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_YReady) { _EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_YContent = SGetField<int>(LocalBridgeClazz, "EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y"); _EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_YReady = true; } return _EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_YContent; } }
        private static int _EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_YContent = default;
        private static bool _EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_YReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z"/>
        /// </summary>
        public static int EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z { get { if (!_EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_ZReady) { _EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_ZContent = SGetField<int>(LocalBridgeClazz, "EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z"); _EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_ZReady = true; } return _EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_ZContent; } }
        private static int _EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_ZContent = default;
        private static bool _EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_ZReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_GL_TEXTURE_LEVEL"/>
        /// </summary>
        public static int EGL_GL_TEXTURE_LEVEL { get { if (!_EGL_GL_TEXTURE_LEVELReady) { _EGL_GL_TEXTURE_LEVELContent = SGetField<int>(LocalBridgeClazz, "EGL_GL_TEXTURE_LEVEL"); _EGL_GL_TEXTURE_LEVELReady = true; } return _EGL_GL_TEXTURE_LEVELContent; } }
        private static int _EGL_GL_TEXTURE_LEVELContent = default;
        private static bool _EGL_GL_TEXTURE_LEVELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_GL_TEXTURE_ZOFFSET"/>
        /// </summary>
        public static int EGL_GL_TEXTURE_ZOFFSET { get { if (!_EGL_GL_TEXTURE_ZOFFSETReady) { _EGL_GL_TEXTURE_ZOFFSETContent = SGetField<int>(LocalBridgeClazz, "EGL_GL_TEXTURE_ZOFFSET"); _EGL_GL_TEXTURE_ZOFFSETReady = true; } return _EGL_GL_TEXTURE_ZOFFSETContent; } }
        private static int _EGL_GL_TEXTURE_ZOFFSETContent = default;
        private static bool _EGL_GL_TEXTURE_ZOFFSETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_IMAGE_PRESERVED"/>
        /// </summary>
        public static int EGL_IMAGE_PRESERVED { get { if (!_EGL_IMAGE_PRESERVEDReady) { _EGL_IMAGE_PRESERVEDContent = SGetField<int>(LocalBridgeClazz, "EGL_IMAGE_PRESERVED"); _EGL_IMAGE_PRESERVEDReady = true; } return _EGL_IMAGE_PRESERVEDContent; } }
        private static int _EGL_IMAGE_PRESERVEDContent = default;
        private static bool _EGL_IMAGE_PRESERVEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_LOSE_CONTEXT_ON_RESET"/>
        /// </summary>
        public static int EGL_LOSE_CONTEXT_ON_RESET { get { if (!_EGL_LOSE_CONTEXT_ON_RESETReady) { _EGL_LOSE_CONTEXT_ON_RESETContent = SGetField<int>(LocalBridgeClazz, "EGL_LOSE_CONTEXT_ON_RESET"); _EGL_LOSE_CONTEXT_ON_RESETReady = true; } return _EGL_LOSE_CONTEXT_ON_RESETContent; } }
        private static int _EGL_LOSE_CONTEXT_ON_RESETContent = default;
        private static bool _EGL_LOSE_CONTEXT_ON_RESETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_NO_RESET_NOTIFICATION"/>
        /// </summary>
        public static int EGL_NO_RESET_NOTIFICATION { get { if (!_EGL_NO_RESET_NOTIFICATIONReady) { _EGL_NO_RESET_NOTIFICATIONContent = SGetField<int>(LocalBridgeClazz, "EGL_NO_RESET_NOTIFICATION"); _EGL_NO_RESET_NOTIFICATIONReady = true; } return _EGL_NO_RESET_NOTIFICATIONContent; } }
        private static int _EGL_NO_RESET_NOTIFICATIONContent = default;
        private static bool _EGL_NO_RESET_NOTIFICATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_OPENGL_ES3_BIT"/>
        /// </summary>
        public static int EGL_OPENGL_ES3_BIT { get { if (!_EGL_OPENGL_ES3_BITReady) { _EGL_OPENGL_ES3_BITContent = SGetField<int>(LocalBridgeClazz, "EGL_OPENGL_ES3_BIT"); _EGL_OPENGL_ES3_BITReady = true; } return _EGL_OPENGL_ES3_BITContent; } }
        private static int _EGL_OPENGL_ES3_BITContent = default;
        private static bool _EGL_OPENGL_ES3_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_PLATFORM_ANDROID_KHR"/>
        /// </summary>
        public static int EGL_PLATFORM_ANDROID_KHR { get { if (!_EGL_PLATFORM_ANDROID_KHRReady) { _EGL_PLATFORM_ANDROID_KHRContent = SGetField<int>(LocalBridgeClazz, "EGL_PLATFORM_ANDROID_KHR"); _EGL_PLATFORM_ANDROID_KHRReady = true; } return _EGL_PLATFORM_ANDROID_KHRContent; } }
        private static int _EGL_PLATFORM_ANDROID_KHRContent = default;
        private static bool _EGL_PLATFORM_ANDROID_KHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_SIGNALED"/>
        /// </summary>
        public static int EGL_SIGNALED { get { if (!_EGL_SIGNALEDReady) { _EGL_SIGNALEDContent = SGetField<int>(LocalBridgeClazz, "EGL_SIGNALED"); _EGL_SIGNALEDReady = true; } return _EGL_SIGNALEDContent; } }
        private static int _EGL_SIGNALEDContent = default;
        private static bool _EGL_SIGNALEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_SYNC_CL_EVENT"/>
        /// </summary>
        public static int EGL_SYNC_CL_EVENT { get { if (!_EGL_SYNC_CL_EVENTReady) { _EGL_SYNC_CL_EVENTContent = SGetField<int>(LocalBridgeClazz, "EGL_SYNC_CL_EVENT"); _EGL_SYNC_CL_EVENTReady = true; } return _EGL_SYNC_CL_EVENTContent; } }
        private static int _EGL_SYNC_CL_EVENTContent = default;
        private static bool _EGL_SYNC_CL_EVENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_SYNC_CL_EVENT_COMPLETE"/>
        /// </summary>
        public static int EGL_SYNC_CL_EVENT_COMPLETE { get { if (!_EGL_SYNC_CL_EVENT_COMPLETEReady) { _EGL_SYNC_CL_EVENT_COMPLETEContent = SGetField<int>(LocalBridgeClazz, "EGL_SYNC_CL_EVENT_COMPLETE"); _EGL_SYNC_CL_EVENT_COMPLETEReady = true; } return _EGL_SYNC_CL_EVENT_COMPLETEContent; } }
        private static int _EGL_SYNC_CL_EVENT_COMPLETEContent = default;
        private static bool _EGL_SYNC_CL_EVENT_COMPLETEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_SYNC_CONDITION"/>
        /// </summary>
        public static int EGL_SYNC_CONDITION { get { if (!_EGL_SYNC_CONDITIONReady) { _EGL_SYNC_CONDITIONContent = SGetField<int>(LocalBridgeClazz, "EGL_SYNC_CONDITION"); _EGL_SYNC_CONDITIONReady = true; } return _EGL_SYNC_CONDITIONContent; } }
        private static int _EGL_SYNC_CONDITIONContent = default;
        private static bool _EGL_SYNC_CONDITIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_SYNC_FENCE"/>
        /// </summary>
        public static int EGL_SYNC_FENCE { get { if (!_EGL_SYNC_FENCEReady) { _EGL_SYNC_FENCEContent = SGetField<int>(LocalBridgeClazz, "EGL_SYNC_FENCE"); _EGL_SYNC_FENCEReady = true; } return _EGL_SYNC_FENCEContent; } }
        private static int _EGL_SYNC_FENCEContent = default;
        private static bool _EGL_SYNC_FENCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_SYNC_FLUSH_COMMANDS_BIT"/>
        /// </summary>
        public static int EGL_SYNC_FLUSH_COMMANDS_BIT { get { if (!_EGL_SYNC_FLUSH_COMMANDS_BITReady) { _EGL_SYNC_FLUSH_COMMANDS_BITContent = SGetField<int>(LocalBridgeClazz, "EGL_SYNC_FLUSH_COMMANDS_BIT"); _EGL_SYNC_FLUSH_COMMANDS_BITReady = true; } return _EGL_SYNC_FLUSH_COMMANDS_BITContent; } }
        private static int _EGL_SYNC_FLUSH_COMMANDS_BITContent = default;
        private static bool _EGL_SYNC_FLUSH_COMMANDS_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_SYNC_PRIOR_COMMANDS_COMPLETE"/>
        /// </summary>
        public static int EGL_SYNC_PRIOR_COMMANDS_COMPLETE { get { if (!_EGL_SYNC_PRIOR_COMMANDS_COMPLETEReady) { _EGL_SYNC_PRIOR_COMMANDS_COMPLETEContent = SGetField<int>(LocalBridgeClazz, "EGL_SYNC_PRIOR_COMMANDS_COMPLETE"); _EGL_SYNC_PRIOR_COMMANDS_COMPLETEReady = true; } return _EGL_SYNC_PRIOR_COMMANDS_COMPLETEContent; } }
        private static int _EGL_SYNC_PRIOR_COMMANDS_COMPLETEContent = default;
        private static bool _EGL_SYNC_PRIOR_COMMANDS_COMPLETEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_SYNC_STATUS"/>
        /// </summary>
        public static int EGL_SYNC_STATUS { get { if (!_EGL_SYNC_STATUSReady) { _EGL_SYNC_STATUSContent = SGetField<int>(LocalBridgeClazz, "EGL_SYNC_STATUS"); _EGL_SYNC_STATUSReady = true; } return _EGL_SYNC_STATUSContent; } }
        private static int _EGL_SYNC_STATUSContent = default;
        private static bool _EGL_SYNC_STATUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_SYNC_TYPE"/>
        /// </summary>
        public static int EGL_SYNC_TYPE { get { if (!_EGL_SYNC_TYPEReady) { _EGL_SYNC_TYPEContent = SGetField<int>(LocalBridgeClazz, "EGL_SYNC_TYPE"); _EGL_SYNC_TYPEReady = true; } return _EGL_SYNC_TYPEContent; } }
        private static int _EGL_SYNC_TYPEContent = default;
        private static bool _EGL_SYNC_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_TIMEOUT_EXPIRED"/>
        /// </summary>
        public static int EGL_TIMEOUT_EXPIRED { get { if (!_EGL_TIMEOUT_EXPIREDReady) { _EGL_TIMEOUT_EXPIREDContent = SGetField<int>(LocalBridgeClazz, "EGL_TIMEOUT_EXPIRED"); _EGL_TIMEOUT_EXPIREDReady = true; } return _EGL_TIMEOUT_EXPIREDContent; } }
        private static int _EGL_TIMEOUT_EXPIREDContent = default;
        private static bool _EGL_TIMEOUT_EXPIREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_UNSIGNALED"/>
        /// </summary>
        public static int EGL_UNSIGNALED { get { if (!_EGL_UNSIGNALEDReady) { _EGL_UNSIGNALEDContent = SGetField<int>(LocalBridgeClazz, "EGL_UNSIGNALED"); _EGL_UNSIGNALEDReady = true; } return _EGL_UNSIGNALEDContent; } }
        private static int _EGL_UNSIGNALEDContent = default;
        private static bool _EGL_UNSIGNALEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#EGL_FOREVER"/>
        /// </summary>
        public static long EGL_FOREVER { get { if (!_EGL_FOREVERReady) { _EGL_FOREVERContent = SGetField<long>(LocalBridgeClazz, "EGL_FOREVER"); _EGL_FOREVERReady = true; } return _EGL_FOREVERContent; } }
        private static long _EGL_FOREVERContent = default;
        private static bool _EGL_FOREVERReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#eglGetPlatformDisplay(int,long,long[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="Android.Opengl.EGLDisplay"/></returns>
        public static Android.Opengl.EGLDisplay EglGetPlatformDisplay(int arg0, long arg1, long[] arg2, int arg3)
        {
            return SExecuteWithSignature<Android.Opengl.EGLDisplay>(LocalBridgeClazz, "eglGetPlatformDisplay", "(IJ[JI)Landroid/opengl/EGLDisplay;", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#eglCreateImage(android.opengl.EGLDisplay,android.opengl.EGLContext,int,long,long[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Opengl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="Android.Opengl.EGLContext"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="long"/></param>
        /// <param name="arg4"><see cref="long"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <returns><see cref="Android.Opengl.EGLImage"/></returns>
        public static Android.Opengl.EGLImage EglCreateImage(Android.Opengl.EGLDisplay arg0, Android.Opengl.EGLContext arg1, int arg2, long arg3, long[] arg4, int arg5)
        {
            return SExecuteWithSignature<Android.Opengl.EGLImage>(LocalBridgeClazz, "eglCreateImage", "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLContext;IJ[JI)Landroid/opengl/EGLImage;", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#eglCreatePlatformPixmapSurface(android.opengl.EGLDisplay,android.opengl.EGLConfig,java.nio.Buffer,long[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Opengl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="Android.Opengl.EGLConfig"/></param>
        /// <param name="arg2"><see cref="Java.Nio.Buffer"/></param>
        /// <param name="arg3"><see cref="long"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <returns><see cref="Android.Opengl.EGLSurface"/></returns>
        public static Android.Opengl.EGLSurface EglCreatePlatformPixmapSurface(Android.Opengl.EGLDisplay arg0, Android.Opengl.EGLConfig arg1, Java.Nio.Buffer arg2, long[] arg3, int arg4)
        {
            return SExecuteWithSignature<Android.Opengl.EGLSurface>(LocalBridgeClazz, "eglCreatePlatformPixmapSurface", "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLConfig;Ljava/nio/Buffer;[JI)Landroid/opengl/EGLSurface;", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#eglCreatePlatformWindowSurface(android.opengl.EGLDisplay,android.opengl.EGLConfig,java.nio.Buffer,long[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Opengl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="Android.Opengl.EGLConfig"/></param>
        /// <param name="arg2"><see cref="Java.Nio.Buffer"/></param>
        /// <param name="arg3"><see cref="long"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <returns><see cref="Android.Opengl.EGLSurface"/></returns>
        public static Android.Opengl.EGLSurface EglCreatePlatformWindowSurface(Android.Opengl.EGLDisplay arg0, Android.Opengl.EGLConfig arg1, Java.Nio.Buffer arg2, long[] arg3, int arg4)
        {
            return SExecuteWithSignature<Android.Opengl.EGLSurface>(LocalBridgeClazz, "eglCreatePlatformWindowSurface", "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLConfig;Ljava/nio/Buffer;[JI)Landroid/opengl/EGLSurface;", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#eglCreateSync(android.opengl.EGLDisplay,int,long[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Opengl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="Android.Opengl.EGLSync"/></returns>
        public static Android.Opengl.EGLSync EglCreateSync(Android.Opengl.EGLDisplay arg0, int arg1, long[] arg2, int arg3)
        {
            return SExecuteWithSignature<Android.Opengl.EGLSync>(LocalBridgeClazz, "eglCreateSync", "(Landroid/opengl/EGLDisplay;I[JI)Landroid/opengl/EGLSync;", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#eglDestroyImage(android.opengl.EGLDisplay,android.opengl.EGLImage)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Opengl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="Android.Opengl.EGLImage"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool EglDestroyImage(Android.Opengl.EGLDisplay arg0, Android.Opengl.EGLImage arg1)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "eglDestroyImage", "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLImage;)Z", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#eglDestroySync(android.opengl.EGLDisplay,android.opengl.EGLSync)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Opengl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="Android.Opengl.EGLSync"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool EglDestroySync(Android.Opengl.EGLDisplay arg0, Android.Opengl.EGLSync arg1)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "eglDestroySync", "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLSync;)Z", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#eglGetSyncAttrib(android.opengl.EGLDisplay,android.opengl.EGLSync,int,long[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Opengl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="Android.Opengl.EGLSync"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="long"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool EglGetSyncAttrib(Android.Opengl.EGLDisplay arg0, Android.Opengl.EGLSync arg1, int arg2, long[] arg3, int arg4)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "eglGetSyncAttrib", "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLSync;I[JI)Z", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#eglWaitSync(android.opengl.EGLDisplay,android.opengl.EGLSync,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Opengl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="Android.Opengl.EGLSync"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool EglWaitSync(Android.Opengl.EGLDisplay arg0, Android.Opengl.EGLSync arg1, int arg2)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "eglWaitSync", "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLSync;I)Z", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/EGL15.html#eglClientWaitSync(android.opengl.EGLDisplay,android.opengl.EGLSync,int,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Opengl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="Android.Opengl.EGLSync"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="long"/></param>
        /// <returns><see cref="int"/></returns>
        public static int EglClientWaitSync(Android.Opengl.EGLDisplay arg0, Android.Opengl.EGLSync arg1, int arg2, long arg3)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "eglClientWaitSync", "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLSync;IJ)I", arg0, arg1, arg2, arg3);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
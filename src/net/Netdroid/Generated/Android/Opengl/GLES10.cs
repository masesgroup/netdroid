/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Opengl
{
    #region GLES10
    public partial class GLES10
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_ADD"/>
        /// </summary>
        public static int GL_ADD { get { if (!_GL_ADDReady) { _GL_ADDContent = SGetField<int>(LocalBridgeClazz, "GL_ADD"); _GL_ADDReady = true; } return _GL_ADDContent; } }
        private static int _GL_ADDContent = default;
        private static bool _GL_ADDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_ALIASED_LINE_WIDTH_RANGE"/>
        /// </summary>
        public static int GL_ALIASED_LINE_WIDTH_RANGE { get { if (!_GL_ALIASED_LINE_WIDTH_RANGEReady) { _GL_ALIASED_LINE_WIDTH_RANGEContent = SGetField<int>(LocalBridgeClazz, "GL_ALIASED_LINE_WIDTH_RANGE"); _GL_ALIASED_LINE_WIDTH_RANGEReady = true; } return _GL_ALIASED_LINE_WIDTH_RANGEContent; } }
        private static int _GL_ALIASED_LINE_WIDTH_RANGEContent = default;
        private static bool _GL_ALIASED_LINE_WIDTH_RANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_ALIASED_POINT_SIZE_RANGE"/>
        /// </summary>
        public static int GL_ALIASED_POINT_SIZE_RANGE { get { if (!_GL_ALIASED_POINT_SIZE_RANGEReady) { _GL_ALIASED_POINT_SIZE_RANGEContent = SGetField<int>(LocalBridgeClazz, "GL_ALIASED_POINT_SIZE_RANGE"); _GL_ALIASED_POINT_SIZE_RANGEReady = true; } return _GL_ALIASED_POINT_SIZE_RANGEContent; } }
        private static int _GL_ALIASED_POINT_SIZE_RANGEContent = default;
        private static bool _GL_ALIASED_POINT_SIZE_RANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_ALPHA"/>
        /// </summary>
        public static int GL_ALPHA { get { if (!_GL_ALPHAReady) { _GL_ALPHAContent = SGetField<int>(LocalBridgeClazz, "GL_ALPHA"); _GL_ALPHAReady = true; } return _GL_ALPHAContent; } }
        private static int _GL_ALPHAContent = default;
        private static bool _GL_ALPHAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_ALPHA_BITS"/>
        /// </summary>
        public static int GL_ALPHA_BITS { get { if (!_GL_ALPHA_BITSReady) { _GL_ALPHA_BITSContent = SGetField<int>(LocalBridgeClazz, "GL_ALPHA_BITS"); _GL_ALPHA_BITSReady = true; } return _GL_ALPHA_BITSContent; } }
        private static int _GL_ALPHA_BITSContent = default;
        private static bool _GL_ALPHA_BITSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_ALPHA_TEST"/>
        /// </summary>
        public static int GL_ALPHA_TEST { get { if (!_GL_ALPHA_TESTReady) { _GL_ALPHA_TESTContent = SGetField<int>(LocalBridgeClazz, "GL_ALPHA_TEST"); _GL_ALPHA_TESTReady = true; } return _GL_ALPHA_TESTContent; } }
        private static int _GL_ALPHA_TESTContent = default;
        private static bool _GL_ALPHA_TESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_ALWAYS"/>
        /// </summary>
        public static int GL_ALWAYS { get { if (!_GL_ALWAYSReady) { _GL_ALWAYSContent = SGetField<int>(LocalBridgeClazz, "GL_ALWAYS"); _GL_ALWAYSReady = true; } return _GL_ALWAYSContent; } }
        private static int _GL_ALWAYSContent = default;
        private static bool _GL_ALWAYSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_AMBIENT"/>
        /// </summary>
        public static int GL_AMBIENT { get { if (!_GL_AMBIENTReady) { _GL_AMBIENTContent = SGetField<int>(LocalBridgeClazz, "GL_AMBIENT"); _GL_AMBIENTReady = true; } return _GL_AMBIENTContent; } }
        private static int _GL_AMBIENTContent = default;
        private static bool _GL_AMBIENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_AMBIENT_AND_DIFFUSE"/>
        /// </summary>
        public static int GL_AMBIENT_AND_DIFFUSE { get { if (!_GL_AMBIENT_AND_DIFFUSEReady) { _GL_AMBIENT_AND_DIFFUSEContent = SGetField<int>(LocalBridgeClazz, "GL_AMBIENT_AND_DIFFUSE"); _GL_AMBIENT_AND_DIFFUSEReady = true; } return _GL_AMBIENT_AND_DIFFUSEContent; } }
        private static int _GL_AMBIENT_AND_DIFFUSEContent = default;
        private static bool _GL_AMBIENT_AND_DIFFUSEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_AND"/>
        /// </summary>
        public static int GL_AND { get { if (!_GL_ANDReady) { _GL_ANDContent = SGetField<int>(LocalBridgeClazz, "GL_AND"); _GL_ANDReady = true; } return _GL_ANDContent; } }
        private static int _GL_ANDContent = default;
        private static bool _GL_ANDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_AND_INVERTED"/>
        /// </summary>
        public static int GL_AND_INVERTED { get { if (!_GL_AND_INVERTEDReady) { _GL_AND_INVERTEDContent = SGetField<int>(LocalBridgeClazz, "GL_AND_INVERTED"); _GL_AND_INVERTEDReady = true; } return _GL_AND_INVERTEDContent; } }
        private static int _GL_AND_INVERTEDContent = default;
        private static bool _GL_AND_INVERTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_AND_REVERSE"/>
        /// </summary>
        public static int GL_AND_REVERSE { get { if (!_GL_AND_REVERSEReady) { _GL_AND_REVERSEContent = SGetField<int>(LocalBridgeClazz, "GL_AND_REVERSE"); _GL_AND_REVERSEReady = true; } return _GL_AND_REVERSEContent; } }
        private static int _GL_AND_REVERSEContent = default;
        private static bool _GL_AND_REVERSEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_BACK"/>
        /// </summary>
        public static int GL_BACK { get { if (!_GL_BACKReady) { _GL_BACKContent = SGetField<int>(LocalBridgeClazz, "GL_BACK"); _GL_BACKReady = true; } return _GL_BACKContent; } }
        private static int _GL_BACKContent = default;
        private static bool _GL_BACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_BLEND"/>
        /// </summary>
        public static int GL_BLEND { get { if (!_GL_BLENDReady) { _GL_BLENDContent = SGetField<int>(LocalBridgeClazz, "GL_BLEND"); _GL_BLENDReady = true; } return _GL_BLENDContent; } }
        private static int _GL_BLENDContent = default;
        private static bool _GL_BLENDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_BLUE_BITS"/>
        /// </summary>
        public static int GL_BLUE_BITS { get { if (!_GL_BLUE_BITSReady) { _GL_BLUE_BITSContent = SGetField<int>(LocalBridgeClazz, "GL_BLUE_BITS"); _GL_BLUE_BITSReady = true; } return _GL_BLUE_BITSContent; } }
        private static int _GL_BLUE_BITSContent = default;
        private static bool _GL_BLUE_BITSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_BYTE"/>
        /// </summary>
        public static int GL_BYTE { get { if (!_GL_BYTEReady) { _GL_BYTEContent = SGetField<int>(LocalBridgeClazz, "GL_BYTE"); _GL_BYTEReady = true; } return _GL_BYTEContent; } }
        private static int _GL_BYTEContent = default;
        private static bool _GL_BYTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_CCW"/>
        /// </summary>
        public static int GL_CCW { get { if (!_GL_CCWReady) { _GL_CCWContent = SGetField<int>(LocalBridgeClazz, "GL_CCW"); _GL_CCWReady = true; } return _GL_CCWContent; } }
        private static int _GL_CCWContent = default;
        private static bool _GL_CCWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_CLAMP_TO_EDGE"/>
        /// </summary>
        public static int GL_CLAMP_TO_EDGE { get { if (!_GL_CLAMP_TO_EDGEReady) { _GL_CLAMP_TO_EDGEContent = SGetField<int>(LocalBridgeClazz, "GL_CLAMP_TO_EDGE"); _GL_CLAMP_TO_EDGEReady = true; } return _GL_CLAMP_TO_EDGEContent; } }
        private static int _GL_CLAMP_TO_EDGEContent = default;
        private static bool _GL_CLAMP_TO_EDGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_CLEAR"/>
        /// </summary>
        public static int GL_CLEAR { get { if (!_GL_CLEARReady) { _GL_CLEARContent = SGetField<int>(LocalBridgeClazz, "GL_CLEAR"); _GL_CLEARReady = true; } return _GL_CLEARContent; } }
        private static int _GL_CLEARContent = default;
        private static bool _GL_CLEARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_COLOR_ARRAY"/>
        /// </summary>
        public static int GL_COLOR_ARRAY { get { if (!_GL_COLOR_ARRAYReady) { _GL_COLOR_ARRAYContent = SGetField<int>(LocalBridgeClazz, "GL_COLOR_ARRAY"); _GL_COLOR_ARRAYReady = true; } return _GL_COLOR_ARRAYContent; } }
        private static int _GL_COLOR_ARRAYContent = default;
        private static bool _GL_COLOR_ARRAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_COLOR_BUFFER_BIT"/>
        /// </summary>
        public static int GL_COLOR_BUFFER_BIT { get { if (!_GL_COLOR_BUFFER_BITReady) { _GL_COLOR_BUFFER_BITContent = SGetField<int>(LocalBridgeClazz, "GL_COLOR_BUFFER_BIT"); _GL_COLOR_BUFFER_BITReady = true; } return _GL_COLOR_BUFFER_BITContent; } }
        private static int _GL_COLOR_BUFFER_BITContent = default;
        private static bool _GL_COLOR_BUFFER_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_COLOR_LOGIC_OP"/>
        /// </summary>
        public static int GL_COLOR_LOGIC_OP { get { if (!_GL_COLOR_LOGIC_OPReady) { _GL_COLOR_LOGIC_OPContent = SGetField<int>(LocalBridgeClazz, "GL_COLOR_LOGIC_OP"); _GL_COLOR_LOGIC_OPReady = true; } return _GL_COLOR_LOGIC_OPContent; } }
        private static int _GL_COLOR_LOGIC_OPContent = default;
        private static bool _GL_COLOR_LOGIC_OPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_COLOR_MATERIAL"/>
        /// </summary>
        public static int GL_COLOR_MATERIAL { get { if (!_GL_COLOR_MATERIALReady) { _GL_COLOR_MATERIALContent = SGetField<int>(LocalBridgeClazz, "GL_COLOR_MATERIAL"); _GL_COLOR_MATERIALReady = true; } return _GL_COLOR_MATERIALContent; } }
        private static int _GL_COLOR_MATERIALContent = default;
        private static bool _GL_COLOR_MATERIALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_COMPRESSED_TEXTURE_FORMATS"/>
        /// </summary>
        public static int GL_COMPRESSED_TEXTURE_FORMATS { get { if (!_GL_COMPRESSED_TEXTURE_FORMATSReady) { _GL_COMPRESSED_TEXTURE_FORMATSContent = SGetField<int>(LocalBridgeClazz, "GL_COMPRESSED_TEXTURE_FORMATS"); _GL_COMPRESSED_TEXTURE_FORMATSReady = true; } return _GL_COMPRESSED_TEXTURE_FORMATSContent; } }
        private static int _GL_COMPRESSED_TEXTURE_FORMATSContent = default;
        private static bool _GL_COMPRESSED_TEXTURE_FORMATSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_CONSTANT_ATTENUATION"/>
        /// </summary>
        public static int GL_CONSTANT_ATTENUATION { get { if (!_GL_CONSTANT_ATTENUATIONReady) { _GL_CONSTANT_ATTENUATIONContent = SGetField<int>(LocalBridgeClazz, "GL_CONSTANT_ATTENUATION"); _GL_CONSTANT_ATTENUATIONReady = true; } return _GL_CONSTANT_ATTENUATIONContent; } }
        private static int _GL_CONSTANT_ATTENUATIONContent = default;
        private static bool _GL_CONSTANT_ATTENUATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_COPY"/>
        /// </summary>
        public static int GL_COPY { get { if (!_GL_COPYReady) { _GL_COPYContent = SGetField<int>(LocalBridgeClazz, "GL_COPY"); _GL_COPYReady = true; } return _GL_COPYContent; } }
        private static int _GL_COPYContent = default;
        private static bool _GL_COPYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_COPY_INVERTED"/>
        /// </summary>
        public static int GL_COPY_INVERTED { get { if (!_GL_COPY_INVERTEDReady) { _GL_COPY_INVERTEDContent = SGetField<int>(LocalBridgeClazz, "GL_COPY_INVERTED"); _GL_COPY_INVERTEDReady = true; } return _GL_COPY_INVERTEDContent; } }
        private static int _GL_COPY_INVERTEDContent = default;
        private static bool _GL_COPY_INVERTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_CULL_FACE"/>
        /// </summary>
        public static int GL_CULL_FACE { get { if (!_GL_CULL_FACEReady) { _GL_CULL_FACEContent = SGetField<int>(LocalBridgeClazz, "GL_CULL_FACE"); _GL_CULL_FACEReady = true; } return _GL_CULL_FACEContent; } }
        private static int _GL_CULL_FACEContent = default;
        private static bool _GL_CULL_FACEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_CW"/>
        /// </summary>
        public static int GL_CW { get { if (!_GL_CWReady) { _GL_CWContent = SGetField<int>(LocalBridgeClazz, "GL_CW"); _GL_CWReady = true; } return _GL_CWContent; } }
        private static int _GL_CWContent = default;
        private static bool _GL_CWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_DECAL"/>
        /// </summary>
        public static int GL_DECAL { get { if (!_GL_DECALReady) { _GL_DECALContent = SGetField<int>(LocalBridgeClazz, "GL_DECAL"); _GL_DECALReady = true; } return _GL_DECALContent; } }
        private static int _GL_DECALContent = default;
        private static bool _GL_DECALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_DECR"/>
        /// </summary>
        public static int GL_DECR { get { if (!_GL_DECRReady) { _GL_DECRContent = SGetField<int>(LocalBridgeClazz, "GL_DECR"); _GL_DECRReady = true; } return _GL_DECRContent; } }
        private static int _GL_DECRContent = default;
        private static bool _GL_DECRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_DEPTH_BITS"/>
        /// </summary>
        public static int GL_DEPTH_BITS { get { if (!_GL_DEPTH_BITSReady) { _GL_DEPTH_BITSContent = SGetField<int>(LocalBridgeClazz, "GL_DEPTH_BITS"); _GL_DEPTH_BITSReady = true; } return _GL_DEPTH_BITSContent; } }
        private static int _GL_DEPTH_BITSContent = default;
        private static bool _GL_DEPTH_BITSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_DEPTH_BUFFER_BIT"/>
        /// </summary>
        public static int GL_DEPTH_BUFFER_BIT { get { if (!_GL_DEPTH_BUFFER_BITReady) { _GL_DEPTH_BUFFER_BITContent = SGetField<int>(LocalBridgeClazz, "GL_DEPTH_BUFFER_BIT"); _GL_DEPTH_BUFFER_BITReady = true; } return _GL_DEPTH_BUFFER_BITContent; } }
        private static int _GL_DEPTH_BUFFER_BITContent = default;
        private static bool _GL_DEPTH_BUFFER_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_DEPTH_TEST"/>
        /// </summary>
        public static int GL_DEPTH_TEST { get { if (!_GL_DEPTH_TESTReady) { _GL_DEPTH_TESTContent = SGetField<int>(LocalBridgeClazz, "GL_DEPTH_TEST"); _GL_DEPTH_TESTReady = true; } return _GL_DEPTH_TESTContent; } }
        private static int _GL_DEPTH_TESTContent = default;
        private static bool _GL_DEPTH_TESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_DIFFUSE"/>
        /// </summary>
        public static int GL_DIFFUSE { get { if (!_GL_DIFFUSEReady) { _GL_DIFFUSEContent = SGetField<int>(LocalBridgeClazz, "GL_DIFFUSE"); _GL_DIFFUSEReady = true; } return _GL_DIFFUSEContent; } }
        private static int _GL_DIFFUSEContent = default;
        private static bool _GL_DIFFUSEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_DITHER"/>
        /// </summary>
        public static int GL_DITHER { get { if (!_GL_DITHERReady) { _GL_DITHERContent = SGetField<int>(LocalBridgeClazz, "GL_DITHER"); _GL_DITHERReady = true; } return _GL_DITHERContent; } }
        private static int _GL_DITHERContent = default;
        private static bool _GL_DITHERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_DONT_CARE"/>
        /// </summary>
        public static int GL_DONT_CARE { get { if (!_GL_DONT_CAREReady) { _GL_DONT_CAREContent = SGetField<int>(LocalBridgeClazz, "GL_DONT_CARE"); _GL_DONT_CAREReady = true; } return _GL_DONT_CAREContent; } }
        private static int _GL_DONT_CAREContent = default;
        private static bool _GL_DONT_CAREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_DST_ALPHA"/>
        /// </summary>
        public static int GL_DST_ALPHA { get { if (!_GL_DST_ALPHAReady) { _GL_DST_ALPHAContent = SGetField<int>(LocalBridgeClazz, "GL_DST_ALPHA"); _GL_DST_ALPHAReady = true; } return _GL_DST_ALPHAContent; } }
        private static int _GL_DST_ALPHAContent = default;
        private static bool _GL_DST_ALPHAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_DST_COLOR"/>
        /// </summary>
        public static int GL_DST_COLOR { get { if (!_GL_DST_COLORReady) { _GL_DST_COLORContent = SGetField<int>(LocalBridgeClazz, "GL_DST_COLOR"); _GL_DST_COLORReady = true; } return _GL_DST_COLORContent; } }
        private static int _GL_DST_COLORContent = default;
        private static bool _GL_DST_COLORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_EMISSION"/>
        /// </summary>
        public static int GL_EMISSION { get { if (!_GL_EMISSIONReady) { _GL_EMISSIONContent = SGetField<int>(LocalBridgeClazz, "GL_EMISSION"); _GL_EMISSIONReady = true; } return _GL_EMISSIONContent; } }
        private static int _GL_EMISSIONContent = default;
        private static bool _GL_EMISSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_EQUAL"/>
        /// </summary>
        public static int GL_EQUAL { get { if (!_GL_EQUALReady) { _GL_EQUALContent = SGetField<int>(LocalBridgeClazz, "GL_EQUAL"); _GL_EQUALReady = true; } return _GL_EQUALContent; } }
        private static int _GL_EQUALContent = default;
        private static bool _GL_EQUALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_EQUIV"/>
        /// </summary>
        public static int GL_EQUIV { get { if (!_GL_EQUIVReady) { _GL_EQUIVContent = SGetField<int>(LocalBridgeClazz, "GL_EQUIV"); _GL_EQUIVReady = true; } return _GL_EQUIVContent; } }
        private static int _GL_EQUIVContent = default;
        private static bool _GL_EQUIVReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_EXP"/>
        /// </summary>
        public static int GL_EXP { get { if (!_GL_EXPReady) { _GL_EXPContent = SGetField<int>(LocalBridgeClazz, "GL_EXP"); _GL_EXPReady = true; } return _GL_EXPContent; } }
        private static int _GL_EXPContent = default;
        private static bool _GL_EXPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_EXP2"/>
        /// </summary>
        public static int GL_EXP2 { get { if (!_GL_EXP2Ready) { _GL_EXP2Content = SGetField<int>(LocalBridgeClazz, "GL_EXP2"); _GL_EXP2Ready = true; } return _GL_EXP2Content; } }
        private static int _GL_EXP2Content = default;
        private static bool _GL_EXP2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_EXTENSIONS"/>
        /// </summary>
        public static int GL_EXTENSIONS { get { if (!_GL_EXTENSIONSReady) { _GL_EXTENSIONSContent = SGetField<int>(LocalBridgeClazz, "GL_EXTENSIONS"); _GL_EXTENSIONSReady = true; } return _GL_EXTENSIONSContent; } }
        private static int _GL_EXTENSIONSContent = default;
        private static bool _GL_EXTENSIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_FALSE"/>
        /// </summary>
        public static int GL_FALSE { get { if (!_GL_FALSEReady) { _GL_FALSEContent = SGetField<int>(LocalBridgeClazz, "GL_FALSE"); _GL_FALSEReady = true; } return _GL_FALSEContent; } }
        private static int _GL_FALSEContent = default;
        private static bool _GL_FALSEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_FASTEST"/>
        /// </summary>
        public static int GL_FASTEST { get { if (!_GL_FASTESTReady) { _GL_FASTESTContent = SGetField<int>(LocalBridgeClazz, "GL_FASTEST"); _GL_FASTESTReady = true; } return _GL_FASTESTContent; } }
        private static int _GL_FASTESTContent = default;
        private static bool _GL_FASTESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_FIXED"/>
        /// </summary>
        public static int GL_FIXED { get { if (!_GL_FIXEDReady) { _GL_FIXEDContent = SGetField<int>(LocalBridgeClazz, "GL_FIXED"); _GL_FIXEDReady = true; } return _GL_FIXEDContent; } }
        private static int _GL_FIXEDContent = default;
        private static bool _GL_FIXEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_FLAT"/>
        /// </summary>
        public static int GL_FLAT { get { if (!_GL_FLATReady) { _GL_FLATContent = SGetField<int>(LocalBridgeClazz, "GL_FLAT"); _GL_FLATReady = true; } return _GL_FLATContent; } }
        private static int _GL_FLATContent = default;
        private static bool _GL_FLATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_FLOAT"/>
        /// </summary>
        public static int GL_FLOAT { get { if (!_GL_FLOATReady) { _GL_FLOATContent = SGetField<int>(LocalBridgeClazz, "GL_FLOAT"); _GL_FLOATReady = true; } return _GL_FLOATContent; } }
        private static int _GL_FLOATContent = default;
        private static bool _GL_FLOATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_FOG"/>
        /// </summary>
        public static int GL_FOG { get { if (!_GL_FOGReady) { _GL_FOGContent = SGetField<int>(LocalBridgeClazz, "GL_FOG"); _GL_FOGReady = true; } return _GL_FOGContent; } }
        private static int _GL_FOGContent = default;
        private static bool _GL_FOGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_FOG_COLOR"/>
        /// </summary>
        public static int GL_FOG_COLOR { get { if (!_GL_FOG_COLORReady) { _GL_FOG_COLORContent = SGetField<int>(LocalBridgeClazz, "GL_FOG_COLOR"); _GL_FOG_COLORReady = true; } return _GL_FOG_COLORContent; } }
        private static int _GL_FOG_COLORContent = default;
        private static bool _GL_FOG_COLORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_FOG_DENSITY"/>
        /// </summary>
        public static int GL_FOG_DENSITY { get { if (!_GL_FOG_DENSITYReady) { _GL_FOG_DENSITYContent = SGetField<int>(LocalBridgeClazz, "GL_FOG_DENSITY"); _GL_FOG_DENSITYReady = true; } return _GL_FOG_DENSITYContent; } }
        private static int _GL_FOG_DENSITYContent = default;
        private static bool _GL_FOG_DENSITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_FOG_END"/>
        /// </summary>
        public static int GL_FOG_END { get { if (!_GL_FOG_ENDReady) { _GL_FOG_ENDContent = SGetField<int>(LocalBridgeClazz, "GL_FOG_END"); _GL_FOG_ENDReady = true; } return _GL_FOG_ENDContent; } }
        private static int _GL_FOG_ENDContent = default;
        private static bool _GL_FOG_ENDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_FOG_HINT"/>
        /// </summary>
        public static int GL_FOG_HINT { get { if (!_GL_FOG_HINTReady) { _GL_FOG_HINTContent = SGetField<int>(LocalBridgeClazz, "GL_FOG_HINT"); _GL_FOG_HINTReady = true; } return _GL_FOG_HINTContent; } }
        private static int _GL_FOG_HINTContent = default;
        private static bool _GL_FOG_HINTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_FOG_MODE"/>
        /// </summary>
        public static int GL_FOG_MODE { get { if (!_GL_FOG_MODEReady) { _GL_FOG_MODEContent = SGetField<int>(LocalBridgeClazz, "GL_FOG_MODE"); _GL_FOG_MODEReady = true; } return _GL_FOG_MODEContent; } }
        private static int _GL_FOG_MODEContent = default;
        private static bool _GL_FOG_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_FOG_START"/>
        /// </summary>
        public static int GL_FOG_START { get { if (!_GL_FOG_STARTReady) { _GL_FOG_STARTContent = SGetField<int>(LocalBridgeClazz, "GL_FOG_START"); _GL_FOG_STARTReady = true; } return _GL_FOG_STARTContent; } }
        private static int _GL_FOG_STARTContent = default;
        private static bool _GL_FOG_STARTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_FRONT"/>
        /// </summary>
        public static int GL_FRONT { get { if (!_GL_FRONTReady) { _GL_FRONTContent = SGetField<int>(LocalBridgeClazz, "GL_FRONT"); _GL_FRONTReady = true; } return _GL_FRONTContent; } }
        private static int _GL_FRONTContent = default;
        private static bool _GL_FRONTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_FRONT_AND_BACK"/>
        /// </summary>
        public static int GL_FRONT_AND_BACK { get { if (!_GL_FRONT_AND_BACKReady) { _GL_FRONT_AND_BACKContent = SGetField<int>(LocalBridgeClazz, "GL_FRONT_AND_BACK"); _GL_FRONT_AND_BACKReady = true; } return _GL_FRONT_AND_BACKContent; } }
        private static int _GL_FRONT_AND_BACKContent = default;
        private static bool _GL_FRONT_AND_BACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_GEQUAL"/>
        /// </summary>
        public static int GL_GEQUAL { get { if (!_GL_GEQUALReady) { _GL_GEQUALContent = SGetField<int>(LocalBridgeClazz, "GL_GEQUAL"); _GL_GEQUALReady = true; } return _GL_GEQUALContent; } }
        private static int _GL_GEQUALContent = default;
        private static bool _GL_GEQUALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_GREATER"/>
        /// </summary>
        public static int GL_GREATER { get { if (!_GL_GREATERReady) { _GL_GREATERContent = SGetField<int>(LocalBridgeClazz, "GL_GREATER"); _GL_GREATERReady = true; } return _GL_GREATERContent; } }
        private static int _GL_GREATERContent = default;
        private static bool _GL_GREATERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_GREEN_BITS"/>
        /// </summary>
        public static int GL_GREEN_BITS { get { if (!_GL_GREEN_BITSReady) { _GL_GREEN_BITSContent = SGetField<int>(LocalBridgeClazz, "GL_GREEN_BITS"); _GL_GREEN_BITSReady = true; } return _GL_GREEN_BITSContent; } }
        private static int _GL_GREEN_BITSContent = default;
        private static bool _GL_GREEN_BITSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES"/>
        /// </summary>
        public static int GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES { get { if (!_GL_IMPLEMENTATION_COLOR_READ_FORMAT_OESReady) { _GL_IMPLEMENTATION_COLOR_READ_FORMAT_OESContent = SGetField<int>(LocalBridgeClazz, "GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES"); _GL_IMPLEMENTATION_COLOR_READ_FORMAT_OESReady = true; } return _GL_IMPLEMENTATION_COLOR_READ_FORMAT_OESContent; } }
        private static int _GL_IMPLEMENTATION_COLOR_READ_FORMAT_OESContent = default;
        private static bool _GL_IMPLEMENTATION_COLOR_READ_FORMAT_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_IMPLEMENTATION_COLOR_READ_TYPE_OES"/>
        /// </summary>
        public static int GL_IMPLEMENTATION_COLOR_READ_TYPE_OES { get { if (!_GL_IMPLEMENTATION_COLOR_READ_TYPE_OESReady) { _GL_IMPLEMENTATION_COLOR_READ_TYPE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_IMPLEMENTATION_COLOR_READ_TYPE_OES"); _GL_IMPLEMENTATION_COLOR_READ_TYPE_OESReady = true; } return _GL_IMPLEMENTATION_COLOR_READ_TYPE_OESContent; } }
        private static int _GL_IMPLEMENTATION_COLOR_READ_TYPE_OESContent = default;
        private static bool _GL_IMPLEMENTATION_COLOR_READ_TYPE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_INCR"/>
        /// </summary>
        public static int GL_INCR { get { if (!_GL_INCRReady) { _GL_INCRContent = SGetField<int>(LocalBridgeClazz, "GL_INCR"); _GL_INCRReady = true; } return _GL_INCRContent; } }
        private static int _GL_INCRContent = default;
        private static bool _GL_INCRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_INVALID_ENUM"/>
        /// </summary>
        public static int GL_INVALID_ENUM { get { if (!_GL_INVALID_ENUMReady) { _GL_INVALID_ENUMContent = SGetField<int>(LocalBridgeClazz, "GL_INVALID_ENUM"); _GL_INVALID_ENUMReady = true; } return _GL_INVALID_ENUMContent; } }
        private static int _GL_INVALID_ENUMContent = default;
        private static bool _GL_INVALID_ENUMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_INVALID_OPERATION"/>
        /// </summary>
        public static int GL_INVALID_OPERATION { get { if (!_GL_INVALID_OPERATIONReady) { _GL_INVALID_OPERATIONContent = SGetField<int>(LocalBridgeClazz, "GL_INVALID_OPERATION"); _GL_INVALID_OPERATIONReady = true; } return _GL_INVALID_OPERATIONContent; } }
        private static int _GL_INVALID_OPERATIONContent = default;
        private static bool _GL_INVALID_OPERATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_INVALID_VALUE"/>
        /// </summary>
        public static int GL_INVALID_VALUE { get { if (!_GL_INVALID_VALUEReady) { _GL_INVALID_VALUEContent = SGetField<int>(LocalBridgeClazz, "GL_INVALID_VALUE"); _GL_INVALID_VALUEReady = true; } return _GL_INVALID_VALUEContent; } }
        private static int _GL_INVALID_VALUEContent = default;
        private static bool _GL_INVALID_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_INVERT"/>
        /// </summary>
        public static int GL_INVERT { get { if (!_GL_INVERTReady) { _GL_INVERTContent = SGetField<int>(LocalBridgeClazz, "GL_INVERT"); _GL_INVERTReady = true; } return _GL_INVERTContent; } }
        private static int _GL_INVERTContent = default;
        private static bool _GL_INVERTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_KEEP"/>
        /// </summary>
        public static int GL_KEEP { get { if (!_GL_KEEPReady) { _GL_KEEPContent = SGetField<int>(LocalBridgeClazz, "GL_KEEP"); _GL_KEEPReady = true; } return _GL_KEEPContent; } }
        private static int _GL_KEEPContent = default;
        private static bool _GL_KEEPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_LEQUAL"/>
        /// </summary>
        public static int GL_LEQUAL { get { if (!_GL_LEQUALReady) { _GL_LEQUALContent = SGetField<int>(LocalBridgeClazz, "GL_LEQUAL"); _GL_LEQUALReady = true; } return _GL_LEQUALContent; } }
        private static int _GL_LEQUALContent = default;
        private static bool _GL_LEQUALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_LESS"/>
        /// </summary>
        public static int GL_LESS { get { if (!_GL_LESSReady) { _GL_LESSContent = SGetField<int>(LocalBridgeClazz, "GL_LESS"); _GL_LESSReady = true; } return _GL_LESSContent; } }
        private static int _GL_LESSContent = default;
        private static bool _GL_LESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_LIGHT_MODEL_AMBIENT"/>
        /// </summary>
        public static int GL_LIGHT_MODEL_AMBIENT { get { if (!_GL_LIGHT_MODEL_AMBIENTReady) { _GL_LIGHT_MODEL_AMBIENTContent = SGetField<int>(LocalBridgeClazz, "GL_LIGHT_MODEL_AMBIENT"); _GL_LIGHT_MODEL_AMBIENTReady = true; } return _GL_LIGHT_MODEL_AMBIENTContent; } }
        private static int _GL_LIGHT_MODEL_AMBIENTContent = default;
        private static bool _GL_LIGHT_MODEL_AMBIENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_LIGHT_MODEL_TWO_SIDE"/>
        /// </summary>
        public static int GL_LIGHT_MODEL_TWO_SIDE { get { if (!_GL_LIGHT_MODEL_TWO_SIDEReady) { _GL_LIGHT_MODEL_TWO_SIDEContent = SGetField<int>(LocalBridgeClazz, "GL_LIGHT_MODEL_TWO_SIDE"); _GL_LIGHT_MODEL_TWO_SIDEReady = true; } return _GL_LIGHT_MODEL_TWO_SIDEContent; } }
        private static int _GL_LIGHT_MODEL_TWO_SIDEContent = default;
        private static bool _GL_LIGHT_MODEL_TWO_SIDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_LIGHT0"/>
        /// </summary>
        public static int GL_LIGHT0 { get { if (!_GL_LIGHT0Ready) { _GL_LIGHT0Content = SGetField<int>(LocalBridgeClazz, "GL_LIGHT0"); _GL_LIGHT0Ready = true; } return _GL_LIGHT0Content; } }
        private static int _GL_LIGHT0Content = default;
        private static bool _GL_LIGHT0Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_LIGHT1"/>
        /// </summary>
        public static int GL_LIGHT1 { get { if (!_GL_LIGHT1Ready) { _GL_LIGHT1Content = SGetField<int>(LocalBridgeClazz, "GL_LIGHT1"); _GL_LIGHT1Ready = true; } return _GL_LIGHT1Content; } }
        private static int _GL_LIGHT1Content = default;
        private static bool _GL_LIGHT1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_LIGHT2"/>
        /// </summary>
        public static int GL_LIGHT2 { get { if (!_GL_LIGHT2Ready) { _GL_LIGHT2Content = SGetField<int>(LocalBridgeClazz, "GL_LIGHT2"); _GL_LIGHT2Ready = true; } return _GL_LIGHT2Content; } }
        private static int _GL_LIGHT2Content = default;
        private static bool _GL_LIGHT2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_LIGHT3"/>
        /// </summary>
        public static int GL_LIGHT3 { get { if (!_GL_LIGHT3Ready) { _GL_LIGHT3Content = SGetField<int>(LocalBridgeClazz, "GL_LIGHT3"); _GL_LIGHT3Ready = true; } return _GL_LIGHT3Content; } }
        private static int _GL_LIGHT3Content = default;
        private static bool _GL_LIGHT3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_LIGHT4"/>
        /// </summary>
        public static int GL_LIGHT4 { get { if (!_GL_LIGHT4Ready) { _GL_LIGHT4Content = SGetField<int>(LocalBridgeClazz, "GL_LIGHT4"); _GL_LIGHT4Ready = true; } return _GL_LIGHT4Content; } }
        private static int _GL_LIGHT4Content = default;
        private static bool _GL_LIGHT4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_LIGHT5"/>
        /// </summary>
        public static int GL_LIGHT5 { get { if (!_GL_LIGHT5Ready) { _GL_LIGHT5Content = SGetField<int>(LocalBridgeClazz, "GL_LIGHT5"); _GL_LIGHT5Ready = true; } return _GL_LIGHT5Content; } }
        private static int _GL_LIGHT5Content = default;
        private static bool _GL_LIGHT5Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_LIGHT6"/>
        /// </summary>
        public static int GL_LIGHT6 { get { if (!_GL_LIGHT6Ready) { _GL_LIGHT6Content = SGetField<int>(LocalBridgeClazz, "GL_LIGHT6"); _GL_LIGHT6Ready = true; } return _GL_LIGHT6Content; } }
        private static int _GL_LIGHT6Content = default;
        private static bool _GL_LIGHT6Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_LIGHT7"/>
        /// </summary>
        public static int GL_LIGHT7 { get { if (!_GL_LIGHT7Ready) { _GL_LIGHT7Content = SGetField<int>(LocalBridgeClazz, "GL_LIGHT7"); _GL_LIGHT7Ready = true; } return _GL_LIGHT7Content; } }
        private static int _GL_LIGHT7Content = default;
        private static bool _GL_LIGHT7Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_LIGHTING"/>
        /// </summary>
        public static int GL_LIGHTING { get { if (!_GL_LIGHTINGReady) { _GL_LIGHTINGContent = SGetField<int>(LocalBridgeClazz, "GL_LIGHTING"); _GL_LIGHTINGReady = true; } return _GL_LIGHTINGContent; } }
        private static int _GL_LIGHTINGContent = default;
        private static bool _GL_LIGHTINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_LINE_LOOP"/>
        /// </summary>
        public static int GL_LINE_LOOP { get { if (!_GL_LINE_LOOPReady) { _GL_LINE_LOOPContent = SGetField<int>(LocalBridgeClazz, "GL_LINE_LOOP"); _GL_LINE_LOOPReady = true; } return _GL_LINE_LOOPContent; } }
        private static int _GL_LINE_LOOPContent = default;
        private static bool _GL_LINE_LOOPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_LINE_SMOOTH"/>
        /// </summary>
        public static int GL_LINE_SMOOTH { get { if (!_GL_LINE_SMOOTHReady) { _GL_LINE_SMOOTHContent = SGetField<int>(LocalBridgeClazz, "GL_LINE_SMOOTH"); _GL_LINE_SMOOTHReady = true; } return _GL_LINE_SMOOTHContent; } }
        private static int _GL_LINE_SMOOTHContent = default;
        private static bool _GL_LINE_SMOOTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_LINE_SMOOTH_HINT"/>
        /// </summary>
        public static int GL_LINE_SMOOTH_HINT { get { if (!_GL_LINE_SMOOTH_HINTReady) { _GL_LINE_SMOOTH_HINTContent = SGetField<int>(LocalBridgeClazz, "GL_LINE_SMOOTH_HINT"); _GL_LINE_SMOOTH_HINTReady = true; } return _GL_LINE_SMOOTH_HINTContent; } }
        private static int _GL_LINE_SMOOTH_HINTContent = default;
        private static bool _GL_LINE_SMOOTH_HINTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_LINE_STRIP"/>
        /// </summary>
        public static int GL_LINE_STRIP { get { if (!_GL_LINE_STRIPReady) { _GL_LINE_STRIPContent = SGetField<int>(LocalBridgeClazz, "GL_LINE_STRIP"); _GL_LINE_STRIPReady = true; } return _GL_LINE_STRIPContent; } }
        private static int _GL_LINE_STRIPContent = default;
        private static bool _GL_LINE_STRIPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_LINEAR"/>
        /// </summary>
        public static int GL_LINEAR { get { if (!_GL_LINEARReady) { _GL_LINEARContent = SGetField<int>(LocalBridgeClazz, "GL_LINEAR"); _GL_LINEARReady = true; } return _GL_LINEARContent; } }
        private static int _GL_LINEARContent = default;
        private static bool _GL_LINEARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_LINEAR_ATTENUATION"/>
        /// </summary>
        public static int GL_LINEAR_ATTENUATION { get { if (!_GL_LINEAR_ATTENUATIONReady) { _GL_LINEAR_ATTENUATIONContent = SGetField<int>(LocalBridgeClazz, "GL_LINEAR_ATTENUATION"); _GL_LINEAR_ATTENUATIONReady = true; } return _GL_LINEAR_ATTENUATIONContent; } }
        private static int _GL_LINEAR_ATTENUATIONContent = default;
        private static bool _GL_LINEAR_ATTENUATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_LINEAR_MIPMAP_LINEAR"/>
        /// </summary>
        public static int GL_LINEAR_MIPMAP_LINEAR { get { if (!_GL_LINEAR_MIPMAP_LINEARReady) { _GL_LINEAR_MIPMAP_LINEARContent = SGetField<int>(LocalBridgeClazz, "GL_LINEAR_MIPMAP_LINEAR"); _GL_LINEAR_MIPMAP_LINEARReady = true; } return _GL_LINEAR_MIPMAP_LINEARContent; } }
        private static int _GL_LINEAR_MIPMAP_LINEARContent = default;
        private static bool _GL_LINEAR_MIPMAP_LINEARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_LINEAR_MIPMAP_NEAREST"/>
        /// </summary>
        public static int GL_LINEAR_MIPMAP_NEAREST { get { if (!_GL_LINEAR_MIPMAP_NEARESTReady) { _GL_LINEAR_MIPMAP_NEARESTContent = SGetField<int>(LocalBridgeClazz, "GL_LINEAR_MIPMAP_NEAREST"); _GL_LINEAR_MIPMAP_NEARESTReady = true; } return _GL_LINEAR_MIPMAP_NEARESTContent; } }
        private static int _GL_LINEAR_MIPMAP_NEARESTContent = default;
        private static bool _GL_LINEAR_MIPMAP_NEARESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_LINES"/>
        /// </summary>
        public static int GL_LINES { get { if (!_GL_LINESReady) { _GL_LINESContent = SGetField<int>(LocalBridgeClazz, "GL_LINES"); _GL_LINESReady = true; } return _GL_LINESContent; } }
        private static int _GL_LINESContent = default;
        private static bool _GL_LINESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_LUMINANCE"/>
        /// </summary>
        public static int GL_LUMINANCE { get { if (!_GL_LUMINANCEReady) { _GL_LUMINANCEContent = SGetField<int>(LocalBridgeClazz, "GL_LUMINANCE"); _GL_LUMINANCEReady = true; } return _GL_LUMINANCEContent; } }
        private static int _GL_LUMINANCEContent = default;
        private static bool _GL_LUMINANCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_LUMINANCE_ALPHA"/>
        /// </summary>
        public static int GL_LUMINANCE_ALPHA { get { if (!_GL_LUMINANCE_ALPHAReady) { _GL_LUMINANCE_ALPHAContent = SGetField<int>(LocalBridgeClazz, "GL_LUMINANCE_ALPHA"); _GL_LUMINANCE_ALPHAReady = true; } return _GL_LUMINANCE_ALPHAContent; } }
        private static int _GL_LUMINANCE_ALPHAContent = default;
        private static bool _GL_LUMINANCE_ALPHAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_MAX_ELEMENTS_INDICES"/>
        /// </summary>
        public static int GL_MAX_ELEMENTS_INDICES { get { if (!_GL_MAX_ELEMENTS_INDICESReady) { _GL_MAX_ELEMENTS_INDICESContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_ELEMENTS_INDICES"); _GL_MAX_ELEMENTS_INDICESReady = true; } return _GL_MAX_ELEMENTS_INDICESContent; } }
        private static int _GL_MAX_ELEMENTS_INDICESContent = default;
        private static bool _GL_MAX_ELEMENTS_INDICESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_MAX_ELEMENTS_VERTICES"/>
        /// </summary>
        public static int GL_MAX_ELEMENTS_VERTICES { get { if (!_GL_MAX_ELEMENTS_VERTICESReady) { _GL_MAX_ELEMENTS_VERTICESContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_ELEMENTS_VERTICES"); _GL_MAX_ELEMENTS_VERTICESReady = true; } return _GL_MAX_ELEMENTS_VERTICESContent; } }
        private static int _GL_MAX_ELEMENTS_VERTICESContent = default;
        private static bool _GL_MAX_ELEMENTS_VERTICESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_MAX_LIGHTS"/>
        /// </summary>
        public static int GL_MAX_LIGHTS { get { if (!_GL_MAX_LIGHTSReady) { _GL_MAX_LIGHTSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_LIGHTS"); _GL_MAX_LIGHTSReady = true; } return _GL_MAX_LIGHTSContent; } }
        private static int _GL_MAX_LIGHTSContent = default;
        private static bool _GL_MAX_LIGHTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_MAX_MODELVIEW_STACK_DEPTH"/>
        /// </summary>
        public static int GL_MAX_MODELVIEW_STACK_DEPTH { get { if (!_GL_MAX_MODELVIEW_STACK_DEPTHReady) { _GL_MAX_MODELVIEW_STACK_DEPTHContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_MODELVIEW_STACK_DEPTH"); _GL_MAX_MODELVIEW_STACK_DEPTHReady = true; } return _GL_MAX_MODELVIEW_STACK_DEPTHContent; } }
        private static int _GL_MAX_MODELVIEW_STACK_DEPTHContent = default;
        private static bool _GL_MAX_MODELVIEW_STACK_DEPTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_MAX_PROJECTION_STACK_DEPTH"/>
        /// </summary>
        public static int GL_MAX_PROJECTION_STACK_DEPTH { get { if (!_GL_MAX_PROJECTION_STACK_DEPTHReady) { _GL_MAX_PROJECTION_STACK_DEPTHContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_PROJECTION_STACK_DEPTH"); _GL_MAX_PROJECTION_STACK_DEPTHReady = true; } return _GL_MAX_PROJECTION_STACK_DEPTHContent; } }
        private static int _GL_MAX_PROJECTION_STACK_DEPTHContent = default;
        private static bool _GL_MAX_PROJECTION_STACK_DEPTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_MAX_TEXTURE_SIZE"/>
        /// </summary>
        public static int GL_MAX_TEXTURE_SIZE { get { if (!_GL_MAX_TEXTURE_SIZEReady) { _GL_MAX_TEXTURE_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TEXTURE_SIZE"); _GL_MAX_TEXTURE_SIZEReady = true; } return _GL_MAX_TEXTURE_SIZEContent; } }
        private static int _GL_MAX_TEXTURE_SIZEContent = default;
        private static bool _GL_MAX_TEXTURE_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_MAX_TEXTURE_STACK_DEPTH"/>
        /// </summary>
        public static int GL_MAX_TEXTURE_STACK_DEPTH { get { if (!_GL_MAX_TEXTURE_STACK_DEPTHReady) { _GL_MAX_TEXTURE_STACK_DEPTHContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TEXTURE_STACK_DEPTH"); _GL_MAX_TEXTURE_STACK_DEPTHReady = true; } return _GL_MAX_TEXTURE_STACK_DEPTHContent; } }
        private static int _GL_MAX_TEXTURE_STACK_DEPTHContent = default;
        private static bool _GL_MAX_TEXTURE_STACK_DEPTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_MAX_TEXTURE_UNITS"/>
        /// </summary>
        public static int GL_MAX_TEXTURE_UNITS { get { if (!_GL_MAX_TEXTURE_UNITSReady) { _GL_MAX_TEXTURE_UNITSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_TEXTURE_UNITS"); _GL_MAX_TEXTURE_UNITSReady = true; } return _GL_MAX_TEXTURE_UNITSContent; } }
        private static int _GL_MAX_TEXTURE_UNITSContent = default;
        private static bool _GL_MAX_TEXTURE_UNITSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_MAX_VIEWPORT_DIMS"/>
        /// </summary>
        public static int GL_MAX_VIEWPORT_DIMS { get { if (!_GL_MAX_VIEWPORT_DIMSReady) { _GL_MAX_VIEWPORT_DIMSContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_VIEWPORT_DIMS"); _GL_MAX_VIEWPORT_DIMSReady = true; } return _GL_MAX_VIEWPORT_DIMSContent; } }
        private static int _GL_MAX_VIEWPORT_DIMSContent = default;
        private static bool _GL_MAX_VIEWPORT_DIMSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_MODELVIEW"/>
        /// </summary>
        public static int GL_MODELVIEW { get { if (!_GL_MODELVIEWReady) { _GL_MODELVIEWContent = SGetField<int>(LocalBridgeClazz, "GL_MODELVIEW"); _GL_MODELVIEWReady = true; } return _GL_MODELVIEWContent; } }
        private static int _GL_MODELVIEWContent = default;
        private static bool _GL_MODELVIEWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_MODULATE"/>
        /// </summary>
        public static int GL_MODULATE { get { if (!_GL_MODULATEReady) { _GL_MODULATEContent = SGetField<int>(LocalBridgeClazz, "GL_MODULATE"); _GL_MODULATEReady = true; } return _GL_MODULATEContent; } }
        private static int _GL_MODULATEContent = default;
        private static bool _GL_MODULATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_MULTISAMPLE"/>
        /// </summary>
        public static int GL_MULTISAMPLE { get { if (!_GL_MULTISAMPLEReady) { _GL_MULTISAMPLEContent = SGetField<int>(LocalBridgeClazz, "GL_MULTISAMPLE"); _GL_MULTISAMPLEReady = true; } return _GL_MULTISAMPLEContent; } }
        private static int _GL_MULTISAMPLEContent = default;
        private static bool _GL_MULTISAMPLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_NAND"/>
        /// </summary>
        public static int GL_NAND { get { if (!_GL_NANDReady) { _GL_NANDContent = SGetField<int>(LocalBridgeClazz, "GL_NAND"); _GL_NANDReady = true; } return _GL_NANDContent; } }
        private static int _GL_NANDContent = default;
        private static bool _GL_NANDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_NEAREST"/>
        /// </summary>
        public static int GL_NEAREST { get { if (!_GL_NEARESTReady) { _GL_NEARESTContent = SGetField<int>(LocalBridgeClazz, "GL_NEAREST"); _GL_NEARESTReady = true; } return _GL_NEARESTContent; } }
        private static int _GL_NEARESTContent = default;
        private static bool _GL_NEARESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_NEAREST_MIPMAP_LINEAR"/>
        /// </summary>
        public static int GL_NEAREST_MIPMAP_LINEAR { get { if (!_GL_NEAREST_MIPMAP_LINEARReady) { _GL_NEAREST_MIPMAP_LINEARContent = SGetField<int>(LocalBridgeClazz, "GL_NEAREST_MIPMAP_LINEAR"); _GL_NEAREST_MIPMAP_LINEARReady = true; } return _GL_NEAREST_MIPMAP_LINEARContent; } }
        private static int _GL_NEAREST_MIPMAP_LINEARContent = default;
        private static bool _GL_NEAREST_MIPMAP_LINEARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_NEAREST_MIPMAP_NEAREST"/>
        /// </summary>
        public static int GL_NEAREST_MIPMAP_NEAREST { get { if (!_GL_NEAREST_MIPMAP_NEARESTReady) { _GL_NEAREST_MIPMAP_NEARESTContent = SGetField<int>(LocalBridgeClazz, "GL_NEAREST_MIPMAP_NEAREST"); _GL_NEAREST_MIPMAP_NEARESTReady = true; } return _GL_NEAREST_MIPMAP_NEARESTContent; } }
        private static int _GL_NEAREST_MIPMAP_NEARESTContent = default;
        private static bool _GL_NEAREST_MIPMAP_NEARESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_NEVER"/>
        /// </summary>
        public static int GL_NEVER { get { if (!_GL_NEVERReady) { _GL_NEVERContent = SGetField<int>(LocalBridgeClazz, "GL_NEVER"); _GL_NEVERReady = true; } return _GL_NEVERContent; } }
        private static int _GL_NEVERContent = default;
        private static bool _GL_NEVERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_NICEST"/>
        /// </summary>
        public static int GL_NICEST { get { if (!_GL_NICESTReady) { _GL_NICESTContent = SGetField<int>(LocalBridgeClazz, "GL_NICEST"); _GL_NICESTReady = true; } return _GL_NICESTContent; } }
        private static int _GL_NICESTContent = default;
        private static bool _GL_NICESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_NO_ERROR"/>
        /// </summary>
        public static int GL_NO_ERROR { get { if (!_GL_NO_ERRORReady) { _GL_NO_ERRORContent = SGetField<int>(LocalBridgeClazz, "GL_NO_ERROR"); _GL_NO_ERRORReady = true; } return _GL_NO_ERRORContent; } }
        private static int _GL_NO_ERRORContent = default;
        private static bool _GL_NO_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_NOOP"/>
        /// </summary>
        public static int GL_NOOP { get { if (!_GL_NOOPReady) { _GL_NOOPContent = SGetField<int>(LocalBridgeClazz, "GL_NOOP"); _GL_NOOPReady = true; } return _GL_NOOPContent; } }
        private static int _GL_NOOPContent = default;
        private static bool _GL_NOOPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_NOR"/>
        /// </summary>
        public static int GL_NOR { get { if (!_GL_NORReady) { _GL_NORContent = SGetField<int>(LocalBridgeClazz, "GL_NOR"); _GL_NORReady = true; } return _GL_NORContent; } }
        private static int _GL_NORContent = default;
        private static bool _GL_NORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_NORMAL_ARRAY"/>
        /// </summary>
        public static int GL_NORMAL_ARRAY { get { if (!_GL_NORMAL_ARRAYReady) { _GL_NORMAL_ARRAYContent = SGetField<int>(LocalBridgeClazz, "GL_NORMAL_ARRAY"); _GL_NORMAL_ARRAYReady = true; } return _GL_NORMAL_ARRAYContent; } }
        private static int _GL_NORMAL_ARRAYContent = default;
        private static bool _GL_NORMAL_ARRAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_NORMALIZE"/>
        /// </summary>
        public static int GL_NORMALIZE { get { if (!_GL_NORMALIZEReady) { _GL_NORMALIZEContent = SGetField<int>(LocalBridgeClazz, "GL_NORMALIZE"); _GL_NORMALIZEReady = true; } return _GL_NORMALIZEContent; } }
        private static int _GL_NORMALIZEContent = default;
        private static bool _GL_NORMALIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_NOTEQUAL"/>
        /// </summary>
        public static int GL_NOTEQUAL { get { if (!_GL_NOTEQUALReady) { _GL_NOTEQUALContent = SGetField<int>(LocalBridgeClazz, "GL_NOTEQUAL"); _GL_NOTEQUALReady = true; } return _GL_NOTEQUALContent; } }
        private static int _GL_NOTEQUALContent = default;
        private static bool _GL_NOTEQUALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_NUM_COMPRESSED_TEXTURE_FORMATS"/>
        /// </summary>
        public static int GL_NUM_COMPRESSED_TEXTURE_FORMATS { get { if (!_GL_NUM_COMPRESSED_TEXTURE_FORMATSReady) { _GL_NUM_COMPRESSED_TEXTURE_FORMATSContent = SGetField<int>(LocalBridgeClazz, "GL_NUM_COMPRESSED_TEXTURE_FORMATS"); _GL_NUM_COMPRESSED_TEXTURE_FORMATSReady = true; } return _GL_NUM_COMPRESSED_TEXTURE_FORMATSContent; } }
        private static int _GL_NUM_COMPRESSED_TEXTURE_FORMATSContent = default;
        private static bool _GL_NUM_COMPRESSED_TEXTURE_FORMATSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_ONE"/>
        /// </summary>
        public static int GL_ONE { get { if (!_GL_ONEReady) { _GL_ONEContent = SGetField<int>(LocalBridgeClazz, "GL_ONE"); _GL_ONEReady = true; } return _GL_ONEContent; } }
        private static int _GL_ONEContent = default;
        private static bool _GL_ONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_ONE_MINUS_DST_ALPHA"/>
        /// </summary>
        public static int GL_ONE_MINUS_DST_ALPHA { get { if (!_GL_ONE_MINUS_DST_ALPHAReady) { _GL_ONE_MINUS_DST_ALPHAContent = SGetField<int>(LocalBridgeClazz, "GL_ONE_MINUS_DST_ALPHA"); _GL_ONE_MINUS_DST_ALPHAReady = true; } return _GL_ONE_MINUS_DST_ALPHAContent; } }
        private static int _GL_ONE_MINUS_DST_ALPHAContent = default;
        private static bool _GL_ONE_MINUS_DST_ALPHAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_ONE_MINUS_DST_COLOR"/>
        /// </summary>
        public static int GL_ONE_MINUS_DST_COLOR { get { if (!_GL_ONE_MINUS_DST_COLORReady) { _GL_ONE_MINUS_DST_COLORContent = SGetField<int>(LocalBridgeClazz, "GL_ONE_MINUS_DST_COLOR"); _GL_ONE_MINUS_DST_COLORReady = true; } return _GL_ONE_MINUS_DST_COLORContent; } }
        private static int _GL_ONE_MINUS_DST_COLORContent = default;
        private static bool _GL_ONE_MINUS_DST_COLORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_ONE_MINUS_SRC_ALPHA"/>
        /// </summary>
        public static int GL_ONE_MINUS_SRC_ALPHA { get { if (!_GL_ONE_MINUS_SRC_ALPHAReady) { _GL_ONE_MINUS_SRC_ALPHAContent = SGetField<int>(LocalBridgeClazz, "GL_ONE_MINUS_SRC_ALPHA"); _GL_ONE_MINUS_SRC_ALPHAReady = true; } return _GL_ONE_MINUS_SRC_ALPHAContent; } }
        private static int _GL_ONE_MINUS_SRC_ALPHAContent = default;
        private static bool _GL_ONE_MINUS_SRC_ALPHAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_ONE_MINUS_SRC_COLOR"/>
        /// </summary>
        public static int GL_ONE_MINUS_SRC_COLOR { get { if (!_GL_ONE_MINUS_SRC_COLORReady) { _GL_ONE_MINUS_SRC_COLORContent = SGetField<int>(LocalBridgeClazz, "GL_ONE_MINUS_SRC_COLOR"); _GL_ONE_MINUS_SRC_COLORReady = true; } return _GL_ONE_MINUS_SRC_COLORContent; } }
        private static int _GL_ONE_MINUS_SRC_COLORContent = default;
        private static bool _GL_ONE_MINUS_SRC_COLORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_OR"/>
        /// </summary>
        public static int GL_OR { get { if (!_GL_ORReady) { _GL_ORContent = SGetField<int>(LocalBridgeClazz, "GL_OR"); _GL_ORReady = true; } return _GL_ORContent; } }
        private static int _GL_ORContent = default;
        private static bool _GL_ORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_OR_INVERTED"/>
        /// </summary>
        public static int GL_OR_INVERTED { get { if (!_GL_OR_INVERTEDReady) { _GL_OR_INVERTEDContent = SGetField<int>(LocalBridgeClazz, "GL_OR_INVERTED"); _GL_OR_INVERTEDReady = true; } return _GL_OR_INVERTEDContent; } }
        private static int _GL_OR_INVERTEDContent = default;
        private static bool _GL_OR_INVERTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_OR_REVERSE"/>
        /// </summary>
        public static int GL_OR_REVERSE { get { if (!_GL_OR_REVERSEReady) { _GL_OR_REVERSEContent = SGetField<int>(LocalBridgeClazz, "GL_OR_REVERSE"); _GL_OR_REVERSEReady = true; } return _GL_OR_REVERSEContent; } }
        private static int _GL_OR_REVERSEContent = default;
        private static bool _GL_OR_REVERSEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_OUT_OF_MEMORY"/>
        /// </summary>
        public static int GL_OUT_OF_MEMORY { get { if (!_GL_OUT_OF_MEMORYReady) { _GL_OUT_OF_MEMORYContent = SGetField<int>(LocalBridgeClazz, "GL_OUT_OF_MEMORY"); _GL_OUT_OF_MEMORYReady = true; } return _GL_OUT_OF_MEMORYContent; } }
        private static int _GL_OUT_OF_MEMORYContent = default;
        private static bool _GL_OUT_OF_MEMORYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_PACK_ALIGNMENT"/>
        /// </summary>
        public static int GL_PACK_ALIGNMENT { get { if (!_GL_PACK_ALIGNMENTReady) { _GL_PACK_ALIGNMENTContent = SGetField<int>(LocalBridgeClazz, "GL_PACK_ALIGNMENT"); _GL_PACK_ALIGNMENTReady = true; } return _GL_PACK_ALIGNMENTContent; } }
        private static int _GL_PACK_ALIGNMENTContent = default;
        private static bool _GL_PACK_ALIGNMENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_PALETTE4_R5_G6_B5_OES"/>
        /// </summary>
        public static int GL_PALETTE4_R5_G6_B5_OES { get { if (!_GL_PALETTE4_R5_G6_B5_OESReady) { _GL_PALETTE4_R5_G6_B5_OESContent = SGetField<int>(LocalBridgeClazz, "GL_PALETTE4_R5_G6_B5_OES"); _GL_PALETTE4_R5_G6_B5_OESReady = true; } return _GL_PALETTE4_R5_G6_B5_OESContent; } }
        private static int _GL_PALETTE4_R5_G6_B5_OESContent = default;
        private static bool _GL_PALETTE4_R5_G6_B5_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_PALETTE4_RGB5_A1_OES"/>
        /// </summary>
        public static int GL_PALETTE4_RGB5_A1_OES { get { if (!_GL_PALETTE4_RGB5_A1_OESReady) { _GL_PALETTE4_RGB5_A1_OESContent = SGetField<int>(LocalBridgeClazz, "GL_PALETTE4_RGB5_A1_OES"); _GL_PALETTE4_RGB5_A1_OESReady = true; } return _GL_PALETTE4_RGB5_A1_OESContent; } }
        private static int _GL_PALETTE4_RGB5_A1_OESContent = default;
        private static bool _GL_PALETTE4_RGB5_A1_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_PALETTE4_RGB8_OES"/>
        /// </summary>
        public static int GL_PALETTE4_RGB8_OES { get { if (!_GL_PALETTE4_RGB8_OESReady) { _GL_PALETTE4_RGB8_OESContent = SGetField<int>(LocalBridgeClazz, "GL_PALETTE4_RGB8_OES"); _GL_PALETTE4_RGB8_OESReady = true; } return _GL_PALETTE4_RGB8_OESContent; } }
        private static int _GL_PALETTE4_RGB8_OESContent = default;
        private static bool _GL_PALETTE4_RGB8_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_PALETTE4_RGBA4_OES"/>
        /// </summary>
        public static int GL_PALETTE4_RGBA4_OES { get { if (!_GL_PALETTE4_RGBA4_OESReady) { _GL_PALETTE4_RGBA4_OESContent = SGetField<int>(LocalBridgeClazz, "GL_PALETTE4_RGBA4_OES"); _GL_PALETTE4_RGBA4_OESReady = true; } return _GL_PALETTE4_RGBA4_OESContent; } }
        private static int _GL_PALETTE4_RGBA4_OESContent = default;
        private static bool _GL_PALETTE4_RGBA4_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_PALETTE4_RGBA8_OES"/>
        /// </summary>
        public static int GL_PALETTE4_RGBA8_OES { get { if (!_GL_PALETTE4_RGBA8_OESReady) { _GL_PALETTE4_RGBA8_OESContent = SGetField<int>(LocalBridgeClazz, "GL_PALETTE4_RGBA8_OES"); _GL_PALETTE4_RGBA8_OESReady = true; } return _GL_PALETTE4_RGBA8_OESContent; } }
        private static int _GL_PALETTE4_RGBA8_OESContent = default;
        private static bool _GL_PALETTE4_RGBA8_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_PALETTE8_R5_G6_B5_OES"/>
        /// </summary>
        public static int GL_PALETTE8_R5_G6_B5_OES { get { if (!_GL_PALETTE8_R5_G6_B5_OESReady) { _GL_PALETTE8_R5_G6_B5_OESContent = SGetField<int>(LocalBridgeClazz, "GL_PALETTE8_R5_G6_B5_OES"); _GL_PALETTE8_R5_G6_B5_OESReady = true; } return _GL_PALETTE8_R5_G6_B5_OESContent; } }
        private static int _GL_PALETTE8_R5_G6_B5_OESContent = default;
        private static bool _GL_PALETTE8_R5_G6_B5_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_PALETTE8_RGB5_A1_OES"/>
        /// </summary>
        public static int GL_PALETTE8_RGB5_A1_OES { get { if (!_GL_PALETTE8_RGB5_A1_OESReady) { _GL_PALETTE8_RGB5_A1_OESContent = SGetField<int>(LocalBridgeClazz, "GL_PALETTE8_RGB5_A1_OES"); _GL_PALETTE8_RGB5_A1_OESReady = true; } return _GL_PALETTE8_RGB5_A1_OESContent; } }
        private static int _GL_PALETTE8_RGB5_A1_OESContent = default;
        private static bool _GL_PALETTE8_RGB5_A1_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_PALETTE8_RGB8_OES"/>
        /// </summary>
        public static int GL_PALETTE8_RGB8_OES { get { if (!_GL_PALETTE8_RGB8_OESReady) { _GL_PALETTE8_RGB8_OESContent = SGetField<int>(LocalBridgeClazz, "GL_PALETTE8_RGB8_OES"); _GL_PALETTE8_RGB8_OESReady = true; } return _GL_PALETTE8_RGB8_OESContent; } }
        private static int _GL_PALETTE8_RGB8_OESContent = default;
        private static bool _GL_PALETTE8_RGB8_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_PALETTE8_RGBA4_OES"/>
        /// </summary>
        public static int GL_PALETTE8_RGBA4_OES { get { if (!_GL_PALETTE8_RGBA4_OESReady) { _GL_PALETTE8_RGBA4_OESContent = SGetField<int>(LocalBridgeClazz, "GL_PALETTE8_RGBA4_OES"); _GL_PALETTE8_RGBA4_OESReady = true; } return _GL_PALETTE8_RGBA4_OESContent; } }
        private static int _GL_PALETTE8_RGBA4_OESContent = default;
        private static bool _GL_PALETTE8_RGBA4_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_PALETTE8_RGBA8_OES"/>
        /// </summary>
        public static int GL_PALETTE8_RGBA8_OES { get { if (!_GL_PALETTE8_RGBA8_OESReady) { _GL_PALETTE8_RGBA8_OESContent = SGetField<int>(LocalBridgeClazz, "GL_PALETTE8_RGBA8_OES"); _GL_PALETTE8_RGBA8_OESReady = true; } return _GL_PALETTE8_RGBA8_OESContent; } }
        private static int _GL_PALETTE8_RGBA8_OESContent = default;
        private static bool _GL_PALETTE8_RGBA8_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_PERSPECTIVE_CORRECTION_HINT"/>
        /// </summary>
        public static int GL_PERSPECTIVE_CORRECTION_HINT { get { if (!_GL_PERSPECTIVE_CORRECTION_HINTReady) { _GL_PERSPECTIVE_CORRECTION_HINTContent = SGetField<int>(LocalBridgeClazz, "GL_PERSPECTIVE_CORRECTION_HINT"); _GL_PERSPECTIVE_CORRECTION_HINTReady = true; } return _GL_PERSPECTIVE_CORRECTION_HINTContent; } }
        private static int _GL_PERSPECTIVE_CORRECTION_HINTContent = default;
        private static bool _GL_PERSPECTIVE_CORRECTION_HINTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_POINT_FADE_THRESHOLD_SIZE"/>
        /// </summary>
        public static int GL_POINT_FADE_THRESHOLD_SIZE { get { if (!_GL_POINT_FADE_THRESHOLD_SIZEReady) { _GL_POINT_FADE_THRESHOLD_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_POINT_FADE_THRESHOLD_SIZE"); _GL_POINT_FADE_THRESHOLD_SIZEReady = true; } return _GL_POINT_FADE_THRESHOLD_SIZEContent; } }
        private static int _GL_POINT_FADE_THRESHOLD_SIZEContent = default;
        private static bool _GL_POINT_FADE_THRESHOLD_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_POINT_SIZE"/>
        /// </summary>
        public static int GL_POINT_SIZE { get { if (!_GL_POINT_SIZEReady) { _GL_POINT_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_POINT_SIZE"); _GL_POINT_SIZEReady = true; } return _GL_POINT_SIZEContent; } }
        private static int _GL_POINT_SIZEContent = default;
        private static bool _GL_POINT_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_POINT_SMOOTH"/>
        /// </summary>
        public static int GL_POINT_SMOOTH { get { if (!_GL_POINT_SMOOTHReady) { _GL_POINT_SMOOTHContent = SGetField<int>(LocalBridgeClazz, "GL_POINT_SMOOTH"); _GL_POINT_SMOOTHReady = true; } return _GL_POINT_SMOOTHContent; } }
        private static int _GL_POINT_SMOOTHContent = default;
        private static bool _GL_POINT_SMOOTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_POINT_SMOOTH_HINT"/>
        /// </summary>
        public static int GL_POINT_SMOOTH_HINT { get { if (!_GL_POINT_SMOOTH_HINTReady) { _GL_POINT_SMOOTH_HINTContent = SGetField<int>(LocalBridgeClazz, "GL_POINT_SMOOTH_HINT"); _GL_POINT_SMOOTH_HINTReady = true; } return _GL_POINT_SMOOTH_HINTContent; } }
        private static int _GL_POINT_SMOOTH_HINTContent = default;
        private static bool _GL_POINT_SMOOTH_HINTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_POINTS"/>
        /// </summary>
        public static int GL_POINTS { get { if (!_GL_POINTSReady) { _GL_POINTSContent = SGetField<int>(LocalBridgeClazz, "GL_POINTS"); _GL_POINTSReady = true; } return _GL_POINTSContent; } }
        private static int _GL_POINTSContent = default;
        private static bool _GL_POINTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_POLYGON_OFFSET_FILL"/>
        /// </summary>
        public static int GL_POLYGON_OFFSET_FILL { get { if (!_GL_POLYGON_OFFSET_FILLReady) { _GL_POLYGON_OFFSET_FILLContent = SGetField<int>(LocalBridgeClazz, "GL_POLYGON_OFFSET_FILL"); _GL_POLYGON_OFFSET_FILLReady = true; } return _GL_POLYGON_OFFSET_FILLContent; } }
        private static int _GL_POLYGON_OFFSET_FILLContent = default;
        private static bool _GL_POLYGON_OFFSET_FILLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_POLYGON_SMOOTH_HINT"/>
        /// </summary>
        public static int GL_POLYGON_SMOOTH_HINT { get { if (!_GL_POLYGON_SMOOTH_HINTReady) { _GL_POLYGON_SMOOTH_HINTContent = SGetField<int>(LocalBridgeClazz, "GL_POLYGON_SMOOTH_HINT"); _GL_POLYGON_SMOOTH_HINTReady = true; } return _GL_POLYGON_SMOOTH_HINTContent; } }
        private static int _GL_POLYGON_SMOOTH_HINTContent = default;
        private static bool _GL_POLYGON_SMOOTH_HINTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_POSITION"/>
        /// </summary>
        public static int GL_POSITION { get { if (!_GL_POSITIONReady) { _GL_POSITIONContent = SGetField<int>(LocalBridgeClazz, "GL_POSITION"); _GL_POSITIONReady = true; } return _GL_POSITIONContent; } }
        private static int _GL_POSITIONContent = default;
        private static bool _GL_POSITIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_PROJECTION"/>
        /// </summary>
        public static int GL_PROJECTION { get { if (!_GL_PROJECTIONReady) { _GL_PROJECTIONContent = SGetField<int>(LocalBridgeClazz, "GL_PROJECTION"); _GL_PROJECTIONReady = true; } return _GL_PROJECTIONContent; } }
        private static int _GL_PROJECTIONContent = default;
        private static bool _GL_PROJECTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_QUADRATIC_ATTENUATION"/>
        /// </summary>
        public static int GL_QUADRATIC_ATTENUATION { get { if (!_GL_QUADRATIC_ATTENUATIONReady) { _GL_QUADRATIC_ATTENUATIONContent = SGetField<int>(LocalBridgeClazz, "GL_QUADRATIC_ATTENUATION"); _GL_QUADRATIC_ATTENUATIONReady = true; } return _GL_QUADRATIC_ATTENUATIONContent; } }
        private static int _GL_QUADRATIC_ATTENUATIONContent = default;
        private static bool _GL_QUADRATIC_ATTENUATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_RED_BITS"/>
        /// </summary>
        public static int GL_RED_BITS { get { if (!_GL_RED_BITSReady) { _GL_RED_BITSContent = SGetField<int>(LocalBridgeClazz, "GL_RED_BITS"); _GL_RED_BITSReady = true; } return _GL_RED_BITSContent; } }
        private static int _GL_RED_BITSContent = default;
        private static bool _GL_RED_BITSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_RENDERER"/>
        /// </summary>
        public static int GL_RENDERER { get { if (!_GL_RENDERERReady) { _GL_RENDERERContent = SGetField<int>(LocalBridgeClazz, "GL_RENDERER"); _GL_RENDERERReady = true; } return _GL_RENDERERContent; } }
        private static int _GL_RENDERERContent = default;
        private static bool _GL_RENDERERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_REPEAT"/>
        /// </summary>
        public static int GL_REPEAT { get { if (!_GL_REPEATReady) { _GL_REPEATContent = SGetField<int>(LocalBridgeClazz, "GL_REPEAT"); _GL_REPEATReady = true; } return _GL_REPEATContent; } }
        private static int _GL_REPEATContent = default;
        private static bool _GL_REPEATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_REPLACE"/>
        /// </summary>
        public static int GL_REPLACE { get { if (!_GL_REPLACEReady) { _GL_REPLACEContent = SGetField<int>(LocalBridgeClazz, "GL_REPLACE"); _GL_REPLACEReady = true; } return _GL_REPLACEContent; } }
        private static int _GL_REPLACEContent = default;
        private static bool _GL_REPLACEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_RESCALE_NORMAL"/>
        /// </summary>
        public static int GL_RESCALE_NORMAL { get { if (!_GL_RESCALE_NORMALReady) { _GL_RESCALE_NORMALContent = SGetField<int>(LocalBridgeClazz, "GL_RESCALE_NORMAL"); _GL_RESCALE_NORMALReady = true; } return _GL_RESCALE_NORMALContent; } }
        private static int _GL_RESCALE_NORMALContent = default;
        private static bool _GL_RESCALE_NORMALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_RGB"/>
        /// </summary>
        public static int GL_RGB { get { if (!_GL_RGBReady) { _GL_RGBContent = SGetField<int>(LocalBridgeClazz, "GL_RGB"); _GL_RGBReady = true; } return _GL_RGBContent; } }
        private static int _GL_RGBContent = default;
        private static bool _GL_RGBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_RGBA"/>
        /// </summary>
        public static int GL_RGBA { get { if (!_GL_RGBAReady) { _GL_RGBAContent = SGetField<int>(LocalBridgeClazz, "GL_RGBA"); _GL_RGBAReady = true; } return _GL_RGBAContent; } }
        private static int _GL_RGBAContent = default;
        private static bool _GL_RGBAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_SAMPLE_ALPHA_TO_COVERAGE"/>
        /// </summary>
        public static int GL_SAMPLE_ALPHA_TO_COVERAGE { get { if (!_GL_SAMPLE_ALPHA_TO_COVERAGEReady) { _GL_SAMPLE_ALPHA_TO_COVERAGEContent = SGetField<int>(LocalBridgeClazz, "GL_SAMPLE_ALPHA_TO_COVERAGE"); _GL_SAMPLE_ALPHA_TO_COVERAGEReady = true; } return _GL_SAMPLE_ALPHA_TO_COVERAGEContent; } }
        private static int _GL_SAMPLE_ALPHA_TO_COVERAGEContent = default;
        private static bool _GL_SAMPLE_ALPHA_TO_COVERAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_SAMPLE_ALPHA_TO_ONE"/>
        /// </summary>
        public static int GL_SAMPLE_ALPHA_TO_ONE { get { if (!_GL_SAMPLE_ALPHA_TO_ONEReady) { _GL_SAMPLE_ALPHA_TO_ONEContent = SGetField<int>(LocalBridgeClazz, "GL_SAMPLE_ALPHA_TO_ONE"); _GL_SAMPLE_ALPHA_TO_ONEReady = true; } return _GL_SAMPLE_ALPHA_TO_ONEContent; } }
        private static int _GL_SAMPLE_ALPHA_TO_ONEContent = default;
        private static bool _GL_SAMPLE_ALPHA_TO_ONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_SAMPLE_COVERAGE"/>
        /// </summary>
        public static int GL_SAMPLE_COVERAGE { get { if (!_GL_SAMPLE_COVERAGEReady) { _GL_SAMPLE_COVERAGEContent = SGetField<int>(LocalBridgeClazz, "GL_SAMPLE_COVERAGE"); _GL_SAMPLE_COVERAGEReady = true; } return _GL_SAMPLE_COVERAGEContent; } }
        private static int _GL_SAMPLE_COVERAGEContent = default;
        private static bool _GL_SAMPLE_COVERAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_SCISSOR_TEST"/>
        /// </summary>
        public static int GL_SCISSOR_TEST { get { if (!_GL_SCISSOR_TESTReady) { _GL_SCISSOR_TESTContent = SGetField<int>(LocalBridgeClazz, "GL_SCISSOR_TEST"); _GL_SCISSOR_TESTReady = true; } return _GL_SCISSOR_TESTContent; } }
        private static int _GL_SCISSOR_TESTContent = default;
        private static bool _GL_SCISSOR_TESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_SET"/>
        /// </summary>
        public static int GL_SET { get { if (!_GL_SETReady) { _GL_SETContent = SGetField<int>(LocalBridgeClazz, "GL_SET"); _GL_SETReady = true; } return _GL_SETContent; } }
        private static int _GL_SETContent = default;
        private static bool _GL_SETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_SHININESS"/>
        /// </summary>
        public static int GL_SHININESS { get { if (!_GL_SHININESSReady) { _GL_SHININESSContent = SGetField<int>(LocalBridgeClazz, "GL_SHININESS"); _GL_SHININESSReady = true; } return _GL_SHININESSContent; } }
        private static int _GL_SHININESSContent = default;
        private static bool _GL_SHININESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_SHORT"/>
        /// </summary>
        public static int GL_SHORT { get { if (!_GL_SHORTReady) { _GL_SHORTContent = SGetField<int>(LocalBridgeClazz, "GL_SHORT"); _GL_SHORTReady = true; } return _GL_SHORTContent; } }
        private static int _GL_SHORTContent = default;
        private static bool _GL_SHORTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_SMOOTH"/>
        /// </summary>
        public static int GL_SMOOTH { get { if (!_GL_SMOOTHReady) { _GL_SMOOTHContent = SGetField<int>(LocalBridgeClazz, "GL_SMOOTH"); _GL_SMOOTHReady = true; } return _GL_SMOOTHContent; } }
        private static int _GL_SMOOTHContent = default;
        private static bool _GL_SMOOTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_SMOOTH_LINE_WIDTH_RANGE"/>
        /// </summary>
        public static int GL_SMOOTH_LINE_WIDTH_RANGE { get { if (!_GL_SMOOTH_LINE_WIDTH_RANGEReady) { _GL_SMOOTH_LINE_WIDTH_RANGEContent = SGetField<int>(LocalBridgeClazz, "GL_SMOOTH_LINE_WIDTH_RANGE"); _GL_SMOOTH_LINE_WIDTH_RANGEReady = true; } return _GL_SMOOTH_LINE_WIDTH_RANGEContent; } }
        private static int _GL_SMOOTH_LINE_WIDTH_RANGEContent = default;
        private static bool _GL_SMOOTH_LINE_WIDTH_RANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_SMOOTH_POINT_SIZE_RANGE"/>
        /// </summary>
        public static int GL_SMOOTH_POINT_SIZE_RANGE { get { if (!_GL_SMOOTH_POINT_SIZE_RANGEReady) { _GL_SMOOTH_POINT_SIZE_RANGEContent = SGetField<int>(LocalBridgeClazz, "GL_SMOOTH_POINT_SIZE_RANGE"); _GL_SMOOTH_POINT_SIZE_RANGEReady = true; } return _GL_SMOOTH_POINT_SIZE_RANGEContent; } }
        private static int _GL_SMOOTH_POINT_SIZE_RANGEContent = default;
        private static bool _GL_SMOOTH_POINT_SIZE_RANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_SPECULAR"/>
        /// </summary>
        public static int GL_SPECULAR { get { if (!_GL_SPECULARReady) { _GL_SPECULARContent = SGetField<int>(LocalBridgeClazz, "GL_SPECULAR"); _GL_SPECULARReady = true; } return _GL_SPECULARContent; } }
        private static int _GL_SPECULARContent = default;
        private static bool _GL_SPECULARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_SPOT_CUTOFF"/>
        /// </summary>
        public static int GL_SPOT_CUTOFF { get { if (!_GL_SPOT_CUTOFFReady) { _GL_SPOT_CUTOFFContent = SGetField<int>(LocalBridgeClazz, "GL_SPOT_CUTOFF"); _GL_SPOT_CUTOFFReady = true; } return _GL_SPOT_CUTOFFContent; } }
        private static int _GL_SPOT_CUTOFFContent = default;
        private static bool _GL_SPOT_CUTOFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_SPOT_DIRECTION"/>
        /// </summary>
        public static int GL_SPOT_DIRECTION { get { if (!_GL_SPOT_DIRECTIONReady) { _GL_SPOT_DIRECTIONContent = SGetField<int>(LocalBridgeClazz, "GL_SPOT_DIRECTION"); _GL_SPOT_DIRECTIONReady = true; } return _GL_SPOT_DIRECTIONContent; } }
        private static int _GL_SPOT_DIRECTIONContent = default;
        private static bool _GL_SPOT_DIRECTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_SPOT_EXPONENT"/>
        /// </summary>
        public static int GL_SPOT_EXPONENT { get { if (!_GL_SPOT_EXPONENTReady) { _GL_SPOT_EXPONENTContent = SGetField<int>(LocalBridgeClazz, "GL_SPOT_EXPONENT"); _GL_SPOT_EXPONENTReady = true; } return _GL_SPOT_EXPONENTContent; } }
        private static int _GL_SPOT_EXPONENTContent = default;
        private static bool _GL_SPOT_EXPONENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_SRC_ALPHA"/>
        /// </summary>
        public static int GL_SRC_ALPHA { get { if (!_GL_SRC_ALPHAReady) { _GL_SRC_ALPHAContent = SGetField<int>(LocalBridgeClazz, "GL_SRC_ALPHA"); _GL_SRC_ALPHAReady = true; } return _GL_SRC_ALPHAContent; } }
        private static int _GL_SRC_ALPHAContent = default;
        private static bool _GL_SRC_ALPHAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_SRC_ALPHA_SATURATE"/>
        /// </summary>
        public static int GL_SRC_ALPHA_SATURATE { get { if (!_GL_SRC_ALPHA_SATURATEReady) { _GL_SRC_ALPHA_SATURATEContent = SGetField<int>(LocalBridgeClazz, "GL_SRC_ALPHA_SATURATE"); _GL_SRC_ALPHA_SATURATEReady = true; } return _GL_SRC_ALPHA_SATURATEContent; } }
        private static int _GL_SRC_ALPHA_SATURATEContent = default;
        private static bool _GL_SRC_ALPHA_SATURATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_SRC_COLOR"/>
        /// </summary>
        public static int GL_SRC_COLOR { get { if (!_GL_SRC_COLORReady) { _GL_SRC_COLORContent = SGetField<int>(LocalBridgeClazz, "GL_SRC_COLOR"); _GL_SRC_COLORReady = true; } return _GL_SRC_COLORContent; } }
        private static int _GL_SRC_COLORContent = default;
        private static bool _GL_SRC_COLORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_STACK_OVERFLOW"/>
        /// </summary>
        public static int GL_STACK_OVERFLOW { get { if (!_GL_STACK_OVERFLOWReady) { _GL_STACK_OVERFLOWContent = SGetField<int>(LocalBridgeClazz, "GL_STACK_OVERFLOW"); _GL_STACK_OVERFLOWReady = true; } return _GL_STACK_OVERFLOWContent; } }
        private static int _GL_STACK_OVERFLOWContent = default;
        private static bool _GL_STACK_OVERFLOWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_STACK_UNDERFLOW"/>
        /// </summary>
        public static int GL_STACK_UNDERFLOW { get { if (!_GL_STACK_UNDERFLOWReady) { _GL_STACK_UNDERFLOWContent = SGetField<int>(LocalBridgeClazz, "GL_STACK_UNDERFLOW"); _GL_STACK_UNDERFLOWReady = true; } return _GL_STACK_UNDERFLOWContent; } }
        private static int _GL_STACK_UNDERFLOWContent = default;
        private static bool _GL_STACK_UNDERFLOWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_STENCIL_BITS"/>
        /// </summary>
        public static int GL_STENCIL_BITS { get { if (!_GL_STENCIL_BITSReady) { _GL_STENCIL_BITSContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_BITS"); _GL_STENCIL_BITSReady = true; } return _GL_STENCIL_BITSContent; } }
        private static int _GL_STENCIL_BITSContent = default;
        private static bool _GL_STENCIL_BITSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_STENCIL_BUFFER_BIT"/>
        /// </summary>
        public static int GL_STENCIL_BUFFER_BIT { get { if (!_GL_STENCIL_BUFFER_BITReady) { _GL_STENCIL_BUFFER_BITContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_BUFFER_BIT"); _GL_STENCIL_BUFFER_BITReady = true; } return _GL_STENCIL_BUFFER_BITContent; } }
        private static int _GL_STENCIL_BUFFER_BITContent = default;
        private static bool _GL_STENCIL_BUFFER_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_STENCIL_TEST"/>
        /// </summary>
        public static int GL_STENCIL_TEST { get { if (!_GL_STENCIL_TESTReady) { _GL_STENCIL_TESTContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_TEST"); _GL_STENCIL_TESTReady = true; } return _GL_STENCIL_TESTContent; } }
        private static int _GL_STENCIL_TESTContent = default;
        private static bool _GL_STENCIL_TESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_SUBPIXEL_BITS"/>
        /// </summary>
        public static int GL_SUBPIXEL_BITS { get { if (!_GL_SUBPIXEL_BITSReady) { _GL_SUBPIXEL_BITSContent = SGetField<int>(LocalBridgeClazz, "GL_SUBPIXEL_BITS"); _GL_SUBPIXEL_BITSReady = true; } return _GL_SUBPIXEL_BITSContent; } }
        private static int _GL_SUBPIXEL_BITSContent = default;
        private static bool _GL_SUBPIXEL_BITSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE"/>
        /// </summary>
        public static int GL_TEXTURE { get { if (!_GL_TEXTUREReady) { _GL_TEXTUREContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE"); _GL_TEXTUREReady = true; } return _GL_TEXTUREContent; } }
        private static int _GL_TEXTUREContent = default;
        private static bool _GL_TEXTUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE_2D"/>
        /// </summary>
        public static int GL_TEXTURE_2D { get { if (!_GL_TEXTURE_2DReady) { _GL_TEXTURE_2DContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_2D"); _GL_TEXTURE_2DReady = true; } return _GL_TEXTURE_2DContent; } }
        private static int _GL_TEXTURE_2DContent = default;
        private static bool _GL_TEXTURE_2DReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE_COORD_ARRAY"/>
        /// </summary>
        public static int GL_TEXTURE_COORD_ARRAY { get { if (!_GL_TEXTURE_COORD_ARRAYReady) { _GL_TEXTURE_COORD_ARRAYContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_COORD_ARRAY"); _GL_TEXTURE_COORD_ARRAYReady = true; } return _GL_TEXTURE_COORD_ARRAYContent; } }
        private static int _GL_TEXTURE_COORD_ARRAYContent = default;
        private static bool _GL_TEXTURE_COORD_ARRAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE_ENV"/>
        /// </summary>
        public static int GL_TEXTURE_ENV { get { if (!_GL_TEXTURE_ENVReady) { _GL_TEXTURE_ENVContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_ENV"); _GL_TEXTURE_ENVReady = true; } return _GL_TEXTURE_ENVContent; } }
        private static int _GL_TEXTURE_ENVContent = default;
        private static bool _GL_TEXTURE_ENVReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE_ENV_COLOR"/>
        /// </summary>
        public static int GL_TEXTURE_ENV_COLOR { get { if (!_GL_TEXTURE_ENV_COLORReady) { _GL_TEXTURE_ENV_COLORContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_ENV_COLOR"); _GL_TEXTURE_ENV_COLORReady = true; } return _GL_TEXTURE_ENV_COLORContent; } }
        private static int _GL_TEXTURE_ENV_COLORContent = default;
        private static bool _GL_TEXTURE_ENV_COLORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE_ENV_MODE"/>
        /// </summary>
        public static int GL_TEXTURE_ENV_MODE { get { if (!_GL_TEXTURE_ENV_MODEReady) { _GL_TEXTURE_ENV_MODEContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_ENV_MODE"); _GL_TEXTURE_ENV_MODEReady = true; } return _GL_TEXTURE_ENV_MODEContent; } }
        private static int _GL_TEXTURE_ENV_MODEContent = default;
        private static bool _GL_TEXTURE_ENV_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE_MAG_FILTER"/>
        /// </summary>
        public static int GL_TEXTURE_MAG_FILTER { get { if (!_GL_TEXTURE_MAG_FILTERReady) { _GL_TEXTURE_MAG_FILTERContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_MAG_FILTER"); _GL_TEXTURE_MAG_FILTERReady = true; } return _GL_TEXTURE_MAG_FILTERContent; } }
        private static int _GL_TEXTURE_MAG_FILTERContent = default;
        private static bool _GL_TEXTURE_MAG_FILTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE_MIN_FILTER"/>
        /// </summary>
        public static int GL_TEXTURE_MIN_FILTER { get { if (!_GL_TEXTURE_MIN_FILTERReady) { _GL_TEXTURE_MIN_FILTERContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_MIN_FILTER"); _GL_TEXTURE_MIN_FILTERReady = true; } return _GL_TEXTURE_MIN_FILTERContent; } }
        private static int _GL_TEXTURE_MIN_FILTERContent = default;
        private static bool _GL_TEXTURE_MIN_FILTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE_WRAP_S"/>
        /// </summary>
        public static int GL_TEXTURE_WRAP_S { get { if (!_GL_TEXTURE_WRAP_SReady) { _GL_TEXTURE_WRAP_SContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_WRAP_S"); _GL_TEXTURE_WRAP_SReady = true; } return _GL_TEXTURE_WRAP_SContent; } }
        private static int _GL_TEXTURE_WRAP_SContent = default;
        private static bool _GL_TEXTURE_WRAP_SReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE_WRAP_T"/>
        /// </summary>
        public static int GL_TEXTURE_WRAP_T { get { if (!_GL_TEXTURE_WRAP_TReady) { _GL_TEXTURE_WRAP_TContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_WRAP_T"); _GL_TEXTURE_WRAP_TReady = true; } return _GL_TEXTURE_WRAP_TContent; } }
        private static int _GL_TEXTURE_WRAP_TContent = default;
        private static bool _GL_TEXTURE_WRAP_TReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE0"/>
        /// </summary>
        public static int GL_TEXTURE0 { get { if (!_GL_TEXTURE0Ready) { _GL_TEXTURE0Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE0"); _GL_TEXTURE0Ready = true; } return _GL_TEXTURE0Content; } }
        private static int _GL_TEXTURE0Content = default;
        private static bool _GL_TEXTURE0Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE1"/>
        /// </summary>
        public static int GL_TEXTURE1 { get { if (!_GL_TEXTURE1Ready) { _GL_TEXTURE1Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE1"); _GL_TEXTURE1Ready = true; } return _GL_TEXTURE1Content; } }
        private static int _GL_TEXTURE1Content = default;
        private static bool _GL_TEXTURE1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE10"/>
        /// </summary>
        public static int GL_TEXTURE10 { get { if (!_GL_TEXTURE10Ready) { _GL_TEXTURE10Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE10"); _GL_TEXTURE10Ready = true; } return _GL_TEXTURE10Content; } }
        private static int _GL_TEXTURE10Content = default;
        private static bool _GL_TEXTURE10Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE11"/>
        /// </summary>
        public static int GL_TEXTURE11 { get { if (!_GL_TEXTURE11Ready) { _GL_TEXTURE11Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE11"); _GL_TEXTURE11Ready = true; } return _GL_TEXTURE11Content; } }
        private static int _GL_TEXTURE11Content = default;
        private static bool _GL_TEXTURE11Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE12"/>
        /// </summary>
        public static int GL_TEXTURE12 { get { if (!_GL_TEXTURE12Ready) { _GL_TEXTURE12Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE12"); _GL_TEXTURE12Ready = true; } return _GL_TEXTURE12Content; } }
        private static int _GL_TEXTURE12Content = default;
        private static bool _GL_TEXTURE12Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE13"/>
        /// </summary>
        public static int GL_TEXTURE13 { get { if (!_GL_TEXTURE13Ready) { _GL_TEXTURE13Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE13"); _GL_TEXTURE13Ready = true; } return _GL_TEXTURE13Content; } }
        private static int _GL_TEXTURE13Content = default;
        private static bool _GL_TEXTURE13Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE14"/>
        /// </summary>
        public static int GL_TEXTURE14 { get { if (!_GL_TEXTURE14Ready) { _GL_TEXTURE14Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE14"); _GL_TEXTURE14Ready = true; } return _GL_TEXTURE14Content; } }
        private static int _GL_TEXTURE14Content = default;
        private static bool _GL_TEXTURE14Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE15"/>
        /// </summary>
        public static int GL_TEXTURE15 { get { if (!_GL_TEXTURE15Ready) { _GL_TEXTURE15Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE15"); _GL_TEXTURE15Ready = true; } return _GL_TEXTURE15Content; } }
        private static int _GL_TEXTURE15Content = default;
        private static bool _GL_TEXTURE15Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE16"/>
        /// </summary>
        public static int GL_TEXTURE16 { get { if (!_GL_TEXTURE16Ready) { _GL_TEXTURE16Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE16"); _GL_TEXTURE16Ready = true; } return _GL_TEXTURE16Content; } }
        private static int _GL_TEXTURE16Content = default;
        private static bool _GL_TEXTURE16Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE17"/>
        /// </summary>
        public static int GL_TEXTURE17 { get { if (!_GL_TEXTURE17Ready) { _GL_TEXTURE17Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE17"); _GL_TEXTURE17Ready = true; } return _GL_TEXTURE17Content; } }
        private static int _GL_TEXTURE17Content = default;
        private static bool _GL_TEXTURE17Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE18"/>
        /// </summary>
        public static int GL_TEXTURE18 { get { if (!_GL_TEXTURE18Ready) { _GL_TEXTURE18Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE18"); _GL_TEXTURE18Ready = true; } return _GL_TEXTURE18Content; } }
        private static int _GL_TEXTURE18Content = default;
        private static bool _GL_TEXTURE18Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE19"/>
        /// </summary>
        public static int GL_TEXTURE19 { get { if (!_GL_TEXTURE19Ready) { _GL_TEXTURE19Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE19"); _GL_TEXTURE19Ready = true; } return _GL_TEXTURE19Content; } }
        private static int _GL_TEXTURE19Content = default;
        private static bool _GL_TEXTURE19Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE2"/>
        /// </summary>
        public static int GL_TEXTURE2 { get { if (!_GL_TEXTURE2Ready) { _GL_TEXTURE2Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE2"); _GL_TEXTURE2Ready = true; } return _GL_TEXTURE2Content; } }
        private static int _GL_TEXTURE2Content = default;
        private static bool _GL_TEXTURE2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE20"/>
        /// </summary>
        public static int GL_TEXTURE20 { get { if (!_GL_TEXTURE20Ready) { _GL_TEXTURE20Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE20"); _GL_TEXTURE20Ready = true; } return _GL_TEXTURE20Content; } }
        private static int _GL_TEXTURE20Content = default;
        private static bool _GL_TEXTURE20Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE21"/>
        /// </summary>
        public static int GL_TEXTURE21 { get { if (!_GL_TEXTURE21Ready) { _GL_TEXTURE21Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE21"); _GL_TEXTURE21Ready = true; } return _GL_TEXTURE21Content; } }
        private static int _GL_TEXTURE21Content = default;
        private static bool _GL_TEXTURE21Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE22"/>
        /// </summary>
        public static int GL_TEXTURE22 { get { if (!_GL_TEXTURE22Ready) { _GL_TEXTURE22Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE22"); _GL_TEXTURE22Ready = true; } return _GL_TEXTURE22Content; } }
        private static int _GL_TEXTURE22Content = default;
        private static bool _GL_TEXTURE22Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE23"/>
        /// </summary>
        public static int GL_TEXTURE23 { get { if (!_GL_TEXTURE23Ready) { _GL_TEXTURE23Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE23"); _GL_TEXTURE23Ready = true; } return _GL_TEXTURE23Content; } }
        private static int _GL_TEXTURE23Content = default;
        private static bool _GL_TEXTURE23Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE24"/>
        /// </summary>
        public static int GL_TEXTURE24 { get { if (!_GL_TEXTURE24Ready) { _GL_TEXTURE24Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE24"); _GL_TEXTURE24Ready = true; } return _GL_TEXTURE24Content; } }
        private static int _GL_TEXTURE24Content = default;
        private static bool _GL_TEXTURE24Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE25"/>
        /// </summary>
        public static int GL_TEXTURE25 { get { if (!_GL_TEXTURE25Ready) { _GL_TEXTURE25Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE25"); _GL_TEXTURE25Ready = true; } return _GL_TEXTURE25Content; } }
        private static int _GL_TEXTURE25Content = default;
        private static bool _GL_TEXTURE25Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE26"/>
        /// </summary>
        public static int GL_TEXTURE26 { get { if (!_GL_TEXTURE26Ready) { _GL_TEXTURE26Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE26"); _GL_TEXTURE26Ready = true; } return _GL_TEXTURE26Content; } }
        private static int _GL_TEXTURE26Content = default;
        private static bool _GL_TEXTURE26Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE27"/>
        /// </summary>
        public static int GL_TEXTURE27 { get { if (!_GL_TEXTURE27Ready) { _GL_TEXTURE27Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE27"); _GL_TEXTURE27Ready = true; } return _GL_TEXTURE27Content; } }
        private static int _GL_TEXTURE27Content = default;
        private static bool _GL_TEXTURE27Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE28"/>
        /// </summary>
        public static int GL_TEXTURE28 { get { if (!_GL_TEXTURE28Ready) { _GL_TEXTURE28Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE28"); _GL_TEXTURE28Ready = true; } return _GL_TEXTURE28Content; } }
        private static int _GL_TEXTURE28Content = default;
        private static bool _GL_TEXTURE28Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE29"/>
        /// </summary>
        public static int GL_TEXTURE29 { get { if (!_GL_TEXTURE29Ready) { _GL_TEXTURE29Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE29"); _GL_TEXTURE29Ready = true; } return _GL_TEXTURE29Content; } }
        private static int _GL_TEXTURE29Content = default;
        private static bool _GL_TEXTURE29Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE3"/>
        /// </summary>
        public static int GL_TEXTURE3 { get { if (!_GL_TEXTURE3Ready) { _GL_TEXTURE3Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE3"); _GL_TEXTURE3Ready = true; } return _GL_TEXTURE3Content; } }
        private static int _GL_TEXTURE3Content = default;
        private static bool _GL_TEXTURE3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE30"/>
        /// </summary>
        public static int GL_TEXTURE30 { get { if (!_GL_TEXTURE30Ready) { _GL_TEXTURE30Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE30"); _GL_TEXTURE30Ready = true; } return _GL_TEXTURE30Content; } }
        private static int _GL_TEXTURE30Content = default;
        private static bool _GL_TEXTURE30Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE31"/>
        /// </summary>
        public static int GL_TEXTURE31 { get { if (!_GL_TEXTURE31Ready) { _GL_TEXTURE31Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE31"); _GL_TEXTURE31Ready = true; } return _GL_TEXTURE31Content; } }
        private static int _GL_TEXTURE31Content = default;
        private static bool _GL_TEXTURE31Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE4"/>
        /// </summary>
        public static int GL_TEXTURE4 { get { if (!_GL_TEXTURE4Ready) { _GL_TEXTURE4Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE4"); _GL_TEXTURE4Ready = true; } return _GL_TEXTURE4Content; } }
        private static int _GL_TEXTURE4Content = default;
        private static bool _GL_TEXTURE4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE5"/>
        /// </summary>
        public static int GL_TEXTURE5 { get { if (!_GL_TEXTURE5Ready) { _GL_TEXTURE5Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE5"); _GL_TEXTURE5Ready = true; } return _GL_TEXTURE5Content; } }
        private static int _GL_TEXTURE5Content = default;
        private static bool _GL_TEXTURE5Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE6"/>
        /// </summary>
        public static int GL_TEXTURE6 { get { if (!_GL_TEXTURE6Ready) { _GL_TEXTURE6Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE6"); _GL_TEXTURE6Ready = true; } return _GL_TEXTURE6Content; } }
        private static int _GL_TEXTURE6Content = default;
        private static bool _GL_TEXTURE6Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE7"/>
        /// </summary>
        public static int GL_TEXTURE7 { get { if (!_GL_TEXTURE7Ready) { _GL_TEXTURE7Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE7"); _GL_TEXTURE7Ready = true; } return _GL_TEXTURE7Content; } }
        private static int _GL_TEXTURE7Content = default;
        private static bool _GL_TEXTURE7Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE8"/>
        /// </summary>
        public static int GL_TEXTURE8 { get { if (!_GL_TEXTURE8Ready) { _GL_TEXTURE8Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE8"); _GL_TEXTURE8Ready = true; } return _GL_TEXTURE8Content; } }
        private static int _GL_TEXTURE8Content = default;
        private static bool _GL_TEXTURE8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TEXTURE9"/>
        /// </summary>
        public static int GL_TEXTURE9 { get { if (!_GL_TEXTURE9Ready) { _GL_TEXTURE9Content = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE9"); _GL_TEXTURE9Ready = true; } return _GL_TEXTURE9Content; } }
        private static int _GL_TEXTURE9Content = default;
        private static bool _GL_TEXTURE9Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TRIANGLE_FAN"/>
        /// </summary>
        public static int GL_TRIANGLE_FAN { get { if (!_GL_TRIANGLE_FANReady) { _GL_TRIANGLE_FANContent = SGetField<int>(LocalBridgeClazz, "GL_TRIANGLE_FAN"); _GL_TRIANGLE_FANReady = true; } return _GL_TRIANGLE_FANContent; } }
        private static int _GL_TRIANGLE_FANContent = default;
        private static bool _GL_TRIANGLE_FANReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TRIANGLE_STRIP"/>
        /// </summary>
        public static int GL_TRIANGLE_STRIP { get { if (!_GL_TRIANGLE_STRIPReady) { _GL_TRIANGLE_STRIPContent = SGetField<int>(LocalBridgeClazz, "GL_TRIANGLE_STRIP"); _GL_TRIANGLE_STRIPReady = true; } return _GL_TRIANGLE_STRIPContent; } }
        private static int _GL_TRIANGLE_STRIPContent = default;
        private static bool _GL_TRIANGLE_STRIPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TRIANGLES"/>
        /// </summary>
        public static int GL_TRIANGLES { get { if (!_GL_TRIANGLESReady) { _GL_TRIANGLESContent = SGetField<int>(LocalBridgeClazz, "GL_TRIANGLES"); _GL_TRIANGLESReady = true; } return _GL_TRIANGLESContent; } }
        private static int _GL_TRIANGLESContent = default;
        private static bool _GL_TRIANGLESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_TRUE"/>
        /// </summary>
        public static int GL_TRUE { get { if (!_GL_TRUEReady) { _GL_TRUEContent = SGetField<int>(LocalBridgeClazz, "GL_TRUE"); _GL_TRUEReady = true; } return _GL_TRUEContent; } }
        private static int _GL_TRUEContent = default;
        private static bool _GL_TRUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_UNPACK_ALIGNMENT"/>
        /// </summary>
        public static int GL_UNPACK_ALIGNMENT { get { if (!_GL_UNPACK_ALIGNMENTReady) { _GL_UNPACK_ALIGNMENTContent = SGetField<int>(LocalBridgeClazz, "GL_UNPACK_ALIGNMENT"); _GL_UNPACK_ALIGNMENTReady = true; } return _GL_UNPACK_ALIGNMENTContent; } }
        private static int _GL_UNPACK_ALIGNMENTContent = default;
        private static bool _GL_UNPACK_ALIGNMENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_UNSIGNED_BYTE"/>
        /// </summary>
        public static int GL_UNSIGNED_BYTE { get { if (!_GL_UNSIGNED_BYTEReady) { _GL_UNSIGNED_BYTEContent = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNED_BYTE"); _GL_UNSIGNED_BYTEReady = true; } return _GL_UNSIGNED_BYTEContent; } }
        private static int _GL_UNSIGNED_BYTEContent = default;
        private static bool _GL_UNSIGNED_BYTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_UNSIGNED_SHORT"/>
        /// </summary>
        public static int GL_UNSIGNED_SHORT { get { if (!_GL_UNSIGNED_SHORTReady) { _GL_UNSIGNED_SHORTContent = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNED_SHORT"); _GL_UNSIGNED_SHORTReady = true; } return _GL_UNSIGNED_SHORTContent; } }
        private static int _GL_UNSIGNED_SHORTContent = default;
        private static bool _GL_UNSIGNED_SHORTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_UNSIGNED_SHORT_4_4_4_4"/>
        /// </summary>
        public static int GL_UNSIGNED_SHORT_4_4_4_4 { get { if (!_GL_UNSIGNED_SHORT_4_4_4_4Ready) { _GL_UNSIGNED_SHORT_4_4_4_4Content = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNED_SHORT_4_4_4_4"); _GL_UNSIGNED_SHORT_4_4_4_4Ready = true; } return _GL_UNSIGNED_SHORT_4_4_4_4Content; } }
        private static int _GL_UNSIGNED_SHORT_4_4_4_4Content = default;
        private static bool _GL_UNSIGNED_SHORT_4_4_4_4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_UNSIGNED_SHORT_5_5_5_1"/>
        /// </summary>
        public static int GL_UNSIGNED_SHORT_5_5_5_1 { get { if (!_GL_UNSIGNED_SHORT_5_5_5_1Ready) { _GL_UNSIGNED_SHORT_5_5_5_1Content = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNED_SHORT_5_5_5_1"); _GL_UNSIGNED_SHORT_5_5_5_1Ready = true; } return _GL_UNSIGNED_SHORT_5_5_5_1Content; } }
        private static int _GL_UNSIGNED_SHORT_5_5_5_1Content = default;
        private static bool _GL_UNSIGNED_SHORT_5_5_5_1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_UNSIGNED_SHORT_5_6_5"/>
        /// </summary>
        public static int GL_UNSIGNED_SHORT_5_6_5 { get { if (!_GL_UNSIGNED_SHORT_5_6_5Ready) { _GL_UNSIGNED_SHORT_5_6_5Content = SGetField<int>(LocalBridgeClazz, "GL_UNSIGNED_SHORT_5_6_5"); _GL_UNSIGNED_SHORT_5_6_5Ready = true; } return _GL_UNSIGNED_SHORT_5_6_5Content; } }
        private static int _GL_UNSIGNED_SHORT_5_6_5Content = default;
        private static bool _GL_UNSIGNED_SHORT_5_6_5Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_VENDOR"/>
        /// </summary>
        public static int GL_VENDOR { get { if (!_GL_VENDORReady) { _GL_VENDORContent = SGetField<int>(LocalBridgeClazz, "GL_VENDOR"); _GL_VENDORReady = true; } return _GL_VENDORContent; } }
        private static int _GL_VENDORContent = default;
        private static bool _GL_VENDORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_VERSION"/>
        /// </summary>
        public static int GL_VERSION { get { if (!_GL_VERSIONReady) { _GL_VERSIONContent = SGetField<int>(LocalBridgeClazz, "GL_VERSION"); _GL_VERSIONReady = true; } return _GL_VERSIONContent; } }
        private static int _GL_VERSIONContent = default;
        private static bool _GL_VERSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_VERTEX_ARRAY"/>
        /// </summary>
        public static int GL_VERTEX_ARRAY { get { if (!_GL_VERTEX_ARRAYReady) { _GL_VERTEX_ARRAYContent = SGetField<int>(LocalBridgeClazz, "GL_VERTEX_ARRAY"); _GL_VERTEX_ARRAYReady = true; } return _GL_VERTEX_ARRAYContent; } }
        private static int _GL_VERTEX_ARRAYContent = default;
        private static bool _GL_VERTEX_ARRAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_XOR"/>
        /// </summary>
        public static int GL_XOR { get { if (!_GL_XORReady) { _GL_XORContent = SGetField<int>(LocalBridgeClazz, "GL_XOR"); _GL_XORReady = true; } return _GL_XORContent; } }
        private static int _GL_XORContent = default;
        private static bool _GL_XORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#GL_ZERO"/>
        /// </summary>
        public static int GL_ZERO { get { if (!_GL_ZEROReady) { _GL_ZEROContent = SGetField<int>(LocalBridgeClazz, "GL_ZERO"); _GL_ZEROReady = true; } return _GL_ZEROContent; } }
        private static int _GL_ZEROContent = default;
        private static bool _GL_ZEROReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glGetError()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public static int GlGetError()
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "glGetError", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glGetString(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String GlGetString(int arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "glGetString", "(I)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glActiveTexture(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlActiveTexture(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glActiveTexture", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glAlphaFunc(int,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public static void GlAlphaFunc(int arg0, float arg1)
        {
            SExecute(LocalBridgeClazz, "glAlphaFunc", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glAlphaFuncx(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlAlphaFuncx(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glAlphaFuncx", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glBindTexture(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlBindTexture(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glBindTexture", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glBlendFunc(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlBlendFunc(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glBlendFunc", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glClear(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlClear(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glClear", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glClearColor(float,float,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        public static void GlClearColor(float arg0, float arg1, float arg2, float arg3)
        {
            SExecute(LocalBridgeClazz, "glClearColor", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glClearColorx(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlClearColorx(int arg0, int arg1, int arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glClearColorx", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glClearDepthf(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public static void GlClearDepthf(float arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glClearDepthf", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glClearDepthx(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlClearDepthx(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glClearDepthx", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glClearStencil(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlClearStencil(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glClearStencil", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glClientActiveTexture(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlClientActiveTexture(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glClientActiveTexture", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glColor4f(float,float,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        public static void GlColor4f(float arg0, float arg1, float arg2, float arg3)
        {
            SExecute(LocalBridgeClazz, "glColor4f", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glColor4x(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlColor4x(int arg0, int arg1, int arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glColor4x", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glColorMask(boolean,boolean,boolean,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        public static void GlColorMask(bool arg0, bool arg1, bool arg2, bool arg3)
        {
            SExecute(LocalBridgeClazz, "glColorMask", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="Java.Nio.Buffer"/></param>
        public static void GlCompressedTexImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, Java.Nio.Buffer arg7)
        {
            SExecute(LocalBridgeClazz, "glCompressedTexImage2D", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glCompressedTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        /// <param name="arg8"><see cref="Java.Nio.Buffer"/></param>
        public static void GlCompressedTexSubImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, Java.Nio.Buffer arg8)
        {
            SExecute(LocalBridgeClazz, "glCompressedTexSubImage2D", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glCopyTexImage2D(int,int,int,int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        public static void GlCopyTexImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7)
        {
            SExecute(LocalBridgeClazz, "glCopyTexImage2D", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glCopyTexSubImage2D(int,int,int,int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        public static void GlCopyTexSubImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7)
        {
            SExecute(LocalBridgeClazz, "glCopyTexSubImage2D", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glCullFace(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlCullFace(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glCullFace", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glDeleteTextures(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlDeleteTextures(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glDeleteTextures", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glDeleteTextures(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlDeleteTextures(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glDeleteTextures", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glDepthFunc(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlDepthFunc(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glDepthFunc", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glDepthMask(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public static void GlDepthMask(bool arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glDepthMask", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glDepthRangef(float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public static void GlDepthRangef(float arg0, float arg1)
        {
            SExecute(LocalBridgeClazz, "glDepthRangef", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glDepthRangex(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlDepthRangex(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glDepthRangex", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glDisable(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlDisable(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glDisable", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glDisableClientState(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlDisableClientState(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glDisableClientState", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glDrawArrays(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlDrawArrays(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glDrawArrays", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glDrawElements(int,int,int,java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.Buffer"/></param>
        public static void GlDrawElements(int arg0, int arg1, int arg2, Java.Nio.Buffer arg3)
        {
            SExecute(LocalBridgeClazz, "glDrawElements", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glEnable(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlEnable(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glEnable", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glEnableClientState(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlEnableClientState(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glEnableClientState", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glFinish()"/>
        /// </summary>
        public static void GlFinish()
        {
            SExecuteWithSignature(LocalBridgeClazz, "glFinish", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glFlush()"/>
        /// </summary>
        public static void GlFlush()
        {
            SExecuteWithSignature(LocalBridgeClazz, "glFlush", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glFogf(int,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public static void GlFogf(int arg0, float arg1)
        {
            SExecute(LocalBridgeClazz, "glFogf", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glFogfv(int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlFogfv(int arg0, float[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glFogfv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glFogfv(int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlFogfv(int arg0, Java.Nio.FloatBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glFogfv", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glFogx(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlFogx(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glFogx", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glFogxv(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlFogxv(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glFogxv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glFogxv(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlFogxv(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glFogxv", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glFrontFace(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlFrontFace(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glFrontFace", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glFrustumf(float,float,float,float,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        /// <param name="arg5"><see cref="float"/></param>
        public static void GlFrustumf(float arg0, float arg1, float arg2, float arg3, float arg4, float arg5)
        {
            SExecute(LocalBridgeClazz, "glFrustumf", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glFrustumx(int,int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        public static void GlFrustumx(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5)
        {
            SExecute(LocalBridgeClazz, "glFrustumx", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glGenTextures(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlGenTextures(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glGenTextures", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glGenTextures(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGenTextures(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glGenTextures", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glGetIntegerv(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlGetIntegerv(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glGetIntegerv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glGetIntegerv(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlGetIntegerv(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glGetIntegerv", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glHint(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlHint(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glHint", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glLightf(int,int,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        public static void GlLightf(int arg0, int arg1, float arg2)
        {
            SExecute(LocalBridgeClazz, "glLightf", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glLightfv(int,int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlLightfv(int arg0, int arg1, float[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glLightfv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glLightfv(int,int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlLightfv(int arg0, int arg1, Java.Nio.FloatBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glLightfv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glLightModelf(int,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public static void GlLightModelf(int arg0, float arg1)
        {
            SExecute(LocalBridgeClazz, "glLightModelf", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glLightModelfv(int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlLightModelfv(int arg0, float[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glLightModelfv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glLightModelfv(int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlLightModelfv(int arg0, Java.Nio.FloatBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glLightModelfv", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glLightModelx(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlLightModelx(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glLightModelx", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glLightModelxv(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlLightModelxv(int arg0, int[] arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glLightModelxv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glLightModelxv(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlLightModelxv(int arg0, Java.Nio.IntBuffer arg1)
        {
            SExecute(LocalBridgeClazz, "glLightModelxv", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glLightx(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlLightx(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glLightx", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glLightxv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlLightxv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glLightxv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glLightxv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlLightxv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glLightxv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glLineWidth(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public static void GlLineWidth(float arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glLineWidth", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glLineWidthx(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlLineWidthx(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glLineWidthx", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glLoadIdentity()"/>
        /// </summary>
        public static void GlLoadIdentity()
        {
            SExecuteWithSignature(LocalBridgeClazz, "glLoadIdentity", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glLoadMatrixf(float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlLoadMatrixf(float[] arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glLoadMatrixf", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glLoadMatrixf(java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlLoadMatrixf(Java.Nio.FloatBuffer arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glLoadMatrixf", "(Ljava/nio/FloatBuffer;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glLoadMatrixx(int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlLoadMatrixx(int[] arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glLoadMatrixx", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glLoadMatrixx(java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlLoadMatrixx(Java.Nio.IntBuffer arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glLoadMatrixx", "(Ljava/nio/IntBuffer;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glLogicOp(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlLogicOp(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glLogicOp", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glMaterialf(int,int,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        public static void GlMaterialf(int arg0, int arg1, float arg2)
        {
            SExecute(LocalBridgeClazz, "glMaterialf", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glMaterialfv(int,int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlMaterialfv(int arg0, int arg1, float[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glMaterialfv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glMaterialfv(int,int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlMaterialfv(int arg0, int arg1, Java.Nio.FloatBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glMaterialfv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glMaterialx(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlMaterialx(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glMaterialx", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glMaterialxv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlMaterialxv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glMaterialxv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glMaterialxv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlMaterialxv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glMaterialxv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glMatrixMode(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlMatrixMode(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glMatrixMode", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glMultiTexCoord4f(int,float,float,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        public static void GlMultiTexCoord4f(int arg0, float arg1, float arg2, float arg3, float arg4)
        {
            SExecute(LocalBridgeClazz, "glMultiTexCoord4f", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glMultiTexCoord4x(int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GlMultiTexCoord4x(int arg0, int arg1, int arg2, int arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "glMultiTexCoord4x", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glMultMatrixf(float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlMultMatrixf(float[] arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glMultMatrixf", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glMultMatrixf(java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlMultMatrixf(Java.Nio.FloatBuffer arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glMultMatrixf", "(Ljava/nio/FloatBuffer;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glMultMatrixx(int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlMultMatrixx(int[] arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glMultMatrixx", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glMultMatrixx(java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlMultMatrixx(Java.Nio.IntBuffer arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glMultMatrixx", "(Ljava/nio/IntBuffer;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glNormal3f(float,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        public static void GlNormal3f(float arg0, float arg1, float arg2)
        {
            SExecute(LocalBridgeClazz, "glNormal3f", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glNormal3x(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlNormal3x(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glNormal3x", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glOrthof(float,float,float,float,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        /// <param name="arg5"><see cref="float"/></param>
        public static void GlOrthof(float arg0, float arg1, float arg2, float arg3, float arg4, float arg5)
        {
            SExecute(LocalBridgeClazz, "glOrthof", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glOrthox(int,int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        public static void GlOrthox(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5)
        {
            SExecute(LocalBridgeClazz, "glOrthox", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glPixelStorei(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlPixelStorei(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glPixelStorei", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glPointSize(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public static void GlPointSize(float arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glPointSize", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glPointSizex(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlPointSizex(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glPointSizex", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glPolygonOffset(float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public static void GlPolygonOffset(float arg0, float arg1)
        {
            SExecute(LocalBridgeClazz, "glPolygonOffset", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glPolygonOffsetx(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public static void GlPolygonOffsetx(int arg0, int arg1)
        {
            SExecute(LocalBridgeClazz, "glPolygonOffsetx", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glPopMatrix()"/>
        /// </summary>
        public static void GlPopMatrix()
        {
            SExecuteWithSignature(LocalBridgeClazz, "glPopMatrix", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glPushMatrix()"/>
        /// </summary>
        public static void GlPushMatrix()
        {
            SExecuteWithSignature(LocalBridgeClazz, "glPushMatrix", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glReadPixels(int,int,int,int,int,int,java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="Java.Nio.Buffer"/></param>
        public static void GlReadPixels(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, Java.Nio.Buffer arg6)
        {
            SExecute(LocalBridgeClazz, "glReadPixels", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glRotatef(float,float,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        public static void GlRotatef(float arg0, float arg1, float arg2, float arg3)
        {
            SExecute(LocalBridgeClazz, "glRotatef", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glRotatex(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlRotatex(int arg0, int arg1, int arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glRotatex", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glSampleCoverage(float,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public static void GlSampleCoverage(float arg0, bool arg1)
        {
            SExecute(LocalBridgeClazz, "glSampleCoverage", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glSampleCoveragex(int,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public static void GlSampleCoveragex(int arg0, bool arg1)
        {
            SExecute(LocalBridgeClazz, "glSampleCoveragex", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glScalef(float,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        public static void GlScalef(float arg0, float arg1, float arg2)
        {
            SExecute(LocalBridgeClazz, "glScalef", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glScalex(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlScalex(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glScalex", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glScissor(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlScissor(int arg0, int arg1, int arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glScissor", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glShadeModel(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlShadeModel(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glShadeModel", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glStencilFunc(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlStencilFunc(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glStencilFunc", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glStencilMask(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public static void GlStencilMask(int arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "glStencilMask", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glStencilOp(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlStencilOp(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glStencilOp", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glTexEnvf(int,int,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        public static void GlTexEnvf(int arg0, int arg1, float arg2)
        {
            SExecute(LocalBridgeClazz, "glTexEnvf", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glTexEnvfv(int,int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlTexEnvfv(int arg0, int arg1, float[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glTexEnvfv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glTexEnvfv(int,int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.FloatBuffer"/></param>
        public static void GlTexEnvfv(int arg0, int arg1, Java.Nio.FloatBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glTexEnvfv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glTexEnvx(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlTexEnvx(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glTexEnvx", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glTexEnvxv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlTexEnvxv(int arg0, int arg1, int[] arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glTexEnvxv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glTexEnvxv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public static void GlTexEnvxv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            SExecute(LocalBridgeClazz, "glTexEnvxv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        /// <param name="arg8"><see cref="Java.Nio.Buffer"/></param>
        public static void GlTexImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, Java.Nio.Buffer arg8)
        {
            SExecute(LocalBridgeClazz, "glTexImage2D", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glTexParameterf(int,int,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        public static void GlTexParameterf(int arg0, int arg1, float arg2)
        {
            SExecute(LocalBridgeClazz, "glTexParameterf", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glTexParameterx(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlTexParameterx(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glTexParameterx", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        /// <param name="arg8"><see cref="Java.Nio.Buffer"/></param>
        public static void GlTexSubImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, Java.Nio.Buffer arg8)
        {
            SExecute(LocalBridgeClazz, "glTexSubImage2D", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glTranslatef(float,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        public static void GlTranslatef(float arg0, float arg1, float arg2)
        {
            SExecute(LocalBridgeClazz, "glTranslatef", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glTranslatex(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void GlTranslatex(int arg0, int arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "glTranslatex", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glViewport(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public static void GlViewport(int arg0, int arg1, int arg2, int arg3)
        {
            SExecute(LocalBridgeClazz, "glViewport", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glColorPointer(int,int,int,java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.Buffer"/></param>
        public static void GlColorPointer(int arg0, int arg1, int arg2, Java.Nio.Buffer arg3)
        {
            SExecute(LocalBridgeClazz, "glColorPointer", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glNormalPointer(int,int,java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.Buffer"/></param>
        public static void GlNormalPointer(int arg0, int arg1, Java.Nio.Buffer arg2)
        {
            SExecute(LocalBridgeClazz, "glNormalPointer", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glTexCoordPointer(int,int,int,java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.Buffer"/></param>
        public static void GlTexCoordPointer(int arg0, int arg1, int arg2, Java.Nio.Buffer arg3)
        {
            SExecute(LocalBridgeClazz, "glTexCoordPointer", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/opengl/GLES10.html#glVertexPointer(int,int,int,java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.Buffer"/></param>
        public static void GlVertexPointer(int arg0, int arg1, int arg2, Java.Nio.Buffer arg3)
        {
            SExecute(LocalBridgeClazz, "glVertexPointer", arg0, arg1, arg2, arg3);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
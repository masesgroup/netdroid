/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Window
{
    #region SplashScreen declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/window/SplashScreen.html"/>
    /// </summary>
    public partial class SplashScreen : MASES.JCOBridge.C2JBridge.JVMBridgeBase<SplashScreen>
    {
        const string _bridgeClassName = "android.window.SplashScreen";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("SplashScreen class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public SplashScreen() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("SplashScreen class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public SplashScreen(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region OnExitAnimationListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/window/SplashScreen.OnExitAnimationListener.html"/>
        /// </summary>
        public partial class OnExitAnimationListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnExitAnimationListener() { InitializeHandlers(); }
        
            const string _bridgeClassName = "org.mases.netdroid.generated.android.window.SplashScreen_OnExitAnimationListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
        
        
            // TODO: complete the class
        
        }
        #endregion
        
        #region OnExitAnimationListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="OnExitAnimationListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnExitAnimationListenerDirect : OnExitAnimationListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;
        
            /// <inheritdoc />
            protected override void InitializeHandlers() { }
        
            const string _bridgeClassName = "android.window.SplashScreen$OnExitAnimationListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

    
    }
    #endregion

    #region ISplashScreen
    /// <summary>
    /// .NET interface for TO BE DEFINED FROM USER
    /// </summary>
    public partial interface ISplashScreen
    {
        #region Instance methods
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion

    #region SplashScreen implementation
    public partial class SplashScreen : Android.Window.ISplashScreen
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/window/SplashScreen.html#SPLASH_SCREEN_STYLE_ICON"/>
        /// </summary>
        public static int SPLASH_SCREEN_STYLE_ICON { get { if (!_SPLASH_SCREEN_STYLE_ICONReady) { _SPLASH_SCREEN_STYLE_ICONContent = SGetField<int>(LocalBridgeClazz, "SPLASH_SCREEN_STYLE_ICON"); _SPLASH_SCREEN_STYLE_ICONReady = true; } return _SPLASH_SCREEN_STYLE_ICONContent; } }
        private static int _SPLASH_SCREEN_STYLE_ICONContent = default;
        private static bool _SPLASH_SCREEN_STYLE_ICONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/window/SplashScreen.html#SPLASH_SCREEN_STYLE_SOLID_COLOR"/>
        /// </summary>
        public static int SPLASH_SCREEN_STYLE_SOLID_COLOR { get { if (!_SPLASH_SCREEN_STYLE_SOLID_COLORReady) { _SPLASH_SCREEN_STYLE_SOLID_COLORContent = SGetField<int>(LocalBridgeClazz, "SPLASH_SCREEN_STYLE_SOLID_COLOR"); _SPLASH_SCREEN_STYLE_SOLID_COLORReady = true; } return _SPLASH_SCREEN_STYLE_SOLID_COLORContent; } }
        private static int _SPLASH_SCREEN_STYLE_SOLID_COLORContent = default;
        private static bool _SPLASH_SCREEN_STYLE_SOLID_COLORReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/window/SplashScreen.html#clearOnExitAnimationListener()"/>
        /// </summary>
        public void ClearOnExitAnimationListener()
        {
            IExecuteWithSignature("clearOnExitAnimationListener", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/window/SplashScreen.html#setOnExitAnimationListener(android.window.SplashScreen.OnExitAnimationListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Window.SplashScreen.OnExitAnimationListener"/></param>
        public void SetOnExitAnimationListener(Android.Window.SplashScreen.OnExitAnimationListener arg0)
        {
            IExecuteWithSignature("setOnExitAnimationListener", "(Landroid/window/SplashScreen$OnExitAnimationListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/window/SplashScreen.html#setSplashScreenTheme(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetSplashScreenTheme(int arg0)
        {
            IExecuteWithSignature("setSplashScreenTheme", "(I)V", arg0);
        }
    
        #endregion
    
        #region Nested classes
        #region OnExitAnimationListener implementation
        public partial class OnExitAnimationListener
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnExitAnimationListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onSplashScreenExit", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnSplashScreenExitEventHandler));

            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/window/SplashScreen.OnExitAnimationListener.html#onSplashScreenExit(android.window.SplashScreenView)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnSplashScreenExit"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Window.SplashScreenView> OnOnSplashScreenExit { get; set; } = null;
            
            bool hasOverrideOnSplashScreenExit = true;
            void OnSplashScreenExitEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnSplashScreenExit = true;
                var methodToExecute = (OnOnSplashScreenExit != null) ? OnOnSplashScreenExit : OnSplashScreenExit;
                methodToExecute.Invoke(data.EventData.GetAt<Android.Window.SplashScreenView>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnSplashScreenExit;
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/window/SplashScreen.OnExitAnimationListener.html#onSplashScreenExit(android.window.SplashScreenView)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Window.SplashScreenView"/></param>
            public virtual void OnSplashScreenExit(Android.Window.SplashScreenView arg0)
            {
                hasOverrideOnSplashScreenExit = false;
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region OnExitAnimationListenerDirect implementation
        public partial class OnExitAnimationListenerDirect
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/window/SplashScreen.OnExitAnimationListener.html#onSplashScreenExit(android.window.SplashScreenView)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Window.SplashScreenView"/></param>
            public override void OnSplashScreenExit(Android.Window.SplashScreenView arg0)
            {
                IExecuteWithSignature("onSplashScreenExit", "(Landroid/window/SplashScreenView;)V", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
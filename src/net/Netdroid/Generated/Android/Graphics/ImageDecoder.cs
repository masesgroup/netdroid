/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.5.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Graphics
{
    #region ImageDecoder
    public partial class ImageDecoder
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.html#ALLOCATOR_DEFAULT"/>
        /// </summary>
        public static int ALLOCATOR_DEFAULT { get { if (!_ALLOCATOR_DEFAULTReady) { _ALLOCATOR_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "ALLOCATOR_DEFAULT"); _ALLOCATOR_DEFAULTReady = true; } return _ALLOCATOR_DEFAULTContent; } }
        private static int _ALLOCATOR_DEFAULTContent = default;
        private static bool _ALLOCATOR_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.html#ALLOCATOR_HARDWARE"/>
        /// </summary>
        public static int ALLOCATOR_HARDWARE { get { if (!_ALLOCATOR_HARDWAREReady) { _ALLOCATOR_HARDWAREContent = SGetField<int>(LocalBridgeClazz, "ALLOCATOR_HARDWARE"); _ALLOCATOR_HARDWAREReady = true; } return _ALLOCATOR_HARDWAREContent; } }
        private static int _ALLOCATOR_HARDWAREContent = default;
        private static bool _ALLOCATOR_HARDWAREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.html#ALLOCATOR_SHARED_MEMORY"/>
        /// </summary>
        public static int ALLOCATOR_SHARED_MEMORY { get { if (!_ALLOCATOR_SHARED_MEMORYReady) { _ALLOCATOR_SHARED_MEMORYContent = SGetField<int>(LocalBridgeClazz, "ALLOCATOR_SHARED_MEMORY"); _ALLOCATOR_SHARED_MEMORYReady = true; } return _ALLOCATOR_SHARED_MEMORYContent; } }
        private static int _ALLOCATOR_SHARED_MEMORYContent = default;
        private static bool _ALLOCATOR_SHARED_MEMORYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.html#ALLOCATOR_SOFTWARE"/>
        /// </summary>
        public static int ALLOCATOR_SOFTWARE { get { if (!_ALLOCATOR_SOFTWAREReady) { _ALLOCATOR_SOFTWAREContent = SGetField<int>(LocalBridgeClazz, "ALLOCATOR_SOFTWARE"); _ALLOCATOR_SOFTWAREReady = true; } return _ALLOCATOR_SOFTWAREContent; } }
        private static int _ALLOCATOR_SOFTWAREContent = default;
        private static bool _ALLOCATOR_SOFTWAREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.html#MEMORY_POLICY_DEFAULT"/>
        /// </summary>
        public static int MEMORY_POLICY_DEFAULT { get { if (!_MEMORY_POLICY_DEFAULTReady) { _MEMORY_POLICY_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "MEMORY_POLICY_DEFAULT"); _MEMORY_POLICY_DEFAULTReady = true; } return _MEMORY_POLICY_DEFAULTContent; } }
        private static int _MEMORY_POLICY_DEFAULTContent = default;
        private static bool _MEMORY_POLICY_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.html#MEMORY_POLICY_LOW_RAM"/>
        /// </summary>
        public static int MEMORY_POLICY_LOW_RAM { get { if (!_MEMORY_POLICY_LOW_RAMReady) { _MEMORY_POLICY_LOW_RAMContent = SGetField<int>(LocalBridgeClazz, "MEMORY_POLICY_LOW_RAM"); _MEMORY_POLICY_LOW_RAMReady = true; } return _MEMORY_POLICY_LOW_RAMContent; } }
        private static int _MEMORY_POLICY_LOW_RAMContent = default;
        private static bool _MEMORY_POLICY_LOW_RAMReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.html#decodeBitmap(android.graphics.ImageDecoder.Source,android.graphics.ImageDecoder.OnHeaderDecodedListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.ImageDecoder.Source"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.ImageDecoder.OnHeaderDecodedListener"/></param>
        /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public static Android.Graphics.Bitmap DecodeBitmap(Android.Graphics.ImageDecoder.Source arg0, Android.Graphics.ImageDecoder.OnHeaderDecodedListener arg1)
        {
            return SExecute<Android.Graphics.Bitmap>(LocalBridgeClazz, "decodeBitmap", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.html#decodeBitmap(android.graphics.ImageDecoder.Source)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.ImageDecoder.Source"/></param>
        /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public static Android.Graphics.Bitmap DecodeBitmap(Android.Graphics.ImageDecoder.Source arg0)
        {
            return SExecuteWithSignature<Android.Graphics.Bitmap>(LocalBridgeClazz, "decodeBitmap", "(Landroid/graphics/ImageDecoder$Source;)Landroid/graphics/Bitmap;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.html#decodeDrawable(android.graphics.ImageDecoder.Source,android.graphics.ImageDecoder.OnHeaderDecodedListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.ImageDecoder.Source"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.ImageDecoder.OnHeaderDecodedListener"/></param>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public static Android.Graphics.Drawable.Drawable DecodeDrawable(Android.Graphics.ImageDecoder.Source arg0, Android.Graphics.ImageDecoder.OnHeaderDecodedListener arg1)
        {
            return SExecute<Android.Graphics.Drawable.Drawable>(LocalBridgeClazz, "decodeDrawable", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.html#decodeDrawable(android.graphics.ImageDecoder.Source)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.ImageDecoder.Source"/></param>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public static Android.Graphics.Drawable.Drawable DecodeDrawable(Android.Graphics.ImageDecoder.Source arg0)
        {
            return SExecuteWithSignature<Android.Graphics.Drawable.Drawable>(LocalBridgeClazz, "decodeDrawable", "(Landroid/graphics/ImageDecoder$Source;)Landroid/graphics/drawable/Drawable;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.html#createSource(android.content.ContentResolver,android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
        /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
        /// <returns><see cref="Android.Graphics.ImageDecoder.Source"/></returns>
        public static Android.Graphics.ImageDecoder.Source CreateSource(Android.Content.ContentResolver arg0, Android.Net.Uri arg1)
        {
            return SExecute<Android.Graphics.ImageDecoder.Source>(LocalBridgeClazz, "createSource", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.html#createSource(android.content.res.AssetManager,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Res.AssetManager"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Graphics.ImageDecoder.Source"/></returns>
        public static Android.Graphics.ImageDecoder.Source CreateSource(Android.Content.Res.AssetManager arg0, Java.Lang.String arg1)
        {
            return SExecute<Android.Graphics.ImageDecoder.Source>(LocalBridgeClazz, "createSource", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.html#createSource(android.content.res.Resources,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Res.Resources"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.Graphics.ImageDecoder.Source"/></returns>
        public static Android.Graphics.ImageDecoder.Source CreateSource(Android.Content.Res.Resources arg0, int arg1)
        {
            return SExecute<Android.Graphics.ImageDecoder.Source>(LocalBridgeClazz, "createSource", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.html#createSource(byte[],int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="Android.Graphics.ImageDecoder.Source"/></returns>
        /// <exception cref="Java.Lang.ArrayIndexOutOfBoundsException"/>
        public static Android.Graphics.ImageDecoder.Source CreateSource(byte[] arg0, int arg1, int arg2)
        {
            return SExecute<Android.Graphics.ImageDecoder.Source>(LocalBridgeClazz, "createSource", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.html#createSource(byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <returns><see cref="Android.Graphics.ImageDecoder.Source"/></returns>
        public static Android.Graphics.ImageDecoder.Source CreateSource(byte[] arg0)
        {
            return SExecuteWithSignature<Android.Graphics.ImageDecoder.Source>(LocalBridgeClazz, "createSource", "([B)Landroid/graphics/ImageDecoder$Source;", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.html#createSource(java.io.File)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.File"/></param>
        /// <returns><see cref="Android.Graphics.ImageDecoder.Source"/></returns>
        public static Android.Graphics.ImageDecoder.Source CreateSource(Java.Io.File arg0)
        {
            return SExecuteWithSignature<Android.Graphics.ImageDecoder.Source>(LocalBridgeClazz, "createSource", "(Ljava/io/File;)Landroid/graphics/ImageDecoder$Source;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.html#createSource(java.nio.ByteBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <returns><see cref="Android.Graphics.ImageDecoder.Source"/></returns>
        public static Android.Graphics.ImageDecoder.Source CreateSource(Java.Nio.ByteBuffer arg0)
        {
            return SExecuteWithSignature<Android.Graphics.ImageDecoder.Source>(LocalBridgeClazz, "createSource", "(Ljava/nio/ByteBuffer;)Landroid/graphics/ImageDecoder$Source;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.html#createSource(java.util.concurrent.Callable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Callable"/></param>
        /// <returns><see cref="Android.Graphics.ImageDecoder.Source"/></returns>
        public static Android.Graphics.ImageDecoder.Source CreateSource(Java.Util.Concurrent.Callable<Android.Content.Res.AssetFileDescriptor> arg0)
        {
            return SExecuteWithSignature<Android.Graphics.ImageDecoder.Source>(LocalBridgeClazz, "createSource", "(Ljava/util/concurrent/Callable;)Landroid/graphics/ImageDecoder$Source;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.html#isMimeTypeSupported(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsMimeTypeSupported(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isMimeTypeSupported", "(Ljava/lang/String;)Z", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.html#getOnPartialImageListener()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.ImageDecoder.OnPartialImageListener"/></returns>
        public Android.Graphics.ImageDecoder.OnPartialImageListener GetOnPartialImageListener()
        {
            return IExecuteWithSignature<Android.Graphics.ImageDecoder.OnPartialImageListener>("getOnPartialImageListener", "()Landroid/graphics/ImageDecoder$OnPartialImageListener;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.html#getOnPartialImageListener()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.ImageDecoder.OnPartialImageListener"/></returns>
        public Android.Graphics.ImageDecoder.OnPartialImageListener GetOnPartialImageListenerDirect()
        {
            return IExecuteWithSignature<Android.Graphics.ImageDecoder.OnPartialImageListenerDirect, Android.Graphics.ImageDecoder.OnPartialImageListener>("getOnPartialImageListener", "()Landroid/graphics/ImageDecoder$OnPartialImageListener;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.html#getPostProcessor()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.PostProcessor"/></returns>
        public Android.Graphics.PostProcessor GetPostProcessor()
        {
            return IExecuteWithSignature<Android.Graphics.PostProcessor>("getPostProcessor", "()Landroid/graphics/PostProcessor;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.html#getCrop()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Rect"/></returns>
        public Android.Graphics.Rect GetCrop()
        {
            return IExecuteWithSignature<Android.Graphics.Rect>("getCrop", "()Landroid/graphics/Rect;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.html#isDecodeAsAlphaMaskEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDecodeAsAlphaMaskEnabled()
        {
            return IExecuteWithSignature<bool>("isDecodeAsAlphaMaskEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.html#isMutableRequired()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsMutableRequired()
        {
            return IExecuteWithSignature<bool>("isMutableRequired", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.html#isUnpremultipliedRequired()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsUnpremultipliedRequired()
        {
            return IExecuteWithSignature<bool>("isUnpremultipliedRequired", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.html#getAllocator()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetAllocator()
        {
            return IExecuteWithSignature<int>("getAllocator", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.html#getMemorySizePolicy()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMemorySizePolicy()
        {
            return IExecuteWithSignature<int>("getMemorySizePolicy", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.html#close()"/>
        /// </summary>
        public void Close()
        {
            IExecuteWithSignature("close", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.html#setAllocator(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetAllocator(int arg0)
        {
            IExecuteWithSignature("setAllocator", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.html#setCrop(android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        public void SetCrop(Android.Graphics.Rect arg0)
        {
            IExecuteWithSignature("setCrop", "(Landroid/graphics/Rect;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.html#setDecodeAsAlphaMaskEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetDecodeAsAlphaMaskEnabled(bool arg0)
        {
            IExecuteWithSignature("setDecodeAsAlphaMaskEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.html#setMemorySizePolicy(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetMemorySizePolicy(int arg0)
        {
            IExecuteWithSignature("setMemorySizePolicy", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.html#setMutableRequired(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetMutableRequired(bool arg0)
        {
            IExecuteWithSignature("setMutableRequired", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.html#setOnPartialImageListener(android.graphics.ImageDecoder.OnPartialImageListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.ImageDecoder.OnPartialImageListener"/></param>
        public void SetOnPartialImageListener(Android.Graphics.ImageDecoder.OnPartialImageListener arg0)
        {
            IExecuteWithSignature("setOnPartialImageListener", "(Landroid/graphics/ImageDecoder$OnPartialImageListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.html#setPostProcessor(android.graphics.PostProcessor)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.PostProcessor"/></param>
        public void SetPostProcessor(Android.Graphics.PostProcessor arg0)
        {
            IExecuteWithSignature("setPostProcessor", "(Landroid/graphics/PostProcessor;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.html#setTargetColorSpace(android.graphics.ColorSpace)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.ColorSpace"/></param>
        public void SetTargetColorSpace(Android.Graphics.ColorSpace arg0)
        {
            IExecuteWithSignature("setTargetColorSpace", "(Landroid/graphics/ColorSpace;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.html#setTargetSampleSize(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetTargetSampleSize(int arg0)
        {
            IExecuteWithSignature("setTargetSampleSize", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.html#setTargetSize(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetTargetSize(int arg0, int arg1)
        {
            IExecute("setTargetSize", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.html#setUnpremultipliedRequired(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetUnpremultipliedRequired(bool arg0)
        {
            IExecuteWithSignature("setUnpremultipliedRequired", "(Z)V", arg0);
        }

        #endregion

        #region Nested classes
        #region DecodeException
        public partial class DecodeException
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ImageInfo
        public partial class ImageInfo
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.ImageInfo.html#getColorSpace()"/>
            /// </summary>
            /// <returns><see cref="Android.Graphics.ColorSpace"/></returns>
            public Android.Graphics.ColorSpace GetColorSpace()
            {
                return IExecuteWithSignature<Android.Graphics.ColorSpace>("getColorSpace", "()Landroid/graphics/ColorSpace;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.ImageInfo.html#getSize()"/>
            /// </summary>
            /// <returns><see cref="Android.Util.Size"/></returns>
            public Android.Util.Size GetSize()
            {
                return IExecuteWithSignature<Android.Util.Size>("getSize", "()Landroid/util/Size;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.ImageInfo.html#isAnimated()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsAnimated()
            {
                return IExecuteWithSignature<bool>("isAnimated", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.ImageInfo.html#getMimeType()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetMimeType()
            {
                return IExecuteWithSignature<Java.Lang.String>("getMimeType", "()Ljava/lang/String;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnHeaderDecodedListener
        public partial class OnHeaderDecodedListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnHeaderDecodedListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onHeaderDecoded", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Graphics.ImageDecoder>>>(OnHeaderDecodedEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.OnHeaderDecodedListener.html#onHeaderDecoded(android.graphics.ImageDecoder,android.graphics.ImageDecoder.ImageInfo,android.graphics.ImageDecoder.Source)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnHeaderDecoded"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Graphics.ImageDecoder, Android.Graphics.ImageDecoder.ImageInfo, Android.Graphics.ImageDecoder.Source> OnOnHeaderDecoded { get; set; } = null;

            void OnHeaderDecodedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Graphics.ImageDecoder>> data)
            {
                var methodToExecute = (OnOnHeaderDecoded != null) ? OnOnHeaderDecoded : OnHeaderDecoded;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.Graphics.ImageDecoder.ImageInfo>(0), data.EventData.GetAt<Android.Graphics.ImageDecoder.Source>(1));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.OnHeaderDecodedListener.html#onHeaderDecoded(android.graphics.ImageDecoder,android.graphics.ImageDecoder.ImageInfo,android.graphics.ImageDecoder.Source)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.ImageDecoder"/></param>
            /// <param name="arg1"><see cref="Android.Graphics.ImageDecoder.ImageInfo"/></param>
            /// <param name="arg2"><see cref="Android.Graphics.ImageDecoder.Source"/></param>
            public virtual void OnHeaderDecoded(Android.Graphics.ImageDecoder arg0, Android.Graphics.ImageDecoder.ImageInfo arg1, Android.Graphics.ImageDecoder.Source arg2)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnHeaderDecodedListenerDirect
        public partial class OnHeaderDecodedListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.OnHeaderDecodedListener.html#onHeaderDecoded(android.graphics.ImageDecoder,android.graphics.ImageDecoder.ImageInfo,android.graphics.ImageDecoder.Source)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.ImageDecoder"/></param>
            /// <param name="arg1"><see cref="Android.Graphics.ImageDecoder.ImageInfo"/></param>
            /// <param name="arg2"><see cref="Android.Graphics.ImageDecoder.Source"/></param>
            public override void OnHeaderDecoded(Android.Graphics.ImageDecoder arg0, Android.Graphics.ImageDecoder.ImageInfo arg1, Android.Graphics.ImageDecoder.Source arg2)
            {
                IExecute("onHeaderDecoded", arg0, arg1, arg2);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnPartialImageListener
        public partial class OnPartialImageListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnPartialImageListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onPartialImage", new global::System.EventHandler<CLRListenerEventArgs<CLREventData>>(OnPartialImageEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.OnPartialImageListener.html#onPartialImage(android.graphics.ImageDecoder.DecodeException)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnPartialImage"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<MASES.JCOBridge.C2JBridge.JVMBridgeException, bool> OnOnPartialImage { get; set; } = null;

            void OnPartialImageEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
            {
                var methodToExecute = (OnOnPartialImage != null) ? OnOnPartialImage : OnPartialImage;
                var executionResult = methodToExecute.Invoke(JVMBridgeException.New(data.EventData.EventData as MASES.JCOBridge.C2JBridge.JVMInterop.IJavaObject));
                data.SetReturnValue(executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.OnPartialImageListener.html#onPartialImage(android.graphics.ImageDecoder.DecodeException)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.ImageDecoder.DecodeException"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnPartialImage(MASES.JCOBridge.C2JBridge.JVMBridgeException arg0)
            {
                return default;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnPartialImageListenerDirect
        public partial class OnPartialImageListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ImageDecoder.OnPartialImageListener.html#onPartialImage(android.graphics.ImageDecoder.DecodeException)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.ImageDecoder.DecodeException"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnPartialImage(MASES.JCOBridge.C2JBridge.JVMBridgeException arg0)
            {
                return IExecuteWithSignature<bool>("onPartialImage", "(Landroid/graphics/ImageDecoder$DecodeException;)Z", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Source
        public partial class Source
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
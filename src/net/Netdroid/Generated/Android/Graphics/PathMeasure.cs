/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Graphics
{
    #region PathMeasure
    public partial class PathMeasure
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/PathMeasure.html#%3Cinit%3E(android.graphics.Path,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Path"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public PathMeasure(Android.Graphics.Path arg0, bool arg1)
            : base(arg0, arg1)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/PathMeasure.html#POSITION_MATRIX_FLAG"/>
        /// </summary>
        public static int POSITION_MATRIX_FLAG { get { if (!_POSITION_MATRIX_FLAGReady) { _POSITION_MATRIX_FLAGContent = SGetField<int>(LocalBridgeClazz, "POSITION_MATRIX_FLAG"); _POSITION_MATRIX_FLAGReady = true; } return _POSITION_MATRIX_FLAGContent; } }
        private static int _POSITION_MATRIX_FLAGContent = default;
        private static bool _POSITION_MATRIX_FLAGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/PathMeasure.html#TANGENT_MATRIX_FLAG"/>
        /// </summary>
        public static int TANGENT_MATRIX_FLAG { get { if (!_TANGENT_MATRIX_FLAGReady) { _TANGENT_MATRIX_FLAGContent = SGetField<int>(LocalBridgeClazz, "TANGENT_MATRIX_FLAG"); _TANGENT_MATRIX_FLAGReady = true; } return _TANGENT_MATRIX_FLAGContent; } }
        private static int _TANGENT_MATRIX_FLAGContent = default;
        private static bool _TANGENT_MATRIX_FLAGReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/PathMeasure.html#getLength()"/> 
        /// </summary>
        public float Length
        {
            get { return IExecuteWithSignature<float>("getLength", "()F"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/PathMeasure.html#getMatrix(float,android.graphics.Matrix,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Matrix"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool GetMatrix(float arg0, Android.Graphics.Matrix arg1, int arg2)
        {
            return IExecute<bool>("getMatrix", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/PathMeasure.html#getPosTan(float,float[],float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool GetPosTan(float arg0, float[] arg1, float[] arg2)
        {
            return IExecute<bool>("getPosTan", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/PathMeasure.html#getSegment(float,float,android.graphics.Path,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.Path"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool GetSegment(float arg0, float arg1, Android.Graphics.Path arg2, bool arg3)
        {
            return IExecute<bool>("getSegment", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/PathMeasure.html#isClosed()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsClosed()
        {
            return IExecuteWithSignature<bool>("isClosed", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/PathMeasure.html#nextContour()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool NextContour()
        {
            return IExecuteWithSignature<bool>("nextContour", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/PathMeasure.html#setPath(android.graphics.Path,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Path"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public void SetPath(Android.Graphics.Path arg0, bool arg1)
        {
            IExecute("setPath", arg0, arg1);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
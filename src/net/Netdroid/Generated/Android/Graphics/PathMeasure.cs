/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Graphics
{
    #region PathMeasure declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/graphics/PathMeasure.html"/>
    /// </summary>
    public partial class PathMeasure : MASES.JCOBridge.C2JBridge.JVMBridgeBase<PathMeasure>
    {
        const string _bridgeClassName = "android.graphics.PathMeasure";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public PathMeasure() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public PathMeasure(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region PathMeasure implementation
    public partial class PathMeasure
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/PathMeasure.html#%3Cinit%3E(android.graphics.Path,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Path"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public PathMeasure(Android.Graphics.Path arg0, bool arg1)
            : base(arg0, arg1)
        {
        }
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/PathMeasure.html#POSITION_MATRIX_FLAG"/>
        /// </summary>
        public static int POSITION_MATRIX_FLAG { get { if (!_POSITION_MATRIX_FLAGReady) { _POSITION_MATRIX_FLAGContent = SGetField<int>(LocalBridgeClazz, "POSITION_MATRIX_FLAG"); _POSITION_MATRIX_FLAGReady = true; } return _POSITION_MATRIX_FLAGContent; } }
        private static int _POSITION_MATRIX_FLAGContent = default;
        private static bool _POSITION_MATRIX_FLAGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/PathMeasure.html#TANGENT_MATRIX_FLAG"/>
        /// </summary>
        public static int TANGENT_MATRIX_FLAG { get { if (!_TANGENT_MATRIX_FLAGReady) { _TANGENT_MATRIX_FLAGContent = SGetField<int>(LocalBridgeClazz, "TANGENT_MATRIX_FLAG"); _TANGENT_MATRIX_FLAGReady = true; } return _TANGENT_MATRIX_FLAGContent; } }
        private static int _TANGENT_MATRIX_FLAGContent = default;
        private static bool _TANGENT_MATRIX_FLAGReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/PathMeasure.html#getMatrix(float,android.graphics.Matrix,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Matrix"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool GetMatrix(float arg0, Android.Graphics.Matrix arg1, int arg2)
        {
            return IExecuteWithSignature<bool>("getMatrix", "(FLandroid/graphics/Matrix;I)Z", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/PathMeasure.html#getPosTan(float,float[],float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool GetPosTan(float arg0, float[] arg1, float[] arg2)
        {
            return IExecuteWithSignature<bool>("getPosTan", "(F[F[F)Z", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/PathMeasure.html#getSegment(float,float,android.graphics.Path,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.Path"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool GetSegment(float arg0, float arg1, Android.Graphics.Path arg2, bool arg3)
        {
            return IExecuteWithSignature<bool>("getSegment", "(FFLandroid/graphics/Path;Z)Z", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/PathMeasure.html#isClosed()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsClosed()
        {
            return IExecuteWithSignature<bool>("isClosed", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/PathMeasure.html#nextContour()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool NextContour()
        {
            return IExecuteWithSignature<bool>("nextContour", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/PathMeasure.html#getLength()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetLength()
        {
            return IExecuteWithSignature<float>("getLength", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/PathMeasure.html#setPath(android.graphics.Path,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Path"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public void SetPath(Android.Graphics.Path arg0, bool arg1)
        {
            IExecuteWithSignature("setPath", "(Landroid/graphics/Path;Z)V", arg0, arg1);
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.6.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Graphics
{
    #region MeshSpecification
    public partial class MeshSpecification
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/MeshSpecification.html#ALPHA_TYPE_OPAQUE"/>
        /// </summary>
        public static int ALPHA_TYPE_OPAQUE { get { if (!_ALPHA_TYPE_OPAQUEReady) { _ALPHA_TYPE_OPAQUEContent = SGetField<int>(LocalBridgeClazz, "ALPHA_TYPE_OPAQUE"); _ALPHA_TYPE_OPAQUEReady = true; } return _ALPHA_TYPE_OPAQUEContent; } }
        private static int _ALPHA_TYPE_OPAQUEContent = default;
        private static bool _ALPHA_TYPE_OPAQUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/MeshSpecification.html#ALPHA_TYPE_PREMULTIPLIED"/>
        /// </summary>
        public static int ALPHA_TYPE_PREMULTIPLIED { get { if (!_ALPHA_TYPE_PREMULTIPLIEDReady) { _ALPHA_TYPE_PREMULTIPLIEDContent = SGetField<int>(LocalBridgeClazz, "ALPHA_TYPE_PREMULTIPLIED"); _ALPHA_TYPE_PREMULTIPLIEDReady = true; } return _ALPHA_TYPE_PREMULTIPLIEDContent; } }
        private static int _ALPHA_TYPE_PREMULTIPLIEDContent = default;
        private static bool _ALPHA_TYPE_PREMULTIPLIEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/MeshSpecification.html#ALPHA_TYPE_UNKNOWN"/>
        /// </summary>
        public static int ALPHA_TYPE_UNKNOWN { get { if (!_ALPHA_TYPE_UNKNOWNReady) { _ALPHA_TYPE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "ALPHA_TYPE_UNKNOWN"); _ALPHA_TYPE_UNKNOWNReady = true; } return _ALPHA_TYPE_UNKNOWNContent; } }
        private static int _ALPHA_TYPE_UNKNOWNContent = default;
        private static bool _ALPHA_TYPE_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/MeshSpecification.html#ALPHA_TYPE_UNPREMULTIPLIED"/>
        /// </summary>
        public static int ALPHA_TYPE_UNPREMULTIPLIED { get { if (!_ALPHA_TYPE_UNPREMULTIPLIEDReady) { _ALPHA_TYPE_UNPREMULTIPLIEDContent = SGetField<int>(LocalBridgeClazz, "ALPHA_TYPE_UNPREMULTIPLIED"); _ALPHA_TYPE_UNPREMULTIPLIEDReady = true; } return _ALPHA_TYPE_UNPREMULTIPLIEDContent; } }
        private static int _ALPHA_TYPE_UNPREMULTIPLIEDContent = default;
        private static bool _ALPHA_TYPE_UNPREMULTIPLIEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/MeshSpecification.html#TYPE_FLOAT"/>
        /// </summary>
        public static int TYPE_FLOAT { get { if (!_TYPE_FLOATReady) { _TYPE_FLOATContent = SGetField<int>(LocalBridgeClazz, "TYPE_FLOAT"); _TYPE_FLOATReady = true; } return _TYPE_FLOATContent; } }
        private static int _TYPE_FLOATContent = default;
        private static bool _TYPE_FLOATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/MeshSpecification.html#TYPE_FLOAT2"/>
        /// </summary>
        public static int TYPE_FLOAT2 { get { if (!_TYPE_FLOAT2Ready) { _TYPE_FLOAT2Content = SGetField<int>(LocalBridgeClazz, "TYPE_FLOAT2"); _TYPE_FLOAT2Ready = true; } return _TYPE_FLOAT2Content; } }
        private static int _TYPE_FLOAT2Content = default;
        private static bool _TYPE_FLOAT2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/MeshSpecification.html#TYPE_FLOAT3"/>
        /// </summary>
        public static int TYPE_FLOAT3 { get { if (!_TYPE_FLOAT3Ready) { _TYPE_FLOAT3Content = SGetField<int>(LocalBridgeClazz, "TYPE_FLOAT3"); _TYPE_FLOAT3Ready = true; } return _TYPE_FLOAT3Content; } }
        private static int _TYPE_FLOAT3Content = default;
        private static bool _TYPE_FLOAT3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/MeshSpecification.html#TYPE_FLOAT4"/>
        /// </summary>
        public static int TYPE_FLOAT4 { get { if (!_TYPE_FLOAT4Ready) { _TYPE_FLOAT4Content = SGetField<int>(LocalBridgeClazz, "TYPE_FLOAT4"); _TYPE_FLOAT4Ready = true; } return _TYPE_FLOAT4Content; } }
        private static int _TYPE_FLOAT4Content = default;
        private static bool _TYPE_FLOAT4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/MeshSpecification.html#TYPE_UBYTE4"/>
        /// </summary>
        public static int TYPE_UBYTE4 { get { if (!_TYPE_UBYTE4Ready) { _TYPE_UBYTE4Content = SGetField<int>(LocalBridgeClazz, "TYPE_UBYTE4"); _TYPE_UBYTE4Ready = true; } return _TYPE_UBYTE4Content; } }
        private static int _TYPE_UBYTE4Content = default;
        private static bool _TYPE_UBYTE4Ready = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/MeshSpecification.html#make(android.graphics.MeshSpecification.Attribute[],int,android.graphics.MeshSpecification.Varying[],java.lang.String,java.lang.String,android.graphics.ColorSpace,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.MeshSpecification.Attribute"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.MeshSpecification.Varying"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <param name="arg4"><see cref="Java.Lang.String"/></param>
        /// <param name="arg5"><see cref="Android.Graphics.ColorSpace"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <returns><see cref="Android.Graphics.MeshSpecification"/></returns>
        public static Android.Graphics.MeshSpecification Make(Android.Graphics.MeshSpecification.Attribute[] arg0, int arg1, Android.Graphics.MeshSpecification.Varying[] arg2, Java.Lang.String arg3, Java.Lang.String arg4, Android.Graphics.ColorSpace arg5, int arg6)
        {
            return SExecute<Android.Graphics.MeshSpecification>(LocalBridgeClazz, "make", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/MeshSpecification.html#make(android.graphics.MeshSpecification.Attribute[],int,android.graphics.MeshSpecification.Varying[],java.lang.String,java.lang.String,android.graphics.ColorSpace)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.MeshSpecification.Attribute"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.MeshSpecification.Varying"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <param name="arg4"><see cref="Java.Lang.String"/></param>
        /// <param name="arg5"><see cref="Android.Graphics.ColorSpace"/></param>
        /// <returns><see cref="Android.Graphics.MeshSpecification"/></returns>
        public static Android.Graphics.MeshSpecification Make(Android.Graphics.MeshSpecification.Attribute[] arg0, int arg1, Android.Graphics.MeshSpecification.Varying[] arg2, Java.Lang.String arg3, Java.Lang.String arg4, Android.Graphics.ColorSpace arg5)
        {
            return SExecute<Android.Graphics.MeshSpecification>(LocalBridgeClazz, "make", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/MeshSpecification.html#make(android.graphics.MeshSpecification.Attribute[],int,android.graphics.MeshSpecification.Varying[],java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.MeshSpecification.Attribute"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.MeshSpecification.Varying"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <param name="arg4"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Graphics.MeshSpecification"/></returns>
        public static Android.Graphics.MeshSpecification Make(Android.Graphics.MeshSpecification.Attribute[] arg0, int arg1, Android.Graphics.MeshSpecification.Varying[] arg2, Java.Lang.String arg3, Java.Lang.String arg4)
        {
            return SExecute<Android.Graphics.MeshSpecification>(LocalBridgeClazz, "make", arg0, arg1, arg2, arg3, arg4);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes
        #region Attribute
        public partial class Attribute
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/MeshSpecification.Attribute.html#%3Cinit%3E(int,int,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="Java.Lang.String"/></param>
            public Attribute(int arg0, int arg1, Java.Lang.String arg2)
                : base(arg0, arg1, arg2)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/MeshSpecification.Attribute.html#getOffset()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetOffset()
            {
                return IExecuteWithSignature<int>("getOffset", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/MeshSpecification.Attribute.html#getType()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetType()
            {
                return IExecuteWithSignature<int>("getType", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/MeshSpecification.Attribute.html#getName()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetName()
            {
                return IExecuteWithSignature<Java.Lang.String>("getName", "()Ljava/lang/String;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Varying
        public partial class Varying
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/MeshSpecification.Varying.html#%3Cinit%3E(int,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            public Varying(int arg0, Java.Lang.String arg1)
                : base(arg0, arg1)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/MeshSpecification.Varying.html#getType()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetType()
            {
                return IExecuteWithSignature<int>("getType", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/MeshSpecification.Varying.html#getName()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetName()
            {
                return IExecuteWithSignature<Java.Lang.String>("getName", "()Ljava/lang/String;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Graphics
{
    #region ColorSpace
    public partial class ColorSpace
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.html#ILLUMINANT_A"/>
        /// </summary>
        public static float[] ILLUMINANT_A { get { if (!_ILLUMINANT_AReady) { _ILLUMINANT_AContent = SGetFieldArray<float>(LocalBridgeClazz, "ILLUMINANT_A"); _ILLUMINANT_AReady = true; } return _ILLUMINANT_AContent; } }
        private static float[] _ILLUMINANT_AContent = default;
        private static bool _ILLUMINANT_AReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.html#ILLUMINANT_B"/>
        /// </summary>
        public static float[] ILLUMINANT_B { get { if (!_ILLUMINANT_BReady) { _ILLUMINANT_BContent = SGetFieldArray<float>(LocalBridgeClazz, "ILLUMINANT_B"); _ILLUMINANT_BReady = true; } return _ILLUMINANT_BContent; } }
        private static float[] _ILLUMINANT_BContent = default;
        private static bool _ILLUMINANT_BReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.html#ILLUMINANT_C"/>
        /// </summary>
        public static float[] ILLUMINANT_C { get { if (!_ILLUMINANT_CReady) { _ILLUMINANT_CContent = SGetFieldArray<float>(LocalBridgeClazz, "ILLUMINANT_C"); _ILLUMINANT_CReady = true; } return _ILLUMINANT_CContent; } }
        private static float[] _ILLUMINANT_CContent = default;
        private static bool _ILLUMINANT_CReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.html#ILLUMINANT_D50"/>
        /// </summary>
        public static float[] ILLUMINANT_D50 { get { if (!_ILLUMINANT_D50Ready) { _ILLUMINANT_D50Content = SGetFieldArray<float>(LocalBridgeClazz, "ILLUMINANT_D50"); _ILLUMINANT_D50Ready = true; } return _ILLUMINANT_D50Content; } }
        private static float[] _ILLUMINANT_D50Content = default;
        private static bool _ILLUMINANT_D50Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.html#ILLUMINANT_D55"/>
        /// </summary>
        public static float[] ILLUMINANT_D55 { get { if (!_ILLUMINANT_D55Ready) { _ILLUMINANT_D55Content = SGetFieldArray<float>(LocalBridgeClazz, "ILLUMINANT_D55"); _ILLUMINANT_D55Ready = true; } return _ILLUMINANT_D55Content; } }
        private static float[] _ILLUMINANT_D55Content = default;
        private static bool _ILLUMINANT_D55Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.html#ILLUMINANT_D60"/>
        /// </summary>
        public static float[] ILLUMINANT_D60 { get { if (!_ILLUMINANT_D60Ready) { _ILLUMINANT_D60Content = SGetFieldArray<float>(LocalBridgeClazz, "ILLUMINANT_D60"); _ILLUMINANT_D60Ready = true; } return _ILLUMINANT_D60Content; } }
        private static float[] _ILLUMINANT_D60Content = default;
        private static bool _ILLUMINANT_D60Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.html#ILLUMINANT_D65"/>
        /// </summary>
        public static float[] ILLUMINANT_D65 { get { if (!_ILLUMINANT_D65Ready) { _ILLUMINANT_D65Content = SGetFieldArray<float>(LocalBridgeClazz, "ILLUMINANT_D65"); _ILLUMINANT_D65Ready = true; } return _ILLUMINANT_D65Content; } }
        private static float[] _ILLUMINANT_D65Content = default;
        private static bool _ILLUMINANT_D65Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.html#ILLUMINANT_D75"/>
        /// </summary>
        public static float[] ILLUMINANT_D75 { get { if (!_ILLUMINANT_D75Ready) { _ILLUMINANT_D75Content = SGetFieldArray<float>(LocalBridgeClazz, "ILLUMINANT_D75"); _ILLUMINANT_D75Ready = true; } return _ILLUMINANT_D75Content; } }
        private static float[] _ILLUMINANT_D75Content = default;
        private static bool _ILLUMINANT_D75Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.html#ILLUMINANT_E"/>
        /// </summary>
        public static float[] ILLUMINANT_E { get { if (!_ILLUMINANT_EReady) { _ILLUMINANT_EContent = SGetFieldArray<float>(LocalBridgeClazz, "ILLUMINANT_E"); _ILLUMINANT_EReady = true; } return _ILLUMINANT_EContent; } }
        private static float[] _ILLUMINANT_EContent = default;
        private static bool _ILLUMINANT_EReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.html#MAX_ID"/>
        /// </summary>
        public static int MAX_ID { get { if (!_MAX_IDReady) { _MAX_IDContent = SGetField<int>(LocalBridgeClazz, "MAX_ID"); _MAX_IDReady = true; } return _MAX_IDContent; } }
        private static int _MAX_IDContent = default;
        private static bool _MAX_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.html#MIN_ID"/>
        /// </summary>
        public static int MIN_ID { get { if (!_MIN_IDReady) { _MIN_IDContent = SGetField<int>(LocalBridgeClazz, "MIN_ID"); _MIN_IDReady = true; } return _MIN_IDContent; } }
        private static int _MIN_IDContent = default;
        private static bool _MIN_IDReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.html#adapt(android.graphics.ColorSpace,float[],android.graphics.ColorSpace.Adaptation)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.ColorSpace"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.ColorSpace.Adaptation"/></param>
        /// <returns><see cref="Android.Graphics.ColorSpace"/></returns>
        public static Android.Graphics.ColorSpace Adapt(Android.Graphics.ColorSpace arg0, float[] arg1, Android.Graphics.ColorSpace.Adaptation arg2)
        {
            return SExecute<Android.Graphics.ColorSpace>(LocalBridgeClazz, "adapt", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.html#adapt(android.graphics.ColorSpace,float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.ColorSpace"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <returns><see cref="Android.Graphics.ColorSpace"/></returns>
        public static Android.Graphics.ColorSpace Adapt(Android.Graphics.ColorSpace arg0, float[] arg1)
        {
            return SExecute<Android.Graphics.ColorSpace>(LocalBridgeClazz, "adapt", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.html#get(android.graphics.ColorSpace.Named)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.ColorSpace.Named"/></param>
        /// <returns><see cref="Android.Graphics.ColorSpace"/></returns>
        public static Android.Graphics.ColorSpace Get(Android.Graphics.ColorSpace.Named arg0)
        {
            return SExecuteWithSignature<Android.Graphics.ColorSpace>(LocalBridgeClazz, "get", "(Landroid/graphics/ColorSpace$Named;)Landroid/graphics/ColorSpace;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.html#getFromDataSpace(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Graphics.ColorSpace"/></returns>
        public static Android.Graphics.ColorSpace GetFromDataSpace(int arg0)
        {
            return SExecuteWithSignature<Android.Graphics.ColorSpace>(LocalBridgeClazz, "getFromDataSpace", "(I)Landroid/graphics/ColorSpace;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.html#match(float[],android.graphics.ColorSpace.Rgb.TransferParameters)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.ColorSpace.Rgb.TransferParameters"/></param>
        /// <returns><see cref="Android.Graphics.ColorSpace"/></returns>
        public static Android.Graphics.ColorSpace Match(float[] arg0, Android.Graphics.ColorSpace.Rgb.TransferParameters arg1)
        {
            return SExecute<Android.Graphics.ColorSpace>(LocalBridgeClazz, "match", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.html#connect(android.graphics.ColorSpace,android.graphics.ColorSpace,android.graphics.ColorSpace.RenderIntent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.ColorSpace"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.ColorSpace"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.ColorSpace.RenderIntent"/></param>
        /// <returns><see cref="Android.Graphics.ColorSpace.Connector"/></returns>
        public static Android.Graphics.ColorSpace.Connector Connect(Android.Graphics.ColorSpace arg0, Android.Graphics.ColorSpace arg1, Android.Graphics.ColorSpace.RenderIntent arg2)
        {
            return SExecute<Android.Graphics.ColorSpace.Connector>(LocalBridgeClazz, "connect", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.html#connect(android.graphics.ColorSpace,android.graphics.ColorSpace)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.ColorSpace"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.ColorSpace"/></param>
        /// <returns><see cref="Android.Graphics.ColorSpace.Connector"/></returns>
        public static Android.Graphics.ColorSpace.Connector Connect(Android.Graphics.ColorSpace arg0, Android.Graphics.ColorSpace arg1)
        {
            return SExecute<Android.Graphics.ColorSpace.Connector>(LocalBridgeClazz, "connect", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.html#connect(android.graphics.ColorSpace,android.graphics.ColorSpace.RenderIntent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.ColorSpace"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.ColorSpace.RenderIntent"/></param>
        /// <returns><see cref="Android.Graphics.ColorSpace.Connector"/></returns>
        public static Android.Graphics.ColorSpace.Connector Connect(Android.Graphics.ColorSpace arg0, Android.Graphics.ColorSpace.RenderIntent arg1)
        {
            return SExecute<Android.Graphics.ColorSpace.Connector>(LocalBridgeClazz, "connect", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.html#connect(android.graphics.ColorSpace)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.ColorSpace"/></param>
        /// <returns><see cref="Android.Graphics.ColorSpace.Connector"/></returns>
        public static Android.Graphics.ColorSpace.Connector Connect(Android.Graphics.ColorSpace arg0)
        {
            return SExecuteWithSignature<Android.Graphics.ColorSpace.Connector>(LocalBridgeClazz, "connect", "(Landroid/graphics/ColorSpace;)Landroid/graphics/ColorSpace$Connector;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.html#cctToXyz(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public static float[] CctToXyz(int arg0)
        {
            return SExecuteWithSignatureArray<float>(LocalBridgeClazz, "cctToXyz", "(I)[F", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.html#chromaticAdaptation(android.graphics.ColorSpace.Adaptation,float[],float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.ColorSpace.Adaptation"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <returns><see cref="float"/></returns>
        public static float[] ChromaticAdaptation(Android.Graphics.ColorSpace.Adaptation arg0, float[] arg1, float[] arg2)
        {
            return SExecuteArray<float>(LocalBridgeClazz, "chromaticAdaptation", arg0, arg1, arg2);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.html#isWideGamut()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsWideGamut()
        {
            return IExecuteWithSignature<bool>("isWideGamut", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.html#getMaxValue(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetMaxValue(int arg0)
        {
            return IExecuteWithSignature<float>("getMaxValue", "(I)F", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.html#getMinValue(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetMinValue(int arg0)
        {
            return IExecuteWithSignature<float>("getMinValue", "(I)F", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.html#fromXyz(float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <returns><see cref="float"/></returns>
        public float[] FromXyz(float[] arg0)
        {
            return IExecuteWithSignatureArray<float>("fromXyz", "([F)[F", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.html#toXyz(float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <returns><see cref="float"/></returns>
        public float[] ToXyz(float[] arg0)
        {
            return IExecuteWithSignatureArray<float>("toXyz", "([F)[F", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.html#getModel()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.ColorSpace.Model"/></returns>
        public Android.Graphics.ColorSpace.Model GetModel()
        {
            return IExecuteWithSignature<Android.Graphics.ColorSpace.Model>("getModel", "()Landroid/graphics/ColorSpace$Model;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.html#isSrgb()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsSrgb()
        {
            return IExecuteWithSignature<bool>("isSrgb", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.html#fromXyz(float,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <returns><see cref="float"/></returns>
        public float[] FromXyz(float arg0, float arg1, float arg2)
        {
            return IExecuteArray<float>("fromXyz", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.html#toXyz(float,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <returns><see cref="float"/></returns>
        public float[] ToXyz(float arg0, float arg1, float arg2)
        {
            return IExecuteArray<float>("toXyz", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.html#getComponentCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetComponentCount()
        {
            return IExecuteWithSignature<int>("getComponentCount", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.html#getDataSpace()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetDataSpace()
        {
            return IExecuteWithSignature<int>("getDataSpace", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.html#getId()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetId()
        {
            return IExecuteWithSignature<int>("getId", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.html#getName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetName()
        {
            return IExecuteWithSignature<Java.Lang.String>("getName", "()Ljava/lang/String;");
        }

        #endregion

        #region Nested classes
        #region Adaptation
        public partial class Adaptation
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Adaptation.html#BRADFORD"/>
            /// </summary>
            public static Android.Graphics.ColorSpace.Adaptation BRADFORD { get { if (!_BRADFORDReady) { _BRADFORDContent = SGetField<Android.Graphics.ColorSpace.Adaptation>(LocalBridgeClazz, "BRADFORD"); _BRADFORDReady = true; } return _BRADFORDContent; } }
            private static Android.Graphics.ColorSpace.Adaptation _BRADFORDContent = default;
            private static bool _BRADFORDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Adaptation.html#CIECAT02"/>
            /// </summary>
            public static Android.Graphics.ColorSpace.Adaptation CIECAT02 { get { if (!_CIECAT02Ready) { _CIECAT02Content = SGetField<Android.Graphics.ColorSpace.Adaptation>(LocalBridgeClazz, "CIECAT02"); _CIECAT02Ready = true; } return _CIECAT02Content; } }
            private static Android.Graphics.ColorSpace.Adaptation _CIECAT02Content = default;
            private static bool _CIECAT02Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Adaptation.html#VON_KRIES"/>
            /// </summary>
            public static Android.Graphics.ColorSpace.Adaptation VON_KRIES { get { if (!_VON_KRIESReady) { _VON_KRIESContent = SGetField<Android.Graphics.ColorSpace.Adaptation>(LocalBridgeClazz, "VON_KRIES"); _VON_KRIESReady = true; } return _VON_KRIESContent; } }
            private static Android.Graphics.ColorSpace.Adaptation _VON_KRIESContent = default;
            private static bool _VON_KRIESReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Adaptation.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Graphics.ColorSpace.Adaptation"/></returns>
            public static Android.Graphics.ColorSpace.Adaptation ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Graphics.ColorSpace.Adaptation>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/graphics/ColorSpace$Adaptation;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Adaptation.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.Graphics.ColorSpace.Adaptation"/></returns>
            public static Android.Graphics.ColorSpace.Adaptation[] Values()
            {
                return SExecuteWithSignatureArray<Android.Graphics.ColorSpace.Adaptation>(LocalBridgeClazz, "values", "()[Landroid/graphics/ColorSpace$Adaptation;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Connector
        public partial class Connector
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Connector.html#getDestination()"/>
            /// </summary>
            /// <returns><see cref="Android.Graphics.ColorSpace"/></returns>
            public Android.Graphics.ColorSpace GetDestination()
            {
                return IExecuteWithSignature<Android.Graphics.ColorSpace>("getDestination", "()Landroid/graphics/ColorSpace;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Connector.html#getSource()"/>
            /// </summary>
            /// <returns><see cref="Android.Graphics.ColorSpace"/></returns>
            public Android.Graphics.ColorSpace GetSource()
            {
                return IExecuteWithSignature<Android.Graphics.ColorSpace>("getSource", "()Landroid/graphics/ColorSpace;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Connector.html#getRenderIntent()"/>
            /// </summary>
            /// <returns><see cref="Android.Graphics.ColorSpace.RenderIntent"/></returns>
            public Android.Graphics.ColorSpace.RenderIntent GetRenderIntent()
            {
                return IExecuteWithSignature<Android.Graphics.ColorSpace.RenderIntent>("getRenderIntent", "()Landroid/graphics/ColorSpace$RenderIntent;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Connector.html#transform(float,float,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            /// <param name="arg1"><see cref="float"/></param>
            /// <param name="arg2"><see cref="float"/></param>
            /// <returns><see cref="float"/></returns>
            public float[] Transform(float arg0, float arg1, float arg2)
            {
                return IExecuteArray<float>("transform", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Connector.html#transform(float[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            /// <returns><see cref="float"/></returns>
            public float[] Transform(float[] arg0)
            {
                return IExecuteWithSignatureArray<float>("transform", "([F)[F", new object[] { arg0 });
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Model
        public partial class Model
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Model.html#CMYK"/>
            /// </summary>
            public static Android.Graphics.ColorSpace.Model CMYK { get { if (!_CMYKReady) { _CMYKContent = SGetField<Android.Graphics.ColorSpace.Model>(LocalBridgeClazz, "CMYK"); _CMYKReady = true; } return _CMYKContent; } }
            private static Android.Graphics.ColorSpace.Model _CMYKContent = default;
            private static bool _CMYKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Model.html#LAB"/>
            /// </summary>
            public static Android.Graphics.ColorSpace.Model LAB { get { if (!_LABReady) { _LABContent = SGetField<Android.Graphics.ColorSpace.Model>(LocalBridgeClazz, "LAB"); _LABReady = true; } return _LABContent; } }
            private static Android.Graphics.ColorSpace.Model _LABContent = default;
            private static bool _LABReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Model.html#RGB"/>
            /// </summary>
            public static Android.Graphics.ColorSpace.Model RGB { get { if (!_RGBReady) { _RGBContent = SGetField<Android.Graphics.ColorSpace.Model>(LocalBridgeClazz, "RGB"); _RGBReady = true; } return _RGBContent; } }
            private static Android.Graphics.ColorSpace.Model _RGBContent = default;
            private static bool _RGBReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Model.html#XYZ"/>
            /// </summary>
            public static Android.Graphics.ColorSpace.Model XYZ { get { if (!_XYZReady) { _XYZContent = SGetField<Android.Graphics.ColorSpace.Model>(LocalBridgeClazz, "XYZ"); _XYZReady = true; } return _XYZContent; } }
            private static Android.Graphics.ColorSpace.Model _XYZContent = default;
            private static bool _XYZReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Model.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Graphics.ColorSpace.Model"/></returns>
            public static Android.Graphics.ColorSpace.Model ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Graphics.ColorSpace.Model>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/graphics/ColorSpace$Model;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Model.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.Graphics.ColorSpace.Model"/></returns>
            public static Android.Graphics.ColorSpace.Model[] Values()
            {
                return SExecuteWithSignatureArray<Android.Graphics.ColorSpace.Model>(LocalBridgeClazz, "values", "()[Landroid/graphics/ColorSpace$Model;");
            }

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Model.html#getComponentCount()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetComponentCount()
            {
                return IExecuteWithSignature<int>("getComponentCount", "()I");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Named
        public partial class Named
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Named.html#ACES"/>
            /// </summary>
            public static Android.Graphics.ColorSpace.Named ACES { get { if (!_ACESReady) { _ACESContent = SGetField<Android.Graphics.ColorSpace.Named>(LocalBridgeClazz, "ACES"); _ACESReady = true; } return _ACESContent; } }
            private static Android.Graphics.ColorSpace.Named _ACESContent = default;
            private static bool _ACESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Named.html#ACESCG"/>
            /// </summary>
            public static Android.Graphics.ColorSpace.Named ACESCG { get { if (!_ACESCGReady) { _ACESCGContent = SGetField<Android.Graphics.ColorSpace.Named>(LocalBridgeClazz, "ACESCG"); _ACESCGReady = true; } return _ACESCGContent; } }
            private static Android.Graphics.ColorSpace.Named _ACESCGContent = default;
            private static bool _ACESCGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Named.html#ADOBE_RGB"/>
            /// </summary>
            public static Android.Graphics.ColorSpace.Named ADOBE_RGB { get { if (!_ADOBE_RGBReady) { _ADOBE_RGBContent = SGetField<Android.Graphics.ColorSpace.Named>(LocalBridgeClazz, "ADOBE_RGB"); _ADOBE_RGBReady = true; } return _ADOBE_RGBContent; } }
            private static Android.Graphics.ColorSpace.Named _ADOBE_RGBContent = default;
            private static bool _ADOBE_RGBReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Named.html#BT2020"/>
            /// </summary>
            public static Android.Graphics.ColorSpace.Named BT2020 { get { if (!_BT2020Ready) { _BT2020Content = SGetField<Android.Graphics.ColorSpace.Named>(LocalBridgeClazz, "BT2020"); _BT2020Ready = true; } return _BT2020Content; } }
            private static Android.Graphics.ColorSpace.Named _BT2020Content = default;
            private static bool _BT2020Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Named.html#BT2020_HLG"/>
            /// </summary>
            public static Android.Graphics.ColorSpace.Named BT2020_HLG { get { if (!_BT2020_HLGReady) { _BT2020_HLGContent = SGetField<Android.Graphics.ColorSpace.Named>(LocalBridgeClazz, "BT2020_HLG"); _BT2020_HLGReady = true; } return _BT2020_HLGContent; } }
            private static Android.Graphics.ColorSpace.Named _BT2020_HLGContent = default;
            private static bool _BT2020_HLGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Named.html#BT2020_PQ"/>
            /// </summary>
            public static Android.Graphics.ColorSpace.Named BT2020_PQ { get { if (!_BT2020_PQReady) { _BT2020_PQContent = SGetField<Android.Graphics.ColorSpace.Named>(LocalBridgeClazz, "BT2020_PQ"); _BT2020_PQReady = true; } return _BT2020_PQContent; } }
            private static Android.Graphics.ColorSpace.Named _BT2020_PQContent = default;
            private static bool _BT2020_PQReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Named.html#BT709"/>
            /// </summary>
            public static Android.Graphics.ColorSpace.Named BT709 { get { if (!_BT709Ready) { _BT709Content = SGetField<Android.Graphics.ColorSpace.Named>(LocalBridgeClazz, "BT709"); _BT709Ready = true; } return _BT709Content; } }
            private static Android.Graphics.ColorSpace.Named _BT709Content = default;
            private static bool _BT709Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Named.html#CIE_LAB"/>
            /// </summary>
            public static Android.Graphics.ColorSpace.Named CIE_LAB { get { if (!_CIE_LABReady) { _CIE_LABContent = SGetField<Android.Graphics.ColorSpace.Named>(LocalBridgeClazz, "CIE_LAB"); _CIE_LABReady = true; } return _CIE_LABContent; } }
            private static Android.Graphics.ColorSpace.Named _CIE_LABContent = default;
            private static bool _CIE_LABReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Named.html#CIE_XYZ"/>
            /// </summary>
            public static Android.Graphics.ColorSpace.Named CIE_XYZ { get { if (!_CIE_XYZReady) { _CIE_XYZContent = SGetField<Android.Graphics.ColorSpace.Named>(LocalBridgeClazz, "CIE_XYZ"); _CIE_XYZReady = true; } return _CIE_XYZContent; } }
            private static Android.Graphics.ColorSpace.Named _CIE_XYZContent = default;
            private static bool _CIE_XYZReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Named.html#DCI_P3"/>
            /// </summary>
            public static Android.Graphics.ColorSpace.Named DCI_P3 { get { if (!_DCI_P3Ready) { _DCI_P3Content = SGetField<Android.Graphics.ColorSpace.Named>(LocalBridgeClazz, "DCI_P3"); _DCI_P3Ready = true; } return _DCI_P3Content; } }
            private static Android.Graphics.ColorSpace.Named _DCI_P3Content = default;
            private static bool _DCI_P3Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Named.html#DISPLAY_P3"/>
            /// </summary>
            public static Android.Graphics.ColorSpace.Named DISPLAY_P3 { get { if (!_DISPLAY_P3Ready) { _DISPLAY_P3Content = SGetField<Android.Graphics.ColorSpace.Named>(LocalBridgeClazz, "DISPLAY_P3"); _DISPLAY_P3Ready = true; } return _DISPLAY_P3Content; } }
            private static Android.Graphics.ColorSpace.Named _DISPLAY_P3Content = default;
            private static bool _DISPLAY_P3Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Named.html#EXTENDED_SRGB"/>
            /// </summary>
            public static Android.Graphics.ColorSpace.Named EXTENDED_SRGB { get { if (!_EXTENDED_SRGBReady) { _EXTENDED_SRGBContent = SGetField<Android.Graphics.ColorSpace.Named>(LocalBridgeClazz, "EXTENDED_SRGB"); _EXTENDED_SRGBReady = true; } return _EXTENDED_SRGBContent; } }
            private static Android.Graphics.ColorSpace.Named _EXTENDED_SRGBContent = default;
            private static bool _EXTENDED_SRGBReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Named.html#LINEAR_EXTENDED_SRGB"/>
            /// </summary>
            public static Android.Graphics.ColorSpace.Named LINEAR_EXTENDED_SRGB { get { if (!_LINEAR_EXTENDED_SRGBReady) { _LINEAR_EXTENDED_SRGBContent = SGetField<Android.Graphics.ColorSpace.Named>(LocalBridgeClazz, "LINEAR_EXTENDED_SRGB"); _LINEAR_EXTENDED_SRGBReady = true; } return _LINEAR_EXTENDED_SRGBContent; } }
            private static Android.Graphics.ColorSpace.Named _LINEAR_EXTENDED_SRGBContent = default;
            private static bool _LINEAR_EXTENDED_SRGBReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Named.html#LINEAR_SRGB"/>
            /// </summary>
            public static Android.Graphics.ColorSpace.Named LINEAR_SRGB { get { if (!_LINEAR_SRGBReady) { _LINEAR_SRGBContent = SGetField<Android.Graphics.ColorSpace.Named>(LocalBridgeClazz, "LINEAR_SRGB"); _LINEAR_SRGBReady = true; } return _LINEAR_SRGBContent; } }
            private static Android.Graphics.ColorSpace.Named _LINEAR_SRGBContent = default;
            private static bool _LINEAR_SRGBReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Named.html#NTSC_1953"/>
            /// </summary>
            public static Android.Graphics.ColorSpace.Named NTSC_1953 { get { if (!_NTSC_1953Ready) { _NTSC_1953Content = SGetField<Android.Graphics.ColorSpace.Named>(LocalBridgeClazz, "NTSC_1953"); _NTSC_1953Ready = true; } return _NTSC_1953Content; } }
            private static Android.Graphics.ColorSpace.Named _NTSC_1953Content = default;
            private static bool _NTSC_1953Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Named.html#PRO_PHOTO_RGB"/>
            /// </summary>
            public static Android.Graphics.ColorSpace.Named PRO_PHOTO_RGB { get { if (!_PRO_PHOTO_RGBReady) { _PRO_PHOTO_RGBContent = SGetField<Android.Graphics.ColorSpace.Named>(LocalBridgeClazz, "PRO_PHOTO_RGB"); _PRO_PHOTO_RGBReady = true; } return _PRO_PHOTO_RGBContent; } }
            private static Android.Graphics.ColorSpace.Named _PRO_PHOTO_RGBContent = default;
            private static bool _PRO_PHOTO_RGBReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Named.html#SMPTE_C"/>
            /// </summary>
            public static Android.Graphics.ColorSpace.Named SMPTE_C { get { if (!_SMPTE_CReady) { _SMPTE_CContent = SGetField<Android.Graphics.ColorSpace.Named>(LocalBridgeClazz, "SMPTE_C"); _SMPTE_CReady = true; } return _SMPTE_CContent; } }
            private static Android.Graphics.ColorSpace.Named _SMPTE_CContent = default;
            private static bool _SMPTE_CReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Named.html#SRGB"/>
            /// </summary>
            public static Android.Graphics.ColorSpace.Named SRGB { get { if (!_SRGBReady) { _SRGBContent = SGetField<Android.Graphics.ColorSpace.Named>(LocalBridgeClazz, "SRGB"); _SRGBReady = true; } return _SRGBContent; } }
            private static Android.Graphics.ColorSpace.Named _SRGBContent = default;
            private static bool _SRGBReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Named.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Graphics.ColorSpace.Named"/></returns>
            public static Android.Graphics.ColorSpace.Named ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Graphics.ColorSpace.Named>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/graphics/ColorSpace$Named;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Named.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.Graphics.ColorSpace.Named"/></returns>
            public static Android.Graphics.ColorSpace.Named[] Values()
            {
                return SExecuteWithSignatureArray<Android.Graphics.ColorSpace.Named>(LocalBridgeClazz, "values", "()[Landroid/graphics/ColorSpace$Named;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region RenderIntent
        public partial class RenderIntent
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.RenderIntent.html#ABSOLUTE"/>
            /// </summary>
            public static Android.Graphics.ColorSpace.RenderIntent ABSOLUTE { get { if (!_ABSOLUTEReady) { _ABSOLUTEContent = SGetField<Android.Graphics.ColorSpace.RenderIntent>(LocalBridgeClazz, "ABSOLUTE"); _ABSOLUTEReady = true; } return _ABSOLUTEContent; } }
            private static Android.Graphics.ColorSpace.RenderIntent _ABSOLUTEContent = default;
            private static bool _ABSOLUTEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.RenderIntent.html#PERCEPTUAL"/>
            /// </summary>
            public static Android.Graphics.ColorSpace.RenderIntent PERCEPTUAL { get { if (!_PERCEPTUALReady) { _PERCEPTUALContent = SGetField<Android.Graphics.ColorSpace.RenderIntent>(LocalBridgeClazz, "PERCEPTUAL"); _PERCEPTUALReady = true; } return _PERCEPTUALContent; } }
            private static Android.Graphics.ColorSpace.RenderIntent _PERCEPTUALContent = default;
            private static bool _PERCEPTUALReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.RenderIntent.html#RELATIVE"/>
            /// </summary>
            public static Android.Graphics.ColorSpace.RenderIntent RELATIVE { get { if (!_RELATIVEReady) { _RELATIVEContent = SGetField<Android.Graphics.ColorSpace.RenderIntent>(LocalBridgeClazz, "RELATIVE"); _RELATIVEReady = true; } return _RELATIVEContent; } }
            private static Android.Graphics.ColorSpace.RenderIntent _RELATIVEContent = default;
            private static bool _RELATIVEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.RenderIntent.html#SATURATION"/>
            /// </summary>
            public static Android.Graphics.ColorSpace.RenderIntent SATURATION { get { if (!_SATURATIONReady) { _SATURATIONContent = SGetField<Android.Graphics.ColorSpace.RenderIntent>(LocalBridgeClazz, "SATURATION"); _SATURATIONReady = true; } return _SATURATIONContent; } }
            private static Android.Graphics.ColorSpace.RenderIntent _SATURATIONContent = default;
            private static bool _SATURATIONReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.RenderIntent.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Graphics.ColorSpace.RenderIntent"/></returns>
            public static Android.Graphics.ColorSpace.RenderIntent ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Graphics.ColorSpace.RenderIntent>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/graphics/ColorSpace$RenderIntent;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.RenderIntent.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.Graphics.ColorSpace.RenderIntent"/></returns>
            public static Android.Graphics.ColorSpace.RenderIntent[] Values()
            {
                return SExecuteWithSignatureArray<Android.Graphics.ColorSpace.RenderIntent>(LocalBridgeClazz, "values", "()[Landroid/graphics/ColorSpace$RenderIntent;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Rgb
        public partial class Rgb
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#%3Cinit%3E(java.lang.String,float[],android.graphics.ColorSpace.Rgb.TransferParameters)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="float"/></param>
            /// <param name="arg2"><see cref="Android.Graphics.ColorSpace.Rgb.TransferParameters"/></param>
            public Rgb(Java.Lang.String arg0, float[] arg1, Android.Graphics.ColorSpace.Rgb.TransferParameters arg2)
                : base(arg0, arg1, arg2)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#%3Cinit%3E(java.lang.String,float[],double)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="float"/></param>
            /// <param name="arg2"><see cref="double"/></param>
            public Rgb(Java.Lang.String arg0, float[] arg1, double arg2)
                : base(arg0, arg1, arg2)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#%3Cinit%3E(java.lang.String,float[],float[],android.graphics.ColorSpace.Rgb.TransferParameters)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="float"/></param>
            /// <param name="arg2"><see cref="float"/></param>
            /// <param name="arg3"><see cref="Android.Graphics.ColorSpace.Rgb.TransferParameters"/></param>
            public Rgb(Java.Lang.String arg0, float[] arg1, float[] arg2, Android.Graphics.ColorSpace.Rgb.TransferParameters arg3)
                : base(arg0, arg1, arg2, arg3)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#%3Cinit%3E(java.lang.String,float[],float[],double)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="float"/></param>
            /// <param name="arg2"><see cref="float"/></param>
            /// <param name="arg3"><see cref="double"/></param>
            public Rgb(Java.Lang.String arg0, float[] arg1, float[] arg2, double arg3)
                : base(arg0, arg1, arg2, arg3)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#%3Cinit%3E(java.lang.String,float[],float[],java.util.function.DoubleUnaryOperator,java.util.function.DoubleUnaryOperator,float,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="float"/></param>
            /// <param name="arg2"><see cref="float"/></param>
            /// <param name="arg3"><see cref="Java.Util.Function.DoubleUnaryOperator"/></param>
            /// <param name="arg4"><see cref="Java.Util.Function.DoubleUnaryOperator"/></param>
            /// <param name="arg5"><see cref="float"/></param>
            /// <param name="arg6"><see cref="float"/></param>
            public Rgb(Java.Lang.String arg0, float[] arg1, float[] arg2, Java.Util.Function.DoubleUnaryOperator arg3, Java.Util.Function.DoubleUnaryOperator arg4, float arg5, float arg6)
                : base(arg0, arg1, arg2, arg3, arg4, arg5, arg6)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#%3Cinit%3E(java.lang.String,float[],java.util.function.DoubleUnaryOperator,java.util.function.DoubleUnaryOperator)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="float"/></param>
            /// <param name="arg2"><see cref="Java.Util.Function.DoubleUnaryOperator"/></param>
            /// <param name="arg3"><see cref="Java.Util.Function.DoubleUnaryOperator"/></param>
            public Rgb(Java.Lang.String arg0, float[] arg1, Java.Util.Function.DoubleUnaryOperator arg2, Java.Util.Function.DoubleUnaryOperator arg3)
                : base(arg0, arg1, arg2, arg3)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#getTransferParameters()"/>
            /// </summary>
            /// <returns><see cref="Android.Graphics.ColorSpace.Rgb.TransferParameters"/></returns>
            public Android.Graphics.ColorSpace.Rgb.TransferParameters GetTransferParameters()
            {
                return IExecuteWithSignature<Android.Graphics.ColorSpace.Rgb.TransferParameters>("getTransferParameters", "()Landroid/graphics/ColorSpace$Rgb$TransferParameters;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#fromLinear(float,float,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            /// <param name="arg1"><see cref="float"/></param>
            /// <param name="arg2"><see cref="float"/></param>
            /// <returns><see cref="float"/></returns>
            public float[] FromLinear(float arg0, float arg1, float arg2)
            {
                return IExecuteArray<float>("fromLinear", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#fromLinear(float[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            /// <returns><see cref="float"/></returns>
            public float[] FromLinear(float[] arg0)
            {
                return IExecuteWithSignatureArray<float>("fromLinear", "([F)[F", new object[] { arg0 });
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#getInverseTransform()"/>
            /// </summary>
            /// <returns><see cref="float"/></returns>
            public float[] GetInverseTransform()
            {
                return IExecuteWithSignatureArray<float>("getInverseTransform", "()[F");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#getInverseTransform(float[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            /// <returns><see cref="float"/></returns>
            public float[] GetInverseTransform(float[] arg0)
            {
                return IExecuteWithSignatureArray<float>("getInverseTransform", "([F)[F", new object[] { arg0 });
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#getPrimaries()"/>
            /// </summary>
            /// <returns><see cref="float"/></returns>
            public float[] GetPrimaries()
            {
                return IExecuteWithSignatureArray<float>("getPrimaries", "()[F");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#getPrimaries(float[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            /// <returns><see cref="float"/></returns>
            public float[] GetPrimaries(float[] arg0)
            {
                return IExecuteWithSignatureArray<float>("getPrimaries", "([F)[F", new object[] { arg0 });
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#getTransform()"/>
            /// </summary>
            /// <returns><see cref="float"/></returns>
            public float[] GetTransform()
            {
                return IExecuteWithSignatureArray<float>("getTransform", "()[F");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#getTransform(float[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            /// <returns><see cref="float"/></returns>
            public float[] GetTransform(float[] arg0)
            {
                return IExecuteWithSignatureArray<float>("getTransform", "([F)[F", new object[] { arg0 });
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#getWhitePoint()"/>
            /// </summary>
            /// <returns><see cref="float"/></returns>
            public float[] GetWhitePoint()
            {
                return IExecuteWithSignatureArray<float>("getWhitePoint", "()[F");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#getWhitePoint(float[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            /// <returns><see cref="float"/></returns>
            public float[] GetWhitePoint(float[] arg0)
            {
                return IExecuteWithSignatureArray<float>("getWhitePoint", "([F)[F", new object[] { arg0 });
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#toLinear(float,float,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            /// <param name="arg1"><see cref="float"/></param>
            /// <param name="arg2"><see cref="float"/></param>
            /// <returns><see cref="float"/></returns>
            public float[] ToLinear(float arg0, float arg1, float arg2)
            {
                return IExecuteArray<float>("toLinear", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#toLinear(float[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            /// <returns><see cref="float"/></returns>
            public float[] ToLinear(float[] arg0)
            {
                return IExecuteWithSignatureArray<float>("toLinear", "([F)[F", new object[] { arg0 });
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#getEotf()"/>
            /// </summary>
            /// <returns><see cref="Java.Util.Function.DoubleUnaryOperator"/></returns>
            public Java.Util.Function.DoubleUnaryOperator GetEotf()
            {
                return IExecuteWithSignature<Java.Util.Function.DoubleUnaryOperator>("getEotf", "()Ljava/util/function/DoubleUnaryOperator;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#getEotf()"/>
            /// </summary>
            /// <returns><see cref="Java.Util.Function.DoubleUnaryOperator"/></returns>
            public Java.Util.Function.DoubleUnaryOperator GetEotfDirect()
            {
                return IExecuteWithSignature<Java.Util.Function.DoubleUnaryOperatorDirect, Java.Util.Function.DoubleUnaryOperator>("getEotf", "()Ljava/util/function/DoubleUnaryOperator;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#getOetf()"/>
            /// </summary>
            /// <returns><see cref="Java.Util.Function.DoubleUnaryOperator"/></returns>
            public Java.Util.Function.DoubleUnaryOperator GetOetf()
            {
                return IExecuteWithSignature<Java.Util.Function.DoubleUnaryOperator>("getOetf", "()Ljava/util/function/DoubleUnaryOperator;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.html#getOetf()"/>
            /// </summary>
            /// <returns><see cref="Java.Util.Function.DoubleUnaryOperator"/></returns>
            public Java.Util.Function.DoubleUnaryOperator GetOetfDirect()
            {
                return IExecuteWithSignature<Java.Util.Function.DoubleUnaryOperatorDirect, Java.Util.Function.DoubleUnaryOperator>("getOetf", "()Ljava/util/function/DoubleUnaryOperator;");
            }

            #endregion

            #region Nested classes
            #region TransferParameters
            public partial class TransferParameters
            {
                #region Constructors
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.TransferParameters.html#%3Cinit%3E(double,double,double,double,double,double,double)"/>
                /// </summary>
                /// <param name="arg0"><see cref="double"/></param>
                /// <param name="arg1"><see cref="double"/></param>
                /// <param name="arg2"><see cref="double"/></param>
                /// <param name="arg3"><see cref="double"/></param>
                /// <param name="arg4"><see cref="double"/></param>
                /// <param name="arg5"><see cref="double"/></param>
                /// <param name="arg6"><see cref="double"/></param>
                public TransferParameters(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6)
                    : base(arg0, arg1, arg2, arg3, arg4, arg5, arg6)
                {
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.TransferParameters.html#%3Cinit%3E(double,double,double,double,double)"/>
                /// </summary>
                /// <param name="arg0"><see cref="double"/></param>
                /// <param name="arg1"><see cref="double"/></param>
                /// <param name="arg2"><see cref="double"/></param>
                /// <param name="arg3"><see cref="double"/></param>
                /// <param name="arg4"><see cref="double"/></param>
                public TransferParameters(double arg0, double arg1, double arg2, double arg3, double arg4)
                    : base(arg0, arg1, arg2, arg3, arg4)
                {
                }

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.TransferParameters.html#a"/>
                /// </summary>
                public double a { get { if (!_aReady) { _aContent = IGetField<double>("a"); _aReady = true; } return _aContent; } }
                private double _aContent = default;
                private bool _aReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.TransferParameters.html#b"/>
                /// </summary>
                public double b { get { if (!_bReady) { _bContent = IGetField<double>("b"); _bReady = true; } return _bContent; } }
                private double _bContent = default;
                private bool _bReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.TransferParameters.html#c"/>
                /// </summary>
                public double c { get { if (!_cReady) { _cContent = IGetField<double>("c"); _cReady = true; } return _cContent; } }
                private double _cContent = default;
                private bool _cReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.TransferParameters.html#d"/>
                /// </summary>
                public double d { get { if (!_dReady) { _dContent = IGetField<double>("d"); _dReady = true; } return _dContent; } }
                private double _dContent = default;
                private bool _dReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.TransferParameters.html#e"/>
                /// </summary>
                public double e { get { if (!_eReady) { _eContent = IGetField<double>("e"); _eReady = true; } return _eContent; } }
                private double _eContent = default;
                private bool _eReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.TransferParameters.html#f"/>
                /// </summary>
                public double f { get { if (!_fReady) { _fContent = IGetField<double>("f"); _fReady = true; } return _fContent; } }
                private double _fContent = default;
                private bool _fReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/graphics/ColorSpace.Rgb.TransferParameters.html#g"/>
                /// </summary>
                public double g { get { if (!_gReady) { _gContent = IGetField<double>("g"); _gReady = true; } return _gContent; } }
                private double _gContent = default;
                private bool _gReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

        
            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
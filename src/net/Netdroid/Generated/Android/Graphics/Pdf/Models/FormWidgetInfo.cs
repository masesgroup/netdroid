/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Graphics.Pdf.Models
{
    #region FormWidgetInfo declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/graphics/pdf/models/FormWidgetInfo.html"/>
    /// </summary>
    public partial class FormWidgetInfo : Android.Os.Parcelable
    {
        const string _bridgeClassName = "android.graphics.pdf.models.FormWidgetInfo";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public FormWidgetInfo() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public FormWidgetInfo(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region Builder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/pdf/models/FormWidgetInfo.Builder.html"/>
        /// </summary>
        public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
        {
            const string _bridgeClassName = "android.graphics.pdf.models.FormWidgetInfo$Builder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Builder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Builder(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region FormWidgetInfo implementation
    public partial class FormWidgetInfo
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/pdf/models/FormWidgetInfo.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/pdf/models/FormWidgetInfo.html#WIDGET_TYPE_CHECKBOX"/>
        /// </summary>
        public static int WIDGET_TYPE_CHECKBOX { get { if (!_WIDGET_TYPE_CHECKBOXReady) { _WIDGET_TYPE_CHECKBOXContent = SGetField<int>(LocalBridgeClazz, "WIDGET_TYPE_CHECKBOX"); _WIDGET_TYPE_CHECKBOXReady = true; } return _WIDGET_TYPE_CHECKBOXContent; } }
        private static int _WIDGET_TYPE_CHECKBOXContent = default;
        private static bool _WIDGET_TYPE_CHECKBOXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/pdf/models/FormWidgetInfo.html#WIDGET_TYPE_COMBOBOX"/>
        /// </summary>
        public static int WIDGET_TYPE_COMBOBOX { get { if (!_WIDGET_TYPE_COMBOBOXReady) { _WIDGET_TYPE_COMBOBOXContent = SGetField<int>(LocalBridgeClazz, "WIDGET_TYPE_COMBOBOX"); _WIDGET_TYPE_COMBOBOXReady = true; } return _WIDGET_TYPE_COMBOBOXContent; } }
        private static int _WIDGET_TYPE_COMBOBOXContent = default;
        private static bool _WIDGET_TYPE_COMBOBOXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/pdf/models/FormWidgetInfo.html#WIDGET_TYPE_LISTBOX"/>
        /// </summary>
        public static int WIDGET_TYPE_LISTBOX { get { if (!_WIDGET_TYPE_LISTBOXReady) { _WIDGET_TYPE_LISTBOXContent = SGetField<int>(LocalBridgeClazz, "WIDGET_TYPE_LISTBOX"); _WIDGET_TYPE_LISTBOXReady = true; } return _WIDGET_TYPE_LISTBOXContent; } }
        private static int _WIDGET_TYPE_LISTBOXContent = default;
        private static bool _WIDGET_TYPE_LISTBOXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/pdf/models/FormWidgetInfo.html#WIDGET_TYPE_PUSHBUTTON"/>
        /// </summary>
        public static int WIDGET_TYPE_PUSHBUTTON { get { if (!_WIDGET_TYPE_PUSHBUTTONReady) { _WIDGET_TYPE_PUSHBUTTONContent = SGetField<int>(LocalBridgeClazz, "WIDGET_TYPE_PUSHBUTTON"); _WIDGET_TYPE_PUSHBUTTONReady = true; } return _WIDGET_TYPE_PUSHBUTTONContent; } }
        private static int _WIDGET_TYPE_PUSHBUTTONContent = default;
        private static bool _WIDGET_TYPE_PUSHBUTTONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/pdf/models/FormWidgetInfo.html#WIDGET_TYPE_RADIOBUTTON"/>
        /// </summary>
        public static int WIDGET_TYPE_RADIOBUTTON { get { if (!_WIDGET_TYPE_RADIOBUTTONReady) { _WIDGET_TYPE_RADIOBUTTONContent = SGetField<int>(LocalBridgeClazz, "WIDGET_TYPE_RADIOBUTTON"); _WIDGET_TYPE_RADIOBUTTONReady = true; } return _WIDGET_TYPE_RADIOBUTTONContent; } }
        private static int _WIDGET_TYPE_RADIOBUTTONContent = default;
        private static bool _WIDGET_TYPE_RADIOBUTTONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/pdf/models/FormWidgetInfo.html#WIDGET_TYPE_SIGNATURE"/>
        /// </summary>
        public static int WIDGET_TYPE_SIGNATURE { get { if (!_WIDGET_TYPE_SIGNATUREReady) { _WIDGET_TYPE_SIGNATUREContent = SGetField<int>(LocalBridgeClazz, "WIDGET_TYPE_SIGNATURE"); _WIDGET_TYPE_SIGNATUREReady = true; } return _WIDGET_TYPE_SIGNATUREContent; } }
        private static int _WIDGET_TYPE_SIGNATUREContent = default;
        private static bool _WIDGET_TYPE_SIGNATUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/pdf/models/FormWidgetInfo.html#WIDGET_TYPE_TEXTFIELD"/>
        /// </summary>
        public static int WIDGET_TYPE_TEXTFIELD { get { if (!_WIDGET_TYPE_TEXTFIELDReady) { _WIDGET_TYPE_TEXTFIELDContent = SGetField<int>(LocalBridgeClazz, "WIDGET_TYPE_TEXTFIELD"); _WIDGET_TYPE_TEXTFIELDReady = true; } return _WIDGET_TYPE_TEXTFIELDContent; } }
        private static int _WIDGET_TYPE_TEXTFIELDContent = default;
        private static bool _WIDGET_TYPE_TEXTFIELDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/pdf/models/FormWidgetInfo.html#WIDGET_TYPE_UNKNOWN"/>
        /// </summary>
        public static int WIDGET_TYPE_UNKNOWN { get { if (!_WIDGET_TYPE_UNKNOWNReady) { _WIDGET_TYPE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "WIDGET_TYPE_UNKNOWN"); _WIDGET_TYPE_UNKNOWNReady = true; } return _WIDGET_TYPE_UNKNOWNContent; } }
        private static int _WIDGET_TYPE_UNKNOWNContent = default;
        private static bool _WIDGET_TYPE_UNKNOWNReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/pdf/models/FormWidgetInfo.html#getWidgetRect()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Rect"/></returns>
        public Android.Graphics.Rect GetWidgetRect()
        {
            return IExecuteWithSignature<Android.Graphics.Rect>("getWidgetRect", "()Landroid/graphics/Rect;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/pdf/models/FormWidgetInfo.html#isEditableText()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsEditableText()
        {
            return IExecuteWithSignature<bool>("isEditableText", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/pdf/models/FormWidgetInfo.html#isMultiLineText()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsMultiLineText()
        {
            return IExecuteWithSignature<bool>("isMultiLineText", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/pdf/models/FormWidgetInfo.html#isMultiSelect()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsMultiSelect()
        {
            return IExecuteWithSignature<bool>("isMultiSelect", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/pdf/models/FormWidgetInfo.html#isReadOnly()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsReadOnly()
        {
            return IExecuteWithSignature<bool>("isReadOnly", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/pdf/models/FormWidgetInfo.html#getFontSize()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetFontSize()
        {
            return IExecuteWithSignature<float>("getFontSize", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/pdf/models/FormWidgetInfo.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/pdf/models/FormWidgetInfo.html#getMaxLength()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMaxLength()
        {
            return IExecuteWithSignature<int>("getMaxLength", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/pdf/models/FormWidgetInfo.html#getWidgetIndex()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetWidgetIndex()
        {
            return IExecuteWithSignature<int>("getWidgetIndex", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/pdf/models/FormWidgetInfo.html#getWidgetType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetWidgetType()
        {
            return IExecuteWithSignature<int>("getWidgetType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/pdf/models/FormWidgetInfo.html#getAccessibilityLabel()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetAccessibilityLabel()
        {
            return IExecuteWithSignature<Java.Lang.String>("getAccessibilityLabel", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/pdf/models/FormWidgetInfo.html#getTextValue()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetTextValue()
        {
            return IExecuteWithSignature<Java.Lang.String>("getTextValue", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/pdf/models/FormWidgetInfo.html#getListItems()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Graphics.Pdf.Models.ListItem> GetListItems()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Graphics.Pdf.Models.ListItem>>("getListItems", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/pdf/models/FormWidgetInfo.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecute("writeToParcel", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region Builder implementation
        public partial class Builder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/pdf/models/FormWidgetInfo.Builder.html#%3Cinit%3E(int,int,android.graphics.Rect,java.lang.String,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="Android.Graphics.Rect"/></param>
            /// <param name="arg3"><see cref="Java.Lang.String"/></param>
            /// <param name="arg4"><see cref="Java.Lang.String"/></param>
            public Builder(int arg0, int arg1, Android.Graphics.Rect arg2, Java.Lang.String arg3, Java.Lang.String arg4)
                : base(arg0, arg1, arg2, arg3, arg4)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/pdf/models/FormWidgetInfo.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Graphics.Pdf.Models.FormWidgetInfo"/></returns>
            public Android.Graphics.Pdf.Models.FormWidgetInfo Build()
            {
                return IExecuteWithSignature<Android.Graphics.Pdf.Models.FormWidgetInfo>("build", "()Landroid/graphics/pdf/models/FormWidgetInfo;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/pdf/models/FormWidgetInfo.Builder.html#setEditableText(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Graphics.Pdf.Models.FormWidgetInfo.Builder"/></returns>
            public Android.Graphics.Pdf.Models.FormWidgetInfo.Builder SetEditableText(bool arg0)
            {
                return IExecuteWithSignature<Android.Graphics.Pdf.Models.FormWidgetInfo.Builder>("setEditableText", "(Z)Landroid/graphics/pdf/models/FormWidgetInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/pdf/models/FormWidgetInfo.Builder.html#setFontSize(float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            /// <returns><see cref="Android.Graphics.Pdf.Models.FormWidgetInfo.Builder"/></returns>
            public Android.Graphics.Pdf.Models.FormWidgetInfo.Builder SetFontSize(float arg0)
            {
                return IExecuteWithSignature<Android.Graphics.Pdf.Models.FormWidgetInfo.Builder>("setFontSize", "(F)Landroid/graphics/pdf/models/FormWidgetInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/pdf/models/FormWidgetInfo.Builder.html#setListItems(java.util.List)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.List"/></param>
            /// <returns><see cref="Android.Graphics.Pdf.Models.FormWidgetInfo.Builder"/></returns>
            public Android.Graphics.Pdf.Models.FormWidgetInfo.Builder SetListItems(Java.Util.List<Android.Graphics.Pdf.Models.ListItem> arg0)
            {
                return IExecuteWithSignature<Android.Graphics.Pdf.Models.FormWidgetInfo.Builder>("setListItems", "(Ljava/util/List;)Landroid/graphics/pdf/models/FormWidgetInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/pdf/models/FormWidgetInfo.Builder.html#setMaxLength(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Graphics.Pdf.Models.FormWidgetInfo.Builder"/></returns>
            public Android.Graphics.Pdf.Models.FormWidgetInfo.Builder SetMaxLength(int arg0)
            {
                return IExecuteWithSignature<Android.Graphics.Pdf.Models.FormWidgetInfo.Builder>("setMaxLength", "(I)Landroid/graphics/pdf/models/FormWidgetInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/pdf/models/FormWidgetInfo.Builder.html#setMultiLineText(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Graphics.Pdf.Models.FormWidgetInfo.Builder"/></returns>
            public Android.Graphics.Pdf.Models.FormWidgetInfo.Builder SetMultiLineText(bool arg0)
            {
                return IExecuteWithSignature<Android.Graphics.Pdf.Models.FormWidgetInfo.Builder>("setMultiLineText", "(Z)Landroid/graphics/pdf/models/FormWidgetInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/pdf/models/FormWidgetInfo.Builder.html#setMultiSelect(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Graphics.Pdf.Models.FormWidgetInfo.Builder"/></returns>
            public Android.Graphics.Pdf.Models.FormWidgetInfo.Builder SetMultiSelect(bool arg0)
            {
                return IExecuteWithSignature<Android.Graphics.Pdf.Models.FormWidgetInfo.Builder>("setMultiSelect", "(Z)Landroid/graphics/pdf/models/FormWidgetInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/pdf/models/FormWidgetInfo.Builder.html#setReadOnly(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Graphics.Pdf.Models.FormWidgetInfo.Builder"/></returns>
            public Android.Graphics.Pdf.Models.FormWidgetInfo.Builder SetReadOnly(bool arg0)
            {
                return IExecuteWithSignature<Android.Graphics.Pdf.Models.FormWidgetInfo.Builder>("setReadOnly", "(Z)Landroid/graphics/pdf/models/FormWidgetInfo$Builder;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
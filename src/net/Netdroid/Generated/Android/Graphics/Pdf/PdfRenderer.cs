/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Graphics.Pdf
{
    #region PdfRenderer
    public partial class PdfRenderer
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/pdf/PdfRenderer.html#%3Cinit%3E(android.os.ParcelFileDescriptor)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.ParcelFileDescriptor"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public PdfRenderer(Android.Os.ParcelFileDescriptor arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/pdf/PdfRenderer.html#openPage(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Graphics.Pdf.PdfRenderer.Page"/></returns>
        public Android.Graphics.Pdf.PdfRenderer.Page OpenPage(int arg0)
        {
            return IExecuteWithSignature<Android.Graphics.Pdf.PdfRenderer.Page>("openPage", "(I)Landroid/graphics/pdf/PdfRenderer$Page;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/pdf/PdfRenderer.html#shouldScaleForPrinting()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool ShouldScaleForPrinting()
        {
            return IExecuteWithSignature<bool>("shouldScaleForPrinting", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/pdf/PdfRenderer.html#getPageCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetPageCount()
        {
            return IExecuteWithSignature<int>("getPageCount", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/pdf/PdfRenderer.html#close()"/>
        /// </summary>
        public void Close()
        {
            IExecuteWithSignature("close", "()V");
        }

        #endregion

        #region Nested classes
        #region Page
        public partial class Page
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/pdf/PdfRenderer.Page.html#RENDER_MODE_FOR_DISPLAY"/>
            /// </summary>
            public static int RENDER_MODE_FOR_DISPLAY { get { if (!_RENDER_MODE_FOR_DISPLAYReady) { _RENDER_MODE_FOR_DISPLAYContent = SGetField<int>(LocalBridgeClazz, "RENDER_MODE_FOR_DISPLAY"); _RENDER_MODE_FOR_DISPLAYReady = true; } return _RENDER_MODE_FOR_DISPLAYContent; } }
            private static int _RENDER_MODE_FOR_DISPLAYContent = default;
            private static bool _RENDER_MODE_FOR_DISPLAYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/pdf/PdfRenderer.Page.html#RENDER_MODE_FOR_PRINT"/>
            /// </summary>
            public static int RENDER_MODE_FOR_PRINT { get { if (!_RENDER_MODE_FOR_PRINTReady) { _RENDER_MODE_FOR_PRINTContent = SGetField<int>(LocalBridgeClazz, "RENDER_MODE_FOR_PRINT"); _RENDER_MODE_FOR_PRINTReady = true; } return _RENDER_MODE_FOR_PRINTContent; } }
            private static int _RENDER_MODE_FOR_PRINTContent = default;
            private static bool _RENDER_MODE_FOR_PRINTReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/pdf/PdfRenderer.Page.html#getHeight()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetHeight()
            {
                return IExecuteWithSignature<int>("getHeight", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/pdf/PdfRenderer.Page.html#getIndex()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetIndex()
            {
                return IExecuteWithSignature<int>("getIndex", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/pdf/PdfRenderer.Page.html#getWidth()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetWidth()
            {
                return IExecuteWithSignature<int>("getWidth", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/pdf/PdfRenderer.Page.html#close()"/>
            /// </summary>
            public void Close()
            {
                IExecuteWithSignature("close", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/pdf/PdfRenderer.Page.html#render(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Matrix,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.Bitmap"/></param>
            /// <param name="arg1"><see cref="Android.Graphics.Rect"/></param>
            /// <param name="arg2"><see cref="Android.Graphics.Matrix"/></param>
            /// <param name="arg3"><see cref="int"/></param>
            public void Render(Android.Graphics.Bitmap arg0, Android.Graphics.Rect arg1, Android.Graphics.Matrix arg2, int arg3)
            {
                IExecute("render", arg0, arg1, arg2, arg3);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
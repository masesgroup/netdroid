/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Graphics
{
    #region Bitmap declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html"/>
    /// </summary>
    public partial class Bitmap : Android.Os.Parcelable
    {
        const string _bridgeClassName = "android.graphics.Bitmap";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public Bitmap() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public Bitmap(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region CompressFormat declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.CompressFormat.html"/>
        /// </summary>
        public partial class CompressFormat : Java.Lang.Enum<Android.Graphics.Bitmap.CompressFormat>
        {
            const string _bridgeClassName = "android.graphics.Bitmap$CompressFormat";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public CompressFormat() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public CompressFormat(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region Config declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.Config.html"/>
        /// </summary>
        public partial class Config : Java.Lang.Enum<Android.Graphics.Bitmap.Config>
        {
            const string _bridgeClassName = "android.graphics.Bitmap$Config";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Config() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Config(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region Bitmap implementation
    public partial class Bitmap
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#DENSITY_NONE"/>
        /// </summary>
        public static int DENSITY_NONE { get { if (!_DENSITY_NONEReady) { _DENSITY_NONEContent = SGetField<int>(LocalBridgeClazz, "DENSITY_NONE"); _DENSITY_NONEReady = true; } return _DENSITY_NONEContent; } }
        private static int _DENSITY_NONEContent = default;
        private static bool _DENSITY_NONEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Bitmap"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="Android.Graphics.Matrix"/></param>
        /// <param name="arg6"><see cref="bool"/></param>
        /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
        public static Android.Graphics.Bitmap CreateBitmap(Android.Graphics.Bitmap arg0, int arg1, int arg2, int arg3, int arg4, Android.Graphics.Matrix arg5, bool arg6)
        {
            return SExecute<Android.Graphics.Bitmap>(LocalBridgeClazz, "createBitmap", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#createBitmap(android.graphics.Bitmap,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Bitmap"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
        public static Android.Graphics.Bitmap CreateBitmap(Android.Graphics.Bitmap arg0, int arg1, int arg2, int arg3, int arg4)
        {
            return SExecute<Android.Graphics.Bitmap>(LocalBridgeClazz, "createBitmap", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#createBitmap(android.graphics.Bitmap)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Bitmap"/></param>
        /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
        public static Android.Graphics.Bitmap CreateBitmap(Android.Graphics.Bitmap arg0)
        {
            return SExecuteWithSignature<Android.Graphics.Bitmap>(LocalBridgeClazz, "createBitmap", "(Landroid/graphics/Bitmap;)Landroid/graphics/Bitmap;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#createBitmap(android.graphics.Picture,int,int,android.graphics.Bitmap.Config)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Picture"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Android.Graphics.Bitmap.Config"/></param>
        /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
        public static Android.Graphics.Bitmap CreateBitmap(Android.Graphics.Picture arg0, int arg1, int arg2, Android.Graphics.Bitmap.Config arg3)
        {
            return SExecute<Android.Graphics.Bitmap>(LocalBridgeClazz, "createBitmap", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#createBitmap(android.graphics.Picture)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Picture"/></param>
        /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
        public static Android.Graphics.Bitmap CreateBitmap(Android.Graphics.Picture arg0)
        {
            return SExecuteWithSignature<Android.Graphics.Bitmap>(LocalBridgeClazz, "createBitmap", "(Landroid/graphics/Picture;)Landroid/graphics/Bitmap;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap.Config,boolean,android.graphics.ColorSpace)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Util.DisplayMetrics"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Android.Graphics.Bitmap.Config"/></param>
        /// <param name="arg4"><see cref="bool"/></param>
        /// <param name="arg5"><see cref="Android.Graphics.ColorSpace"/></param>
        /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
        public static Android.Graphics.Bitmap CreateBitmap(Android.Util.DisplayMetrics arg0, int arg1, int arg2, Android.Graphics.Bitmap.Config arg3, bool arg4, Android.Graphics.ColorSpace arg5)
        {
            return SExecute<Android.Graphics.Bitmap>(LocalBridgeClazz, "createBitmap", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap.Config,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Util.DisplayMetrics"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Android.Graphics.Bitmap.Config"/></param>
        /// <param name="arg4"><see cref="bool"/></param>
        /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
        public static Android.Graphics.Bitmap CreateBitmap(Android.Util.DisplayMetrics arg0, int arg1, int arg2, Android.Graphics.Bitmap.Config arg3, bool arg4)
        {
            return SExecute<Android.Graphics.Bitmap>(LocalBridgeClazz, "createBitmap", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap.Config)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Util.DisplayMetrics"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Android.Graphics.Bitmap.Config"/></param>
        /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
        public static Android.Graphics.Bitmap CreateBitmap(Android.Util.DisplayMetrics arg0, int arg1, int arg2, Android.Graphics.Bitmap.Config arg3)
        {
            return SExecute<Android.Graphics.Bitmap>(LocalBridgeClazz, "createBitmap", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#createBitmap(android.util.DisplayMetrics,int[],int,int,android.graphics.Bitmap.Config)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Util.DisplayMetrics"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="Android.Graphics.Bitmap.Config"/></param>
        /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
        public static Android.Graphics.Bitmap CreateBitmap(Android.Util.DisplayMetrics arg0, int[] arg1, int arg2, int arg3, Android.Graphics.Bitmap.Config arg4)
        {
            return SExecute<Android.Graphics.Bitmap>(LocalBridgeClazz, "createBitmap", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#createBitmap(android.util.DisplayMetrics,int[],int,int,int,int,android.graphics.Bitmap.Config)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Util.DisplayMetrics"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="Android.Graphics.Bitmap.Config"/></param>
        /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
        public static Android.Graphics.Bitmap CreateBitmap(Android.Util.DisplayMetrics arg0, int[] arg1, int arg2, int arg3, int arg4, int arg5, Android.Graphics.Bitmap.Config arg6)
        {
            return SExecute<Android.Graphics.Bitmap>(LocalBridgeClazz, "createBitmap", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#createBitmap(int,int,android.graphics.Bitmap.Config,boolean,android.graphics.ColorSpace)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.Bitmap.Config"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <param name="arg4"><see cref="Android.Graphics.ColorSpace"/></param>
        /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
        public static Android.Graphics.Bitmap CreateBitmap(int arg0, int arg1, Android.Graphics.Bitmap.Config arg2, bool arg3, Android.Graphics.ColorSpace arg4)
        {
            return SExecute<Android.Graphics.Bitmap>(LocalBridgeClazz, "createBitmap", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#createBitmap(int,int,android.graphics.Bitmap.Config,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.Bitmap.Config"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
        public static Android.Graphics.Bitmap CreateBitmap(int arg0, int arg1, Android.Graphics.Bitmap.Config arg2, bool arg3)
        {
            return SExecute<Android.Graphics.Bitmap>(LocalBridgeClazz, "createBitmap", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#createBitmap(int,int,android.graphics.Bitmap.Config)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.Bitmap.Config"/></param>
        /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
        public static Android.Graphics.Bitmap CreateBitmap(int arg0, int arg1, Android.Graphics.Bitmap.Config arg2)
        {
            return SExecute<Android.Graphics.Bitmap>(LocalBridgeClazz, "createBitmap", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#createBitmap(int[],int,int,android.graphics.Bitmap.Config)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Android.Graphics.Bitmap.Config"/></param>
        /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
        public static Android.Graphics.Bitmap CreateBitmap(int[] arg0, int arg1, int arg2, Android.Graphics.Bitmap.Config arg3)
        {
            return SExecute<Android.Graphics.Bitmap>(LocalBridgeClazz, "createBitmap", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#createBitmap(int[],int,int,int,int,android.graphics.Bitmap.Config)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="Android.Graphics.Bitmap.Config"/></param>
        /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
        public static Android.Graphics.Bitmap CreateBitmap(int[] arg0, int arg1, int arg2, int arg3, int arg4, Android.Graphics.Bitmap.Config arg5)
        {
            return SExecute<Android.Graphics.Bitmap>(LocalBridgeClazz, "createBitmap", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#createScaledBitmap(android.graphics.Bitmap,int,int,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Bitmap"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
        public static Android.Graphics.Bitmap CreateScaledBitmap(Android.Graphics.Bitmap arg0, int arg1, int arg2, bool arg3)
        {
            return SExecute<Android.Graphics.Bitmap>(LocalBridgeClazz, "createScaledBitmap", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#wrapHardwareBuffer(android.hardware.HardwareBuffer,android.graphics.ColorSpace)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Hardware.HardwareBuffer"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.ColorSpace"/></param>
        /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
        public static Android.Graphics.Bitmap WrapHardwareBuffer(Android.Hardware.HardwareBuffer arg0, Android.Graphics.ColorSpace arg1)
        {
            return SExecute<Android.Graphics.Bitmap>(LocalBridgeClazz, "wrapHardwareBuffer", arg0, arg1);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#asShared()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
        public Android.Graphics.Bitmap AsShared()
        {
            return IExecuteWithSignature<Android.Graphics.Bitmap>("asShared", "()Landroid/graphics/Bitmap;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#copy(android.graphics.Bitmap.Config,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Bitmap.Config"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
        public Android.Graphics.Bitmap Copy(Android.Graphics.Bitmap.Config arg0, bool arg1)
        {
            return IExecute<Android.Graphics.Bitmap>("copy", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#extractAlpha()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
        public Android.Graphics.Bitmap ExtractAlpha()
        {
            return IExecuteWithSignature<Android.Graphics.Bitmap>("extractAlpha", "()Landroid/graphics/Bitmap;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#extractAlpha(android.graphics.Paint,int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Paint"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
        public Android.Graphics.Bitmap ExtractAlpha(Android.Graphics.Paint arg0, int[] arg1)
        {
            return IExecute<Android.Graphics.Bitmap>("extractAlpha", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#getConfig()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Bitmap.Config"/></returns>
        public Android.Graphics.Bitmap.Config GetConfig()
        {
            return IExecuteWithSignature<Android.Graphics.Bitmap.Config>("getConfig", "()Landroid/graphics/Bitmap$Config;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#getColor(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.Graphics.Color"/></returns>
        public Android.Graphics.Color GetColor(int arg0, int arg1)
        {
            return IExecute<Android.Graphics.Color>("getColor", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#getColorSpace()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.ColorSpace"/></returns>
        public Android.Graphics.ColorSpace GetColorSpace()
        {
            return IExecuteWithSignature<Android.Graphics.ColorSpace>("getColorSpace", "()Landroid/graphics/ColorSpace;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#getGainmap()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Gainmap"/></returns>
        public Android.Graphics.Gainmap GetGainmap()
        {
            return IExecuteWithSignature<Android.Graphics.Gainmap>("getGainmap", "()Landroid/graphics/Gainmap;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#getHardwareBuffer()"/>
        /// </summary>
        /// <returns><see cref="Android.Hardware.HardwareBuffer"/></returns>
        public Android.Hardware.HardwareBuffer GetHardwareBuffer()
        {
            return IExecuteWithSignature<Android.Hardware.HardwareBuffer>("getHardwareBuffer", "()Landroid/hardware/HardwareBuffer;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#compress(android.graphics.Bitmap.CompressFormat,int,java.io.OutputStream)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Bitmap.CompressFormat"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Io.OutputStream"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Compress(Android.Graphics.Bitmap.CompressFormat arg0, int arg1, Java.Io.OutputStream arg2)
        {
            return IExecute<bool>("compress", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#hasAlpha()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasAlpha()
        {
            return IExecuteWithSignature<bool>("hasAlpha", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#hasGainmap()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasGainmap()
        {
            return IExecuteWithSignature<bool>("hasGainmap", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#hasMipMap()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasMipMap()
        {
            return IExecuteWithSignature<bool>("hasMipMap", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#isMutable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsMutable()
        {
            return IExecuteWithSignature<bool>("isMutable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#isPremultiplied()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsPremultiplied()
        {
            return IExecuteWithSignature<bool>("isPremultiplied", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#isRecycled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsRecycled()
        {
            return IExecuteWithSignature<bool>("isRecycled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#sameAs(android.graphics.Bitmap)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Bitmap"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SameAs(Android.Graphics.Bitmap arg0)
        {
            return IExecuteWithSignature<bool>("sameAs", "(Landroid/graphics/Bitmap;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#getNinePatchChunk()"/>
        /// </summary>
        /// <returns><see cref="byte"/></returns>
        public byte[] GetNinePatchChunk()
        {
            return IExecuteWithSignatureArray<byte>("getNinePatchChunk", "()[B");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#getAllocationByteCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetAllocationByteCount()
        {
            return IExecuteWithSignature<int>("getAllocationByteCount", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#getByteCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetByteCount()
        {
            return IExecuteWithSignature<int>("getByteCount", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#getDensity()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetDensity()
        {
            return IExecuteWithSignature<int>("getDensity", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#getGenerationId()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetGenerationId()
        {
            return IExecuteWithSignature<int>("getGenerationId", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#getHeight()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetHeight()
        {
            return IExecuteWithSignature<int>("getHeight", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#getPixel(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetPixel(int arg0, int arg1)
        {
            return IExecute<int>("getPixel", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#getRowBytes()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetRowBytes()
        {
            return IExecuteWithSignature<int>("getRowBytes", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#getScaledHeight(android.graphics.Canvas)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Canvas"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetScaledHeight(Android.Graphics.Canvas arg0)
        {
            return IExecuteWithSignature<int>("getScaledHeight", "(Landroid/graphics/Canvas;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#getScaledHeight(android.util.DisplayMetrics)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Util.DisplayMetrics"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetScaledHeight(Android.Util.DisplayMetrics arg0)
        {
            return IExecuteWithSignature<int>("getScaledHeight", "(Landroid/util/DisplayMetrics;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#getScaledHeight(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetScaledHeight(int arg0)
        {
            return IExecuteWithSignature<int>("getScaledHeight", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#getScaledWidth(android.graphics.Canvas)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Canvas"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetScaledWidth(Android.Graphics.Canvas arg0)
        {
            return IExecuteWithSignature<int>("getScaledWidth", "(Landroid/graphics/Canvas;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#getScaledWidth(android.util.DisplayMetrics)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Util.DisplayMetrics"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetScaledWidth(Android.Util.DisplayMetrics arg0)
        {
            return IExecuteWithSignature<int>("getScaledWidth", "(Landroid/util/DisplayMetrics;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#getScaledWidth(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetScaledWidth(int arg0)
        {
            return IExecuteWithSignature<int>("getScaledWidth", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#getWidth()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetWidth()
        {
            return IExecuteWithSignature<int>("getWidth", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#copyPixelsFromBuffer(java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.Buffer"/></param>
        public void CopyPixelsFromBuffer(Java.Nio.Buffer arg0)
        {
            IExecuteWithSignature("copyPixelsFromBuffer", "(Ljava/nio/Buffer;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#copyPixelsToBuffer(java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.Buffer"/></param>
        public void CopyPixelsToBuffer(Java.Nio.Buffer arg0)
        {
            IExecuteWithSignature("copyPixelsToBuffer", "(Ljava/nio/Buffer;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#eraseColor(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void EraseColor(int arg0)
        {
            IExecuteWithSignature("eraseColor", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#eraseColor(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        public void EraseColor(long arg0)
        {
            IExecuteWithSignature("eraseColor", "(J)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#getPixels(int[],int,int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        public void GetPixels(int[] arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6)
        {
            IExecute("getPixels", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#prepareToDraw()"/>
        /// </summary>
        public void PrepareToDraw()
        {
            IExecuteWithSignature("prepareToDraw", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#reconfigure(int,int,android.graphics.Bitmap.Config)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.Bitmap.Config"/></param>
        public void Reconfigure(int arg0, int arg1, Android.Graphics.Bitmap.Config arg2)
        {
            IExecute("reconfigure", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#recycle()"/>
        /// </summary>
        public void Recycle()
        {
            IExecuteWithSignature("recycle", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#setColorSpace(android.graphics.ColorSpace)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.ColorSpace"/></param>
        public void SetColorSpace(Android.Graphics.ColorSpace arg0)
        {
            IExecuteWithSignature("setColorSpace", "(Landroid/graphics/ColorSpace;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#setConfig(android.graphics.Bitmap.Config)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Bitmap.Config"/></param>
        public void SetConfig(Android.Graphics.Bitmap.Config arg0)
        {
            IExecuteWithSignature("setConfig", "(Landroid/graphics/Bitmap$Config;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#setDensity(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetDensity(int arg0)
        {
            IExecuteWithSignature("setDensity", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#setGainmap(android.graphics.Gainmap)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Gainmap"/></param>
        public void SetGainmap(Android.Graphics.Gainmap arg0)
        {
            IExecuteWithSignature("setGainmap", "(Landroid/graphics/Gainmap;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#setHasAlpha(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetHasAlpha(bool arg0)
        {
            IExecuteWithSignature("setHasAlpha", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#setHasMipMap(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetHasMipMap(bool arg0)
        {
            IExecuteWithSignature("setHasMipMap", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#setHeight(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetHeight(int arg0)
        {
            IExecuteWithSignature("setHeight", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#setPixel(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void SetPixel(int arg0, int arg1, int arg2)
        {
            IExecute("setPixel", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#setPixels(int[],int,int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        public void SetPixels(int[] arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6)
        {
            IExecute("setPixels", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#setPremultiplied(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetPremultiplied(bool arg0)
        {
            IExecuteWithSignature("setPremultiplied", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#setWidth(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetWidth(int arg0)
        {
            IExecuteWithSignature("setWidth", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecute("writeToParcel", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region CompressFormat implementation
        public partial class CompressFormat
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.CompressFormat.html#JPEG"/>
            /// </summary>
            public static Android.Graphics.Bitmap.CompressFormat JPEG { get { if (!_JPEGReady) { _JPEGContent = SGetField<Android.Graphics.Bitmap.CompressFormat>(LocalBridgeClazz, "JPEG"); _JPEGReady = true; } return _JPEGContent; } }
            private static Android.Graphics.Bitmap.CompressFormat _JPEGContent = default;
            private static bool _JPEGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.CompressFormat.html#PNG"/>
            /// </summary>
            public static Android.Graphics.Bitmap.CompressFormat PNG { get { if (!_PNGReady) { _PNGContent = SGetField<Android.Graphics.Bitmap.CompressFormat>(LocalBridgeClazz, "PNG"); _PNGReady = true; } return _PNGContent; } }
            private static Android.Graphics.Bitmap.CompressFormat _PNGContent = default;
            private static bool _PNGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.CompressFormat.html#WEBP"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.Graphics.Bitmap.CompressFormat WEBP { get { if (!_WEBPReady) { _WEBPContent = SGetField<Android.Graphics.Bitmap.CompressFormat>(LocalBridgeClazz, "WEBP"); _WEBPReady = true; } return _WEBPContent; } }
            private static Android.Graphics.Bitmap.CompressFormat _WEBPContent = default;
            private static bool _WEBPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.CompressFormat.html#WEBP_LOSSLESS"/>
            /// </summary>
            public static Android.Graphics.Bitmap.CompressFormat WEBP_LOSSLESS { get { if (!_WEBP_LOSSLESSReady) { _WEBP_LOSSLESSContent = SGetField<Android.Graphics.Bitmap.CompressFormat>(LocalBridgeClazz, "WEBP_LOSSLESS"); _WEBP_LOSSLESSReady = true; } return _WEBP_LOSSLESSContent; } }
            private static Android.Graphics.Bitmap.CompressFormat _WEBP_LOSSLESSContent = default;
            private static bool _WEBP_LOSSLESSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.CompressFormat.html#WEBP_LOSSY"/>
            /// </summary>
            public static Android.Graphics.Bitmap.CompressFormat WEBP_LOSSY { get { if (!_WEBP_LOSSYReady) { _WEBP_LOSSYContent = SGetField<Android.Graphics.Bitmap.CompressFormat>(LocalBridgeClazz, "WEBP_LOSSY"); _WEBP_LOSSYReady = true; } return _WEBP_LOSSYContent; } }
            private static Android.Graphics.Bitmap.CompressFormat _WEBP_LOSSYContent = default;
            private static bool _WEBP_LOSSYReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.CompressFormat.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Graphics.Bitmap.CompressFormat"/></returns>
            public static Android.Graphics.Bitmap.CompressFormat ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Graphics.Bitmap.CompressFormat>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/graphics/Bitmap$CompressFormat;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.CompressFormat.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.Graphics.Bitmap.CompressFormat"/></returns>
            public static Android.Graphics.Bitmap.CompressFormat[] Values()
            {
                return SExecuteWithSignatureArray<Android.Graphics.Bitmap.CompressFormat>(LocalBridgeClazz, "values", "()[Landroid/graphics/Bitmap$CompressFormat;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Config implementation
        public partial class Config
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.Config.html#ALPHA_8"/>
            /// </summary>
            public static Android.Graphics.Bitmap.Config ALPHA_8 { get { if (!_ALPHA_8Ready) { _ALPHA_8Content = SGetField<Android.Graphics.Bitmap.Config>(LocalBridgeClazz, "ALPHA_8"); _ALPHA_8Ready = true; } return _ALPHA_8Content; } }
            private static Android.Graphics.Bitmap.Config _ALPHA_8Content = default;
            private static bool _ALPHA_8Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.Config.html#ARGB_4444"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.Graphics.Bitmap.Config ARGB_4444 { get { if (!_ARGB_4444Ready) { _ARGB_4444Content = SGetField<Android.Graphics.Bitmap.Config>(LocalBridgeClazz, "ARGB_4444"); _ARGB_4444Ready = true; } return _ARGB_4444Content; } }
            private static Android.Graphics.Bitmap.Config _ARGB_4444Content = default;
            private static bool _ARGB_4444Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.Config.html#ARGB_8888"/>
            /// </summary>
            public static Android.Graphics.Bitmap.Config ARGB_8888 { get { if (!_ARGB_8888Ready) { _ARGB_8888Content = SGetField<Android.Graphics.Bitmap.Config>(LocalBridgeClazz, "ARGB_8888"); _ARGB_8888Ready = true; } return _ARGB_8888Content; } }
            private static Android.Graphics.Bitmap.Config _ARGB_8888Content = default;
            private static bool _ARGB_8888Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.Config.html#HARDWARE"/>
            /// </summary>
            public static Android.Graphics.Bitmap.Config HARDWARE { get { if (!_HARDWAREReady) { _HARDWAREContent = SGetField<Android.Graphics.Bitmap.Config>(LocalBridgeClazz, "HARDWARE"); _HARDWAREReady = true; } return _HARDWAREContent; } }
            private static Android.Graphics.Bitmap.Config _HARDWAREContent = default;
            private static bool _HARDWAREReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.Config.html#RGB_565"/>
            /// </summary>
            public static Android.Graphics.Bitmap.Config RGB_565 { get { if (!_RGB_565Ready) { _RGB_565Content = SGetField<Android.Graphics.Bitmap.Config>(LocalBridgeClazz, "RGB_565"); _RGB_565Ready = true; } return _RGB_565Content; } }
            private static Android.Graphics.Bitmap.Config _RGB_565Content = default;
            private static bool _RGB_565Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.Config.html#RGBA_1010102"/>
            /// </summary>
            public static Android.Graphics.Bitmap.Config RGBA_1010102 { get { if (!_RGBA_1010102Ready) { _RGBA_1010102Content = SGetField<Android.Graphics.Bitmap.Config>(LocalBridgeClazz, "RGBA_1010102"); _RGBA_1010102Ready = true; } return _RGBA_1010102Content; } }
            private static Android.Graphics.Bitmap.Config _RGBA_1010102Content = default;
            private static bool _RGBA_1010102Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.Config.html#RGBA_F16"/>
            /// </summary>
            public static Android.Graphics.Bitmap.Config RGBA_F16 { get { if (!_RGBA_F16Ready) { _RGBA_F16Content = SGetField<Android.Graphics.Bitmap.Config>(LocalBridgeClazz, "RGBA_F16"); _RGBA_F16Ready = true; } return _RGBA_F16Content; } }
            private static Android.Graphics.Bitmap.Config _RGBA_F16Content = default;
            private static bool _RGBA_F16Ready = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.Config.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Graphics.Bitmap.Config"/></returns>
            public static Android.Graphics.Bitmap.Config ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Graphics.Bitmap.Config>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/graphics/Bitmap$Config;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Bitmap.Config.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.Graphics.Bitmap.Config"/></returns>
            public static Android.Graphics.Bitmap.Config[] Values()
            {
                return SExecuteWithSignatureArray<Android.Graphics.Bitmap.Config>(LocalBridgeClazz, "values", "()[Landroid/graphics/Bitmap$Config;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Graphics.Text
{
    #region LineBreakConfig declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/graphics/text/LineBreakConfig.html"/>
    /// </summary>
    public partial class LineBreakConfig : Android.Os.Parcelable
    {
        const string _bridgeClassName = "android.graphics.text.LineBreakConfig";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public LineBreakConfig() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public LineBreakConfig(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region Builder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/text/LineBreakConfig.Builder.html"/>
        /// </summary>
        public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
        {
            const string _bridgeClassName = "android.graphics.text.LineBreakConfig$Builder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Builder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Builder(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region LineBreakConfig implementation
    public partial class LineBreakConfig
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/text/LineBreakConfig.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/text/LineBreakConfig.html#HYPHENATION_DISABLED"/>
        /// </summary>
        public static int HYPHENATION_DISABLED { get { if (!_HYPHENATION_DISABLEDReady) { _HYPHENATION_DISABLEDContent = SGetField<int>(LocalBridgeClazz, "HYPHENATION_DISABLED"); _HYPHENATION_DISABLEDReady = true; } return _HYPHENATION_DISABLEDContent; } }
        private static int _HYPHENATION_DISABLEDContent = default;
        private static bool _HYPHENATION_DISABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/text/LineBreakConfig.html#HYPHENATION_ENABLED"/>
        /// </summary>
        public static int HYPHENATION_ENABLED { get { if (!_HYPHENATION_ENABLEDReady) { _HYPHENATION_ENABLEDContent = SGetField<int>(LocalBridgeClazz, "HYPHENATION_ENABLED"); _HYPHENATION_ENABLEDReady = true; } return _HYPHENATION_ENABLEDContent; } }
        private static int _HYPHENATION_ENABLEDContent = default;
        private static bool _HYPHENATION_ENABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/text/LineBreakConfig.html#HYPHENATION_UNSPECIFIED"/>
        /// </summary>
        public static int HYPHENATION_UNSPECIFIED { get { if (!_HYPHENATION_UNSPECIFIEDReady) { _HYPHENATION_UNSPECIFIEDContent = SGetField<int>(LocalBridgeClazz, "HYPHENATION_UNSPECIFIED"); _HYPHENATION_UNSPECIFIEDReady = true; } return _HYPHENATION_UNSPECIFIEDContent; } }
        private static int _HYPHENATION_UNSPECIFIEDContent = default;
        private static bool _HYPHENATION_UNSPECIFIEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/text/LineBreakConfig.html#LINE_BREAK_STYLE_AUTO"/>
        /// </summary>
        public static int LINE_BREAK_STYLE_AUTO { get { if (!_LINE_BREAK_STYLE_AUTOReady) { _LINE_BREAK_STYLE_AUTOContent = SGetField<int>(LocalBridgeClazz, "LINE_BREAK_STYLE_AUTO"); _LINE_BREAK_STYLE_AUTOReady = true; } return _LINE_BREAK_STYLE_AUTOContent; } }
        private static int _LINE_BREAK_STYLE_AUTOContent = default;
        private static bool _LINE_BREAK_STYLE_AUTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/text/LineBreakConfig.html#LINE_BREAK_STYLE_LOOSE"/>
        /// </summary>
        public static int LINE_BREAK_STYLE_LOOSE { get { if (!_LINE_BREAK_STYLE_LOOSEReady) { _LINE_BREAK_STYLE_LOOSEContent = SGetField<int>(LocalBridgeClazz, "LINE_BREAK_STYLE_LOOSE"); _LINE_BREAK_STYLE_LOOSEReady = true; } return _LINE_BREAK_STYLE_LOOSEContent; } }
        private static int _LINE_BREAK_STYLE_LOOSEContent = default;
        private static bool _LINE_BREAK_STYLE_LOOSEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/text/LineBreakConfig.html#LINE_BREAK_STYLE_NO_BREAK"/>
        /// </summary>
        public static int LINE_BREAK_STYLE_NO_BREAK { get { if (!_LINE_BREAK_STYLE_NO_BREAKReady) { _LINE_BREAK_STYLE_NO_BREAKContent = SGetField<int>(LocalBridgeClazz, "LINE_BREAK_STYLE_NO_BREAK"); _LINE_BREAK_STYLE_NO_BREAKReady = true; } return _LINE_BREAK_STYLE_NO_BREAKContent; } }
        private static int _LINE_BREAK_STYLE_NO_BREAKContent = default;
        private static bool _LINE_BREAK_STYLE_NO_BREAKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/text/LineBreakConfig.html#LINE_BREAK_STYLE_NONE"/>
        /// </summary>
        public static int LINE_BREAK_STYLE_NONE { get { if (!_LINE_BREAK_STYLE_NONEReady) { _LINE_BREAK_STYLE_NONEContent = SGetField<int>(LocalBridgeClazz, "LINE_BREAK_STYLE_NONE"); _LINE_BREAK_STYLE_NONEReady = true; } return _LINE_BREAK_STYLE_NONEContent; } }
        private static int _LINE_BREAK_STYLE_NONEContent = default;
        private static bool _LINE_BREAK_STYLE_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/text/LineBreakConfig.html#LINE_BREAK_STYLE_NORMAL"/>
        /// </summary>
        public static int LINE_BREAK_STYLE_NORMAL { get { if (!_LINE_BREAK_STYLE_NORMALReady) { _LINE_BREAK_STYLE_NORMALContent = SGetField<int>(LocalBridgeClazz, "LINE_BREAK_STYLE_NORMAL"); _LINE_BREAK_STYLE_NORMALReady = true; } return _LINE_BREAK_STYLE_NORMALContent; } }
        private static int _LINE_BREAK_STYLE_NORMALContent = default;
        private static bool _LINE_BREAK_STYLE_NORMALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/text/LineBreakConfig.html#LINE_BREAK_STYLE_STRICT"/>
        /// </summary>
        public static int LINE_BREAK_STYLE_STRICT { get { if (!_LINE_BREAK_STYLE_STRICTReady) { _LINE_BREAK_STYLE_STRICTContent = SGetField<int>(LocalBridgeClazz, "LINE_BREAK_STYLE_STRICT"); _LINE_BREAK_STYLE_STRICTReady = true; } return _LINE_BREAK_STYLE_STRICTContent; } }
        private static int _LINE_BREAK_STYLE_STRICTContent = default;
        private static bool _LINE_BREAK_STYLE_STRICTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/text/LineBreakConfig.html#LINE_BREAK_STYLE_UNSPECIFIED"/>
        /// </summary>
        public static int LINE_BREAK_STYLE_UNSPECIFIED { get { if (!_LINE_BREAK_STYLE_UNSPECIFIEDReady) { _LINE_BREAK_STYLE_UNSPECIFIEDContent = SGetField<int>(LocalBridgeClazz, "LINE_BREAK_STYLE_UNSPECIFIED"); _LINE_BREAK_STYLE_UNSPECIFIEDReady = true; } return _LINE_BREAK_STYLE_UNSPECIFIEDContent; } }
        private static int _LINE_BREAK_STYLE_UNSPECIFIEDContent = default;
        private static bool _LINE_BREAK_STYLE_UNSPECIFIEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/text/LineBreakConfig.html#LINE_BREAK_WORD_STYLE_AUTO"/>
        /// </summary>
        public static int LINE_BREAK_WORD_STYLE_AUTO { get { if (!_LINE_BREAK_WORD_STYLE_AUTOReady) { _LINE_BREAK_WORD_STYLE_AUTOContent = SGetField<int>(LocalBridgeClazz, "LINE_BREAK_WORD_STYLE_AUTO"); _LINE_BREAK_WORD_STYLE_AUTOReady = true; } return _LINE_BREAK_WORD_STYLE_AUTOContent; } }
        private static int _LINE_BREAK_WORD_STYLE_AUTOContent = default;
        private static bool _LINE_BREAK_WORD_STYLE_AUTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/text/LineBreakConfig.html#LINE_BREAK_WORD_STYLE_NONE"/>
        /// </summary>
        public static int LINE_BREAK_WORD_STYLE_NONE { get { if (!_LINE_BREAK_WORD_STYLE_NONEReady) { _LINE_BREAK_WORD_STYLE_NONEContent = SGetField<int>(LocalBridgeClazz, "LINE_BREAK_WORD_STYLE_NONE"); _LINE_BREAK_WORD_STYLE_NONEReady = true; } return _LINE_BREAK_WORD_STYLE_NONEContent; } }
        private static int _LINE_BREAK_WORD_STYLE_NONEContent = default;
        private static bool _LINE_BREAK_WORD_STYLE_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/text/LineBreakConfig.html#LINE_BREAK_WORD_STYLE_PHRASE"/>
        /// </summary>
        public static int LINE_BREAK_WORD_STYLE_PHRASE { get { if (!_LINE_BREAK_WORD_STYLE_PHRASEReady) { _LINE_BREAK_WORD_STYLE_PHRASEContent = SGetField<int>(LocalBridgeClazz, "LINE_BREAK_WORD_STYLE_PHRASE"); _LINE_BREAK_WORD_STYLE_PHRASEReady = true; } return _LINE_BREAK_WORD_STYLE_PHRASEContent; } }
        private static int _LINE_BREAK_WORD_STYLE_PHRASEContent = default;
        private static bool _LINE_BREAK_WORD_STYLE_PHRASEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/text/LineBreakConfig.html#LINE_BREAK_WORD_STYLE_UNSPECIFIED"/>
        /// </summary>
        public static int LINE_BREAK_WORD_STYLE_UNSPECIFIED { get { if (!_LINE_BREAK_WORD_STYLE_UNSPECIFIEDReady) { _LINE_BREAK_WORD_STYLE_UNSPECIFIEDContent = SGetField<int>(LocalBridgeClazz, "LINE_BREAK_WORD_STYLE_UNSPECIFIED"); _LINE_BREAK_WORD_STYLE_UNSPECIFIEDReady = true; } return _LINE_BREAK_WORD_STYLE_UNSPECIFIEDContent; } }
        private static int _LINE_BREAK_WORD_STYLE_UNSPECIFIEDContent = default;
        private static bool _LINE_BREAK_WORD_STYLE_UNSPECIFIEDReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/text/LineBreakConfig.html#merge(android.graphics.text.LineBreakConfig)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Text.LineBreakConfig"/></param>
        /// <returns><see cref="Android.Graphics.Text.LineBreakConfig"/></returns>
        public Android.Graphics.Text.LineBreakConfig Merge(Android.Graphics.Text.LineBreakConfig arg0)
        {
            return IExecuteWithSignature<Android.Graphics.Text.LineBreakConfig>("merge", "(Landroid/graphics/text/LineBreakConfig;)Landroid/graphics/text/LineBreakConfig;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/text/LineBreakConfig.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/text/LineBreakConfig.html#getHyphenation()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetHyphenation()
        {
            return IExecuteWithSignature<int>("getHyphenation", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/text/LineBreakConfig.html#getLineBreakStyle()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetLineBreakStyle()
        {
            return IExecuteWithSignature<int>("getLineBreakStyle", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/text/LineBreakConfig.html#getLineBreakWordStyle()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetLineBreakWordStyle()
        {
            return IExecuteWithSignature<int>("getLineBreakWordStyle", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/text/LineBreakConfig.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
        }
    
        #endregion
    
        #region Nested classes
        #region Builder implementation
        public partial class Builder
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/text/LineBreakConfig.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Graphics.Text.LineBreakConfig"/></returns>
            public Android.Graphics.Text.LineBreakConfig Build()
            {
                return IExecuteWithSignature<Android.Graphics.Text.LineBreakConfig>("build", "()Landroid/graphics/text/LineBreakConfig;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/text/LineBreakConfig.Builder.html#merge(android.graphics.text.LineBreakConfig)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.Text.LineBreakConfig"/></param>
            /// <returns><see cref="Android.Graphics.Text.LineBreakConfig.Builder"/></returns>
            public Android.Graphics.Text.LineBreakConfig.Builder Merge(Android.Graphics.Text.LineBreakConfig arg0)
            {
                return IExecuteWithSignature<Android.Graphics.Text.LineBreakConfig.Builder>("merge", "(Landroid/graphics/text/LineBreakConfig;)Landroid/graphics/text/LineBreakConfig$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/text/LineBreakConfig.Builder.html#setHyphenation(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Graphics.Text.LineBreakConfig.Builder"/></returns>
            public Android.Graphics.Text.LineBreakConfig.Builder SetHyphenation(int arg0)
            {
                return IExecuteWithSignature<Android.Graphics.Text.LineBreakConfig.Builder>("setHyphenation", "(I)Landroid/graphics/text/LineBreakConfig$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/text/LineBreakConfig.Builder.html#setLineBreakStyle(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Graphics.Text.LineBreakConfig.Builder"/></returns>
            public Android.Graphics.Text.LineBreakConfig.Builder SetLineBreakStyle(int arg0)
            {
                return IExecuteWithSignature<Android.Graphics.Text.LineBreakConfig.Builder>("setLineBreakStyle", "(I)Landroid/graphics/text/LineBreakConfig$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/text/LineBreakConfig.Builder.html#setLineBreakWordStyle(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Graphics.Text.LineBreakConfig.Builder"/></returns>
            public Android.Graphics.Text.LineBreakConfig.Builder SetLineBreakWordStyle(int arg0)
            {
                return IExecuteWithSignature<Android.Graphics.Text.LineBreakConfig.Builder>("setLineBreakWordStyle", "(I)Landroid/graphics/text/LineBreakConfig$Builder;", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Graphics.Text
{
    #region LineBreakConfig
    public partial class LineBreakConfig
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/text/LineBreakConfig.html#LINE_BREAK_STYLE_LOOSE"/>
        /// </summary>
        public static int LINE_BREAK_STYLE_LOOSE { get { if (!_LINE_BREAK_STYLE_LOOSEReady) { _LINE_BREAK_STYLE_LOOSEContent = SGetField<int>(LocalBridgeClazz, "LINE_BREAK_STYLE_LOOSE"); _LINE_BREAK_STYLE_LOOSEReady = true; } return _LINE_BREAK_STYLE_LOOSEContent; } }
        private static int _LINE_BREAK_STYLE_LOOSEContent = default;
        private static bool _LINE_BREAK_STYLE_LOOSEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/text/LineBreakConfig.html#LINE_BREAK_STYLE_NONE"/>
        /// </summary>
        public static int LINE_BREAK_STYLE_NONE { get { if (!_LINE_BREAK_STYLE_NONEReady) { _LINE_BREAK_STYLE_NONEContent = SGetField<int>(LocalBridgeClazz, "LINE_BREAK_STYLE_NONE"); _LINE_BREAK_STYLE_NONEReady = true; } return _LINE_BREAK_STYLE_NONEContent; } }
        private static int _LINE_BREAK_STYLE_NONEContent = default;
        private static bool _LINE_BREAK_STYLE_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/text/LineBreakConfig.html#LINE_BREAK_STYLE_NORMAL"/>
        /// </summary>
        public static int LINE_BREAK_STYLE_NORMAL { get { if (!_LINE_BREAK_STYLE_NORMALReady) { _LINE_BREAK_STYLE_NORMALContent = SGetField<int>(LocalBridgeClazz, "LINE_BREAK_STYLE_NORMAL"); _LINE_BREAK_STYLE_NORMALReady = true; } return _LINE_BREAK_STYLE_NORMALContent; } }
        private static int _LINE_BREAK_STYLE_NORMALContent = default;
        private static bool _LINE_BREAK_STYLE_NORMALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/text/LineBreakConfig.html#LINE_BREAK_STYLE_STRICT"/>
        /// </summary>
        public static int LINE_BREAK_STYLE_STRICT { get { if (!_LINE_BREAK_STYLE_STRICTReady) { _LINE_BREAK_STYLE_STRICTContent = SGetField<int>(LocalBridgeClazz, "LINE_BREAK_STYLE_STRICT"); _LINE_BREAK_STYLE_STRICTReady = true; } return _LINE_BREAK_STYLE_STRICTContent; } }
        private static int _LINE_BREAK_STYLE_STRICTContent = default;
        private static bool _LINE_BREAK_STYLE_STRICTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/text/LineBreakConfig.html#LINE_BREAK_WORD_STYLE_NONE"/>
        /// </summary>
        public static int LINE_BREAK_WORD_STYLE_NONE { get { if (!_LINE_BREAK_WORD_STYLE_NONEReady) { _LINE_BREAK_WORD_STYLE_NONEContent = SGetField<int>(LocalBridgeClazz, "LINE_BREAK_WORD_STYLE_NONE"); _LINE_BREAK_WORD_STYLE_NONEReady = true; } return _LINE_BREAK_WORD_STYLE_NONEContent; } }
        private static int _LINE_BREAK_WORD_STYLE_NONEContent = default;
        private static bool _LINE_BREAK_WORD_STYLE_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/text/LineBreakConfig.html#LINE_BREAK_WORD_STYLE_PHRASE"/>
        /// </summary>
        public static int LINE_BREAK_WORD_STYLE_PHRASE { get { if (!_LINE_BREAK_WORD_STYLE_PHRASEReady) { _LINE_BREAK_WORD_STYLE_PHRASEContent = SGetField<int>(LocalBridgeClazz, "LINE_BREAK_WORD_STYLE_PHRASE"); _LINE_BREAK_WORD_STYLE_PHRASEReady = true; } return _LINE_BREAK_WORD_STYLE_PHRASEContent; } }
        private static int _LINE_BREAK_WORD_STYLE_PHRASEContent = default;
        private static bool _LINE_BREAK_WORD_STYLE_PHRASEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/text/LineBreakConfig.html#getLineBreakStyle()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetLineBreakStyle()
        {
            return IExecuteWithSignature<int>("getLineBreakStyle", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/text/LineBreakConfig.html#getLineBreakWordStyle()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetLineBreakWordStyle()
        {
            return IExecuteWithSignature<int>("getLineBreakWordStyle", "()I");
        }

        #endregion

        #region Nested classes
        #region Builder
        public partial class Builder
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/text/LineBreakConfig.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Graphics.Text.LineBreakConfig"/></returns>
            public Android.Graphics.Text.LineBreakConfig Build()
            {
                return IExecuteWithSignature<Android.Graphics.Text.LineBreakConfig>("build", "()Landroid/graphics/text/LineBreakConfig;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/text/LineBreakConfig.Builder.html#setLineBreakStyle(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Graphics.Text.LineBreakConfig.Builder"/></returns>
            public Android.Graphics.Text.LineBreakConfig.Builder SetLineBreakStyle(int arg0)
            {
                return IExecuteWithSignature<Android.Graphics.Text.LineBreakConfig.Builder>("setLineBreakStyle", "(I)Landroid/graphics/text/LineBreakConfig$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/text/LineBreakConfig.Builder.html#setLineBreakWordStyle(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Graphics.Text.LineBreakConfig.Builder"/></returns>
            public Android.Graphics.Text.LineBreakConfig.Builder SetLineBreakWordStyle(int arg0)
            {
                return IExecuteWithSignature<Android.Graphics.Text.LineBreakConfig.Builder>("setLineBreakWordStyle", "(I)Landroid/graphics/text/LineBreakConfig$Builder;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.8.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Graphics
{
    #region HardwareRenderer
    public partial class HardwareRenderer
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/HardwareRenderer.html#SYNC_CONTEXT_IS_STOPPED"/>
        /// </summary>
        public static int SYNC_CONTEXT_IS_STOPPED { get { if (!_SYNC_CONTEXT_IS_STOPPEDReady) { _SYNC_CONTEXT_IS_STOPPEDContent = SGetField<int>(LocalBridgeClazz, "SYNC_CONTEXT_IS_STOPPED"); _SYNC_CONTEXT_IS_STOPPEDReady = true; } return _SYNC_CONTEXT_IS_STOPPEDContent; } }
        private static int _SYNC_CONTEXT_IS_STOPPEDContent = default;
        private static bool _SYNC_CONTEXT_IS_STOPPEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/HardwareRenderer.html#SYNC_FRAME_DROPPED"/>
        /// </summary>
        public static int SYNC_FRAME_DROPPED { get { if (!_SYNC_FRAME_DROPPEDReady) { _SYNC_FRAME_DROPPEDContent = SGetField<int>(LocalBridgeClazz, "SYNC_FRAME_DROPPED"); _SYNC_FRAME_DROPPEDReady = true; } return _SYNC_FRAME_DROPPEDContent; } }
        private static int _SYNC_FRAME_DROPPEDContent = default;
        private static bool _SYNC_FRAME_DROPPEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/HardwareRenderer.html#SYNC_LOST_SURFACE_REWARD_IF_FOUND"/>
        /// </summary>
        public static int SYNC_LOST_SURFACE_REWARD_IF_FOUND { get { if (!_SYNC_LOST_SURFACE_REWARD_IF_FOUNDReady) { _SYNC_LOST_SURFACE_REWARD_IF_FOUNDContent = SGetField<int>(LocalBridgeClazz, "SYNC_LOST_SURFACE_REWARD_IF_FOUND"); _SYNC_LOST_SURFACE_REWARD_IF_FOUNDReady = true; } return _SYNC_LOST_SURFACE_REWARD_IF_FOUNDContent; } }
        private static int _SYNC_LOST_SURFACE_REWARD_IF_FOUNDContent = default;
        private static bool _SYNC_LOST_SURFACE_REWARD_IF_FOUNDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/HardwareRenderer.html#SYNC_OK"/>
        /// </summary>
        public static int SYNC_OK { get { if (!_SYNC_OKReady) { _SYNC_OKContent = SGetField<int>(LocalBridgeClazz, "SYNC_OK"); _SYNC_OKReady = true; } return _SYNC_OKContent; } }
        private static int _SYNC_OKContent = default;
        private static bool _SYNC_OKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/HardwareRenderer.html#SYNC_REDRAW_REQUESTED"/>
        /// </summary>
        public static int SYNC_REDRAW_REQUESTED { get { if (!_SYNC_REDRAW_REQUESTEDReady) { _SYNC_REDRAW_REQUESTEDContent = SGetField<int>(LocalBridgeClazz, "SYNC_REDRAW_REQUESTED"); _SYNC_REDRAW_REQUESTEDReady = true; } return _SYNC_REDRAW_REQUESTEDContent; } }
        private static int _SYNC_REDRAW_REQUESTEDContent = default;
        private static bool _SYNC_REDRAW_REQUESTEDReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/HardwareRenderer.html#isDrawingEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public static bool IsDrawingEnabled()
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isDrawingEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/HardwareRenderer.html#setDrawingEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public static void SetDrawingEnabled(bool arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "setDrawingEnabled", "(Z)V", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/HardwareRenderer.html#createRenderRequest()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.HardwareRenderer.FrameRenderRequest"/></returns>
        public Android.Graphics.HardwareRenderer.FrameRenderRequest CreateRenderRequest()
        {
            return IExecuteWithSignature<Android.Graphics.HardwareRenderer.FrameRenderRequest>("createRenderRequest", "()Landroid/graphics/HardwareRenderer$FrameRenderRequest;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/HardwareRenderer.html#isOpaque()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsOpaque()
        {
            return IExecuteWithSignature<bool>("isOpaque", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/HardwareRenderer.html#clearContent()"/>
        /// </summary>
        public void ClearContent()
        {
            IExecuteWithSignature("clearContent", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/HardwareRenderer.html#destroy()"/>
        /// </summary>
        public void Destroy()
        {
            IExecuteWithSignature("destroy", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/HardwareRenderer.html#notifyFramePending()"/>
        /// </summary>
        public void NotifyFramePending()
        {
            IExecuteWithSignature("notifyFramePending", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/HardwareRenderer.html#setContentRoot(android.graphics.RenderNode)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.RenderNode"/></param>
        public void SetContentRoot(Android.Graphics.RenderNode arg0)
        {
            IExecuteWithSignature("setContentRoot", "(Landroid/graphics/RenderNode;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/HardwareRenderer.html#setLightSourceAlpha(float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public void SetLightSourceAlpha(float arg0, float arg1)
        {
            IExecute("setLightSourceAlpha", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/HardwareRenderer.html#setLightSourceGeometry(float,float,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        public void SetLightSourceGeometry(float arg0, float arg1, float arg2, float arg3)
        {
            IExecute("setLightSourceGeometry", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/HardwareRenderer.html#setName(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void SetName(Java.Lang.String arg0)
        {
            IExecuteWithSignature("setName", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/HardwareRenderer.html#setOpaque(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetOpaque(bool arg0)
        {
            IExecuteWithSignature("setOpaque", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/HardwareRenderer.html#setSurface(android.view.Surface)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Surface"/></param>
        public void SetSurface(Android.View.Surface arg0)
        {
            IExecuteWithSignature("setSurface", "(Landroid/view/Surface;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/HardwareRenderer.html#start()"/>
        /// </summary>
        public void Start()
        {
            IExecuteWithSignature("start", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/HardwareRenderer.html#stop()"/>
        /// </summary>
        public void Stop()
        {
            IExecuteWithSignature("stop", "()V");
        }

        #endregion

        #region Nested classes
        #region FrameRenderRequest
        public partial class FrameRenderRequest
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/HardwareRenderer.FrameRenderRequest.html#setFrameCommitCallback(java.util.concurrent.Executor,java.lang.Runnable)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
            /// <param name="arg1"><see cref="Java.Lang.Runnable"/></param>
            /// <returns><see cref="Android.Graphics.HardwareRenderer.FrameRenderRequest"/></returns>
            public Android.Graphics.HardwareRenderer.FrameRenderRequest SetFrameCommitCallback(Java.Util.Concurrent.Executor arg0, Java.Lang.Runnable arg1)
            {
                return IExecute<Android.Graphics.HardwareRenderer.FrameRenderRequest>("setFrameCommitCallback", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/HardwareRenderer.FrameRenderRequest.html#setVsyncTime(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.Graphics.HardwareRenderer.FrameRenderRequest"/></returns>
            public Android.Graphics.HardwareRenderer.FrameRenderRequest SetVsyncTime(long arg0)
            {
                return IExecuteWithSignature<Android.Graphics.HardwareRenderer.FrameRenderRequest>("setVsyncTime", "(J)Landroid/graphics/HardwareRenderer$FrameRenderRequest;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/HardwareRenderer.FrameRenderRequest.html#setWaitForPresent(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Graphics.HardwareRenderer.FrameRenderRequest"/></returns>
            public Android.Graphics.HardwareRenderer.FrameRenderRequest SetWaitForPresent(bool arg0)
            {
                return IExecuteWithSignature<Android.Graphics.HardwareRenderer.FrameRenderRequest>("setWaitForPresent", "(Z)Landroid/graphics/HardwareRenderer$FrameRenderRequest;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/HardwareRenderer.FrameRenderRequest.html#syncAndDraw()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int SyncAndDraw()
            {
                return IExecuteWithSignature<int>("syncAndDraw", "()I");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
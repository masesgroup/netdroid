/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.5.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Graphics
{
    #region BitmapShader
    public partial class BitmapShader
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/BitmapShader.html#%3Cinit%3E(android.graphics.Bitmap,android.graphics.Shader.TileMode,android.graphics.Shader.TileMode)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Bitmap"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Shader.TileMode"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.Shader.TileMode"/></param>
        public BitmapShader(Android.Graphics.Bitmap arg0, Android.Graphics.Shader.TileMode arg1, Android.Graphics.Shader.TileMode arg2)
            : base(arg0, arg1, arg2)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/BitmapShader.html#FILTER_MODE_DEFAULT"/>
        /// </summary>
        public static int FILTER_MODE_DEFAULT { get { if (!_FILTER_MODE_DEFAULTReady) { _FILTER_MODE_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "FILTER_MODE_DEFAULT"); _FILTER_MODE_DEFAULTReady = true; } return _FILTER_MODE_DEFAULTContent; } }
        private static int _FILTER_MODE_DEFAULTContent = default;
        private static bool _FILTER_MODE_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/BitmapShader.html#FILTER_MODE_LINEAR"/>
        /// </summary>
        public static int FILTER_MODE_LINEAR { get { if (!_FILTER_MODE_LINEARReady) { _FILTER_MODE_LINEARContent = SGetField<int>(LocalBridgeClazz, "FILTER_MODE_LINEAR"); _FILTER_MODE_LINEARReady = true; } return _FILTER_MODE_LINEARContent; } }
        private static int _FILTER_MODE_LINEARContent = default;
        private static bool _FILTER_MODE_LINEARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/BitmapShader.html#FILTER_MODE_NEAREST"/>
        /// </summary>
        public static int FILTER_MODE_NEAREST { get { if (!_FILTER_MODE_NEARESTReady) { _FILTER_MODE_NEARESTContent = SGetField<int>(LocalBridgeClazz, "FILTER_MODE_NEAREST"); _FILTER_MODE_NEARESTReady = true; } return _FILTER_MODE_NEARESTContent; } }
        private static int _FILTER_MODE_NEARESTContent = default;
        private static bool _FILTER_MODE_NEARESTReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/BitmapShader.html#getFilterMode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetFilterMode()
        {
            return IExecuteWithSignature<int>("getFilterMode", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/BitmapShader.html#getMaxAnisotropy()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMaxAnisotropy()
        {
            return IExecuteWithSignature<int>("getMaxAnisotropy", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/BitmapShader.html#setFilterMode(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetFilterMode(int arg0)
        {
            IExecuteWithSignature("setFilterMode", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/BitmapShader.html#setMaxAnisotropy(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetMaxAnisotropy(int arg0)
        {
            IExecuteWithSignature("setMaxAnisotropy", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/BitmapShader.html#setOverrideGainmap(android.graphics.Gainmap)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Gainmap"/></param>
        public void SetOverrideGainmap(Android.Graphics.Gainmap arg0)
        {
            IExecuteWithSignature("setOverrideGainmap", "(Landroid/graphics/Gainmap;)V", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Graphics
{
    #region PorterDuff declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/graphics/PorterDuff.html"/>
    /// </summary>
    public partial class PorterDuff : MASES.JCOBridge.C2JBridge.JVMBridgeBase<PorterDuff>
    {
        const string _bridgeClassName = "android.graphics.PorterDuff";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public PorterDuff() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public PorterDuff(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region Mode declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/PorterDuff.Mode.html"/>
        /// </summary>
        public partial class Mode : Java.Lang.Enum<Android.Graphics.PorterDuff.Mode>
        {
            const string _bridgeClassName = "android.graphics.PorterDuff$Mode";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Mode() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Mode(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region PorterDuff implementation
    public partial class PorterDuff
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes
        #region Mode implementation
        public partial class Mode
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/PorterDuff.Mode.html#ADD"/>
            /// </summary>
            public static Android.Graphics.PorterDuff.Mode ADD { get { if (!_ADDReady) { _ADDContent = SGetField<Android.Graphics.PorterDuff.Mode>(LocalBridgeClazz, "ADD"); _ADDReady = true; } return _ADDContent; } }
            private static Android.Graphics.PorterDuff.Mode _ADDContent = default;
            private static bool _ADDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/PorterDuff.Mode.html#CLEAR"/>
            /// </summary>
            public static Android.Graphics.PorterDuff.Mode CLEAR { get { if (!_CLEARReady) { _CLEARContent = SGetField<Android.Graphics.PorterDuff.Mode>(LocalBridgeClazz, "CLEAR"); _CLEARReady = true; } return _CLEARContent; } }
            private static Android.Graphics.PorterDuff.Mode _CLEARContent = default;
            private static bool _CLEARReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/PorterDuff.Mode.html#DARKEN"/>
            /// </summary>
            public static Android.Graphics.PorterDuff.Mode DARKEN { get { if (!_DARKENReady) { _DARKENContent = SGetField<Android.Graphics.PorterDuff.Mode>(LocalBridgeClazz, "DARKEN"); _DARKENReady = true; } return _DARKENContent; } }
            private static Android.Graphics.PorterDuff.Mode _DARKENContent = default;
            private static bool _DARKENReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/PorterDuff.Mode.html#DST"/>
            /// </summary>
            public static Android.Graphics.PorterDuff.Mode DST { get { if (!_DSTReady) { _DSTContent = SGetField<Android.Graphics.PorterDuff.Mode>(LocalBridgeClazz, "DST"); _DSTReady = true; } return _DSTContent; } }
            private static Android.Graphics.PorterDuff.Mode _DSTContent = default;
            private static bool _DSTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/PorterDuff.Mode.html#DST_ATOP"/>
            /// </summary>
            public static Android.Graphics.PorterDuff.Mode DST_ATOP { get { if (!_DST_ATOPReady) { _DST_ATOPContent = SGetField<Android.Graphics.PorterDuff.Mode>(LocalBridgeClazz, "DST_ATOP"); _DST_ATOPReady = true; } return _DST_ATOPContent; } }
            private static Android.Graphics.PorterDuff.Mode _DST_ATOPContent = default;
            private static bool _DST_ATOPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/PorterDuff.Mode.html#DST_IN"/>
            /// </summary>
            public static Android.Graphics.PorterDuff.Mode DST_IN { get { if (!_DST_INReady) { _DST_INContent = SGetField<Android.Graphics.PorterDuff.Mode>(LocalBridgeClazz, "DST_IN"); _DST_INReady = true; } return _DST_INContent; } }
            private static Android.Graphics.PorterDuff.Mode _DST_INContent = default;
            private static bool _DST_INReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/PorterDuff.Mode.html#DST_OUT"/>
            /// </summary>
            public static Android.Graphics.PorterDuff.Mode DST_OUT { get { if (!_DST_OUTReady) { _DST_OUTContent = SGetField<Android.Graphics.PorterDuff.Mode>(LocalBridgeClazz, "DST_OUT"); _DST_OUTReady = true; } return _DST_OUTContent; } }
            private static Android.Graphics.PorterDuff.Mode _DST_OUTContent = default;
            private static bool _DST_OUTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/PorterDuff.Mode.html#DST_OVER"/>
            /// </summary>
            public static Android.Graphics.PorterDuff.Mode DST_OVER { get { if (!_DST_OVERReady) { _DST_OVERContent = SGetField<Android.Graphics.PorterDuff.Mode>(LocalBridgeClazz, "DST_OVER"); _DST_OVERReady = true; } return _DST_OVERContent; } }
            private static Android.Graphics.PorterDuff.Mode _DST_OVERContent = default;
            private static bool _DST_OVERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/PorterDuff.Mode.html#LIGHTEN"/>
            /// </summary>
            public static Android.Graphics.PorterDuff.Mode LIGHTEN { get { if (!_LIGHTENReady) { _LIGHTENContent = SGetField<Android.Graphics.PorterDuff.Mode>(LocalBridgeClazz, "LIGHTEN"); _LIGHTENReady = true; } return _LIGHTENContent; } }
            private static Android.Graphics.PorterDuff.Mode _LIGHTENContent = default;
            private static bool _LIGHTENReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/PorterDuff.Mode.html#MULTIPLY"/>
            /// </summary>
            public static Android.Graphics.PorterDuff.Mode MULTIPLY { get { if (!_MULTIPLYReady) { _MULTIPLYContent = SGetField<Android.Graphics.PorterDuff.Mode>(LocalBridgeClazz, "MULTIPLY"); _MULTIPLYReady = true; } return _MULTIPLYContent; } }
            private static Android.Graphics.PorterDuff.Mode _MULTIPLYContent = default;
            private static bool _MULTIPLYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/PorterDuff.Mode.html#OVERLAY"/>
            /// </summary>
            public static Android.Graphics.PorterDuff.Mode OVERLAY { get { if (!_OVERLAYReady) { _OVERLAYContent = SGetField<Android.Graphics.PorterDuff.Mode>(LocalBridgeClazz, "OVERLAY"); _OVERLAYReady = true; } return _OVERLAYContent; } }
            private static Android.Graphics.PorterDuff.Mode _OVERLAYContent = default;
            private static bool _OVERLAYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/PorterDuff.Mode.html#SCREEN"/>
            /// </summary>
            public static Android.Graphics.PorterDuff.Mode SCREEN { get { if (!_SCREENReady) { _SCREENContent = SGetField<Android.Graphics.PorterDuff.Mode>(LocalBridgeClazz, "SCREEN"); _SCREENReady = true; } return _SCREENContent; } }
            private static Android.Graphics.PorterDuff.Mode _SCREENContent = default;
            private static bool _SCREENReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/PorterDuff.Mode.html#SRC"/>
            /// </summary>
            public static Android.Graphics.PorterDuff.Mode SRC { get { if (!_SRCReady) { _SRCContent = SGetField<Android.Graphics.PorterDuff.Mode>(LocalBridgeClazz, "SRC"); _SRCReady = true; } return _SRCContent; } }
            private static Android.Graphics.PorterDuff.Mode _SRCContent = default;
            private static bool _SRCReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/PorterDuff.Mode.html#SRC_ATOP"/>
            /// </summary>
            public static Android.Graphics.PorterDuff.Mode SRC_ATOP { get { if (!_SRC_ATOPReady) { _SRC_ATOPContent = SGetField<Android.Graphics.PorterDuff.Mode>(LocalBridgeClazz, "SRC_ATOP"); _SRC_ATOPReady = true; } return _SRC_ATOPContent; } }
            private static Android.Graphics.PorterDuff.Mode _SRC_ATOPContent = default;
            private static bool _SRC_ATOPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/PorterDuff.Mode.html#SRC_IN"/>
            /// </summary>
            public static Android.Graphics.PorterDuff.Mode SRC_IN { get { if (!_SRC_INReady) { _SRC_INContent = SGetField<Android.Graphics.PorterDuff.Mode>(LocalBridgeClazz, "SRC_IN"); _SRC_INReady = true; } return _SRC_INContent; } }
            private static Android.Graphics.PorterDuff.Mode _SRC_INContent = default;
            private static bool _SRC_INReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/PorterDuff.Mode.html#SRC_OUT"/>
            /// </summary>
            public static Android.Graphics.PorterDuff.Mode SRC_OUT { get { if (!_SRC_OUTReady) { _SRC_OUTContent = SGetField<Android.Graphics.PorterDuff.Mode>(LocalBridgeClazz, "SRC_OUT"); _SRC_OUTReady = true; } return _SRC_OUTContent; } }
            private static Android.Graphics.PorterDuff.Mode _SRC_OUTContent = default;
            private static bool _SRC_OUTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/PorterDuff.Mode.html#SRC_OVER"/>
            /// </summary>
            public static Android.Graphics.PorterDuff.Mode SRC_OVER { get { if (!_SRC_OVERReady) { _SRC_OVERContent = SGetField<Android.Graphics.PorterDuff.Mode>(LocalBridgeClazz, "SRC_OVER"); _SRC_OVERReady = true; } return _SRC_OVERContent; } }
            private static Android.Graphics.PorterDuff.Mode _SRC_OVERContent = default;
            private static bool _SRC_OVERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/PorterDuff.Mode.html#XOR"/>
            /// </summary>
            public static Android.Graphics.PorterDuff.Mode XOR { get { if (!_XORReady) { _XORContent = SGetField<Android.Graphics.PorterDuff.Mode>(LocalBridgeClazz, "XOR"); _XORReady = true; } return _XORContent; } }
            private static Android.Graphics.PorterDuff.Mode _XORContent = default;
            private static bool _XORReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/PorterDuff.Mode.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Graphics.PorterDuff.Mode"/></returns>
            public static Android.Graphics.PorterDuff.Mode ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Graphics.PorterDuff.Mode>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/graphics/PorterDuff$Mode;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/PorterDuff.Mode.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.Graphics.PorterDuff.Mode"/></returns>
            public static Android.Graphics.PorterDuff.Mode[] Values()
            {
                return SExecuteWithSignatureArray<Android.Graphics.PorterDuff.Mode>(LocalBridgeClazz, "values", "()[Landroid/graphics/PorterDuff$Mode;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
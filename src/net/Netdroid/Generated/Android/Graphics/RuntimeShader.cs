/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Graphics
{
    #region RuntimeShader declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/graphics/RuntimeShader.html"/>
    /// </summary>
    public partial class RuntimeShader : Android.Graphics.Shader
    {
        const string _bridgeClassName = "android.graphics.RuntimeShader";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public RuntimeShader() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public RuntimeShader(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public RuntimeShader(params object[] args) : base(args) { }
    
        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region RuntimeShader implementation
    public partial class RuntimeShader
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/RuntimeShader.html#%3Cinit%3E(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public RuntimeShader(Java.Lang.String arg0)
            : base(arg0)
        {
        }
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/RuntimeShader.html#setColorUniform(java.lang.String,android.graphics.Color)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Color"/></param>
        public void SetColorUniform(Java.Lang.String arg0, Android.Graphics.Color arg1)
        {
            IExecuteWithSignature("setColorUniform", "(Ljava/lang/String;Landroid/graphics/Color;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/RuntimeShader.html#setColorUniform(java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetColorUniform(Java.Lang.String arg0, int arg1)
        {
            IExecuteWithSignature("setColorUniform", "(Ljava/lang/String;I)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/RuntimeShader.html#setColorUniform(java.lang.String,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        public void SetColorUniform(Java.Lang.String arg0, long arg1)
        {
            IExecuteWithSignature("setColorUniform", "(Ljava/lang/String;J)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/RuntimeShader.html#setFloatUniform(java.lang.String,float,float,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        public void SetFloatUniform(Java.Lang.String arg0, float arg1, float arg2, float arg3, float arg4)
        {
            IExecuteWithSignature("setFloatUniform", "(Ljava/lang/String;FFFF)V", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/RuntimeShader.html#setFloatUniform(java.lang.String,float,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        public void SetFloatUniform(Java.Lang.String arg0, float arg1, float arg2, float arg3)
        {
            IExecuteWithSignature("setFloatUniform", "(Ljava/lang/String;FFF)V", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/RuntimeShader.html#setFloatUniform(java.lang.String,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        public void SetFloatUniform(Java.Lang.String arg0, float arg1, float arg2)
        {
            IExecuteWithSignature("setFloatUniform", "(Ljava/lang/String;FF)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/RuntimeShader.html#setFloatUniform(java.lang.String,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public void SetFloatUniform(Java.Lang.String arg0, float arg1)
        {
            IExecuteWithSignature("setFloatUniform", "(Ljava/lang/String;F)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/RuntimeShader.html#setFloatUniform(java.lang.String,float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public void SetFloatUniform(Java.Lang.String arg0, float[] arg1)
        {
            IExecuteWithSignature("setFloatUniform", "(Ljava/lang/String;[F)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/RuntimeShader.html#setInputBuffer(java.lang.String,android.graphics.BitmapShader)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.BitmapShader"/></param>
        public void SetInputBuffer(Java.Lang.String arg0, Android.Graphics.BitmapShader arg1)
        {
            IExecuteWithSignature("setInputBuffer", "(Ljava/lang/String;Landroid/graphics/BitmapShader;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/RuntimeShader.html#setInputColorFilter(java.lang.String,android.graphics.ColorFilter)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.ColorFilter"/></param>
        public void SetInputColorFilter(Java.Lang.String arg0, Android.Graphics.ColorFilter arg1)
        {
            IExecuteWithSignature("setInputColorFilter", "(Ljava/lang/String;Landroid/graphics/ColorFilter;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/RuntimeShader.html#setInputShader(java.lang.String,android.graphics.Shader)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Shader"/></param>
        public void SetInputShader(Java.Lang.String arg0, Android.Graphics.Shader arg1)
        {
            IExecuteWithSignature("setInputShader", "(Ljava/lang/String;Landroid/graphics/Shader;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/RuntimeShader.html#setInputXfermode(java.lang.String,android.graphics.RuntimeXfermode)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.RuntimeXfermode"/></param>
        public void SetInputXfermode(Java.Lang.String arg0, Android.Graphics.RuntimeXfermode arg1)
        {
            IExecuteWithSignature("setInputXfermode", "(Ljava/lang/String;Landroid/graphics/RuntimeXfermode;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/RuntimeShader.html#setIntUniform(java.lang.String,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public void SetIntUniform(Java.Lang.String arg0, int arg1, int arg2, int arg3, int arg4)
        {
            IExecuteWithSignature("setIntUniform", "(Ljava/lang/String;IIII)V", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/RuntimeShader.html#setIntUniform(java.lang.String,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void SetIntUniform(Java.Lang.String arg0, int arg1, int arg2, int arg3)
        {
            IExecuteWithSignature("setIntUniform", "(Ljava/lang/String;III)V", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/RuntimeShader.html#setIntUniform(java.lang.String,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void SetIntUniform(Java.Lang.String arg0, int arg1, int arg2)
        {
            IExecuteWithSignature("setIntUniform", "(Ljava/lang/String;II)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/RuntimeShader.html#setIntUniform(java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetIntUniform(Java.Lang.String arg0, int arg1)
        {
            IExecuteWithSignature("setIntUniform", "(Ljava/lang/String;I)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/RuntimeShader.html#setIntUniform(java.lang.String,int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetIntUniform(Java.Lang.String arg0, int[] arg1)
        {
            IExecuteWithSignature("setIntUniform", "(Ljava/lang/String;[I)V", arg0, arg1);
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
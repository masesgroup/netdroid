/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Graphics
{
    #region SurfaceTexture
    public partial class SurfaceTexture
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/SurfaceTexture.html#%3Cinit%3E(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public SurfaceTexture(bool arg0)
            : base(arg0)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/SurfaceTexture.html#%3Cinit%3E(int,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public SurfaceTexture(int arg0, bool arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/SurfaceTexture.html#%3Cinit%3E(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public SurfaceTexture(int arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/SurfaceTexture.html#isReleased()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsReleased()
        {
            return IExecuteWithSignature<bool>("isReleased", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/SurfaceTexture.html#getDataSpace()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetDataSpace()
        {
            return IExecuteWithSignature<int>("getDataSpace", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/SurfaceTexture.html#getTimestamp()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetTimestamp()
        {
            return IExecuteWithSignature<long>("getTimestamp", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/SurfaceTexture.html#attachToGLContext(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void AttachToGLContext(int arg0)
        {
            IExecuteWithSignature("attachToGLContext", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/SurfaceTexture.html#detachFromGLContext()"/>
        /// </summary>
        public void DetachFromGLContext()
        {
            IExecuteWithSignature("detachFromGLContext", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/SurfaceTexture.html#getTransformMatrix(float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void GetTransformMatrix(float[] arg0)
        {
            IExecuteWithSignature("getTransformMatrix", "([F)V", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/SurfaceTexture.html#release()"/>
        /// </summary>
        public void Release()
        {
            IExecuteWithSignature("release", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/SurfaceTexture.html#releaseTexImage()"/>
        /// </summary>
        public void ReleaseTexImage()
        {
            IExecuteWithSignature("releaseTexImage", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/SurfaceTexture.html#setDefaultBufferSize(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetDefaultBufferSize(int arg0, int arg1)
        {
            IExecute("setDefaultBufferSize", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/SurfaceTexture.html#setOnFrameAvailableListener(android.graphics.SurfaceTexture.OnFrameAvailableListener,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.SurfaceTexture.OnFrameAvailableListener"/></param>
        /// <param name="arg1"><see cref="Android.Os.Handler"/></param>
        public void SetOnFrameAvailableListener(Android.Graphics.SurfaceTexture.OnFrameAvailableListener arg0, Android.Os.Handler arg1)
        {
            IExecute("setOnFrameAvailableListener", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/SurfaceTexture.html#setOnFrameAvailableListener(android.graphics.SurfaceTexture.OnFrameAvailableListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.SurfaceTexture.OnFrameAvailableListener"/></param>
        public void SetOnFrameAvailableListener(Android.Graphics.SurfaceTexture.OnFrameAvailableListener arg0)
        {
            IExecuteWithSignature("setOnFrameAvailableListener", "(Landroid/graphics/SurfaceTexture$OnFrameAvailableListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/SurfaceTexture.html#updateTexImage()"/>
        /// </summary>
        public void UpdateTexImage()
        {
            IExecuteWithSignature("updateTexImage", "()V");
        }

        #endregion

        #region Nested classes
        #region OnFrameAvailableListener
        public partial class OnFrameAvailableListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnFrameAvailableListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onFrameAvailable", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Graphics.SurfaceTexture>>>(OnFrameAvailableEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/graphics/SurfaceTexture.OnFrameAvailableListener.html#onFrameAvailable(android.graphics.SurfaceTexture)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnFrameAvailable"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Graphics.SurfaceTexture> OnOnFrameAvailable { get; set; } = null;

            void OnFrameAvailableEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Graphics.SurfaceTexture>> data)
            {
                var methodToExecute = (OnOnFrameAvailable != null) ? OnOnFrameAvailable : OnFrameAvailable;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/SurfaceTexture.OnFrameAvailableListener.html#onFrameAvailable(android.graphics.SurfaceTexture)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.SurfaceTexture"/></param>
            public virtual void OnFrameAvailable(Android.Graphics.SurfaceTexture arg0)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnFrameAvailableListenerDirect
        public partial class OnFrameAvailableListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/SurfaceTexture.OnFrameAvailableListener.html#onFrameAvailable(android.graphics.SurfaceTexture)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.SurfaceTexture"/></param>
            public override void OnFrameAvailable(Android.Graphics.SurfaceTexture arg0)
            {
                IExecuteWithSignature("onFrameAvailable", "(Landroid/graphics/SurfaceTexture;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OutOfResourcesException
        public partial class OutOfResourcesException
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Graphics
{
    #region Region declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/graphics/Region.html"/>
    /// </summary>
    public partial class Region : Android.Os.Parcelable
    {
        const string _bridgeClassName = "android.graphics.Region";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public Region() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public Region(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region Op declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Region.Op.html"/>
        /// </summary>
        public partial class Op : Java.Lang.Enum<Android.Graphics.Region.Op>
        {
            const string _bridgeClassName = "android.graphics.Region$Op";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Op() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Op(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region Region implementation
    public partial class Region
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Region.html#%3Cinit%3E(android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        public Region(Android.Graphics.Rect arg0)
            : base(arg0)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Region.html#%3Cinit%3E(android.graphics.Region)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Region"/></param>
        public Region(Android.Graphics.Region arg0)
            : base(arg0)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Region.html#%3Cinit%3E(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public Region(int arg0, int arg1, int arg2, int arg3)
            : base(arg0, arg1, arg2, arg3)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Region.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Region.html#getBoundaryPath()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Path"/></returns>
        public Android.Graphics.Path GetBoundaryPath()
        {
            return IExecuteWithSignature<Android.Graphics.Path>("getBoundaryPath", "()Landroid/graphics/Path;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Region.html#getBounds()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Rect"/></returns>
        public Android.Graphics.Rect GetBounds()
        {
            return IExecuteWithSignature<Android.Graphics.Rect>("getBounds", "()Landroid/graphics/Rect;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Region.html#getBoundaryPath(android.graphics.Path)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Path"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool GetBoundaryPath(Android.Graphics.Path arg0)
        {
            return IExecuteWithSignature<bool>("getBoundaryPath", "(Landroid/graphics/Path;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Region.html#getBounds(android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool GetBounds(Android.Graphics.Rect arg0)
        {
            return IExecuteWithSignature<bool>("getBounds", "(Landroid/graphics/Rect;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Region.html#op(android.graphics.Rect,android.graphics.Region,android.graphics.Region.Op)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Region"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.Region.Op"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool OpMethod(Android.Graphics.Rect arg0, Android.Graphics.Region arg1, Android.Graphics.Region.Op arg2)
        {
            return IExecute<bool>("op", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Region.html#op(android.graphics.Rect,android.graphics.Region.Op)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Region.Op"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool OpMethod(Android.Graphics.Rect arg0, Android.Graphics.Region.Op arg1)
        {
            return IExecute<bool>("op", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Region.html#op(android.graphics.Region,android.graphics.Region,android.graphics.Region.Op)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Region"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Region"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.Region.Op"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool OpMethod(Android.Graphics.Region arg0, Android.Graphics.Region arg1, Android.Graphics.Region.Op arg2)
        {
            return IExecute<bool>("op", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Region.html#op(android.graphics.Region,android.graphics.Region.Op)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Region"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Region.Op"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool OpMethod(Android.Graphics.Region arg0, Android.Graphics.Region.Op arg1)
        {
            return IExecute<bool>("op", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Region.html#op(int,int,int,int,android.graphics.Region.Op)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="Android.Graphics.Region.Op"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool OpMethod(int arg0, int arg1, int arg2, int arg3, Android.Graphics.Region.Op arg4)
        {
            return IExecute<bool>("op", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Region.html#quickContains(android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool QuickContains(Android.Graphics.Rect arg0)
        {
            return IExecuteWithSignature<bool>("quickContains", "(Landroid/graphics/Rect;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Region.html#quickReject(android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool QuickReject(Android.Graphics.Rect arg0)
        {
            return IExecuteWithSignature<bool>("quickReject", "(Landroid/graphics/Rect;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Region.html#set(android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Set(Android.Graphics.Rect arg0)
        {
            return IExecuteWithSignature<bool>("set", "(Landroid/graphics/Rect;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Region.html#set(android.graphics.Region)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Region"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Set(Android.Graphics.Region arg0)
        {
            return IExecuteWithSignature<bool>("set", "(Landroid/graphics/Region;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Region.html#set(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Set(int arg0, int arg1, int arg2, int arg3)
        {
            return IExecute<bool>("set", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Region.html#setPath(android.graphics.Path,android.graphics.Region)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Path"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Region"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetPath(Android.Graphics.Path arg0, Android.Graphics.Region arg1)
        {
            return IExecute<bool>("setPath", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Region.html#union(android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Union(Android.Graphics.Rect arg0)
        {
            return IExecuteWithSignature<bool>("union", "(Landroid/graphics/Rect;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Region.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Region.html#contains(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Contains(int arg0, int arg1)
        {
            return IExecute<bool>("contains", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Region.html#isComplex()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsComplex()
        {
            return IExecuteWithSignature<bool>("isComplex", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Region.html#isEmpty()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsEmpty()
        {
            return IExecuteWithSignature<bool>("isEmpty", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Region.html#isRect()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsRect()
        {
            return IExecuteWithSignature<bool>("isRect", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Region.html#quickContains(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool QuickContains(int arg0, int arg1, int arg2, int arg3)
        {
            return IExecute<bool>("quickContains", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Region.html#quickReject(android.graphics.Region)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Region"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool QuickReject(Android.Graphics.Region arg0)
        {
            return IExecuteWithSignature<bool>("quickReject", "(Landroid/graphics/Region;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Region.html#quickReject(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool QuickReject(int arg0, int arg1, int arg2, int arg3)
        {
            return IExecute<bool>("quickReject", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Region.html#translate(int,int,android.graphics.Region)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.Region"/></param>
        public void Translate(int arg0, int arg1, Android.Graphics.Region arg2)
        {
            IExecute("translate", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Region.html#setEmpty()"/>
        /// </summary>
        public void SetEmpty()
        {
            IExecuteWithSignature("setEmpty", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Region.html#translate(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void Translate(int arg0, int arg1)
        {
            IExecute("translate", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Region.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecute("writeToParcel", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region Op implementation
        public partial class Op
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Region.Op.html#DIFFERENCE"/>
            /// </summary>
            public static Android.Graphics.Region.Op DIFFERENCE { get { if (!_DIFFERENCEReady) { _DIFFERENCEContent = SGetField<Android.Graphics.Region.Op>(LocalBridgeClazz, "DIFFERENCE"); _DIFFERENCEReady = true; } return _DIFFERENCEContent; } }
            private static Android.Graphics.Region.Op _DIFFERENCEContent = default;
            private static bool _DIFFERENCEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Region.Op.html#INTERSECT"/>
            /// </summary>
            public static Android.Graphics.Region.Op INTERSECT { get { if (!_INTERSECTReady) { _INTERSECTContent = SGetField<Android.Graphics.Region.Op>(LocalBridgeClazz, "INTERSECT"); _INTERSECTReady = true; } return _INTERSECTContent; } }
            private static Android.Graphics.Region.Op _INTERSECTContent = default;
            private static bool _INTERSECTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Region.Op.html#REPLACE"/>
            /// </summary>
            public static Android.Graphics.Region.Op REPLACE { get { if (!_REPLACEReady) { _REPLACEContent = SGetField<Android.Graphics.Region.Op>(LocalBridgeClazz, "REPLACE"); _REPLACEReady = true; } return _REPLACEContent; } }
            private static Android.Graphics.Region.Op _REPLACEContent = default;
            private static bool _REPLACEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Region.Op.html#REVERSE_DIFFERENCE"/>
            /// </summary>
            public static Android.Graphics.Region.Op REVERSE_DIFFERENCE { get { if (!_REVERSE_DIFFERENCEReady) { _REVERSE_DIFFERENCEContent = SGetField<Android.Graphics.Region.Op>(LocalBridgeClazz, "REVERSE_DIFFERENCE"); _REVERSE_DIFFERENCEReady = true; } return _REVERSE_DIFFERENCEContent; } }
            private static Android.Graphics.Region.Op _REVERSE_DIFFERENCEContent = default;
            private static bool _REVERSE_DIFFERENCEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Region.Op.html#UNION"/>
            /// </summary>
            public static Android.Graphics.Region.Op UNION { get { if (!_UNIONReady) { _UNIONContent = SGetField<Android.Graphics.Region.Op>(LocalBridgeClazz, "UNION"); _UNIONReady = true; } return _UNIONContent; } }
            private static Android.Graphics.Region.Op _UNIONContent = default;
            private static bool _UNIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Region.Op.html#XOR"/>
            /// </summary>
            public static Android.Graphics.Region.Op XOR { get { if (!_XORReady) { _XORContent = SGetField<Android.Graphics.Region.Op>(LocalBridgeClazz, "XOR"); _XORReady = true; } return _XORContent; } }
            private static Android.Graphics.Region.Op _XORContent = default;
            private static bool _XORReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Region.Op.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Graphics.Region.Op"/></returns>
            public static Android.Graphics.Region.Op ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Graphics.Region.Op>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/graphics/Region$Op;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Region.Op.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.Graphics.Region.Op"/></returns>
            public static Android.Graphics.Region.Op[] Values()
            {
                return SExecuteWithSignatureArray<Android.Graphics.Region.Op>(LocalBridgeClazz, "values", "()[Landroid/graphics/Region$Op;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.2.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Graphics
{
    #region Paint
    public partial class Paint
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#%3Cinit%3E(android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Paint"/></param>
        public Paint(Android.Graphics.Paint arg0)
            : base(arg0)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#%3Cinit%3E(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public Paint(int arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#ANTI_ALIAS_FLAG"/>
        /// </summary>
        public static int ANTI_ALIAS_FLAG { get { if (!_ANTI_ALIAS_FLAGReady) { _ANTI_ALIAS_FLAGContent = SGetField<int>(LocalBridgeClazz, "ANTI_ALIAS_FLAG"); _ANTI_ALIAS_FLAGReady = true; } return _ANTI_ALIAS_FLAGContent; } }
        private static int _ANTI_ALIAS_FLAGContent = default;
        private static bool _ANTI_ALIAS_FLAGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#CURSOR_AFTER"/>
        /// </summary>
        public static int CURSOR_AFTER { get { if (!_CURSOR_AFTERReady) { _CURSOR_AFTERContent = SGetField<int>(LocalBridgeClazz, "CURSOR_AFTER"); _CURSOR_AFTERReady = true; } return _CURSOR_AFTERContent; } }
        private static int _CURSOR_AFTERContent = default;
        private static bool _CURSOR_AFTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#CURSOR_AT"/>
        /// </summary>
        public static int CURSOR_AT { get { if (!_CURSOR_ATReady) { _CURSOR_ATContent = SGetField<int>(LocalBridgeClazz, "CURSOR_AT"); _CURSOR_ATReady = true; } return _CURSOR_ATContent; } }
        private static int _CURSOR_ATContent = default;
        private static bool _CURSOR_ATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#CURSOR_AT_OR_AFTER"/>
        /// </summary>
        public static int CURSOR_AT_OR_AFTER { get { if (!_CURSOR_AT_OR_AFTERReady) { _CURSOR_AT_OR_AFTERContent = SGetField<int>(LocalBridgeClazz, "CURSOR_AT_OR_AFTER"); _CURSOR_AT_OR_AFTERReady = true; } return _CURSOR_AT_OR_AFTERContent; } }
        private static int _CURSOR_AT_OR_AFTERContent = default;
        private static bool _CURSOR_AT_OR_AFTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#CURSOR_AT_OR_BEFORE"/>
        /// </summary>
        public static int CURSOR_AT_OR_BEFORE { get { if (!_CURSOR_AT_OR_BEFOREReady) { _CURSOR_AT_OR_BEFOREContent = SGetField<int>(LocalBridgeClazz, "CURSOR_AT_OR_BEFORE"); _CURSOR_AT_OR_BEFOREReady = true; } return _CURSOR_AT_OR_BEFOREContent; } }
        private static int _CURSOR_AT_OR_BEFOREContent = default;
        private static bool _CURSOR_AT_OR_BEFOREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#CURSOR_BEFORE"/>
        /// </summary>
        public static int CURSOR_BEFORE { get { if (!_CURSOR_BEFOREReady) { _CURSOR_BEFOREContent = SGetField<int>(LocalBridgeClazz, "CURSOR_BEFORE"); _CURSOR_BEFOREReady = true; } return _CURSOR_BEFOREContent; } }
        private static int _CURSOR_BEFOREContent = default;
        private static bool _CURSOR_BEFOREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#DEV_KERN_TEXT_FLAG"/>
        /// </summary>
        public static int DEV_KERN_TEXT_FLAG { get { if (!_DEV_KERN_TEXT_FLAGReady) { _DEV_KERN_TEXT_FLAGContent = SGetField<int>(LocalBridgeClazz, "DEV_KERN_TEXT_FLAG"); _DEV_KERN_TEXT_FLAGReady = true; } return _DEV_KERN_TEXT_FLAGContent; } }
        private static int _DEV_KERN_TEXT_FLAGContent = default;
        private static bool _DEV_KERN_TEXT_FLAGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#DITHER_FLAG"/>
        /// </summary>
        public static int DITHER_FLAG { get { if (!_DITHER_FLAGReady) { _DITHER_FLAGContent = SGetField<int>(LocalBridgeClazz, "DITHER_FLAG"); _DITHER_FLAGReady = true; } return _DITHER_FLAGContent; } }
        private static int _DITHER_FLAGContent = default;
        private static bool _DITHER_FLAGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#EMBEDDED_BITMAP_TEXT_FLAG"/>
        /// </summary>
        public static int EMBEDDED_BITMAP_TEXT_FLAG { get { if (!_EMBEDDED_BITMAP_TEXT_FLAGReady) { _EMBEDDED_BITMAP_TEXT_FLAGContent = SGetField<int>(LocalBridgeClazz, "EMBEDDED_BITMAP_TEXT_FLAG"); _EMBEDDED_BITMAP_TEXT_FLAGReady = true; } return _EMBEDDED_BITMAP_TEXT_FLAGContent; } }
        private static int _EMBEDDED_BITMAP_TEXT_FLAGContent = default;
        private static bool _EMBEDDED_BITMAP_TEXT_FLAGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#END_HYPHEN_EDIT_INSERT_ARMENIAN_HYPHEN"/>
        /// </summary>
        public static int END_HYPHEN_EDIT_INSERT_ARMENIAN_HYPHEN { get { if (!_END_HYPHEN_EDIT_INSERT_ARMENIAN_HYPHENReady) { _END_HYPHEN_EDIT_INSERT_ARMENIAN_HYPHENContent = SGetField<int>(LocalBridgeClazz, "END_HYPHEN_EDIT_INSERT_ARMENIAN_HYPHEN"); _END_HYPHEN_EDIT_INSERT_ARMENIAN_HYPHENReady = true; } return _END_HYPHEN_EDIT_INSERT_ARMENIAN_HYPHENContent; } }
        private static int _END_HYPHEN_EDIT_INSERT_ARMENIAN_HYPHENContent = default;
        private static bool _END_HYPHEN_EDIT_INSERT_ARMENIAN_HYPHENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#END_HYPHEN_EDIT_INSERT_HYPHEN"/>
        /// </summary>
        public static int END_HYPHEN_EDIT_INSERT_HYPHEN { get { if (!_END_HYPHEN_EDIT_INSERT_HYPHENReady) { _END_HYPHEN_EDIT_INSERT_HYPHENContent = SGetField<int>(LocalBridgeClazz, "END_HYPHEN_EDIT_INSERT_HYPHEN"); _END_HYPHEN_EDIT_INSERT_HYPHENReady = true; } return _END_HYPHEN_EDIT_INSERT_HYPHENContent; } }
        private static int _END_HYPHEN_EDIT_INSERT_HYPHENContent = default;
        private static bool _END_HYPHEN_EDIT_INSERT_HYPHENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#END_HYPHEN_EDIT_INSERT_MAQAF"/>
        /// </summary>
        public static int END_HYPHEN_EDIT_INSERT_MAQAF { get { if (!_END_HYPHEN_EDIT_INSERT_MAQAFReady) { _END_HYPHEN_EDIT_INSERT_MAQAFContent = SGetField<int>(LocalBridgeClazz, "END_HYPHEN_EDIT_INSERT_MAQAF"); _END_HYPHEN_EDIT_INSERT_MAQAFReady = true; } return _END_HYPHEN_EDIT_INSERT_MAQAFContent; } }
        private static int _END_HYPHEN_EDIT_INSERT_MAQAFContent = default;
        private static bool _END_HYPHEN_EDIT_INSERT_MAQAFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#END_HYPHEN_EDIT_INSERT_UCAS_HYPHEN"/>
        /// </summary>
        public static int END_HYPHEN_EDIT_INSERT_UCAS_HYPHEN { get { if (!_END_HYPHEN_EDIT_INSERT_UCAS_HYPHENReady) { _END_HYPHEN_EDIT_INSERT_UCAS_HYPHENContent = SGetField<int>(LocalBridgeClazz, "END_HYPHEN_EDIT_INSERT_UCAS_HYPHEN"); _END_HYPHEN_EDIT_INSERT_UCAS_HYPHENReady = true; } return _END_HYPHEN_EDIT_INSERT_UCAS_HYPHENContent; } }
        private static int _END_HYPHEN_EDIT_INSERT_UCAS_HYPHENContent = default;
        private static bool _END_HYPHEN_EDIT_INSERT_UCAS_HYPHENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#END_HYPHEN_EDIT_INSERT_ZWJ_AND_HYPHEN"/>
        /// </summary>
        public static int END_HYPHEN_EDIT_INSERT_ZWJ_AND_HYPHEN { get { if (!_END_HYPHEN_EDIT_INSERT_ZWJ_AND_HYPHENReady) { _END_HYPHEN_EDIT_INSERT_ZWJ_AND_HYPHENContent = SGetField<int>(LocalBridgeClazz, "END_HYPHEN_EDIT_INSERT_ZWJ_AND_HYPHEN"); _END_HYPHEN_EDIT_INSERT_ZWJ_AND_HYPHENReady = true; } return _END_HYPHEN_EDIT_INSERT_ZWJ_AND_HYPHENContent; } }
        private static int _END_HYPHEN_EDIT_INSERT_ZWJ_AND_HYPHENContent = default;
        private static bool _END_HYPHEN_EDIT_INSERT_ZWJ_AND_HYPHENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#END_HYPHEN_EDIT_NO_EDIT"/>
        /// </summary>
        public static int END_HYPHEN_EDIT_NO_EDIT { get { if (!_END_HYPHEN_EDIT_NO_EDITReady) { _END_HYPHEN_EDIT_NO_EDITContent = SGetField<int>(LocalBridgeClazz, "END_HYPHEN_EDIT_NO_EDIT"); _END_HYPHEN_EDIT_NO_EDITReady = true; } return _END_HYPHEN_EDIT_NO_EDITContent; } }
        private static int _END_HYPHEN_EDIT_NO_EDITContent = default;
        private static bool _END_HYPHEN_EDIT_NO_EDITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#END_HYPHEN_EDIT_REPLACE_WITH_HYPHEN"/>
        /// </summary>
        public static int END_HYPHEN_EDIT_REPLACE_WITH_HYPHEN { get { if (!_END_HYPHEN_EDIT_REPLACE_WITH_HYPHENReady) { _END_HYPHEN_EDIT_REPLACE_WITH_HYPHENContent = SGetField<int>(LocalBridgeClazz, "END_HYPHEN_EDIT_REPLACE_WITH_HYPHEN"); _END_HYPHEN_EDIT_REPLACE_WITH_HYPHENReady = true; } return _END_HYPHEN_EDIT_REPLACE_WITH_HYPHENContent; } }
        private static int _END_HYPHEN_EDIT_REPLACE_WITH_HYPHENContent = default;
        private static bool _END_HYPHEN_EDIT_REPLACE_WITH_HYPHENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#FAKE_BOLD_TEXT_FLAG"/>
        /// </summary>
        public static int FAKE_BOLD_TEXT_FLAG { get { if (!_FAKE_BOLD_TEXT_FLAGReady) { _FAKE_BOLD_TEXT_FLAGContent = SGetField<int>(LocalBridgeClazz, "FAKE_BOLD_TEXT_FLAG"); _FAKE_BOLD_TEXT_FLAGReady = true; } return _FAKE_BOLD_TEXT_FLAGContent; } }
        private static int _FAKE_BOLD_TEXT_FLAGContent = default;
        private static bool _FAKE_BOLD_TEXT_FLAGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#FILTER_BITMAP_FLAG"/>
        /// </summary>
        public static int FILTER_BITMAP_FLAG { get { if (!_FILTER_BITMAP_FLAGReady) { _FILTER_BITMAP_FLAGContent = SGetField<int>(LocalBridgeClazz, "FILTER_BITMAP_FLAG"); _FILTER_BITMAP_FLAGReady = true; } return _FILTER_BITMAP_FLAGContent; } }
        private static int _FILTER_BITMAP_FLAGContent = default;
        private static bool _FILTER_BITMAP_FLAGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#HINTING_OFF"/>
        /// </summary>
        public static int HINTING_OFF { get { if (!_HINTING_OFFReady) { _HINTING_OFFContent = SGetField<int>(LocalBridgeClazz, "HINTING_OFF"); _HINTING_OFFReady = true; } return _HINTING_OFFContent; } }
        private static int _HINTING_OFFContent = default;
        private static bool _HINTING_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#HINTING_ON"/>
        /// </summary>
        public static int HINTING_ON { get { if (!_HINTING_ONReady) { _HINTING_ONContent = SGetField<int>(LocalBridgeClazz, "HINTING_ON"); _HINTING_ONReady = true; } return _HINTING_ONContent; } }
        private static int _HINTING_ONContent = default;
        private static bool _HINTING_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#LINEAR_TEXT_FLAG"/>
        /// </summary>
        public static int LINEAR_TEXT_FLAG { get { if (!_LINEAR_TEXT_FLAGReady) { _LINEAR_TEXT_FLAGContent = SGetField<int>(LocalBridgeClazz, "LINEAR_TEXT_FLAG"); _LINEAR_TEXT_FLAGReady = true; } return _LINEAR_TEXT_FLAGContent; } }
        private static int _LINEAR_TEXT_FLAGContent = default;
        private static bool _LINEAR_TEXT_FLAGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#START_HYPHEN_EDIT_INSERT_HYPHEN"/>
        /// </summary>
        public static int START_HYPHEN_EDIT_INSERT_HYPHEN { get { if (!_START_HYPHEN_EDIT_INSERT_HYPHENReady) { _START_HYPHEN_EDIT_INSERT_HYPHENContent = SGetField<int>(LocalBridgeClazz, "START_HYPHEN_EDIT_INSERT_HYPHEN"); _START_HYPHEN_EDIT_INSERT_HYPHENReady = true; } return _START_HYPHEN_EDIT_INSERT_HYPHENContent; } }
        private static int _START_HYPHEN_EDIT_INSERT_HYPHENContent = default;
        private static bool _START_HYPHEN_EDIT_INSERT_HYPHENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#START_HYPHEN_EDIT_INSERT_ZWJ"/>
        /// </summary>
        public static int START_HYPHEN_EDIT_INSERT_ZWJ { get { if (!_START_HYPHEN_EDIT_INSERT_ZWJReady) { _START_HYPHEN_EDIT_INSERT_ZWJContent = SGetField<int>(LocalBridgeClazz, "START_HYPHEN_EDIT_INSERT_ZWJ"); _START_HYPHEN_EDIT_INSERT_ZWJReady = true; } return _START_HYPHEN_EDIT_INSERT_ZWJContent; } }
        private static int _START_HYPHEN_EDIT_INSERT_ZWJContent = default;
        private static bool _START_HYPHEN_EDIT_INSERT_ZWJReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#START_HYPHEN_EDIT_NO_EDIT"/>
        /// </summary>
        public static int START_HYPHEN_EDIT_NO_EDIT { get { if (!_START_HYPHEN_EDIT_NO_EDITReady) { _START_HYPHEN_EDIT_NO_EDITContent = SGetField<int>(LocalBridgeClazz, "START_HYPHEN_EDIT_NO_EDIT"); _START_HYPHEN_EDIT_NO_EDITReady = true; } return _START_HYPHEN_EDIT_NO_EDITContent; } }
        private static int _START_HYPHEN_EDIT_NO_EDITContent = default;
        private static bool _START_HYPHEN_EDIT_NO_EDITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#STRIKE_THRU_TEXT_FLAG"/>
        /// </summary>
        public static int STRIKE_THRU_TEXT_FLAG { get { if (!_STRIKE_THRU_TEXT_FLAGReady) { _STRIKE_THRU_TEXT_FLAGContent = SGetField<int>(LocalBridgeClazz, "STRIKE_THRU_TEXT_FLAG"); _STRIKE_THRU_TEXT_FLAGReady = true; } return _STRIKE_THRU_TEXT_FLAGContent; } }
        private static int _STRIKE_THRU_TEXT_FLAGContent = default;
        private static bool _STRIKE_THRU_TEXT_FLAGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#SUBPIXEL_TEXT_FLAG"/>
        /// </summary>
        public static int SUBPIXEL_TEXT_FLAG { get { if (!_SUBPIXEL_TEXT_FLAGReady) { _SUBPIXEL_TEXT_FLAGContent = SGetField<int>(LocalBridgeClazz, "SUBPIXEL_TEXT_FLAG"); _SUBPIXEL_TEXT_FLAGReady = true; } return _SUBPIXEL_TEXT_FLAGContent; } }
        private static int _SUBPIXEL_TEXT_FLAGContent = default;
        private static bool _SUBPIXEL_TEXT_FLAGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#UNDERLINE_TEXT_FLAG"/>
        /// </summary>
        public static int UNDERLINE_TEXT_FLAG { get { if (!_UNDERLINE_TEXT_FLAGReady) { _UNDERLINE_TEXT_FLAGContent = SGetField<int>(LocalBridgeClazz, "UNDERLINE_TEXT_FLAG"); _UNDERLINE_TEXT_FLAGReady = true; } return _UNDERLINE_TEXT_FLAGContent; } }
        private static int _UNDERLINE_TEXT_FLAGContent = default;
        private static bool _UNDERLINE_TEXT_FLAGReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getBlendMode()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.BlendMode"/></returns>
        public Android.Graphics.BlendMode GetBlendMode()
        {
            return IExecuteWithSignature<Android.Graphics.BlendMode>("getBlendMode", "()Landroid/graphics/BlendMode;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getColorFilter()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.ColorFilter"/></returns>
        public Android.Graphics.ColorFilter GetColorFilter()
        {
            return IExecuteWithSignature<Android.Graphics.ColorFilter>("getColorFilter", "()Landroid/graphics/ColorFilter;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setColorFilter(android.graphics.ColorFilter)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.ColorFilter"/></param>
        /// <returns><see cref="Android.Graphics.ColorFilter"/></returns>
        public Android.Graphics.ColorFilter SetColorFilter(Android.Graphics.ColorFilter arg0)
        {
            return IExecuteWithSignature<Android.Graphics.ColorFilter>("setColorFilter", "(Landroid/graphics/ColorFilter;)Landroid/graphics/ColorFilter;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getMaskFilter()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.MaskFilter"/></returns>
        public Android.Graphics.MaskFilter GetMaskFilter()
        {
            return IExecuteWithSignature<Android.Graphics.MaskFilter>("getMaskFilter", "()Landroid/graphics/MaskFilter;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setMaskFilter(android.graphics.MaskFilter)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.MaskFilter"/></param>
        /// <returns><see cref="Android.Graphics.MaskFilter"/></returns>
        public Android.Graphics.MaskFilter SetMaskFilter(Android.Graphics.MaskFilter arg0)
        {
            return IExecuteWithSignature<Android.Graphics.MaskFilter>("setMaskFilter", "(Landroid/graphics/MaskFilter;)Landroid/graphics/MaskFilter;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getTextAlign()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Paint.Align"/></returns>
        public Android.Graphics.Paint.Align GetTextAlign()
        {
            return IExecuteWithSignature<Android.Graphics.Paint.Align>("getTextAlign", "()Landroid/graphics/Paint$Align;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getStrokeCap()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Paint.Cap"/></returns>
        public Android.Graphics.Paint.Cap GetStrokeCap()
        {
            return IExecuteWithSignature<Android.Graphics.Paint.Cap>("getStrokeCap", "()Landroid/graphics/Paint$Cap;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getFontMetrics()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Paint.FontMetrics"/></returns>
        public Android.Graphics.Paint.FontMetrics GetFontMetrics()
        {
            return IExecuteWithSignature<Android.Graphics.Paint.FontMetrics>("getFontMetrics", "()Landroid/graphics/Paint$FontMetrics;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getFontMetricsInt()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Paint.FontMetricsInt"/></returns>
        public Android.Graphics.Paint.FontMetricsInt GetFontMetricsInt()
        {
            return IExecuteWithSignature<Android.Graphics.Paint.FontMetricsInt>("getFontMetricsInt", "()Landroid/graphics/Paint$FontMetricsInt;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getStrokeJoin()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Paint.Join"/></returns>
        public Android.Graphics.Paint.Join GetStrokeJoin()
        {
            return IExecuteWithSignature<Android.Graphics.Paint.Join>("getStrokeJoin", "()Landroid/graphics/Paint$Join;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getStyle()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Paint.Style"/></returns>
        public Android.Graphics.Paint.Style GetStyle()
        {
            return IExecuteWithSignature<Android.Graphics.Paint.Style>("getStyle", "()Landroid/graphics/Paint$Style;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getPathEffect()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.PathEffect"/></returns>
        public Android.Graphics.PathEffect GetPathEffect()
        {
            return IExecuteWithSignature<Android.Graphics.PathEffect>("getPathEffect", "()Landroid/graphics/PathEffect;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setPathEffect(android.graphics.PathEffect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.PathEffect"/></param>
        /// <returns><see cref="Android.Graphics.PathEffect"/></returns>
        public Android.Graphics.PathEffect SetPathEffect(Android.Graphics.PathEffect arg0)
        {
            return IExecuteWithSignature<Android.Graphics.PathEffect>("setPathEffect", "(Landroid/graphics/PathEffect;)Landroid/graphics/PathEffect;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getShader()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Shader"/></returns>
        public Android.Graphics.Shader GetShader()
        {
            return IExecuteWithSignature<Android.Graphics.Shader>("getShader", "()Landroid/graphics/Shader;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setShader(android.graphics.Shader)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Shader"/></param>
        /// <returns><see cref="Android.Graphics.Shader"/></returns>
        public Android.Graphics.Shader SetShader(Android.Graphics.Shader arg0)
        {
            return IExecuteWithSignature<Android.Graphics.Shader>("setShader", "(Landroid/graphics/Shader;)Landroid/graphics/Shader;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getTypeface()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Typeface"/></returns>
        public Android.Graphics.Typeface GetTypeface()
        {
            return IExecuteWithSignature<Android.Graphics.Typeface>("getTypeface", "()Landroid/graphics/Typeface;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setTypeface(android.graphics.Typeface)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Typeface"/></param>
        /// <returns><see cref="Android.Graphics.Typeface"/></returns>
        public Android.Graphics.Typeface SetTypeface(Android.Graphics.Typeface arg0)
        {
            return IExecuteWithSignature<Android.Graphics.Typeface>("setTypeface", "(Landroid/graphics/Typeface;)Landroid/graphics/Typeface;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getXfermode()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Xfermode"/></returns>
        public Android.Graphics.Xfermode GetXfermode()
        {
            return IExecuteWithSignature<Android.Graphics.Xfermode>("getXfermode", "()Landroid/graphics/Xfermode;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setXfermode(android.graphics.Xfermode)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Xfermode"/></param>
        /// <returns><see cref="Android.Graphics.Xfermode"/></returns>
        public Android.Graphics.Xfermode SetXfermode(Android.Graphics.Xfermode arg0)
        {
            return IExecuteWithSignature<Android.Graphics.Xfermode>("setXfermode", "(Landroid/graphics/Xfermode;)Landroid/graphics/Xfermode;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getTextLocales()"/>
        /// </summary>
        /// <returns><see cref="Android.Os.LocaleList"/></returns>
        public Android.Os.LocaleList GetTextLocales()
        {
            return IExecuteWithSignature<Android.Os.LocaleList>("getTextLocales", "()Landroid/os/LocaleList;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#equalsForTextMeasurement(android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Paint"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool EqualsForTextMeasurement(Android.Graphics.Paint arg0)
        {
            return IExecuteWithSignature<bool>("equalsForTextMeasurement", "(Landroid/graphics/Paint;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getFillPath(android.graphics.Path,android.graphics.Path)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Path"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Path"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool GetFillPath(Android.Graphics.Path arg0, Android.Graphics.Path arg1)
        {
            return IExecute<bool>("getFillPath", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#hasGlyph(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasGlyph(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<bool>("hasGlyph", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#isElegantTextHeight()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsElegantTextHeight()
        {
            return IExecuteWithSignature<bool>("isElegantTextHeight", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setFontVariationSettings(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetFontVariationSettings(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<bool>("setFontVariationSettings", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#isAntiAlias()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAntiAlias()
        {
            return IExecuteWithSignature<bool>("isAntiAlias", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#isDither()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDither()
        {
            return IExecuteWithSignature<bool>("isDither", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#isFakeBoldText()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsFakeBoldText()
        {
            return IExecuteWithSignature<bool>("isFakeBoldText", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#isFilterBitmap()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsFilterBitmap()
        {
            return IExecuteWithSignature<bool>("isFilterBitmap", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#isLinearText()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsLinearText()
        {
            return IExecuteWithSignature<bool>("isLinearText", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#isStrikeThruText()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsStrikeThruText()
        {
            return IExecuteWithSignature<bool>("isStrikeThruText", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#isSubpixelText()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsSubpixelText()
        {
            return IExecuteWithSignature<bool>("isSubpixelText", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#isUnderlineText()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsUnderlineText()
        {
            return IExecuteWithSignature<bool>("isUnderlineText", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#ascent()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float Ascent()
        {
            return IExecuteWithSignature<float>("ascent", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#descent()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float Descent()
        {
            return IExecuteWithSignature<float>("descent", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getFontMetrics(android.graphics.Paint.FontMetrics)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Paint.FontMetrics"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetFontMetrics(Android.Graphics.Paint.FontMetrics arg0)
        {
            return IExecuteWithSignature<float>("getFontMetrics", "(Landroid/graphics/Paint$FontMetrics;)F", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getFontSpacing()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetFontSpacing()
        {
            return IExecuteWithSignature<float>("getFontSpacing", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getLetterSpacing()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetLetterSpacing()
        {
            return IExecuteWithSignature<float>("getLetterSpacing", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getRunAdvance(char[],int,int,int,int,boolean,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="bool"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetRunAdvance(char[] arg0, int arg1, int arg2, int arg3, int arg4, bool arg5, int arg6)
        {
            return IExecute<float>("getRunAdvance", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getRunAdvance(java.lang.CharSequence,int,int,int,int,boolean,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="bool"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetRunAdvance(Java.Lang.CharSequence arg0, int arg1, int arg2, int arg3, int arg4, bool arg5, int arg6)
        {
            return IExecute<float>("getRunAdvance", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getRunCharacterAdvance(char[],int,int,int,int,boolean,int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="bool"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="float"/></param>
        /// <param name="arg8"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetRunCharacterAdvance(char[] arg0, int arg1, int arg2, int arg3, int arg4, bool arg5, int arg6, float[] arg7, int arg8)
        {
            return IExecute<float>("getRunCharacterAdvance", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getRunCharacterAdvance(java.lang.CharSequence,int,int,int,int,boolean,int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="bool"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="float"/></param>
        /// <param name="arg8"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetRunCharacterAdvance(Java.Lang.CharSequence arg0, int arg1, int arg2, int arg3, int arg4, bool arg5, int arg6, float[] arg7, int arg8)
        {
            return IExecute<float>("getRunCharacterAdvance", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getShadowLayerDx()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetShadowLayerDx()
        {
            return IExecuteWithSignature<float>("getShadowLayerDx", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getShadowLayerDy()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetShadowLayerDy()
        {
            return IExecuteWithSignature<float>("getShadowLayerDy", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getShadowLayerRadius()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetShadowLayerRadius()
        {
            return IExecuteWithSignature<float>("getShadowLayerRadius", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getStrikeThruPosition()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetStrikeThruPosition()
        {
            return IExecuteWithSignature<float>("getStrikeThruPosition", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getStrikeThruThickness()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetStrikeThruThickness()
        {
            return IExecuteWithSignature<float>("getStrikeThruThickness", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getStrokeMiter()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetStrokeMiter()
        {
            return IExecuteWithSignature<float>("getStrokeMiter", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getStrokeWidth()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetStrokeWidth()
        {
            return IExecuteWithSignature<float>("getStrokeWidth", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getTextRunAdvances(char[],int,int,int,int,boolean,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="bool"/></param>
        /// <param name="arg6"><see cref="float"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetTextRunAdvances(char[] arg0, int arg1, int arg2, int arg3, int arg4, bool arg5, float[] arg6, int arg7)
        {
            return IExecute<float>("getTextRunAdvances", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getTextScaleX()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetTextScaleX()
        {
            return IExecuteWithSignature<float>("getTextScaleX", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getTextSize()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetTextSize()
        {
            return IExecuteWithSignature<float>("getTextSize", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getTextSkewX()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetTextSkewX()
        {
            return IExecuteWithSignature<float>("getTextSkewX", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getUnderlinePosition()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetUnderlinePosition()
        {
            return IExecuteWithSignature<float>("getUnderlinePosition", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getUnderlineThickness()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetUnderlineThickness()
        {
            return IExecuteWithSignature<float>("getUnderlineThickness", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getWordSpacing()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetWordSpacing()
        {
            return IExecuteWithSignature<float>("getWordSpacing", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#measureText(char[],int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float MeasureText(char[] arg0, int arg1, int arg2)
        {
            return IExecute<float>("measureText", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#measureText(java.lang.CharSequence,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float MeasureText(Java.Lang.CharSequence arg0, int arg1, int arg2)
        {
            return IExecute<float>("measureText", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#measureText(java.lang.String,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float MeasureText(Java.Lang.String arg0, int arg1, int arg2)
        {
            return IExecute<float>("measureText", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#measureText(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="float"/></returns>
        public float MeasureText(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<float>("measureText", "(Ljava/lang/String;)F", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#breakText(char[],int,int,float,float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        /// <returns><see cref="int"/></returns>
        public int BreakText(char[] arg0, int arg1, int arg2, float arg3, float[] arg4)
        {
            return IExecute<int>("breakText", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#breakText(java.lang.CharSequence,int,int,boolean,float,float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        /// <param name="arg5"><see cref="float"/></param>
        /// <returns><see cref="int"/></returns>
        public int BreakText(Java.Lang.CharSequence arg0, int arg1, int arg2, bool arg3, float arg4, float[] arg5)
        {
            return IExecute<int>("breakText", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#breakText(java.lang.String,boolean,float,float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <returns><see cref="int"/></returns>
        public int BreakText(Java.Lang.String arg0, bool arg1, float arg2, float[] arg3)
        {
            return IExecute<int>("breakText", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getAlpha()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetAlpha()
        {
            return IExecuteWithSignature<int>("getAlpha", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getColor()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetColor()
        {
            return IExecuteWithSignature<int>("getColor", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getEndHyphenEdit()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetEndHyphenEdit()
        {
            return IExecuteWithSignature<int>("getEndHyphenEdit", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getFlags()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetFlags()
        {
            return IExecuteWithSignature<int>("getFlags", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getFontMetricsInt(android.graphics.Paint.FontMetricsInt)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Paint.FontMetricsInt"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetFontMetricsInt(Android.Graphics.Paint.FontMetricsInt arg0)
        {
            return IExecuteWithSignature<int>("getFontMetricsInt", "(Landroid/graphics/Paint$FontMetricsInt;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getHinting()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetHinting()
        {
            return IExecuteWithSignature<int>("getHinting", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getOffsetForAdvance(char[],int,int,int,int,boolean,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="bool"/></param>
        /// <param name="arg6"><see cref="float"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetOffsetForAdvance(char[] arg0, int arg1, int arg2, int arg3, int arg4, bool arg5, float arg6)
        {
            return IExecute<int>("getOffsetForAdvance", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getOffsetForAdvance(java.lang.CharSequence,int,int,int,int,boolean,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="bool"/></param>
        /// <param name="arg6"><see cref="float"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetOffsetForAdvance(Java.Lang.CharSequence arg0, int arg1, int arg2, int arg3, int arg4, bool arg5, float arg6)
        {
            return IExecute<int>("getOffsetForAdvance", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getShadowLayerColor()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetShadowLayerColor()
        {
            return IExecuteWithSignature<int>("getShadowLayerColor", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getStartHyphenEdit()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetStartHyphenEdit()
        {
            return IExecuteWithSignature<int>("getStartHyphenEdit", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getTextRunCursor(char[],int,int,boolean,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetTextRunCursor(char[] arg0, int arg1, int arg2, bool arg3, int arg4, int arg5)
        {
            return IExecute<int>("getTextRunCursor", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getTextRunCursor(java.lang.CharSequence,int,int,boolean,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetTextRunCursor(Java.Lang.CharSequence arg0, int arg1, int arg2, bool arg3, int arg4, int arg5)
        {
            return IExecute<int>("getTextRunCursor", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getTextWidths(char[],int,int,float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetTextWidths(char[] arg0, int arg1, int arg2, float[] arg3)
        {
            return IExecute<int>("getTextWidths", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getTextWidths(java.lang.CharSequence,int,int,float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetTextWidths(Java.Lang.CharSequence arg0, int arg1, int arg2, float[] arg3)
        {
            return IExecute<int>("getTextWidths", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getTextWidths(java.lang.String,float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetTextWidths(Java.Lang.String arg0, float[] arg1)
        {
            return IExecute<int>("getTextWidths", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getTextWidths(java.lang.String,int,int,float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetTextWidths(Java.Lang.String arg0, int arg1, int arg2, float[] arg3)
        {
            return IExecute<int>("getTextWidths", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getFontFeatureSettings()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetFontFeatureSettings()
        {
            return IExecuteWithSignature<Java.Lang.String>("getFontFeatureSettings", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getFontVariationSettings()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetFontVariationSettings()
        {
            return IExecuteWithSignature<Java.Lang.String>("getFontVariationSettings", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getTextLocale()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Locale"/></returns>
        public Java.Util.Locale GetTextLocale()
        {
            return IExecuteWithSignature<Java.Util.Locale>("getTextLocale", "()Ljava/util/Locale;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getColorLong()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetColorLong()
        {
            return IExecuteWithSignature<long>("getColorLong", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getShadowLayerColorLong()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetShadowLayerColorLong()
        {
            return IExecuteWithSignature<long>("getShadowLayerColorLong", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#clearShadowLayer()"/>
        /// </summary>
        public void ClearShadowLayer()
        {
            IExecuteWithSignature("clearShadowLayer", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getFontMetricsInt(char[],int,int,int,int,boolean,android.graphics.Paint.FontMetricsInt)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="bool"/></param>
        /// <param name="arg6"><see cref="Android.Graphics.Paint.FontMetricsInt"/></param>
        public void GetFontMetricsInt(char[] arg0, int arg1, int arg2, int arg3, int arg4, bool arg5, Android.Graphics.Paint.FontMetricsInt arg6)
        {
            IExecute("getFontMetricsInt", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getFontMetricsInt(java.lang.CharSequence,int,int,int,int,boolean,android.graphics.Paint.FontMetricsInt)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="bool"/></param>
        /// <param name="arg6"><see cref="Android.Graphics.Paint.FontMetricsInt"/></param>
        public void GetFontMetricsInt(Java.Lang.CharSequence arg0, int arg1, int arg2, int arg3, int arg4, bool arg5, Android.Graphics.Paint.FontMetricsInt arg6)
        {
            IExecute("getFontMetricsInt", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getTextBounds(char[],int,int,android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Android.Graphics.Rect"/></param>
        public void GetTextBounds(char[] arg0, int arg1, int arg2, Android.Graphics.Rect arg3)
        {
            IExecute("getTextBounds", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getTextBounds(java.lang.CharSequence,int,int,android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Android.Graphics.Rect"/></param>
        public void GetTextBounds(Java.Lang.CharSequence arg0, int arg1, int arg2, Android.Graphics.Rect arg3)
        {
            IExecute("getTextBounds", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getTextBounds(java.lang.String,int,int,android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Android.Graphics.Rect"/></param>
        public void GetTextBounds(Java.Lang.String arg0, int arg1, int arg2, Android.Graphics.Rect arg3)
        {
            IExecute("getTextBounds", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getTextPath(char[],int,int,float,float,android.graphics.Path)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        /// <param name="arg5"><see cref="Android.Graphics.Path"/></param>
        public void GetTextPath(char[] arg0, int arg1, int arg2, float arg3, float arg4, Android.Graphics.Path arg5)
        {
            IExecute("getTextPath", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#getTextPath(java.lang.String,int,int,float,float,android.graphics.Path)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        /// <param name="arg5"><see cref="Android.Graphics.Path"/></param>
        public void GetTextPath(Java.Lang.String arg0, int arg1, int arg2, float arg3, float arg4, Android.Graphics.Path arg5)
        {
            IExecute("getTextPath", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#reset()"/>
        /// </summary>
        public void Reset()
        {
            IExecuteWithSignature("reset", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#set(android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Paint"/></param>
        public void Set(Android.Graphics.Paint arg0)
        {
            IExecuteWithSignature("set", "(Landroid/graphics/Paint;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setAlpha(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetAlpha(int arg0)
        {
            IExecuteWithSignature("setAlpha", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setAntiAlias(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetAntiAlias(bool arg0)
        {
            IExecuteWithSignature("setAntiAlias", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setARGB(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void SetARGB(int arg0, int arg1, int arg2, int arg3)
        {
            IExecute("setARGB", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setBlendMode(android.graphics.BlendMode)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.BlendMode"/></param>
        public void SetBlendMode(Android.Graphics.BlendMode arg0)
        {
            IExecuteWithSignature("setBlendMode", "(Landroid/graphics/BlendMode;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setColor(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetColor(int arg0)
        {
            IExecuteWithSignature("setColor", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setColor(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        public void SetColor(long arg0)
        {
            IExecuteWithSignature("setColor", "(J)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setDither(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetDither(bool arg0)
        {
            IExecuteWithSignature("setDither", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setElegantTextHeight(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetElegantTextHeight(bool arg0)
        {
            IExecuteWithSignature("setElegantTextHeight", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setEndHyphenEdit(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetEndHyphenEdit(int arg0)
        {
            IExecuteWithSignature("setEndHyphenEdit", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setFakeBoldText(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetFakeBoldText(bool arg0)
        {
            IExecuteWithSignature("setFakeBoldText", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setFilterBitmap(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetFilterBitmap(bool arg0)
        {
            IExecuteWithSignature("setFilterBitmap", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setFlags(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetFlags(int arg0)
        {
            IExecuteWithSignature("setFlags", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setFontFeatureSettings(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void SetFontFeatureSettings(Java.Lang.String arg0)
        {
            IExecuteWithSignature("setFontFeatureSettings", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setHinting(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetHinting(int arg0)
        {
            IExecuteWithSignature("setHinting", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setLetterSpacing(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetLetterSpacing(float arg0)
        {
            IExecuteWithSignature("setLetterSpacing", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setLinearText(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetLinearText(bool arg0)
        {
            IExecuteWithSignature("setLinearText", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setShadowLayer(float,float,float,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void SetShadowLayer(float arg0, float arg1, float arg2, int arg3)
        {
            IExecute("setShadowLayer", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setShadowLayer(float,float,float,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="long"/></param>
        public void SetShadowLayer(float arg0, float arg1, float arg2, long arg3)
        {
            IExecute("setShadowLayer", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setStartHyphenEdit(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetStartHyphenEdit(int arg0)
        {
            IExecuteWithSignature("setStartHyphenEdit", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setStrikeThruText(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetStrikeThruText(bool arg0)
        {
            IExecuteWithSignature("setStrikeThruText", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setStrokeCap(android.graphics.Paint.Cap)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Paint.Cap"/></param>
        public void SetStrokeCap(Android.Graphics.Paint.Cap arg0)
        {
            IExecuteWithSignature("setStrokeCap", "(Landroid/graphics/Paint$Cap;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setStrokeJoin(android.graphics.Paint.Join)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Paint.Join"/></param>
        public void SetStrokeJoin(Android.Graphics.Paint.Join arg0)
        {
            IExecuteWithSignature("setStrokeJoin", "(Landroid/graphics/Paint$Join;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setStrokeMiter(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetStrokeMiter(float arg0)
        {
            IExecuteWithSignature("setStrokeMiter", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setStrokeWidth(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetStrokeWidth(float arg0)
        {
            IExecuteWithSignature("setStrokeWidth", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setStyle(android.graphics.Paint.Style)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Paint.Style"/></param>
        public void SetStyle(Android.Graphics.Paint.Style arg0)
        {
            IExecuteWithSignature("setStyle", "(Landroid/graphics/Paint$Style;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setSubpixelText(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetSubpixelText(bool arg0)
        {
            IExecuteWithSignature("setSubpixelText", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setTextAlign(android.graphics.Paint.Align)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Paint.Align"/></param>
        public void SetTextAlign(Android.Graphics.Paint.Align arg0)
        {
            IExecuteWithSignature("setTextAlign", "(Landroid/graphics/Paint$Align;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setTextLocale(java.util.Locale)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Locale"/></param>
        public void SetTextLocale(Java.Util.Locale arg0)
        {
            IExecuteWithSignature("setTextLocale", "(Ljava/util/Locale;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setTextLocales(android.os.LocaleList)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.LocaleList"/></param>
        public void SetTextLocales(Android.Os.LocaleList arg0)
        {
            IExecuteWithSignature("setTextLocales", "(Landroid/os/LocaleList;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setTextScaleX(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetTextScaleX(float arg0)
        {
            IExecuteWithSignature("setTextScaleX", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setTextSize(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetTextSize(float arg0)
        {
            IExecuteWithSignature("setTextSize", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setTextSkewX(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetTextSkewX(float arg0)
        {
            IExecuteWithSignature("setTextSkewX", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setUnderlineText(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetUnderlineText(bool arg0)
        {
            IExecuteWithSignature("setUnderlineText", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Paint.html#setWordSpacing(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetWordSpacing(float arg0)
        {
            IExecuteWithSignature("setWordSpacing", "(F)V", arg0);
        }

        #endregion

        #region Nested classes
        #region Align
        public partial class Align
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Paint.Align.html#CENTER"/>
            /// </summary>
            public static Android.Graphics.Paint.Align CENTER { get { if (!_CENTERReady) { _CENTERContent = SGetField<Android.Graphics.Paint.Align>(LocalBridgeClazz, "CENTER"); _CENTERReady = true; } return _CENTERContent; } }
            private static Android.Graphics.Paint.Align _CENTERContent = default;
            private static bool _CENTERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Paint.Align.html#LEFT"/>
            /// </summary>
            public static Android.Graphics.Paint.Align LEFT { get { if (!_LEFTReady) { _LEFTContent = SGetField<Android.Graphics.Paint.Align>(LocalBridgeClazz, "LEFT"); _LEFTReady = true; } return _LEFTContent; } }
            private static Android.Graphics.Paint.Align _LEFTContent = default;
            private static bool _LEFTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Paint.Align.html#RIGHT"/>
            /// </summary>
            public static Android.Graphics.Paint.Align RIGHT { get { if (!_RIGHTReady) { _RIGHTContent = SGetField<Android.Graphics.Paint.Align>(LocalBridgeClazz, "RIGHT"); _RIGHTReady = true; } return _RIGHTContent; } }
            private static Android.Graphics.Paint.Align _RIGHTContent = default;
            private static bool _RIGHTReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Paint.Align.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Graphics.Paint.Align"/></returns>
            public static Android.Graphics.Paint.Align ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Graphics.Paint.Align>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/graphics/Paint$Align;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Paint.Align.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.Graphics.Paint.Align"/></returns>
            public static Android.Graphics.Paint.Align[] Values()
            {
                return SExecuteWithSignatureArray<Android.Graphics.Paint.Align>(LocalBridgeClazz, "values", "()[Landroid/graphics/Paint$Align;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Cap
        public partial class Cap
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Paint.Cap.html#BUTT"/>
            /// </summary>
            public static Android.Graphics.Paint.Cap BUTT { get { if (!_BUTTReady) { _BUTTContent = SGetField<Android.Graphics.Paint.Cap>(LocalBridgeClazz, "BUTT"); _BUTTReady = true; } return _BUTTContent; } }
            private static Android.Graphics.Paint.Cap _BUTTContent = default;
            private static bool _BUTTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Paint.Cap.html#ROUND"/>
            /// </summary>
            public static Android.Graphics.Paint.Cap ROUND { get { if (!_ROUNDReady) { _ROUNDContent = SGetField<Android.Graphics.Paint.Cap>(LocalBridgeClazz, "ROUND"); _ROUNDReady = true; } return _ROUNDContent; } }
            private static Android.Graphics.Paint.Cap _ROUNDContent = default;
            private static bool _ROUNDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Paint.Cap.html#SQUARE"/>
            /// </summary>
            public static Android.Graphics.Paint.Cap SQUARE { get { if (!_SQUAREReady) { _SQUAREContent = SGetField<Android.Graphics.Paint.Cap>(LocalBridgeClazz, "SQUARE"); _SQUAREReady = true; } return _SQUAREContent; } }
            private static Android.Graphics.Paint.Cap _SQUAREContent = default;
            private static bool _SQUAREReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Paint.Cap.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Graphics.Paint.Cap"/></returns>
            public static Android.Graphics.Paint.Cap ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Graphics.Paint.Cap>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/graphics/Paint$Cap;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Paint.Cap.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.Graphics.Paint.Cap"/></returns>
            public static Android.Graphics.Paint.Cap[] Values()
            {
                return SExecuteWithSignatureArray<Android.Graphics.Paint.Cap>(LocalBridgeClazz, "values", "()[Landroid/graphics/Paint$Cap;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region FontMetrics
        public partial class FontMetrics
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Paint.FontMetrics.html#ascent"/>
            /// </summary>
            public float ascent { get { return IGetField<float>("ascent"); } set { ISetField("ascent", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Paint.FontMetrics.html#bottom"/>
            /// </summary>
            public float bottom { get { return IGetField<float>("bottom"); } set { ISetField("bottom", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Paint.FontMetrics.html#descent"/>
            /// </summary>
            public float descent { get { return IGetField<float>("descent"); } set { ISetField("descent", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Paint.FontMetrics.html#leading"/>
            /// </summary>
            public float leading { get { return IGetField<float>("leading"); } set { ISetField("leading", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Paint.FontMetrics.html#top"/>
            /// </summary>
            public float top { get { return IGetField<float>("top"); } set { ISetField("top", value); } }

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region FontMetricsInt
        public partial class FontMetricsInt
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Paint.FontMetricsInt.html#ascent"/>
            /// </summary>
            public int ascent { get { return IGetField<int>("ascent"); } set { ISetField("ascent", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Paint.FontMetricsInt.html#bottom"/>
            /// </summary>
            public int bottom { get { return IGetField<int>("bottom"); } set { ISetField("bottom", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Paint.FontMetricsInt.html#descent"/>
            /// </summary>
            public int descent { get { return IGetField<int>("descent"); } set { ISetField("descent", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Paint.FontMetricsInt.html#leading"/>
            /// </summary>
            public int leading { get { return IGetField<int>("leading"); } set { ISetField("leading", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Paint.FontMetricsInt.html#top"/>
            /// </summary>
            public int top { get { return IGetField<int>("top"); } set { ISetField("top", value); } }

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Join
        public partial class Join
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Paint.Join.html#BEVEL"/>
            /// </summary>
            public static Android.Graphics.Paint.Join BEVEL { get { if (!_BEVELReady) { _BEVELContent = SGetField<Android.Graphics.Paint.Join>(LocalBridgeClazz, "BEVEL"); _BEVELReady = true; } return _BEVELContent; } }
            private static Android.Graphics.Paint.Join _BEVELContent = default;
            private static bool _BEVELReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Paint.Join.html#MITER"/>
            /// </summary>
            public static Android.Graphics.Paint.Join MITER { get { if (!_MITERReady) { _MITERContent = SGetField<Android.Graphics.Paint.Join>(LocalBridgeClazz, "MITER"); _MITERReady = true; } return _MITERContent; } }
            private static Android.Graphics.Paint.Join _MITERContent = default;
            private static bool _MITERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Paint.Join.html#ROUND"/>
            /// </summary>
            public static Android.Graphics.Paint.Join ROUND { get { if (!_ROUNDReady) { _ROUNDContent = SGetField<Android.Graphics.Paint.Join>(LocalBridgeClazz, "ROUND"); _ROUNDReady = true; } return _ROUNDContent; } }
            private static Android.Graphics.Paint.Join _ROUNDContent = default;
            private static bool _ROUNDReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Paint.Join.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Graphics.Paint.Join"/></returns>
            public static Android.Graphics.Paint.Join ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Graphics.Paint.Join>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/graphics/Paint$Join;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Paint.Join.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.Graphics.Paint.Join"/></returns>
            public static Android.Graphics.Paint.Join[] Values()
            {
                return SExecuteWithSignatureArray<Android.Graphics.Paint.Join>(LocalBridgeClazz, "values", "()[Landroid/graphics/Paint$Join;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Style
        public partial class Style
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Paint.Style.html#FILL"/>
            /// </summary>
            public static Android.Graphics.Paint.Style FILL { get { if (!_FILLReady) { _FILLContent = SGetField<Android.Graphics.Paint.Style>(LocalBridgeClazz, "FILL"); _FILLReady = true; } return _FILLContent; } }
            private static Android.Graphics.Paint.Style _FILLContent = default;
            private static bool _FILLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Paint.Style.html#FILL_AND_STROKE"/>
            /// </summary>
            public static Android.Graphics.Paint.Style FILL_AND_STROKE { get { if (!_FILL_AND_STROKEReady) { _FILL_AND_STROKEContent = SGetField<Android.Graphics.Paint.Style>(LocalBridgeClazz, "FILL_AND_STROKE"); _FILL_AND_STROKEReady = true; } return _FILL_AND_STROKEContent; } }
            private static Android.Graphics.Paint.Style _FILL_AND_STROKEContent = default;
            private static bool _FILL_AND_STROKEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Paint.Style.html#STROKE"/>
            /// </summary>
            public static Android.Graphics.Paint.Style STROKE { get { if (!_STROKEReady) { _STROKEContent = SGetField<Android.Graphics.Paint.Style>(LocalBridgeClazz, "STROKE"); _STROKEReady = true; } return _STROKEContent; } }
            private static Android.Graphics.Paint.Style _STROKEContent = default;
            private static bool _STROKEReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Paint.Style.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Graphics.Paint.Style"/></returns>
            public static Android.Graphics.Paint.Style ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Graphics.Paint.Style>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/graphics/Paint$Style;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Paint.Style.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.Graphics.Paint.Style"/></returns>
            public static Android.Graphics.Paint.Style[] Values()
            {
                return SExecuteWithSignatureArray<Android.Graphics.Paint.Style>(LocalBridgeClazz, "values", "()[Landroid/graphics/Paint$Style;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
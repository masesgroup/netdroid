/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Graphics
{
    #region Canvas declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html"/>
    /// </summary>
    public partial class Canvas : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Canvas>
    {
        const string _bridgeClassName = "android.graphics.Canvas";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public Canvas() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public Canvas(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region EdgeType declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.EdgeType.html"/>
        /// </summary>
        [global::System.Obsolete()]
        public partial class EdgeType : Java.Lang.Enum<Android.Graphics.Canvas.EdgeType>
        {
            const string _bridgeClassName = "android.graphics.Canvas$EdgeType";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public EdgeType() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public EdgeType(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region VertexMode declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.VertexMode.html"/>
        /// </summary>
        public partial class VertexMode : Java.Lang.Enum<Android.Graphics.Canvas.VertexMode>
        {
            const string _bridgeClassName = "android.graphics.Canvas$VertexMode";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public VertexMode() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public VertexMode(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region Canvas implementation
    public partial class Canvas
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#%3Cinit%3E(android.graphics.Bitmap)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Bitmap"/></param>
        public Canvas(Android.Graphics.Bitmap arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#ALL_SAVE_FLAG"/>
        /// </summary>
        public static int ALL_SAVE_FLAG { get { if (!_ALL_SAVE_FLAGReady) { _ALL_SAVE_FLAGContent = SGetField<int>(LocalBridgeClazz, "ALL_SAVE_FLAG"); _ALL_SAVE_FLAGReady = true; } return _ALL_SAVE_FLAGContent; } }
        private static int _ALL_SAVE_FLAGContent = default;
        private static bool _ALL_SAVE_FLAGReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#getDrawFilter()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.DrawFilter"/></returns>
        public Android.Graphics.DrawFilter GetDrawFilter()
        {
            return IExecuteWithSignature<Android.Graphics.DrawFilter>("getDrawFilter", "()Landroid/graphics/DrawFilter;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#clipOutPath(android.graphics.Path)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Path"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ClipOutPath(Android.Graphics.Path arg0)
        {
            return IExecuteWithSignature<bool>("clipOutPath", "(Landroid/graphics/Path;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#clipOutRect(android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ClipOutRect(Android.Graphics.Rect arg0)
        {
            return IExecuteWithSignature<bool>("clipOutRect", "(Landroid/graphics/Rect;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#clipOutRect(android.graphics.RectF)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.RectF"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ClipOutRect(Android.Graphics.RectF arg0)
        {
            return IExecuteWithSignature<bool>("clipOutRect", "(Landroid/graphics/RectF;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#clipOutRect(float,float,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ClipOutRect(float arg0, float arg1, float arg2, float arg3)
        {
            return IExecute<bool>("clipOutRect", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#clipOutRect(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ClipOutRect(int arg0, int arg1, int arg2, int arg3)
        {
            return IExecute<bool>("clipOutRect", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#clipPath(android.graphics.Path,android.graphics.Region.Op)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Path"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Region.Op"/></param>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool ClipPath(Android.Graphics.Path arg0, Android.Graphics.Region.Op arg1)
        {
            return IExecute<bool>("clipPath", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#clipPath(android.graphics.Path)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Path"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ClipPath(Android.Graphics.Path arg0)
        {
            return IExecuteWithSignature<bool>("clipPath", "(Landroid/graphics/Path;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#clipRect(android.graphics.Rect,android.graphics.Region.Op)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Region.Op"/></param>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool ClipRect(Android.Graphics.Rect arg0, Android.Graphics.Region.Op arg1)
        {
            return IExecute<bool>("clipRect", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#clipRect(android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ClipRect(Android.Graphics.Rect arg0)
        {
            return IExecuteWithSignature<bool>("clipRect", "(Landroid/graphics/Rect;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#clipRect(android.graphics.RectF,android.graphics.Region.Op)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.RectF"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Region.Op"/></param>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool ClipRect(Android.Graphics.RectF arg0, Android.Graphics.Region.Op arg1)
        {
            return IExecute<bool>("clipRect", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#clipRect(android.graphics.RectF)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.RectF"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ClipRect(Android.Graphics.RectF arg0)
        {
            return IExecuteWithSignature<bool>("clipRect", "(Landroid/graphics/RectF;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#clipRect(float,float,float,float,android.graphics.Region.Op)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="Android.Graphics.Region.Op"/></param>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool ClipRect(float arg0, float arg1, float arg2, float arg3, Android.Graphics.Region.Op arg4)
        {
            return IExecute<bool>("clipRect", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#clipRect(float,float,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ClipRect(float arg0, float arg1, float arg2, float arg3)
        {
            return IExecute<bool>("clipRect", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#clipRect(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ClipRect(int arg0, int arg1, int arg2, int arg3)
        {
            return IExecute<bool>("clipRect", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#getClipBounds(android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool GetClipBounds(Android.Graphics.Rect arg0)
        {
            return IExecuteWithSignature<bool>("getClipBounds", "(Landroid/graphics/Rect;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#isHardwareAccelerated()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsHardwareAccelerated()
        {
            return IExecuteWithSignature<bool>("isHardwareAccelerated", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#isOpaque()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsOpaque()
        {
            return IExecuteWithSignature<bool>("isOpaque", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#quickReject(android.graphics.Path,android.graphics.Canvas.EdgeType)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Path"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Canvas.EdgeType"/></param>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool QuickReject(Android.Graphics.Path arg0, Android.Graphics.Canvas.EdgeType arg1)
        {
            return IExecute<bool>("quickReject", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#quickReject(android.graphics.Path)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Path"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool QuickReject(Android.Graphics.Path arg0)
        {
            return IExecuteWithSignature<bool>("quickReject", "(Landroid/graphics/Path;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#quickReject(android.graphics.RectF,android.graphics.Canvas.EdgeType)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.RectF"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Canvas.EdgeType"/></param>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool QuickReject(Android.Graphics.RectF arg0, Android.Graphics.Canvas.EdgeType arg1)
        {
            return IExecute<bool>("quickReject", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#quickReject(android.graphics.RectF)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.RectF"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool QuickReject(Android.Graphics.RectF arg0)
        {
            return IExecuteWithSignature<bool>("quickReject", "(Landroid/graphics/RectF;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#quickReject(float,float,float,float,android.graphics.Canvas.EdgeType)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="Android.Graphics.Canvas.EdgeType"/></param>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool QuickReject(float arg0, float arg1, float arg2, float arg3, Android.Graphics.Canvas.EdgeType arg4)
        {
            return IExecute<bool>("quickReject", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#quickReject(float,float,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool QuickReject(float arg0, float arg1, float arg2, float arg3)
        {
            return IExecute<bool>("quickReject", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#getMatrix()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Matrix"/></returns>
        [global::System.Obsolete()]
        public Android.Graphics.Matrix GetMatrix()
        {
            return IExecuteWithSignature<Android.Graphics.Matrix>("getMatrix", "()Landroid/graphics/Matrix;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#getClipBounds()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Rect"/></returns>
        public Android.Graphics.Rect GetClipBounds()
        {
            return IExecuteWithSignature<Android.Graphics.Rect>("getClipBounds", "()Landroid/graphics/Rect;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#rotate(float,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        public void Rotate(float arg0, float arg1, float arg2)
        {
            IExecute("rotate", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#scale(float,float,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        public void Scale(float arg0, float arg1, float arg2, float arg3)
        {
            IExecute("scale", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#getDensity()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetDensity()
        {
            return IExecuteWithSignature<int>("getDensity", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#getHeight()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetHeight()
        {
            return IExecuteWithSignature<int>("getHeight", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#getMaximumBitmapHeight()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMaximumBitmapHeight()
        {
            return IExecuteWithSignature<int>("getMaximumBitmapHeight", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#getMaximumBitmapWidth()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMaximumBitmapWidth()
        {
            return IExecuteWithSignature<int>("getMaximumBitmapWidth", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#getSaveCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetSaveCount()
        {
            return IExecuteWithSignature<int>("getSaveCount", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#getWidth()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetWidth()
        {
            return IExecuteWithSignature<int>("getWidth", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#save()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int Save()
        {
            return IExecuteWithSignature<int>("save", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#saveLayer(android.graphics.RectF,android.graphics.Paint,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.RectF"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Paint"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int SaveLayer(Android.Graphics.RectF arg0, Android.Graphics.Paint arg1, int arg2)
        {
            return IExecute<int>("saveLayer", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#saveLayer(android.graphics.RectF,android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.RectF"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Paint"/></param>
        /// <returns><see cref="int"/></returns>
        public int SaveLayer(Android.Graphics.RectF arg0, Android.Graphics.Paint arg1)
        {
            return IExecute<int>("saveLayer", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#saveLayer(float,float,float,float,android.graphics.Paint,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="Android.Graphics.Paint"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int SaveLayer(float arg0, float arg1, float arg2, float arg3, Android.Graphics.Paint arg4, int arg5)
        {
            return IExecute<int>("saveLayer", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#saveLayer(float,float,float,float,android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="Android.Graphics.Paint"/></param>
        /// <returns><see cref="int"/></returns>
        public int SaveLayer(float arg0, float arg1, float arg2, float arg3, Android.Graphics.Paint arg4)
        {
            return IExecute<int>("saveLayer", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#saveLayerAlpha(android.graphics.RectF,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.RectF"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int SaveLayerAlpha(Android.Graphics.RectF arg0, int arg1, int arg2)
        {
            return IExecute<int>("saveLayerAlpha", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#saveLayerAlpha(android.graphics.RectF,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.RectF"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int SaveLayerAlpha(Android.Graphics.RectF arg0, int arg1)
        {
            return IExecute<int>("saveLayerAlpha", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#saveLayerAlpha(float,float,float,float,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int SaveLayerAlpha(float arg0, float arg1, float arg2, float arg3, int arg4, int arg5)
        {
            return IExecute<int>("saveLayerAlpha", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#saveLayerAlpha(float,float,float,float,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int SaveLayerAlpha(float arg0, float arg1, float arg2, float arg3, int arg4)
        {
            return IExecute<int>("saveLayerAlpha", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#clipOutShader(android.graphics.Shader)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Shader"/></param>
        public void ClipOutShader(Android.Graphics.Shader arg0)
        {
            IExecuteWithSignature("clipOutShader", "(Landroid/graphics/Shader;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#clipShader(android.graphics.Shader)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Shader"/></param>
        public void ClipShader(Android.Graphics.Shader arg0)
        {
            IExecuteWithSignature("clipShader", "(Landroid/graphics/Shader;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#concat(android.graphics.Matrix)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Matrix"/></param>
        public void Concat(Android.Graphics.Matrix arg0)
        {
            IExecuteWithSignature("concat", "(Landroid/graphics/Matrix;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#concat(android.graphics.Matrix44)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Matrix44"/></param>
        public void Concat(Android.Graphics.Matrix44 arg0)
        {
            IExecuteWithSignature("concat", "(Landroid/graphics/Matrix44;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#disableZ()"/>
        /// </summary>
        public void DisableZ()
        {
            IExecuteWithSignature("disableZ", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawArc(android.graphics.RectF,float,float,boolean,android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.RectF"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <param name="arg4"><see cref="Android.Graphics.Paint"/></param>
        public void DrawArc(Android.Graphics.RectF arg0, float arg1, float arg2, bool arg3, Android.Graphics.Paint arg4)
        {
            IExecute("drawArc", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawArc(float,float,float,float,float,float,boolean,android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        /// <param name="arg5"><see cref="float"/></param>
        /// <param name="arg6"><see cref="bool"/></param>
        /// <param name="arg7"><see cref="Android.Graphics.Paint"/></param>
        public void DrawArc(float arg0, float arg1, float arg2, float arg3, float arg4, float arg5, bool arg6, Android.Graphics.Paint arg7)
        {
            IExecute("drawArc", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawARGB(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void DrawARGB(int arg0, int arg1, int arg2, int arg3)
        {
            IExecute("drawARGB", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Bitmap"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Matrix"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.Paint"/></param>
        public void DrawBitmap(Android.Graphics.Bitmap arg0, Android.Graphics.Matrix arg1, Android.Graphics.Paint arg2)
        {
            IExecute("drawBitmap", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect,android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Bitmap"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Rect"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.Rect"/></param>
        /// <param name="arg3"><see cref="Android.Graphics.Paint"/></param>
        public void DrawBitmap(Android.Graphics.Bitmap arg0, Android.Graphics.Rect arg1, Android.Graphics.Rect arg2, Android.Graphics.Paint arg3)
        {
            IExecute("drawBitmap", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.RectF,android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Bitmap"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Rect"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.RectF"/></param>
        /// <param name="arg3"><see cref="Android.Graphics.Paint"/></param>
        public void DrawBitmap(Android.Graphics.Bitmap arg0, Android.Graphics.Rect arg1, Android.Graphics.RectF arg2, Android.Graphics.Paint arg3)
        {
            IExecute("drawBitmap", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Bitmap"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="Android.Graphics.Paint"/></param>
        public void DrawBitmap(Android.Graphics.Bitmap arg0, float arg1, float arg2, Android.Graphics.Paint arg3)
        {
            IExecute("drawBitmap", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawBitmap(int[],int,int,float,float,int,int,boolean,android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="bool"/></param>
        /// <param name="arg8"><see cref="Android.Graphics.Paint"/></param>
        [global::System.Obsolete()]
        public void DrawBitmap(int[] arg0, int arg1, int arg2, float arg3, float arg4, int arg5, int arg6, bool arg7, Android.Graphics.Paint arg8)
        {
            IExecute("drawBitmap", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawBitmap(int[],int,int,int,int,int,int,boolean,android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="bool"/></param>
        /// <param name="arg8"><see cref="Android.Graphics.Paint"/></param>
        [global::System.Obsolete()]
        public void DrawBitmap(int[] arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, bool arg7, Android.Graphics.Paint arg8)
        {
            IExecute("drawBitmap", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawBitmapMesh(android.graphics.Bitmap,int,int,float[],int,int[],int,android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Bitmap"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="Android.Graphics.Paint"/></param>
        public void DrawBitmapMesh(Android.Graphics.Bitmap arg0, int arg1, int arg2, float[] arg3, int arg4, int[] arg5, int arg6, Android.Graphics.Paint arg7)
        {
            IExecute("drawBitmapMesh", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawCircle(float,float,float,android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="Android.Graphics.Paint"/></param>
        public void DrawCircle(float arg0, float arg1, float arg2, Android.Graphics.Paint arg3)
        {
            IExecute("drawCircle", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawColor(int,android.graphics.BlendMode)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.BlendMode"/></param>
        public void DrawColor(int arg0, Android.Graphics.BlendMode arg1)
        {
            IExecute("drawColor", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawColor(int,android.graphics.PorterDuff.Mode)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.PorterDuff.Mode"/></param>
        public void DrawColor(int arg0, Android.Graphics.PorterDuff.Mode arg1)
        {
            IExecute("drawColor", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawColor(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void DrawColor(int arg0)
        {
            IExecuteWithSignature("drawColor", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawColor(long,android.graphics.BlendMode)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.BlendMode"/></param>
        public void DrawColor(long arg0, Android.Graphics.BlendMode arg1)
        {
            IExecute("drawColor", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawColor(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        public void DrawColor(long arg0)
        {
            IExecuteWithSignature("drawColor", "(J)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawDoubleRoundRect(android.graphics.RectF,float,float,android.graphics.RectF,float,float,android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.RectF"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="Android.Graphics.RectF"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        /// <param name="arg5"><see cref="float"/></param>
        /// <param name="arg6"><see cref="Android.Graphics.Paint"/></param>
        public void DrawDoubleRoundRect(Android.Graphics.RectF arg0, float arg1, float arg2, Android.Graphics.RectF arg3, float arg4, float arg5, Android.Graphics.Paint arg6)
        {
            IExecute("drawDoubleRoundRect", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawDoubleRoundRect(android.graphics.RectF,float[],android.graphics.RectF,float[],android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.RectF"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.RectF"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="Android.Graphics.Paint"/></param>
        public void DrawDoubleRoundRect(Android.Graphics.RectF arg0, float[] arg1, Android.Graphics.RectF arg2, float[] arg3, Android.Graphics.Paint arg4)
        {
            IExecute("drawDoubleRoundRect", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawGlyphs(int[],int,float[],int,int,android.graphics.fonts.Font,android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="Android.Graphics.Fonts.Font"/></param>
        /// <param name="arg6"><see cref="Android.Graphics.Paint"/></param>
        public void DrawGlyphs(int[] arg0, int arg1, float[] arg2, int arg3, int arg4, Android.Graphics.Fonts.Font arg5, Android.Graphics.Paint arg6)
        {
            IExecute("drawGlyphs", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawLine(float,float,float,float,android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="Android.Graphics.Paint"/></param>
        public void DrawLine(float arg0, float arg1, float arg2, float arg3, Android.Graphics.Paint arg4)
        {
            IExecute("drawLine", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawLines(float[],android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Paint"/></param>
        public void DrawLines(float[] arg0, Android.Graphics.Paint arg1)
        {
            IExecute("drawLines", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawLines(float[],int,int,android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Android.Graphics.Paint"/></param>
        public void DrawLines(float[] arg0, int arg1, int arg2, Android.Graphics.Paint arg3)
        {
            IExecute("drawLines", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawMesh(android.graphics.Mesh,android.graphics.BlendMode,android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Mesh"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.BlendMode"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.Paint"/></param>
        public void DrawMesh(Android.Graphics.Mesh arg0, Android.Graphics.BlendMode arg1, Android.Graphics.Paint arg2)
        {
            IExecute("drawMesh", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawOval(android.graphics.RectF,android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.RectF"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Paint"/></param>
        public void DrawOval(Android.Graphics.RectF arg0, Android.Graphics.Paint arg1)
        {
            IExecute("drawOval", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawOval(float,float,float,float,android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="Android.Graphics.Paint"/></param>
        public void DrawOval(float arg0, float arg1, float arg2, float arg3, Android.Graphics.Paint arg4)
        {
            IExecute("drawOval", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawPaint(android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Paint"/></param>
        public void DrawPaint(Android.Graphics.Paint arg0)
        {
            IExecuteWithSignature("drawPaint", "(Landroid/graphics/Paint;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawPatch(android.graphics.NinePatch,android.graphics.Rect,android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.NinePatch"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Rect"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.Paint"/></param>
        public void DrawPatch(Android.Graphics.NinePatch arg0, Android.Graphics.Rect arg1, Android.Graphics.Paint arg2)
        {
            IExecute("drawPatch", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawPatch(android.graphics.NinePatch,android.graphics.RectF,android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.NinePatch"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.RectF"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.Paint"/></param>
        public void DrawPatch(Android.Graphics.NinePatch arg0, Android.Graphics.RectF arg1, Android.Graphics.Paint arg2)
        {
            IExecute("drawPatch", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawPath(android.graphics.Path,android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Path"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Paint"/></param>
        public void DrawPath(Android.Graphics.Path arg0, Android.Graphics.Paint arg1)
        {
            IExecute("drawPath", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawPicture(android.graphics.Picture,android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Picture"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Rect"/></param>
        public void DrawPicture(Android.Graphics.Picture arg0, Android.Graphics.Rect arg1)
        {
            IExecute("drawPicture", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawPicture(android.graphics.Picture,android.graphics.RectF)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Picture"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.RectF"/></param>
        public void DrawPicture(Android.Graphics.Picture arg0, Android.Graphics.RectF arg1)
        {
            IExecute("drawPicture", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawPicture(android.graphics.Picture)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Picture"/></param>
        public void DrawPicture(Android.Graphics.Picture arg0)
        {
            IExecuteWithSignature("drawPicture", "(Landroid/graphics/Picture;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawPoint(float,float,android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.Paint"/></param>
        public void DrawPoint(float arg0, float arg1, Android.Graphics.Paint arg2)
        {
            IExecute("drawPoint", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawPoints(float[],android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Paint"/></param>
        public void DrawPoints(float[] arg0, Android.Graphics.Paint arg1)
        {
            IExecute("drawPoints", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawPoints(float[],int,int,android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Android.Graphics.Paint"/></param>
        public void DrawPoints(float[] arg0, int arg1, int arg2, Android.Graphics.Paint arg3)
        {
            IExecute("drawPoints", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawPosText(char[],int,int,float[],android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="Android.Graphics.Paint"/></param>
        [global::System.Obsolete()]
        public void DrawPosText(char[] arg0, int arg1, int arg2, float[] arg3, Android.Graphics.Paint arg4)
        {
            IExecute("drawPosText", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawPosText(java.lang.String,float[],android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.Paint"/></param>
        [global::System.Obsolete()]
        public void DrawPosText(Java.Lang.String arg0, float[] arg1, Android.Graphics.Paint arg2)
        {
            IExecute("drawPosText", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawRect(android.graphics.Rect,android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Paint"/></param>
        public void DrawRect(Android.Graphics.Rect arg0, Android.Graphics.Paint arg1)
        {
            IExecute("drawRect", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawRect(android.graphics.RectF,android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.RectF"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Paint"/></param>
        public void DrawRect(Android.Graphics.RectF arg0, Android.Graphics.Paint arg1)
        {
            IExecute("drawRect", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawRect(float,float,float,float,android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="Android.Graphics.Paint"/></param>
        public void DrawRect(float arg0, float arg1, float arg2, float arg3, Android.Graphics.Paint arg4)
        {
            IExecute("drawRect", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawRenderNode(android.graphics.RenderNode)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.RenderNode"/></param>
        public void DrawRenderNode(Android.Graphics.RenderNode arg0)
        {
            IExecuteWithSignature("drawRenderNode", "(Landroid/graphics/RenderNode;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawRGB(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void DrawRGB(int arg0, int arg1, int arg2)
        {
            IExecute("drawRGB", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawRoundRect(android.graphics.RectF,float,float,android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.RectF"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="Android.Graphics.Paint"/></param>
        public void DrawRoundRect(Android.Graphics.RectF arg0, float arg1, float arg2, Android.Graphics.Paint arg3)
        {
            IExecute("drawRoundRect", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawRoundRect(float,float,float,float,float,float,android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        /// <param name="arg5"><see cref="float"/></param>
        /// <param name="arg6"><see cref="Android.Graphics.Paint"/></param>
        public void DrawRoundRect(float arg0, float arg1, float arg2, float arg3, float arg4, float arg5, Android.Graphics.Paint arg6)
        {
            IExecute("drawRoundRect", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawText(char[],int,int,float,float,android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        /// <param name="arg5"><see cref="Android.Graphics.Paint"/></param>
        public void DrawText(char[] arg0, int arg1, int arg2, float arg3, float arg4, Android.Graphics.Paint arg5)
        {
            IExecute("drawText", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawText(java.lang.CharSequence,int,int,float,float,android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        /// <param name="arg5"><see cref="Android.Graphics.Paint"/></param>
        public void DrawText(Java.Lang.CharSequence arg0, int arg1, int arg2, float arg3, float arg4, Android.Graphics.Paint arg5)
        {
            IExecute("drawText", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawText(java.lang.String,float,float,android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="Android.Graphics.Paint"/></param>
        public void DrawText(Java.Lang.String arg0, float arg1, float arg2, Android.Graphics.Paint arg3)
        {
            IExecute("drawText", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawText(java.lang.String,int,int,float,float,android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        /// <param name="arg5"><see cref="Android.Graphics.Paint"/></param>
        public void DrawText(Java.Lang.String arg0, int arg1, int arg2, float arg3, float arg4, Android.Graphics.Paint arg5)
        {
            IExecute("drawText", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawTextOnPath(char[],int,int,android.graphics.Path,float,float,android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Android.Graphics.Path"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        /// <param name="arg5"><see cref="float"/></param>
        /// <param name="arg6"><see cref="Android.Graphics.Paint"/></param>
        public void DrawTextOnPath(char[] arg0, int arg1, int arg2, Android.Graphics.Path arg3, float arg4, float arg5, Android.Graphics.Paint arg6)
        {
            IExecute("drawTextOnPath", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawTextOnPath(java.lang.String,android.graphics.Path,float,float,android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Path"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="Android.Graphics.Paint"/></param>
        public void DrawTextOnPath(Java.Lang.String arg0, Android.Graphics.Path arg1, float arg2, float arg3, Android.Graphics.Paint arg4)
        {
            IExecute("drawTextOnPath", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawTextRun(android.graphics.text.MeasuredText,int,int,int,int,float,float,boolean,android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Text.MeasuredText"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="float"/></param>
        /// <param name="arg6"><see cref="float"/></param>
        /// <param name="arg7"><see cref="bool"/></param>
        /// <param name="arg8"><see cref="Android.Graphics.Paint"/></param>
        public void DrawTextRun(Android.Graphics.Text.MeasuredText arg0, int arg1, int arg2, int arg3, int arg4, float arg5, float arg6, bool arg7, Android.Graphics.Paint arg8)
        {
            IExecute("drawTextRun", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawTextRun(char[],int,int,int,int,float,float,boolean,android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="float"/></param>
        /// <param name="arg6"><see cref="float"/></param>
        /// <param name="arg7"><see cref="bool"/></param>
        /// <param name="arg8"><see cref="Android.Graphics.Paint"/></param>
        public void DrawTextRun(char[] arg0, int arg1, int arg2, int arg3, int arg4, float arg5, float arg6, bool arg7, Android.Graphics.Paint arg8)
        {
            IExecute("drawTextRun", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawTextRun(java.lang.CharSequence,int,int,int,int,float,float,boolean,android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="float"/></param>
        /// <param name="arg6"><see cref="float"/></param>
        /// <param name="arg7"><see cref="bool"/></param>
        /// <param name="arg8"><see cref="Android.Graphics.Paint"/></param>
        public void DrawTextRun(Java.Lang.CharSequence arg0, int arg1, int arg2, int arg3, int arg4, float arg5, float arg6, bool arg7, Android.Graphics.Paint arg8)
        {
            IExecute("drawTextRun", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#drawVertices(android.graphics.Canvas.VertexMode,int,float[],int,float[],int,int[],int,short[],int,int,android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Canvas.VertexMode"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        /// <param name="arg8"><see cref="short"/></param>
        /// <param name="arg9"><see cref="int"/></param>
        /// <param name="arg10"><see cref="int"/></param>
        /// <param name="arg11"><see cref="Android.Graphics.Paint"/></param>
        public void DrawVertices(Android.Graphics.Canvas.VertexMode arg0, int arg1, float[] arg2, int arg3, float[] arg4, int arg5, int[] arg6, int arg7, short[] arg8, int arg9, int arg10, Android.Graphics.Paint arg11)
        {
            IExecute("drawVertices", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#enableZ()"/>
        /// </summary>
        public void EnableZ()
        {
            IExecuteWithSignature("enableZ", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#getMatrix(android.graphics.Matrix)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Matrix"/></param>
        [global::System.Obsolete()]
        public void GetMatrix(Android.Graphics.Matrix arg0)
        {
            IExecuteWithSignature("getMatrix", "(Landroid/graphics/Matrix;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#restore()"/>
        /// </summary>
        public void Restore()
        {
            IExecuteWithSignature("restore", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#restoreToCount(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void RestoreToCount(int arg0)
        {
            IExecuteWithSignature("restoreToCount", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#rotate(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void Rotate(float arg0)
        {
            IExecuteWithSignature("rotate", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#scale(float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public void Scale(float arg0, float arg1)
        {
            IExecute("scale", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#setBitmap(android.graphics.Bitmap)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Bitmap"/></param>
        public void SetBitmap(Android.Graphics.Bitmap arg0)
        {
            IExecuteWithSignature("setBitmap", "(Landroid/graphics/Bitmap;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#setDensity(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetDensity(int arg0)
        {
            IExecuteWithSignature("setDensity", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#setDrawFilter(android.graphics.DrawFilter)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.DrawFilter"/></param>
        public void SetDrawFilter(Android.Graphics.DrawFilter arg0)
        {
            IExecuteWithSignature("setDrawFilter", "(Landroid/graphics/DrawFilter;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#setMatrix(android.graphics.Matrix)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Matrix"/></param>
        public void SetMatrix(Android.Graphics.Matrix arg0)
        {
            IExecuteWithSignature("setMatrix", "(Landroid/graphics/Matrix;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#skew(float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public void Skew(float arg0, float arg1)
        {
            IExecute("skew", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/Canvas.html#translate(float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public void Translate(float arg0, float arg1)
        {
            IExecute("translate", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region EdgeType implementation
        public partial class EdgeType
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Canvas.EdgeType.html#AA"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.Graphics.Canvas.EdgeType AA { get { if (!_AAReady) { _AAContent = SGetField<Android.Graphics.Canvas.EdgeType>(LocalBridgeClazz, "AA"); _AAReady = true; } return _AAContent; } }
            private static Android.Graphics.Canvas.EdgeType _AAContent = default;
            private static bool _AAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Canvas.EdgeType.html#BW"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.Graphics.Canvas.EdgeType BW { get { if (!_BWReady) { _BWContent = SGetField<Android.Graphics.Canvas.EdgeType>(LocalBridgeClazz, "BW"); _BWReady = true; } return _BWContent; } }
            private static Android.Graphics.Canvas.EdgeType _BWContent = default;
            private static bool _BWReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Canvas.EdgeType.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Graphics.Canvas.EdgeType"/></returns>
            public static Android.Graphics.Canvas.EdgeType ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Graphics.Canvas.EdgeType>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/graphics/Canvas$EdgeType;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Canvas.EdgeType.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.Graphics.Canvas.EdgeType"/></returns>
            public static Android.Graphics.Canvas.EdgeType[] Values()
            {
                return SExecuteWithSignatureArray<Android.Graphics.Canvas.EdgeType>(LocalBridgeClazz, "values", "()[Landroid/graphics/Canvas$EdgeType;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region VertexMode implementation
        public partial class VertexMode
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Canvas.VertexMode.html#TRIANGLE_FAN"/>
            /// </summary>
            public static Android.Graphics.Canvas.VertexMode TRIANGLE_FAN { get { if (!_TRIANGLE_FANReady) { _TRIANGLE_FANContent = SGetField<Android.Graphics.Canvas.VertexMode>(LocalBridgeClazz, "TRIANGLE_FAN"); _TRIANGLE_FANReady = true; } return _TRIANGLE_FANContent; } }
            private static Android.Graphics.Canvas.VertexMode _TRIANGLE_FANContent = default;
            private static bool _TRIANGLE_FANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Canvas.VertexMode.html#TRIANGLE_STRIP"/>
            /// </summary>
            public static Android.Graphics.Canvas.VertexMode TRIANGLE_STRIP { get { if (!_TRIANGLE_STRIPReady) { _TRIANGLE_STRIPContent = SGetField<Android.Graphics.Canvas.VertexMode>(LocalBridgeClazz, "TRIANGLE_STRIP"); _TRIANGLE_STRIPReady = true; } return _TRIANGLE_STRIPContent; } }
            private static Android.Graphics.Canvas.VertexMode _TRIANGLE_STRIPContent = default;
            private static bool _TRIANGLE_STRIPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Canvas.VertexMode.html#TRIANGLES"/>
            /// </summary>
            public static Android.Graphics.Canvas.VertexMode TRIANGLES { get { if (!_TRIANGLESReady) { _TRIANGLESContent = SGetField<Android.Graphics.Canvas.VertexMode>(LocalBridgeClazz, "TRIANGLES"); _TRIANGLESReady = true; } return _TRIANGLESContent; } }
            private static Android.Graphics.Canvas.VertexMode _TRIANGLESContent = default;
            private static bool _TRIANGLESReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Canvas.VertexMode.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Graphics.Canvas.VertexMode"/></returns>
            public static Android.Graphics.Canvas.VertexMode ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Graphics.Canvas.VertexMode>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/graphics/Canvas$VertexMode;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/Canvas.VertexMode.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.Graphics.Canvas.VertexMode"/></returns>
            public static Android.Graphics.Canvas.VertexMode[] Values()
            {
                return SExecuteWithSignatureArray<Android.Graphics.Canvas.VertexMode>(LocalBridgeClazz, "values", "()[Landroid/graphics/Canvas$VertexMode;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
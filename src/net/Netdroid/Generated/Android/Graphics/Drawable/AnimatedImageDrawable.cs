/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Graphics.Drawable
{
    #region AnimatedImageDrawable declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/graphics/drawable/AnimatedImageDrawable.html"/>
    /// </summary>
    public partial class AnimatedImageDrawable : Android.Graphics.Drawable.Drawable
    {
        const string _bridgeClassName = "android.graphics.drawable.AnimatedImageDrawable";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public AnimatedImageDrawable() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public AnimatedImageDrawable(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region AnimatedImageDrawable implementation
    public partial class AnimatedImageDrawable
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Android.Graphics.Drawable.AnimatedImageDrawable"/> to <see cref="Android.Graphics.Drawable.Animatable2"/>
        /// </summary>
        public static implicit operator Android.Graphics.Drawable.Animatable2(Android.Graphics.Drawable.AnimatedImageDrawable t) => t.Cast<Android.Graphics.Drawable.Animatable2>();
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/AnimatedImageDrawable.html#REPEAT_INFINITE"/>
        /// </summary>
        public static int REPEAT_INFINITE { get { if (!_REPEAT_INFINITEReady) { _REPEAT_INFINITEContent = SGetField<int>(LocalBridgeClazz, "REPEAT_INFINITE"); _REPEAT_INFINITEReady = true; } return _REPEAT_INFINITEContent; } }
        private static int _REPEAT_INFINITEContent = default;
        private static bool _REPEAT_INFINITEReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/AnimatedImageDrawable.html#isRunning()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsRunning()
        {
            return IExecuteWithSignature<bool>("isRunning", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/AnimatedImageDrawable.html#unregisterAnimationCallback(android.graphics.drawable.Animatable2.AnimationCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Drawable.Animatable2.AnimationCallback"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool UnregisterAnimationCallback(Android.Graphics.Drawable.Animatable2.AnimationCallback arg0)
        {
            return IExecuteWithSignature<bool>("unregisterAnimationCallback", "(Landroid/graphics/drawable/Animatable2$AnimationCallback;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/AnimatedImageDrawable.html#getRepeatCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetRepeatCount()
        {
            return IExecuteWithSignature<int>("getRepeatCount", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/AnimatedImageDrawable.html#clearAnimationCallbacks()"/>
        /// </summary>
        public void ClearAnimationCallbacks()
        {
            IExecuteWithSignature("clearAnimationCallbacks", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/AnimatedImageDrawable.html#registerAnimationCallback(android.graphics.drawable.Animatable2.AnimationCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Drawable.Animatable2.AnimationCallback"/></param>
        public void RegisterAnimationCallback(Android.Graphics.Drawable.Animatable2.AnimationCallback arg0)
        {
            IExecuteWithSignature("registerAnimationCallback", "(Landroid/graphics/drawable/Animatable2$AnimationCallback;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/AnimatedImageDrawable.html#setRepeatCount(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetRepeatCount(int arg0)
        {
            IExecuteWithSignature("setRepeatCount", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/AnimatedImageDrawable.html#start()"/>
        /// </summary>
        public void Start()
        {
            IExecuteWithSignature("start", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/AnimatedImageDrawable.html#stop()"/>
        /// </summary>
        public void Stop()
        {
            IExecuteWithSignature("stop", "()V");
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
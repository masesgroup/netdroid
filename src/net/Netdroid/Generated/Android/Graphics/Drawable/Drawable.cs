/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.2.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Graphics.Drawable
{
    #region Drawable
    public partial class Drawable
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#createFromPath(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        public static Android.Graphics.Drawable.Drawable CreateFromPath(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<Android.Graphics.Drawable.Drawable>(LocalBridgeClazz, "createFromPath", "(Ljava/lang/String;)Landroid/graphics/drawable/Drawable;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#createFromResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String,android.graphics.BitmapFactory.Options)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Res.Resources"/></param>
        /// <param name="arg1"><see cref="Android.Util.TypedValue"/></param>
        /// <param name="arg2"><see cref="Java.Io.InputStream"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <param name="arg4"><see cref="Android.Graphics.BitmapFactory.Options"/></param>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        [global::System.Obsolete()]
        public static Android.Graphics.Drawable.Drawable CreateFromResourceStream(Android.Content.Res.Resources arg0, Android.Util.TypedValue arg1, Java.Io.InputStream arg2, Java.Lang.String arg3, Android.Graphics.BitmapFactory.Options arg4)
        {
            return SExecute<Android.Graphics.Drawable.Drawable>(LocalBridgeClazz, "createFromResourceStream", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#createFromResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Res.Resources"/></param>
        /// <param name="arg1"><see cref="Android.Util.TypedValue"/></param>
        /// <param name="arg2"><see cref="Java.Io.InputStream"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        public static Android.Graphics.Drawable.Drawable CreateFromResourceStream(Android.Content.Res.Resources arg0, Android.Util.TypedValue arg1, Java.Io.InputStream arg2, Java.Lang.String arg3)
        {
            return SExecute<Android.Graphics.Drawable.Drawable>(LocalBridgeClazz, "createFromResourceStream", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#createFromStream(java.io.InputStream,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.InputStream"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        public static Android.Graphics.Drawable.Drawable CreateFromStream(Java.Io.InputStream arg0, Java.Lang.String arg1)
        {
            return SExecute<Android.Graphics.Drawable.Drawable>(LocalBridgeClazz, "createFromStream", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.content.res.Resources.Theme)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Res.Resources"/></param>
        /// <param name="arg1"><see cref="Org.Xmlpull.V1.XmlPullParser"/></param>
        /// <param name="arg2"><see cref="Android.Content.Res.Resources.Theme"/></param>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        /// <exception cref="Org.Xmlpull.V1.XmlPullParserException"/>
        public static Android.Graphics.Drawable.Drawable CreateFromXml(Android.Content.Res.Resources arg0, Org.Xmlpull.V1.XmlPullParser arg1, Android.Content.Res.Resources.Theme arg2)
        {
            return SExecute<Android.Graphics.Drawable.Drawable>(LocalBridgeClazz, "createFromXml", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Res.Resources"/></param>
        /// <param name="arg1"><see cref="Org.Xmlpull.V1.XmlPullParser"/></param>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        /// <exception cref="Org.Xmlpull.V1.XmlPullParserException"/>
        public static Android.Graphics.Drawable.Drawable CreateFromXml(Android.Content.Res.Resources arg0, Org.Xmlpull.V1.XmlPullParser arg1)
        {
            return SExecute<Android.Graphics.Drawable.Drawable>(LocalBridgeClazz, "createFromXml", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources.Theme)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Res.Resources"/></param>
        /// <param name="arg1"><see cref="Org.Xmlpull.V1.XmlPullParser"/></param>
        /// <param name="arg2"><see cref="Android.Util.AttributeSet"/></param>
        /// <param name="arg3"><see cref="Android.Content.Res.Resources.Theme"/></param>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        /// <exception cref="Org.Xmlpull.V1.XmlPullParserException"/>
        public static Android.Graphics.Drawable.Drawable CreateFromXmlInner(Android.Content.Res.Resources arg0, Org.Xmlpull.V1.XmlPullParser arg1, Android.Util.AttributeSet arg2, Android.Content.Res.Resources.Theme arg3)
        {
            return SExecute<Android.Graphics.Drawable.Drawable>(LocalBridgeClazz, "createFromXmlInner", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Res.Resources"/></param>
        /// <param name="arg1"><see cref="Org.Xmlpull.V1.XmlPullParser"/></param>
        /// <param name="arg2"><see cref="Android.Util.AttributeSet"/></param>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        /// <exception cref="Org.Xmlpull.V1.XmlPullParserException"/>
        public static Android.Graphics.Drawable.Drawable CreateFromXmlInner(Android.Content.Res.Resources arg0, Org.Xmlpull.V1.XmlPullParser arg1, Android.Util.AttributeSet arg2)
        {
            return SExecute<Android.Graphics.Drawable.Drawable>(LocalBridgeClazz, "createFromXmlInner", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#resolveOpacity(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int ResolveOpacity(int arg0, int arg1)
        {
            return SExecute<int>(LocalBridgeClazz, "resolveOpacity", arg0, arg1);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#getOpacity()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetOpacity()
        {
            return IExecuteWithSignature<int>("getOpacity", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#draw(android.graphics.Canvas)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Canvas"/></param>
        public void Draw(Android.Graphics.Canvas arg0)
        {
            IExecuteWithSignature("draw", "(Landroid/graphics/Canvas;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#setAlpha(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetAlpha(int arg0)
        {
            IExecuteWithSignature("setAlpha", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#setColorFilter(android.graphics.ColorFilter)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.ColorFilter"/></param>
        public void SetColorFilter(Android.Graphics.ColorFilter arg0)
        {
            IExecuteWithSignature("setColorFilter", "(Landroid/graphics/ColorFilter;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#getColorFilter()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.ColorFilter"/></returns>
        public Android.Graphics.ColorFilter GetColorFilter()
        {
            return IExecuteWithSignature<Android.Graphics.ColorFilter>("getColorFilter", "()Landroid/graphics/ColorFilter;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#getCurrent()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        public Android.Graphics.Drawable.Drawable GetCurrent()
        {
            return IExecuteWithSignature<Android.Graphics.Drawable.Drawable>("getCurrent", "()Landroid/graphics/drawable/Drawable;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#mutate()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        public Android.Graphics.Drawable.Drawable Mutate()
        {
            return IExecuteWithSignature<Android.Graphics.Drawable.Drawable>("mutate", "()Landroid/graphics/drawable/Drawable;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#getCallback()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable.Callback"/></returns>
        public Android.Graphics.Drawable.Drawable.Callback GetCallback()
        {
            return IExecuteWithSignature<Android.Graphics.Drawable.Drawable.Callback>("getCallback", "()Landroid/graphics/drawable/Drawable$Callback;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#getConstantState()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable.ConstantState"/></returns>
        public Android.Graphics.Drawable.Drawable.ConstantState GetConstantState()
        {
            return IExecuteWithSignature<Android.Graphics.Drawable.Drawable.ConstantState>("getConstantState", "()Landroid/graphics/drawable/Drawable$ConstantState;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#getOpticalInsets()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Insets"/></returns>
        public Android.Graphics.Insets GetOpticalInsets()
        {
            return IExecuteWithSignature<Android.Graphics.Insets>("getOpticalInsets", "()Landroid/graphics/Insets;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#getDirtyBounds()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Rect"/></returns>
        public Android.Graphics.Rect GetDirtyBounds()
        {
            return IExecuteWithSignature<Android.Graphics.Rect>("getDirtyBounds", "()Landroid/graphics/Rect;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#getTransparentRegion()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Region"/></returns>
        public Android.Graphics.Region GetTransparentRegion()
        {
            return IExecuteWithSignature<Android.Graphics.Region>("getTransparentRegion", "()Landroid/graphics/Region;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#canApplyTheme()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool CanApplyTheme()
        {
            return IExecuteWithSignature<bool>("canApplyTheme", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#getPadding(android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool GetPadding(Android.Graphics.Rect arg0)
        {
            return IExecuteWithSignature<bool>("getPadding", "(Landroid/graphics/Rect;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#hasFocusStateSpecified()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasFocusStateSpecified()
        {
            return IExecuteWithSignature<bool>("hasFocusStateSpecified", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#isAutoMirrored()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAutoMirrored()
        {
            return IExecuteWithSignature<bool>("isAutoMirrored", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#isFilterBitmap()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsFilterBitmap()
        {
            return IExecuteWithSignature<bool>("isFilterBitmap", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#isProjected()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsProjected()
        {
            return IExecuteWithSignature<bool>("isProjected", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#isStateful()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsStateful()
        {
            return IExecuteWithSignature<bool>("isStateful", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#onLayoutDirectionChanged(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool OnLayoutDirectionChanged(int arg0)
        {
            return IExecuteWithSignature<bool>("onLayoutDirectionChanged", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#setState(int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetState(int[] arg0)
        {
            return IExecuteWithSignature<bool>("setState", "([I)Z", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#setVisible(boolean,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetVisible(bool arg0, bool arg1)
        {
            return IExecute<bool>("setVisible", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#copyBounds()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Rect"/></returns>
        public Android.Graphics.Rect CopyBounds()
        {
            return IExecuteWithSignature<Android.Graphics.Rect>("copyBounds", "()Landroid/graphics/Rect;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#getBounds()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Rect"/></returns>
        public Android.Graphics.Rect GetBounds()
        {
            return IExecuteWithSignature<Android.Graphics.Rect>("getBounds", "()Landroid/graphics/Rect;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#isVisible()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsVisible()
        {
            return IExecuteWithSignature<bool>("isVisible", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#setLayoutDirection(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetLayoutDirection(int arg0)
        {
            return IExecuteWithSignature<bool>("setLayoutDirection", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#setLevel(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetLevel(int arg0)
        {
            return IExecuteWithSignature<bool>("setLevel", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#getLevel()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetLevel()
        {
            return IExecuteWithSignature<int>("getLevel", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#copyBounds(android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        public void CopyBounds(Android.Graphics.Rect arg0)
        {
            IExecuteWithSignature("copyBounds", "(Landroid/graphics/Rect;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#setCallback(android.graphics.drawable.Drawable.Callback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Drawable.Drawable.Callback"/></param>
        public void SetCallback(Android.Graphics.Drawable.Drawable.Callback arg0)
        {
            IExecuteWithSignature("setCallback", "(Landroid/graphics/drawable/Drawable$Callback;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#getAlpha()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetAlpha()
        {
            return IExecuteWithSignature<int>("getAlpha", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#getChangingConfigurations()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetChangingConfigurations()
        {
            return IExecuteWithSignature<int>("getChangingConfigurations", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#getIntrinsicHeight()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetIntrinsicHeight()
        {
            return IExecuteWithSignature<int>("getIntrinsicHeight", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#getIntrinsicWidth()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetIntrinsicWidth()
        {
            return IExecuteWithSignature<int>("getIntrinsicWidth", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#getLayoutDirection()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetLayoutDirection()
        {
            return IExecuteWithSignature<int>("getLayoutDirection", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#getMinimumHeight()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMinimumHeight()
        {
            return IExecuteWithSignature<int>("getMinimumHeight", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#getMinimumWidth()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMinimumWidth()
        {
            return IExecuteWithSignature<int>("getMinimumWidth", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#getState()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int[] GetState()
        {
            return IExecuteWithSignatureArray<int>("getState", "()[I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#applyTheme(android.content.res.Resources.Theme)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Res.Resources.Theme"/></param>
        public void ApplyTheme(Android.Content.Res.Resources.Theme arg0)
        {
            IExecuteWithSignature("applyTheme", "(Landroid/content/res/Resources$Theme;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#clearColorFilter()"/>
        /// </summary>
        public void ClearColorFilter()
        {
            IExecuteWithSignature("clearColorFilter", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#getHotspotBounds(android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        public void GetHotspotBounds(Android.Graphics.Rect arg0)
        {
            IExecuteWithSignature("getHotspotBounds", "(Landroid/graphics/Rect;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#getOutline(android.graphics.Outline)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Outline"/></param>
        public void GetOutline(Android.Graphics.Outline arg0)
        {
            IExecuteWithSignature("getOutline", "(Landroid/graphics/Outline;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources.Theme)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Res.Resources"/></param>
        /// <param name="arg1"><see cref="Org.Xmlpull.V1.XmlPullParser"/></param>
        /// <param name="arg2"><see cref="Android.Util.AttributeSet"/></param>
        /// <param name="arg3"><see cref="Android.Content.Res.Resources.Theme"/></param>
        /// <exception cref="Java.Io.IOException"/>
        /// <exception cref="Org.Xmlpull.V1.XmlPullParserException"/>
        public void Inflate(Android.Content.Res.Resources arg0, Org.Xmlpull.V1.XmlPullParser arg1, Android.Util.AttributeSet arg2, Android.Content.Res.Resources.Theme arg3)
        {
            IExecute("inflate", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Res.Resources"/></param>
        /// <param name="arg1"><see cref="Org.Xmlpull.V1.XmlPullParser"/></param>
        /// <param name="arg2"><see cref="Android.Util.AttributeSet"/></param>
        /// <exception cref="Java.Io.IOException"/>
        /// <exception cref="Org.Xmlpull.V1.XmlPullParserException"/>
        public void Inflate(Android.Content.Res.Resources arg0, Org.Xmlpull.V1.XmlPullParser arg1, Android.Util.AttributeSet arg2)
        {
            IExecute("inflate", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#invalidateSelf()"/>
        /// </summary>
        public void InvalidateSelf()
        {
            IExecuteWithSignature("invalidateSelf", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#jumpToCurrentState()"/>
        /// </summary>
        public void JumpToCurrentState()
        {
            IExecuteWithSignature("jumpToCurrentState", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#scheduleSelf(java.lang.Runnable,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Runnable"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        public void ScheduleSelf(Java.Lang.Runnable arg0, long arg1)
        {
            IExecute("scheduleSelf", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#setAutoMirrored(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetAutoMirrored(bool arg0)
        {
            IExecuteWithSignature("setAutoMirrored", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#setBounds(android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        public void SetBounds(Android.Graphics.Rect arg0)
        {
            IExecuteWithSignature("setBounds", "(Landroid/graphics/Rect;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#setBounds(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void SetBounds(int arg0, int arg1, int arg2, int arg3)
        {
            IExecute("setBounds", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#setChangingConfigurations(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetChangingConfigurations(int arg0)
        {
            IExecuteWithSignature("setChangingConfigurations", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#setColorFilter(int,android.graphics.PorterDuff.Mode)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.PorterDuff.Mode"/></param>
        [global::System.Obsolete()]
        public void SetColorFilter(int arg0, Android.Graphics.PorterDuff.Mode arg1)
        {
            IExecute("setColorFilter", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#setDither(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void SetDither(bool arg0)
        {
            IExecuteWithSignature("setDither", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#setFilterBitmap(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetFilterBitmap(bool arg0)
        {
            IExecuteWithSignature("setFilterBitmap", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#setHotspot(float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public void SetHotspot(float arg0, float arg1)
        {
            IExecute("setHotspot", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#setHotspotBounds(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void SetHotspotBounds(int arg0, int arg1, int arg2, int arg3)
        {
            IExecute("setHotspotBounds", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#setTint(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetTint(int arg0)
        {
            IExecuteWithSignature("setTint", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#setTintBlendMode(android.graphics.BlendMode)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.BlendMode"/></param>
        public void SetTintBlendMode(Android.Graphics.BlendMode arg0)
        {
            IExecuteWithSignature("setTintBlendMode", "(Landroid/graphics/BlendMode;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#setTintList(android.content.res.ColorStateList)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Res.ColorStateList"/></param>
        public void SetTintList(Android.Content.Res.ColorStateList arg0)
        {
            IExecuteWithSignature("setTintList", "(Landroid/content/res/ColorStateList;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#setTintMode(android.graphics.PorterDuff.Mode)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.PorterDuff.Mode"/></param>
        public void SetTintMode(Android.Graphics.PorterDuff.Mode arg0)
        {
            IExecuteWithSignature("setTintMode", "(Landroid/graphics/PorterDuff$Mode;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#unscheduleSelf(java.lang.Runnable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Runnable"/></param>
        public void UnscheduleSelf(Java.Lang.Runnable arg0)
        {
            IExecuteWithSignature("unscheduleSelf", "(Ljava/lang/Runnable;)V", arg0);
        }

        #endregion

        #region Nested classes
        #region Callback
        public partial class Callback
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.Callback.html#invalidateDrawable(android.graphics.drawable.Drawable)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.Drawable.Drawable"/></param>
            public void InvalidateDrawable(Android.Graphics.Drawable.Drawable arg0)
            {
                IExecuteWithSignature("invalidateDrawable", "(Landroid/graphics/drawable/Drawable;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.Callback.html#scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.Drawable.Drawable"/></param>
            /// <param name="arg1"><see cref="Java.Lang.Runnable"/></param>
            /// <param name="arg2"><see cref="long"/></param>
            public void ScheduleDrawable(Android.Graphics.Drawable.Drawable arg0, Java.Lang.Runnable arg1, long arg2)
            {
                IExecute("scheduleDrawable", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.Callback.html#unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.Drawable.Drawable"/></param>
            /// <param name="arg1"><see cref="Java.Lang.Runnable"/></param>
            public void UnscheduleDrawable(Android.Graphics.Drawable.Drawable arg0, Java.Lang.Runnable arg1)
            {
                IExecute("unscheduleDrawable", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ConstantState
        public partial class ConstantState
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.ConstantState.html#newDrawable()"/>
            /// </summary>
            /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
            public Android.Graphics.Drawable.Drawable NewDrawable()
            {
                return IExecuteWithSignature<Android.Graphics.Drawable.Drawable>("newDrawable", "()Landroid/graphics/drawable/Drawable;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.ConstantState.html#getChangingConfigurations()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetChangingConfigurations()
            {
                return IExecuteWithSignature<int>("getChangingConfigurations", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.ConstantState.html#newDrawable(android.content.res.Resources,android.content.res.Resources.Theme)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.Res.Resources"/></param>
            /// <param name="arg1"><see cref="Android.Content.Res.Resources.Theme"/></param>
            /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
            public Android.Graphics.Drawable.Drawable NewDrawable(Android.Content.Res.Resources arg0, Android.Content.Res.Resources.Theme arg1)
            {
                return IExecute<Android.Graphics.Drawable.Drawable>("newDrawable", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.ConstantState.html#newDrawable(android.content.res.Resources)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.Res.Resources"/></param>
            /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
            public Android.Graphics.Drawable.Drawable NewDrawable(Android.Content.Res.Resources arg0)
            {
                return IExecuteWithSignature<Android.Graphics.Drawable.Drawable>("newDrawable", "(Landroid/content/res/Resources;)Landroid/graphics/drawable/Drawable;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/graphics/drawable/Drawable.ConstantState.html#canApplyTheme()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool CanApplyTheme()
            {
                return IExecuteWithSignature<bool>("canApplyTheme", "()Z");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Telecom
{
    #region TelecomManager
    public partial class TelecomManager
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#DTMF_CHARACTER_PAUSE"/>
        /// </summary>
        public static char DTMF_CHARACTER_PAUSE { get { if (!_DTMF_CHARACTER_PAUSEReady) { _DTMF_CHARACTER_PAUSEContent = SGetField<char>(LocalBridgeClazz, "DTMF_CHARACTER_PAUSE"); _DTMF_CHARACTER_PAUSEReady = true; } return _DTMF_CHARACTER_PAUSEContent; } }
        private static char _DTMF_CHARACTER_PAUSEContent = default;
        private static bool _DTMF_CHARACTER_PAUSEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#DTMF_CHARACTER_WAIT"/>
        /// </summary>
        public static char DTMF_CHARACTER_WAIT { get { if (!_DTMF_CHARACTER_WAITReady) { _DTMF_CHARACTER_WAITContent = SGetField<char>(LocalBridgeClazz, "DTMF_CHARACTER_WAIT"); _DTMF_CHARACTER_WAITReady = true; } return _DTMF_CHARACTER_WAITContent; } }
        private static char _DTMF_CHARACTER_WAITContent = default;
        private static bool _DTMF_CHARACTER_WAITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#DURATION_LONG"/>
        /// </summary>
        public static int DURATION_LONG { get { if (!_DURATION_LONGReady) { _DURATION_LONGContent = SGetField<int>(LocalBridgeClazz, "DURATION_LONG"); _DURATION_LONGReady = true; } return _DURATION_LONGContent; } }
        private static int _DURATION_LONGContent = default;
        private static bool _DURATION_LONGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#DURATION_MEDIUM"/>
        /// </summary>
        public static int DURATION_MEDIUM { get { if (!_DURATION_MEDIUMReady) { _DURATION_MEDIUMContent = SGetField<int>(LocalBridgeClazz, "DURATION_MEDIUM"); _DURATION_MEDIUMReady = true; } return _DURATION_MEDIUMContent; } }
        private static int _DURATION_MEDIUMContent = default;
        private static bool _DURATION_MEDIUMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#DURATION_SHORT"/>
        /// </summary>
        public static int DURATION_SHORT { get { if (!_DURATION_SHORTReady) { _DURATION_SHORTContent = SGetField<int>(LocalBridgeClazz, "DURATION_SHORT"); _DURATION_SHORTReady = true; } return _DURATION_SHORTContent; } }
        private static int _DURATION_SHORTContent = default;
        private static bool _DURATION_SHORTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#DURATION_VERY_SHORT"/>
        /// </summary>
        public static int DURATION_VERY_SHORT { get { if (!_DURATION_VERY_SHORTReady) { _DURATION_VERY_SHORTContent = SGetField<int>(LocalBridgeClazz, "DURATION_VERY_SHORT"); _DURATION_VERY_SHORTReady = true; } return _DURATION_VERY_SHORTContent; } }
        private static int _DURATION_VERY_SHORTContent = default;
        private static bool _DURATION_VERY_SHORTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#PRESENTATION_ALLOWED"/>
        /// </summary>
        public static int PRESENTATION_ALLOWED { get { if (!_PRESENTATION_ALLOWEDReady) { _PRESENTATION_ALLOWEDContent = SGetField<int>(LocalBridgeClazz, "PRESENTATION_ALLOWED"); _PRESENTATION_ALLOWEDReady = true; } return _PRESENTATION_ALLOWEDContent; } }
        private static int _PRESENTATION_ALLOWEDContent = default;
        private static bool _PRESENTATION_ALLOWEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#PRESENTATION_PAYPHONE"/>
        /// </summary>
        public static int PRESENTATION_PAYPHONE { get { if (!_PRESENTATION_PAYPHONEReady) { _PRESENTATION_PAYPHONEContent = SGetField<int>(LocalBridgeClazz, "PRESENTATION_PAYPHONE"); _PRESENTATION_PAYPHONEReady = true; } return _PRESENTATION_PAYPHONEContent; } }
        private static int _PRESENTATION_PAYPHONEContent = default;
        private static bool _PRESENTATION_PAYPHONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#PRESENTATION_RESTRICTED"/>
        /// </summary>
        public static int PRESENTATION_RESTRICTED { get { if (!_PRESENTATION_RESTRICTEDReady) { _PRESENTATION_RESTRICTEDContent = SGetField<int>(LocalBridgeClazz, "PRESENTATION_RESTRICTED"); _PRESENTATION_RESTRICTEDReady = true; } return _PRESENTATION_RESTRICTEDContent; } }
        private static int _PRESENTATION_RESTRICTEDContent = default;
        private static bool _PRESENTATION_RESTRICTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#PRESENTATION_UNAVAILABLE"/>
        /// </summary>
        public static int PRESENTATION_UNAVAILABLE { get { if (!_PRESENTATION_UNAVAILABLEReady) { _PRESENTATION_UNAVAILABLEContent = SGetField<int>(LocalBridgeClazz, "PRESENTATION_UNAVAILABLE"); _PRESENTATION_UNAVAILABLEReady = true; } return _PRESENTATION_UNAVAILABLEContent; } }
        private static int _PRESENTATION_UNAVAILABLEContent = default;
        private static bool _PRESENTATION_UNAVAILABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#PRESENTATION_UNKNOWN"/>
        /// </summary>
        public static int PRESENTATION_UNKNOWN { get { if (!_PRESENTATION_UNKNOWNReady) { _PRESENTATION_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "PRESENTATION_UNKNOWN"); _PRESENTATION_UNKNOWNReady = true; } return _PRESENTATION_UNKNOWNContent; } }
        private static int _PRESENTATION_UNKNOWNContent = default;
        private static bool _PRESENTATION_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#PRIORITY_NORMAL"/>
        /// </summary>
        public static int PRIORITY_NORMAL { get { if (!_PRIORITY_NORMALReady) { _PRIORITY_NORMALContent = SGetField<int>(LocalBridgeClazz, "PRIORITY_NORMAL"); _PRIORITY_NORMALReady = true; } return _PRIORITY_NORMALContent; } }
        private static int _PRIORITY_NORMALContent = default;
        private static bool _PRIORITY_NORMALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#PRIORITY_URGENT"/>
        /// </summary>
        public static int PRIORITY_URGENT { get { if (!_PRIORITY_URGENTReady) { _PRIORITY_URGENTContent = SGetField<int>(LocalBridgeClazz, "PRIORITY_URGENT"); _PRIORITY_URGENTReady = true; } return _PRIORITY_URGENTContent; } }
        private static int _PRIORITY_URGENTContent = default;
        private static bool _PRIORITY_URGENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#ACTION_CHANGE_DEFAULT_DIALER"/>
        /// </summary>
        public static Java.Lang.String ACTION_CHANGE_DEFAULT_DIALER { get { if (!_ACTION_CHANGE_DEFAULT_DIALERReady) { _ACTION_CHANGE_DEFAULT_DIALERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_CHANGE_DEFAULT_DIALER"); _ACTION_CHANGE_DEFAULT_DIALERReady = true; } return _ACTION_CHANGE_DEFAULT_DIALERContent; } }
        private static Java.Lang.String _ACTION_CHANGE_DEFAULT_DIALERContent = default;
        private static bool _ACTION_CHANGE_DEFAULT_DIALERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#ACTION_CHANGE_PHONE_ACCOUNTS"/>
        /// </summary>
        public static Java.Lang.String ACTION_CHANGE_PHONE_ACCOUNTS { get { if (!_ACTION_CHANGE_PHONE_ACCOUNTSReady) { _ACTION_CHANGE_PHONE_ACCOUNTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_CHANGE_PHONE_ACCOUNTS"); _ACTION_CHANGE_PHONE_ACCOUNTSReady = true; } return _ACTION_CHANGE_PHONE_ACCOUNTSContent; } }
        private static Java.Lang.String _ACTION_CHANGE_PHONE_ACCOUNTSContent = default;
        private static bool _ACTION_CHANGE_PHONE_ACCOUNTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#ACTION_CONFIGURE_PHONE_ACCOUNT"/>
        /// </summary>
        public static Java.Lang.String ACTION_CONFIGURE_PHONE_ACCOUNT { get { if (!_ACTION_CONFIGURE_PHONE_ACCOUNTReady) { _ACTION_CONFIGURE_PHONE_ACCOUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_CONFIGURE_PHONE_ACCOUNT"); _ACTION_CONFIGURE_PHONE_ACCOUNTReady = true; } return _ACTION_CONFIGURE_PHONE_ACCOUNTContent; } }
        private static Java.Lang.String _ACTION_CONFIGURE_PHONE_ACCOUNTContent = default;
        private static bool _ACTION_CONFIGURE_PHONE_ACCOUNTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#ACTION_DEFAULT_CALL_SCREENING_APP_CHANGED"/>
        /// </summary>
        public static Java.Lang.String ACTION_DEFAULT_CALL_SCREENING_APP_CHANGED { get { if (!_ACTION_DEFAULT_CALL_SCREENING_APP_CHANGEDReady) { _ACTION_DEFAULT_CALL_SCREENING_APP_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_DEFAULT_CALL_SCREENING_APP_CHANGED"); _ACTION_DEFAULT_CALL_SCREENING_APP_CHANGEDReady = true; } return _ACTION_DEFAULT_CALL_SCREENING_APP_CHANGEDContent; } }
        private static Java.Lang.String _ACTION_DEFAULT_CALL_SCREENING_APP_CHANGEDContent = default;
        private static bool _ACTION_DEFAULT_CALL_SCREENING_APP_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#ACTION_DEFAULT_DIALER_CHANGED"/>
        /// </summary>
        public static Java.Lang.String ACTION_DEFAULT_DIALER_CHANGED { get { if (!_ACTION_DEFAULT_DIALER_CHANGEDReady) { _ACTION_DEFAULT_DIALER_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_DEFAULT_DIALER_CHANGED"); _ACTION_DEFAULT_DIALER_CHANGEDReady = true; } return _ACTION_DEFAULT_DIALER_CHANGEDContent; } }
        private static Java.Lang.String _ACTION_DEFAULT_DIALER_CHANGEDContent = default;
        private static bool _ACTION_DEFAULT_DIALER_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#ACTION_PHONE_ACCOUNT_REGISTERED"/>
        /// </summary>
        public static Java.Lang.String ACTION_PHONE_ACCOUNT_REGISTERED { get { if (!_ACTION_PHONE_ACCOUNT_REGISTEREDReady) { _ACTION_PHONE_ACCOUNT_REGISTEREDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_PHONE_ACCOUNT_REGISTERED"); _ACTION_PHONE_ACCOUNT_REGISTEREDReady = true; } return _ACTION_PHONE_ACCOUNT_REGISTEREDContent; } }
        private static Java.Lang.String _ACTION_PHONE_ACCOUNT_REGISTEREDContent = default;
        private static bool _ACTION_PHONE_ACCOUNT_REGISTEREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#ACTION_PHONE_ACCOUNT_UNREGISTERED"/>
        /// </summary>
        public static Java.Lang.String ACTION_PHONE_ACCOUNT_UNREGISTERED { get { if (!_ACTION_PHONE_ACCOUNT_UNREGISTEREDReady) { _ACTION_PHONE_ACCOUNT_UNREGISTEREDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_PHONE_ACCOUNT_UNREGISTERED"); _ACTION_PHONE_ACCOUNT_UNREGISTEREDReady = true; } return _ACTION_PHONE_ACCOUNT_UNREGISTEREDContent; } }
        private static Java.Lang.String _ACTION_PHONE_ACCOUNT_UNREGISTEREDContent = default;
        private static bool _ACTION_PHONE_ACCOUNT_UNREGISTEREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#ACTION_POST_CALL"/>
        /// </summary>
        public static Java.Lang.String ACTION_POST_CALL { get { if (!_ACTION_POST_CALLReady) { _ACTION_POST_CALLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_POST_CALL"); _ACTION_POST_CALLReady = true; } return _ACTION_POST_CALLContent; } }
        private static Java.Lang.String _ACTION_POST_CALLContent = default;
        private static bool _ACTION_POST_CALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#ACTION_SHOW_CALL_ACCESSIBILITY_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_SHOW_CALL_ACCESSIBILITY_SETTINGS { get { if (!_ACTION_SHOW_CALL_ACCESSIBILITY_SETTINGSReady) { _ACTION_SHOW_CALL_ACCESSIBILITY_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_SHOW_CALL_ACCESSIBILITY_SETTINGS"); _ACTION_SHOW_CALL_ACCESSIBILITY_SETTINGSReady = true; } return _ACTION_SHOW_CALL_ACCESSIBILITY_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_SHOW_CALL_ACCESSIBILITY_SETTINGSContent = default;
        private static bool _ACTION_SHOW_CALL_ACCESSIBILITY_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#ACTION_SHOW_CALL_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_SHOW_CALL_SETTINGS { get { if (!_ACTION_SHOW_CALL_SETTINGSReady) { _ACTION_SHOW_CALL_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_SHOW_CALL_SETTINGS"); _ACTION_SHOW_CALL_SETTINGSReady = true; } return _ACTION_SHOW_CALL_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_SHOW_CALL_SETTINGSContent = default;
        private static bool _ACTION_SHOW_CALL_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#ACTION_SHOW_MISSED_CALLS_NOTIFICATION"/>
        /// </summary>
        public static Java.Lang.String ACTION_SHOW_MISSED_CALLS_NOTIFICATION { get { if (!_ACTION_SHOW_MISSED_CALLS_NOTIFICATIONReady) { _ACTION_SHOW_MISSED_CALLS_NOTIFICATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_SHOW_MISSED_CALLS_NOTIFICATION"); _ACTION_SHOW_MISSED_CALLS_NOTIFICATIONReady = true; } return _ACTION_SHOW_MISSED_CALLS_NOTIFICATIONContent; } }
        private static Java.Lang.String _ACTION_SHOW_MISSED_CALLS_NOTIFICATIONContent = default;
        private static bool _ACTION_SHOW_MISSED_CALLS_NOTIFICATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#ACTION_SHOW_RESPOND_VIA_SMS_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_SHOW_RESPOND_VIA_SMS_SETTINGS { get { if (!_ACTION_SHOW_RESPOND_VIA_SMS_SETTINGSReady) { _ACTION_SHOW_RESPOND_VIA_SMS_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_SHOW_RESPOND_VIA_SMS_SETTINGS"); _ACTION_SHOW_RESPOND_VIA_SMS_SETTINGSReady = true; } return _ACTION_SHOW_RESPOND_VIA_SMS_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_SHOW_RESPOND_VIA_SMS_SETTINGSContent = default;
        private static bool _ACTION_SHOW_RESPOND_VIA_SMS_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_CALL_BACK_NUMBER"/>
        /// </summary>
        public static Java.Lang.String EXTRA_CALL_BACK_NUMBER { get { if (!_EXTRA_CALL_BACK_NUMBERReady) { _EXTRA_CALL_BACK_NUMBERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_CALL_BACK_NUMBER"); _EXTRA_CALL_BACK_NUMBERReady = true; } return _EXTRA_CALL_BACK_NUMBERContent; } }
        private static Java.Lang.String _EXTRA_CALL_BACK_NUMBERContent = default;
        private static bool _EXTRA_CALL_BACK_NUMBERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_CALL_DISCONNECT_CAUSE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_CALL_DISCONNECT_CAUSE { get { if (!_EXTRA_CALL_DISCONNECT_CAUSEReady) { _EXTRA_CALL_DISCONNECT_CAUSEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_CALL_DISCONNECT_CAUSE"); _EXTRA_CALL_DISCONNECT_CAUSEReady = true; } return _EXTRA_CALL_DISCONNECT_CAUSEContent; } }
        private static Java.Lang.String _EXTRA_CALL_DISCONNECT_CAUSEContent = default;
        private static bool _EXTRA_CALL_DISCONNECT_CAUSEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_CALL_DISCONNECT_MESSAGE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_CALL_DISCONNECT_MESSAGE { get { if (!_EXTRA_CALL_DISCONNECT_MESSAGEReady) { _EXTRA_CALL_DISCONNECT_MESSAGEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_CALL_DISCONNECT_MESSAGE"); _EXTRA_CALL_DISCONNECT_MESSAGEReady = true; } return _EXTRA_CALL_DISCONNECT_MESSAGEContent; } }
        private static Java.Lang.String _EXTRA_CALL_DISCONNECT_MESSAGEContent = default;
        private static bool _EXTRA_CALL_DISCONNECT_MESSAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_CALL_DURATION"/>
        /// </summary>
        public static Java.Lang.String EXTRA_CALL_DURATION { get { if (!_EXTRA_CALL_DURATIONReady) { _EXTRA_CALL_DURATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_CALL_DURATION"); _EXTRA_CALL_DURATIONReady = true; } return _EXTRA_CALL_DURATIONContent; } }
        private static Java.Lang.String _EXTRA_CALL_DURATIONContent = default;
        private static bool _EXTRA_CALL_DURATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_CALL_NETWORK_TYPE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_CALL_NETWORK_TYPE { get { if (!_EXTRA_CALL_NETWORK_TYPEReady) { _EXTRA_CALL_NETWORK_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_CALL_NETWORK_TYPE"); _EXTRA_CALL_NETWORK_TYPEReady = true; } return _EXTRA_CALL_NETWORK_TYPEContent; } }
        private static Java.Lang.String _EXTRA_CALL_NETWORK_TYPEContent = default;
        private static bool _EXTRA_CALL_NETWORK_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_CALL_SUBJECT"/>
        /// </summary>
        public static Java.Lang.String EXTRA_CALL_SUBJECT { get { if (!_EXTRA_CALL_SUBJECTReady) { _EXTRA_CALL_SUBJECTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_CALL_SUBJECT"); _EXTRA_CALL_SUBJECTReady = true; } return _EXTRA_CALL_SUBJECTContent; } }
        private static Java.Lang.String _EXTRA_CALL_SUBJECTContent = default;
        private static bool _EXTRA_CALL_SUBJECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_CHANGE_DEFAULT_DIALER_PACKAGE_NAME"/>
        /// </summary>
        public static Java.Lang.String EXTRA_CHANGE_DEFAULT_DIALER_PACKAGE_NAME { get { if (!_EXTRA_CHANGE_DEFAULT_DIALER_PACKAGE_NAMEReady) { _EXTRA_CHANGE_DEFAULT_DIALER_PACKAGE_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_CHANGE_DEFAULT_DIALER_PACKAGE_NAME"); _EXTRA_CHANGE_DEFAULT_DIALER_PACKAGE_NAMEReady = true; } return _EXTRA_CHANGE_DEFAULT_DIALER_PACKAGE_NAMEContent; } }
        private static Java.Lang.String _EXTRA_CHANGE_DEFAULT_DIALER_PACKAGE_NAMEContent = default;
        private static bool _EXTRA_CHANGE_DEFAULT_DIALER_PACKAGE_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_DEFAULT_CALL_SCREENING_APP_COMPONENT_NAME"/>
        /// </summary>
        public static Java.Lang.String EXTRA_DEFAULT_CALL_SCREENING_APP_COMPONENT_NAME { get { if (!_EXTRA_DEFAULT_CALL_SCREENING_APP_COMPONENT_NAMEReady) { _EXTRA_DEFAULT_CALL_SCREENING_APP_COMPONENT_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_DEFAULT_CALL_SCREENING_APP_COMPONENT_NAME"); _EXTRA_DEFAULT_CALL_SCREENING_APP_COMPONENT_NAMEReady = true; } return _EXTRA_DEFAULT_CALL_SCREENING_APP_COMPONENT_NAMEContent; } }
        private static Java.Lang.String _EXTRA_DEFAULT_CALL_SCREENING_APP_COMPONENT_NAMEContent = default;
        private static bool _EXTRA_DEFAULT_CALL_SCREENING_APP_COMPONENT_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_DISCONNECT_CAUSE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_DISCONNECT_CAUSE { get { if (!_EXTRA_DISCONNECT_CAUSEReady) { _EXTRA_DISCONNECT_CAUSEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_DISCONNECT_CAUSE"); _EXTRA_DISCONNECT_CAUSEReady = true; } return _EXTRA_DISCONNECT_CAUSEContent; } }
        private static Java.Lang.String _EXTRA_DISCONNECT_CAUSEContent = default;
        private static bool _EXTRA_DISCONNECT_CAUSEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_HANDLE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_HANDLE { get { if (!_EXTRA_HANDLEReady) { _EXTRA_HANDLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_HANDLE"); _EXTRA_HANDLEReady = true; } return _EXTRA_HANDLEContent; } }
        private static Java.Lang.String _EXTRA_HANDLEContent = default;
        private static bool _EXTRA_HANDLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_HAS_PICTURE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_HAS_PICTURE { get { if (!_EXTRA_HAS_PICTUREReady) { _EXTRA_HAS_PICTUREContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_HAS_PICTURE"); _EXTRA_HAS_PICTUREReady = true; } return _EXTRA_HAS_PICTUREContent; } }
        private static Java.Lang.String _EXTRA_HAS_PICTUREContent = default;
        private static bool _EXTRA_HAS_PICTUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_INCOMING_CALL_ADDRESS"/>
        /// </summary>
        public static Java.Lang.String EXTRA_INCOMING_CALL_ADDRESS { get { if (!_EXTRA_INCOMING_CALL_ADDRESSReady) { _EXTRA_INCOMING_CALL_ADDRESSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_INCOMING_CALL_ADDRESS"); _EXTRA_INCOMING_CALL_ADDRESSReady = true; } return _EXTRA_INCOMING_CALL_ADDRESSContent; } }
        private static Java.Lang.String _EXTRA_INCOMING_CALL_ADDRESSContent = default;
        private static bool _EXTRA_INCOMING_CALL_ADDRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_INCOMING_CALL_EXTRAS"/>
        /// </summary>
        public static Java.Lang.String EXTRA_INCOMING_CALL_EXTRAS { get { if (!_EXTRA_INCOMING_CALL_EXTRASReady) { _EXTRA_INCOMING_CALL_EXTRASContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_INCOMING_CALL_EXTRAS"); _EXTRA_INCOMING_CALL_EXTRASReady = true; } return _EXTRA_INCOMING_CALL_EXTRASContent; } }
        private static Java.Lang.String _EXTRA_INCOMING_CALL_EXTRASContent = default;
        private static bool _EXTRA_INCOMING_CALL_EXTRASReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_INCOMING_VIDEO_STATE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_INCOMING_VIDEO_STATE { get { if (!_EXTRA_INCOMING_VIDEO_STATEReady) { _EXTRA_INCOMING_VIDEO_STATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_INCOMING_VIDEO_STATE"); _EXTRA_INCOMING_VIDEO_STATEReady = true; } return _EXTRA_INCOMING_VIDEO_STATEContent; } }
        private static Java.Lang.String _EXTRA_INCOMING_VIDEO_STATEContent = default;
        private static bool _EXTRA_INCOMING_VIDEO_STATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_IS_DEFAULT_CALL_SCREENING_APP"/>
        /// </summary>
        public static Java.Lang.String EXTRA_IS_DEFAULT_CALL_SCREENING_APP { get { if (!_EXTRA_IS_DEFAULT_CALL_SCREENING_APPReady) { _EXTRA_IS_DEFAULT_CALL_SCREENING_APPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_IS_DEFAULT_CALL_SCREENING_APP"); _EXTRA_IS_DEFAULT_CALL_SCREENING_APPReady = true; } return _EXTRA_IS_DEFAULT_CALL_SCREENING_APPContent; } }
        private static Java.Lang.String _EXTRA_IS_DEFAULT_CALL_SCREENING_APPContent = default;
        private static bool _EXTRA_IS_DEFAULT_CALL_SCREENING_APPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_LOCATION"/>
        /// </summary>
        public static Java.Lang.String EXTRA_LOCATION { get { if (!_EXTRA_LOCATIONReady) { _EXTRA_LOCATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_LOCATION"); _EXTRA_LOCATIONReady = true; } return _EXTRA_LOCATIONContent; } }
        private static Java.Lang.String _EXTRA_LOCATIONContent = default;
        private static bool _EXTRA_LOCATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_NOTIFICATION_COUNT"/>
        /// </summary>
        public static Java.Lang.String EXTRA_NOTIFICATION_COUNT { get { if (!_EXTRA_NOTIFICATION_COUNTReady) { _EXTRA_NOTIFICATION_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_NOTIFICATION_COUNT"); _EXTRA_NOTIFICATION_COUNTReady = true; } return _EXTRA_NOTIFICATION_COUNTContent; } }
        private static Java.Lang.String _EXTRA_NOTIFICATION_COUNTContent = default;
        private static bool _EXTRA_NOTIFICATION_COUNTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_NOTIFICATION_PHONE_NUMBER"/>
        /// </summary>
        public static Java.Lang.String EXTRA_NOTIFICATION_PHONE_NUMBER { get { if (!_EXTRA_NOTIFICATION_PHONE_NUMBERReady) { _EXTRA_NOTIFICATION_PHONE_NUMBERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_NOTIFICATION_PHONE_NUMBER"); _EXTRA_NOTIFICATION_PHONE_NUMBERReady = true; } return _EXTRA_NOTIFICATION_PHONE_NUMBERContent; } }
        private static Java.Lang.String _EXTRA_NOTIFICATION_PHONE_NUMBERContent = default;
        private static bool _EXTRA_NOTIFICATION_PHONE_NUMBERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_OUTGOING_CALL_EXTRAS"/>
        /// </summary>
        public static Java.Lang.String EXTRA_OUTGOING_CALL_EXTRAS { get { if (!_EXTRA_OUTGOING_CALL_EXTRASReady) { _EXTRA_OUTGOING_CALL_EXTRASContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_OUTGOING_CALL_EXTRAS"); _EXTRA_OUTGOING_CALL_EXTRASReady = true; } return _EXTRA_OUTGOING_CALL_EXTRASContent; } }
        private static Java.Lang.String _EXTRA_OUTGOING_CALL_EXTRASContent = default;
        private static bool _EXTRA_OUTGOING_CALL_EXTRASReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_OUTGOING_PICTURE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_OUTGOING_PICTURE { get { if (!_EXTRA_OUTGOING_PICTUREReady) { _EXTRA_OUTGOING_PICTUREContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_OUTGOING_PICTURE"); _EXTRA_OUTGOING_PICTUREReady = true; } return _EXTRA_OUTGOING_PICTUREContent; } }
        private static Java.Lang.String _EXTRA_OUTGOING_PICTUREContent = default;
        private static bool _EXTRA_OUTGOING_PICTUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_PHONE_ACCOUNT_HANDLE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PHONE_ACCOUNT_HANDLE { get { if (!_EXTRA_PHONE_ACCOUNT_HANDLEReady) { _EXTRA_PHONE_ACCOUNT_HANDLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PHONE_ACCOUNT_HANDLE"); _EXTRA_PHONE_ACCOUNT_HANDLEReady = true; } return _EXTRA_PHONE_ACCOUNT_HANDLEContent; } }
        private static Java.Lang.String _EXTRA_PHONE_ACCOUNT_HANDLEContent = default;
        private static bool _EXTRA_PHONE_ACCOUNT_HANDLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_PICTURE_URI"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PICTURE_URI { get { if (!_EXTRA_PICTURE_URIReady) { _EXTRA_PICTURE_URIContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PICTURE_URI"); _EXTRA_PICTURE_URIReady = true; } return _EXTRA_PICTURE_URIContent; } }
        private static Java.Lang.String _EXTRA_PICTURE_URIContent = default;
        private static bool _EXTRA_PICTURE_URIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_PRIORITY"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PRIORITY { get { if (!_EXTRA_PRIORITYReady) { _EXTRA_PRIORITYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PRIORITY"); _EXTRA_PRIORITYReady = true; } return _EXTRA_PRIORITYContent; } }
        private static Java.Lang.String _EXTRA_PRIORITYContent = default;
        private static bool _EXTRA_PRIORITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_START_CALL_WITH_RTT"/>
        /// </summary>
        public static Java.Lang.String EXTRA_START_CALL_WITH_RTT { get { if (!_EXTRA_START_CALL_WITH_RTTReady) { _EXTRA_START_CALL_WITH_RTTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_START_CALL_WITH_RTT"); _EXTRA_START_CALL_WITH_RTTReady = true; } return _EXTRA_START_CALL_WITH_RTTContent; } }
        private static Java.Lang.String _EXTRA_START_CALL_WITH_RTTContent = default;
        private static bool _EXTRA_START_CALL_WITH_RTTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_START_CALL_WITH_SPEAKERPHONE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_START_CALL_WITH_SPEAKERPHONE { get { if (!_EXTRA_START_CALL_WITH_SPEAKERPHONEReady) { _EXTRA_START_CALL_WITH_SPEAKERPHONEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_START_CALL_WITH_SPEAKERPHONE"); _EXTRA_START_CALL_WITH_SPEAKERPHONEReady = true; } return _EXTRA_START_CALL_WITH_SPEAKERPHONEContent; } }
        private static Java.Lang.String _EXTRA_START_CALL_WITH_SPEAKERPHONEContent = default;
        private static bool _EXTRA_START_CALL_WITH_SPEAKERPHONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_START_CALL_WITH_VIDEO_STATE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_START_CALL_WITH_VIDEO_STATE { get { if (!_EXTRA_START_CALL_WITH_VIDEO_STATEReady) { _EXTRA_START_CALL_WITH_VIDEO_STATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_START_CALL_WITH_VIDEO_STATE"); _EXTRA_START_CALL_WITH_VIDEO_STATEReady = true; } return _EXTRA_START_CALL_WITH_VIDEO_STATEContent; } }
        private static Java.Lang.String _EXTRA_START_CALL_WITH_VIDEO_STATEContent = default;
        private static bool _EXTRA_START_CALL_WITH_VIDEO_STATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#EXTRA_USE_ASSISTED_DIALING"/>
        /// </summary>
        public static Java.Lang.String EXTRA_USE_ASSISTED_DIALING { get { if (!_EXTRA_USE_ASSISTED_DIALINGReady) { _EXTRA_USE_ASSISTED_DIALINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_USE_ASSISTED_DIALING"); _EXTRA_USE_ASSISTED_DIALINGReady = true; } return _EXTRA_USE_ASSISTED_DIALINGContent; } }
        private static Java.Lang.String _EXTRA_USE_ASSISTED_DIALINGContent = default;
        private static bool _EXTRA_USE_ASSISTED_DIALINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#GATEWAY_ORIGINAL_ADDRESS"/>
        /// </summary>
        public static Java.Lang.String GATEWAY_ORIGINAL_ADDRESS { get { if (!_GATEWAY_ORIGINAL_ADDRESSReady) { _GATEWAY_ORIGINAL_ADDRESSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GATEWAY_ORIGINAL_ADDRESS"); _GATEWAY_ORIGINAL_ADDRESSReady = true; } return _GATEWAY_ORIGINAL_ADDRESSContent; } }
        private static Java.Lang.String _GATEWAY_ORIGINAL_ADDRESSContent = default;
        private static bool _GATEWAY_ORIGINAL_ADDRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#GATEWAY_PROVIDER_PACKAGE"/>
        /// </summary>
        public static Java.Lang.String GATEWAY_PROVIDER_PACKAGE { get { if (!_GATEWAY_PROVIDER_PACKAGEReady) { _GATEWAY_PROVIDER_PACKAGEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GATEWAY_PROVIDER_PACKAGE"); _GATEWAY_PROVIDER_PACKAGEReady = true; } return _GATEWAY_PROVIDER_PACKAGEContent; } }
        private static Java.Lang.String _GATEWAY_PROVIDER_PACKAGEContent = default;
        private static bool _GATEWAY_PROVIDER_PACKAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#METADATA_IN_CALL_SERVICE_CAR_MODE_UI"/>
        /// </summary>
        public static Java.Lang.String METADATA_IN_CALL_SERVICE_CAR_MODE_UI { get { if (!_METADATA_IN_CALL_SERVICE_CAR_MODE_UIReady) { _METADATA_IN_CALL_SERVICE_CAR_MODE_UIContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METADATA_IN_CALL_SERVICE_CAR_MODE_UI"); _METADATA_IN_CALL_SERVICE_CAR_MODE_UIReady = true; } return _METADATA_IN_CALL_SERVICE_CAR_MODE_UIContent; } }
        private static Java.Lang.String _METADATA_IN_CALL_SERVICE_CAR_MODE_UIContent = default;
        private static bool _METADATA_IN_CALL_SERVICE_CAR_MODE_UIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#METADATA_IN_CALL_SERVICE_RINGING"/>
        /// </summary>
        public static Java.Lang.String METADATA_IN_CALL_SERVICE_RINGING { get { if (!_METADATA_IN_CALL_SERVICE_RINGINGReady) { _METADATA_IN_CALL_SERVICE_RINGINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METADATA_IN_CALL_SERVICE_RINGING"); _METADATA_IN_CALL_SERVICE_RINGINGReady = true; } return _METADATA_IN_CALL_SERVICE_RINGINGContent; } }
        private static Java.Lang.String _METADATA_IN_CALL_SERVICE_RINGINGContent = default;
        private static bool _METADATA_IN_CALL_SERVICE_RINGINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#METADATA_IN_CALL_SERVICE_UI"/>
        /// </summary>
        public static Java.Lang.String METADATA_IN_CALL_SERVICE_UI { get { if (!_METADATA_IN_CALL_SERVICE_UIReady) { _METADATA_IN_CALL_SERVICE_UIContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METADATA_IN_CALL_SERVICE_UI"); _METADATA_IN_CALL_SERVICE_UIReady = true; } return _METADATA_IN_CALL_SERVICE_UIContent; } }
        private static Java.Lang.String _METADATA_IN_CALL_SERVICE_UIContent = default;
        private static bool _METADATA_IN_CALL_SERVICE_UIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#METADATA_INCLUDE_EXTERNAL_CALLS"/>
        /// </summary>
        public static Java.Lang.String METADATA_INCLUDE_EXTERNAL_CALLS { get { if (!_METADATA_INCLUDE_EXTERNAL_CALLSReady) { _METADATA_INCLUDE_EXTERNAL_CALLSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METADATA_INCLUDE_EXTERNAL_CALLS"); _METADATA_INCLUDE_EXTERNAL_CALLSReady = true; } return _METADATA_INCLUDE_EXTERNAL_CALLSContent; } }
        private static Java.Lang.String _METADATA_INCLUDE_EXTERNAL_CALLSContent = default;
        private static bool _METADATA_INCLUDE_EXTERNAL_CALLSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#METADATA_INCLUDE_SELF_MANAGED_CALLS"/>
        /// </summary>
        public static Java.Lang.String METADATA_INCLUDE_SELF_MANAGED_CALLS { get { if (!_METADATA_INCLUDE_SELF_MANAGED_CALLSReady) { _METADATA_INCLUDE_SELF_MANAGED_CALLSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METADATA_INCLUDE_SELF_MANAGED_CALLS"); _METADATA_INCLUDE_SELF_MANAGED_CALLSReady = true; } return _METADATA_INCLUDE_SELF_MANAGED_CALLSContent; } }
        private static Java.Lang.String _METADATA_INCLUDE_SELF_MANAGED_CALLSContent = default;
        private static bool _METADATA_INCLUDE_SELF_MANAGED_CALLSReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#getCallCapablePhoneAccounts()"/> 
        /// </summary>
        public Java.Util.List<Android.Telecom.PhoneAccountHandle> CallCapablePhoneAccounts
        {
            get { return IExecuteWithSignature<Java.Util.List<Android.Telecom.PhoneAccountHandle>>("getCallCapablePhoneAccounts", "()Ljava/util/List;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#getDefaultDialerPackage()"/> 
        /// </summary>
        public Java.Lang.String DefaultDialerPackage
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getDefaultDialerPackage", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#getOwnSelfManagedPhoneAccounts()"/> 
        /// </summary>
        public Java.Util.List<Android.Telecom.PhoneAccountHandle> OwnSelfManagedPhoneAccounts
        {
            get { return IExecuteWithSignature<Java.Util.List<Android.Telecom.PhoneAccountHandle>>("getOwnSelfManagedPhoneAccounts", "()Ljava/util/List;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#getSelfManagedPhoneAccounts()"/> 
        /// </summary>
        public Java.Util.List<Android.Telecom.PhoneAccountHandle> SelfManagedPhoneAccounts
        {
            get { return IExecuteWithSignature<Java.Util.List<Android.Telecom.PhoneAccountHandle>>("getSelfManagedPhoneAccounts", "()Ljava/util/List;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#getSimCallManager()"/> 
        /// </summary>
        public Android.Telecom.PhoneAccountHandle SimCallManager
        {
            get { return IExecuteWithSignature<Android.Telecom.PhoneAccountHandle>("getSimCallManager", "()Landroid/telecom/PhoneAccountHandle;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#getSystemDialerPackage()"/> 
        /// </summary>
        public Java.Lang.String SystemDialerPackage
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getSystemDialerPackage", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#getUserSelectedOutgoingPhoneAccount()"/> 
        /// </summary>
        public Android.Telecom.PhoneAccountHandle UserSelectedOutgoingPhoneAccount
        {
            get { return IExecuteWithSignature<Android.Telecom.PhoneAccountHandle>("getUserSelectedOutgoingPhoneAccount", "()Landroid/telecom/PhoneAccountHandle;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#createManageBlockedNumbersIntent()"/>
        /// </summary>
        /// <returns><see cref="Android.Content.Intent"/></returns>
        public Android.Content.Intent CreateManageBlockedNumbersIntent()
        {
            return IExecuteWithSignature<Android.Content.Intent>("createManageBlockedNumbersIntent", "()Landroid/content/Intent;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#getAdnUriForPhoneAccount(android.telecom.PhoneAccountHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telecom.PhoneAccountHandle"/></param>
        /// <returns><see cref="Android.Net.Uri"/></returns>
        public Android.Net.Uri GetAdnUriForPhoneAccount(Android.Telecom.PhoneAccountHandle arg0)
        {
            return IExecuteWithSignature<Android.Net.Uri>("getAdnUriForPhoneAccount", "(Landroid/telecom/PhoneAccountHandle;)Landroid/net/Uri;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#getPhoneAccount(android.telecom.PhoneAccountHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telecom.PhoneAccountHandle"/></param>
        /// <returns><see cref="Android.Telecom.PhoneAccount"/></returns>
        public Android.Telecom.PhoneAccount GetPhoneAccount(Android.Telecom.PhoneAccountHandle arg0)
        {
            return IExecuteWithSignature<Android.Telecom.PhoneAccount>("getPhoneAccount", "(Landroid/telecom/PhoneAccountHandle;)Landroid/telecom/PhoneAccount;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#getDefaultOutgoingPhoneAccount(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Telecom.PhoneAccountHandle"/></returns>
        public Android.Telecom.PhoneAccountHandle GetDefaultOutgoingPhoneAccount(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Android.Telecom.PhoneAccountHandle>("getDefaultOutgoingPhoneAccount", "(Ljava/lang/String;)Landroid/telecom/PhoneAccountHandle;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#getSimCallManagerForSubscription(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Telecom.PhoneAccountHandle"/></returns>
        public Android.Telecom.PhoneAccountHandle GetSimCallManagerForSubscription(int arg0)
        {
            return IExecuteWithSignature<Android.Telecom.PhoneAccountHandle>("getSimCallManagerForSubscription", "(I)Landroid/telecom/PhoneAccountHandle;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#handleMmi(java.lang.String,android.telecom.PhoneAccountHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Telecom.PhoneAccountHandle"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HandleMmi(Java.Lang.String arg0, Android.Telecom.PhoneAccountHandle arg1)
        {
            return IExecute<bool>("handleMmi", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#handleMmi(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HandleMmi(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<bool>("handleMmi", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#hasManageOngoingCallsPermission()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasManageOngoingCallsPermission()
        {
            return IExecuteWithSignature<bool>("hasManageOngoingCallsPermission", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#isInCall()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsInCall()
        {
            return IExecuteWithSignature<bool>("isInCall", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#isIncomingCallPermitted(android.telecom.PhoneAccountHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telecom.PhoneAccountHandle"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsIncomingCallPermitted(Android.Telecom.PhoneAccountHandle arg0)
        {
            return IExecuteWithSignature<bool>("isIncomingCallPermitted", "(Landroid/telecom/PhoneAccountHandle;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#isInManagedCall()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsInManagedCall()
        {
            return IExecuteWithSignature<bool>("isInManagedCall", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#isOutgoingCallPermitted(android.telecom.PhoneAccountHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telecom.PhoneAccountHandle"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsOutgoingCallPermitted(Android.Telecom.PhoneAccountHandle arg0)
        {
            return IExecuteWithSignature<bool>("isOutgoingCallPermitted", "(Landroid/telecom/PhoneAccountHandle;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#isTtySupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsTtySupported()
        {
            return IExecuteWithSignature<bool>("isTtySupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#isVoiceMailNumber(android.telecom.PhoneAccountHandle,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telecom.PhoneAccountHandle"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsVoiceMailNumber(Android.Telecom.PhoneAccountHandle arg0, Java.Lang.String arg1)
        {
            return IExecute<bool>("isVoiceMailNumber", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#getVoiceMailNumber(android.telecom.PhoneAccountHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telecom.PhoneAccountHandle"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetVoiceMailNumber(Android.Telecom.PhoneAccountHandle arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getVoiceMailNumber", "(Landroid/telecom/PhoneAccountHandle;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#acceptHandover(android.net.Uri,int,android.telecom.PhoneAccountHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Telecom.PhoneAccountHandle"/></param>
        public void AcceptHandover(Android.Net.Uri arg0, int arg1, Android.Telecom.PhoneAccountHandle arg2)
        {
            IExecute("acceptHandover", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#addCall(android.telecom.CallAttributes,java.util.concurrent.Executor,android.os.OutcomeReceiver,android.telecom.CallControlCallback,android.telecom.CallEventCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telecom.CallAttributes"/></param>
        /// <param name="arg1"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg2"><see cref="Android.Os.OutcomeReceiver"/></param>
        /// <param name="arg3"><see cref="Android.Telecom.CallControlCallback"/></param>
        /// <param name="arg4"><see cref="Android.Telecom.CallEventCallback"/></param>
        public void AddCall(Android.Telecom.CallAttributes arg0, Java.Util.Concurrent.Executor arg1, Android.Os.OutcomeReceiver<Android.Telecom.CallControl, Android.Telecom.CallException> arg2, Android.Telecom.CallControlCallback arg3, Android.Telecom.CallEventCallback arg4)
        {
            IExecute("addCall", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#addNewIncomingCall(android.telecom.PhoneAccountHandle,android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telecom.PhoneAccountHandle"/></param>
        /// <param name="arg1"><see cref="Android.Os.Bundle"/></param>
        public void AddNewIncomingCall(Android.Telecom.PhoneAccountHandle arg0, Android.Os.Bundle arg1)
        {
            IExecute("addNewIncomingCall", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#addNewIncomingConference(android.telecom.PhoneAccountHandle,android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telecom.PhoneAccountHandle"/></param>
        /// <param name="arg1"><see cref="Android.Os.Bundle"/></param>
        public void AddNewIncomingConference(Android.Telecom.PhoneAccountHandle arg0, Android.Os.Bundle arg1)
        {
            IExecute("addNewIncomingConference", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#cancelMissedCallsNotification()"/>
        /// </summary>
        public void CancelMissedCallsNotification()
        {
            IExecuteWithSignature("cancelMissedCallsNotification", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#placeCall(android.net.Uri,android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg1"><see cref="Android.Os.Bundle"/></param>
        public void PlaceCall(Android.Net.Uri arg0, Android.Os.Bundle arg1)
        {
            IExecute("placeCall", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#registerPhoneAccount(android.telecom.PhoneAccount)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telecom.PhoneAccount"/></param>
        public void RegisterPhoneAccount(Android.Telecom.PhoneAccount arg0)
        {
            IExecuteWithSignature("registerPhoneAccount", "(Landroid/telecom/PhoneAccount;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#showInCallScreen(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void ShowInCallScreen(bool arg0)
        {
            IExecuteWithSignature("showInCallScreen", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#silenceRinger()"/>
        /// </summary>
        public void SilenceRinger()
        {
            IExecuteWithSignature("silenceRinger", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#startConference(java.util.List,android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        /// <param name="arg1"><see cref="Android.Os.Bundle"/></param>
        public void StartConference(Java.Util.List<Android.Net.Uri> arg0, Android.Os.Bundle arg1)
        {
            IExecute("startConference", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/TelecomManager.html#unregisterPhoneAccount(android.telecom.PhoneAccountHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telecom.PhoneAccountHandle"/></param>
        public void UnregisterPhoneAccount(Android.Telecom.PhoneAccountHandle arg0)
        {
            IExecuteWithSignature("unregisterPhoneAccount", "(Landroid/telecom/PhoneAccountHandle;)V", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
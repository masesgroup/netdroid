/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.6.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Telecom
{
    #region CallAttributes
    public partial class CallAttributes
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/CallAttributes.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/CallAttributes.html#AUDIO_CALL"/>
        /// </summary>
        public static int AUDIO_CALL { get { if (!_AUDIO_CALLReady) { _AUDIO_CALLContent = SGetField<int>(LocalBridgeClazz, "AUDIO_CALL"); _AUDIO_CALLReady = true; } return _AUDIO_CALLContent; } }
        private static int _AUDIO_CALLContent = default;
        private static bool _AUDIO_CALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/CallAttributes.html#DIRECTION_INCOMING"/>
        /// </summary>
        public static int DIRECTION_INCOMING { get { if (!_DIRECTION_INCOMINGReady) { _DIRECTION_INCOMINGContent = SGetField<int>(LocalBridgeClazz, "DIRECTION_INCOMING"); _DIRECTION_INCOMINGReady = true; } return _DIRECTION_INCOMINGContent; } }
        private static int _DIRECTION_INCOMINGContent = default;
        private static bool _DIRECTION_INCOMINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/CallAttributes.html#DIRECTION_OUTGOING"/>
        /// </summary>
        public static int DIRECTION_OUTGOING { get { if (!_DIRECTION_OUTGOINGReady) { _DIRECTION_OUTGOINGContent = SGetField<int>(LocalBridgeClazz, "DIRECTION_OUTGOING"); _DIRECTION_OUTGOINGReady = true; } return _DIRECTION_OUTGOINGContent; } }
        private static int _DIRECTION_OUTGOINGContent = default;
        private static bool _DIRECTION_OUTGOINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/CallAttributes.html#SUPPORTS_SET_INACTIVE"/>
        /// </summary>
        public static int SUPPORTS_SET_INACTIVE { get { if (!_SUPPORTS_SET_INACTIVEReady) { _SUPPORTS_SET_INACTIVEContent = SGetField<int>(LocalBridgeClazz, "SUPPORTS_SET_INACTIVE"); _SUPPORTS_SET_INACTIVEReady = true; } return _SUPPORTS_SET_INACTIVEContent; } }
        private static int _SUPPORTS_SET_INACTIVEContent = default;
        private static bool _SUPPORTS_SET_INACTIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/CallAttributes.html#SUPPORTS_STREAM"/>
        /// </summary>
        public static int SUPPORTS_STREAM { get { if (!_SUPPORTS_STREAMReady) { _SUPPORTS_STREAMContent = SGetField<int>(LocalBridgeClazz, "SUPPORTS_STREAM"); _SUPPORTS_STREAMReady = true; } return _SUPPORTS_STREAMContent; } }
        private static int _SUPPORTS_STREAMContent = default;
        private static bool _SUPPORTS_STREAMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/CallAttributes.html#SUPPORTS_TRANSFER"/>
        /// </summary>
        public static int SUPPORTS_TRANSFER { get { if (!_SUPPORTS_TRANSFERReady) { _SUPPORTS_TRANSFERContent = SGetField<int>(LocalBridgeClazz, "SUPPORTS_TRANSFER"); _SUPPORTS_TRANSFERReady = true; } return _SUPPORTS_TRANSFERContent; } }
        private static int _SUPPORTS_TRANSFERContent = default;
        private static bool _SUPPORTS_TRANSFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/CallAttributes.html#SUPPORTS_VIDEO_CALLING"/>
        /// </summary>
        public static int SUPPORTS_VIDEO_CALLING { get { if (!_SUPPORTS_VIDEO_CALLINGReady) { _SUPPORTS_VIDEO_CALLINGContent = SGetField<int>(LocalBridgeClazz, "SUPPORTS_VIDEO_CALLING"); _SUPPORTS_VIDEO_CALLINGReady = true; } return _SUPPORTS_VIDEO_CALLINGContent; } }
        private static int _SUPPORTS_VIDEO_CALLINGContent = default;
        private static bool _SUPPORTS_VIDEO_CALLINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/CallAttributes.html#VIDEO_CALL"/>
        /// </summary>
        public static int VIDEO_CALL { get { if (!_VIDEO_CALLReady) { _VIDEO_CALLContent = SGetField<int>(LocalBridgeClazz, "VIDEO_CALL"); _VIDEO_CALLReady = true; } return _VIDEO_CALLContent; } }
        private static int _VIDEO_CALLContent = default;
        private static bool _VIDEO_CALLReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/CallAttributes.html#getAddress()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.Uri"/></returns>
        public Android.Net.Uri GetAddress()
        {
            return IExecuteWithSignature<Android.Net.Uri>("getAddress", "()Landroid/net/Uri;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/CallAttributes.html#getPhoneAccountHandle()"/>
        /// </summary>
        /// <returns><see cref="Android.Telecom.PhoneAccountHandle"/></returns>
        public Android.Telecom.PhoneAccountHandle GetPhoneAccountHandle()
        {
            return IExecuteWithSignature<Android.Telecom.PhoneAccountHandle>("getPhoneAccountHandle", "()Landroid/telecom/PhoneAccountHandle;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/CallAttributes.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/CallAttributes.html#getCallCapabilities()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetCallCapabilities()
        {
            return IExecuteWithSignature<int>("getCallCapabilities", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/CallAttributes.html#getCallType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetCallType()
        {
            return IExecuteWithSignature<int>("getCallType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/CallAttributes.html#getDirection()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetDirection()
        {
            return IExecuteWithSignature<int>("getDirection", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/CallAttributes.html#getDisplayName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetDisplayName()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getDisplayName", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/CallAttributes.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecute("writeToParcel", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region Builder
        public partial class Builder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/CallAttributes.Builder.html#%3Cinit%3E(android.telecom.PhoneAccountHandle,int,java.lang.CharSequence,android.net.Uri)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Telecom.PhoneAccountHandle"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="Java.Lang.CharSequence"/></param>
            /// <param name="arg3"><see cref="Android.Net.Uri"/></param>
            public Builder(Android.Telecom.PhoneAccountHandle arg0, int arg1, Java.Lang.CharSequence arg2, Android.Net.Uri arg3)
                : base(arg0, arg1, arg2, arg3)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/CallAttributes.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Telecom.CallAttributes"/></returns>
            public Android.Telecom.CallAttributes Build()
            {
                return IExecuteWithSignature<Android.Telecom.CallAttributes>("build", "()Landroid/telecom/CallAttributes;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/CallAttributes.Builder.html#setCallCapabilities(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Telecom.CallAttributes.Builder"/></returns>
            public Android.Telecom.CallAttributes.Builder SetCallCapabilities(int arg0)
            {
                return IExecuteWithSignature<Android.Telecom.CallAttributes.Builder>("setCallCapabilities", "(I)Landroid/telecom/CallAttributes$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/CallAttributes.Builder.html#setCallType(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Telecom.CallAttributes.Builder"/></returns>
            public Android.Telecom.CallAttributes.Builder SetCallType(int arg0)
            {
                return IExecuteWithSignature<Android.Telecom.CallAttributes.Builder>("setCallType", "(I)Landroid/telecom/CallAttributes$Builder;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
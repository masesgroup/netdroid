/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Telecom
{
    #region Call
    public partial class Call
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#REJECT_REASON_DECLINED"/>
        /// </summary>
        public static int REJECT_REASON_DECLINED { get { if (!_REJECT_REASON_DECLINEDReady) { _REJECT_REASON_DECLINEDContent = SGetField<int>(LocalBridgeClazz, "REJECT_REASON_DECLINED"); _REJECT_REASON_DECLINEDReady = true; } return _REJECT_REASON_DECLINEDContent; } }
        private static int _REJECT_REASON_DECLINEDContent = default;
        private static bool _REJECT_REASON_DECLINEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#REJECT_REASON_UNWANTED"/>
        /// </summary>
        public static int REJECT_REASON_UNWANTED { get { if (!_REJECT_REASON_UNWANTEDReady) { _REJECT_REASON_UNWANTEDContent = SGetField<int>(LocalBridgeClazz, "REJECT_REASON_UNWANTED"); _REJECT_REASON_UNWANTEDReady = true; } return _REJECT_REASON_UNWANTEDContent; } }
        private static int _REJECT_REASON_UNWANTEDContent = default;
        private static bool _REJECT_REASON_UNWANTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#STATE_ACTIVE"/>
        /// </summary>
        public static int STATE_ACTIVE { get { if (!_STATE_ACTIVEReady) { _STATE_ACTIVEContent = SGetField<int>(LocalBridgeClazz, "STATE_ACTIVE"); _STATE_ACTIVEReady = true; } return _STATE_ACTIVEContent; } }
        private static int _STATE_ACTIVEContent = default;
        private static bool _STATE_ACTIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#STATE_AUDIO_PROCESSING"/>
        /// </summary>
        public static int STATE_AUDIO_PROCESSING { get { if (!_STATE_AUDIO_PROCESSINGReady) { _STATE_AUDIO_PROCESSINGContent = SGetField<int>(LocalBridgeClazz, "STATE_AUDIO_PROCESSING"); _STATE_AUDIO_PROCESSINGReady = true; } return _STATE_AUDIO_PROCESSINGContent; } }
        private static int _STATE_AUDIO_PROCESSINGContent = default;
        private static bool _STATE_AUDIO_PROCESSINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#STATE_CONNECTING"/>
        /// </summary>
        public static int STATE_CONNECTING { get { if (!_STATE_CONNECTINGReady) { _STATE_CONNECTINGContent = SGetField<int>(LocalBridgeClazz, "STATE_CONNECTING"); _STATE_CONNECTINGReady = true; } return _STATE_CONNECTINGContent; } }
        private static int _STATE_CONNECTINGContent = default;
        private static bool _STATE_CONNECTINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#STATE_DIALING"/>
        /// </summary>
        public static int STATE_DIALING { get { if (!_STATE_DIALINGReady) { _STATE_DIALINGContent = SGetField<int>(LocalBridgeClazz, "STATE_DIALING"); _STATE_DIALINGReady = true; } return _STATE_DIALINGContent; } }
        private static int _STATE_DIALINGContent = default;
        private static bool _STATE_DIALINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#STATE_DISCONNECTED"/>
        /// </summary>
        public static int STATE_DISCONNECTED { get { if (!_STATE_DISCONNECTEDReady) { _STATE_DISCONNECTEDContent = SGetField<int>(LocalBridgeClazz, "STATE_DISCONNECTED"); _STATE_DISCONNECTEDReady = true; } return _STATE_DISCONNECTEDContent; } }
        private static int _STATE_DISCONNECTEDContent = default;
        private static bool _STATE_DISCONNECTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#STATE_DISCONNECTING"/>
        /// </summary>
        public static int STATE_DISCONNECTING { get { if (!_STATE_DISCONNECTINGReady) { _STATE_DISCONNECTINGContent = SGetField<int>(LocalBridgeClazz, "STATE_DISCONNECTING"); _STATE_DISCONNECTINGReady = true; } return _STATE_DISCONNECTINGContent; } }
        private static int _STATE_DISCONNECTINGContent = default;
        private static bool _STATE_DISCONNECTINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#STATE_HOLDING"/>
        /// </summary>
        public static int STATE_HOLDING { get { if (!_STATE_HOLDINGReady) { _STATE_HOLDINGContent = SGetField<int>(LocalBridgeClazz, "STATE_HOLDING"); _STATE_HOLDINGReady = true; } return _STATE_HOLDINGContent; } }
        private static int _STATE_HOLDINGContent = default;
        private static bool _STATE_HOLDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#STATE_NEW"/>
        /// </summary>
        public static int STATE_NEW { get { if (!_STATE_NEWReady) { _STATE_NEWContent = SGetField<int>(LocalBridgeClazz, "STATE_NEW"); _STATE_NEWReady = true; } return _STATE_NEWContent; } }
        private static int _STATE_NEWContent = default;
        private static bool _STATE_NEWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#STATE_PULLING_CALL"/>
        /// </summary>
        public static int STATE_PULLING_CALL { get { if (!_STATE_PULLING_CALLReady) { _STATE_PULLING_CALLContent = SGetField<int>(LocalBridgeClazz, "STATE_PULLING_CALL"); _STATE_PULLING_CALLReady = true; } return _STATE_PULLING_CALLContent; } }
        private static int _STATE_PULLING_CALLContent = default;
        private static bool _STATE_PULLING_CALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#STATE_RINGING"/>
        /// </summary>
        public static int STATE_RINGING { get { if (!_STATE_RINGINGReady) { _STATE_RINGINGContent = SGetField<int>(LocalBridgeClazz, "STATE_RINGING"); _STATE_RINGINGReady = true; } return _STATE_RINGINGContent; } }
        private static int _STATE_RINGINGContent = default;
        private static bool _STATE_RINGINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#STATE_SELECT_PHONE_ACCOUNT"/>
        /// </summary>
        public static int STATE_SELECT_PHONE_ACCOUNT { get { if (!_STATE_SELECT_PHONE_ACCOUNTReady) { _STATE_SELECT_PHONE_ACCOUNTContent = SGetField<int>(LocalBridgeClazz, "STATE_SELECT_PHONE_ACCOUNT"); _STATE_SELECT_PHONE_ACCOUNTReady = true; } return _STATE_SELECT_PHONE_ACCOUNTContent; } }
        private static int _STATE_SELECT_PHONE_ACCOUNTContent = default;
        private static bool _STATE_SELECT_PHONE_ACCOUNTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#STATE_SIMULATED_RINGING"/>
        /// </summary>
        public static int STATE_SIMULATED_RINGING { get { if (!_STATE_SIMULATED_RINGINGReady) { _STATE_SIMULATED_RINGINGContent = SGetField<int>(LocalBridgeClazz, "STATE_SIMULATED_RINGING"); _STATE_SIMULATED_RINGINGReady = true; } return _STATE_SIMULATED_RINGINGContent; } }
        private static int _STATE_SIMULATED_RINGINGContent = default;
        private static bool _STATE_SIMULATED_RINGINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#AVAILABLE_PHONE_ACCOUNTS"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String AVAILABLE_PHONE_ACCOUNTS { get { if (!_AVAILABLE_PHONE_ACCOUNTSReady) { _AVAILABLE_PHONE_ACCOUNTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "AVAILABLE_PHONE_ACCOUNTS"); _AVAILABLE_PHONE_ACCOUNTSReady = true; } return _AVAILABLE_PHONE_ACCOUNTSContent; } }
        private static Java.Lang.String _AVAILABLE_PHONE_ACCOUNTSContent = default;
        private static bool _AVAILABLE_PHONE_ACCOUNTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#EVENT_CLEAR_DIAGNOSTIC_MESSAGE"/>
        /// </summary>
        public static Java.Lang.String EVENT_CLEAR_DIAGNOSTIC_MESSAGE { get { if (!_EVENT_CLEAR_DIAGNOSTIC_MESSAGEReady) { _EVENT_CLEAR_DIAGNOSTIC_MESSAGEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EVENT_CLEAR_DIAGNOSTIC_MESSAGE"); _EVENT_CLEAR_DIAGNOSTIC_MESSAGEReady = true; } return _EVENT_CLEAR_DIAGNOSTIC_MESSAGEContent; } }
        private static Java.Lang.String _EVENT_CLEAR_DIAGNOSTIC_MESSAGEContent = default;
        private static bool _EVENT_CLEAR_DIAGNOSTIC_MESSAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#EVENT_DISPLAY_DIAGNOSTIC_MESSAGE"/>
        /// </summary>
        public static Java.Lang.String EVENT_DISPLAY_DIAGNOSTIC_MESSAGE { get { if (!_EVENT_DISPLAY_DIAGNOSTIC_MESSAGEReady) { _EVENT_DISPLAY_DIAGNOSTIC_MESSAGEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EVENT_DISPLAY_DIAGNOSTIC_MESSAGE"); _EVENT_DISPLAY_DIAGNOSTIC_MESSAGEReady = true; } return _EVENT_DISPLAY_DIAGNOSTIC_MESSAGEContent; } }
        private static Java.Lang.String _EVENT_DISPLAY_DIAGNOSTIC_MESSAGEContent = default;
        private static bool _EVENT_DISPLAY_DIAGNOSTIC_MESSAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#EXTRA_DIAGNOSTIC_MESSAGE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_DIAGNOSTIC_MESSAGE { get { if (!_EXTRA_DIAGNOSTIC_MESSAGEReady) { _EXTRA_DIAGNOSTIC_MESSAGEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_DIAGNOSTIC_MESSAGE"); _EXTRA_DIAGNOSTIC_MESSAGEReady = true; } return _EXTRA_DIAGNOSTIC_MESSAGEContent; } }
        private static Java.Lang.String _EXTRA_DIAGNOSTIC_MESSAGEContent = default;
        private static bool _EXTRA_DIAGNOSTIC_MESSAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#EXTRA_DIAGNOSTIC_MESSAGE_ID"/>
        /// </summary>
        public static Java.Lang.String EXTRA_DIAGNOSTIC_MESSAGE_ID { get { if (!_EXTRA_DIAGNOSTIC_MESSAGE_IDReady) { _EXTRA_DIAGNOSTIC_MESSAGE_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_DIAGNOSTIC_MESSAGE_ID"); _EXTRA_DIAGNOSTIC_MESSAGE_IDReady = true; } return _EXTRA_DIAGNOSTIC_MESSAGE_IDContent; } }
        private static Java.Lang.String _EXTRA_DIAGNOSTIC_MESSAGE_IDContent = default;
        private static bool _EXTRA_DIAGNOSTIC_MESSAGE_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#EXTRA_IS_SUPPRESSED_BY_DO_NOT_DISTURB"/>
        /// </summary>
        public static Java.Lang.String EXTRA_IS_SUPPRESSED_BY_DO_NOT_DISTURB { get { if (!_EXTRA_IS_SUPPRESSED_BY_DO_NOT_DISTURBReady) { _EXTRA_IS_SUPPRESSED_BY_DO_NOT_DISTURBContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_IS_SUPPRESSED_BY_DO_NOT_DISTURB"); _EXTRA_IS_SUPPRESSED_BY_DO_NOT_DISTURBReady = true; } return _EXTRA_IS_SUPPRESSED_BY_DO_NOT_DISTURBContent; } }
        private static Java.Lang.String _EXTRA_IS_SUPPRESSED_BY_DO_NOT_DISTURBContent = default;
        private static bool _EXTRA_IS_SUPPRESSED_BY_DO_NOT_DISTURBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#EXTRA_LAST_EMERGENCY_CALLBACK_TIME_MILLIS"/>
        /// </summary>
        public static Java.Lang.String EXTRA_LAST_EMERGENCY_CALLBACK_TIME_MILLIS { get { if (!_EXTRA_LAST_EMERGENCY_CALLBACK_TIME_MILLISReady) { _EXTRA_LAST_EMERGENCY_CALLBACK_TIME_MILLISContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_LAST_EMERGENCY_CALLBACK_TIME_MILLIS"); _EXTRA_LAST_EMERGENCY_CALLBACK_TIME_MILLISReady = true; } return _EXTRA_LAST_EMERGENCY_CALLBACK_TIME_MILLISContent; } }
        private static Java.Lang.String _EXTRA_LAST_EMERGENCY_CALLBACK_TIME_MILLISContent = default;
        private static bool _EXTRA_LAST_EMERGENCY_CALLBACK_TIME_MILLISReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#EXTRA_SILENT_RINGING_REQUESTED"/>
        /// </summary>
        public static Java.Lang.String EXTRA_SILENT_RINGING_REQUESTED { get { if (!_EXTRA_SILENT_RINGING_REQUESTEDReady) { _EXTRA_SILENT_RINGING_REQUESTEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_SILENT_RINGING_REQUESTED"); _EXTRA_SILENT_RINGING_REQUESTEDReady = true; } return _EXTRA_SILENT_RINGING_REQUESTEDContent; } }
        private static Java.Lang.String _EXTRA_SILENT_RINGING_REQUESTEDContent = default;
        private static bool _EXTRA_SILENT_RINGING_REQUESTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#EXTRA_SUGGESTED_PHONE_ACCOUNTS"/>
        /// </summary>
        public static Java.Lang.String EXTRA_SUGGESTED_PHONE_ACCOUNTS { get { if (!_EXTRA_SUGGESTED_PHONE_ACCOUNTSReady) { _EXTRA_SUGGESTED_PHONE_ACCOUNTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_SUGGESTED_PHONE_ACCOUNTS"); _EXTRA_SUGGESTED_PHONE_ACCOUNTSReady = true; } return _EXTRA_SUGGESTED_PHONE_ACCOUNTSContent; } }
        private static Java.Lang.String _EXTRA_SUGGESTED_PHONE_ACCOUNTSContent = default;
        private static bool _EXTRA_SUGGESTED_PHONE_ACCOUNTSReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#getGenericConferenceActiveChildCall()"/>
        /// </summary>
        /// <returns><see cref="Android.Telecom.Call"/></returns>
        public Android.Telecom.Call GetGenericConferenceActiveChildCall()
        {
            return IExecuteWithSignature<Android.Telecom.Call>("getGenericConferenceActiveChildCall", "()Landroid/telecom/Call;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#getParent()"/>
        /// </summary>
        /// <returns><see cref="Android.Telecom.Call"/></returns>
        public Android.Telecom.Call GetParent()
        {
            return IExecuteWithSignature<Android.Telecom.Call>("getParent", "()Landroid/telecom/Call;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#getDetails()"/>
        /// </summary>
        /// <returns><see cref="Android.Telecom.Call.Details"/></returns>
        public Android.Telecom.Call.Details GetDetails()
        {
            return IExecuteWithSignature<Android.Telecom.Call.Details>("getDetails", "()Landroid/telecom/Call$Details;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#getRttCall()"/>
        /// </summary>
        /// <returns><see cref="Android.Telecom.Call.RttCall"/></returns>
        public Android.Telecom.Call.RttCall GetRttCall()
        {
            return IExecuteWithSignature<Android.Telecom.Call.RttCall>("getRttCall", "()Landroid/telecom/Call$RttCall;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#getVideoCall()"/>
        /// </summary>
        /// <returns><see cref="Android.Telecom.InCallService.VideoCall"/></returns>
        public Android.Telecom.InCallService.VideoCall GetVideoCall()
        {
            return IExecuteWithSignature<Android.Telecom.InCallService.VideoCall>("getVideoCall", "()Landroid/telecom/InCallService$VideoCall;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#isRttActive()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsRttActive()
        {
            return IExecuteWithSignature<bool>("isRttActive", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#getState()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetState()
        {
            return IExecuteWithSignature<int>("getState", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#getRemainingPostDialSequence()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetRemainingPostDialSequence()
        {
            return IExecuteWithSignature<Java.Lang.String>("getRemainingPostDialSequence", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#getChildren()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Telecom.Call> GetChildren()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Telecom.Call>>("getChildren", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#getConferenceableCalls()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Telecom.Call> GetConferenceableCalls()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Telecom.Call>>("getConferenceableCalls", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#getCannedTextResponses()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Java.Lang.String> GetCannedTextResponses()
        {
            return IExecuteWithSignature<Java.Util.List<Java.Lang.String>>("getCannedTextResponses", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#addConferenceParticipants(java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        public void AddConferenceParticipants(Java.Util.List<Android.Net.Uri> arg0)
        {
            IExecuteWithSignature("addConferenceParticipants", "(Ljava/util/List;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#answer(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void Answer(int arg0)
        {
            IExecuteWithSignature("answer", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#conference(android.telecom.Call)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telecom.Call"/></param>
        public void Conference(Android.Telecom.Call arg0)
        {
            IExecuteWithSignature("conference", "(Landroid/telecom/Call;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#deflect(android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        public void Deflect(Android.Net.Uri arg0)
        {
            IExecuteWithSignature("deflect", "(Landroid/net/Uri;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#disconnect()"/>
        /// </summary>
        public void Disconnect()
        {
            IExecuteWithSignature("disconnect", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#handoverTo(android.telecom.PhoneAccountHandle,int,android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telecom.PhoneAccountHandle"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Os.Bundle"/></param>
        public void HandoverTo(Android.Telecom.PhoneAccountHandle arg0, int arg1, Android.Os.Bundle arg2)
        {
            IExecute("handoverTo", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#hold()"/>
        /// </summary>
        public void Hold()
        {
            IExecuteWithSignature("hold", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#mergeConference()"/>
        /// </summary>
        public void MergeConference()
        {
            IExecuteWithSignature("mergeConference", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#phoneAccountSelected(android.telecom.PhoneAccountHandle,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telecom.PhoneAccountHandle"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public void PhoneAccountSelected(Android.Telecom.PhoneAccountHandle arg0, bool arg1)
        {
            IExecute("phoneAccountSelected", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#playDtmfTone(char)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        public void PlayDtmfTone(char arg0)
        {
            IExecuteWithSignature("playDtmfTone", "(C)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#postDialContinue(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void PostDialContinue(bool arg0)
        {
            IExecuteWithSignature("postDialContinue", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#pullExternalCall()"/>
        /// </summary>
        public void PullExternalCall()
        {
            IExecuteWithSignature("pullExternalCall", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#putExtras(android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Bundle"/></param>
        public void PutExtras(Android.Os.Bundle arg0)
        {
            IExecuteWithSignature("putExtras", "(Landroid/os/Bundle;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#registerCallback(android.telecom.Call.Callback,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telecom.Call.Callback"/></param>
        /// <param name="arg1"><see cref="Android.Os.Handler"/></param>
        public void RegisterCallback(Android.Telecom.Call.Callback arg0, Android.Os.Handler arg1)
        {
            IExecute("registerCallback", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#registerCallback(android.telecom.Call.Callback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telecom.Call.Callback"/></param>
        public void RegisterCallback(Android.Telecom.Call.Callback arg0)
        {
            IExecuteWithSignature("registerCallback", "(Landroid/telecom/Call$Callback;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#reject(boolean,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        public void Reject(bool arg0, Java.Lang.String arg1)
        {
            IExecute("reject", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#reject(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void Reject(int arg0)
        {
            IExecuteWithSignature("reject", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#removeExtras(java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void RemoveExtras(params Java.Lang.String[] arg0)
        {
            if (arg0.Length == 0) IExecuteWithSignature("removeExtras", "([Ljava/lang/String;)V"); else IExecuteWithSignature("removeExtras", "([Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#removeExtras(java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        public void RemoveExtras(Java.Util.List<Java.Lang.String> arg0)
        {
            IExecuteWithSignature("removeExtras", "(Ljava/util/List;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#respondToRttRequest(int,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public void RespondToRttRequest(int arg0, bool arg1)
        {
            IExecute("respondToRttRequest", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#sendCallEvent(java.lang.String,android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Os.Bundle"/></param>
        public void SendCallEvent(Java.Lang.String arg0, Android.Os.Bundle arg1)
        {
            IExecute("sendCallEvent", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#sendRttRequest()"/>
        /// </summary>
        public void SendRttRequest()
        {
            IExecuteWithSignature("sendRttRequest", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#splitFromConference()"/>
        /// </summary>
        public void SplitFromConference()
        {
            IExecuteWithSignature("splitFromConference", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#stopDtmfTone()"/>
        /// </summary>
        public void StopDtmfTone()
        {
            IExecuteWithSignature("stopDtmfTone", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#stopRtt()"/>
        /// </summary>
        public void StopRtt()
        {
            IExecuteWithSignature("stopRtt", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#swapConference()"/>
        /// </summary>
        public void SwapConference()
        {
            IExecuteWithSignature("swapConference", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#unhold()"/>
        /// </summary>
        public void Unhold()
        {
            IExecuteWithSignature("unhold", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Call.html#unregisterCallback(android.telecom.Call.Callback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telecom.Call.Callback"/></param>
        public void UnregisterCallback(Android.Telecom.Call.Callback arg0)
        {
            IExecuteWithSignature("unregisterCallback", "(Landroid/telecom/Call$Callback;)V", arg0);
        }

        #endregion

        #region Nested classes
        #region Callback
        public partial class Callback
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Callback.html#HANDOVER_FAILURE_DEST_APP_REJECTED"/>
            /// </summary>
            public static int HANDOVER_FAILURE_DEST_APP_REJECTED { get { if (!_HANDOVER_FAILURE_DEST_APP_REJECTEDReady) { _HANDOVER_FAILURE_DEST_APP_REJECTEDContent = SGetField<int>(LocalBridgeClazz, "HANDOVER_FAILURE_DEST_APP_REJECTED"); _HANDOVER_FAILURE_DEST_APP_REJECTEDReady = true; } return _HANDOVER_FAILURE_DEST_APP_REJECTEDContent; } }
            private static int _HANDOVER_FAILURE_DEST_APP_REJECTEDContent = default;
            private static bool _HANDOVER_FAILURE_DEST_APP_REJECTEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Callback.html#HANDOVER_FAILURE_NOT_SUPPORTED"/>
            /// </summary>
            public static int HANDOVER_FAILURE_NOT_SUPPORTED { get { if (!_HANDOVER_FAILURE_NOT_SUPPORTEDReady) { _HANDOVER_FAILURE_NOT_SUPPORTEDContent = SGetField<int>(LocalBridgeClazz, "HANDOVER_FAILURE_NOT_SUPPORTED"); _HANDOVER_FAILURE_NOT_SUPPORTEDReady = true; } return _HANDOVER_FAILURE_NOT_SUPPORTEDContent; } }
            private static int _HANDOVER_FAILURE_NOT_SUPPORTEDContent = default;
            private static bool _HANDOVER_FAILURE_NOT_SUPPORTEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Callback.html#HANDOVER_FAILURE_ONGOING_EMERGENCY_CALL"/>
            /// </summary>
            public static int HANDOVER_FAILURE_ONGOING_EMERGENCY_CALL { get { if (!_HANDOVER_FAILURE_ONGOING_EMERGENCY_CALLReady) { _HANDOVER_FAILURE_ONGOING_EMERGENCY_CALLContent = SGetField<int>(LocalBridgeClazz, "HANDOVER_FAILURE_ONGOING_EMERGENCY_CALL"); _HANDOVER_FAILURE_ONGOING_EMERGENCY_CALLReady = true; } return _HANDOVER_FAILURE_ONGOING_EMERGENCY_CALLContent; } }
            private static int _HANDOVER_FAILURE_ONGOING_EMERGENCY_CALLContent = default;
            private static bool _HANDOVER_FAILURE_ONGOING_EMERGENCY_CALLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Callback.html#HANDOVER_FAILURE_UNKNOWN"/>
            /// </summary>
            public static int HANDOVER_FAILURE_UNKNOWN { get { if (!_HANDOVER_FAILURE_UNKNOWNReady) { _HANDOVER_FAILURE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "HANDOVER_FAILURE_UNKNOWN"); _HANDOVER_FAILURE_UNKNOWNReady = true; } return _HANDOVER_FAILURE_UNKNOWNContent; } }
            private static int _HANDOVER_FAILURE_UNKNOWNContent = default;
            private static bool _HANDOVER_FAILURE_UNKNOWNReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Callback.html#HANDOVER_FAILURE_USER_REJECTED"/>
            /// </summary>
            public static int HANDOVER_FAILURE_USER_REJECTED { get { if (!_HANDOVER_FAILURE_USER_REJECTEDReady) { _HANDOVER_FAILURE_USER_REJECTEDContent = SGetField<int>(LocalBridgeClazz, "HANDOVER_FAILURE_USER_REJECTED"); _HANDOVER_FAILURE_USER_REJECTEDReady = true; } return _HANDOVER_FAILURE_USER_REJECTEDContent; } }
            private static int _HANDOVER_FAILURE_USER_REJECTEDContent = default;
            private static bool _HANDOVER_FAILURE_USER_REJECTEDReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Callback.html#onCallDestroyed(android.telecom.Call)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Telecom.Call"/></param>
            public void OnCallDestroyed(Android.Telecom.Call arg0)
            {
                IExecuteWithSignature("onCallDestroyed", "(Landroid/telecom/Call;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Callback.html#onCannedTextResponsesLoaded(android.telecom.Call,java.util.List)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Telecom.Call"/></param>
            /// <param name="arg1"><see cref="Java.Util.List"/></param>
            public void OnCannedTextResponsesLoaded(Android.Telecom.Call arg0, Java.Util.List<Java.Lang.String> arg1)
            {
                IExecute("onCannedTextResponsesLoaded", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Callback.html#onChildrenChanged(android.telecom.Call,java.util.List)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Telecom.Call"/></param>
            /// <param name="arg1"><see cref="Java.Util.List"/></param>
            public void OnChildrenChanged(Android.Telecom.Call arg0, Java.Util.List<Android.Telecom.Call> arg1)
            {
                IExecute("onChildrenChanged", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Callback.html#onConferenceableCallsChanged(android.telecom.Call,java.util.List)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Telecom.Call"/></param>
            /// <param name="arg1"><see cref="Java.Util.List"/></param>
            public void OnConferenceableCallsChanged(Android.Telecom.Call arg0, Java.Util.List<Android.Telecom.Call> arg1)
            {
                IExecute("onConferenceableCallsChanged", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Callback.html#onConnectionEvent(android.telecom.Call,java.lang.String,android.os.Bundle)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Telecom.Call"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <param name="arg2"><see cref="Android.Os.Bundle"/></param>
            public void OnConnectionEvent(Android.Telecom.Call arg0, Java.Lang.String arg1, Android.Os.Bundle arg2)
            {
                IExecute("onConnectionEvent", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Callback.html#onDetailsChanged(android.telecom.Call,android.telecom.Call.Details)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Telecom.Call"/></param>
            /// <param name="arg1"><see cref="Android.Telecom.Call.Details"/></param>
            public void OnDetailsChanged(Android.Telecom.Call arg0, Android.Telecom.Call.Details arg1)
            {
                IExecute("onDetailsChanged", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Callback.html#onHandoverComplete(android.telecom.Call)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Telecom.Call"/></param>
            public void OnHandoverComplete(Android.Telecom.Call arg0)
            {
                IExecuteWithSignature("onHandoverComplete", "(Landroid/telecom/Call;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Callback.html#onHandoverFailed(android.telecom.Call,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Telecom.Call"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void OnHandoverFailed(Android.Telecom.Call arg0, int arg1)
            {
                IExecute("onHandoverFailed", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Callback.html#onParentChanged(android.telecom.Call,android.telecom.Call)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Telecom.Call"/></param>
            /// <param name="arg1"><see cref="Android.Telecom.Call"/></param>
            public void OnParentChanged(Android.Telecom.Call arg0, Android.Telecom.Call arg1)
            {
                IExecute("onParentChanged", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Callback.html#onPostDialWait(android.telecom.Call,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Telecom.Call"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            public void OnPostDialWait(Android.Telecom.Call arg0, Java.Lang.String arg1)
            {
                IExecute("onPostDialWait", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Callback.html#onRttInitiationFailure(android.telecom.Call,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Telecom.Call"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void OnRttInitiationFailure(Android.Telecom.Call arg0, int arg1)
            {
                IExecute("onRttInitiationFailure", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Callback.html#onRttModeChanged(android.telecom.Call,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Telecom.Call"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void OnRttModeChanged(Android.Telecom.Call arg0, int arg1)
            {
                IExecute("onRttModeChanged", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Callback.html#onRttRequest(android.telecom.Call,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Telecom.Call"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void OnRttRequest(Android.Telecom.Call arg0, int arg1)
            {
                IExecute("onRttRequest", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Callback.html#onRttStatusChanged(android.telecom.Call,boolean,android.telecom.Call.RttCall)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Telecom.Call"/></param>
            /// <param name="arg1"><see cref="bool"/></param>
            /// <param name="arg2"><see cref="Android.Telecom.Call.RttCall"/></param>
            public void OnRttStatusChanged(Android.Telecom.Call arg0, bool arg1, Android.Telecom.Call.RttCall arg2)
            {
                IExecute("onRttStatusChanged", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Callback.html#onStateChanged(android.telecom.Call,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Telecom.Call"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void OnStateChanged(Android.Telecom.Call arg0, int arg1)
            {
                IExecute("onStateChanged", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Callback.html#onVideoCallChanged(android.telecom.Call,android.telecom.InCallService.VideoCall)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Telecom.Call"/></param>
            /// <param name="arg1"><see cref="Android.Telecom.InCallService.VideoCall"/></param>
            public void OnVideoCallChanged(Android.Telecom.Call arg0, Android.Telecom.InCallService.VideoCall arg1)
            {
                IExecute("onVideoCallChanged", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Details
        public partial class Details
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#CAPABILITY_ADD_PARTICIPANT"/>
            /// </summary>
            public static int CAPABILITY_ADD_PARTICIPANT { get { if (!_CAPABILITY_ADD_PARTICIPANTReady) { _CAPABILITY_ADD_PARTICIPANTContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_ADD_PARTICIPANT"); _CAPABILITY_ADD_PARTICIPANTReady = true; } return _CAPABILITY_ADD_PARTICIPANTContent; } }
            private static int _CAPABILITY_ADD_PARTICIPANTContent = default;
            private static bool _CAPABILITY_ADD_PARTICIPANTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#CAPABILITY_CAN_PAUSE_VIDEO"/>
            /// </summary>
            public static int CAPABILITY_CAN_PAUSE_VIDEO { get { if (!_CAPABILITY_CAN_PAUSE_VIDEOReady) { _CAPABILITY_CAN_PAUSE_VIDEOContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_CAN_PAUSE_VIDEO"); _CAPABILITY_CAN_PAUSE_VIDEOReady = true; } return _CAPABILITY_CAN_PAUSE_VIDEOContent; } }
            private static int _CAPABILITY_CAN_PAUSE_VIDEOContent = default;
            private static bool _CAPABILITY_CAN_PAUSE_VIDEOReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#CAPABILITY_CAN_PULL_CALL"/>
            /// </summary>
            public static int CAPABILITY_CAN_PULL_CALL { get { if (!_CAPABILITY_CAN_PULL_CALLReady) { _CAPABILITY_CAN_PULL_CALLContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_CAN_PULL_CALL"); _CAPABILITY_CAN_PULL_CALLReady = true; } return _CAPABILITY_CAN_PULL_CALLContent; } }
            private static int _CAPABILITY_CAN_PULL_CALLContent = default;
            private static bool _CAPABILITY_CAN_PULL_CALLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#CAPABILITY_CANNOT_DOWNGRADE_VIDEO_TO_AUDIO"/>
            /// </summary>
            public static int CAPABILITY_CANNOT_DOWNGRADE_VIDEO_TO_AUDIO { get { if (!_CAPABILITY_CANNOT_DOWNGRADE_VIDEO_TO_AUDIOReady) { _CAPABILITY_CANNOT_DOWNGRADE_VIDEO_TO_AUDIOContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_CANNOT_DOWNGRADE_VIDEO_TO_AUDIO"); _CAPABILITY_CANNOT_DOWNGRADE_VIDEO_TO_AUDIOReady = true; } return _CAPABILITY_CANNOT_DOWNGRADE_VIDEO_TO_AUDIOContent; } }
            private static int _CAPABILITY_CANNOT_DOWNGRADE_VIDEO_TO_AUDIOContent = default;
            private static bool _CAPABILITY_CANNOT_DOWNGRADE_VIDEO_TO_AUDIOReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#CAPABILITY_DISCONNECT_FROM_CONFERENCE"/>
            /// </summary>
            public static int CAPABILITY_DISCONNECT_FROM_CONFERENCE { get { if (!_CAPABILITY_DISCONNECT_FROM_CONFERENCEReady) { _CAPABILITY_DISCONNECT_FROM_CONFERENCEContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_DISCONNECT_FROM_CONFERENCE"); _CAPABILITY_DISCONNECT_FROM_CONFERENCEReady = true; } return _CAPABILITY_DISCONNECT_FROM_CONFERENCEContent; } }
            private static int _CAPABILITY_DISCONNECT_FROM_CONFERENCEContent = default;
            private static bool _CAPABILITY_DISCONNECT_FROM_CONFERENCEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#CAPABILITY_HOLD"/>
            /// </summary>
            public static int CAPABILITY_HOLD { get { if (!_CAPABILITY_HOLDReady) { _CAPABILITY_HOLDContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_HOLD"); _CAPABILITY_HOLDReady = true; } return _CAPABILITY_HOLDContent; } }
            private static int _CAPABILITY_HOLDContent = default;
            private static bool _CAPABILITY_HOLDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#CAPABILITY_MANAGE_CONFERENCE"/>
            /// </summary>
            public static int CAPABILITY_MANAGE_CONFERENCE { get { if (!_CAPABILITY_MANAGE_CONFERENCEReady) { _CAPABILITY_MANAGE_CONFERENCEContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_MANAGE_CONFERENCE"); _CAPABILITY_MANAGE_CONFERENCEReady = true; } return _CAPABILITY_MANAGE_CONFERENCEContent; } }
            private static int _CAPABILITY_MANAGE_CONFERENCEContent = default;
            private static bool _CAPABILITY_MANAGE_CONFERENCEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#CAPABILITY_MERGE_CONFERENCE"/>
            /// </summary>
            public static int CAPABILITY_MERGE_CONFERENCE { get { if (!_CAPABILITY_MERGE_CONFERENCEReady) { _CAPABILITY_MERGE_CONFERENCEContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_MERGE_CONFERENCE"); _CAPABILITY_MERGE_CONFERENCEReady = true; } return _CAPABILITY_MERGE_CONFERENCEContent; } }
            private static int _CAPABILITY_MERGE_CONFERENCEContent = default;
            private static bool _CAPABILITY_MERGE_CONFERENCEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#CAPABILITY_MUTE"/>
            /// </summary>
            public static int CAPABILITY_MUTE { get { if (!_CAPABILITY_MUTEReady) { _CAPABILITY_MUTEContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_MUTE"); _CAPABILITY_MUTEReady = true; } return _CAPABILITY_MUTEContent; } }
            private static int _CAPABILITY_MUTEContent = default;
            private static bool _CAPABILITY_MUTEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#CAPABILITY_REMOTE_PARTY_SUPPORTS_RTT"/>
            /// </summary>
            public static int CAPABILITY_REMOTE_PARTY_SUPPORTS_RTT { get { if (!_CAPABILITY_REMOTE_PARTY_SUPPORTS_RTTReady) { _CAPABILITY_REMOTE_PARTY_SUPPORTS_RTTContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_REMOTE_PARTY_SUPPORTS_RTT"); _CAPABILITY_REMOTE_PARTY_SUPPORTS_RTTReady = true; } return _CAPABILITY_REMOTE_PARTY_SUPPORTS_RTTContent; } }
            private static int _CAPABILITY_REMOTE_PARTY_SUPPORTS_RTTContent = default;
            private static bool _CAPABILITY_REMOTE_PARTY_SUPPORTS_RTTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#CAPABILITY_RESPOND_VIA_TEXT"/>
            /// </summary>
            public static int CAPABILITY_RESPOND_VIA_TEXT { get { if (!_CAPABILITY_RESPOND_VIA_TEXTReady) { _CAPABILITY_RESPOND_VIA_TEXTContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_RESPOND_VIA_TEXT"); _CAPABILITY_RESPOND_VIA_TEXTReady = true; } return _CAPABILITY_RESPOND_VIA_TEXTContent; } }
            private static int _CAPABILITY_RESPOND_VIA_TEXTContent = default;
            private static bool _CAPABILITY_RESPOND_VIA_TEXTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#CAPABILITY_SEPARATE_FROM_CONFERENCE"/>
            /// </summary>
            public static int CAPABILITY_SEPARATE_FROM_CONFERENCE { get { if (!_CAPABILITY_SEPARATE_FROM_CONFERENCEReady) { _CAPABILITY_SEPARATE_FROM_CONFERENCEContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_SEPARATE_FROM_CONFERENCE"); _CAPABILITY_SEPARATE_FROM_CONFERENCEReady = true; } return _CAPABILITY_SEPARATE_FROM_CONFERENCEContent; } }
            private static int _CAPABILITY_SEPARATE_FROM_CONFERENCEContent = default;
            private static bool _CAPABILITY_SEPARATE_FROM_CONFERENCEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#CAPABILITY_SUPPORT_DEFLECT"/>
            /// </summary>
            public static int CAPABILITY_SUPPORT_DEFLECT { get { if (!_CAPABILITY_SUPPORT_DEFLECTReady) { _CAPABILITY_SUPPORT_DEFLECTContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_SUPPORT_DEFLECT"); _CAPABILITY_SUPPORT_DEFLECTReady = true; } return _CAPABILITY_SUPPORT_DEFLECTContent; } }
            private static int _CAPABILITY_SUPPORT_DEFLECTContent = default;
            private static bool _CAPABILITY_SUPPORT_DEFLECTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#CAPABILITY_SUPPORT_HOLD"/>
            /// </summary>
            public static int CAPABILITY_SUPPORT_HOLD { get { if (!_CAPABILITY_SUPPORT_HOLDReady) { _CAPABILITY_SUPPORT_HOLDContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_SUPPORT_HOLD"); _CAPABILITY_SUPPORT_HOLDReady = true; } return _CAPABILITY_SUPPORT_HOLDContent; } }
            private static int _CAPABILITY_SUPPORT_HOLDContent = default;
            private static bool _CAPABILITY_SUPPORT_HOLDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#CAPABILITY_SUPPORTS_VT_LOCAL_BIDIRECTIONAL"/>
            /// </summary>
            public static int CAPABILITY_SUPPORTS_VT_LOCAL_BIDIRECTIONAL { get { if (!_CAPABILITY_SUPPORTS_VT_LOCAL_BIDIRECTIONALReady) { _CAPABILITY_SUPPORTS_VT_LOCAL_BIDIRECTIONALContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_SUPPORTS_VT_LOCAL_BIDIRECTIONAL"); _CAPABILITY_SUPPORTS_VT_LOCAL_BIDIRECTIONALReady = true; } return _CAPABILITY_SUPPORTS_VT_LOCAL_BIDIRECTIONALContent; } }
            private static int _CAPABILITY_SUPPORTS_VT_LOCAL_BIDIRECTIONALContent = default;
            private static bool _CAPABILITY_SUPPORTS_VT_LOCAL_BIDIRECTIONALReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#CAPABILITY_SUPPORTS_VT_LOCAL_RX"/>
            /// </summary>
            public static int CAPABILITY_SUPPORTS_VT_LOCAL_RX { get { if (!_CAPABILITY_SUPPORTS_VT_LOCAL_RXReady) { _CAPABILITY_SUPPORTS_VT_LOCAL_RXContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_SUPPORTS_VT_LOCAL_RX"); _CAPABILITY_SUPPORTS_VT_LOCAL_RXReady = true; } return _CAPABILITY_SUPPORTS_VT_LOCAL_RXContent; } }
            private static int _CAPABILITY_SUPPORTS_VT_LOCAL_RXContent = default;
            private static bool _CAPABILITY_SUPPORTS_VT_LOCAL_RXReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#CAPABILITY_SUPPORTS_VT_LOCAL_TX"/>
            /// </summary>
            public static int CAPABILITY_SUPPORTS_VT_LOCAL_TX { get { if (!_CAPABILITY_SUPPORTS_VT_LOCAL_TXReady) { _CAPABILITY_SUPPORTS_VT_LOCAL_TXContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_SUPPORTS_VT_LOCAL_TX"); _CAPABILITY_SUPPORTS_VT_LOCAL_TXReady = true; } return _CAPABILITY_SUPPORTS_VT_LOCAL_TXContent; } }
            private static int _CAPABILITY_SUPPORTS_VT_LOCAL_TXContent = default;
            private static bool _CAPABILITY_SUPPORTS_VT_LOCAL_TXReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#CAPABILITY_SUPPORTS_VT_REMOTE_BIDIRECTIONAL"/>
            /// </summary>
            public static int CAPABILITY_SUPPORTS_VT_REMOTE_BIDIRECTIONAL { get { if (!_CAPABILITY_SUPPORTS_VT_REMOTE_BIDIRECTIONALReady) { _CAPABILITY_SUPPORTS_VT_REMOTE_BIDIRECTIONALContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_SUPPORTS_VT_REMOTE_BIDIRECTIONAL"); _CAPABILITY_SUPPORTS_VT_REMOTE_BIDIRECTIONALReady = true; } return _CAPABILITY_SUPPORTS_VT_REMOTE_BIDIRECTIONALContent; } }
            private static int _CAPABILITY_SUPPORTS_VT_REMOTE_BIDIRECTIONALContent = default;
            private static bool _CAPABILITY_SUPPORTS_VT_REMOTE_BIDIRECTIONALReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#CAPABILITY_SUPPORTS_VT_REMOTE_RX"/>
            /// </summary>
            public static int CAPABILITY_SUPPORTS_VT_REMOTE_RX { get { if (!_CAPABILITY_SUPPORTS_VT_REMOTE_RXReady) { _CAPABILITY_SUPPORTS_VT_REMOTE_RXContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_SUPPORTS_VT_REMOTE_RX"); _CAPABILITY_SUPPORTS_VT_REMOTE_RXReady = true; } return _CAPABILITY_SUPPORTS_VT_REMOTE_RXContent; } }
            private static int _CAPABILITY_SUPPORTS_VT_REMOTE_RXContent = default;
            private static bool _CAPABILITY_SUPPORTS_VT_REMOTE_RXReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#CAPABILITY_SUPPORTS_VT_REMOTE_TX"/>
            /// </summary>
            public static int CAPABILITY_SUPPORTS_VT_REMOTE_TX { get { if (!_CAPABILITY_SUPPORTS_VT_REMOTE_TXReady) { _CAPABILITY_SUPPORTS_VT_REMOTE_TXContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_SUPPORTS_VT_REMOTE_TX"); _CAPABILITY_SUPPORTS_VT_REMOTE_TXReady = true; } return _CAPABILITY_SUPPORTS_VT_REMOTE_TXContent; } }
            private static int _CAPABILITY_SUPPORTS_VT_REMOTE_TXContent = default;
            private static bool _CAPABILITY_SUPPORTS_VT_REMOTE_TXReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#CAPABILITY_SWAP_CONFERENCE"/>
            /// </summary>
            public static int CAPABILITY_SWAP_CONFERENCE { get { if (!_CAPABILITY_SWAP_CONFERENCEReady) { _CAPABILITY_SWAP_CONFERENCEContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_SWAP_CONFERENCE"); _CAPABILITY_SWAP_CONFERENCEReady = true; } return _CAPABILITY_SWAP_CONFERENCEContent; } }
            private static int _CAPABILITY_SWAP_CONFERENCEContent = default;
            private static bool _CAPABILITY_SWAP_CONFERENCEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#DIRECTION_INCOMING"/>
            /// </summary>
            public static int DIRECTION_INCOMING { get { if (!_DIRECTION_INCOMINGReady) { _DIRECTION_INCOMINGContent = SGetField<int>(LocalBridgeClazz, "DIRECTION_INCOMING"); _DIRECTION_INCOMINGReady = true; } return _DIRECTION_INCOMINGContent; } }
            private static int _DIRECTION_INCOMINGContent = default;
            private static bool _DIRECTION_INCOMINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#DIRECTION_OUTGOING"/>
            /// </summary>
            public static int DIRECTION_OUTGOING { get { if (!_DIRECTION_OUTGOINGReady) { _DIRECTION_OUTGOINGContent = SGetField<int>(LocalBridgeClazz, "DIRECTION_OUTGOING"); _DIRECTION_OUTGOINGReady = true; } return _DIRECTION_OUTGOINGContent; } }
            private static int _DIRECTION_OUTGOINGContent = default;
            private static bool _DIRECTION_OUTGOINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#DIRECTION_UNKNOWN"/>
            /// </summary>
            public static int DIRECTION_UNKNOWN { get { if (!_DIRECTION_UNKNOWNReady) { _DIRECTION_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "DIRECTION_UNKNOWN"); _DIRECTION_UNKNOWNReady = true; } return _DIRECTION_UNKNOWNContent; } }
            private static int _DIRECTION_UNKNOWNContent = default;
            private static bool _DIRECTION_UNKNOWNReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#PROPERTY_ASSISTED_DIALING"/>
            /// </summary>
            public static int PROPERTY_ASSISTED_DIALING { get { if (!_PROPERTY_ASSISTED_DIALINGReady) { _PROPERTY_ASSISTED_DIALINGContent = SGetField<int>(LocalBridgeClazz, "PROPERTY_ASSISTED_DIALING"); _PROPERTY_ASSISTED_DIALINGReady = true; } return _PROPERTY_ASSISTED_DIALINGContent; } }
            private static int _PROPERTY_ASSISTED_DIALINGContent = default;
            private static bool _PROPERTY_ASSISTED_DIALINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#PROPERTY_CONFERENCE"/>
            /// </summary>
            public static int PROPERTY_CONFERENCE { get { if (!_PROPERTY_CONFERENCEReady) { _PROPERTY_CONFERENCEContent = SGetField<int>(LocalBridgeClazz, "PROPERTY_CONFERENCE"); _PROPERTY_CONFERENCEReady = true; } return _PROPERTY_CONFERENCEContent; } }
            private static int _PROPERTY_CONFERENCEContent = default;
            private static bool _PROPERTY_CONFERENCEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#PROPERTY_CROSS_SIM"/>
            /// </summary>
            public static int PROPERTY_CROSS_SIM { get { if (!_PROPERTY_CROSS_SIMReady) { _PROPERTY_CROSS_SIMContent = SGetField<int>(LocalBridgeClazz, "PROPERTY_CROSS_SIM"); _PROPERTY_CROSS_SIMReady = true; } return _PROPERTY_CROSS_SIMContent; } }
            private static int _PROPERTY_CROSS_SIMContent = default;
            private static bool _PROPERTY_CROSS_SIMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#PROPERTY_EMERGENCY_CALLBACK_MODE"/>
            /// </summary>
            public static int PROPERTY_EMERGENCY_CALLBACK_MODE { get { if (!_PROPERTY_EMERGENCY_CALLBACK_MODEReady) { _PROPERTY_EMERGENCY_CALLBACK_MODEContent = SGetField<int>(LocalBridgeClazz, "PROPERTY_EMERGENCY_CALLBACK_MODE"); _PROPERTY_EMERGENCY_CALLBACK_MODEReady = true; } return _PROPERTY_EMERGENCY_CALLBACK_MODEContent; } }
            private static int _PROPERTY_EMERGENCY_CALLBACK_MODEContent = default;
            private static bool _PROPERTY_EMERGENCY_CALLBACK_MODEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#PROPERTY_ENTERPRISE_CALL"/>
            /// </summary>
            public static int PROPERTY_ENTERPRISE_CALL { get { if (!_PROPERTY_ENTERPRISE_CALLReady) { _PROPERTY_ENTERPRISE_CALLContent = SGetField<int>(LocalBridgeClazz, "PROPERTY_ENTERPRISE_CALL"); _PROPERTY_ENTERPRISE_CALLReady = true; } return _PROPERTY_ENTERPRISE_CALLContent; } }
            private static int _PROPERTY_ENTERPRISE_CALLContent = default;
            private static bool _PROPERTY_ENTERPRISE_CALLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#PROPERTY_GENERIC_CONFERENCE"/>
            /// </summary>
            public static int PROPERTY_GENERIC_CONFERENCE { get { if (!_PROPERTY_GENERIC_CONFERENCEReady) { _PROPERTY_GENERIC_CONFERENCEContent = SGetField<int>(LocalBridgeClazz, "PROPERTY_GENERIC_CONFERENCE"); _PROPERTY_GENERIC_CONFERENCEReady = true; } return _PROPERTY_GENERIC_CONFERENCEContent; } }
            private static int _PROPERTY_GENERIC_CONFERENCEContent = default;
            private static bool _PROPERTY_GENERIC_CONFERENCEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#PROPERTY_HAS_CDMA_VOICE_PRIVACY"/>
            /// </summary>
            public static int PROPERTY_HAS_CDMA_VOICE_PRIVACY { get { if (!_PROPERTY_HAS_CDMA_VOICE_PRIVACYReady) { _PROPERTY_HAS_CDMA_VOICE_PRIVACYContent = SGetField<int>(LocalBridgeClazz, "PROPERTY_HAS_CDMA_VOICE_PRIVACY"); _PROPERTY_HAS_CDMA_VOICE_PRIVACYReady = true; } return _PROPERTY_HAS_CDMA_VOICE_PRIVACYContent; } }
            private static int _PROPERTY_HAS_CDMA_VOICE_PRIVACYContent = default;
            private static bool _PROPERTY_HAS_CDMA_VOICE_PRIVACYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#PROPERTY_HIGH_DEF_AUDIO"/>
            /// </summary>
            public static int PROPERTY_HIGH_DEF_AUDIO { get { if (!_PROPERTY_HIGH_DEF_AUDIOReady) { _PROPERTY_HIGH_DEF_AUDIOContent = SGetField<int>(LocalBridgeClazz, "PROPERTY_HIGH_DEF_AUDIO"); _PROPERTY_HIGH_DEF_AUDIOReady = true; } return _PROPERTY_HIGH_DEF_AUDIOContent; } }
            private static int _PROPERTY_HIGH_DEF_AUDIOContent = default;
            private static bool _PROPERTY_HIGH_DEF_AUDIOReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#PROPERTY_IS_ADHOC_CONFERENCE"/>
            /// </summary>
            public static int PROPERTY_IS_ADHOC_CONFERENCE { get { if (!_PROPERTY_IS_ADHOC_CONFERENCEReady) { _PROPERTY_IS_ADHOC_CONFERENCEContent = SGetField<int>(LocalBridgeClazz, "PROPERTY_IS_ADHOC_CONFERENCE"); _PROPERTY_IS_ADHOC_CONFERENCEReady = true; } return _PROPERTY_IS_ADHOC_CONFERENCEContent; } }
            private static int _PROPERTY_IS_ADHOC_CONFERENCEContent = default;
            private static bool _PROPERTY_IS_ADHOC_CONFERENCEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#PROPERTY_IS_EXTERNAL_CALL"/>
            /// </summary>
            public static int PROPERTY_IS_EXTERNAL_CALL { get { if (!_PROPERTY_IS_EXTERNAL_CALLReady) { _PROPERTY_IS_EXTERNAL_CALLContent = SGetField<int>(LocalBridgeClazz, "PROPERTY_IS_EXTERNAL_CALL"); _PROPERTY_IS_EXTERNAL_CALLReady = true; } return _PROPERTY_IS_EXTERNAL_CALLContent; } }
            private static int _PROPERTY_IS_EXTERNAL_CALLContent = default;
            private static bool _PROPERTY_IS_EXTERNAL_CALLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#PROPERTY_NETWORK_IDENTIFIED_EMERGENCY_CALL"/>
            /// </summary>
            public static int PROPERTY_NETWORK_IDENTIFIED_EMERGENCY_CALL { get { if (!_PROPERTY_NETWORK_IDENTIFIED_EMERGENCY_CALLReady) { _PROPERTY_NETWORK_IDENTIFIED_EMERGENCY_CALLContent = SGetField<int>(LocalBridgeClazz, "PROPERTY_NETWORK_IDENTIFIED_EMERGENCY_CALL"); _PROPERTY_NETWORK_IDENTIFIED_EMERGENCY_CALLReady = true; } return _PROPERTY_NETWORK_IDENTIFIED_EMERGENCY_CALLContent; } }
            private static int _PROPERTY_NETWORK_IDENTIFIED_EMERGENCY_CALLContent = default;
            private static bool _PROPERTY_NETWORK_IDENTIFIED_EMERGENCY_CALLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#PROPERTY_RTT"/>
            /// </summary>
            public static int PROPERTY_RTT { get { if (!_PROPERTY_RTTReady) { _PROPERTY_RTTContent = SGetField<int>(LocalBridgeClazz, "PROPERTY_RTT"); _PROPERTY_RTTReady = true; } return _PROPERTY_RTTContent; } }
            private static int _PROPERTY_RTTContent = default;
            private static bool _PROPERTY_RTTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#PROPERTY_SELF_MANAGED"/>
            /// </summary>
            public static int PROPERTY_SELF_MANAGED { get { if (!_PROPERTY_SELF_MANAGEDReady) { _PROPERTY_SELF_MANAGEDContent = SGetField<int>(LocalBridgeClazz, "PROPERTY_SELF_MANAGED"); _PROPERTY_SELF_MANAGEDReady = true; } return _PROPERTY_SELF_MANAGEDContent; } }
            private static int _PROPERTY_SELF_MANAGEDContent = default;
            private static bool _PROPERTY_SELF_MANAGEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#PROPERTY_VOIP_AUDIO_MODE"/>
            /// </summary>
            public static int PROPERTY_VOIP_AUDIO_MODE { get { if (!_PROPERTY_VOIP_AUDIO_MODEReady) { _PROPERTY_VOIP_AUDIO_MODEContent = SGetField<int>(LocalBridgeClazz, "PROPERTY_VOIP_AUDIO_MODE"); _PROPERTY_VOIP_AUDIO_MODEReady = true; } return _PROPERTY_VOIP_AUDIO_MODEContent; } }
            private static int _PROPERTY_VOIP_AUDIO_MODEContent = default;
            private static bool _PROPERTY_VOIP_AUDIO_MODEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#PROPERTY_WIFI"/>
            /// </summary>
            public static int PROPERTY_WIFI { get { if (!_PROPERTY_WIFIReady) { _PROPERTY_WIFIContent = SGetField<int>(LocalBridgeClazz, "PROPERTY_WIFI"); _PROPERTY_WIFIReady = true; } return _PROPERTY_WIFIContent; } }
            private static int _PROPERTY_WIFIContent = default;
            private static bool _PROPERTY_WIFIReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#can(int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <returns><see cref="bool"/></returns>
            public static bool Can(int arg0, int arg1)
            {
                return SExecute<bool>(LocalBridgeClazz, "can", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#hasProperty(int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <returns><see cref="bool"/></returns>
            public static bool HasProperty(int arg0, int arg1)
            {
                return SExecute<bool>(LocalBridgeClazz, "hasProperty", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#capabilitiesToString(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public static Java.Lang.String CapabilitiesToString(int arg0)
            {
                return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "capabilitiesToString", "(I)Ljava/lang/String;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#propertiesToString(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public static Java.Lang.String PropertiesToString(int arg0)
            {
                return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "propertiesToString", "(I)Ljava/lang/String;", arg0);
            }

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#getContactPhotoUri()"/>
            /// </summary>
            /// <returns><see cref="Android.Net.Uri"/></returns>
            public Android.Net.Uri GetContactPhotoUri()
            {
                return IExecuteWithSignature<Android.Net.Uri>("getContactPhotoUri", "()Landroid/net/Uri;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#getHandle()"/>
            /// </summary>
            /// <returns><see cref="Android.Net.Uri"/></returns>
            public Android.Net.Uri GetHandle()
            {
                return IExecuteWithSignature<Android.Net.Uri>("getHandle", "()Landroid/net/Uri;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#getExtras()"/>
            /// </summary>
            /// <returns><see cref="Android.Os.Bundle"/></returns>
            public Android.Os.Bundle GetExtras()
            {
                return IExecuteWithSignature<Android.Os.Bundle>("getExtras", "()Landroid/os/Bundle;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#getIntentExtras()"/>
            /// </summary>
            /// <returns><see cref="Android.Os.Bundle"/></returns>
            public Android.Os.Bundle GetIntentExtras()
            {
                return IExecuteWithSignature<Android.Os.Bundle>("getIntentExtras", "()Landroid/os/Bundle;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#getDisconnectCause()"/>
            /// </summary>
            /// <returns><see cref="Android.Telecom.DisconnectCause"/></returns>
            public Android.Telecom.DisconnectCause GetDisconnectCause()
            {
                return IExecuteWithSignature<Android.Telecom.DisconnectCause>("getDisconnectCause", "()Landroid/telecom/DisconnectCause;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#getGatewayInfo()"/>
            /// </summary>
            /// <returns><see cref="Android.Telecom.GatewayInfo"/></returns>
            public Android.Telecom.GatewayInfo GetGatewayInfo()
            {
                return IExecuteWithSignature<Android.Telecom.GatewayInfo>("getGatewayInfo", "()Landroid/telecom/GatewayInfo;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#getAccountHandle()"/>
            /// </summary>
            /// <returns><see cref="Android.Telecom.PhoneAccountHandle"/></returns>
            public Android.Telecom.PhoneAccountHandle GetAccountHandle()
            {
                return IExecuteWithSignature<Android.Telecom.PhoneAccountHandle>("getAccountHandle", "()Landroid/telecom/PhoneAccountHandle;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#getStatusHints()"/>
            /// </summary>
            /// <returns><see cref="Android.Telecom.StatusHints"/></returns>
            public Android.Telecom.StatusHints GetStatusHints()
            {
                return IExecuteWithSignature<Android.Telecom.StatusHints>("getStatusHints", "()Landroid/telecom/StatusHints;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#can(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool Can(int arg0)
            {
                return IExecuteWithSignature<bool>("can", "(I)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#hasProperty(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool HasProperty(int arg0)
            {
                return IExecuteWithSignature<bool>("hasProperty", "(I)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#getState()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetState()
            {
                return IExecuteWithSignature<int>("getState", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#getConnectTimeMillis()"/>
            /// </summary>
            /// <returns><see cref="long"/></returns>
            public long GetConnectTimeMillis()
            {
                return IExecuteWithSignature<long>("getConnectTimeMillis", "()J");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#getCallCapabilities()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetCallCapabilities()
            {
                return IExecuteWithSignature<int>("getCallCapabilities", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#getCallDirection()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetCallDirection()
            {
                return IExecuteWithSignature<int>("getCallDirection", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#getCallerDisplayNamePresentation()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetCallerDisplayNamePresentation()
            {
                return IExecuteWithSignature<int>("getCallerDisplayNamePresentation", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#getCallerNumberVerificationStatus()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetCallerNumberVerificationStatus()
            {
                return IExecuteWithSignature<int>("getCallerNumberVerificationStatus", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#getCallProperties()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetCallProperties()
            {
                return IExecuteWithSignature<int>("getCallProperties", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#getHandlePresentation()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetHandlePresentation()
            {
                return IExecuteWithSignature<int>("getHandlePresentation", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#getVideoState()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetVideoState()
            {
                return IExecuteWithSignature<int>("getVideoState", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#getCallerDisplayName()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetCallerDisplayName()
            {
                return IExecuteWithSignature<Java.Lang.String>("getCallerDisplayName", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#getContactDisplayName()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetContactDisplayName()
            {
                return IExecuteWithSignature<Java.Lang.String>("getContactDisplayName", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.Details.html#getCreationTimeMillis()"/>
            /// </summary>
            /// <returns><see cref="long"/></returns>
            public long GetCreationTimeMillis()
            {
                return IExecuteWithSignature<long>("getCreationTimeMillis", "()J");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region RttCall
        public partial class RttCall
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.RttCall.html#RTT_MODE_FULL"/>
            /// </summary>
            public static int RTT_MODE_FULL { get { if (!_RTT_MODE_FULLReady) { _RTT_MODE_FULLContent = SGetField<int>(LocalBridgeClazz, "RTT_MODE_FULL"); _RTT_MODE_FULLReady = true; } return _RTT_MODE_FULLContent; } }
            private static int _RTT_MODE_FULLContent = default;
            private static bool _RTT_MODE_FULLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.RttCall.html#RTT_MODE_HCO"/>
            /// </summary>
            public static int RTT_MODE_HCO { get { if (!_RTT_MODE_HCOReady) { _RTT_MODE_HCOContent = SGetField<int>(LocalBridgeClazz, "RTT_MODE_HCO"); _RTT_MODE_HCOReady = true; } return _RTT_MODE_HCOContent; } }
            private static int _RTT_MODE_HCOContent = default;
            private static bool _RTT_MODE_HCOReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.RttCall.html#RTT_MODE_VCO"/>
            /// </summary>
            public static int RTT_MODE_VCO { get { if (!_RTT_MODE_VCOReady) { _RTT_MODE_VCOContent = SGetField<int>(LocalBridgeClazz, "RTT_MODE_VCO"); _RTT_MODE_VCOReady = true; } return _RTT_MODE_VCOContent; } }
            private static int _RTT_MODE_VCOContent = default;
            private static bool _RTT_MODE_VCOReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.RttCall.html#getRttAudioMode()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetRttAudioMode()
            {
                return IExecuteWithSignature<int>("getRttAudioMode", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.RttCall.html#read()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String Read()
            {
                return IExecuteWithSignature<Java.Lang.String>("read", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.RttCall.html#readImmediately()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            /// <exception cref="Java.Io.IOException"/>
            public Java.Lang.String ReadImmediately()
            {
                return IExecuteWithSignature<Java.Lang.String>("readImmediately", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.RttCall.html#setRttMode(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void SetRttMode(int arg0)
            {
                IExecuteWithSignature("setRttMode", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Call.RttCall.html#write(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <exception cref="Java.Io.IOException"/>
            public void Write(Java.Lang.String arg0)
            {
                IExecuteWithSignature("write", "(Ljava/lang/String;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.2.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Telecom
{
    #region Connection
    public partial class Connection
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#AUDIO_CODEC_AMR"/>
        /// </summary>
        public static int AUDIO_CODEC_AMR { get { if (!_AUDIO_CODEC_AMRReady) { _AUDIO_CODEC_AMRContent = SGetField<int>(LocalBridgeClazz, "AUDIO_CODEC_AMR"); _AUDIO_CODEC_AMRReady = true; } return _AUDIO_CODEC_AMRContent; } }
        private static int _AUDIO_CODEC_AMRContent = default;
        private static bool _AUDIO_CODEC_AMRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#AUDIO_CODEC_AMR_WB"/>
        /// </summary>
        public static int AUDIO_CODEC_AMR_WB { get { if (!_AUDIO_CODEC_AMR_WBReady) { _AUDIO_CODEC_AMR_WBContent = SGetField<int>(LocalBridgeClazz, "AUDIO_CODEC_AMR_WB"); _AUDIO_CODEC_AMR_WBReady = true; } return _AUDIO_CODEC_AMR_WBContent; } }
        private static int _AUDIO_CODEC_AMR_WBContent = default;
        private static bool _AUDIO_CODEC_AMR_WBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#AUDIO_CODEC_EVRC"/>
        /// </summary>
        public static int AUDIO_CODEC_EVRC { get { if (!_AUDIO_CODEC_EVRCReady) { _AUDIO_CODEC_EVRCContent = SGetField<int>(LocalBridgeClazz, "AUDIO_CODEC_EVRC"); _AUDIO_CODEC_EVRCReady = true; } return _AUDIO_CODEC_EVRCContent; } }
        private static int _AUDIO_CODEC_EVRCContent = default;
        private static bool _AUDIO_CODEC_EVRCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#AUDIO_CODEC_EVRC_B"/>
        /// </summary>
        public static int AUDIO_CODEC_EVRC_B { get { if (!_AUDIO_CODEC_EVRC_BReady) { _AUDIO_CODEC_EVRC_BContent = SGetField<int>(LocalBridgeClazz, "AUDIO_CODEC_EVRC_B"); _AUDIO_CODEC_EVRC_BReady = true; } return _AUDIO_CODEC_EVRC_BContent; } }
        private static int _AUDIO_CODEC_EVRC_BContent = default;
        private static bool _AUDIO_CODEC_EVRC_BReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#AUDIO_CODEC_EVRC_NW"/>
        /// </summary>
        public static int AUDIO_CODEC_EVRC_NW { get { if (!_AUDIO_CODEC_EVRC_NWReady) { _AUDIO_CODEC_EVRC_NWContent = SGetField<int>(LocalBridgeClazz, "AUDIO_CODEC_EVRC_NW"); _AUDIO_CODEC_EVRC_NWReady = true; } return _AUDIO_CODEC_EVRC_NWContent; } }
        private static int _AUDIO_CODEC_EVRC_NWContent = default;
        private static bool _AUDIO_CODEC_EVRC_NWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#AUDIO_CODEC_EVRC_WB"/>
        /// </summary>
        public static int AUDIO_CODEC_EVRC_WB { get { if (!_AUDIO_CODEC_EVRC_WBReady) { _AUDIO_CODEC_EVRC_WBContent = SGetField<int>(LocalBridgeClazz, "AUDIO_CODEC_EVRC_WB"); _AUDIO_CODEC_EVRC_WBReady = true; } return _AUDIO_CODEC_EVRC_WBContent; } }
        private static int _AUDIO_CODEC_EVRC_WBContent = default;
        private static bool _AUDIO_CODEC_EVRC_WBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#AUDIO_CODEC_EVS_FB"/>
        /// </summary>
        public static int AUDIO_CODEC_EVS_FB { get { if (!_AUDIO_CODEC_EVS_FBReady) { _AUDIO_CODEC_EVS_FBContent = SGetField<int>(LocalBridgeClazz, "AUDIO_CODEC_EVS_FB"); _AUDIO_CODEC_EVS_FBReady = true; } return _AUDIO_CODEC_EVS_FBContent; } }
        private static int _AUDIO_CODEC_EVS_FBContent = default;
        private static bool _AUDIO_CODEC_EVS_FBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#AUDIO_CODEC_EVS_NB"/>
        /// </summary>
        public static int AUDIO_CODEC_EVS_NB { get { if (!_AUDIO_CODEC_EVS_NBReady) { _AUDIO_CODEC_EVS_NBContent = SGetField<int>(LocalBridgeClazz, "AUDIO_CODEC_EVS_NB"); _AUDIO_CODEC_EVS_NBReady = true; } return _AUDIO_CODEC_EVS_NBContent; } }
        private static int _AUDIO_CODEC_EVS_NBContent = default;
        private static bool _AUDIO_CODEC_EVS_NBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#AUDIO_CODEC_EVS_SWB"/>
        /// </summary>
        public static int AUDIO_CODEC_EVS_SWB { get { if (!_AUDIO_CODEC_EVS_SWBReady) { _AUDIO_CODEC_EVS_SWBContent = SGetField<int>(LocalBridgeClazz, "AUDIO_CODEC_EVS_SWB"); _AUDIO_CODEC_EVS_SWBReady = true; } return _AUDIO_CODEC_EVS_SWBContent; } }
        private static int _AUDIO_CODEC_EVS_SWBContent = default;
        private static bool _AUDIO_CODEC_EVS_SWBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#AUDIO_CODEC_EVS_WB"/>
        /// </summary>
        public static int AUDIO_CODEC_EVS_WB { get { if (!_AUDIO_CODEC_EVS_WBReady) { _AUDIO_CODEC_EVS_WBContent = SGetField<int>(LocalBridgeClazz, "AUDIO_CODEC_EVS_WB"); _AUDIO_CODEC_EVS_WBReady = true; } return _AUDIO_CODEC_EVS_WBContent; } }
        private static int _AUDIO_CODEC_EVS_WBContent = default;
        private static bool _AUDIO_CODEC_EVS_WBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#AUDIO_CODEC_G711A"/>
        /// </summary>
        public static int AUDIO_CODEC_G711A { get { if (!_AUDIO_CODEC_G711AReady) { _AUDIO_CODEC_G711AContent = SGetField<int>(LocalBridgeClazz, "AUDIO_CODEC_G711A"); _AUDIO_CODEC_G711AReady = true; } return _AUDIO_CODEC_G711AContent; } }
        private static int _AUDIO_CODEC_G711AContent = default;
        private static bool _AUDIO_CODEC_G711AReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#AUDIO_CODEC_G711AB"/>
        /// </summary>
        public static int AUDIO_CODEC_G711AB { get { if (!_AUDIO_CODEC_G711ABReady) { _AUDIO_CODEC_G711ABContent = SGetField<int>(LocalBridgeClazz, "AUDIO_CODEC_G711AB"); _AUDIO_CODEC_G711ABReady = true; } return _AUDIO_CODEC_G711ABContent; } }
        private static int _AUDIO_CODEC_G711ABContent = default;
        private static bool _AUDIO_CODEC_G711ABReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#AUDIO_CODEC_G711U"/>
        /// </summary>
        public static int AUDIO_CODEC_G711U { get { if (!_AUDIO_CODEC_G711UReady) { _AUDIO_CODEC_G711UContent = SGetField<int>(LocalBridgeClazz, "AUDIO_CODEC_G711U"); _AUDIO_CODEC_G711UReady = true; } return _AUDIO_CODEC_G711UContent; } }
        private static int _AUDIO_CODEC_G711UContent = default;
        private static bool _AUDIO_CODEC_G711UReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#AUDIO_CODEC_G722"/>
        /// </summary>
        public static int AUDIO_CODEC_G722 { get { if (!_AUDIO_CODEC_G722Ready) { _AUDIO_CODEC_G722Content = SGetField<int>(LocalBridgeClazz, "AUDIO_CODEC_G722"); _AUDIO_CODEC_G722Ready = true; } return _AUDIO_CODEC_G722Content; } }
        private static int _AUDIO_CODEC_G722Content = default;
        private static bool _AUDIO_CODEC_G722Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#AUDIO_CODEC_G723"/>
        /// </summary>
        public static int AUDIO_CODEC_G723 { get { if (!_AUDIO_CODEC_G723Ready) { _AUDIO_CODEC_G723Content = SGetField<int>(LocalBridgeClazz, "AUDIO_CODEC_G723"); _AUDIO_CODEC_G723Ready = true; } return _AUDIO_CODEC_G723Content; } }
        private static int _AUDIO_CODEC_G723Content = default;
        private static bool _AUDIO_CODEC_G723Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#AUDIO_CODEC_G729"/>
        /// </summary>
        public static int AUDIO_CODEC_G729 { get { if (!_AUDIO_CODEC_G729Ready) { _AUDIO_CODEC_G729Content = SGetField<int>(LocalBridgeClazz, "AUDIO_CODEC_G729"); _AUDIO_CODEC_G729Ready = true; } return _AUDIO_CODEC_G729Content; } }
        private static int _AUDIO_CODEC_G729Content = default;
        private static bool _AUDIO_CODEC_G729Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#AUDIO_CODEC_GSM_EFR"/>
        /// </summary>
        public static int AUDIO_CODEC_GSM_EFR { get { if (!_AUDIO_CODEC_GSM_EFRReady) { _AUDIO_CODEC_GSM_EFRContent = SGetField<int>(LocalBridgeClazz, "AUDIO_CODEC_GSM_EFR"); _AUDIO_CODEC_GSM_EFRReady = true; } return _AUDIO_CODEC_GSM_EFRContent; } }
        private static int _AUDIO_CODEC_GSM_EFRContent = default;
        private static bool _AUDIO_CODEC_GSM_EFRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#AUDIO_CODEC_GSM_FR"/>
        /// </summary>
        public static int AUDIO_CODEC_GSM_FR { get { if (!_AUDIO_CODEC_GSM_FRReady) { _AUDIO_CODEC_GSM_FRContent = SGetField<int>(LocalBridgeClazz, "AUDIO_CODEC_GSM_FR"); _AUDIO_CODEC_GSM_FRReady = true; } return _AUDIO_CODEC_GSM_FRContent; } }
        private static int _AUDIO_CODEC_GSM_FRContent = default;
        private static bool _AUDIO_CODEC_GSM_FRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#AUDIO_CODEC_GSM_HR"/>
        /// </summary>
        public static int AUDIO_CODEC_GSM_HR { get { if (!_AUDIO_CODEC_GSM_HRReady) { _AUDIO_CODEC_GSM_HRContent = SGetField<int>(LocalBridgeClazz, "AUDIO_CODEC_GSM_HR"); _AUDIO_CODEC_GSM_HRReady = true; } return _AUDIO_CODEC_GSM_HRContent; } }
        private static int _AUDIO_CODEC_GSM_HRContent = default;
        private static bool _AUDIO_CODEC_GSM_HRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#AUDIO_CODEC_NONE"/>
        /// </summary>
        public static int AUDIO_CODEC_NONE { get { if (!_AUDIO_CODEC_NONEReady) { _AUDIO_CODEC_NONEContent = SGetField<int>(LocalBridgeClazz, "AUDIO_CODEC_NONE"); _AUDIO_CODEC_NONEReady = true; } return _AUDIO_CODEC_NONEContent; } }
        private static int _AUDIO_CODEC_NONEContent = default;
        private static bool _AUDIO_CODEC_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#AUDIO_CODEC_QCELP13K"/>
        /// </summary>
        public static int AUDIO_CODEC_QCELP13K { get { if (!_AUDIO_CODEC_QCELP13KReady) { _AUDIO_CODEC_QCELP13KContent = SGetField<int>(LocalBridgeClazz, "AUDIO_CODEC_QCELP13K"); _AUDIO_CODEC_QCELP13KReady = true; } return _AUDIO_CODEC_QCELP13KContent; } }
        private static int _AUDIO_CODEC_QCELP13KContent = default;
        private static bool _AUDIO_CODEC_QCELP13KReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_ADD_PARTICIPANT"/>
        /// </summary>
        public static int CAPABILITY_ADD_PARTICIPANT { get { if (!_CAPABILITY_ADD_PARTICIPANTReady) { _CAPABILITY_ADD_PARTICIPANTContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_ADD_PARTICIPANT"); _CAPABILITY_ADD_PARTICIPANTReady = true; } return _CAPABILITY_ADD_PARTICIPANTContent; } }
        private static int _CAPABILITY_ADD_PARTICIPANTContent = default;
        private static bool _CAPABILITY_ADD_PARTICIPANTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_CAN_PAUSE_VIDEO"/>
        /// </summary>
        public static int CAPABILITY_CAN_PAUSE_VIDEO { get { if (!_CAPABILITY_CAN_PAUSE_VIDEOReady) { _CAPABILITY_CAN_PAUSE_VIDEOContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_CAN_PAUSE_VIDEO"); _CAPABILITY_CAN_PAUSE_VIDEOReady = true; } return _CAPABILITY_CAN_PAUSE_VIDEOContent; } }
        private static int _CAPABILITY_CAN_PAUSE_VIDEOContent = default;
        private static bool _CAPABILITY_CAN_PAUSE_VIDEOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_CAN_PULL_CALL"/>
        /// </summary>
        public static int CAPABILITY_CAN_PULL_CALL { get { if (!_CAPABILITY_CAN_PULL_CALLReady) { _CAPABILITY_CAN_PULL_CALLContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_CAN_PULL_CALL"); _CAPABILITY_CAN_PULL_CALLReady = true; } return _CAPABILITY_CAN_PULL_CALLContent; } }
        private static int _CAPABILITY_CAN_PULL_CALLContent = default;
        private static bool _CAPABILITY_CAN_PULL_CALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_CAN_SEND_RESPONSE_VIA_CONNECTION"/>
        /// </summary>
        public static int CAPABILITY_CAN_SEND_RESPONSE_VIA_CONNECTION { get { if (!_CAPABILITY_CAN_SEND_RESPONSE_VIA_CONNECTIONReady) { _CAPABILITY_CAN_SEND_RESPONSE_VIA_CONNECTIONContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_CAN_SEND_RESPONSE_VIA_CONNECTION"); _CAPABILITY_CAN_SEND_RESPONSE_VIA_CONNECTIONReady = true; } return _CAPABILITY_CAN_SEND_RESPONSE_VIA_CONNECTIONContent; } }
        private static int _CAPABILITY_CAN_SEND_RESPONSE_VIA_CONNECTIONContent = default;
        private static bool _CAPABILITY_CAN_SEND_RESPONSE_VIA_CONNECTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_CAN_UPGRADE_TO_VIDEO"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int CAPABILITY_CAN_UPGRADE_TO_VIDEO { get { if (!_CAPABILITY_CAN_UPGRADE_TO_VIDEOReady) { _CAPABILITY_CAN_UPGRADE_TO_VIDEOContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_CAN_UPGRADE_TO_VIDEO"); _CAPABILITY_CAN_UPGRADE_TO_VIDEOReady = true; } return _CAPABILITY_CAN_UPGRADE_TO_VIDEOContent; } }
        private static int _CAPABILITY_CAN_UPGRADE_TO_VIDEOContent = default;
        private static bool _CAPABILITY_CAN_UPGRADE_TO_VIDEOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_CANNOT_DOWNGRADE_VIDEO_TO_AUDIO"/>
        /// </summary>
        public static int CAPABILITY_CANNOT_DOWNGRADE_VIDEO_TO_AUDIO { get { if (!_CAPABILITY_CANNOT_DOWNGRADE_VIDEO_TO_AUDIOReady) { _CAPABILITY_CANNOT_DOWNGRADE_VIDEO_TO_AUDIOContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_CANNOT_DOWNGRADE_VIDEO_TO_AUDIO"); _CAPABILITY_CANNOT_DOWNGRADE_VIDEO_TO_AUDIOReady = true; } return _CAPABILITY_CANNOT_DOWNGRADE_VIDEO_TO_AUDIOContent; } }
        private static int _CAPABILITY_CANNOT_DOWNGRADE_VIDEO_TO_AUDIOContent = default;
        private static bool _CAPABILITY_CANNOT_DOWNGRADE_VIDEO_TO_AUDIOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_DISCONNECT_FROM_CONFERENCE"/>
        /// </summary>
        public static int CAPABILITY_DISCONNECT_FROM_CONFERENCE { get { if (!_CAPABILITY_DISCONNECT_FROM_CONFERENCEReady) { _CAPABILITY_DISCONNECT_FROM_CONFERENCEContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_DISCONNECT_FROM_CONFERENCE"); _CAPABILITY_DISCONNECT_FROM_CONFERENCEReady = true; } return _CAPABILITY_DISCONNECT_FROM_CONFERENCEContent; } }
        private static int _CAPABILITY_DISCONNECT_FROM_CONFERENCEContent = default;
        private static bool _CAPABILITY_DISCONNECT_FROM_CONFERENCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_HOLD"/>
        /// </summary>
        public static int CAPABILITY_HOLD { get { if (!_CAPABILITY_HOLDReady) { _CAPABILITY_HOLDContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_HOLD"); _CAPABILITY_HOLDReady = true; } return _CAPABILITY_HOLDContent; } }
        private static int _CAPABILITY_HOLDContent = default;
        private static bool _CAPABILITY_HOLDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_MANAGE_CONFERENCE"/>
        /// </summary>
        public static int CAPABILITY_MANAGE_CONFERENCE { get { if (!_CAPABILITY_MANAGE_CONFERENCEReady) { _CAPABILITY_MANAGE_CONFERENCEContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_MANAGE_CONFERENCE"); _CAPABILITY_MANAGE_CONFERENCEReady = true; } return _CAPABILITY_MANAGE_CONFERENCEContent; } }
        private static int _CAPABILITY_MANAGE_CONFERENCEContent = default;
        private static bool _CAPABILITY_MANAGE_CONFERENCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_MERGE_CONFERENCE"/>
        /// </summary>
        public static int CAPABILITY_MERGE_CONFERENCE { get { if (!_CAPABILITY_MERGE_CONFERENCEReady) { _CAPABILITY_MERGE_CONFERENCEContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_MERGE_CONFERENCE"); _CAPABILITY_MERGE_CONFERENCEReady = true; } return _CAPABILITY_MERGE_CONFERENCEContent; } }
        private static int _CAPABILITY_MERGE_CONFERENCEContent = default;
        private static bool _CAPABILITY_MERGE_CONFERENCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_MUTE"/>
        /// </summary>
        public static int CAPABILITY_MUTE { get { if (!_CAPABILITY_MUTEReady) { _CAPABILITY_MUTEContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_MUTE"); _CAPABILITY_MUTEReady = true; } return _CAPABILITY_MUTEContent; } }
        private static int _CAPABILITY_MUTEContent = default;
        private static bool _CAPABILITY_MUTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_REMOTE_PARTY_SUPPORTS_RTT"/>
        /// </summary>
        public static int CAPABILITY_REMOTE_PARTY_SUPPORTS_RTT { get { if (!_CAPABILITY_REMOTE_PARTY_SUPPORTS_RTTReady) { _CAPABILITY_REMOTE_PARTY_SUPPORTS_RTTContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_REMOTE_PARTY_SUPPORTS_RTT"); _CAPABILITY_REMOTE_PARTY_SUPPORTS_RTTReady = true; } return _CAPABILITY_REMOTE_PARTY_SUPPORTS_RTTContent; } }
        private static int _CAPABILITY_REMOTE_PARTY_SUPPORTS_RTTContent = default;
        private static bool _CAPABILITY_REMOTE_PARTY_SUPPORTS_RTTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_RESPOND_VIA_TEXT"/>
        /// </summary>
        public static int CAPABILITY_RESPOND_VIA_TEXT { get { if (!_CAPABILITY_RESPOND_VIA_TEXTReady) { _CAPABILITY_RESPOND_VIA_TEXTContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_RESPOND_VIA_TEXT"); _CAPABILITY_RESPOND_VIA_TEXTReady = true; } return _CAPABILITY_RESPOND_VIA_TEXTContent; } }
        private static int _CAPABILITY_RESPOND_VIA_TEXTContent = default;
        private static bool _CAPABILITY_RESPOND_VIA_TEXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_SEPARATE_FROM_CONFERENCE"/>
        /// </summary>
        public static int CAPABILITY_SEPARATE_FROM_CONFERENCE { get { if (!_CAPABILITY_SEPARATE_FROM_CONFERENCEReady) { _CAPABILITY_SEPARATE_FROM_CONFERENCEContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_SEPARATE_FROM_CONFERENCE"); _CAPABILITY_SEPARATE_FROM_CONFERENCEReady = true; } return _CAPABILITY_SEPARATE_FROM_CONFERENCEContent; } }
        private static int _CAPABILITY_SEPARATE_FROM_CONFERENCEContent = default;
        private static bool _CAPABILITY_SEPARATE_FROM_CONFERENCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_SUPPORT_DEFLECT"/>
        /// </summary>
        public static int CAPABILITY_SUPPORT_DEFLECT { get { if (!_CAPABILITY_SUPPORT_DEFLECTReady) { _CAPABILITY_SUPPORT_DEFLECTContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_SUPPORT_DEFLECT"); _CAPABILITY_SUPPORT_DEFLECTReady = true; } return _CAPABILITY_SUPPORT_DEFLECTContent; } }
        private static int _CAPABILITY_SUPPORT_DEFLECTContent = default;
        private static bool _CAPABILITY_SUPPORT_DEFLECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_SUPPORT_HOLD"/>
        /// </summary>
        public static int CAPABILITY_SUPPORT_HOLD { get { if (!_CAPABILITY_SUPPORT_HOLDReady) { _CAPABILITY_SUPPORT_HOLDContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_SUPPORT_HOLD"); _CAPABILITY_SUPPORT_HOLDReady = true; } return _CAPABILITY_SUPPORT_HOLDContent; } }
        private static int _CAPABILITY_SUPPORT_HOLDContent = default;
        private static bool _CAPABILITY_SUPPORT_HOLDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_SUPPORTS_VT_LOCAL_BIDIRECTIONAL"/>
        /// </summary>
        public static int CAPABILITY_SUPPORTS_VT_LOCAL_BIDIRECTIONAL { get { if (!_CAPABILITY_SUPPORTS_VT_LOCAL_BIDIRECTIONALReady) { _CAPABILITY_SUPPORTS_VT_LOCAL_BIDIRECTIONALContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_SUPPORTS_VT_LOCAL_BIDIRECTIONAL"); _CAPABILITY_SUPPORTS_VT_LOCAL_BIDIRECTIONALReady = true; } return _CAPABILITY_SUPPORTS_VT_LOCAL_BIDIRECTIONALContent; } }
        private static int _CAPABILITY_SUPPORTS_VT_LOCAL_BIDIRECTIONALContent = default;
        private static bool _CAPABILITY_SUPPORTS_VT_LOCAL_BIDIRECTIONALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_SUPPORTS_VT_LOCAL_RX"/>
        /// </summary>
        public static int CAPABILITY_SUPPORTS_VT_LOCAL_RX { get { if (!_CAPABILITY_SUPPORTS_VT_LOCAL_RXReady) { _CAPABILITY_SUPPORTS_VT_LOCAL_RXContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_SUPPORTS_VT_LOCAL_RX"); _CAPABILITY_SUPPORTS_VT_LOCAL_RXReady = true; } return _CAPABILITY_SUPPORTS_VT_LOCAL_RXContent; } }
        private static int _CAPABILITY_SUPPORTS_VT_LOCAL_RXContent = default;
        private static bool _CAPABILITY_SUPPORTS_VT_LOCAL_RXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_SUPPORTS_VT_LOCAL_TX"/>
        /// </summary>
        public static int CAPABILITY_SUPPORTS_VT_LOCAL_TX { get { if (!_CAPABILITY_SUPPORTS_VT_LOCAL_TXReady) { _CAPABILITY_SUPPORTS_VT_LOCAL_TXContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_SUPPORTS_VT_LOCAL_TX"); _CAPABILITY_SUPPORTS_VT_LOCAL_TXReady = true; } return _CAPABILITY_SUPPORTS_VT_LOCAL_TXContent; } }
        private static int _CAPABILITY_SUPPORTS_VT_LOCAL_TXContent = default;
        private static bool _CAPABILITY_SUPPORTS_VT_LOCAL_TXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_SUPPORTS_VT_REMOTE_BIDIRECTIONAL"/>
        /// </summary>
        public static int CAPABILITY_SUPPORTS_VT_REMOTE_BIDIRECTIONAL { get { if (!_CAPABILITY_SUPPORTS_VT_REMOTE_BIDIRECTIONALReady) { _CAPABILITY_SUPPORTS_VT_REMOTE_BIDIRECTIONALContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_SUPPORTS_VT_REMOTE_BIDIRECTIONAL"); _CAPABILITY_SUPPORTS_VT_REMOTE_BIDIRECTIONALReady = true; } return _CAPABILITY_SUPPORTS_VT_REMOTE_BIDIRECTIONALContent; } }
        private static int _CAPABILITY_SUPPORTS_VT_REMOTE_BIDIRECTIONALContent = default;
        private static bool _CAPABILITY_SUPPORTS_VT_REMOTE_BIDIRECTIONALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_SUPPORTS_VT_REMOTE_RX"/>
        /// </summary>
        public static int CAPABILITY_SUPPORTS_VT_REMOTE_RX { get { if (!_CAPABILITY_SUPPORTS_VT_REMOTE_RXReady) { _CAPABILITY_SUPPORTS_VT_REMOTE_RXContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_SUPPORTS_VT_REMOTE_RX"); _CAPABILITY_SUPPORTS_VT_REMOTE_RXReady = true; } return _CAPABILITY_SUPPORTS_VT_REMOTE_RXContent; } }
        private static int _CAPABILITY_SUPPORTS_VT_REMOTE_RXContent = default;
        private static bool _CAPABILITY_SUPPORTS_VT_REMOTE_RXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_SUPPORTS_VT_REMOTE_TX"/>
        /// </summary>
        public static int CAPABILITY_SUPPORTS_VT_REMOTE_TX { get { if (!_CAPABILITY_SUPPORTS_VT_REMOTE_TXReady) { _CAPABILITY_SUPPORTS_VT_REMOTE_TXContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_SUPPORTS_VT_REMOTE_TX"); _CAPABILITY_SUPPORTS_VT_REMOTE_TXReady = true; } return _CAPABILITY_SUPPORTS_VT_REMOTE_TXContent; } }
        private static int _CAPABILITY_SUPPORTS_VT_REMOTE_TXContent = default;
        private static bool _CAPABILITY_SUPPORTS_VT_REMOTE_TXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_SWAP_CONFERENCE"/>
        /// </summary>
        public static int CAPABILITY_SWAP_CONFERENCE { get { if (!_CAPABILITY_SWAP_CONFERENCEReady) { _CAPABILITY_SWAP_CONFERENCEContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_SWAP_CONFERENCE"); _CAPABILITY_SWAP_CONFERENCEReady = true; } return _CAPABILITY_SWAP_CONFERENCEContent; } }
        private static int _CAPABILITY_SWAP_CONFERENCEContent = default;
        private static bool _CAPABILITY_SWAP_CONFERENCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#PROPERTY_ASSISTED_DIALING"/>
        /// </summary>
        public static int PROPERTY_ASSISTED_DIALING { get { if (!_PROPERTY_ASSISTED_DIALINGReady) { _PROPERTY_ASSISTED_DIALINGContent = SGetField<int>(LocalBridgeClazz, "PROPERTY_ASSISTED_DIALING"); _PROPERTY_ASSISTED_DIALINGReady = true; } return _PROPERTY_ASSISTED_DIALINGContent; } }
        private static int _PROPERTY_ASSISTED_DIALINGContent = default;
        private static bool _PROPERTY_ASSISTED_DIALINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#PROPERTY_CROSS_SIM"/>
        /// </summary>
        public static int PROPERTY_CROSS_SIM { get { if (!_PROPERTY_CROSS_SIMReady) { _PROPERTY_CROSS_SIMContent = SGetField<int>(LocalBridgeClazz, "PROPERTY_CROSS_SIM"); _PROPERTY_CROSS_SIMReady = true; } return _PROPERTY_CROSS_SIMContent; } }
        private static int _PROPERTY_CROSS_SIMContent = default;
        private static bool _PROPERTY_CROSS_SIMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#PROPERTY_HAS_CDMA_VOICE_PRIVACY"/>
        /// </summary>
        public static int PROPERTY_HAS_CDMA_VOICE_PRIVACY { get { if (!_PROPERTY_HAS_CDMA_VOICE_PRIVACYReady) { _PROPERTY_HAS_CDMA_VOICE_PRIVACYContent = SGetField<int>(LocalBridgeClazz, "PROPERTY_HAS_CDMA_VOICE_PRIVACY"); _PROPERTY_HAS_CDMA_VOICE_PRIVACYReady = true; } return _PROPERTY_HAS_CDMA_VOICE_PRIVACYContent; } }
        private static int _PROPERTY_HAS_CDMA_VOICE_PRIVACYContent = default;
        private static bool _PROPERTY_HAS_CDMA_VOICE_PRIVACYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#PROPERTY_HIGH_DEF_AUDIO"/>
        /// </summary>
        public static int PROPERTY_HIGH_DEF_AUDIO { get { if (!_PROPERTY_HIGH_DEF_AUDIOReady) { _PROPERTY_HIGH_DEF_AUDIOContent = SGetField<int>(LocalBridgeClazz, "PROPERTY_HIGH_DEF_AUDIO"); _PROPERTY_HIGH_DEF_AUDIOReady = true; } return _PROPERTY_HIGH_DEF_AUDIOContent; } }
        private static int _PROPERTY_HIGH_DEF_AUDIOContent = default;
        private static bool _PROPERTY_HIGH_DEF_AUDIOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#PROPERTY_IS_ADHOC_CONFERENCE"/>
        /// </summary>
        public static int PROPERTY_IS_ADHOC_CONFERENCE { get { if (!_PROPERTY_IS_ADHOC_CONFERENCEReady) { _PROPERTY_IS_ADHOC_CONFERENCEContent = SGetField<int>(LocalBridgeClazz, "PROPERTY_IS_ADHOC_CONFERENCE"); _PROPERTY_IS_ADHOC_CONFERENCEReady = true; } return _PROPERTY_IS_ADHOC_CONFERENCEContent; } }
        private static int _PROPERTY_IS_ADHOC_CONFERENCEContent = default;
        private static bool _PROPERTY_IS_ADHOC_CONFERENCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#PROPERTY_IS_EXTERNAL_CALL"/>
        /// </summary>
        public static int PROPERTY_IS_EXTERNAL_CALL { get { if (!_PROPERTY_IS_EXTERNAL_CALLReady) { _PROPERTY_IS_EXTERNAL_CALLContent = SGetField<int>(LocalBridgeClazz, "PROPERTY_IS_EXTERNAL_CALL"); _PROPERTY_IS_EXTERNAL_CALLReady = true; } return _PROPERTY_IS_EXTERNAL_CALLContent; } }
        private static int _PROPERTY_IS_EXTERNAL_CALLContent = default;
        private static bool _PROPERTY_IS_EXTERNAL_CALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#PROPERTY_IS_RTT"/>
        /// </summary>
        public static int PROPERTY_IS_RTT { get { if (!_PROPERTY_IS_RTTReady) { _PROPERTY_IS_RTTContent = SGetField<int>(LocalBridgeClazz, "PROPERTY_IS_RTT"); _PROPERTY_IS_RTTReady = true; } return _PROPERTY_IS_RTTContent; } }
        private static int _PROPERTY_IS_RTTContent = default;
        private static bool _PROPERTY_IS_RTTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#PROPERTY_NETWORK_IDENTIFIED_EMERGENCY_CALL"/>
        /// </summary>
        public static int PROPERTY_NETWORK_IDENTIFIED_EMERGENCY_CALL { get { if (!_PROPERTY_NETWORK_IDENTIFIED_EMERGENCY_CALLReady) { _PROPERTY_NETWORK_IDENTIFIED_EMERGENCY_CALLContent = SGetField<int>(LocalBridgeClazz, "PROPERTY_NETWORK_IDENTIFIED_EMERGENCY_CALL"); _PROPERTY_NETWORK_IDENTIFIED_EMERGENCY_CALLReady = true; } return _PROPERTY_NETWORK_IDENTIFIED_EMERGENCY_CALLContent; } }
        private static int _PROPERTY_NETWORK_IDENTIFIED_EMERGENCY_CALLContent = default;
        private static bool _PROPERTY_NETWORK_IDENTIFIED_EMERGENCY_CALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#PROPERTY_SELF_MANAGED"/>
        /// </summary>
        public static int PROPERTY_SELF_MANAGED { get { if (!_PROPERTY_SELF_MANAGEDReady) { _PROPERTY_SELF_MANAGEDContent = SGetField<int>(LocalBridgeClazz, "PROPERTY_SELF_MANAGED"); _PROPERTY_SELF_MANAGEDReady = true; } return _PROPERTY_SELF_MANAGEDContent; } }
        private static int _PROPERTY_SELF_MANAGEDContent = default;
        private static bool _PROPERTY_SELF_MANAGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#PROPERTY_WIFI"/>
        /// </summary>
        public static int PROPERTY_WIFI { get { if (!_PROPERTY_WIFIReady) { _PROPERTY_WIFIContent = SGetField<int>(LocalBridgeClazz, "PROPERTY_WIFI"); _PROPERTY_WIFIReady = true; } return _PROPERTY_WIFIContent; } }
        private static int _PROPERTY_WIFIContent = default;
        private static bool _PROPERTY_WIFIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#STATE_ACTIVE"/>
        /// </summary>
        public static int STATE_ACTIVE { get { if (!_STATE_ACTIVEReady) { _STATE_ACTIVEContent = SGetField<int>(LocalBridgeClazz, "STATE_ACTIVE"); _STATE_ACTIVEReady = true; } return _STATE_ACTIVEContent; } }
        private static int _STATE_ACTIVEContent = default;
        private static bool _STATE_ACTIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#STATE_DIALING"/>
        /// </summary>
        public static int STATE_DIALING { get { if (!_STATE_DIALINGReady) { _STATE_DIALINGContent = SGetField<int>(LocalBridgeClazz, "STATE_DIALING"); _STATE_DIALINGReady = true; } return _STATE_DIALINGContent; } }
        private static int _STATE_DIALINGContent = default;
        private static bool _STATE_DIALINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#STATE_DISCONNECTED"/>
        /// </summary>
        public static int STATE_DISCONNECTED { get { if (!_STATE_DISCONNECTEDReady) { _STATE_DISCONNECTEDContent = SGetField<int>(LocalBridgeClazz, "STATE_DISCONNECTED"); _STATE_DISCONNECTEDReady = true; } return _STATE_DISCONNECTEDContent; } }
        private static int _STATE_DISCONNECTEDContent = default;
        private static bool _STATE_DISCONNECTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#STATE_HOLDING"/>
        /// </summary>
        public static int STATE_HOLDING { get { if (!_STATE_HOLDINGReady) { _STATE_HOLDINGContent = SGetField<int>(LocalBridgeClazz, "STATE_HOLDING"); _STATE_HOLDINGReady = true; } return _STATE_HOLDINGContent; } }
        private static int _STATE_HOLDINGContent = default;
        private static bool _STATE_HOLDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#STATE_INITIALIZING"/>
        /// </summary>
        public static int STATE_INITIALIZING { get { if (!_STATE_INITIALIZINGReady) { _STATE_INITIALIZINGContent = SGetField<int>(LocalBridgeClazz, "STATE_INITIALIZING"); _STATE_INITIALIZINGReady = true; } return _STATE_INITIALIZINGContent; } }
        private static int _STATE_INITIALIZINGContent = default;
        private static bool _STATE_INITIALIZINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#STATE_NEW"/>
        /// </summary>
        public static int STATE_NEW { get { if (!_STATE_NEWReady) { _STATE_NEWContent = SGetField<int>(LocalBridgeClazz, "STATE_NEW"); _STATE_NEWReady = true; } return _STATE_NEWContent; } }
        private static int _STATE_NEWContent = default;
        private static bool _STATE_NEWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#STATE_PULLING_CALL"/>
        /// </summary>
        public static int STATE_PULLING_CALL { get { if (!_STATE_PULLING_CALLReady) { _STATE_PULLING_CALLContent = SGetField<int>(LocalBridgeClazz, "STATE_PULLING_CALL"); _STATE_PULLING_CALLReady = true; } return _STATE_PULLING_CALLContent; } }
        private static int _STATE_PULLING_CALLContent = default;
        private static bool _STATE_PULLING_CALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#STATE_RINGING"/>
        /// </summary>
        public static int STATE_RINGING { get { if (!_STATE_RINGINGReady) { _STATE_RINGINGContent = SGetField<int>(LocalBridgeClazz, "STATE_RINGING"); _STATE_RINGINGReady = true; } return _STATE_RINGINGContent; } }
        private static int _STATE_RINGINGContent = default;
        private static bool _STATE_RINGINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#VERIFICATION_STATUS_FAILED"/>
        /// </summary>
        public static int VERIFICATION_STATUS_FAILED { get { if (!_VERIFICATION_STATUS_FAILEDReady) { _VERIFICATION_STATUS_FAILEDContent = SGetField<int>(LocalBridgeClazz, "VERIFICATION_STATUS_FAILED"); _VERIFICATION_STATUS_FAILEDReady = true; } return _VERIFICATION_STATUS_FAILEDContent; } }
        private static int _VERIFICATION_STATUS_FAILEDContent = default;
        private static bool _VERIFICATION_STATUS_FAILEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#VERIFICATION_STATUS_NOT_VERIFIED"/>
        /// </summary>
        public static int VERIFICATION_STATUS_NOT_VERIFIED { get { if (!_VERIFICATION_STATUS_NOT_VERIFIEDReady) { _VERIFICATION_STATUS_NOT_VERIFIEDContent = SGetField<int>(LocalBridgeClazz, "VERIFICATION_STATUS_NOT_VERIFIED"); _VERIFICATION_STATUS_NOT_VERIFIEDReady = true; } return _VERIFICATION_STATUS_NOT_VERIFIEDContent; } }
        private static int _VERIFICATION_STATUS_NOT_VERIFIEDContent = default;
        private static bool _VERIFICATION_STATUS_NOT_VERIFIEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#VERIFICATION_STATUS_PASSED"/>
        /// </summary>
        public static int VERIFICATION_STATUS_PASSED { get { if (!_VERIFICATION_STATUS_PASSEDReady) { _VERIFICATION_STATUS_PASSEDContent = SGetField<int>(LocalBridgeClazz, "VERIFICATION_STATUS_PASSED"); _VERIFICATION_STATUS_PASSEDReady = true; } return _VERIFICATION_STATUS_PASSEDContent; } }
        private static int _VERIFICATION_STATUS_PASSEDContent = default;
        private static bool _VERIFICATION_STATUS_PASSEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#EVENT_CALL_HOLD_FAILED"/>
        /// </summary>
        public static Java.Lang.String EVENT_CALL_HOLD_FAILED { get { if (!_EVENT_CALL_HOLD_FAILEDReady) { _EVENT_CALL_HOLD_FAILEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EVENT_CALL_HOLD_FAILED"); _EVENT_CALL_HOLD_FAILEDReady = true; } return _EVENT_CALL_HOLD_FAILEDContent; } }
        private static Java.Lang.String _EVENT_CALL_HOLD_FAILEDContent = default;
        private static bool _EVENT_CALL_HOLD_FAILEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#EVENT_CALL_MERGE_FAILED"/>
        /// </summary>
        public static Java.Lang.String EVENT_CALL_MERGE_FAILED { get { if (!_EVENT_CALL_MERGE_FAILEDReady) { _EVENT_CALL_MERGE_FAILEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EVENT_CALL_MERGE_FAILED"); _EVENT_CALL_MERGE_FAILEDReady = true; } return _EVENT_CALL_MERGE_FAILEDContent; } }
        private static Java.Lang.String _EVENT_CALL_MERGE_FAILEDContent = default;
        private static bool _EVENT_CALL_MERGE_FAILEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#EVENT_CALL_PULL_FAILED"/>
        /// </summary>
        public static Java.Lang.String EVENT_CALL_PULL_FAILED { get { if (!_EVENT_CALL_PULL_FAILEDReady) { _EVENT_CALL_PULL_FAILEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EVENT_CALL_PULL_FAILED"); _EVENT_CALL_PULL_FAILEDReady = true; } return _EVENT_CALL_PULL_FAILEDContent; } }
        private static Java.Lang.String _EVENT_CALL_PULL_FAILEDContent = default;
        private static bool _EVENT_CALL_PULL_FAILEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#EVENT_CALL_REMOTELY_HELD"/>
        /// </summary>
        public static Java.Lang.String EVENT_CALL_REMOTELY_HELD { get { if (!_EVENT_CALL_REMOTELY_HELDReady) { _EVENT_CALL_REMOTELY_HELDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EVENT_CALL_REMOTELY_HELD"); _EVENT_CALL_REMOTELY_HELDReady = true; } return _EVENT_CALL_REMOTELY_HELDContent; } }
        private static Java.Lang.String _EVENT_CALL_REMOTELY_HELDContent = default;
        private static bool _EVENT_CALL_REMOTELY_HELDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#EVENT_CALL_REMOTELY_UNHELD"/>
        /// </summary>
        public static Java.Lang.String EVENT_CALL_REMOTELY_UNHELD { get { if (!_EVENT_CALL_REMOTELY_UNHELDReady) { _EVENT_CALL_REMOTELY_UNHELDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EVENT_CALL_REMOTELY_UNHELD"); _EVENT_CALL_REMOTELY_UNHELDReady = true; } return _EVENT_CALL_REMOTELY_UNHELDContent; } }
        private static Java.Lang.String _EVENT_CALL_REMOTELY_UNHELDContent = default;
        private static bool _EVENT_CALL_REMOTELY_UNHELDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#EVENT_CALL_SWITCH_FAILED"/>
        /// </summary>
        public static Java.Lang.String EVENT_CALL_SWITCH_FAILED { get { if (!_EVENT_CALL_SWITCH_FAILEDReady) { _EVENT_CALL_SWITCH_FAILEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EVENT_CALL_SWITCH_FAILED"); _EVENT_CALL_SWITCH_FAILEDReady = true; } return _EVENT_CALL_SWITCH_FAILEDContent; } }
        private static Java.Lang.String _EVENT_CALL_SWITCH_FAILEDContent = default;
        private static bool _EVENT_CALL_SWITCH_FAILEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#EVENT_MERGE_COMPLETE"/>
        /// </summary>
        public static Java.Lang.String EVENT_MERGE_COMPLETE { get { if (!_EVENT_MERGE_COMPLETEReady) { _EVENT_MERGE_COMPLETEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EVENT_MERGE_COMPLETE"); _EVENT_MERGE_COMPLETEReady = true; } return _EVENT_MERGE_COMPLETEContent; } }
        private static Java.Lang.String _EVENT_MERGE_COMPLETEContent = default;
        private static bool _EVENT_MERGE_COMPLETEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#EVENT_MERGE_START"/>
        /// </summary>
        public static Java.Lang.String EVENT_MERGE_START { get { if (!_EVENT_MERGE_STARTReady) { _EVENT_MERGE_STARTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EVENT_MERGE_START"); _EVENT_MERGE_STARTReady = true; } return _EVENT_MERGE_STARTContent; } }
        private static Java.Lang.String _EVENT_MERGE_STARTContent = default;
        private static bool _EVENT_MERGE_STARTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#EVENT_ON_HOLD_TONE_END"/>
        /// </summary>
        public static Java.Lang.String EVENT_ON_HOLD_TONE_END { get { if (!_EVENT_ON_HOLD_TONE_ENDReady) { _EVENT_ON_HOLD_TONE_ENDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EVENT_ON_HOLD_TONE_END"); _EVENT_ON_HOLD_TONE_ENDReady = true; } return _EVENT_ON_HOLD_TONE_ENDContent; } }
        private static Java.Lang.String _EVENT_ON_HOLD_TONE_ENDContent = default;
        private static bool _EVENT_ON_HOLD_TONE_ENDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#EVENT_ON_HOLD_TONE_START"/>
        /// </summary>
        public static Java.Lang.String EVENT_ON_HOLD_TONE_START { get { if (!_EVENT_ON_HOLD_TONE_STARTReady) { _EVENT_ON_HOLD_TONE_STARTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EVENT_ON_HOLD_TONE_START"); _EVENT_ON_HOLD_TONE_STARTReady = true; } return _EVENT_ON_HOLD_TONE_STARTContent; } }
        private static Java.Lang.String _EVENT_ON_HOLD_TONE_STARTContent = default;
        private static bool _EVENT_ON_HOLD_TONE_STARTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#EVENT_RTT_AUDIO_INDICATION_CHANGED"/>
        /// </summary>
        public static Java.Lang.String EVENT_RTT_AUDIO_INDICATION_CHANGED { get { if (!_EVENT_RTT_AUDIO_INDICATION_CHANGEDReady) { _EVENT_RTT_AUDIO_INDICATION_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EVENT_RTT_AUDIO_INDICATION_CHANGED"); _EVENT_RTT_AUDIO_INDICATION_CHANGEDReady = true; } return _EVENT_RTT_AUDIO_INDICATION_CHANGEDContent; } }
        private static Java.Lang.String _EVENT_RTT_AUDIO_INDICATION_CHANGEDContent = default;
        private static bool _EVENT_RTT_AUDIO_INDICATION_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#EXTRA_ANSWERING_DROPS_FG_CALL"/>
        /// </summary>
        public static Java.Lang.String EXTRA_ANSWERING_DROPS_FG_CALL { get { if (!_EXTRA_ANSWERING_DROPS_FG_CALLReady) { _EXTRA_ANSWERING_DROPS_FG_CALLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ANSWERING_DROPS_FG_CALL"); _EXTRA_ANSWERING_DROPS_FG_CALLReady = true; } return _EXTRA_ANSWERING_DROPS_FG_CALLContent; } }
        private static Java.Lang.String _EXTRA_ANSWERING_DROPS_FG_CALLContent = default;
        private static bool _EXTRA_ANSWERING_DROPS_FG_CALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#EXTRA_ANSWERING_DROPS_FG_CALL_APP_NAME"/>
        /// </summary>
        public static Java.Lang.String EXTRA_ANSWERING_DROPS_FG_CALL_APP_NAME { get { if (!_EXTRA_ANSWERING_DROPS_FG_CALL_APP_NAMEReady) { _EXTRA_ANSWERING_DROPS_FG_CALL_APP_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ANSWERING_DROPS_FG_CALL_APP_NAME"); _EXTRA_ANSWERING_DROPS_FG_CALL_APP_NAMEReady = true; } return _EXTRA_ANSWERING_DROPS_FG_CALL_APP_NAMEContent; } }
        private static Java.Lang.String _EXTRA_ANSWERING_DROPS_FG_CALL_APP_NAMEContent = default;
        private static bool _EXTRA_ANSWERING_DROPS_FG_CALL_APP_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#EXTRA_AUDIO_CODEC"/>
        /// </summary>
        public static Java.Lang.String EXTRA_AUDIO_CODEC { get { if (!_EXTRA_AUDIO_CODECReady) { _EXTRA_AUDIO_CODECContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_AUDIO_CODEC"); _EXTRA_AUDIO_CODECReady = true; } return _EXTRA_AUDIO_CODECContent; } }
        private static Java.Lang.String _EXTRA_AUDIO_CODECContent = default;
        private static bool _EXTRA_AUDIO_CODECReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#EXTRA_AUDIO_CODEC_BANDWIDTH_KHZ"/>
        /// </summary>
        public static Java.Lang.String EXTRA_AUDIO_CODEC_BANDWIDTH_KHZ { get { if (!_EXTRA_AUDIO_CODEC_BANDWIDTH_KHZReady) { _EXTRA_AUDIO_CODEC_BANDWIDTH_KHZContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_AUDIO_CODEC_BANDWIDTH_KHZ"); _EXTRA_AUDIO_CODEC_BANDWIDTH_KHZReady = true; } return _EXTRA_AUDIO_CODEC_BANDWIDTH_KHZContent; } }
        private static Java.Lang.String _EXTRA_AUDIO_CODEC_BANDWIDTH_KHZContent = default;
        private static bool _EXTRA_AUDIO_CODEC_BANDWIDTH_KHZReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#EXTRA_AUDIO_CODEC_BITRATE_KBPS"/>
        /// </summary>
        public static Java.Lang.String EXTRA_AUDIO_CODEC_BITRATE_KBPS { get { if (!_EXTRA_AUDIO_CODEC_BITRATE_KBPSReady) { _EXTRA_AUDIO_CODEC_BITRATE_KBPSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_AUDIO_CODEC_BITRATE_KBPS"); _EXTRA_AUDIO_CODEC_BITRATE_KBPSReady = true; } return _EXTRA_AUDIO_CODEC_BITRATE_KBPSContent; } }
        private static Java.Lang.String _EXTRA_AUDIO_CODEC_BITRATE_KBPSContent = default;
        private static bool _EXTRA_AUDIO_CODEC_BITRATE_KBPSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#EXTRA_CALL_SUBJECT"/>
        /// </summary>
        public static Java.Lang.String EXTRA_CALL_SUBJECT { get { if (!_EXTRA_CALL_SUBJECTReady) { _EXTRA_CALL_SUBJECTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_CALL_SUBJECT"); _EXTRA_CALL_SUBJECTReady = true; } return _EXTRA_CALL_SUBJECTContent; } }
        private static Java.Lang.String _EXTRA_CALL_SUBJECTContent = default;
        private static bool _EXTRA_CALL_SUBJECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#EXTRA_CHILD_ADDRESS"/>
        /// </summary>
        public static Java.Lang.String EXTRA_CHILD_ADDRESS { get { if (!_EXTRA_CHILD_ADDRESSReady) { _EXTRA_CHILD_ADDRESSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_CHILD_ADDRESS"); _EXTRA_CHILD_ADDRESSReady = true; } return _EXTRA_CHILD_ADDRESSContent; } }
        private static Java.Lang.String _EXTRA_CHILD_ADDRESSContent = default;
        private static bool _EXTRA_CHILD_ADDRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#EXTRA_IS_RTT_AUDIO_PRESENT"/>
        /// </summary>
        public static Java.Lang.String EXTRA_IS_RTT_AUDIO_PRESENT { get { if (!_EXTRA_IS_RTT_AUDIO_PRESENTReady) { _EXTRA_IS_RTT_AUDIO_PRESENTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_IS_RTT_AUDIO_PRESENT"); _EXTRA_IS_RTT_AUDIO_PRESENTReady = true; } return _EXTRA_IS_RTT_AUDIO_PRESENTContent; } }
        private static Java.Lang.String _EXTRA_IS_RTT_AUDIO_PRESENTContent = default;
        private static bool _EXTRA_IS_RTT_AUDIO_PRESENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#EXTRA_LAST_FORWARDED_NUMBER"/>
        /// </summary>
        public static Java.Lang.String EXTRA_LAST_FORWARDED_NUMBER { get { if (!_EXTRA_LAST_FORWARDED_NUMBERReady) { _EXTRA_LAST_FORWARDED_NUMBERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_LAST_FORWARDED_NUMBER"); _EXTRA_LAST_FORWARDED_NUMBERReady = true; } return _EXTRA_LAST_FORWARDED_NUMBERContent; } }
        private static Java.Lang.String _EXTRA_LAST_FORWARDED_NUMBERContent = default;
        private static bool _EXTRA_LAST_FORWARDED_NUMBERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#EXTRA_LAST_KNOWN_CELL_IDENTITY"/>
        /// </summary>
        public static Java.Lang.String EXTRA_LAST_KNOWN_CELL_IDENTITY { get { if (!_EXTRA_LAST_KNOWN_CELL_IDENTITYReady) { _EXTRA_LAST_KNOWN_CELL_IDENTITYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_LAST_KNOWN_CELL_IDENTITY"); _EXTRA_LAST_KNOWN_CELL_IDENTITYReady = true; } return _EXTRA_LAST_KNOWN_CELL_IDENTITYContent; } }
        private static Java.Lang.String _EXTRA_LAST_KNOWN_CELL_IDENTITYContent = default;
        private static bool _EXTRA_LAST_KNOWN_CELL_IDENTITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#EXTRA_SIP_INVITE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_SIP_INVITE { get { if (!_EXTRA_SIP_INVITEReady) { _EXTRA_SIP_INVITEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_SIP_INVITE"); _EXTRA_SIP_INVITEReady = true; } return _EXTRA_SIP_INVITEContent; } }
        private static Java.Lang.String _EXTRA_SIP_INVITEContent = default;
        private static bool _EXTRA_SIP_INVITEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#createCanceledConnection()"/>
        /// </summary>
        /// <returns><see cref="Android.Telecom.Connection"/></returns>
        public static Android.Telecom.Connection CreateCanceledConnection()
        {
            return SExecuteWithSignature<Android.Telecom.Connection>(LocalBridgeClazz, "createCanceledConnection", "()Landroid/telecom/Connection;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#createFailedConnection(android.telecom.DisconnectCause)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telecom.DisconnectCause"/></param>
        /// <returns><see cref="Android.Telecom.Connection"/></returns>
        public static Android.Telecom.Connection CreateFailedConnection(Android.Telecom.DisconnectCause arg0)
        {
            return SExecuteWithSignature<Android.Telecom.Connection>(LocalBridgeClazz, "createFailedConnection", "(Landroid/telecom/DisconnectCause;)Landroid/telecom/Connection;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#capabilitiesToString(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String CapabilitiesToString(int arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "capabilitiesToString", "(I)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#propertiesToString(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String PropertiesToString(int arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "propertiesToString", "(I)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#stateToString(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String StateToString(int arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "stateToString", "(I)Ljava/lang/String;", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#getAddress()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.Uri"/></returns>
        public Android.Net.Uri GetAddress()
        {
            return IExecuteWithSignature<Android.Net.Uri>("getAddress", "()Landroid/net/Uri;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#getExtras()"/>
        /// </summary>
        /// <returns><see cref="Android.Os.Bundle"/></returns>
        public Android.Os.Bundle GetExtras()
        {
            return IExecuteWithSignature<Android.Os.Bundle>("getExtras", "()Landroid/os/Bundle;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#getCallAudioState()"/>
        /// </summary>
        /// <returns><see cref="Android.Telecom.CallAudioState"/></returns>
        [global::System.Obsolete()]
        public Android.Telecom.CallAudioState GetCallAudioState()
        {
            return IExecuteWithSignature<Android.Telecom.CallAudioState>("getCallAudioState", "()Landroid/telecom/CallAudioState;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#getCurrentCallEndpoint()"/>
        /// </summary>
        /// <returns><see cref="Android.Telecom.CallEndpoint"/></returns>
        public Android.Telecom.CallEndpoint GetCurrentCallEndpoint()
        {
            return IExecuteWithSignature<Android.Telecom.CallEndpoint>("getCurrentCallEndpoint", "()Landroid/telecom/CallEndpoint;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#getConference()"/>
        /// </summary>
        /// <returns><see cref="Android.Telecom.Conference"/></returns>
        public Android.Telecom.Conference GetConference()
        {
            return IExecuteWithSignature<Android.Telecom.Conference>("getConference", "()Landroid/telecom/Conference;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#getVideoProvider()"/>
        /// </summary>
        /// <returns><see cref="Android.Telecom.Connection.VideoProvider"/></returns>
        public Android.Telecom.Connection.VideoProvider GetVideoProvider()
        {
            return IExecuteWithSignature<Android.Telecom.Connection.VideoProvider>("getVideoProvider", "()Landroid/telecom/Connection$VideoProvider;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#getDisconnectCause()"/>
        /// </summary>
        /// <returns><see cref="Android.Telecom.DisconnectCause"/></returns>
        public Android.Telecom.DisconnectCause GetDisconnectCause()
        {
            return IExecuteWithSignature<Android.Telecom.DisconnectCause>("getDisconnectCause", "()Landroid/telecom/DisconnectCause;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#getStatusHints()"/>
        /// </summary>
        /// <returns><see cref="Android.Telecom.StatusHints"/></returns>
        public Android.Telecom.StatusHints GetStatusHints()
        {
            return IExecuteWithSignature<Android.Telecom.StatusHints>("getStatusHints", "()Landroid/telecom/StatusHints;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#getAudioModeIsVoip()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetAudioModeIsVoip()
        {
            return IExecuteWithSignature<bool>("getAudioModeIsVoip", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#isRingbackRequested()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsRingbackRequested()
        {
            return IExecuteWithSignature<bool>("isRingbackRequested", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#getAddressPresentation()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetAddressPresentation()
        {
            return IExecuteWithSignature<int>("getAddressPresentation", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#getCallerDisplayNamePresentation()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetCallerDisplayNamePresentation()
        {
            return IExecuteWithSignature<int>("getCallerDisplayNamePresentation", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#getCallerNumberVerificationStatus()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetCallerNumberVerificationStatus()
        {
            return IExecuteWithSignature<int>("getCallerNumberVerificationStatus", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#getConnectionCapabilities()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetConnectionCapabilities()
        {
            return IExecuteWithSignature<int>("getConnectionCapabilities", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#getConnectionProperties()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetConnectionProperties()
        {
            return IExecuteWithSignature<int>("getConnectionProperties", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#getState()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetState()
        {
            return IExecuteWithSignature<int>("getState", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#getVideoState()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetVideoState()
        {
            return IExecuteWithSignature<int>("getVideoState", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#getCallerDisplayName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetCallerDisplayName()
        {
            return IExecuteWithSignature<Java.Lang.String>("getCallerDisplayName", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#getConferenceables()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Telecom.Conferenceable> GetConferenceables()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Telecom.Conferenceable>>("getConferenceables", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#destroy()"/>
        /// </summary>
        public void Destroy()
        {
            IExecuteWithSignature("destroy", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#notifyConferenceMergeFailed()"/>
        /// </summary>
        public void NotifyConferenceMergeFailed()
        {
            IExecuteWithSignature("notifyConferenceMergeFailed", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#putExtras(android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Bundle"/></param>
        public void PutExtras(Android.Os.Bundle arg0)
        {
            IExecuteWithSignature("putExtras", "(Landroid/os/Bundle;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#queryLocationForEmergency(long,java.lang.String,java.util.concurrent.Executor,android.os.OutcomeReceiver)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg3"><see cref="Android.Os.OutcomeReceiver"/></param>
        public void QueryLocationForEmergency(long arg0, Java.Lang.String arg1, Java.Util.Concurrent.Executor arg2, Android.Os.OutcomeReceiver<Android.Location.Location, Android.Telecom.QueryLocationException> arg3)
        {
            IExecute("queryLocationForEmergency", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#removeExtras(java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void RemoveExtras(params Java.Lang.String[] arg0)
        {
            if (arg0.Length == 0) IExecuteWithSignature("removeExtras", "([Ljava/lang/String;)V"); else IExecuteWithSignature("removeExtras", "([Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#removeExtras(java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        public void RemoveExtras(Java.Util.List<Java.Lang.String> arg0)
        {
            IExecuteWithSignature("removeExtras", "(Ljava/util/List;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#requestCallEndpointChange(android.telecom.CallEndpoint,java.util.concurrent.Executor,android.os.OutcomeReceiver)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telecom.CallEndpoint"/></param>
        /// <param name="arg1"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg2"><see cref="Android.Os.OutcomeReceiver"/></param>
        public void RequestCallEndpointChange(Android.Telecom.CallEndpoint arg0, Java.Util.Concurrent.Executor arg1, Android.Os.OutcomeReceiver<Java.Lang.Void, Android.Telecom.CallEndpointException> arg2)
        {
            IExecute("requestCallEndpointChange", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#sendRemoteRttRequest()"/>
        /// </summary>
        public void SendRemoteRttRequest()
        {
            IExecuteWithSignature("sendRemoteRttRequest", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#sendRttInitiationFailure(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SendRttInitiationFailure(int arg0)
        {
            IExecuteWithSignature("sendRttInitiationFailure", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#sendRttInitiationSuccess()"/>
        /// </summary>
        public void SendRttInitiationSuccess()
        {
            IExecuteWithSignature("sendRttInitiationSuccess", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#sendRttSessionRemotelyTerminated()"/>
        /// </summary>
        public void SendRttSessionRemotelyTerminated()
        {
            IExecuteWithSignature("sendRttSessionRemotelyTerminated", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#setActive()"/>
        /// </summary>
        public void SetActive()
        {
            IExecuteWithSignature("setActive", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#setAddress(android.net.Uri,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetAddress(Android.Net.Uri arg0, int arg1)
        {
            IExecute("setAddress", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#setAudioModeIsVoip(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetAudioModeIsVoip(bool arg0)
        {
            IExecuteWithSignature("setAudioModeIsVoip", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#setAudioRoute(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void SetAudioRoute(int arg0)
        {
            IExecuteWithSignature("setAudioRoute", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#setCallerDisplayName(java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetCallerDisplayName(Java.Lang.String arg0, int arg1)
        {
            IExecute("setCallerDisplayName", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#setCallerNumberVerificationStatus(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetCallerNumberVerificationStatus(int arg0)
        {
            IExecuteWithSignature("setCallerNumberVerificationStatus", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#setConferenceableConnections(java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        public void SetConferenceableConnections(Java.Util.List<Android.Telecom.Connection> arg0)
        {
            IExecuteWithSignature("setConferenceableConnections", "(Ljava/util/List;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#setConferenceables(java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        public void SetConferenceables(Java.Util.List<Android.Telecom.Conferenceable> arg0)
        {
            IExecuteWithSignature("setConferenceables", "(Ljava/util/List;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#setConnectionCapabilities(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetConnectionCapabilities(int arg0)
        {
            IExecuteWithSignature("setConnectionCapabilities", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#setConnectionProperties(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetConnectionProperties(int arg0)
        {
            IExecuteWithSignature("setConnectionProperties", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#setDialing()"/>
        /// </summary>
        public void SetDialing()
        {
            IExecuteWithSignature("setDialing", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#setDisconnected(android.telecom.DisconnectCause)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telecom.DisconnectCause"/></param>
        public void SetDisconnected(Android.Telecom.DisconnectCause arg0)
        {
            IExecuteWithSignature("setDisconnected", "(Landroid/telecom/DisconnectCause;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#setExtras(android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Bundle"/></param>
        public void SetExtras(Android.Os.Bundle arg0)
        {
            IExecuteWithSignature("setExtras", "(Landroid/os/Bundle;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#setInitialized()"/>
        /// </summary>
        public void SetInitialized()
        {
            IExecuteWithSignature("setInitialized", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#setInitializing()"/>
        /// </summary>
        public void SetInitializing()
        {
            IExecuteWithSignature("setInitializing", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#setNextPostDialChar(char)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        public void SetNextPostDialChar(char arg0)
        {
            IExecuteWithSignature("setNextPostDialChar", "(C)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#setOnHold()"/>
        /// </summary>
        public void SetOnHold()
        {
            IExecuteWithSignature("setOnHold", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#setPostDialWait(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void SetPostDialWait(Java.Lang.String arg0)
        {
            IExecuteWithSignature("setPostDialWait", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#setPulling()"/>
        /// </summary>
        public void SetPulling()
        {
            IExecuteWithSignature("setPulling", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#setRingbackRequested(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetRingbackRequested(bool arg0)
        {
            IExecuteWithSignature("setRingbackRequested", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#setRinging()"/>
        /// </summary>
        public void SetRinging()
        {
            IExecuteWithSignature("setRinging", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#setStatusHints(android.telecom.StatusHints)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telecom.StatusHints"/></param>
        public void SetStatusHints(Android.Telecom.StatusHints arg0)
        {
            IExecuteWithSignature("setStatusHints", "(Landroid/telecom/StatusHints;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#setVideoProvider(android.telecom.Connection.VideoProvider)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telecom.Connection.VideoProvider"/></param>
        public void SetVideoProvider(Android.Telecom.Connection.VideoProvider arg0)
        {
            IExecuteWithSignature("setVideoProvider", "(Landroid/telecom/Connection$VideoProvider;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#setVideoState(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetVideoState(int arg0)
        {
            IExecuteWithSignature("setVideoState", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#handleRttUpgradeResponse(android.telecom.Connection.RttTextStream)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telecom.Connection.RttTextStream"/></param>
        public void HandleRttUpgradeResponse(Android.Telecom.Connection.RttTextStream arg0)
        {
            IExecuteWithSignature("handleRttUpgradeResponse", "(Landroid/telecom/Connection$RttTextStream;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#onAbort()"/>
        /// </summary>
        public void OnAbort()
        {
            IExecuteWithSignature("onAbort", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#onAddConferenceParticipants(java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        public void OnAddConferenceParticipants(Java.Util.List<Android.Net.Uri> arg0)
        {
            IExecuteWithSignature("onAddConferenceParticipants", "(Ljava/util/List;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#onAnswer()"/>
        /// </summary>
        public void OnAnswer()
        {
            IExecuteWithSignature("onAnswer", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#onAnswer(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void OnAnswer(int arg0)
        {
            IExecuteWithSignature("onAnswer", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#onAvailableCallEndpointsChanged(java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        public void OnAvailableCallEndpointsChanged(Java.Util.List<Android.Telecom.CallEndpoint> arg0)
        {
            IExecuteWithSignature("onAvailableCallEndpointsChanged", "(Ljava/util/List;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#onCallAudioStateChanged(android.telecom.CallAudioState)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telecom.CallAudioState"/></param>
        [global::System.Obsolete()]
        public void OnCallAudioStateChanged(Android.Telecom.CallAudioState arg0)
        {
            IExecuteWithSignature("onCallAudioStateChanged", "(Landroid/telecom/CallAudioState;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#onCallEndpointChanged(android.telecom.CallEndpoint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telecom.CallEndpoint"/></param>
        public void OnCallEndpointChanged(Android.Telecom.CallEndpoint arg0)
        {
            IExecuteWithSignature("onCallEndpointChanged", "(Landroid/telecom/CallEndpoint;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#onCallEvent(java.lang.String,android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Os.Bundle"/></param>
        public void OnCallEvent(Java.Lang.String arg0, Android.Os.Bundle arg1)
        {
            IExecute("onCallEvent", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#onDeflect(android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        public void OnDeflect(Android.Net.Uri arg0)
        {
            IExecuteWithSignature("onDeflect", "(Landroid/net/Uri;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#onDisconnect()"/>
        /// </summary>
        public void OnDisconnect()
        {
            IExecuteWithSignature("onDisconnect", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#onExtrasChanged(android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Bundle"/></param>
        public void OnExtrasChanged(Android.Os.Bundle arg0)
        {
            IExecuteWithSignature("onExtrasChanged", "(Landroid/os/Bundle;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#onHandoverComplete()"/>
        /// </summary>
        public void OnHandoverComplete()
        {
            IExecuteWithSignature("onHandoverComplete", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#onHold()"/>
        /// </summary>
        public void OnHold()
        {
            IExecuteWithSignature("onHold", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#onMuteStateChanged(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void OnMuteStateChanged(bool arg0)
        {
            IExecuteWithSignature("onMuteStateChanged", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#onPlayDtmfTone(char)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        public void OnPlayDtmfTone(char arg0)
        {
            IExecuteWithSignature("onPlayDtmfTone", "(C)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#onPostDialContinue(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void OnPostDialContinue(bool arg0)
        {
            IExecuteWithSignature("onPostDialContinue", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#onPullExternalCall()"/>
        /// </summary>
        public void OnPullExternalCall()
        {
            IExecuteWithSignature("onPullExternalCall", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#onReject()"/>
        /// </summary>
        public void OnReject()
        {
            IExecuteWithSignature("onReject", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#onReject(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void OnReject(int arg0)
        {
            IExecuteWithSignature("onReject", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#onReject(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void OnReject(Java.Lang.String arg0)
        {
            IExecuteWithSignature("onReject", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#onSeparate()"/>
        /// </summary>
        public void OnSeparate()
        {
            IExecuteWithSignature("onSeparate", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#onShowIncomingCallUi()"/>
        /// </summary>
        public void OnShowIncomingCallUi()
        {
            IExecuteWithSignature("onShowIncomingCallUi", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#onSilence()"/>
        /// </summary>
        public void OnSilence()
        {
            IExecuteWithSignature("onSilence", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#onStartRtt(android.telecom.Connection.RttTextStream)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telecom.Connection.RttTextStream"/></param>
        public void OnStartRtt(Android.Telecom.Connection.RttTextStream arg0)
        {
            IExecuteWithSignature("onStartRtt", "(Landroid/telecom/Connection$RttTextStream;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#onStateChanged(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void OnStateChanged(int arg0)
        {
            IExecuteWithSignature("onStateChanged", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#onStopDtmfTone()"/>
        /// </summary>
        public void OnStopDtmfTone()
        {
            IExecuteWithSignature("onStopDtmfTone", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#onStopRtt()"/>
        /// </summary>
        public void OnStopRtt()
        {
            IExecuteWithSignature("onStopRtt", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#onTrackedByNonUiService(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void OnTrackedByNonUiService(bool arg0)
        {
            IExecuteWithSignature("onTrackedByNonUiService", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#onUnhold()"/>
        /// </summary>
        public void OnUnhold()
        {
            IExecuteWithSignature("onUnhold", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#onUsingAlternativeUi(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void OnUsingAlternativeUi(bool arg0)
        {
            IExecuteWithSignature("onUsingAlternativeUi", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#requestBluetoothAudio(android.bluetooth.BluetoothDevice)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Bluetooth.BluetoothDevice"/></param>
        [global::System.Obsolete()]
        public void RequestBluetoothAudio(Android.Bluetooth.BluetoothDevice arg0)
        {
            IExecuteWithSignature("requestBluetoothAudio", "(Landroid/bluetooth/BluetoothDevice;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telecom/Connection.html#sendConnectionEvent(java.lang.String,android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Os.Bundle"/></param>
        public void SendConnectionEvent(Java.Lang.String arg0, Android.Os.Bundle arg1)
        {
            IExecute("sendConnectionEvent", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region RttModifyStatus
        public partial class RttModifyStatus
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Connection.RttModifyStatus.html#SESSION_MODIFY_REQUEST_FAIL"/>
            /// </summary>
            public static int SESSION_MODIFY_REQUEST_FAIL { get { if (!_SESSION_MODIFY_REQUEST_FAILReady) { _SESSION_MODIFY_REQUEST_FAILContent = SGetField<int>(LocalBridgeClazz, "SESSION_MODIFY_REQUEST_FAIL"); _SESSION_MODIFY_REQUEST_FAILReady = true; } return _SESSION_MODIFY_REQUEST_FAILContent; } }
            private static int _SESSION_MODIFY_REQUEST_FAILContent = default;
            private static bool _SESSION_MODIFY_REQUEST_FAILReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Connection.RttModifyStatus.html#SESSION_MODIFY_REQUEST_INVALID"/>
            /// </summary>
            public static int SESSION_MODIFY_REQUEST_INVALID { get { if (!_SESSION_MODIFY_REQUEST_INVALIDReady) { _SESSION_MODIFY_REQUEST_INVALIDContent = SGetField<int>(LocalBridgeClazz, "SESSION_MODIFY_REQUEST_INVALID"); _SESSION_MODIFY_REQUEST_INVALIDReady = true; } return _SESSION_MODIFY_REQUEST_INVALIDContent; } }
            private static int _SESSION_MODIFY_REQUEST_INVALIDContent = default;
            private static bool _SESSION_MODIFY_REQUEST_INVALIDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Connection.RttModifyStatus.html#SESSION_MODIFY_REQUEST_REJECTED_BY_REMOTE"/>
            /// </summary>
            public static int SESSION_MODIFY_REQUEST_REJECTED_BY_REMOTE { get { if (!_SESSION_MODIFY_REQUEST_REJECTED_BY_REMOTEReady) { _SESSION_MODIFY_REQUEST_REJECTED_BY_REMOTEContent = SGetField<int>(LocalBridgeClazz, "SESSION_MODIFY_REQUEST_REJECTED_BY_REMOTE"); _SESSION_MODIFY_REQUEST_REJECTED_BY_REMOTEReady = true; } return _SESSION_MODIFY_REQUEST_REJECTED_BY_REMOTEContent; } }
            private static int _SESSION_MODIFY_REQUEST_REJECTED_BY_REMOTEContent = default;
            private static bool _SESSION_MODIFY_REQUEST_REJECTED_BY_REMOTEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Connection.RttModifyStatus.html#SESSION_MODIFY_REQUEST_SUCCESS"/>
            /// </summary>
            public static int SESSION_MODIFY_REQUEST_SUCCESS { get { if (!_SESSION_MODIFY_REQUEST_SUCCESSReady) { _SESSION_MODIFY_REQUEST_SUCCESSContent = SGetField<int>(LocalBridgeClazz, "SESSION_MODIFY_REQUEST_SUCCESS"); _SESSION_MODIFY_REQUEST_SUCCESSReady = true; } return _SESSION_MODIFY_REQUEST_SUCCESSContent; } }
            private static int _SESSION_MODIFY_REQUEST_SUCCESSContent = default;
            private static bool _SESSION_MODIFY_REQUEST_SUCCESSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Connection.RttModifyStatus.html#SESSION_MODIFY_REQUEST_TIMED_OUT"/>
            /// </summary>
            public static int SESSION_MODIFY_REQUEST_TIMED_OUT { get { if (!_SESSION_MODIFY_REQUEST_TIMED_OUTReady) { _SESSION_MODIFY_REQUEST_TIMED_OUTContent = SGetField<int>(LocalBridgeClazz, "SESSION_MODIFY_REQUEST_TIMED_OUT"); _SESSION_MODIFY_REQUEST_TIMED_OUTReady = true; } return _SESSION_MODIFY_REQUEST_TIMED_OUTContent; } }
            private static int _SESSION_MODIFY_REQUEST_TIMED_OUTContent = default;
            private static bool _SESSION_MODIFY_REQUEST_TIMED_OUTReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region RttTextStream
        public partial class RttTextStream
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Connection.RttTextStream.html#read()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            /// <exception cref="Java.Io.IOException"/>
            public Java.Lang.String Read()
            {
                return IExecuteWithSignature<Java.Lang.String>("read", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Connection.RttTextStream.html#readImmediately()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            /// <exception cref="Java.Io.IOException"/>
            public Java.Lang.String ReadImmediately()
            {
                return IExecuteWithSignature<Java.Lang.String>("readImmediately", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Connection.RttTextStream.html#write(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <exception cref="Java.Io.IOException"/>
            public void Write(Java.Lang.String arg0)
            {
                IExecuteWithSignature("write", "(Ljava/lang/String;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region VideoProvider
        public partial class VideoProvider
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Connection.VideoProvider.html#SESSION_EVENT_CAMERA_FAILURE"/>
            /// </summary>
            public static int SESSION_EVENT_CAMERA_FAILURE { get { if (!_SESSION_EVENT_CAMERA_FAILUREReady) { _SESSION_EVENT_CAMERA_FAILUREContent = SGetField<int>(LocalBridgeClazz, "SESSION_EVENT_CAMERA_FAILURE"); _SESSION_EVENT_CAMERA_FAILUREReady = true; } return _SESSION_EVENT_CAMERA_FAILUREContent; } }
            private static int _SESSION_EVENT_CAMERA_FAILUREContent = default;
            private static bool _SESSION_EVENT_CAMERA_FAILUREReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Connection.VideoProvider.html#SESSION_EVENT_CAMERA_PERMISSION_ERROR"/>
            /// </summary>
            public static int SESSION_EVENT_CAMERA_PERMISSION_ERROR { get { if (!_SESSION_EVENT_CAMERA_PERMISSION_ERRORReady) { _SESSION_EVENT_CAMERA_PERMISSION_ERRORContent = SGetField<int>(LocalBridgeClazz, "SESSION_EVENT_CAMERA_PERMISSION_ERROR"); _SESSION_EVENT_CAMERA_PERMISSION_ERRORReady = true; } return _SESSION_EVENT_CAMERA_PERMISSION_ERRORContent; } }
            private static int _SESSION_EVENT_CAMERA_PERMISSION_ERRORContent = default;
            private static bool _SESSION_EVENT_CAMERA_PERMISSION_ERRORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Connection.VideoProvider.html#SESSION_EVENT_CAMERA_READY"/>
            /// </summary>
            public static int SESSION_EVENT_CAMERA_READY { get { if (!_SESSION_EVENT_CAMERA_READYReady) { _SESSION_EVENT_CAMERA_READYContent = SGetField<int>(LocalBridgeClazz, "SESSION_EVENT_CAMERA_READY"); _SESSION_EVENT_CAMERA_READYReady = true; } return _SESSION_EVENT_CAMERA_READYContent; } }
            private static int _SESSION_EVENT_CAMERA_READYContent = default;
            private static bool _SESSION_EVENT_CAMERA_READYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Connection.VideoProvider.html#SESSION_EVENT_RX_PAUSE"/>
            /// </summary>
            public static int SESSION_EVENT_RX_PAUSE { get { if (!_SESSION_EVENT_RX_PAUSEReady) { _SESSION_EVENT_RX_PAUSEContent = SGetField<int>(LocalBridgeClazz, "SESSION_EVENT_RX_PAUSE"); _SESSION_EVENT_RX_PAUSEReady = true; } return _SESSION_EVENT_RX_PAUSEContent; } }
            private static int _SESSION_EVENT_RX_PAUSEContent = default;
            private static bool _SESSION_EVENT_RX_PAUSEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Connection.VideoProvider.html#SESSION_EVENT_RX_RESUME"/>
            /// </summary>
            public static int SESSION_EVENT_RX_RESUME { get { if (!_SESSION_EVENT_RX_RESUMEReady) { _SESSION_EVENT_RX_RESUMEContent = SGetField<int>(LocalBridgeClazz, "SESSION_EVENT_RX_RESUME"); _SESSION_EVENT_RX_RESUMEReady = true; } return _SESSION_EVENT_RX_RESUMEContent; } }
            private static int _SESSION_EVENT_RX_RESUMEContent = default;
            private static bool _SESSION_EVENT_RX_RESUMEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Connection.VideoProvider.html#SESSION_EVENT_TX_START"/>
            /// </summary>
            public static int SESSION_EVENT_TX_START { get { if (!_SESSION_EVENT_TX_STARTReady) { _SESSION_EVENT_TX_STARTContent = SGetField<int>(LocalBridgeClazz, "SESSION_EVENT_TX_START"); _SESSION_EVENT_TX_STARTReady = true; } return _SESSION_EVENT_TX_STARTContent; } }
            private static int _SESSION_EVENT_TX_STARTContent = default;
            private static bool _SESSION_EVENT_TX_STARTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Connection.VideoProvider.html#SESSION_EVENT_TX_STOP"/>
            /// </summary>
            public static int SESSION_EVENT_TX_STOP { get { if (!_SESSION_EVENT_TX_STOPReady) { _SESSION_EVENT_TX_STOPContent = SGetField<int>(LocalBridgeClazz, "SESSION_EVENT_TX_STOP"); _SESSION_EVENT_TX_STOPReady = true; } return _SESSION_EVENT_TX_STOPContent; } }
            private static int _SESSION_EVENT_TX_STOPContent = default;
            private static bool _SESSION_EVENT_TX_STOPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Connection.VideoProvider.html#SESSION_MODIFY_REQUEST_FAIL"/>
            /// </summary>
            public static int SESSION_MODIFY_REQUEST_FAIL { get { if (!_SESSION_MODIFY_REQUEST_FAILReady) { _SESSION_MODIFY_REQUEST_FAILContent = SGetField<int>(LocalBridgeClazz, "SESSION_MODIFY_REQUEST_FAIL"); _SESSION_MODIFY_REQUEST_FAILReady = true; } return _SESSION_MODIFY_REQUEST_FAILContent; } }
            private static int _SESSION_MODIFY_REQUEST_FAILContent = default;
            private static bool _SESSION_MODIFY_REQUEST_FAILReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Connection.VideoProvider.html#SESSION_MODIFY_REQUEST_INVALID"/>
            /// </summary>
            public static int SESSION_MODIFY_REQUEST_INVALID { get { if (!_SESSION_MODIFY_REQUEST_INVALIDReady) { _SESSION_MODIFY_REQUEST_INVALIDContent = SGetField<int>(LocalBridgeClazz, "SESSION_MODIFY_REQUEST_INVALID"); _SESSION_MODIFY_REQUEST_INVALIDReady = true; } return _SESSION_MODIFY_REQUEST_INVALIDContent; } }
            private static int _SESSION_MODIFY_REQUEST_INVALIDContent = default;
            private static bool _SESSION_MODIFY_REQUEST_INVALIDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Connection.VideoProvider.html#SESSION_MODIFY_REQUEST_REJECTED_BY_REMOTE"/>
            /// </summary>
            public static int SESSION_MODIFY_REQUEST_REJECTED_BY_REMOTE { get { if (!_SESSION_MODIFY_REQUEST_REJECTED_BY_REMOTEReady) { _SESSION_MODIFY_REQUEST_REJECTED_BY_REMOTEContent = SGetField<int>(LocalBridgeClazz, "SESSION_MODIFY_REQUEST_REJECTED_BY_REMOTE"); _SESSION_MODIFY_REQUEST_REJECTED_BY_REMOTEReady = true; } return _SESSION_MODIFY_REQUEST_REJECTED_BY_REMOTEContent; } }
            private static int _SESSION_MODIFY_REQUEST_REJECTED_BY_REMOTEContent = default;
            private static bool _SESSION_MODIFY_REQUEST_REJECTED_BY_REMOTEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Connection.VideoProvider.html#SESSION_MODIFY_REQUEST_SUCCESS"/>
            /// </summary>
            public static int SESSION_MODIFY_REQUEST_SUCCESS { get { if (!_SESSION_MODIFY_REQUEST_SUCCESSReady) { _SESSION_MODIFY_REQUEST_SUCCESSContent = SGetField<int>(LocalBridgeClazz, "SESSION_MODIFY_REQUEST_SUCCESS"); _SESSION_MODIFY_REQUEST_SUCCESSReady = true; } return _SESSION_MODIFY_REQUEST_SUCCESSContent; } }
            private static int _SESSION_MODIFY_REQUEST_SUCCESSContent = default;
            private static bool _SESSION_MODIFY_REQUEST_SUCCESSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Connection.VideoProvider.html#SESSION_MODIFY_REQUEST_TIMED_OUT"/>
            /// </summary>
            public static int SESSION_MODIFY_REQUEST_TIMED_OUT { get { if (!_SESSION_MODIFY_REQUEST_TIMED_OUTReady) { _SESSION_MODIFY_REQUEST_TIMED_OUTContent = SGetField<int>(LocalBridgeClazz, "SESSION_MODIFY_REQUEST_TIMED_OUT"); _SESSION_MODIFY_REQUEST_TIMED_OUTReady = true; } return _SESSION_MODIFY_REQUEST_TIMED_OUTContent; } }
            private static int _SESSION_MODIFY_REQUEST_TIMED_OUTContent = default;
            private static bool _SESSION_MODIFY_REQUEST_TIMED_OUTReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Connection.VideoProvider.html#onRequestCameraCapabilities()"/>
            /// </summary>
            public void OnRequestCameraCapabilities()
            {
                IExecuteWithSignature("onRequestCameraCapabilities", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Connection.VideoProvider.html#onRequestConnectionDataUsage()"/>
            /// </summary>
            public void OnRequestConnectionDataUsage()
            {
                IExecuteWithSignature("onRequestConnectionDataUsage", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Connection.VideoProvider.html#onSendSessionModifyRequest(android.telecom.VideoProfile,android.telecom.VideoProfile)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Telecom.VideoProfile"/></param>
            /// <param name="arg1"><see cref="Android.Telecom.VideoProfile"/></param>
            public void OnSendSessionModifyRequest(Android.Telecom.VideoProfile arg0, Android.Telecom.VideoProfile arg1)
            {
                IExecute("onSendSessionModifyRequest", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Connection.VideoProvider.html#onSendSessionModifyResponse(android.telecom.VideoProfile)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Telecom.VideoProfile"/></param>
            public void OnSendSessionModifyResponse(Android.Telecom.VideoProfile arg0)
            {
                IExecuteWithSignature("onSendSessionModifyResponse", "(Landroid/telecom/VideoProfile;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Connection.VideoProvider.html#onSetCamera(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            public void OnSetCamera(Java.Lang.String arg0)
            {
                IExecuteWithSignature("onSetCamera", "(Ljava/lang/String;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Connection.VideoProvider.html#onSetDeviceOrientation(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void OnSetDeviceOrientation(int arg0)
            {
                IExecuteWithSignature("onSetDeviceOrientation", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Connection.VideoProvider.html#onSetDisplaySurface(android.view.Surface)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.Surface"/></param>
            public void OnSetDisplaySurface(Android.View.Surface arg0)
            {
                IExecuteWithSignature("onSetDisplaySurface", "(Landroid/view/Surface;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Connection.VideoProvider.html#onSetPauseImage(android.net.Uri)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
            public void OnSetPauseImage(Android.Net.Uri arg0)
            {
                IExecuteWithSignature("onSetPauseImage", "(Landroid/net/Uri;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Connection.VideoProvider.html#onSetPreviewSurface(android.view.Surface)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.Surface"/></param>
            public void OnSetPreviewSurface(Android.View.Surface arg0)
            {
                IExecuteWithSignature("onSetPreviewSurface", "(Landroid/view/Surface;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Connection.VideoProvider.html#onSetZoom(float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            public void OnSetZoom(float arg0)
            {
                IExecuteWithSignature("onSetZoom", "(F)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Connection.VideoProvider.html#changeCameraCapabilities(android.telecom.VideoProfile.CameraCapabilities)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Telecom.VideoProfile.CameraCapabilities"/></param>
            public void ChangeCameraCapabilities(Android.Telecom.VideoProfile.CameraCapabilities arg0)
            {
                IExecuteWithSignature("changeCameraCapabilities", "(Landroid/telecom/VideoProfile$CameraCapabilities;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Connection.VideoProvider.html#changePeerDimensions(int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void ChangePeerDimensions(int arg0, int arg1)
            {
                IExecute("changePeerDimensions", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Connection.VideoProvider.html#changeVideoQuality(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void ChangeVideoQuality(int arg0)
            {
                IExecuteWithSignature("changeVideoQuality", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Connection.VideoProvider.html#handleCallSessionEvent(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void HandleCallSessionEvent(int arg0)
            {
                IExecuteWithSignature("handleCallSessionEvent", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Connection.VideoProvider.html#receiveSessionModifyRequest(android.telecom.VideoProfile)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Telecom.VideoProfile"/></param>
            public void ReceiveSessionModifyRequest(Android.Telecom.VideoProfile arg0)
            {
                IExecuteWithSignature("receiveSessionModifyRequest", "(Landroid/telecom/VideoProfile;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Connection.VideoProvider.html#receiveSessionModifyResponse(int,android.telecom.VideoProfile,android.telecom.VideoProfile)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Android.Telecom.VideoProfile"/></param>
            /// <param name="arg2"><see cref="Android.Telecom.VideoProfile"/></param>
            public void ReceiveSessionModifyResponse(int arg0, Android.Telecom.VideoProfile arg1, Android.Telecom.VideoProfile arg2)
            {
                IExecute("receiveSessionModifyResponse", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telecom/Connection.VideoProvider.html#setCallDataUsage(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            public void SetCallDataUsage(long arg0)
            {
                IExecuteWithSignature("setCallDataUsage", "(J)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
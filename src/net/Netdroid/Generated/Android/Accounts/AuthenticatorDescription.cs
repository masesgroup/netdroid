/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Accounts
{
    #region AuthenticatorDescription declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/accounts/AuthenticatorDescription.html"/>
    /// </summary>
    public partial class AuthenticatorDescription : Android.Os.Parcelable
    {
        const string _bridgeClassName = "android.accounts.AuthenticatorDescription";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public AuthenticatorDescription() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public AuthenticatorDescription(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region AuthenticatorDescription implementation
    public partial class AuthenticatorDescription
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accounts/AuthenticatorDescription.html#%3Cinit%3E(java.lang.String,java.lang.String,int,int,int,int,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="bool"/></param>
        public AuthenticatorDescription(Java.Lang.String arg0, Java.Lang.String arg1, int arg2, int arg3, int arg4, int arg5, bool arg6)
            : base(arg0, arg1, arg2, arg3, arg4, arg5, arg6)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accounts/AuthenticatorDescription.html#%3Cinit%3E(java.lang.String,java.lang.String,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        public AuthenticatorDescription(Java.Lang.String arg0, Java.Lang.String arg1, int arg2, int arg3, int arg4, int arg5)
            : base(arg0, arg1, arg2, arg3, arg4, arg5)
        {
        }
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accounts/AuthenticatorDescription.html#customTokens"/>
        /// </summary>
        public bool customTokens { get { if (!_customTokensReady) { _customTokensContent = IGetField<bool>("customTokens"); _customTokensReady = true; } return _customTokensContent; } }
        private bool _customTokensContent = default;
        private bool _customTokensReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accounts/AuthenticatorDescription.html#accountPreferencesId"/>
        /// </summary>
        public int accountPreferencesId { get { if (!_accountPreferencesIdReady) { _accountPreferencesIdContent = IGetField<int>("accountPreferencesId"); _accountPreferencesIdReady = true; } return _accountPreferencesIdContent; } }
        private int _accountPreferencesIdContent = default;
        private bool _accountPreferencesIdReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accounts/AuthenticatorDescription.html#iconId"/>
        /// </summary>
        public int iconId { get { if (!_iconIdReady) { _iconIdContent = IGetField<int>("iconId"); _iconIdReady = true; } return _iconIdContent; } }
        private int _iconIdContent = default;
        private bool _iconIdReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accounts/AuthenticatorDescription.html#labelId"/>
        /// </summary>
        public int labelId { get { if (!_labelIdReady) { _labelIdContent = IGetField<int>("labelId"); _labelIdReady = true; } return _labelIdContent; } }
        private int _labelIdContent = default;
        private bool _labelIdReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accounts/AuthenticatorDescription.html#smallIconId"/>
        /// </summary>
        public int smallIconId { get { if (!_smallIconIdReady) { _smallIconIdContent = IGetField<int>("smallIconId"); _smallIconIdReady = true; } return _smallIconIdContent; } }
        private int _smallIconIdContent = default;
        private bool _smallIconIdReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accounts/AuthenticatorDescription.html#packageName"/>
        /// </summary>
        public Java.Lang.String packageName { get { if (!_packageNameReady) { _packageNameContent = IGetField<Java.Lang.String>("packageName"); _packageNameReady = true; } return _packageNameContent; } }
        private Java.Lang.String _packageNameContent = default;
        private bool _packageNameReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accounts/AuthenticatorDescription.html#type"/>
        /// </summary>
        public Java.Lang.String type { get { if (!_typeReady) { _typeContent = IGetField<Java.Lang.String>("type"); _typeReady = true; } return _typeContent; } }
        private Java.Lang.String _typeContent = default;
        private bool _typeReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accounts/AuthenticatorDescription.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accounts/AuthenticatorDescription.html#newKey(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Accounts.AuthenticatorDescription"/></returns>
        public static Android.Accounts.AuthenticatorDescription NewKey(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<Android.Accounts.AuthenticatorDescription>(LocalBridgeClazz, "newKey", "(Ljava/lang/String;)Landroid/accounts/AuthenticatorDescription;", arg0);
        }
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accounts/AuthenticatorDescription.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accounts/AuthenticatorDescription.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
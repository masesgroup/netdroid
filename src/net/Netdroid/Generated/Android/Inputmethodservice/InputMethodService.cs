/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Inputmethodservice
{
    #region InputMethodService declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html"/>
    /// </summary>
    public partial class InputMethodService : Android.Inputmethodservice.AbstractInputMethodService
    {
        const string _bridgeClassName = "android.inputmethodservice.InputMethodService";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public InputMethodService() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public InputMethodService(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region InputMethodImpl declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.InputMethodImpl.html"/>
        /// </summary>
        public partial class InputMethodImpl : Android.Inputmethodservice.AbstractInputMethodService.AbstractInputMethodImpl
        {
            const string _bridgeClassName = "android.inputmethodservice.InputMethodService$InputMethodImpl";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public InputMethodImpl() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public InputMethodImpl(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => false;
        
            // TODO: complete the class
        
        }
        #endregion

        #region InputMethodSessionImpl declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.InputMethodSessionImpl.html"/>
        /// </summary>
        public partial class InputMethodSessionImpl : Android.Inputmethodservice.AbstractInputMethodService.AbstractInputMethodSessionImpl
        {
            const string _bridgeClassName = "android.inputmethodservice.InputMethodService$InputMethodSessionImpl";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public InputMethodSessionImpl() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public InputMethodSessionImpl(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => false;
        
            // TODO: complete the class
        
        }
        #endregion

        #region Insets declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.Insets.html"/>
        /// </summary>
        public partial class Insets : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Insets>
        {
            const string _bridgeClassName = "android.inputmethodservice.InputMethodService$Insets";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Insets() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Insets(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region InputMethodService implementation
    public partial class InputMethodService
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#BACK_DISPOSITION_ADJUST_NOTHING"/>
        /// </summary>
        public static int BACK_DISPOSITION_ADJUST_NOTHING { get { if (!_BACK_DISPOSITION_ADJUST_NOTHINGReady) { _BACK_DISPOSITION_ADJUST_NOTHINGContent = SGetField<int>(LocalBridgeClazz, "BACK_DISPOSITION_ADJUST_NOTHING"); _BACK_DISPOSITION_ADJUST_NOTHINGReady = true; } return _BACK_DISPOSITION_ADJUST_NOTHINGContent; } }
        private static int _BACK_DISPOSITION_ADJUST_NOTHINGContent = default;
        private static bool _BACK_DISPOSITION_ADJUST_NOTHINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#BACK_DISPOSITION_DEFAULT"/>
        /// </summary>
        public static int BACK_DISPOSITION_DEFAULT { get { if (!_BACK_DISPOSITION_DEFAULTReady) { _BACK_DISPOSITION_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "BACK_DISPOSITION_DEFAULT"); _BACK_DISPOSITION_DEFAULTReady = true; } return _BACK_DISPOSITION_DEFAULTContent; } }
        private static int _BACK_DISPOSITION_DEFAULTContent = default;
        private static bool _BACK_DISPOSITION_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#BACK_DISPOSITION_WILL_DISMISS"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int BACK_DISPOSITION_WILL_DISMISS { get { if (!_BACK_DISPOSITION_WILL_DISMISSReady) { _BACK_DISPOSITION_WILL_DISMISSContent = SGetField<int>(LocalBridgeClazz, "BACK_DISPOSITION_WILL_DISMISS"); _BACK_DISPOSITION_WILL_DISMISSReady = true; } return _BACK_DISPOSITION_WILL_DISMISSContent; } }
        private static int _BACK_DISPOSITION_WILL_DISMISSContent = default;
        private static bool _BACK_DISPOSITION_WILL_DISMISSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#BACK_DISPOSITION_WILL_NOT_DISMISS"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int BACK_DISPOSITION_WILL_NOT_DISMISS { get { if (!_BACK_DISPOSITION_WILL_NOT_DISMISSReady) { _BACK_DISPOSITION_WILL_NOT_DISMISSContent = SGetField<int>(LocalBridgeClazz, "BACK_DISPOSITION_WILL_NOT_DISMISS"); _BACK_DISPOSITION_WILL_NOT_DISMISSReady = true; } return _BACK_DISPOSITION_WILL_NOT_DISMISSContent; } }
        private static int _BACK_DISPOSITION_WILL_NOT_DISMISSContent = default;
        private static bool _BACK_DISPOSITION_WILL_NOT_DISMISSReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#getStylusHandwritingIdleTimeoutMax()"/>
        /// </summary>
        /// <returns><see cref="Java.Time.Duration"/></returns>
        public static Java.Time.Duration GetStylusHandwritingIdleTimeoutMax()
        {
            return SExecuteWithSignature<Java.Time.Duration>(LocalBridgeClazz, "getStylusHandwritingIdleTimeoutMax", "()Ljava/time/Duration;");
        }
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#getWindow()"/>
        /// </summary>
        /// <returns><see cref="Android.App.Dialog"/></returns>
        public Android.App.Dialog GetWindow()
        {
            return IExecuteWithSignature<Android.App.Dialog>("getWindow", "()Landroid/app/Dialog;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#getCurrentInputEditorInfo()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Inputmethod.EditorInfo"/></returns>
        public Android.View.Inputmethod.EditorInfo GetCurrentInputEditorInfo()
        {
            return IExecuteWithSignature<Android.View.Inputmethod.EditorInfo>("getCurrentInputEditorInfo", "()Landroid/view/inputmethod/EditorInfo;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onCreateInlineSuggestionsRequest(android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Bundle"/></param>
        /// <returns><see cref="Android.View.Inputmethod.InlineSuggestionsRequest"/></returns>
        public Android.View.Inputmethod.InlineSuggestionsRequest OnCreateInlineSuggestionsRequest(Android.Os.Bundle arg0)
        {
            return IExecuteWithSignature<Android.View.Inputmethod.InlineSuggestionsRequest>("onCreateInlineSuggestionsRequest", "(Landroid/os/Bundle;)Landroid/view/inputmethod/InlineSuggestionsRequest;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#getCurrentInputBinding()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Inputmethod.InputBinding"/></returns>
        public Android.View.Inputmethod.InputBinding GetCurrentInputBinding()
        {
            return IExecuteWithSignature<Android.View.Inputmethod.InputBinding>("getCurrentInputBinding", "()Landroid/view/inputmethod/InputBinding;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#getCurrentInputConnection()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Inputmethod.InputConnection"/></returns>
        public Android.View.Inputmethod.InputConnection GetCurrentInputConnection()
        {
            return IExecuteWithSignature<Android.View.Inputmethod.InputConnection>("getCurrentInputConnection", "()Landroid/view/inputmethod/InputConnection;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#getLayoutInflater()"/>
        /// </summary>
        /// <returns><see cref="Android.View.LayoutInflater"/></returns>
        public Android.View.LayoutInflater GetLayoutInflater()
        {
            return IExecuteWithSignature<Android.View.LayoutInflater>("getLayoutInflater", "()Landroid/view/LayoutInflater;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onCreateCandidatesView()"/>
        /// </summary>
        /// <returns><see cref="Android.View.View"/></returns>
        public Android.View.View OnCreateCandidatesView()
        {
            return IExecuteWithSignature<Android.View.View>("onCreateCandidatesView", "()Landroid/view/View;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onCreateExtractTextView()"/>
        /// </summary>
        /// <returns><see cref="Android.View.View"/></returns>
        public Android.View.View OnCreateExtractTextView()
        {
            return IExecuteWithSignature<Android.View.View>("onCreateExtractTextView", "()Landroid/view/View;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onCreateInputView()"/>
        /// </summary>
        /// <returns><see cref="Android.View.View"/></returns>
        public Android.View.View OnCreateInputView()
        {
            return IExecuteWithSignature<Android.View.View>("onCreateInputView", "()Landroid/view/View;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#enableHardwareAcceleration()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool EnableHardwareAcceleration()
        {
            return IExecuteWithSignature<bool>("enableHardwareAcceleration", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#getCurrentInputStarted()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetCurrentInputStarted()
        {
            return IExecuteWithSignature<bool>("getCurrentInputStarted", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#isExtractViewShown()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsExtractViewShown()
        {
            return IExecuteWithSignature<bool>("isExtractViewShown", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#isFullscreenMode()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsFullscreenMode()
        {
            return IExecuteWithSignature<bool>("isFullscreenMode", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#isInputViewShown()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsInputViewShown()
        {
            return IExecuteWithSignature<bool>("isInputViewShown", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#isShowInputRequested()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsShowInputRequested()
        {
            return IExecuteWithSignature<bool>("isShowInputRequested", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onEvaluateFullscreenMode()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool OnEvaluateFullscreenMode()
        {
            return IExecuteWithSignature<bool>("onEvaluateFullscreenMode", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onEvaluateInputViewShown()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool OnEvaluateInputViewShown()
        {
            return IExecuteWithSignature<bool>("onEvaluateInputViewShown", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onExtractTextContextMenuItem(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool OnExtractTextContextMenuItem(int arg0)
        {
            return IExecuteWithSignature<bool>("onExtractTextContextMenuItem", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onInlineSuggestionsResponse(android.view.inputmethod.InlineSuggestionsResponse)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Inputmethod.InlineSuggestionsResponse"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool OnInlineSuggestionsResponse(Android.View.Inputmethod.InlineSuggestionsResponse arg0)
        {
            return IExecuteWithSignature<bool>("onInlineSuggestionsResponse", "(Landroid/view/inputmethod/InlineSuggestionsResponse;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onShowInputRequested(int,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool OnShowInputRequested(int arg0, bool arg1)
        {
            return IExecute<bool>("onShowInputRequested", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onStartConnectionlessStylusHandwriting(int,android.view.inputmethod.CursorAnchorInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.View.Inputmethod.CursorAnchorInfo"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool OnStartConnectionlessStylusHandwriting(int arg0, Android.View.Inputmethod.CursorAnchorInfo arg1)
        {
            return IExecute<bool>("onStartConnectionlessStylusHandwriting", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onStartStylusHandwriting()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool OnStartStylusHandwriting()
        {
            return IExecuteWithSignature<bool>("onStartStylusHandwriting", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#sendDefaultEditorAction(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SendDefaultEditorAction(bool arg0)
        {
            return IExecuteWithSignature<bool>("sendDefaultEditorAction", "(Z)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#getStylusHandwritingWindow()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Window"/></returns>
        public Android.View.Window GetStylusHandwritingWindow()
        {
            return IExecuteWithSignature<Android.View.Window>("getStylusHandwritingWindow", "()Landroid/view/Window;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#shouldOfferSwitchingToNextInputMethod()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool ShouldOfferSwitchingToNextInputMethod()
        {
            return IExecuteWithSignature<bool>("shouldOfferSwitchingToNextInputMethod", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#switchToNextInputMethod(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SwitchToNextInputMethod(bool arg0)
        {
            return IExecuteWithSignature<bool>("switchToNextInputMethod", "(Z)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#switchToPreviousInputMethod()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool SwitchToPreviousInputMethod()
        {
            return IExecuteWithSignature<bool>("switchToPreviousInputMethod", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#getStylusHandwritingSessionTimeout()"/>
        /// </summary>
        /// <returns><see cref="Java.Time.Duration"/></returns>
        public Java.Time.Duration GetStylusHandwritingSessionTimeout()
        {
            return IExecuteWithSignature<Java.Time.Duration>("getStylusHandwritingSessionTimeout", "()Ljava/time/Duration;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#finishConnectionlessStylusHandwriting(java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        public void FinishConnectionlessStylusHandwriting(Java.Lang.CharSequence arg0)
        {
            IExecuteWithSignature("finishConnectionlessStylusHandwriting", "(Ljava/lang/CharSequence;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#finishStylusHandwriting()"/>
        /// </summary>
        public void FinishStylusHandwriting()
        {
            IExecuteWithSignature("finishStylusHandwriting", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#requestShowSelf(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void RequestShowSelf(int arg0)
        {
            IExecuteWithSignature("requestShowSelf", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#setStylusHandwritingSessionTimeout(java.time.Duration)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Time.Duration"/></param>
        public void SetStylusHandwritingSessionTimeout(Java.Time.Duration arg0)
        {
            IExecuteWithSignature("setStylusHandwritingSessionTimeout", "(Ljava/time/Duration;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#switchInputMethod(java.lang.String,android.view.inputmethod.InputMethodSubtype)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.View.Inputmethod.InputMethodSubtype"/></param>
        public void SwitchInputMethod(Java.Lang.String arg0, Android.View.Inputmethod.InputMethodSubtype arg1)
        {
            IExecute("switchInputMethod", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#getBackDisposition()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetBackDisposition()
        {
            return IExecuteWithSignature<int>("getBackDisposition", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#getCandidatesHiddenVisibility()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetCandidatesHiddenVisibility()
        {
            return IExecuteWithSignature<int>("getCandidatesHiddenVisibility", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#getInputMethodWindowRecommendedHeight()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetInputMethodWindowRecommendedHeight()
        {
            return IExecuteWithSignature<int>("getInputMethodWindowRecommendedHeight", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#getMaxWidth()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMaxWidth()
        {
            return IExecuteWithSignature<int>("getMaxWidth", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#getTextForImeAction(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetTextForImeAction(int arg0)
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getTextForImeAction", "(I)Ljava/lang/CharSequence;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#hideStatusIcon()"/>
        /// </summary>
        public void HideStatusIcon()
        {
            IExecuteWithSignature("hideStatusIcon", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#hideWindow()"/>
        /// </summary>
        public void HideWindow()
        {
            IExecuteWithSignature("hideWindow", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onAppPrivateCommand(java.lang.String,android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Os.Bundle"/></param>
        public void OnAppPrivateCommand(Java.Lang.String arg0, Android.Os.Bundle arg1)
        {
            IExecute("onAppPrivateCommand", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onBindInput()"/>
        /// </summary>
        public void OnBindInput()
        {
            IExecuteWithSignature("onBindInput", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onComputeInsets(android.inputmethodservice.InputMethodService.Insets)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Inputmethodservice.InputMethodService.Insets"/></param>
        public void OnComputeInsets(Android.Inputmethodservice.InputMethodService.Insets arg0)
        {
            IExecuteWithSignature("onComputeInsets", "(Landroid/inputmethodservice/InputMethodService$Insets;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onConfigureWindow(android.view.Window,boolean,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Window"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        public void OnConfigureWindow(Android.View.Window arg0, bool arg1, bool arg2)
        {
            IExecute("onConfigureWindow", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onDisplayCompletions(android.view.inputmethod.CompletionInfo[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Inputmethod.CompletionInfo"/></param>
        public void OnDisplayCompletions(Android.View.Inputmethod.CompletionInfo[] arg0)
        {
            IExecuteWithSignature("onDisplayCompletions", "([Landroid/view/inputmethod/CompletionInfo;)V", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onExtractedCursorMovement(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void OnExtractedCursorMovement(int arg0, int arg1)
        {
            IExecute("onExtractedCursorMovement", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onExtractedSelectionChanged(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void OnExtractedSelectionChanged(int arg0, int arg1)
        {
            IExecute("onExtractedSelectionChanged", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onExtractedTextClicked()"/>
        /// </summary>
        public void OnExtractedTextClicked()
        {
            IExecuteWithSignature("onExtractedTextClicked", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onExtractingInputChanged(android.view.inputmethod.EditorInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Inputmethod.EditorInfo"/></param>
        public void OnExtractingInputChanged(Android.View.Inputmethod.EditorInfo arg0)
        {
            IExecuteWithSignature("onExtractingInputChanged", "(Landroid/view/inputmethod/EditorInfo;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onFinishCandidatesView(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void OnFinishCandidatesView(bool arg0)
        {
            IExecuteWithSignature("onFinishCandidatesView", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onFinishInput()"/>
        /// </summary>
        public void OnFinishInput()
        {
            IExecuteWithSignature("onFinishInput", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onFinishInputView(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void OnFinishInputView(bool arg0)
        {
            IExecuteWithSignature("onFinishInputView", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onFinishStylusHandwriting()"/>
        /// </summary>
        public void OnFinishStylusHandwriting()
        {
            IExecuteWithSignature("onFinishStylusHandwriting", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onInitializeInterface()"/>
        /// </summary>
        public void OnInitializeInterface()
        {
            IExecuteWithSignature("onInitializeInterface", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onPrepareStylusHandwriting()"/>
        /// </summary>
        public void OnPrepareStylusHandwriting()
        {
            IExecuteWithSignature("onPrepareStylusHandwriting", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onStartCandidatesView(android.view.inputmethod.EditorInfo,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Inputmethod.EditorInfo"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public void OnStartCandidatesView(Android.View.Inputmethod.EditorInfo arg0, bool arg1)
        {
            IExecute("onStartCandidatesView", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onStartInput(android.view.inputmethod.EditorInfo,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Inputmethod.EditorInfo"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public void OnStartInput(Android.View.Inputmethod.EditorInfo arg0, bool arg1)
        {
            IExecute("onStartInput", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onStartInputView(android.view.inputmethod.EditorInfo,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Inputmethod.EditorInfo"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public void OnStartInputView(Android.View.Inputmethod.EditorInfo arg0, bool arg1)
        {
            IExecute("onStartInputView", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onStylusHandwritingMotionEvent(android.view.MotionEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
        public void OnStylusHandwritingMotionEvent(Android.View.MotionEvent arg0)
        {
            IExecuteWithSignature("onStylusHandwritingMotionEvent", "(Landroid/view/MotionEvent;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onUnbindInput()"/>
        /// </summary>
        public void OnUnbindInput()
        {
            IExecuteWithSignature("onUnbindInput", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onUpdateCursor(android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        [global::System.Obsolete()]
        public void OnUpdateCursor(Android.Graphics.Rect arg0)
        {
            IExecuteWithSignature("onUpdateCursor", "(Landroid/graphics/Rect;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onUpdateCursorAnchorInfo(android.view.inputmethod.CursorAnchorInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Inputmethod.CursorAnchorInfo"/></param>
        public void OnUpdateCursorAnchorInfo(Android.View.Inputmethod.CursorAnchorInfo arg0)
        {
            IExecuteWithSignature("onUpdateCursorAnchorInfo", "(Landroid/view/inputmethod/CursorAnchorInfo;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onUpdateEditorToolType(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void OnUpdateEditorToolType(int arg0)
        {
            IExecuteWithSignature("onUpdateEditorToolType", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onUpdateExtractedText(int,android.view.inputmethod.ExtractedText)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.View.Inputmethod.ExtractedText"/></param>
        public void OnUpdateExtractedText(int arg0, Android.View.Inputmethod.ExtractedText arg1)
        {
            IExecute("onUpdateExtractedText", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onUpdateExtractingViews(android.view.inputmethod.EditorInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Inputmethod.EditorInfo"/></param>
        public void OnUpdateExtractingViews(Android.View.Inputmethod.EditorInfo arg0)
        {
            IExecuteWithSignature("onUpdateExtractingViews", "(Landroid/view/inputmethod/EditorInfo;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onUpdateExtractingVisibility(android.view.inputmethod.EditorInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Inputmethod.EditorInfo"/></param>
        public void OnUpdateExtractingVisibility(Android.View.Inputmethod.EditorInfo arg0)
        {
            IExecuteWithSignature("onUpdateExtractingVisibility", "(Landroid/view/inputmethod/EditorInfo;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onUpdateSelection(int,int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        public void OnUpdateSelection(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5)
        {
            IExecute("onUpdateSelection", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onViewClicked(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void OnViewClicked(bool arg0)
        {
            IExecuteWithSignature("onViewClicked", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onWindowHidden()"/>
        /// </summary>
        public void OnWindowHidden()
        {
            IExecuteWithSignature("onWindowHidden", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#onWindowShown()"/>
        /// </summary>
        public void OnWindowShown()
        {
            IExecuteWithSignature("onWindowShown", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#requestHideSelf(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void RequestHideSelf(int arg0)
        {
            IExecuteWithSignature("requestHideSelf", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#sendDownUpKeyEvents(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SendDownUpKeyEvents(int arg0)
        {
            IExecuteWithSignature("sendDownUpKeyEvents", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#sendKeyChar(char)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        public void SendKeyChar(char arg0)
        {
            IExecuteWithSignature("sendKeyChar", "(C)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#setBackDisposition(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetBackDisposition(int arg0)
        {
            IExecuteWithSignature("setBackDisposition", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#setCandidatesView(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        public void SetCandidatesView(Android.View.View arg0)
        {
            IExecuteWithSignature("setCandidatesView", "(Landroid/view/View;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#setCandidatesViewShown(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetCandidatesViewShown(bool arg0)
        {
            IExecuteWithSignature("setCandidatesViewShown", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#setExtractView(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        public void SetExtractView(Android.View.View arg0)
        {
            IExecuteWithSignature("setExtractView", "(Landroid/view/View;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#setExtractViewShown(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetExtractViewShown(bool arg0)
        {
            IExecuteWithSignature("setExtractViewShown", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#setInputView(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        public void SetInputView(Android.View.View arg0)
        {
            IExecuteWithSignature("setInputView", "(Landroid/view/View;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#showStatusIcon(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void ShowStatusIcon(int arg0)
        {
            IExecuteWithSignature("showStatusIcon", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#showWindow(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void ShowWindow(bool arg0)
        {
            IExecuteWithSignature("showWindow", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#switchInputMethod(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void SwitchInputMethod(Java.Lang.String arg0)
        {
            IExecuteWithSignature("switchInputMethod", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#updateFullscreenMode()"/>
        /// </summary>
        public void UpdateFullscreenMode()
        {
            IExecuteWithSignature("updateFullscreenMode", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html#updateInputViewShown()"/>
        /// </summary>
        public void UpdateInputViewShown()
        {
            IExecuteWithSignature("updateInputViewShown", "()V");
        }
    
        #endregion
    
        #region Nested classes
        #region InputMethodImpl implementation
        public partial class InputMethodImpl
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.InputMethodImpl.html#%3Cinit%3E(android.inputmethodservice.InputMethodService)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Inputmethodservice.InputMethodService"/></param>
            public InputMethodImpl(Android.Inputmethodservice.InputMethodService arg0)
                : base(arg0)
            {
            }
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region InputMethodSessionImpl implementation
        public partial class InputMethodSessionImpl
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.InputMethodSessionImpl.html#%3Cinit%3E(android.inputmethodservice.InputMethodService)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Inputmethodservice.InputMethodService"/></param>
            public InputMethodSessionImpl(Android.Inputmethodservice.InputMethodService arg0)
                : base(arg0)
            {
            }
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region Insets implementation
        public partial class Insets
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.Insets.html#touchableRegion"/>
            /// </summary>
            public Android.Graphics.Region touchableRegion { get { if (!_touchableRegionReady) { _touchableRegionContent = IGetField<Android.Graphics.Region>("touchableRegion"); _touchableRegionReady = true; } return _touchableRegionContent; } }
            private Android.Graphics.Region _touchableRegionContent = default;
            private bool _touchableRegionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.Insets.html#contentTopInsets"/>
            /// </summary>
            public int contentTopInsets { get { return IGetField<int>("contentTopInsets"); } set { ISetField("contentTopInsets", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.Insets.html#touchableInsets"/>
            /// </summary>
            public int touchableInsets { get { return IGetField<int>("touchableInsets"); } set { ISetField("touchableInsets", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.Insets.html#visibleTopInsets"/>
            /// </summary>
            public int visibleTopInsets { get { return IGetField<int>("visibleTopInsets"); } set { ISetField("visibleTopInsets", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.Insets.html#TOUCHABLE_INSETS_CONTENT"/>
            /// </summary>
            public static int TOUCHABLE_INSETS_CONTENT { get { if (!_TOUCHABLE_INSETS_CONTENTReady) { _TOUCHABLE_INSETS_CONTENTContent = SGetField<int>(LocalBridgeClazz, "TOUCHABLE_INSETS_CONTENT"); _TOUCHABLE_INSETS_CONTENTReady = true; } return _TOUCHABLE_INSETS_CONTENTContent; } }
            private static int _TOUCHABLE_INSETS_CONTENTContent = default;
            private static bool _TOUCHABLE_INSETS_CONTENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.Insets.html#TOUCHABLE_INSETS_FRAME"/>
            /// </summary>
            public static int TOUCHABLE_INSETS_FRAME { get { if (!_TOUCHABLE_INSETS_FRAMEReady) { _TOUCHABLE_INSETS_FRAMEContent = SGetField<int>(LocalBridgeClazz, "TOUCHABLE_INSETS_FRAME"); _TOUCHABLE_INSETS_FRAMEReady = true; } return _TOUCHABLE_INSETS_FRAMEContent; } }
            private static int _TOUCHABLE_INSETS_FRAMEContent = default;
            private static bool _TOUCHABLE_INSETS_FRAMEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.Insets.html#TOUCHABLE_INSETS_REGION"/>
            /// </summary>
            public static int TOUCHABLE_INSETS_REGION { get { if (!_TOUCHABLE_INSETS_REGIONReady) { _TOUCHABLE_INSETS_REGIONContent = SGetField<int>(LocalBridgeClazz, "TOUCHABLE_INSETS_REGION"); _TOUCHABLE_INSETS_REGIONReady = true; } return _TOUCHABLE_INSETS_REGIONContent; } }
            private static int _TOUCHABLE_INSETS_REGIONContent = default;
            private static bool _TOUCHABLE_INSETS_REGIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.Insets.html#TOUCHABLE_INSETS_VISIBLE"/>
            /// </summary>
            public static int TOUCHABLE_INSETS_VISIBLE { get { if (!_TOUCHABLE_INSETS_VISIBLEReady) { _TOUCHABLE_INSETS_VISIBLEContent = SGetField<int>(LocalBridgeClazz, "TOUCHABLE_INSETS_VISIBLE"); _TOUCHABLE_INSETS_VISIBLEReady = true; } return _TOUCHABLE_INSETS_VISIBLEContent; } }
            private static int _TOUCHABLE_INSETS_VISIBLEContent = default;
            private static bool _TOUCHABLE_INSETS_VISIBLEReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
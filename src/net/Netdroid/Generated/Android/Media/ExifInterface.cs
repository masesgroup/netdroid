/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.5.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media
{
    #region ExifInterface
    public partial class ExifInterface
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#%3Cinit%3E(java.io.File)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.File"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public ExifInterface(Java.Io.File arg0)
            : base(arg0)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#%3Cinit%3E(java.io.FileDescriptor)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.FileDescriptor"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public ExifInterface(Java.Io.FileDescriptor arg0)
            : base(arg0)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#%3Cinit%3E(java.io.InputStream,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.InputStream"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public ExifInterface(Java.Io.InputStream arg0, int arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#%3Cinit%3E(java.io.InputStream)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.InputStream"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public ExifInterface(Java.Io.InputStream arg0)
            : base(arg0)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#%3Cinit%3E(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public ExifInterface(Java.Lang.String arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#ORIENTATION_FLIP_HORIZONTAL"/>
        /// </summary>
        public static int ORIENTATION_FLIP_HORIZONTAL { get { if (!_ORIENTATION_FLIP_HORIZONTALReady) { _ORIENTATION_FLIP_HORIZONTALContent = SGetField<int>(LocalBridgeClazz, "ORIENTATION_FLIP_HORIZONTAL"); _ORIENTATION_FLIP_HORIZONTALReady = true; } return _ORIENTATION_FLIP_HORIZONTALContent; } }
        private static int _ORIENTATION_FLIP_HORIZONTALContent = default;
        private static bool _ORIENTATION_FLIP_HORIZONTALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#ORIENTATION_FLIP_VERTICAL"/>
        /// </summary>
        public static int ORIENTATION_FLIP_VERTICAL { get { if (!_ORIENTATION_FLIP_VERTICALReady) { _ORIENTATION_FLIP_VERTICALContent = SGetField<int>(LocalBridgeClazz, "ORIENTATION_FLIP_VERTICAL"); _ORIENTATION_FLIP_VERTICALReady = true; } return _ORIENTATION_FLIP_VERTICALContent; } }
        private static int _ORIENTATION_FLIP_VERTICALContent = default;
        private static bool _ORIENTATION_FLIP_VERTICALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#ORIENTATION_NORMAL"/>
        /// </summary>
        public static int ORIENTATION_NORMAL { get { if (!_ORIENTATION_NORMALReady) { _ORIENTATION_NORMALContent = SGetField<int>(LocalBridgeClazz, "ORIENTATION_NORMAL"); _ORIENTATION_NORMALReady = true; } return _ORIENTATION_NORMALContent; } }
        private static int _ORIENTATION_NORMALContent = default;
        private static bool _ORIENTATION_NORMALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#ORIENTATION_ROTATE_180"/>
        /// </summary>
        public static int ORIENTATION_ROTATE_180 { get { if (!_ORIENTATION_ROTATE_180Ready) { _ORIENTATION_ROTATE_180Content = SGetField<int>(LocalBridgeClazz, "ORIENTATION_ROTATE_180"); _ORIENTATION_ROTATE_180Ready = true; } return _ORIENTATION_ROTATE_180Content; } }
        private static int _ORIENTATION_ROTATE_180Content = default;
        private static bool _ORIENTATION_ROTATE_180Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#ORIENTATION_ROTATE_270"/>
        /// </summary>
        public static int ORIENTATION_ROTATE_270 { get { if (!_ORIENTATION_ROTATE_270Ready) { _ORIENTATION_ROTATE_270Content = SGetField<int>(LocalBridgeClazz, "ORIENTATION_ROTATE_270"); _ORIENTATION_ROTATE_270Ready = true; } return _ORIENTATION_ROTATE_270Content; } }
        private static int _ORIENTATION_ROTATE_270Content = default;
        private static bool _ORIENTATION_ROTATE_270Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#ORIENTATION_ROTATE_90"/>
        /// </summary>
        public static int ORIENTATION_ROTATE_90 { get { if (!_ORIENTATION_ROTATE_90Ready) { _ORIENTATION_ROTATE_90Content = SGetField<int>(LocalBridgeClazz, "ORIENTATION_ROTATE_90"); _ORIENTATION_ROTATE_90Ready = true; } return _ORIENTATION_ROTATE_90Content; } }
        private static int _ORIENTATION_ROTATE_90Content = default;
        private static bool _ORIENTATION_ROTATE_90Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#ORIENTATION_TRANSPOSE"/>
        /// </summary>
        public static int ORIENTATION_TRANSPOSE { get { if (!_ORIENTATION_TRANSPOSEReady) { _ORIENTATION_TRANSPOSEContent = SGetField<int>(LocalBridgeClazz, "ORIENTATION_TRANSPOSE"); _ORIENTATION_TRANSPOSEReady = true; } return _ORIENTATION_TRANSPOSEContent; } }
        private static int _ORIENTATION_TRANSPOSEContent = default;
        private static bool _ORIENTATION_TRANSPOSEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#ORIENTATION_TRANSVERSE"/>
        /// </summary>
        public static int ORIENTATION_TRANSVERSE { get { if (!_ORIENTATION_TRANSVERSEReady) { _ORIENTATION_TRANSVERSEContent = SGetField<int>(LocalBridgeClazz, "ORIENTATION_TRANSVERSE"); _ORIENTATION_TRANSVERSEReady = true; } return _ORIENTATION_TRANSVERSEContent; } }
        private static int _ORIENTATION_TRANSVERSEContent = default;
        private static bool _ORIENTATION_TRANSVERSEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#ORIENTATION_UNDEFINED"/>
        /// </summary>
        public static int ORIENTATION_UNDEFINED { get { if (!_ORIENTATION_UNDEFINEDReady) { _ORIENTATION_UNDEFINEDContent = SGetField<int>(LocalBridgeClazz, "ORIENTATION_UNDEFINED"); _ORIENTATION_UNDEFINEDReady = true; } return _ORIENTATION_UNDEFINEDContent; } }
        private static int _ORIENTATION_UNDEFINEDContent = default;
        private static bool _ORIENTATION_UNDEFINEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#STREAM_TYPE_EXIF_DATA_ONLY"/>
        /// </summary>
        public static int STREAM_TYPE_EXIF_DATA_ONLY { get { if (!_STREAM_TYPE_EXIF_DATA_ONLYReady) { _STREAM_TYPE_EXIF_DATA_ONLYContent = SGetField<int>(LocalBridgeClazz, "STREAM_TYPE_EXIF_DATA_ONLY"); _STREAM_TYPE_EXIF_DATA_ONLYReady = true; } return _STREAM_TYPE_EXIF_DATA_ONLYContent; } }
        private static int _STREAM_TYPE_EXIF_DATA_ONLYContent = default;
        private static bool _STREAM_TYPE_EXIF_DATA_ONLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#STREAM_TYPE_FULL_IMAGE_DATA"/>
        /// </summary>
        public static int STREAM_TYPE_FULL_IMAGE_DATA { get { if (!_STREAM_TYPE_FULL_IMAGE_DATAReady) { _STREAM_TYPE_FULL_IMAGE_DATAContent = SGetField<int>(LocalBridgeClazz, "STREAM_TYPE_FULL_IMAGE_DATA"); _STREAM_TYPE_FULL_IMAGE_DATAReady = true; } return _STREAM_TYPE_FULL_IMAGE_DATAContent; } }
        private static int _STREAM_TYPE_FULL_IMAGE_DATAContent = default;
        private static bool _STREAM_TYPE_FULL_IMAGE_DATAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#WHITEBALANCE_AUTO"/>
        /// </summary>
        public static int WHITEBALANCE_AUTO { get { if (!_WHITEBALANCE_AUTOReady) { _WHITEBALANCE_AUTOContent = SGetField<int>(LocalBridgeClazz, "WHITEBALANCE_AUTO"); _WHITEBALANCE_AUTOReady = true; } return _WHITEBALANCE_AUTOContent; } }
        private static int _WHITEBALANCE_AUTOContent = default;
        private static bool _WHITEBALANCE_AUTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#WHITEBALANCE_MANUAL"/>
        /// </summary>
        public static int WHITEBALANCE_MANUAL { get { if (!_WHITEBALANCE_MANUALReady) { _WHITEBALANCE_MANUALContent = SGetField<int>(LocalBridgeClazz, "WHITEBALANCE_MANUAL"); _WHITEBALANCE_MANUALReady = true; } return _WHITEBALANCE_MANUALContent; } }
        private static int _WHITEBALANCE_MANUALContent = default;
        private static bool _WHITEBALANCE_MANUALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_APERTURE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String TAG_APERTURE { get { if (!_TAG_APERTUREReady) { _TAG_APERTUREContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_APERTURE"); _TAG_APERTUREReady = true; } return _TAG_APERTUREContent; } }
        private static Java.Lang.String _TAG_APERTUREContent = default;
        private static bool _TAG_APERTUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_APERTURE_VALUE"/>
        /// </summary>
        public static Java.Lang.String TAG_APERTURE_VALUE { get { if (!_TAG_APERTURE_VALUEReady) { _TAG_APERTURE_VALUEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_APERTURE_VALUE"); _TAG_APERTURE_VALUEReady = true; } return _TAG_APERTURE_VALUEContent; } }
        private static Java.Lang.String _TAG_APERTURE_VALUEContent = default;
        private static bool _TAG_APERTURE_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_ARTIST"/>
        /// </summary>
        public static Java.Lang.String TAG_ARTIST { get { if (!_TAG_ARTISTReady) { _TAG_ARTISTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_ARTIST"); _TAG_ARTISTReady = true; } return _TAG_ARTISTContent; } }
        private static Java.Lang.String _TAG_ARTISTContent = default;
        private static bool _TAG_ARTISTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_BITS_PER_SAMPLE"/>
        /// </summary>
        public static Java.Lang.String TAG_BITS_PER_SAMPLE { get { if (!_TAG_BITS_PER_SAMPLEReady) { _TAG_BITS_PER_SAMPLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_BITS_PER_SAMPLE"); _TAG_BITS_PER_SAMPLEReady = true; } return _TAG_BITS_PER_SAMPLEContent; } }
        private static Java.Lang.String _TAG_BITS_PER_SAMPLEContent = default;
        private static bool _TAG_BITS_PER_SAMPLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_BRIGHTNESS_VALUE"/>
        /// </summary>
        public static Java.Lang.String TAG_BRIGHTNESS_VALUE { get { if (!_TAG_BRIGHTNESS_VALUEReady) { _TAG_BRIGHTNESS_VALUEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_BRIGHTNESS_VALUE"); _TAG_BRIGHTNESS_VALUEReady = true; } return _TAG_BRIGHTNESS_VALUEContent; } }
        private static Java.Lang.String _TAG_BRIGHTNESS_VALUEContent = default;
        private static bool _TAG_BRIGHTNESS_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_CFA_PATTERN"/>
        /// </summary>
        public static Java.Lang.String TAG_CFA_PATTERN { get { if (!_TAG_CFA_PATTERNReady) { _TAG_CFA_PATTERNContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_CFA_PATTERN"); _TAG_CFA_PATTERNReady = true; } return _TAG_CFA_PATTERNContent; } }
        private static Java.Lang.String _TAG_CFA_PATTERNContent = default;
        private static bool _TAG_CFA_PATTERNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_COLOR_SPACE"/>
        /// </summary>
        public static Java.Lang.String TAG_COLOR_SPACE { get { if (!_TAG_COLOR_SPACEReady) { _TAG_COLOR_SPACEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_COLOR_SPACE"); _TAG_COLOR_SPACEReady = true; } return _TAG_COLOR_SPACEContent; } }
        private static Java.Lang.String _TAG_COLOR_SPACEContent = default;
        private static bool _TAG_COLOR_SPACEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_COMPONENTS_CONFIGURATION"/>
        /// </summary>
        public static Java.Lang.String TAG_COMPONENTS_CONFIGURATION { get { if (!_TAG_COMPONENTS_CONFIGURATIONReady) { _TAG_COMPONENTS_CONFIGURATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_COMPONENTS_CONFIGURATION"); _TAG_COMPONENTS_CONFIGURATIONReady = true; } return _TAG_COMPONENTS_CONFIGURATIONContent; } }
        private static Java.Lang.String _TAG_COMPONENTS_CONFIGURATIONContent = default;
        private static bool _TAG_COMPONENTS_CONFIGURATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_COMPRESSED_BITS_PER_PIXEL"/>
        /// </summary>
        public static Java.Lang.String TAG_COMPRESSED_BITS_PER_PIXEL { get { if (!_TAG_COMPRESSED_BITS_PER_PIXELReady) { _TAG_COMPRESSED_BITS_PER_PIXELContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_COMPRESSED_BITS_PER_PIXEL"); _TAG_COMPRESSED_BITS_PER_PIXELReady = true; } return _TAG_COMPRESSED_BITS_PER_PIXELContent; } }
        private static Java.Lang.String _TAG_COMPRESSED_BITS_PER_PIXELContent = default;
        private static bool _TAG_COMPRESSED_BITS_PER_PIXELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_COMPRESSION"/>
        /// </summary>
        public static Java.Lang.String TAG_COMPRESSION { get { if (!_TAG_COMPRESSIONReady) { _TAG_COMPRESSIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_COMPRESSION"); _TAG_COMPRESSIONReady = true; } return _TAG_COMPRESSIONContent; } }
        private static Java.Lang.String _TAG_COMPRESSIONContent = default;
        private static bool _TAG_COMPRESSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_CONTRAST"/>
        /// </summary>
        public static Java.Lang.String TAG_CONTRAST { get { if (!_TAG_CONTRASTReady) { _TAG_CONTRASTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_CONTRAST"); _TAG_CONTRASTReady = true; } return _TAG_CONTRASTContent; } }
        private static Java.Lang.String _TAG_CONTRASTContent = default;
        private static bool _TAG_CONTRASTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_COPYRIGHT"/>
        /// </summary>
        public static Java.Lang.String TAG_COPYRIGHT { get { if (!_TAG_COPYRIGHTReady) { _TAG_COPYRIGHTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_COPYRIGHT"); _TAG_COPYRIGHTReady = true; } return _TAG_COPYRIGHTContent; } }
        private static Java.Lang.String _TAG_COPYRIGHTContent = default;
        private static bool _TAG_COPYRIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_CUSTOM_RENDERED"/>
        /// </summary>
        public static Java.Lang.String TAG_CUSTOM_RENDERED { get { if (!_TAG_CUSTOM_RENDEREDReady) { _TAG_CUSTOM_RENDEREDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_CUSTOM_RENDERED"); _TAG_CUSTOM_RENDEREDReady = true; } return _TAG_CUSTOM_RENDEREDContent; } }
        private static Java.Lang.String _TAG_CUSTOM_RENDEREDContent = default;
        private static bool _TAG_CUSTOM_RENDEREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_DATETIME"/>
        /// </summary>
        public static Java.Lang.String TAG_DATETIME { get { if (!_TAG_DATETIMEReady) { _TAG_DATETIMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_DATETIME"); _TAG_DATETIMEReady = true; } return _TAG_DATETIMEContent; } }
        private static Java.Lang.String _TAG_DATETIMEContent = default;
        private static bool _TAG_DATETIMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_DATETIME_DIGITIZED"/>
        /// </summary>
        public static Java.Lang.String TAG_DATETIME_DIGITIZED { get { if (!_TAG_DATETIME_DIGITIZEDReady) { _TAG_DATETIME_DIGITIZEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_DATETIME_DIGITIZED"); _TAG_DATETIME_DIGITIZEDReady = true; } return _TAG_DATETIME_DIGITIZEDContent; } }
        private static Java.Lang.String _TAG_DATETIME_DIGITIZEDContent = default;
        private static bool _TAG_DATETIME_DIGITIZEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_DATETIME_ORIGINAL"/>
        /// </summary>
        public static Java.Lang.String TAG_DATETIME_ORIGINAL { get { if (!_TAG_DATETIME_ORIGINALReady) { _TAG_DATETIME_ORIGINALContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_DATETIME_ORIGINAL"); _TAG_DATETIME_ORIGINALReady = true; } return _TAG_DATETIME_ORIGINALContent; } }
        private static Java.Lang.String _TAG_DATETIME_ORIGINALContent = default;
        private static bool _TAG_DATETIME_ORIGINALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_DEFAULT_CROP_SIZE"/>
        /// </summary>
        public static Java.Lang.String TAG_DEFAULT_CROP_SIZE { get { if (!_TAG_DEFAULT_CROP_SIZEReady) { _TAG_DEFAULT_CROP_SIZEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_DEFAULT_CROP_SIZE"); _TAG_DEFAULT_CROP_SIZEReady = true; } return _TAG_DEFAULT_CROP_SIZEContent; } }
        private static Java.Lang.String _TAG_DEFAULT_CROP_SIZEContent = default;
        private static bool _TAG_DEFAULT_CROP_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_DEVICE_SETTING_DESCRIPTION"/>
        /// </summary>
        public static Java.Lang.String TAG_DEVICE_SETTING_DESCRIPTION { get { if (!_TAG_DEVICE_SETTING_DESCRIPTIONReady) { _TAG_DEVICE_SETTING_DESCRIPTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_DEVICE_SETTING_DESCRIPTION"); _TAG_DEVICE_SETTING_DESCRIPTIONReady = true; } return _TAG_DEVICE_SETTING_DESCRIPTIONContent; } }
        private static Java.Lang.String _TAG_DEVICE_SETTING_DESCRIPTIONContent = default;
        private static bool _TAG_DEVICE_SETTING_DESCRIPTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_DIGITAL_ZOOM_RATIO"/>
        /// </summary>
        public static Java.Lang.String TAG_DIGITAL_ZOOM_RATIO { get { if (!_TAG_DIGITAL_ZOOM_RATIOReady) { _TAG_DIGITAL_ZOOM_RATIOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_DIGITAL_ZOOM_RATIO"); _TAG_DIGITAL_ZOOM_RATIOReady = true; } return _TAG_DIGITAL_ZOOM_RATIOContent; } }
        private static Java.Lang.String _TAG_DIGITAL_ZOOM_RATIOContent = default;
        private static bool _TAG_DIGITAL_ZOOM_RATIOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_DNG_VERSION"/>
        /// </summary>
        public static Java.Lang.String TAG_DNG_VERSION { get { if (!_TAG_DNG_VERSIONReady) { _TAG_DNG_VERSIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_DNG_VERSION"); _TAG_DNG_VERSIONReady = true; } return _TAG_DNG_VERSIONContent; } }
        private static Java.Lang.String _TAG_DNG_VERSIONContent = default;
        private static bool _TAG_DNG_VERSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_EXIF_VERSION"/>
        /// </summary>
        public static Java.Lang.String TAG_EXIF_VERSION { get { if (!_TAG_EXIF_VERSIONReady) { _TAG_EXIF_VERSIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_EXIF_VERSION"); _TAG_EXIF_VERSIONReady = true; } return _TAG_EXIF_VERSIONContent; } }
        private static Java.Lang.String _TAG_EXIF_VERSIONContent = default;
        private static bool _TAG_EXIF_VERSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_EXPOSURE_BIAS_VALUE"/>
        /// </summary>
        public static Java.Lang.String TAG_EXPOSURE_BIAS_VALUE { get { if (!_TAG_EXPOSURE_BIAS_VALUEReady) { _TAG_EXPOSURE_BIAS_VALUEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_EXPOSURE_BIAS_VALUE"); _TAG_EXPOSURE_BIAS_VALUEReady = true; } return _TAG_EXPOSURE_BIAS_VALUEContent; } }
        private static Java.Lang.String _TAG_EXPOSURE_BIAS_VALUEContent = default;
        private static bool _TAG_EXPOSURE_BIAS_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_EXPOSURE_INDEX"/>
        /// </summary>
        public static Java.Lang.String TAG_EXPOSURE_INDEX { get { if (!_TAG_EXPOSURE_INDEXReady) { _TAG_EXPOSURE_INDEXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_EXPOSURE_INDEX"); _TAG_EXPOSURE_INDEXReady = true; } return _TAG_EXPOSURE_INDEXContent; } }
        private static Java.Lang.String _TAG_EXPOSURE_INDEXContent = default;
        private static bool _TAG_EXPOSURE_INDEXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_EXPOSURE_MODE"/>
        /// </summary>
        public static Java.Lang.String TAG_EXPOSURE_MODE { get { if (!_TAG_EXPOSURE_MODEReady) { _TAG_EXPOSURE_MODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_EXPOSURE_MODE"); _TAG_EXPOSURE_MODEReady = true; } return _TAG_EXPOSURE_MODEContent; } }
        private static Java.Lang.String _TAG_EXPOSURE_MODEContent = default;
        private static bool _TAG_EXPOSURE_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_EXPOSURE_PROGRAM"/>
        /// </summary>
        public static Java.Lang.String TAG_EXPOSURE_PROGRAM { get { if (!_TAG_EXPOSURE_PROGRAMReady) { _TAG_EXPOSURE_PROGRAMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_EXPOSURE_PROGRAM"); _TAG_EXPOSURE_PROGRAMReady = true; } return _TAG_EXPOSURE_PROGRAMContent; } }
        private static Java.Lang.String _TAG_EXPOSURE_PROGRAMContent = default;
        private static bool _TAG_EXPOSURE_PROGRAMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_EXPOSURE_TIME"/>
        /// </summary>
        public static Java.Lang.String TAG_EXPOSURE_TIME { get { if (!_TAG_EXPOSURE_TIMEReady) { _TAG_EXPOSURE_TIMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_EXPOSURE_TIME"); _TAG_EXPOSURE_TIMEReady = true; } return _TAG_EXPOSURE_TIMEContent; } }
        private static Java.Lang.String _TAG_EXPOSURE_TIMEContent = default;
        private static bool _TAG_EXPOSURE_TIMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_F_NUMBER"/>
        /// </summary>
        public static Java.Lang.String TAG_F_NUMBER { get { if (!_TAG_F_NUMBERReady) { _TAG_F_NUMBERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_F_NUMBER"); _TAG_F_NUMBERReady = true; } return _TAG_F_NUMBERContent; } }
        private static Java.Lang.String _TAG_F_NUMBERContent = default;
        private static bool _TAG_F_NUMBERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_FILE_SOURCE"/>
        /// </summary>
        public static Java.Lang.String TAG_FILE_SOURCE { get { if (!_TAG_FILE_SOURCEReady) { _TAG_FILE_SOURCEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_FILE_SOURCE"); _TAG_FILE_SOURCEReady = true; } return _TAG_FILE_SOURCEContent; } }
        private static Java.Lang.String _TAG_FILE_SOURCEContent = default;
        private static bool _TAG_FILE_SOURCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_FLASH"/>
        /// </summary>
        public static Java.Lang.String TAG_FLASH { get { if (!_TAG_FLASHReady) { _TAG_FLASHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_FLASH"); _TAG_FLASHReady = true; } return _TAG_FLASHContent; } }
        private static Java.Lang.String _TAG_FLASHContent = default;
        private static bool _TAG_FLASHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_FLASH_ENERGY"/>
        /// </summary>
        public static Java.Lang.String TAG_FLASH_ENERGY { get { if (!_TAG_FLASH_ENERGYReady) { _TAG_FLASH_ENERGYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_FLASH_ENERGY"); _TAG_FLASH_ENERGYReady = true; } return _TAG_FLASH_ENERGYContent; } }
        private static Java.Lang.String _TAG_FLASH_ENERGYContent = default;
        private static bool _TAG_FLASH_ENERGYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_FLASHPIX_VERSION"/>
        /// </summary>
        public static Java.Lang.String TAG_FLASHPIX_VERSION { get { if (!_TAG_FLASHPIX_VERSIONReady) { _TAG_FLASHPIX_VERSIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_FLASHPIX_VERSION"); _TAG_FLASHPIX_VERSIONReady = true; } return _TAG_FLASHPIX_VERSIONContent; } }
        private static Java.Lang.String _TAG_FLASHPIX_VERSIONContent = default;
        private static bool _TAG_FLASHPIX_VERSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_FOCAL_LENGTH"/>
        /// </summary>
        public static Java.Lang.String TAG_FOCAL_LENGTH { get { if (!_TAG_FOCAL_LENGTHReady) { _TAG_FOCAL_LENGTHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_FOCAL_LENGTH"); _TAG_FOCAL_LENGTHReady = true; } return _TAG_FOCAL_LENGTHContent; } }
        private static Java.Lang.String _TAG_FOCAL_LENGTHContent = default;
        private static bool _TAG_FOCAL_LENGTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_FOCAL_LENGTH_IN_35MM_FILM"/>
        /// </summary>
        public static Java.Lang.String TAG_FOCAL_LENGTH_IN_35MM_FILM { get { if (!_TAG_FOCAL_LENGTH_IN_35MM_FILMReady) { _TAG_FOCAL_LENGTH_IN_35MM_FILMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_FOCAL_LENGTH_IN_35MM_FILM"); _TAG_FOCAL_LENGTH_IN_35MM_FILMReady = true; } return _TAG_FOCAL_LENGTH_IN_35MM_FILMContent; } }
        private static Java.Lang.String _TAG_FOCAL_LENGTH_IN_35MM_FILMContent = default;
        private static bool _TAG_FOCAL_LENGTH_IN_35MM_FILMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_FOCAL_PLANE_RESOLUTION_UNIT"/>
        /// </summary>
        public static Java.Lang.String TAG_FOCAL_PLANE_RESOLUTION_UNIT { get { if (!_TAG_FOCAL_PLANE_RESOLUTION_UNITReady) { _TAG_FOCAL_PLANE_RESOLUTION_UNITContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_FOCAL_PLANE_RESOLUTION_UNIT"); _TAG_FOCAL_PLANE_RESOLUTION_UNITReady = true; } return _TAG_FOCAL_PLANE_RESOLUTION_UNITContent; } }
        private static Java.Lang.String _TAG_FOCAL_PLANE_RESOLUTION_UNITContent = default;
        private static bool _TAG_FOCAL_PLANE_RESOLUTION_UNITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_FOCAL_PLANE_X_RESOLUTION"/>
        /// </summary>
        public static Java.Lang.String TAG_FOCAL_PLANE_X_RESOLUTION { get { if (!_TAG_FOCAL_PLANE_X_RESOLUTIONReady) { _TAG_FOCAL_PLANE_X_RESOLUTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_FOCAL_PLANE_X_RESOLUTION"); _TAG_FOCAL_PLANE_X_RESOLUTIONReady = true; } return _TAG_FOCAL_PLANE_X_RESOLUTIONContent; } }
        private static Java.Lang.String _TAG_FOCAL_PLANE_X_RESOLUTIONContent = default;
        private static bool _TAG_FOCAL_PLANE_X_RESOLUTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_FOCAL_PLANE_Y_RESOLUTION"/>
        /// </summary>
        public static Java.Lang.String TAG_FOCAL_PLANE_Y_RESOLUTION { get { if (!_TAG_FOCAL_PLANE_Y_RESOLUTIONReady) { _TAG_FOCAL_PLANE_Y_RESOLUTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_FOCAL_PLANE_Y_RESOLUTION"); _TAG_FOCAL_PLANE_Y_RESOLUTIONReady = true; } return _TAG_FOCAL_PLANE_Y_RESOLUTIONContent; } }
        private static Java.Lang.String _TAG_FOCAL_PLANE_Y_RESOLUTIONContent = default;
        private static bool _TAG_FOCAL_PLANE_Y_RESOLUTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GAIN_CONTROL"/>
        /// </summary>
        public static Java.Lang.String TAG_GAIN_CONTROL { get { if (!_TAG_GAIN_CONTROLReady) { _TAG_GAIN_CONTROLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_GAIN_CONTROL"); _TAG_GAIN_CONTROLReady = true; } return _TAG_GAIN_CONTROLContent; } }
        private static Java.Lang.String _TAG_GAIN_CONTROLContent = default;
        private static bool _TAG_GAIN_CONTROLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_ALTITUDE"/>
        /// </summary>
        public static Java.Lang.String TAG_GPS_ALTITUDE { get { if (!_TAG_GPS_ALTITUDEReady) { _TAG_GPS_ALTITUDEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_GPS_ALTITUDE"); _TAG_GPS_ALTITUDEReady = true; } return _TAG_GPS_ALTITUDEContent; } }
        private static Java.Lang.String _TAG_GPS_ALTITUDEContent = default;
        private static bool _TAG_GPS_ALTITUDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_ALTITUDE_REF"/>
        /// </summary>
        public static Java.Lang.String TAG_GPS_ALTITUDE_REF { get { if (!_TAG_GPS_ALTITUDE_REFReady) { _TAG_GPS_ALTITUDE_REFContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_GPS_ALTITUDE_REF"); _TAG_GPS_ALTITUDE_REFReady = true; } return _TAG_GPS_ALTITUDE_REFContent; } }
        private static Java.Lang.String _TAG_GPS_ALTITUDE_REFContent = default;
        private static bool _TAG_GPS_ALTITUDE_REFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_AREA_INFORMATION"/>
        /// </summary>
        public static Java.Lang.String TAG_GPS_AREA_INFORMATION { get { if (!_TAG_GPS_AREA_INFORMATIONReady) { _TAG_GPS_AREA_INFORMATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_GPS_AREA_INFORMATION"); _TAG_GPS_AREA_INFORMATIONReady = true; } return _TAG_GPS_AREA_INFORMATIONContent; } }
        private static Java.Lang.String _TAG_GPS_AREA_INFORMATIONContent = default;
        private static bool _TAG_GPS_AREA_INFORMATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_DATESTAMP"/>
        /// </summary>
        public static Java.Lang.String TAG_GPS_DATESTAMP { get { if (!_TAG_GPS_DATESTAMPReady) { _TAG_GPS_DATESTAMPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_GPS_DATESTAMP"); _TAG_GPS_DATESTAMPReady = true; } return _TAG_GPS_DATESTAMPContent; } }
        private static Java.Lang.String _TAG_GPS_DATESTAMPContent = default;
        private static bool _TAG_GPS_DATESTAMPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_DEST_BEARING"/>
        /// </summary>
        public static Java.Lang.String TAG_GPS_DEST_BEARING { get { if (!_TAG_GPS_DEST_BEARINGReady) { _TAG_GPS_DEST_BEARINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_GPS_DEST_BEARING"); _TAG_GPS_DEST_BEARINGReady = true; } return _TAG_GPS_DEST_BEARINGContent; } }
        private static Java.Lang.String _TAG_GPS_DEST_BEARINGContent = default;
        private static bool _TAG_GPS_DEST_BEARINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_DEST_BEARING_REF"/>
        /// </summary>
        public static Java.Lang.String TAG_GPS_DEST_BEARING_REF { get { if (!_TAG_GPS_DEST_BEARING_REFReady) { _TAG_GPS_DEST_BEARING_REFContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_GPS_DEST_BEARING_REF"); _TAG_GPS_DEST_BEARING_REFReady = true; } return _TAG_GPS_DEST_BEARING_REFContent; } }
        private static Java.Lang.String _TAG_GPS_DEST_BEARING_REFContent = default;
        private static bool _TAG_GPS_DEST_BEARING_REFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_DEST_DISTANCE"/>
        /// </summary>
        public static Java.Lang.String TAG_GPS_DEST_DISTANCE { get { if (!_TAG_GPS_DEST_DISTANCEReady) { _TAG_GPS_DEST_DISTANCEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_GPS_DEST_DISTANCE"); _TAG_GPS_DEST_DISTANCEReady = true; } return _TAG_GPS_DEST_DISTANCEContent; } }
        private static Java.Lang.String _TAG_GPS_DEST_DISTANCEContent = default;
        private static bool _TAG_GPS_DEST_DISTANCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_DEST_DISTANCE_REF"/>
        /// </summary>
        public static Java.Lang.String TAG_GPS_DEST_DISTANCE_REF { get { if (!_TAG_GPS_DEST_DISTANCE_REFReady) { _TAG_GPS_DEST_DISTANCE_REFContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_GPS_DEST_DISTANCE_REF"); _TAG_GPS_DEST_DISTANCE_REFReady = true; } return _TAG_GPS_DEST_DISTANCE_REFContent; } }
        private static Java.Lang.String _TAG_GPS_DEST_DISTANCE_REFContent = default;
        private static bool _TAG_GPS_DEST_DISTANCE_REFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_DEST_LATITUDE"/>
        /// </summary>
        public static Java.Lang.String TAG_GPS_DEST_LATITUDE { get { if (!_TAG_GPS_DEST_LATITUDEReady) { _TAG_GPS_DEST_LATITUDEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_GPS_DEST_LATITUDE"); _TAG_GPS_DEST_LATITUDEReady = true; } return _TAG_GPS_DEST_LATITUDEContent; } }
        private static Java.Lang.String _TAG_GPS_DEST_LATITUDEContent = default;
        private static bool _TAG_GPS_DEST_LATITUDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_DEST_LATITUDE_REF"/>
        /// </summary>
        public static Java.Lang.String TAG_GPS_DEST_LATITUDE_REF { get { if (!_TAG_GPS_DEST_LATITUDE_REFReady) { _TAG_GPS_DEST_LATITUDE_REFContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_GPS_DEST_LATITUDE_REF"); _TAG_GPS_DEST_LATITUDE_REFReady = true; } return _TAG_GPS_DEST_LATITUDE_REFContent; } }
        private static Java.Lang.String _TAG_GPS_DEST_LATITUDE_REFContent = default;
        private static bool _TAG_GPS_DEST_LATITUDE_REFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_DEST_LONGITUDE"/>
        /// </summary>
        public static Java.Lang.String TAG_GPS_DEST_LONGITUDE { get { if (!_TAG_GPS_DEST_LONGITUDEReady) { _TAG_GPS_DEST_LONGITUDEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_GPS_DEST_LONGITUDE"); _TAG_GPS_DEST_LONGITUDEReady = true; } return _TAG_GPS_DEST_LONGITUDEContent; } }
        private static Java.Lang.String _TAG_GPS_DEST_LONGITUDEContent = default;
        private static bool _TAG_GPS_DEST_LONGITUDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_DEST_LONGITUDE_REF"/>
        /// </summary>
        public static Java.Lang.String TAG_GPS_DEST_LONGITUDE_REF { get { if (!_TAG_GPS_DEST_LONGITUDE_REFReady) { _TAG_GPS_DEST_LONGITUDE_REFContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_GPS_DEST_LONGITUDE_REF"); _TAG_GPS_DEST_LONGITUDE_REFReady = true; } return _TAG_GPS_DEST_LONGITUDE_REFContent; } }
        private static Java.Lang.String _TAG_GPS_DEST_LONGITUDE_REFContent = default;
        private static bool _TAG_GPS_DEST_LONGITUDE_REFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_DIFFERENTIAL"/>
        /// </summary>
        public static Java.Lang.String TAG_GPS_DIFFERENTIAL { get { if (!_TAG_GPS_DIFFERENTIALReady) { _TAG_GPS_DIFFERENTIALContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_GPS_DIFFERENTIAL"); _TAG_GPS_DIFFERENTIALReady = true; } return _TAG_GPS_DIFFERENTIALContent; } }
        private static Java.Lang.String _TAG_GPS_DIFFERENTIALContent = default;
        private static bool _TAG_GPS_DIFFERENTIALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_DOP"/>
        /// </summary>
        public static Java.Lang.String TAG_GPS_DOP { get { if (!_TAG_GPS_DOPReady) { _TAG_GPS_DOPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_GPS_DOP"); _TAG_GPS_DOPReady = true; } return _TAG_GPS_DOPContent; } }
        private static Java.Lang.String _TAG_GPS_DOPContent = default;
        private static bool _TAG_GPS_DOPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_IMG_DIRECTION"/>
        /// </summary>
        public static Java.Lang.String TAG_GPS_IMG_DIRECTION { get { if (!_TAG_GPS_IMG_DIRECTIONReady) { _TAG_GPS_IMG_DIRECTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_GPS_IMG_DIRECTION"); _TAG_GPS_IMG_DIRECTIONReady = true; } return _TAG_GPS_IMG_DIRECTIONContent; } }
        private static Java.Lang.String _TAG_GPS_IMG_DIRECTIONContent = default;
        private static bool _TAG_GPS_IMG_DIRECTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_IMG_DIRECTION_REF"/>
        /// </summary>
        public static Java.Lang.String TAG_GPS_IMG_DIRECTION_REF { get { if (!_TAG_GPS_IMG_DIRECTION_REFReady) { _TAG_GPS_IMG_DIRECTION_REFContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_GPS_IMG_DIRECTION_REF"); _TAG_GPS_IMG_DIRECTION_REFReady = true; } return _TAG_GPS_IMG_DIRECTION_REFContent; } }
        private static Java.Lang.String _TAG_GPS_IMG_DIRECTION_REFContent = default;
        private static bool _TAG_GPS_IMG_DIRECTION_REFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_LATITUDE"/>
        /// </summary>
        public static Java.Lang.String TAG_GPS_LATITUDE { get { if (!_TAG_GPS_LATITUDEReady) { _TAG_GPS_LATITUDEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_GPS_LATITUDE"); _TAG_GPS_LATITUDEReady = true; } return _TAG_GPS_LATITUDEContent; } }
        private static Java.Lang.String _TAG_GPS_LATITUDEContent = default;
        private static bool _TAG_GPS_LATITUDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_LATITUDE_REF"/>
        /// </summary>
        public static Java.Lang.String TAG_GPS_LATITUDE_REF { get { if (!_TAG_GPS_LATITUDE_REFReady) { _TAG_GPS_LATITUDE_REFContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_GPS_LATITUDE_REF"); _TAG_GPS_LATITUDE_REFReady = true; } return _TAG_GPS_LATITUDE_REFContent; } }
        private static Java.Lang.String _TAG_GPS_LATITUDE_REFContent = default;
        private static bool _TAG_GPS_LATITUDE_REFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_LONGITUDE"/>
        /// </summary>
        public static Java.Lang.String TAG_GPS_LONGITUDE { get { if (!_TAG_GPS_LONGITUDEReady) { _TAG_GPS_LONGITUDEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_GPS_LONGITUDE"); _TAG_GPS_LONGITUDEReady = true; } return _TAG_GPS_LONGITUDEContent; } }
        private static Java.Lang.String _TAG_GPS_LONGITUDEContent = default;
        private static bool _TAG_GPS_LONGITUDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_LONGITUDE_REF"/>
        /// </summary>
        public static Java.Lang.String TAG_GPS_LONGITUDE_REF { get { if (!_TAG_GPS_LONGITUDE_REFReady) { _TAG_GPS_LONGITUDE_REFContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_GPS_LONGITUDE_REF"); _TAG_GPS_LONGITUDE_REFReady = true; } return _TAG_GPS_LONGITUDE_REFContent; } }
        private static Java.Lang.String _TAG_GPS_LONGITUDE_REFContent = default;
        private static bool _TAG_GPS_LONGITUDE_REFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_MAP_DATUM"/>
        /// </summary>
        public static Java.Lang.String TAG_GPS_MAP_DATUM { get { if (!_TAG_GPS_MAP_DATUMReady) { _TAG_GPS_MAP_DATUMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_GPS_MAP_DATUM"); _TAG_GPS_MAP_DATUMReady = true; } return _TAG_GPS_MAP_DATUMContent; } }
        private static Java.Lang.String _TAG_GPS_MAP_DATUMContent = default;
        private static bool _TAG_GPS_MAP_DATUMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_MEASURE_MODE"/>
        /// </summary>
        public static Java.Lang.String TAG_GPS_MEASURE_MODE { get { if (!_TAG_GPS_MEASURE_MODEReady) { _TAG_GPS_MEASURE_MODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_GPS_MEASURE_MODE"); _TAG_GPS_MEASURE_MODEReady = true; } return _TAG_GPS_MEASURE_MODEContent; } }
        private static Java.Lang.String _TAG_GPS_MEASURE_MODEContent = default;
        private static bool _TAG_GPS_MEASURE_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_PROCESSING_METHOD"/>
        /// </summary>
        public static Java.Lang.String TAG_GPS_PROCESSING_METHOD { get { if (!_TAG_GPS_PROCESSING_METHODReady) { _TAG_GPS_PROCESSING_METHODContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_GPS_PROCESSING_METHOD"); _TAG_GPS_PROCESSING_METHODReady = true; } return _TAG_GPS_PROCESSING_METHODContent; } }
        private static Java.Lang.String _TAG_GPS_PROCESSING_METHODContent = default;
        private static bool _TAG_GPS_PROCESSING_METHODReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_SATELLITES"/>
        /// </summary>
        public static Java.Lang.String TAG_GPS_SATELLITES { get { if (!_TAG_GPS_SATELLITESReady) { _TAG_GPS_SATELLITESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_GPS_SATELLITES"); _TAG_GPS_SATELLITESReady = true; } return _TAG_GPS_SATELLITESContent; } }
        private static Java.Lang.String _TAG_GPS_SATELLITESContent = default;
        private static bool _TAG_GPS_SATELLITESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_SPEED"/>
        /// </summary>
        public static Java.Lang.String TAG_GPS_SPEED { get { if (!_TAG_GPS_SPEEDReady) { _TAG_GPS_SPEEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_GPS_SPEED"); _TAG_GPS_SPEEDReady = true; } return _TAG_GPS_SPEEDContent; } }
        private static Java.Lang.String _TAG_GPS_SPEEDContent = default;
        private static bool _TAG_GPS_SPEEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_SPEED_REF"/>
        /// </summary>
        public static Java.Lang.String TAG_GPS_SPEED_REF { get { if (!_TAG_GPS_SPEED_REFReady) { _TAG_GPS_SPEED_REFContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_GPS_SPEED_REF"); _TAG_GPS_SPEED_REFReady = true; } return _TAG_GPS_SPEED_REFContent; } }
        private static Java.Lang.String _TAG_GPS_SPEED_REFContent = default;
        private static bool _TAG_GPS_SPEED_REFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_STATUS"/>
        /// </summary>
        public static Java.Lang.String TAG_GPS_STATUS { get { if (!_TAG_GPS_STATUSReady) { _TAG_GPS_STATUSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_GPS_STATUS"); _TAG_GPS_STATUSReady = true; } return _TAG_GPS_STATUSContent; } }
        private static Java.Lang.String _TAG_GPS_STATUSContent = default;
        private static bool _TAG_GPS_STATUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_TIMESTAMP"/>
        /// </summary>
        public static Java.Lang.String TAG_GPS_TIMESTAMP { get { if (!_TAG_GPS_TIMESTAMPReady) { _TAG_GPS_TIMESTAMPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_GPS_TIMESTAMP"); _TAG_GPS_TIMESTAMPReady = true; } return _TAG_GPS_TIMESTAMPContent; } }
        private static Java.Lang.String _TAG_GPS_TIMESTAMPContent = default;
        private static bool _TAG_GPS_TIMESTAMPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_TRACK"/>
        /// </summary>
        public static Java.Lang.String TAG_GPS_TRACK { get { if (!_TAG_GPS_TRACKReady) { _TAG_GPS_TRACKContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_GPS_TRACK"); _TAG_GPS_TRACKReady = true; } return _TAG_GPS_TRACKContent; } }
        private static Java.Lang.String _TAG_GPS_TRACKContent = default;
        private static bool _TAG_GPS_TRACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_TRACK_REF"/>
        /// </summary>
        public static Java.Lang.String TAG_GPS_TRACK_REF { get { if (!_TAG_GPS_TRACK_REFReady) { _TAG_GPS_TRACK_REFContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_GPS_TRACK_REF"); _TAG_GPS_TRACK_REFReady = true; } return _TAG_GPS_TRACK_REFContent; } }
        private static Java.Lang.String _TAG_GPS_TRACK_REFContent = default;
        private static bool _TAG_GPS_TRACK_REFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_VERSION_ID"/>
        /// </summary>
        public static Java.Lang.String TAG_GPS_VERSION_ID { get { if (!_TAG_GPS_VERSION_IDReady) { _TAG_GPS_VERSION_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_GPS_VERSION_ID"); _TAG_GPS_VERSION_IDReady = true; } return _TAG_GPS_VERSION_IDContent; } }
        private static Java.Lang.String _TAG_GPS_VERSION_IDContent = default;
        private static bool _TAG_GPS_VERSION_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_IMAGE_DESCRIPTION"/>
        /// </summary>
        public static Java.Lang.String TAG_IMAGE_DESCRIPTION { get { if (!_TAG_IMAGE_DESCRIPTIONReady) { _TAG_IMAGE_DESCRIPTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_IMAGE_DESCRIPTION"); _TAG_IMAGE_DESCRIPTIONReady = true; } return _TAG_IMAGE_DESCRIPTIONContent; } }
        private static Java.Lang.String _TAG_IMAGE_DESCRIPTIONContent = default;
        private static bool _TAG_IMAGE_DESCRIPTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_IMAGE_LENGTH"/>
        /// </summary>
        public static Java.Lang.String TAG_IMAGE_LENGTH { get { if (!_TAG_IMAGE_LENGTHReady) { _TAG_IMAGE_LENGTHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_IMAGE_LENGTH"); _TAG_IMAGE_LENGTHReady = true; } return _TAG_IMAGE_LENGTHContent; } }
        private static Java.Lang.String _TAG_IMAGE_LENGTHContent = default;
        private static bool _TAG_IMAGE_LENGTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_IMAGE_UNIQUE_ID"/>
        /// </summary>
        public static Java.Lang.String TAG_IMAGE_UNIQUE_ID { get { if (!_TAG_IMAGE_UNIQUE_IDReady) { _TAG_IMAGE_UNIQUE_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_IMAGE_UNIQUE_ID"); _TAG_IMAGE_UNIQUE_IDReady = true; } return _TAG_IMAGE_UNIQUE_IDContent; } }
        private static Java.Lang.String _TAG_IMAGE_UNIQUE_IDContent = default;
        private static bool _TAG_IMAGE_UNIQUE_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_IMAGE_WIDTH"/>
        /// </summary>
        public static Java.Lang.String TAG_IMAGE_WIDTH { get { if (!_TAG_IMAGE_WIDTHReady) { _TAG_IMAGE_WIDTHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_IMAGE_WIDTH"); _TAG_IMAGE_WIDTHReady = true; } return _TAG_IMAGE_WIDTHContent; } }
        private static Java.Lang.String _TAG_IMAGE_WIDTHContent = default;
        private static bool _TAG_IMAGE_WIDTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_INTEROPERABILITY_INDEX"/>
        /// </summary>
        public static Java.Lang.String TAG_INTEROPERABILITY_INDEX { get { if (!_TAG_INTEROPERABILITY_INDEXReady) { _TAG_INTEROPERABILITY_INDEXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_INTEROPERABILITY_INDEX"); _TAG_INTEROPERABILITY_INDEXReady = true; } return _TAG_INTEROPERABILITY_INDEXContent; } }
        private static Java.Lang.String _TAG_INTEROPERABILITY_INDEXContent = default;
        private static bool _TAG_INTEROPERABILITY_INDEXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_ISO"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String TAG_ISO { get { if (!_TAG_ISOReady) { _TAG_ISOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_ISO"); _TAG_ISOReady = true; } return _TAG_ISOContent; } }
        private static Java.Lang.String _TAG_ISOContent = default;
        private static bool _TAG_ISOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_ISO_SPEED_RATINGS"/>
        /// </summary>
        public static Java.Lang.String TAG_ISO_SPEED_RATINGS { get { if (!_TAG_ISO_SPEED_RATINGSReady) { _TAG_ISO_SPEED_RATINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_ISO_SPEED_RATINGS"); _TAG_ISO_SPEED_RATINGSReady = true; } return _TAG_ISO_SPEED_RATINGSContent; } }
        private static Java.Lang.String _TAG_ISO_SPEED_RATINGSContent = default;
        private static bool _TAG_ISO_SPEED_RATINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_JPEG_INTERCHANGE_FORMAT"/>
        /// </summary>
        public static Java.Lang.String TAG_JPEG_INTERCHANGE_FORMAT { get { if (!_TAG_JPEG_INTERCHANGE_FORMATReady) { _TAG_JPEG_INTERCHANGE_FORMATContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_JPEG_INTERCHANGE_FORMAT"); _TAG_JPEG_INTERCHANGE_FORMATReady = true; } return _TAG_JPEG_INTERCHANGE_FORMATContent; } }
        private static Java.Lang.String _TAG_JPEG_INTERCHANGE_FORMATContent = default;
        private static bool _TAG_JPEG_INTERCHANGE_FORMATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_JPEG_INTERCHANGE_FORMAT_LENGTH"/>
        /// </summary>
        public static Java.Lang.String TAG_JPEG_INTERCHANGE_FORMAT_LENGTH { get { if (!_TAG_JPEG_INTERCHANGE_FORMAT_LENGTHReady) { _TAG_JPEG_INTERCHANGE_FORMAT_LENGTHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_JPEG_INTERCHANGE_FORMAT_LENGTH"); _TAG_JPEG_INTERCHANGE_FORMAT_LENGTHReady = true; } return _TAG_JPEG_INTERCHANGE_FORMAT_LENGTHContent; } }
        private static Java.Lang.String _TAG_JPEG_INTERCHANGE_FORMAT_LENGTHContent = default;
        private static bool _TAG_JPEG_INTERCHANGE_FORMAT_LENGTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_LIGHT_SOURCE"/>
        /// </summary>
        public static Java.Lang.String TAG_LIGHT_SOURCE { get { if (!_TAG_LIGHT_SOURCEReady) { _TAG_LIGHT_SOURCEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_LIGHT_SOURCE"); _TAG_LIGHT_SOURCEReady = true; } return _TAG_LIGHT_SOURCEContent; } }
        private static Java.Lang.String _TAG_LIGHT_SOURCEContent = default;
        private static bool _TAG_LIGHT_SOURCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_MAKE"/>
        /// </summary>
        public static Java.Lang.String TAG_MAKE { get { if (!_TAG_MAKEReady) { _TAG_MAKEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_MAKE"); _TAG_MAKEReady = true; } return _TAG_MAKEContent; } }
        private static Java.Lang.String _TAG_MAKEContent = default;
        private static bool _TAG_MAKEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_MAKER_NOTE"/>
        /// </summary>
        public static Java.Lang.String TAG_MAKER_NOTE { get { if (!_TAG_MAKER_NOTEReady) { _TAG_MAKER_NOTEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_MAKER_NOTE"); _TAG_MAKER_NOTEReady = true; } return _TAG_MAKER_NOTEContent; } }
        private static Java.Lang.String _TAG_MAKER_NOTEContent = default;
        private static bool _TAG_MAKER_NOTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_MAX_APERTURE_VALUE"/>
        /// </summary>
        public static Java.Lang.String TAG_MAX_APERTURE_VALUE { get { if (!_TAG_MAX_APERTURE_VALUEReady) { _TAG_MAX_APERTURE_VALUEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_MAX_APERTURE_VALUE"); _TAG_MAX_APERTURE_VALUEReady = true; } return _TAG_MAX_APERTURE_VALUEContent; } }
        private static Java.Lang.String _TAG_MAX_APERTURE_VALUEContent = default;
        private static bool _TAG_MAX_APERTURE_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_METERING_MODE"/>
        /// </summary>
        public static Java.Lang.String TAG_METERING_MODE { get { if (!_TAG_METERING_MODEReady) { _TAG_METERING_MODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_METERING_MODE"); _TAG_METERING_MODEReady = true; } return _TAG_METERING_MODEContent; } }
        private static Java.Lang.String _TAG_METERING_MODEContent = default;
        private static bool _TAG_METERING_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_MODEL"/>
        /// </summary>
        public static Java.Lang.String TAG_MODEL { get { if (!_TAG_MODELReady) { _TAG_MODELContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_MODEL"); _TAG_MODELReady = true; } return _TAG_MODELContent; } }
        private static Java.Lang.String _TAG_MODELContent = default;
        private static bool _TAG_MODELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_NEW_SUBFILE_TYPE"/>
        /// </summary>
        public static Java.Lang.String TAG_NEW_SUBFILE_TYPE { get { if (!_TAG_NEW_SUBFILE_TYPEReady) { _TAG_NEW_SUBFILE_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_NEW_SUBFILE_TYPE"); _TAG_NEW_SUBFILE_TYPEReady = true; } return _TAG_NEW_SUBFILE_TYPEContent; } }
        private static Java.Lang.String _TAG_NEW_SUBFILE_TYPEContent = default;
        private static bool _TAG_NEW_SUBFILE_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_OECF"/>
        /// </summary>
        public static Java.Lang.String TAG_OECF { get { if (!_TAG_OECFReady) { _TAG_OECFContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_OECF"); _TAG_OECFReady = true; } return _TAG_OECFContent; } }
        private static Java.Lang.String _TAG_OECFContent = default;
        private static bool _TAG_OECFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_OFFSET_TIME"/>
        /// </summary>
        public static Java.Lang.String TAG_OFFSET_TIME { get { if (!_TAG_OFFSET_TIMEReady) { _TAG_OFFSET_TIMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_OFFSET_TIME"); _TAG_OFFSET_TIMEReady = true; } return _TAG_OFFSET_TIMEContent; } }
        private static Java.Lang.String _TAG_OFFSET_TIMEContent = default;
        private static bool _TAG_OFFSET_TIMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_OFFSET_TIME_DIGITIZED"/>
        /// </summary>
        public static Java.Lang.String TAG_OFFSET_TIME_DIGITIZED { get { if (!_TAG_OFFSET_TIME_DIGITIZEDReady) { _TAG_OFFSET_TIME_DIGITIZEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_OFFSET_TIME_DIGITIZED"); _TAG_OFFSET_TIME_DIGITIZEDReady = true; } return _TAG_OFFSET_TIME_DIGITIZEDContent; } }
        private static Java.Lang.String _TAG_OFFSET_TIME_DIGITIZEDContent = default;
        private static bool _TAG_OFFSET_TIME_DIGITIZEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_OFFSET_TIME_ORIGINAL"/>
        /// </summary>
        public static Java.Lang.String TAG_OFFSET_TIME_ORIGINAL { get { if (!_TAG_OFFSET_TIME_ORIGINALReady) { _TAG_OFFSET_TIME_ORIGINALContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_OFFSET_TIME_ORIGINAL"); _TAG_OFFSET_TIME_ORIGINALReady = true; } return _TAG_OFFSET_TIME_ORIGINALContent; } }
        private static Java.Lang.String _TAG_OFFSET_TIME_ORIGINALContent = default;
        private static bool _TAG_OFFSET_TIME_ORIGINALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_ORF_ASPECT_FRAME"/>
        /// </summary>
        public static Java.Lang.String TAG_ORF_ASPECT_FRAME { get { if (!_TAG_ORF_ASPECT_FRAMEReady) { _TAG_ORF_ASPECT_FRAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_ORF_ASPECT_FRAME"); _TAG_ORF_ASPECT_FRAMEReady = true; } return _TAG_ORF_ASPECT_FRAMEContent; } }
        private static Java.Lang.String _TAG_ORF_ASPECT_FRAMEContent = default;
        private static bool _TAG_ORF_ASPECT_FRAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_ORF_PREVIEW_IMAGE_LENGTH"/>
        /// </summary>
        public static Java.Lang.String TAG_ORF_PREVIEW_IMAGE_LENGTH { get { if (!_TAG_ORF_PREVIEW_IMAGE_LENGTHReady) { _TAG_ORF_PREVIEW_IMAGE_LENGTHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_ORF_PREVIEW_IMAGE_LENGTH"); _TAG_ORF_PREVIEW_IMAGE_LENGTHReady = true; } return _TAG_ORF_PREVIEW_IMAGE_LENGTHContent; } }
        private static Java.Lang.String _TAG_ORF_PREVIEW_IMAGE_LENGTHContent = default;
        private static bool _TAG_ORF_PREVIEW_IMAGE_LENGTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_ORF_PREVIEW_IMAGE_START"/>
        /// </summary>
        public static Java.Lang.String TAG_ORF_PREVIEW_IMAGE_START { get { if (!_TAG_ORF_PREVIEW_IMAGE_STARTReady) { _TAG_ORF_PREVIEW_IMAGE_STARTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_ORF_PREVIEW_IMAGE_START"); _TAG_ORF_PREVIEW_IMAGE_STARTReady = true; } return _TAG_ORF_PREVIEW_IMAGE_STARTContent; } }
        private static Java.Lang.String _TAG_ORF_PREVIEW_IMAGE_STARTContent = default;
        private static bool _TAG_ORF_PREVIEW_IMAGE_STARTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_ORF_THUMBNAIL_IMAGE"/>
        /// </summary>
        public static Java.Lang.String TAG_ORF_THUMBNAIL_IMAGE { get { if (!_TAG_ORF_THUMBNAIL_IMAGEReady) { _TAG_ORF_THUMBNAIL_IMAGEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_ORF_THUMBNAIL_IMAGE"); _TAG_ORF_THUMBNAIL_IMAGEReady = true; } return _TAG_ORF_THUMBNAIL_IMAGEContent; } }
        private static Java.Lang.String _TAG_ORF_THUMBNAIL_IMAGEContent = default;
        private static bool _TAG_ORF_THUMBNAIL_IMAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_ORIENTATION"/>
        /// </summary>
        public static Java.Lang.String TAG_ORIENTATION { get { if (!_TAG_ORIENTATIONReady) { _TAG_ORIENTATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_ORIENTATION"); _TAG_ORIENTATIONReady = true; } return _TAG_ORIENTATIONContent; } }
        private static Java.Lang.String _TAG_ORIENTATIONContent = default;
        private static bool _TAG_ORIENTATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_PHOTOMETRIC_INTERPRETATION"/>
        /// </summary>
        public static Java.Lang.String TAG_PHOTOMETRIC_INTERPRETATION { get { if (!_TAG_PHOTOMETRIC_INTERPRETATIONReady) { _TAG_PHOTOMETRIC_INTERPRETATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_PHOTOMETRIC_INTERPRETATION"); _TAG_PHOTOMETRIC_INTERPRETATIONReady = true; } return _TAG_PHOTOMETRIC_INTERPRETATIONContent; } }
        private static Java.Lang.String _TAG_PHOTOMETRIC_INTERPRETATIONContent = default;
        private static bool _TAG_PHOTOMETRIC_INTERPRETATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_PIXEL_X_DIMENSION"/>
        /// </summary>
        public static Java.Lang.String TAG_PIXEL_X_DIMENSION { get { if (!_TAG_PIXEL_X_DIMENSIONReady) { _TAG_PIXEL_X_DIMENSIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_PIXEL_X_DIMENSION"); _TAG_PIXEL_X_DIMENSIONReady = true; } return _TAG_PIXEL_X_DIMENSIONContent; } }
        private static Java.Lang.String _TAG_PIXEL_X_DIMENSIONContent = default;
        private static bool _TAG_PIXEL_X_DIMENSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_PIXEL_Y_DIMENSION"/>
        /// </summary>
        public static Java.Lang.String TAG_PIXEL_Y_DIMENSION { get { if (!_TAG_PIXEL_Y_DIMENSIONReady) { _TAG_PIXEL_Y_DIMENSIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_PIXEL_Y_DIMENSION"); _TAG_PIXEL_Y_DIMENSIONReady = true; } return _TAG_PIXEL_Y_DIMENSIONContent; } }
        private static Java.Lang.String _TAG_PIXEL_Y_DIMENSIONContent = default;
        private static bool _TAG_PIXEL_Y_DIMENSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_PLANAR_CONFIGURATION"/>
        /// </summary>
        public static Java.Lang.String TAG_PLANAR_CONFIGURATION { get { if (!_TAG_PLANAR_CONFIGURATIONReady) { _TAG_PLANAR_CONFIGURATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_PLANAR_CONFIGURATION"); _TAG_PLANAR_CONFIGURATIONReady = true; } return _TAG_PLANAR_CONFIGURATIONContent; } }
        private static Java.Lang.String _TAG_PLANAR_CONFIGURATIONContent = default;
        private static bool _TAG_PLANAR_CONFIGURATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_PRIMARY_CHROMATICITIES"/>
        /// </summary>
        public static Java.Lang.String TAG_PRIMARY_CHROMATICITIES { get { if (!_TAG_PRIMARY_CHROMATICITIESReady) { _TAG_PRIMARY_CHROMATICITIESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_PRIMARY_CHROMATICITIES"); _TAG_PRIMARY_CHROMATICITIESReady = true; } return _TAG_PRIMARY_CHROMATICITIESContent; } }
        private static Java.Lang.String _TAG_PRIMARY_CHROMATICITIESContent = default;
        private static bool _TAG_PRIMARY_CHROMATICITIESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_REFERENCE_BLACK_WHITE"/>
        /// </summary>
        public static Java.Lang.String TAG_REFERENCE_BLACK_WHITE { get { if (!_TAG_REFERENCE_BLACK_WHITEReady) { _TAG_REFERENCE_BLACK_WHITEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_REFERENCE_BLACK_WHITE"); _TAG_REFERENCE_BLACK_WHITEReady = true; } return _TAG_REFERENCE_BLACK_WHITEContent; } }
        private static Java.Lang.String _TAG_REFERENCE_BLACK_WHITEContent = default;
        private static bool _TAG_REFERENCE_BLACK_WHITEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_RELATED_SOUND_FILE"/>
        /// </summary>
        public static Java.Lang.String TAG_RELATED_SOUND_FILE { get { if (!_TAG_RELATED_SOUND_FILEReady) { _TAG_RELATED_SOUND_FILEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_RELATED_SOUND_FILE"); _TAG_RELATED_SOUND_FILEReady = true; } return _TAG_RELATED_SOUND_FILEContent; } }
        private static Java.Lang.String _TAG_RELATED_SOUND_FILEContent = default;
        private static bool _TAG_RELATED_SOUND_FILEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_RESOLUTION_UNIT"/>
        /// </summary>
        public static Java.Lang.String TAG_RESOLUTION_UNIT { get { if (!_TAG_RESOLUTION_UNITReady) { _TAG_RESOLUTION_UNITContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_RESOLUTION_UNIT"); _TAG_RESOLUTION_UNITReady = true; } return _TAG_RESOLUTION_UNITContent; } }
        private static Java.Lang.String _TAG_RESOLUTION_UNITContent = default;
        private static bool _TAG_RESOLUTION_UNITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_ROWS_PER_STRIP"/>
        /// </summary>
        public static Java.Lang.String TAG_ROWS_PER_STRIP { get { if (!_TAG_ROWS_PER_STRIPReady) { _TAG_ROWS_PER_STRIPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_ROWS_PER_STRIP"); _TAG_ROWS_PER_STRIPReady = true; } return _TAG_ROWS_PER_STRIPContent; } }
        private static Java.Lang.String _TAG_ROWS_PER_STRIPContent = default;
        private static bool _TAG_ROWS_PER_STRIPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_RW2_ISO"/>
        /// </summary>
        public static Java.Lang.String TAG_RW2_ISO { get { if (!_TAG_RW2_ISOReady) { _TAG_RW2_ISOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_RW2_ISO"); _TAG_RW2_ISOReady = true; } return _TAG_RW2_ISOContent; } }
        private static Java.Lang.String _TAG_RW2_ISOContent = default;
        private static bool _TAG_RW2_ISOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_RW2_JPG_FROM_RAW"/>
        /// </summary>
        public static Java.Lang.String TAG_RW2_JPG_FROM_RAW { get { if (!_TAG_RW2_JPG_FROM_RAWReady) { _TAG_RW2_JPG_FROM_RAWContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_RW2_JPG_FROM_RAW"); _TAG_RW2_JPG_FROM_RAWReady = true; } return _TAG_RW2_JPG_FROM_RAWContent; } }
        private static Java.Lang.String _TAG_RW2_JPG_FROM_RAWContent = default;
        private static bool _TAG_RW2_JPG_FROM_RAWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_RW2_SENSOR_BOTTOM_BORDER"/>
        /// </summary>
        public static Java.Lang.String TAG_RW2_SENSOR_BOTTOM_BORDER { get { if (!_TAG_RW2_SENSOR_BOTTOM_BORDERReady) { _TAG_RW2_SENSOR_BOTTOM_BORDERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_RW2_SENSOR_BOTTOM_BORDER"); _TAG_RW2_SENSOR_BOTTOM_BORDERReady = true; } return _TAG_RW2_SENSOR_BOTTOM_BORDERContent; } }
        private static Java.Lang.String _TAG_RW2_SENSOR_BOTTOM_BORDERContent = default;
        private static bool _TAG_RW2_SENSOR_BOTTOM_BORDERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_RW2_SENSOR_LEFT_BORDER"/>
        /// </summary>
        public static Java.Lang.String TAG_RW2_SENSOR_LEFT_BORDER { get { if (!_TAG_RW2_SENSOR_LEFT_BORDERReady) { _TAG_RW2_SENSOR_LEFT_BORDERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_RW2_SENSOR_LEFT_BORDER"); _TAG_RW2_SENSOR_LEFT_BORDERReady = true; } return _TAG_RW2_SENSOR_LEFT_BORDERContent; } }
        private static Java.Lang.String _TAG_RW2_SENSOR_LEFT_BORDERContent = default;
        private static bool _TAG_RW2_SENSOR_LEFT_BORDERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_RW2_SENSOR_RIGHT_BORDER"/>
        /// </summary>
        public static Java.Lang.String TAG_RW2_SENSOR_RIGHT_BORDER { get { if (!_TAG_RW2_SENSOR_RIGHT_BORDERReady) { _TAG_RW2_SENSOR_RIGHT_BORDERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_RW2_SENSOR_RIGHT_BORDER"); _TAG_RW2_SENSOR_RIGHT_BORDERReady = true; } return _TAG_RW2_SENSOR_RIGHT_BORDERContent; } }
        private static Java.Lang.String _TAG_RW2_SENSOR_RIGHT_BORDERContent = default;
        private static bool _TAG_RW2_SENSOR_RIGHT_BORDERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_RW2_SENSOR_TOP_BORDER"/>
        /// </summary>
        public static Java.Lang.String TAG_RW2_SENSOR_TOP_BORDER { get { if (!_TAG_RW2_SENSOR_TOP_BORDERReady) { _TAG_RW2_SENSOR_TOP_BORDERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_RW2_SENSOR_TOP_BORDER"); _TAG_RW2_SENSOR_TOP_BORDERReady = true; } return _TAG_RW2_SENSOR_TOP_BORDERContent; } }
        private static Java.Lang.String _TAG_RW2_SENSOR_TOP_BORDERContent = default;
        private static bool _TAG_RW2_SENSOR_TOP_BORDERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_SAMPLES_PER_PIXEL"/>
        /// </summary>
        public static Java.Lang.String TAG_SAMPLES_PER_PIXEL { get { if (!_TAG_SAMPLES_PER_PIXELReady) { _TAG_SAMPLES_PER_PIXELContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_SAMPLES_PER_PIXEL"); _TAG_SAMPLES_PER_PIXELReady = true; } return _TAG_SAMPLES_PER_PIXELContent; } }
        private static Java.Lang.String _TAG_SAMPLES_PER_PIXELContent = default;
        private static bool _TAG_SAMPLES_PER_PIXELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_SATURATION"/>
        /// </summary>
        public static Java.Lang.String TAG_SATURATION { get { if (!_TAG_SATURATIONReady) { _TAG_SATURATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_SATURATION"); _TAG_SATURATIONReady = true; } return _TAG_SATURATIONContent; } }
        private static Java.Lang.String _TAG_SATURATIONContent = default;
        private static bool _TAG_SATURATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_SCENE_CAPTURE_TYPE"/>
        /// </summary>
        public static Java.Lang.String TAG_SCENE_CAPTURE_TYPE { get { if (!_TAG_SCENE_CAPTURE_TYPEReady) { _TAG_SCENE_CAPTURE_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_SCENE_CAPTURE_TYPE"); _TAG_SCENE_CAPTURE_TYPEReady = true; } return _TAG_SCENE_CAPTURE_TYPEContent; } }
        private static Java.Lang.String _TAG_SCENE_CAPTURE_TYPEContent = default;
        private static bool _TAG_SCENE_CAPTURE_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_SCENE_TYPE"/>
        /// </summary>
        public static Java.Lang.String TAG_SCENE_TYPE { get { if (!_TAG_SCENE_TYPEReady) { _TAG_SCENE_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_SCENE_TYPE"); _TAG_SCENE_TYPEReady = true; } return _TAG_SCENE_TYPEContent; } }
        private static Java.Lang.String _TAG_SCENE_TYPEContent = default;
        private static bool _TAG_SCENE_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_SENSING_METHOD"/>
        /// </summary>
        public static Java.Lang.String TAG_SENSING_METHOD { get { if (!_TAG_SENSING_METHODReady) { _TAG_SENSING_METHODContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_SENSING_METHOD"); _TAG_SENSING_METHODReady = true; } return _TAG_SENSING_METHODContent; } }
        private static Java.Lang.String _TAG_SENSING_METHODContent = default;
        private static bool _TAG_SENSING_METHODReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_SHARPNESS"/>
        /// </summary>
        public static Java.Lang.String TAG_SHARPNESS { get { if (!_TAG_SHARPNESSReady) { _TAG_SHARPNESSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_SHARPNESS"); _TAG_SHARPNESSReady = true; } return _TAG_SHARPNESSContent; } }
        private static Java.Lang.String _TAG_SHARPNESSContent = default;
        private static bool _TAG_SHARPNESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_SHUTTER_SPEED_VALUE"/>
        /// </summary>
        public static Java.Lang.String TAG_SHUTTER_SPEED_VALUE { get { if (!_TAG_SHUTTER_SPEED_VALUEReady) { _TAG_SHUTTER_SPEED_VALUEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_SHUTTER_SPEED_VALUE"); _TAG_SHUTTER_SPEED_VALUEReady = true; } return _TAG_SHUTTER_SPEED_VALUEContent; } }
        private static Java.Lang.String _TAG_SHUTTER_SPEED_VALUEContent = default;
        private static bool _TAG_SHUTTER_SPEED_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_SOFTWARE"/>
        /// </summary>
        public static Java.Lang.String TAG_SOFTWARE { get { if (!_TAG_SOFTWAREReady) { _TAG_SOFTWAREContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_SOFTWARE"); _TAG_SOFTWAREReady = true; } return _TAG_SOFTWAREContent; } }
        private static Java.Lang.String _TAG_SOFTWAREContent = default;
        private static bool _TAG_SOFTWAREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_SPATIAL_FREQUENCY_RESPONSE"/>
        /// </summary>
        public static Java.Lang.String TAG_SPATIAL_FREQUENCY_RESPONSE { get { if (!_TAG_SPATIAL_FREQUENCY_RESPONSEReady) { _TAG_SPATIAL_FREQUENCY_RESPONSEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_SPATIAL_FREQUENCY_RESPONSE"); _TAG_SPATIAL_FREQUENCY_RESPONSEReady = true; } return _TAG_SPATIAL_FREQUENCY_RESPONSEContent; } }
        private static Java.Lang.String _TAG_SPATIAL_FREQUENCY_RESPONSEContent = default;
        private static bool _TAG_SPATIAL_FREQUENCY_RESPONSEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_SPECTRAL_SENSITIVITY"/>
        /// </summary>
        public static Java.Lang.String TAG_SPECTRAL_SENSITIVITY { get { if (!_TAG_SPECTRAL_SENSITIVITYReady) { _TAG_SPECTRAL_SENSITIVITYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_SPECTRAL_SENSITIVITY"); _TAG_SPECTRAL_SENSITIVITYReady = true; } return _TAG_SPECTRAL_SENSITIVITYContent; } }
        private static Java.Lang.String _TAG_SPECTRAL_SENSITIVITYContent = default;
        private static bool _TAG_SPECTRAL_SENSITIVITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_STRIP_BYTE_COUNTS"/>
        /// </summary>
        public static Java.Lang.String TAG_STRIP_BYTE_COUNTS { get { if (!_TAG_STRIP_BYTE_COUNTSReady) { _TAG_STRIP_BYTE_COUNTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_STRIP_BYTE_COUNTS"); _TAG_STRIP_BYTE_COUNTSReady = true; } return _TAG_STRIP_BYTE_COUNTSContent; } }
        private static Java.Lang.String _TAG_STRIP_BYTE_COUNTSContent = default;
        private static bool _TAG_STRIP_BYTE_COUNTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_STRIP_OFFSETS"/>
        /// </summary>
        public static Java.Lang.String TAG_STRIP_OFFSETS { get { if (!_TAG_STRIP_OFFSETSReady) { _TAG_STRIP_OFFSETSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_STRIP_OFFSETS"); _TAG_STRIP_OFFSETSReady = true; } return _TAG_STRIP_OFFSETSContent; } }
        private static Java.Lang.String _TAG_STRIP_OFFSETSContent = default;
        private static bool _TAG_STRIP_OFFSETSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_SUBFILE_TYPE"/>
        /// </summary>
        public static Java.Lang.String TAG_SUBFILE_TYPE { get { if (!_TAG_SUBFILE_TYPEReady) { _TAG_SUBFILE_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_SUBFILE_TYPE"); _TAG_SUBFILE_TYPEReady = true; } return _TAG_SUBFILE_TYPEContent; } }
        private static Java.Lang.String _TAG_SUBFILE_TYPEContent = default;
        private static bool _TAG_SUBFILE_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_SUBJECT_AREA"/>
        /// </summary>
        public static Java.Lang.String TAG_SUBJECT_AREA { get { if (!_TAG_SUBJECT_AREAReady) { _TAG_SUBJECT_AREAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_SUBJECT_AREA"); _TAG_SUBJECT_AREAReady = true; } return _TAG_SUBJECT_AREAContent; } }
        private static Java.Lang.String _TAG_SUBJECT_AREAContent = default;
        private static bool _TAG_SUBJECT_AREAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_SUBJECT_DISTANCE"/>
        /// </summary>
        public static Java.Lang.String TAG_SUBJECT_DISTANCE { get { if (!_TAG_SUBJECT_DISTANCEReady) { _TAG_SUBJECT_DISTANCEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_SUBJECT_DISTANCE"); _TAG_SUBJECT_DISTANCEReady = true; } return _TAG_SUBJECT_DISTANCEContent; } }
        private static Java.Lang.String _TAG_SUBJECT_DISTANCEContent = default;
        private static bool _TAG_SUBJECT_DISTANCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_SUBJECT_DISTANCE_RANGE"/>
        /// </summary>
        public static Java.Lang.String TAG_SUBJECT_DISTANCE_RANGE { get { if (!_TAG_SUBJECT_DISTANCE_RANGEReady) { _TAG_SUBJECT_DISTANCE_RANGEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_SUBJECT_DISTANCE_RANGE"); _TAG_SUBJECT_DISTANCE_RANGEReady = true; } return _TAG_SUBJECT_DISTANCE_RANGEContent; } }
        private static Java.Lang.String _TAG_SUBJECT_DISTANCE_RANGEContent = default;
        private static bool _TAG_SUBJECT_DISTANCE_RANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_SUBJECT_LOCATION"/>
        /// </summary>
        public static Java.Lang.String TAG_SUBJECT_LOCATION { get { if (!_TAG_SUBJECT_LOCATIONReady) { _TAG_SUBJECT_LOCATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_SUBJECT_LOCATION"); _TAG_SUBJECT_LOCATIONReady = true; } return _TAG_SUBJECT_LOCATIONContent; } }
        private static Java.Lang.String _TAG_SUBJECT_LOCATIONContent = default;
        private static bool _TAG_SUBJECT_LOCATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_SUBSEC_TIME"/>
        /// </summary>
        public static Java.Lang.String TAG_SUBSEC_TIME { get { if (!_TAG_SUBSEC_TIMEReady) { _TAG_SUBSEC_TIMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_SUBSEC_TIME"); _TAG_SUBSEC_TIMEReady = true; } return _TAG_SUBSEC_TIMEContent; } }
        private static Java.Lang.String _TAG_SUBSEC_TIMEContent = default;
        private static bool _TAG_SUBSEC_TIMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_SUBSEC_TIME_DIG"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String TAG_SUBSEC_TIME_DIG { get { if (!_TAG_SUBSEC_TIME_DIGReady) { _TAG_SUBSEC_TIME_DIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_SUBSEC_TIME_DIG"); _TAG_SUBSEC_TIME_DIGReady = true; } return _TAG_SUBSEC_TIME_DIGContent; } }
        private static Java.Lang.String _TAG_SUBSEC_TIME_DIGContent = default;
        private static bool _TAG_SUBSEC_TIME_DIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_SUBSEC_TIME_DIGITIZED"/>
        /// </summary>
        public static Java.Lang.String TAG_SUBSEC_TIME_DIGITIZED { get { if (!_TAG_SUBSEC_TIME_DIGITIZEDReady) { _TAG_SUBSEC_TIME_DIGITIZEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_SUBSEC_TIME_DIGITIZED"); _TAG_SUBSEC_TIME_DIGITIZEDReady = true; } return _TAG_SUBSEC_TIME_DIGITIZEDContent; } }
        private static Java.Lang.String _TAG_SUBSEC_TIME_DIGITIZEDContent = default;
        private static bool _TAG_SUBSEC_TIME_DIGITIZEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_SUBSEC_TIME_ORIG"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String TAG_SUBSEC_TIME_ORIG { get { if (!_TAG_SUBSEC_TIME_ORIGReady) { _TAG_SUBSEC_TIME_ORIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_SUBSEC_TIME_ORIG"); _TAG_SUBSEC_TIME_ORIGReady = true; } return _TAG_SUBSEC_TIME_ORIGContent; } }
        private static Java.Lang.String _TAG_SUBSEC_TIME_ORIGContent = default;
        private static bool _TAG_SUBSEC_TIME_ORIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_SUBSEC_TIME_ORIGINAL"/>
        /// </summary>
        public static Java.Lang.String TAG_SUBSEC_TIME_ORIGINAL { get { if (!_TAG_SUBSEC_TIME_ORIGINALReady) { _TAG_SUBSEC_TIME_ORIGINALContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_SUBSEC_TIME_ORIGINAL"); _TAG_SUBSEC_TIME_ORIGINALReady = true; } return _TAG_SUBSEC_TIME_ORIGINALContent; } }
        private static Java.Lang.String _TAG_SUBSEC_TIME_ORIGINALContent = default;
        private static bool _TAG_SUBSEC_TIME_ORIGINALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_THUMBNAIL_IMAGE_LENGTH"/>
        /// </summary>
        public static Java.Lang.String TAG_THUMBNAIL_IMAGE_LENGTH { get { if (!_TAG_THUMBNAIL_IMAGE_LENGTHReady) { _TAG_THUMBNAIL_IMAGE_LENGTHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_THUMBNAIL_IMAGE_LENGTH"); _TAG_THUMBNAIL_IMAGE_LENGTHReady = true; } return _TAG_THUMBNAIL_IMAGE_LENGTHContent; } }
        private static Java.Lang.String _TAG_THUMBNAIL_IMAGE_LENGTHContent = default;
        private static bool _TAG_THUMBNAIL_IMAGE_LENGTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_THUMBNAIL_IMAGE_WIDTH"/>
        /// </summary>
        public static Java.Lang.String TAG_THUMBNAIL_IMAGE_WIDTH { get { if (!_TAG_THUMBNAIL_IMAGE_WIDTHReady) { _TAG_THUMBNAIL_IMAGE_WIDTHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_THUMBNAIL_IMAGE_WIDTH"); _TAG_THUMBNAIL_IMAGE_WIDTHReady = true; } return _TAG_THUMBNAIL_IMAGE_WIDTHContent; } }
        private static Java.Lang.String _TAG_THUMBNAIL_IMAGE_WIDTHContent = default;
        private static bool _TAG_THUMBNAIL_IMAGE_WIDTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_THUMBNAIL_ORIENTATION"/>
        /// </summary>
        public static Java.Lang.String TAG_THUMBNAIL_ORIENTATION { get { if (!_TAG_THUMBNAIL_ORIENTATIONReady) { _TAG_THUMBNAIL_ORIENTATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_THUMBNAIL_ORIENTATION"); _TAG_THUMBNAIL_ORIENTATIONReady = true; } return _TAG_THUMBNAIL_ORIENTATIONContent; } }
        private static Java.Lang.String _TAG_THUMBNAIL_ORIENTATIONContent = default;
        private static bool _TAG_THUMBNAIL_ORIENTATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_TRANSFER_FUNCTION"/>
        /// </summary>
        public static Java.Lang.String TAG_TRANSFER_FUNCTION { get { if (!_TAG_TRANSFER_FUNCTIONReady) { _TAG_TRANSFER_FUNCTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_TRANSFER_FUNCTION"); _TAG_TRANSFER_FUNCTIONReady = true; } return _TAG_TRANSFER_FUNCTIONContent; } }
        private static Java.Lang.String _TAG_TRANSFER_FUNCTIONContent = default;
        private static bool _TAG_TRANSFER_FUNCTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_USER_COMMENT"/>
        /// </summary>
        public static Java.Lang.String TAG_USER_COMMENT { get { if (!_TAG_USER_COMMENTReady) { _TAG_USER_COMMENTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_USER_COMMENT"); _TAG_USER_COMMENTReady = true; } return _TAG_USER_COMMENTContent; } }
        private static Java.Lang.String _TAG_USER_COMMENTContent = default;
        private static bool _TAG_USER_COMMENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_WHITE_BALANCE"/>
        /// </summary>
        public static Java.Lang.String TAG_WHITE_BALANCE { get { if (!_TAG_WHITE_BALANCEReady) { _TAG_WHITE_BALANCEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_WHITE_BALANCE"); _TAG_WHITE_BALANCEReady = true; } return _TAG_WHITE_BALANCEContent; } }
        private static Java.Lang.String _TAG_WHITE_BALANCEContent = default;
        private static bool _TAG_WHITE_BALANCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_WHITE_POINT"/>
        /// </summary>
        public static Java.Lang.String TAG_WHITE_POINT { get { if (!_TAG_WHITE_POINTReady) { _TAG_WHITE_POINTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_WHITE_POINT"); _TAG_WHITE_POINTReady = true; } return _TAG_WHITE_POINTContent; } }
        private static Java.Lang.String _TAG_WHITE_POINTContent = default;
        private static bool _TAG_WHITE_POINTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_X_RESOLUTION"/>
        /// </summary>
        public static Java.Lang.String TAG_X_RESOLUTION { get { if (!_TAG_X_RESOLUTIONReady) { _TAG_X_RESOLUTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_X_RESOLUTION"); _TAG_X_RESOLUTIONReady = true; } return _TAG_X_RESOLUTIONContent; } }
        private static Java.Lang.String _TAG_X_RESOLUTIONContent = default;
        private static bool _TAG_X_RESOLUTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_XMP"/>
        /// </summary>
        public static Java.Lang.String TAG_XMP { get { if (!_TAG_XMPReady) { _TAG_XMPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_XMP"); _TAG_XMPReady = true; } return _TAG_XMPContent; } }
        private static Java.Lang.String _TAG_XMPContent = default;
        private static bool _TAG_XMPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_Y_CB_CR_COEFFICIENTS"/>
        /// </summary>
        public static Java.Lang.String TAG_Y_CB_CR_COEFFICIENTS { get { if (!_TAG_Y_CB_CR_COEFFICIENTSReady) { _TAG_Y_CB_CR_COEFFICIENTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_Y_CB_CR_COEFFICIENTS"); _TAG_Y_CB_CR_COEFFICIENTSReady = true; } return _TAG_Y_CB_CR_COEFFICIENTSContent; } }
        private static Java.Lang.String _TAG_Y_CB_CR_COEFFICIENTSContent = default;
        private static bool _TAG_Y_CB_CR_COEFFICIENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_Y_CB_CR_POSITIONING"/>
        /// </summary>
        public static Java.Lang.String TAG_Y_CB_CR_POSITIONING { get { if (!_TAG_Y_CB_CR_POSITIONINGReady) { _TAG_Y_CB_CR_POSITIONINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_Y_CB_CR_POSITIONING"); _TAG_Y_CB_CR_POSITIONINGReady = true; } return _TAG_Y_CB_CR_POSITIONINGContent; } }
        private static Java.Lang.String _TAG_Y_CB_CR_POSITIONINGContent = default;
        private static bool _TAG_Y_CB_CR_POSITIONINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_Y_CB_CR_SUB_SAMPLING"/>
        /// </summary>
        public static Java.Lang.String TAG_Y_CB_CR_SUB_SAMPLING { get { if (!_TAG_Y_CB_CR_SUB_SAMPLINGReady) { _TAG_Y_CB_CR_SUB_SAMPLINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_Y_CB_CR_SUB_SAMPLING"); _TAG_Y_CB_CR_SUB_SAMPLINGReady = true; } return _TAG_Y_CB_CR_SUB_SAMPLINGContent; } }
        private static Java.Lang.String _TAG_Y_CB_CR_SUB_SAMPLINGContent = default;
        private static bool _TAG_Y_CB_CR_SUB_SAMPLINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#TAG_Y_RESOLUTION"/>
        /// </summary>
        public static Java.Lang.String TAG_Y_RESOLUTION { get { if (!_TAG_Y_RESOLUTIONReady) { _TAG_Y_RESOLUTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG_Y_RESOLUTION"); _TAG_Y_RESOLUTIONReady = true; } return _TAG_Y_RESOLUTIONContent; } }
        private static Java.Lang.String _TAG_Y_RESOLUTIONContent = default;
        private static bool _TAG_Y_RESOLUTIONReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#isSupportedMimeType(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsSupportedMimeType(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isSupportedMimeType", "(Ljava/lang/String;)Z", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#getThumbnailBitmap()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
        public Android.Graphics.Bitmap GetThumbnailBitmap()
        {
            return IExecuteWithSignature<Android.Graphics.Bitmap>("getThumbnailBitmap", "()Landroid/graphics/Bitmap;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#getLatLong(float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool GetLatLong(float[] arg0)
        {
            return IExecuteWithSignature<bool>("getLatLong", "([F)Z", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#hasAttribute(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasAttribute(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<bool>("hasAttribute", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#hasThumbnail()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasThumbnail()
        {
            return IExecuteWithSignature<bool>("hasThumbnail", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#isThumbnailCompressed()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsThumbnailCompressed()
        {
            return IExecuteWithSignature<bool>("isThumbnailCompressed", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#getAttributeBytes(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="byte"/></returns>
        public byte[] GetAttributeBytes(Java.Lang.String arg0)
        {
            return IExecuteWithSignatureArray<byte>("getAttributeBytes", "(Ljava/lang/String;)[B", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#getThumbnail()"/>
        /// </summary>
        /// <returns><see cref="byte"/></returns>
        public byte[] GetThumbnail()
        {
            return IExecuteWithSignatureArray<byte>("getThumbnail", "()[B");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#getThumbnailBytes()"/>
        /// </summary>
        /// <returns><see cref="byte"/></returns>
        public byte[] GetThumbnailBytes()
        {
            return IExecuteWithSignatureArray<byte>("getThumbnailBytes", "()[B");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#getAltitude(double)"/>
        /// </summary>
        /// <param name="arg0"><see cref="double"/></param>
        /// <returns><see cref="double"/></returns>
        public double GetAltitude(double arg0)
        {
            return IExecuteWithSignature<double>("getAltitude", "(D)D", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#getAttributeDouble(java.lang.String,double)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="double"/></param>
        /// <returns><see cref="double"/></returns>
        public double GetAttributeDouble(Java.Lang.String arg0, double arg1)
        {
            return IExecute<double>("getAttributeDouble", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#getAttributeInt(java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetAttributeInt(Java.Lang.String arg0, int arg1)
        {
            return IExecute<int>("getAttributeInt", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#getAttribute(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetAttribute(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getAttribute", "(Ljava/lang/String;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#getDateTime()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetDateTime()
        {
            return IExecuteWithSignature<long>("getDateTime", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#getDateTimeDigitized()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetDateTimeDigitized()
        {
            return IExecuteWithSignature<long>("getDateTimeDigitized", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#getDateTimeOriginal()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetDateTimeOriginal()
        {
            return IExecuteWithSignature<long>("getDateTimeOriginal", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#getGpsDateTime()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetGpsDateTime()
        {
            return IExecuteWithSignature<long>("getGpsDateTime", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#getAttributeRange(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="long"/></returns>
        public long[] GetAttributeRange(Java.Lang.String arg0)
        {
            return IExecuteWithSignatureArray<long>("getAttributeRange", "(Ljava/lang/String;)[J", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#getThumbnailRange()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long[] GetThumbnailRange()
        {
            return IExecuteWithSignatureArray<long>("getThumbnailRange", "()[J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#saveAttributes()"/>
        /// </summary>
        /// <exception cref="Java.Io.IOException"/>
        public void SaveAttributes()
        {
            IExecuteWithSignature("saveAttributes", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ExifInterface.html#setAttribute(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        public void SetAttribute(Java.Lang.String arg0, Java.Lang.String arg1)
        {
            IExecute("setAttribute", arg0, arg1);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
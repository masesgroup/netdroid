/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media.Midi
{
    #region MidiDeviceService declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/media/midi/MidiDeviceService.html"/>
    /// </summary>
    public partial class MidiDeviceService : Android.App.Service
    {
        const string _bridgeClassName = "android.media.midi.MidiDeviceService";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("MidiDeviceService class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public MidiDeviceService() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("MidiDeviceService class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public MidiDeviceService(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region MidiDeviceService implementation
    public partial class MidiDeviceService
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/midi/MidiDeviceService.html#SERVICE_INTERFACE"/>
        /// </summary>
        public static Java.Lang.String SERVICE_INTERFACE { get { if (!_SERVICE_INTERFACEReady) { _SERVICE_INTERFACEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SERVICE_INTERFACE"); _SERVICE_INTERFACEReady = true; } return _SERVICE_INTERFACEContent; } }
        private static Java.Lang.String _SERVICE_INTERFACEContent = default;
        private static bool _SERVICE_INTERFACEReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/midi/MidiDeviceService.html#onGetInputPortReceivers()"/>
        /// </summary>
        /// <returns><see cref="Android.Media.Midi.MidiReceiver"/></returns>
        public Android.Media.Midi.MidiReceiver[] OnGetInputPortReceivers()
        {
            return IExecuteWithSignatureArray<Android.Media.Midi.MidiReceiver>("onGetInputPortReceivers", "()[Landroid/media/midi/MidiReceiver;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/midi/MidiDeviceService.html#getDeviceInfo()"/>
        /// </summary>
        /// <returns><see cref="Android.Media.Midi.MidiDeviceInfo"/></returns>
        public Android.Media.Midi.MidiDeviceInfo GetDeviceInfo()
        {
            return IExecuteWithSignature<Android.Media.Midi.MidiDeviceInfo>("getDeviceInfo", "()Landroid/media/midi/MidiDeviceInfo;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/midi/MidiDeviceService.html#getOutputPortReceivers()"/>
        /// </summary>
        /// <returns><see cref="Android.Media.Midi.MidiReceiver"/></returns>
        public Android.Media.Midi.MidiReceiver[] GetOutputPortReceivers()
        {
            return IExecuteWithSignatureArray<Android.Media.Midi.MidiReceiver>("getOutputPortReceivers", "()[Landroid/media/midi/MidiReceiver;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/midi/MidiDeviceService.html#onClose()"/>
        /// </summary>
        public void OnClose()
        {
            IExecuteWithSignature("onClose", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/midi/MidiDeviceService.html#onDeviceStatusChanged(android.media.midi.MidiDeviceStatus)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.Midi.MidiDeviceStatus"/></param>
        public void OnDeviceStatusChanged(Android.Media.Midi.MidiDeviceStatus arg0)
        {
            IExecuteWithSignature("onDeviceStatusChanged", "(Landroid/media/midi/MidiDeviceStatus;)V", arg0);
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
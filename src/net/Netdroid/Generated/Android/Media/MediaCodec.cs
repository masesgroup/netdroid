/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media
{
    #region MediaCodec
    public partial class MediaCodec
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#BUFFER_FLAG_CODEC_CONFIG"/>
        /// </summary>
        public static int BUFFER_FLAG_CODEC_CONFIG { get { if (!_BUFFER_FLAG_CODEC_CONFIGReady) { _BUFFER_FLAG_CODEC_CONFIGContent = SGetField<int>(LocalBridgeClazz, "BUFFER_FLAG_CODEC_CONFIG"); _BUFFER_FLAG_CODEC_CONFIGReady = true; } return _BUFFER_FLAG_CODEC_CONFIGContent; } }
        private static int _BUFFER_FLAG_CODEC_CONFIGContent = default;
        private static bool _BUFFER_FLAG_CODEC_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#BUFFER_FLAG_DECODE_ONLY"/>
        /// </summary>
        public static int BUFFER_FLAG_DECODE_ONLY { get { if (!_BUFFER_FLAG_DECODE_ONLYReady) { _BUFFER_FLAG_DECODE_ONLYContent = SGetField<int>(LocalBridgeClazz, "BUFFER_FLAG_DECODE_ONLY"); _BUFFER_FLAG_DECODE_ONLYReady = true; } return _BUFFER_FLAG_DECODE_ONLYContent; } }
        private static int _BUFFER_FLAG_DECODE_ONLYContent = default;
        private static bool _BUFFER_FLAG_DECODE_ONLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#BUFFER_FLAG_END_OF_STREAM"/>
        /// </summary>
        public static int BUFFER_FLAG_END_OF_STREAM { get { if (!_BUFFER_FLAG_END_OF_STREAMReady) { _BUFFER_FLAG_END_OF_STREAMContent = SGetField<int>(LocalBridgeClazz, "BUFFER_FLAG_END_OF_STREAM"); _BUFFER_FLAG_END_OF_STREAMReady = true; } return _BUFFER_FLAG_END_OF_STREAMContent; } }
        private static int _BUFFER_FLAG_END_OF_STREAMContent = default;
        private static bool _BUFFER_FLAG_END_OF_STREAMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#BUFFER_FLAG_KEY_FRAME"/>
        /// </summary>
        public static int BUFFER_FLAG_KEY_FRAME { get { if (!_BUFFER_FLAG_KEY_FRAMEReady) { _BUFFER_FLAG_KEY_FRAMEContent = SGetField<int>(LocalBridgeClazz, "BUFFER_FLAG_KEY_FRAME"); _BUFFER_FLAG_KEY_FRAMEReady = true; } return _BUFFER_FLAG_KEY_FRAMEContent; } }
        private static int _BUFFER_FLAG_KEY_FRAMEContent = default;
        private static bool _BUFFER_FLAG_KEY_FRAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#BUFFER_FLAG_PARTIAL_FRAME"/>
        /// </summary>
        public static int BUFFER_FLAG_PARTIAL_FRAME { get { if (!_BUFFER_FLAG_PARTIAL_FRAMEReady) { _BUFFER_FLAG_PARTIAL_FRAMEContent = SGetField<int>(LocalBridgeClazz, "BUFFER_FLAG_PARTIAL_FRAME"); _BUFFER_FLAG_PARTIAL_FRAMEReady = true; } return _BUFFER_FLAG_PARTIAL_FRAMEContent; } }
        private static int _BUFFER_FLAG_PARTIAL_FRAMEContent = default;
        private static bool _BUFFER_FLAG_PARTIAL_FRAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#CONFIGURE_FLAG_ENCODE"/>
        /// </summary>
        public static int CONFIGURE_FLAG_ENCODE { get { if (!_CONFIGURE_FLAG_ENCODEReady) { _CONFIGURE_FLAG_ENCODEContent = SGetField<int>(LocalBridgeClazz, "CONFIGURE_FLAG_ENCODE"); _CONFIGURE_FLAG_ENCODEReady = true; } return _CONFIGURE_FLAG_ENCODEContent; } }
        private static int _CONFIGURE_FLAG_ENCODEContent = default;
        private static bool _CONFIGURE_FLAG_ENCODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#CONFIGURE_FLAG_USE_BLOCK_MODEL"/>
        /// </summary>
        public static int CONFIGURE_FLAG_USE_BLOCK_MODEL { get { if (!_CONFIGURE_FLAG_USE_BLOCK_MODELReady) { _CONFIGURE_FLAG_USE_BLOCK_MODELContent = SGetField<int>(LocalBridgeClazz, "CONFIGURE_FLAG_USE_BLOCK_MODEL"); _CONFIGURE_FLAG_USE_BLOCK_MODELReady = true; } return _CONFIGURE_FLAG_USE_BLOCK_MODELContent; } }
        private static int _CONFIGURE_FLAG_USE_BLOCK_MODELContent = default;
        private static bool _CONFIGURE_FLAG_USE_BLOCK_MODELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#CONFIGURE_FLAG_USE_CRYPTO_ASYNC"/>
        /// </summary>
        public static int CONFIGURE_FLAG_USE_CRYPTO_ASYNC { get { if (!_CONFIGURE_FLAG_USE_CRYPTO_ASYNCReady) { _CONFIGURE_FLAG_USE_CRYPTO_ASYNCContent = SGetField<int>(LocalBridgeClazz, "CONFIGURE_FLAG_USE_CRYPTO_ASYNC"); _CONFIGURE_FLAG_USE_CRYPTO_ASYNCReady = true; } return _CONFIGURE_FLAG_USE_CRYPTO_ASYNCContent; } }
        private static int _CONFIGURE_FLAG_USE_CRYPTO_ASYNCContent = default;
        private static bool _CONFIGURE_FLAG_USE_CRYPTO_ASYNCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#CRYPTO_MODE_AES_CBC"/>
        /// </summary>
        public static int CRYPTO_MODE_AES_CBC { get { if (!_CRYPTO_MODE_AES_CBCReady) { _CRYPTO_MODE_AES_CBCContent = SGetField<int>(LocalBridgeClazz, "CRYPTO_MODE_AES_CBC"); _CRYPTO_MODE_AES_CBCReady = true; } return _CRYPTO_MODE_AES_CBCContent; } }
        private static int _CRYPTO_MODE_AES_CBCContent = default;
        private static bool _CRYPTO_MODE_AES_CBCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#CRYPTO_MODE_AES_CTR"/>
        /// </summary>
        public static int CRYPTO_MODE_AES_CTR { get { if (!_CRYPTO_MODE_AES_CTRReady) { _CRYPTO_MODE_AES_CTRContent = SGetField<int>(LocalBridgeClazz, "CRYPTO_MODE_AES_CTR"); _CRYPTO_MODE_AES_CTRReady = true; } return _CRYPTO_MODE_AES_CTRContent; } }
        private static int _CRYPTO_MODE_AES_CTRContent = default;
        private static bool _CRYPTO_MODE_AES_CTRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#CRYPTO_MODE_UNENCRYPTED"/>
        /// </summary>
        public static int CRYPTO_MODE_UNENCRYPTED { get { if (!_CRYPTO_MODE_UNENCRYPTEDReady) { _CRYPTO_MODE_UNENCRYPTEDContent = SGetField<int>(LocalBridgeClazz, "CRYPTO_MODE_UNENCRYPTED"); _CRYPTO_MODE_UNENCRYPTEDReady = true; } return _CRYPTO_MODE_UNENCRYPTEDContent; } }
        private static int _CRYPTO_MODE_UNENCRYPTEDContent = default;
        private static bool _CRYPTO_MODE_UNENCRYPTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#INFO_OUTPUT_FORMAT_CHANGED"/>
        /// </summary>
        public static int INFO_OUTPUT_FORMAT_CHANGED { get { if (!_INFO_OUTPUT_FORMAT_CHANGEDReady) { _INFO_OUTPUT_FORMAT_CHANGEDContent = SGetField<int>(LocalBridgeClazz, "INFO_OUTPUT_FORMAT_CHANGED"); _INFO_OUTPUT_FORMAT_CHANGEDReady = true; } return _INFO_OUTPUT_FORMAT_CHANGEDContent; } }
        private static int _INFO_OUTPUT_FORMAT_CHANGEDContent = default;
        private static bool _INFO_OUTPUT_FORMAT_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#INFO_TRY_AGAIN_LATER"/>
        /// </summary>
        public static int INFO_TRY_AGAIN_LATER { get { if (!_INFO_TRY_AGAIN_LATERReady) { _INFO_TRY_AGAIN_LATERContent = SGetField<int>(LocalBridgeClazz, "INFO_TRY_AGAIN_LATER"); _INFO_TRY_AGAIN_LATERReady = true; } return _INFO_TRY_AGAIN_LATERContent; } }
        private static int _INFO_TRY_AGAIN_LATERContent = default;
        private static bool _INFO_TRY_AGAIN_LATERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#VIDEO_SCALING_MODE_SCALE_TO_FIT"/>
        /// </summary>
        public static int VIDEO_SCALING_MODE_SCALE_TO_FIT { get { if (!_VIDEO_SCALING_MODE_SCALE_TO_FITReady) { _VIDEO_SCALING_MODE_SCALE_TO_FITContent = SGetField<int>(LocalBridgeClazz, "VIDEO_SCALING_MODE_SCALE_TO_FIT"); _VIDEO_SCALING_MODE_SCALE_TO_FITReady = true; } return _VIDEO_SCALING_MODE_SCALE_TO_FITContent; } }
        private static int _VIDEO_SCALING_MODE_SCALE_TO_FITContent = default;
        private static bool _VIDEO_SCALING_MODE_SCALE_TO_FITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING"/>
        /// </summary>
        public static int VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING { get { if (!_VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPINGReady) { _VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPINGContent = SGetField<int>(LocalBridgeClazz, "VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING"); _VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPINGReady = true; } return _VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPINGContent; } }
        private static int _VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPINGContent = default;
        private static bool _VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#PARAMETER_KEY_HDR10_PLUS_INFO"/>
        /// </summary>
        public static Java.Lang.String PARAMETER_KEY_HDR10_PLUS_INFO { get { if (!_PARAMETER_KEY_HDR10_PLUS_INFOReady) { _PARAMETER_KEY_HDR10_PLUS_INFOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_KEY_HDR10_PLUS_INFO"); _PARAMETER_KEY_HDR10_PLUS_INFOReady = true; } return _PARAMETER_KEY_HDR10_PLUS_INFOContent; } }
        private static Java.Lang.String _PARAMETER_KEY_HDR10_PLUS_INFOContent = default;
        private static bool _PARAMETER_KEY_HDR10_PLUS_INFOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#PARAMETER_KEY_LOW_LATENCY"/>
        /// </summary>
        public static Java.Lang.String PARAMETER_KEY_LOW_LATENCY { get { if (!_PARAMETER_KEY_LOW_LATENCYReady) { _PARAMETER_KEY_LOW_LATENCYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_KEY_LOW_LATENCY"); _PARAMETER_KEY_LOW_LATENCYReady = true; } return _PARAMETER_KEY_LOW_LATENCYContent; } }
        private static Java.Lang.String _PARAMETER_KEY_LOW_LATENCYContent = default;
        private static bool _PARAMETER_KEY_LOW_LATENCYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#PARAMETER_KEY_OFFSET_TIME"/>
        /// </summary>
        public static Java.Lang.String PARAMETER_KEY_OFFSET_TIME { get { if (!_PARAMETER_KEY_OFFSET_TIMEReady) { _PARAMETER_KEY_OFFSET_TIMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_KEY_OFFSET_TIME"); _PARAMETER_KEY_OFFSET_TIMEReady = true; } return _PARAMETER_KEY_OFFSET_TIMEContent; } }
        private static Java.Lang.String _PARAMETER_KEY_OFFSET_TIMEContent = default;
        private static bool _PARAMETER_KEY_OFFSET_TIMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#PARAMETER_KEY_REQUEST_SYNC_FRAME"/>
        /// </summary>
        public static Java.Lang.String PARAMETER_KEY_REQUEST_SYNC_FRAME { get { if (!_PARAMETER_KEY_REQUEST_SYNC_FRAMEReady) { _PARAMETER_KEY_REQUEST_SYNC_FRAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_KEY_REQUEST_SYNC_FRAME"); _PARAMETER_KEY_REQUEST_SYNC_FRAMEReady = true; } return _PARAMETER_KEY_REQUEST_SYNC_FRAMEContent; } }
        private static Java.Lang.String _PARAMETER_KEY_REQUEST_SYNC_FRAMEContent = default;
        private static bool _PARAMETER_KEY_REQUEST_SYNC_FRAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#PARAMETER_KEY_SUSPEND"/>
        /// </summary>
        public static Java.Lang.String PARAMETER_KEY_SUSPEND { get { if (!_PARAMETER_KEY_SUSPENDReady) { _PARAMETER_KEY_SUSPENDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_KEY_SUSPEND"); _PARAMETER_KEY_SUSPENDReady = true; } return _PARAMETER_KEY_SUSPENDContent; } }
        private static Java.Lang.String _PARAMETER_KEY_SUSPENDContent = default;
        private static bool _PARAMETER_KEY_SUSPENDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#PARAMETER_KEY_SUSPEND_TIME"/>
        /// </summary>
        public static Java.Lang.String PARAMETER_KEY_SUSPEND_TIME { get { if (!_PARAMETER_KEY_SUSPEND_TIMEReady) { _PARAMETER_KEY_SUSPEND_TIMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_KEY_SUSPEND_TIME"); _PARAMETER_KEY_SUSPEND_TIMEReady = true; } return _PARAMETER_KEY_SUSPEND_TIMEContent; } }
        private static Java.Lang.String _PARAMETER_KEY_SUSPEND_TIMEContent = default;
        private static bool _PARAMETER_KEY_SUSPEND_TIMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#PARAMETER_KEY_TUNNEL_PEEK"/>
        /// </summary>
        public static Java.Lang.String PARAMETER_KEY_TUNNEL_PEEK { get { if (!_PARAMETER_KEY_TUNNEL_PEEKReady) { _PARAMETER_KEY_TUNNEL_PEEKContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_KEY_TUNNEL_PEEK"); _PARAMETER_KEY_TUNNEL_PEEKReady = true; } return _PARAMETER_KEY_TUNNEL_PEEKContent; } }
        private static Java.Lang.String _PARAMETER_KEY_TUNNEL_PEEKContent = default;
        private static bool _PARAMETER_KEY_TUNNEL_PEEKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#PARAMETER_KEY_VIDEO_BITRATE"/>
        /// </summary>
        public static Java.Lang.String PARAMETER_KEY_VIDEO_BITRATE { get { if (!_PARAMETER_KEY_VIDEO_BITRATEReady) { _PARAMETER_KEY_VIDEO_BITRATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_KEY_VIDEO_BITRATE"); _PARAMETER_KEY_VIDEO_BITRATEReady = true; } return _PARAMETER_KEY_VIDEO_BITRATEContent; } }
        private static Java.Lang.String _PARAMETER_KEY_VIDEO_BITRATEContent = default;
        private static bool _PARAMETER_KEY_VIDEO_BITRATEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#mapHardwareBuffer(android.hardware.HardwareBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Hardware.HardwareBuffer"/></param>
        /// <returns><see cref="Android.Media.Image"/></returns>
        public static Android.Media.Image MapHardwareBuffer(Android.Hardware.HardwareBuffer arg0)
        {
            return SExecuteWithSignature<Android.Media.Image>(LocalBridgeClazz, "mapHardwareBuffer", "(Landroid/hardware/HardwareBuffer;)Landroid/media/Image;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#createByCodecName(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Media.MediaCodec"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public static Android.Media.MediaCodec CreateByCodecName(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<Android.Media.MediaCodec>(LocalBridgeClazz, "createByCodecName", "(Ljava/lang/String;)Landroid/media/MediaCodec;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#createDecoderByType(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Media.MediaCodec"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public static Android.Media.MediaCodec CreateDecoderByType(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<Android.Media.MediaCodec>(LocalBridgeClazz, "createDecoderByType", "(Ljava/lang/String;)Landroid/media/MediaCodec;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#createEncoderByType(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Media.MediaCodec"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public static Android.Media.MediaCodec CreateEncoderByType(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<Android.Media.MediaCodec>(LocalBridgeClazz, "createEncoderByType", "(Ljava/lang/String;)Landroid/media/MediaCodec;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#createPersistentInputSurface()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Surface"/></returns>
        public static Android.View.Surface CreatePersistentInputSurface()
        {
            return SExecuteWithSignature<Android.View.Surface>(LocalBridgeClazz, "createPersistentInputSurface", "()Landroid/view/Surface;");
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#getCanonicalName()"/> 
        /// </summary>
        public Java.Lang.String CanonicalName
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getCanonicalName", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#getCodecInfo()"/> 
        /// </summary>
        public Android.Media.MediaCodecInfo CodecInfo
        {
            get { return IExecuteWithSignature<Android.Media.MediaCodecInfo>("getCodecInfo", "()Landroid/media/MediaCodecInfo;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#getInputFormat()"/> 
        /// </summary>
        public Android.Media.MediaFormat InputFormat
        {
            get { return IExecuteWithSignature<Android.Media.MediaFormat>("getInputFormat", "()Landroid/media/MediaFormat;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#getMetrics()"/> 
        /// </summary>
        public Android.Os.PersistableBundle Metrics
        {
            get { return IExecuteWithSignature<Android.Os.PersistableBundle>("getMetrics", "()Landroid/os/PersistableBundle;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#getName()"/> 
        /// </summary>
        public Java.Lang.String Name
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getName", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#getOutputFormat()"/> 
        /// </summary>
        public Android.Media.MediaFormat OutputFormat
        {
            get { return IExecuteWithSignature<Android.Media.MediaFormat>("getOutputFormat", "()Landroid/media/MediaFormat;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#getSupportedVendorParameters()"/> 
        /// </summary>
        public Java.Util.List<Java.Lang.String> SupportedVendorParameters
        {
            get { return IExecuteWithSignature<Java.Util.List<Java.Lang.String>>("getSupportedVendorParameters", "()Ljava/util/List;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#getInputImage(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Media.Image"/></returns>
        public Android.Media.Image GetInputImage(int arg0)
        {
            return IExecuteWithSignature<Android.Media.Image>("getInputImage", "(I)Landroid/media/Image;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#getOutputImage(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Media.Image"/></returns>
        public Android.Media.Image GetOutputImage(int arg0)
        {
            return IExecuteWithSignature<Android.Media.Image>("getOutputImage", "(I)Landroid/media/Image;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#getOutputFrame(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Media.MediaCodec.OutputFrame"/></returns>
        public Android.Media.MediaCodec.OutputFrame GetOutputFrame(int arg0)
        {
            return IExecuteWithSignature<Android.Media.MediaCodec.OutputFrame>("getOutputFrame", "(I)Landroid/media/MediaCodec$OutputFrame;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#getParameterDescriptor(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Media.MediaCodec.ParameterDescriptor"/></returns>
        public Android.Media.MediaCodec.ParameterDescriptor GetParameterDescriptor(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Android.Media.MediaCodec.ParameterDescriptor>("getParameterDescriptor", "(Ljava/lang/String;)Landroid/media/MediaCodec$ParameterDescriptor;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#getQueueRequest(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Media.MediaCodec.QueueRequest"/></returns>
        public Android.Media.MediaCodec.QueueRequest GetQueueRequest(int arg0)
        {
            return IExecuteWithSignature<Android.Media.MediaCodec.QueueRequest>("getQueueRequest", "(I)Landroid/media/MediaCodec$QueueRequest;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#getOutputFormat(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Media.MediaFormat"/></returns>
        public Android.Media.MediaFormat GetOutputFormat(int arg0)
        {
            return IExecuteWithSignature<Android.Media.MediaFormat>("getOutputFormat", "(I)Landroid/media/MediaFormat;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#dequeueInputBuffer(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="int"/></returns>
        public int DequeueInputBuffer(long arg0)
        {
            return IExecuteWithSignature<int>("dequeueInputBuffer", "(J)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#dequeueOutputBuffer(android.media.MediaCodec.BufferInfo,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaCodec.BufferInfo"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <returns><see cref="int"/></returns>
        public int DequeueOutputBuffer(Android.Media.MediaCodec.BufferInfo arg0, long arg1)
        {
            return IExecute<int>("dequeueOutputBuffer", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#getInputBuffer(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Nio.ByteBuffer"/></returns>
        public Java.Nio.ByteBuffer GetInputBuffer(int arg0)
        {
            return IExecuteWithSignature<Java.Nio.ByteBuffer>("getInputBuffer", "(I)Ljava/nio/ByteBuffer;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#getOutputBuffer(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Nio.ByteBuffer"/></returns>
        public Java.Nio.ByteBuffer GetOutputBuffer(int arg0)
        {
            return IExecuteWithSignature<Java.Nio.ByteBuffer>("getOutputBuffer", "(I)Ljava/nio/ByteBuffer;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#createInputSurface()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Surface"/></returns>
        public Android.View.Surface CreateInputSurface()
        {
            return IExecuteWithSignature<Android.View.Surface>("createInputSurface", "()Landroid/view/Surface;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#setVideoScalingMode(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetVideoScalingMode(int arg0)
        {
            IExecuteWithSignature("setVideoScalingMode", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#signalEndOfInputStream()"/>
        /// </summary>
        public void SignalEndOfInputStream()
        {
            IExecuteWithSignature("signalEndOfInputStream", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#configure(android.media.MediaFormat,android.view.Surface,android.media.MediaCrypto,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaFormat"/></param>
        /// <param name="arg1"><see cref="Android.View.Surface"/></param>
        /// <param name="arg2"><see cref="Android.Media.MediaCrypto"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void Configure(Android.Media.MediaFormat arg0, Android.View.Surface arg1, Android.Media.MediaCrypto arg2, int arg3)
        {
            IExecute("configure", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#configure(android.media.MediaFormat,android.view.Surface,int,android.media.MediaDescrambler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaFormat"/></param>
        /// <param name="arg1"><see cref="Android.View.Surface"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Android.Media.MediaDescrambler"/></param>
        public void Configure(Android.Media.MediaFormat arg0, Android.View.Surface arg1, int arg2, Android.Media.MediaDescrambler arg3)
        {
            IExecute("configure", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#flush()"/>
        /// </summary>
        public void Flush()
        {
            IExecuteWithSignature("flush", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#queueInputBuffer(int,int,int,long,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="long"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <exception cref="Android.Media.MediaCodec.CryptoException"/>
        public void QueueInputBuffer(int arg0, int arg1, int arg2, long arg3, int arg4)
        {
            IExecute("queueInputBuffer", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#queueSecureInputBuffer(int,int,android.media.MediaCodec.CryptoInfo,long,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Media.MediaCodec.CryptoInfo"/></param>
        /// <param name="arg3"><see cref="long"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <exception cref="Android.Media.MediaCodec.CryptoException"/>
        public void QueueSecureInputBuffer(int arg0, int arg1, Android.Media.MediaCodec.CryptoInfo arg2, long arg3, int arg4)
        {
            IExecute("queueSecureInputBuffer", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#release()"/>
        /// </summary>
        public void Release()
        {
            IExecuteWithSignature("release", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#releaseOutputBuffer(int,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public void ReleaseOutputBuffer(int arg0, bool arg1)
        {
            IExecute("releaseOutputBuffer", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#releaseOutputBuffer(int,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        public void ReleaseOutputBuffer(int arg0, long arg1)
        {
            IExecute("releaseOutputBuffer", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#reset()"/>
        /// </summary>
        public void Reset()
        {
            IExecuteWithSignature("reset", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#setAudioPresentation(android.media.AudioPresentation)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioPresentation"/></param>
        public void SetAudioPresentation(Android.Media.AudioPresentation arg0)
        {
            IExecuteWithSignature("setAudioPresentation", "(Landroid/media/AudioPresentation;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#setCallback(android.media.MediaCodec.Callback,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaCodec.Callback"/></param>
        /// <param name="arg1"><see cref="Android.Os.Handler"/></param>
        public void SetCallback(Android.Media.MediaCodec.Callback arg0, Android.Os.Handler arg1)
        {
            IExecute("setCallback", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#setCallback(android.media.MediaCodec.Callback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaCodec.Callback"/></param>
        public void SetCallback(Android.Media.MediaCodec.Callback arg0)
        {
            IExecuteWithSignature("setCallback", "(Landroid/media/MediaCodec$Callback;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#setInputSurface(android.view.Surface)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Surface"/></param>
        public void SetInputSurface(Android.View.Surface arg0)
        {
            IExecuteWithSignature("setInputSurface", "(Landroid/view/Surface;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#setOnFirstTunnelFrameReadyListener(android.os.Handler,android.media.MediaCodec.OnFirstTunnelFrameReadyListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Handler"/></param>
        /// <param name="arg1"><see cref="Android.Media.MediaCodec.OnFirstTunnelFrameReadyListener"/></param>
        public void SetOnFirstTunnelFrameReadyListener(Android.Os.Handler arg0, Android.Media.MediaCodec.OnFirstTunnelFrameReadyListener arg1)
        {
            IExecute("setOnFirstTunnelFrameReadyListener", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#setOnFrameRenderedListener(android.media.MediaCodec.OnFrameRenderedListener,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaCodec.OnFrameRenderedListener"/></param>
        /// <param name="arg1"><see cref="Android.Os.Handler"/></param>
        public void SetOnFrameRenderedListener(Android.Media.MediaCodec.OnFrameRenderedListener arg0, Android.Os.Handler arg1)
        {
            IExecute("setOnFrameRenderedListener", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#setOutputSurface(android.view.Surface)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Surface"/></param>
        public void SetOutputSurface(Android.View.Surface arg0)
        {
            IExecuteWithSignature("setOutputSurface", "(Landroid/view/Surface;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#setParameters(android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Bundle"/></param>
        public void SetParameters(Android.Os.Bundle arg0)
        {
            IExecuteWithSignature("setParameters", "(Landroid/os/Bundle;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#start()"/>
        /// </summary>
        public void Start()
        {
            IExecuteWithSignature("start", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#stop()"/>
        /// </summary>
        public void Stop()
        {
            IExecuteWithSignature("stop", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#subscribeToVendorParameters(java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        public void SubscribeToVendorParameters(Java.Util.List<Java.Lang.String> arg0)
        {
            IExecuteWithSignature("subscribeToVendorParameters", "(Ljava/util/List;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodec.html#unsubscribeFromVendorParameters(java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        public void UnsubscribeFromVendorParameters(Java.Util.List<Java.Lang.String> arg0)
        {
            IExecuteWithSignature("unsubscribeFromVendorParameters", "(Ljava/util/List;)V", arg0);
        }

        #endregion

        #region Nested classes
        #region BufferInfo
        public partial class BufferInfo
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.BufferInfo.html#flags"/>
            /// </summary>
            public int flags { get { return IGetField<int>("flags"); } set { ISetField("flags", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.BufferInfo.html#offset"/>
            /// </summary>
            public int offset { get { return IGetField<int>("offset"); } set { ISetField("offset", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.BufferInfo.html#size"/>
            /// </summary>
            public int size { get { return IGetField<int>("size"); } set { ISetField("size", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.BufferInfo.html#presentationTimeUs"/>
            /// </summary>
            public long presentationTimeUs { get { return IGetField<long>("presentationTimeUs"); } set { ISetField("presentationTimeUs", value); } }

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.BufferInfo.html#set(int,int,long,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="long"/></param>
            /// <param name="arg3"><see cref="int"/></param>
            public void Set(int arg0, int arg1, long arg2, int arg3)
            {
                IExecute("set", arg0, arg1, arg2, arg3);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Callback
        public partial class Callback
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.Callback.html#onError(android.media.MediaCodec,android.media.MediaCodec.CodecException)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaCodec"/></param>
            /// <param name="arg1"><see cref="Android.Media.MediaCodec.CodecException"/></param>
            public void OnError(Android.Media.MediaCodec arg0, MASES.JCOBridge.C2JBridge.JVMBridgeException arg1)
            {
                IExecute("onError", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.Callback.html#onInputBufferAvailable(android.media.MediaCodec,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaCodec"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void OnInputBufferAvailable(Android.Media.MediaCodec arg0, int arg1)
            {
                IExecute("onInputBufferAvailable", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.Callback.html#onOutputBufferAvailable(android.media.MediaCodec,int,android.media.MediaCodec.BufferInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaCodec"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="Android.Media.MediaCodec.BufferInfo"/></param>
            public void OnOutputBufferAvailable(Android.Media.MediaCodec arg0, int arg1, Android.Media.MediaCodec.BufferInfo arg2)
            {
                IExecute("onOutputBufferAvailable", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.Callback.html#onOutputFormatChanged(android.media.MediaCodec,android.media.MediaFormat)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaCodec"/></param>
            /// <param name="arg1"><see cref="Android.Media.MediaFormat"/></param>
            public void OnOutputFormatChanged(Android.Media.MediaCodec arg0, Android.Media.MediaFormat arg1)
            {
                IExecute("onOutputFormatChanged", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.Callback.html#onCryptoError(android.media.MediaCodec,android.media.MediaCodec.CryptoException)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaCodec"/></param>
            /// <param name="arg1"><see cref="Android.Media.MediaCodec.CryptoException"/></param>
            public void OnCryptoError(Android.Media.MediaCodec arg0, MASES.JCOBridge.C2JBridge.JVMBridgeException arg1)
            {
                IExecute("onCryptoError", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region CodecException
        public partial class CodecException
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region CryptoException
        public partial class CryptoException
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region CryptoInfo
        public partial class CryptoInfo
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.CryptoInfo.html#iv"/>
            /// </summary>
            public byte[] iv { get { return IGetFieldArray<byte>("iv"); } set { ISetField("iv", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.CryptoInfo.html#key"/>
            /// </summary>
            public byte[] key { get { return IGetFieldArray<byte>("key"); } set { ISetField("key", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.CryptoInfo.html#mode"/>
            /// </summary>
            public int mode { get { return IGetField<int>("mode"); } set { ISetField("mode", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.CryptoInfo.html#numSubSamples"/>
            /// </summary>
            public int numSubSamples { get { return IGetField<int>("numSubSamples"); } set { ISetField("numSubSamples", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.CryptoInfo.html#numBytesOfClearData"/>
            /// </summary>
            public int[] numBytesOfClearData { get { return IGetFieldArray<int>("numBytesOfClearData"); } set { ISetField("numBytesOfClearData", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.CryptoInfo.html#numBytesOfEncryptedData"/>
            /// </summary>
            public int[] numBytesOfEncryptedData { get { return IGetFieldArray<int>("numBytesOfEncryptedData"); } set { ISetField("numBytesOfEncryptedData", value); } }

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.CryptoInfo.html#getPattern()"/> <see href="https://developer.android.com/reference/android/media/MediaCodec.CryptoInfo.html#setPattern(android.media.MediaCodec.CryptoInfo.Pattern)"/>
            /// </summary>
            public Android.Media.MediaCodec.CryptoInfo.Pattern Pattern
            {
                get { return IExecuteWithSignature<Android.Media.MediaCodec.CryptoInfo.Pattern>("getPattern", "()Landroid/media/MediaCodec$CryptoInfo$Pattern;"); } set { IExecuteWithSignature("setPattern", "(Landroid/media/MediaCodec$CryptoInfo$Pattern;)V", value); }
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.CryptoInfo.html#set(int,int[],int[],byte[],byte[],int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="byte"/></param>
            /// <param name="arg4"><see cref="byte"/></param>
            /// <param name="arg5"><see cref="int"/></param>
            public void Set(int arg0, int[] arg1, int[] arg2, byte[] arg3, byte[] arg4, int arg5)
            {
                IExecute("set", arg0, arg1, arg2, arg3, arg4, arg5);
            }

            #endregion

            #region Nested classes
            #region Pattern
            public partial class Pattern
            {
                #region Constructors
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaCodec.CryptoInfo.Pattern.html#%3Cinit%3E(int,int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <param name="arg1"><see cref="int"/></param>
                public Pattern(int arg0, int arg1)
                    : base(arg0, arg1)
                {
                }

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields

                #endregion

                #region Static methods

                #endregion

                #region Instance methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaCodec.CryptoInfo.Pattern.html#getEncryptBlocks()"/> 
                /// </summary>
                public int EncryptBlocks
                {
                    get { return IExecuteWithSignature<int>("getEncryptBlocks", "()I"); }
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaCodec.CryptoInfo.Pattern.html#getSkipBlocks()"/> 
                /// </summary>
                public int SkipBlocks
                {
                    get { return IExecuteWithSignature<int>("getSkipBlocks", "()I"); }
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaCodec.CryptoInfo.Pattern.html#set(int,int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <param name="arg1"><see cref="int"/></param>
                public void Set(int arg0, int arg1)
                {
                    IExecute("set", arg0, arg1);
                }

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

        
            #endregion

            // TODO: complete the class
        }
        #endregion

        #region IncompatibleWithBlockModelException
        public partial class IncompatibleWithBlockModelException
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region InvalidBufferFlagsException
        public partial class InvalidBufferFlagsException
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region LinearBlock
        public partial class LinearBlock
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.LinearBlock.html#obtain(int,java.lang.String[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Media.MediaCodec.LinearBlock"/></returns>
            public static Android.Media.MediaCodec.LinearBlock Obtain(int arg0, Java.Lang.String[] arg1)
            {
                return SExecute<Android.Media.MediaCodec.LinearBlock>(LocalBridgeClazz, "obtain", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.LinearBlock.html#isCodecCopyFreeCompatible(java.lang.String[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="bool"/></returns>
            public static bool IsCodecCopyFreeCompatible(Java.Lang.String[] arg0)
            {
                return SExecuteWithSignature<bool>(LocalBridgeClazz, "isCodecCopyFreeCompatible", "([Ljava/lang/String;)Z", new object[] { arg0 });
            }

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.LinearBlock.html#isMappable()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsMappable()
            {
                return IExecuteWithSignature<bool>("isMappable", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.LinearBlock.html#map()"/>
            /// </summary>
            /// <returns><see cref="Java.Nio.ByteBuffer"/></returns>
            public Java.Nio.ByteBuffer Map()
            {
                return IExecuteWithSignature<Java.Nio.ByteBuffer>("map", "()Ljava/nio/ByteBuffer;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.LinearBlock.html#recycle()"/>
            /// </summary>
            public void Recycle()
            {
                IExecuteWithSignature("recycle", "()V");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region MetricsConstants
        public partial class MetricsConstants
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.MetricsConstants.html#CODEC"/>
            /// </summary>
            public static Java.Lang.String CODEC { get { if (!_CODECReady) { _CODECContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CODEC"); _CODECReady = true; } return _CODECContent; } }
            private static Java.Lang.String _CODECContent = default;
            private static bool _CODECReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.MetricsConstants.html#ENCODER"/>
            /// </summary>
            public static Java.Lang.String ENCODER { get { if (!_ENCODERReady) { _ENCODERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ENCODER"); _ENCODERReady = true; } return _ENCODERContent; } }
            private static Java.Lang.String _ENCODERContent = default;
            private static bool _ENCODERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.MetricsConstants.html#HEIGHT"/>
            /// </summary>
            public static Java.Lang.String HEIGHT { get { if (!_HEIGHTReady) { _HEIGHTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "HEIGHT"); _HEIGHTReady = true; } return _HEIGHTContent; } }
            private static Java.Lang.String _HEIGHTContent = default;
            private static bool _HEIGHTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.MetricsConstants.html#MIME_TYPE"/>
            /// </summary>
            public static Java.Lang.String MIME_TYPE { get { if (!_MIME_TYPEReady) { _MIME_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIME_TYPE"); _MIME_TYPEReady = true; } return _MIME_TYPEContent; } }
            private static Java.Lang.String _MIME_TYPEContent = default;
            private static bool _MIME_TYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.MetricsConstants.html#MODE"/>
            /// </summary>
            public static Java.Lang.String MODE { get { if (!_MODEReady) { _MODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MODE"); _MODEReady = true; } return _MODEContent; } }
            private static Java.Lang.String _MODEContent = default;
            private static bool _MODEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.MetricsConstants.html#MODE_AUDIO"/>
            /// </summary>
            public static Java.Lang.String MODE_AUDIO { get { if (!_MODE_AUDIOReady) { _MODE_AUDIOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MODE_AUDIO"); _MODE_AUDIOReady = true; } return _MODE_AUDIOContent; } }
            private static Java.Lang.String _MODE_AUDIOContent = default;
            private static bool _MODE_AUDIOReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.MetricsConstants.html#MODE_VIDEO"/>
            /// </summary>
            public static Java.Lang.String MODE_VIDEO { get { if (!_MODE_VIDEOReady) { _MODE_VIDEOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MODE_VIDEO"); _MODE_VIDEOReady = true; } return _MODE_VIDEOContent; } }
            private static Java.Lang.String _MODE_VIDEOContent = default;
            private static bool _MODE_VIDEOReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.MetricsConstants.html#ROTATION"/>
            /// </summary>
            public static Java.Lang.String ROTATION { get { if (!_ROTATIONReady) { _ROTATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ROTATION"); _ROTATIONReady = true; } return _ROTATIONContent; } }
            private static Java.Lang.String _ROTATIONContent = default;
            private static bool _ROTATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.MetricsConstants.html#SECURE"/>
            /// </summary>
            public static Java.Lang.String SECURE { get { if (!_SECUREReady) { _SECUREContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SECURE"); _SECUREReady = true; } return _SECUREContent; } }
            private static Java.Lang.String _SECUREContent = default;
            private static bool _SECUREReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.MetricsConstants.html#WIDTH"/>
            /// </summary>
            public static Java.Lang.String WIDTH { get { if (!_WIDTHReady) { _WIDTHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIDTH"); _WIDTHReady = true; } return _WIDTHContent; } }
            private static Java.Lang.String _WIDTHContent = default;
            private static bool _WIDTHReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnFirstTunnelFrameReadyListener
        public partial class OnFirstTunnelFrameReadyListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnFirstTunnelFrameReadyListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onFirstTunnelFrameReady", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Media.MediaCodec>>>(OnFirstTunnelFrameReadyEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/MediaCodec.OnFirstTunnelFrameReadyListener.html#onFirstTunnelFrameReady(android.media.MediaCodec)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnFirstTunnelFrameReady"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Media.MediaCodec> OnOnFirstTunnelFrameReady { get; set; } = null;

            void OnFirstTunnelFrameReadyEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Media.MediaCodec>> data)
            {
                var methodToExecute = (OnOnFirstTunnelFrameReady != null) ? OnOnFirstTunnelFrameReady : OnFirstTunnelFrameReady;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.OnFirstTunnelFrameReadyListener.html#onFirstTunnelFrameReady(android.media.MediaCodec)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaCodec"/></param>
            public virtual void OnFirstTunnelFrameReady(Android.Media.MediaCodec arg0)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnFirstTunnelFrameReadyListenerDirect
        public partial class OnFirstTunnelFrameReadyListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.OnFirstTunnelFrameReadyListener.html#onFirstTunnelFrameReady(android.media.MediaCodec)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaCodec"/></param>
            public override void OnFirstTunnelFrameReady(Android.Media.MediaCodec arg0)
            {
                IExecuteWithSignature("onFirstTunnelFrameReady", "(Landroid/media/MediaCodec;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnFrameRenderedListener
        public partial class OnFrameRenderedListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnFrameRenderedListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onFrameRendered", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Media.MediaCodec>>>(OnFrameRenderedEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/MediaCodec.OnFrameRenderedListener.html#onFrameRendered(android.media.MediaCodec,long,long)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnFrameRendered"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Media.MediaCodec, long, long> OnOnFrameRendered { get; set; } = null;

            void OnFrameRenderedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Media.MediaCodec>> data)
            {
                var methodToExecute = (OnOnFrameRendered != null) ? OnOnFrameRendered : OnFrameRendered;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<long>(0), data.EventData.GetAt<long>(1));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.OnFrameRenderedListener.html#onFrameRendered(android.media.MediaCodec,long,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaCodec"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <param name="arg2"><see cref="long"/></param>
            public virtual void OnFrameRendered(Android.Media.MediaCodec arg0, long arg1, long arg2)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnFrameRenderedListenerDirect
        public partial class OnFrameRenderedListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.OnFrameRenderedListener.html#onFrameRendered(android.media.MediaCodec,long,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaCodec"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <param name="arg2"><see cref="long"/></param>
            public override void OnFrameRendered(Android.Media.MediaCodec arg0, long arg1, long arg2)
            {
                IExecute("onFrameRendered", arg0, arg1, arg2);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OutputFrame
        public partial class OutputFrame
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.OutputFrame.html#getChangedKeys()"/> 
            /// </summary>
            public Java.Util.Set<Java.Lang.String> ChangedKeys
            {
                get { return IExecuteWithSignature<Java.Util.Set<Java.Lang.String>>("getChangedKeys", "()Ljava/util/Set;"); }
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.OutputFrame.html#getFlags()"/> 
            /// </summary>
            public int Flags
            {
                get { return IExecuteWithSignature<int>("getFlags", "()I"); }
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.OutputFrame.html#getFormat()"/> 
            /// </summary>
            public Android.Media.MediaFormat Format
            {
                get { return IExecuteWithSignature<Android.Media.MediaFormat>("getFormat", "()Landroid/media/MediaFormat;"); }
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.OutputFrame.html#getLinearBlock()"/> 
            /// </summary>
            public Android.Media.MediaCodec.LinearBlock GetLinearBlock
            {
                get { return IExecuteWithSignature<Android.Media.MediaCodec.LinearBlock>("getLinearBlock", "()Landroid/media/MediaCodec$LinearBlock;"); }
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.OutputFrame.html#getHardwareBuffer()"/> 
            /// </summary>
            public Android.Hardware.HardwareBuffer HardwareBuffer
            {
                get { return IExecuteWithSignature<Android.Hardware.HardwareBuffer>("getHardwareBuffer", "()Landroid/hardware/HardwareBuffer;"); }
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.OutputFrame.html#getPresentationTimeUs()"/> 
            /// </summary>
            public long PresentationTimeUs
            {
                get { return IExecuteWithSignature<long>("getPresentationTimeUs", "()J"); }
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ParameterDescriptor
        public partial class ParameterDescriptor
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.ParameterDescriptor.html#getName()"/> 
            /// </summary>
            public Java.Lang.String Name
            {
                get { return IExecuteWithSignature<Java.Lang.String>("getName", "()Ljava/lang/String;"); }
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.ParameterDescriptor.html#getType()"/> 
            /// </summary>
            public int Type
            {
                get { return IExecuteWithSignature<int>("getType", "()I"); }
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region QueueRequest
        public partial class QueueRequest
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.QueueRequest.html#setByteBufferParameter(java.lang.String,java.nio.ByteBuffer)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Java.Nio.ByteBuffer"/></param>
            /// <returns><see cref="Android.Media.MediaCodec.QueueRequest"/></returns>
            public Android.Media.MediaCodec.QueueRequest SetByteBufferParameter(Java.Lang.String arg0, Java.Nio.ByteBuffer arg1)
            {
                return IExecute<Android.Media.MediaCodec.QueueRequest>("setByteBufferParameter", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.QueueRequest.html#setEncryptedLinearBlock(android.media.MediaCodec.LinearBlock,int,int,android.media.MediaCodec.CryptoInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaCodec.LinearBlock"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="Android.Media.MediaCodec.CryptoInfo"/></param>
            /// <returns><see cref="Android.Media.MediaCodec.QueueRequest"/></returns>
            public Android.Media.MediaCodec.QueueRequest SetEncryptedLinearBlock(Android.Media.MediaCodec.LinearBlock arg0, int arg1, int arg2, Android.Media.MediaCodec.CryptoInfo arg3)
            {
                return IExecute<Android.Media.MediaCodec.QueueRequest>("setEncryptedLinearBlock", arg0, arg1, arg2, arg3);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.QueueRequest.html#setFlags(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.MediaCodec.QueueRequest"/></returns>
            public Android.Media.MediaCodec.QueueRequest SetFlags(int arg0)
            {
                return IExecuteWithSignature<Android.Media.MediaCodec.QueueRequest>("setFlags", "(I)Landroid/media/MediaCodec$QueueRequest;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.QueueRequest.html#setFloatParameter(java.lang.String,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="float"/></param>
            /// <returns><see cref="Android.Media.MediaCodec.QueueRequest"/></returns>
            public Android.Media.MediaCodec.QueueRequest SetFloatParameter(Java.Lang.String arg0, float arg1)
            {
                return IExecute<Android.Media.MediaCodec.QueueRequest>("setFloatParameter", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.QueueRequest.html#setHardwareBuffer(android.hardware.HardwareBuffer)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Hardware.HardwareBuffer"/></param>
            /// <returns><see cref="Android.Media.MediaCodec.QueueRequest"/></returns>
            public Android.Media.MediaCodec.QueueRequest SetHardwareBuffer(Android.Hardware.HardwareBuffer arg0)
            {
                return IExecuteWithSignature<Android.Media.MediaCodec.QueueRequest>("setHardwareBuffer", "(Landroid/hardware/HardwareBuffer;)Landroid/media/MediaCodec$QueueRequest;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.QueueRequest.html#setIntegerParameter(java.lang.String,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.MediaCodec.QueueRequest"/></returns>
            public Android.Media.MediaCodec.QueueRequest SetIntegerParameter(Java.Lang.String arg0, int arg1)
            {
                return IExecute<Android.Media.MediaCodec.QueueRequest>("setIntegerParameter", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.QueueRequest.html#setLinearBlock(android.media.MediaCodec.LinearBlock,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaCodec.LinearBlock"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.MediaCodec.QueueRequest"/></returns>
            public Android.Media.MediaCodec.QueueRequest SetLinearBlock(Android.Media.MediaCodec.LinearBlock arg0, int arg1, int arg2)
            {
                return IExecute<Android.Media.MediaCodec.QueueRequest>("setLinearBlock", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.QueueRequest.html#setLongParameter(java.lang.String,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <returns><see cref="Android.Media.MediaCodec.QueueRequest"/></returns>
            public Android.Media.MediaCodec.QueueRequest SetLongParameter(Java.Lang.String arg0, long arg1)
            {
                return IExecute<Android.Media.MediaCodec.QueueRequest>("setLongParameter", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.QueueRequest.html#setPresentationTimeUs(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.Media.MediaCodec.QueueRequest"/></returns>
            public Android.Media.MediaCodec.QueueRequest SetPresentationTimeUs(long arg0)
            {
                return IExecuteWithSignature<Android.Media.MediaCodec.QueueRequest>("setPresentationTimeUs", "(J)Landroid/media/MediaCodec$QueueRequest;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.QueueRequest.html#setStringParameter(java.lang.String,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Media.MediaCodec.QueueRequest"/></returns>
            public Android.Media.MediaCodec.QueueRequest SetStringParameter(Java.Lang.String arg0, Java.Lang.String arg1)
            {
                return IExecute<Android.Media.MediaCodec.QueueRequest>("setStringParameter", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodec.QueueRequest.html#queue()"/>
            /// </summary>
            public void Queue()
            {
                IExecuteWithSignature("queue", "()V");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
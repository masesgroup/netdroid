/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media
{
    #region ToneGenerator
    public partial class ToneGenerator
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#%3Cinit%3E(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public ToneGenerator(int arg0, int arg1)
            : base(arg0, arg1)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#MAX_VOLUME"/>
        /// </summary>
        public static int MAX_VOLUME { get { if (!_MAX_VOLUMEReady) { _MAX_VOLUMEContent = SGetField<int>(LocalBridgeClazz, "MAX_VOLUME"); _MAX_VOLUMEReady = true; } return _MAX_VOLUMEContent; } }
        private static int _MAX_VOLUMEContent = default;
        private static bool _MAX_VOLUMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#MIN_VOLUME"/>
        /// </summary>
        public static int MIN_VOLUME { get { if (!_MIN_VOLUMEReady) { _MIN_VOLUMEContent = SGetField<int>(LocalBridgeClazz, "MIN_VOLUME"); _MIN_VOLUMEReady = true; } return _MIN_VOLUMEContent; } }
        private static int _MIN_VOLUMEContent = default;
        private static bool _MIN_VOLUMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_ABBR_ALERT"/>
        /// </summary>
        public static int TONE_CDMA_ABBR_ALERT { get { if (!_TONE_CDMA_ABBR_ALERTReady) { _TONE_CDMA_ABBR_ALERTContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_ABBR_ALERT"); _TONE_CDMA_ABBR_ALERTReady = true; } return _TONE_CDMA_ABBR_ALERTContent; } }
        private static int _TONE_CDMA_ABBR_ALERTContent = default;
        private static bool _TONE_CDMA_ABBR_ALERTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_ABBR_INTERCEPT"/>
        /// </summary>
        public static int TONE_CDMA_ABBR_INTERCEPT { get { if (!_TONE_CDMA_ABBR_INTERCEPTReady) { _TONE_CDMA_ABBR_INTERCEPTContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_ABBR_INTERCEPT"); _TONE_CDMA_ABBR_INTERCEPTReady = true; } return _TONE_CDMA_ABBR_INTERCEPTContent; } }
        private static int _TONE_CDMA_ABBR_INTERCEPTContent = default;
        private static bool _TONE_CDMA_ABBR_INTERCEPTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_ABBR_REORDER"/>
        /// </summary>
        public static int TONE_CDMA_ABBR_REORDER { get { if (!_TONE_CDMA_ABBR_REORDERReady) { _TONE_CDMA_ABBR_REORDERContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_ABBR_REORDER"); _TONE_CDMA_ABBR_REORDERReady = true; } return _TONE_CDMA_ABBR_REORDERContent; } }
        private static int _TONE_CDMA_ABBR_REORDERContent = default;
        private static bool _TONE_CDMA_ABBR_REORDERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_ALERT_AUTOREDIAL_LITE"/>
        /// </summary>
        public static int TONE_CDMA_ALERT_AUTOREDIAL_LITE { get { if (!_TONE_CDMA_ALERT_AUTOREDIAL_LITEReady) { _TONE_CDMA_ALERT_AUTOREDIAL_LITEContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_ALERT_AUTOREDIAL_LITE"); _TONE_CDMA_ALERT_AUTOREDIAL_LITEReady = true; } return _TONE_CDMA_ALERT_AUTOREDIAL_LITEContent; } }
        private static int _TONE_CDMA_ALERT_AUTOREDIAL_LITEContent = default;
        private static bool _TONE_CDMA_ALERT_AUTOREDIAL_LITEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_ALERT_CALL_GUARD"/>
        /// </summary>
        public static int TONE_CDMA_ALERT_CALL_GUARD { get { if (!_TONE_CDMA_ALERT_CALL_GUARDReady) { _TONE_CDMA_ALERT_CALL_GUARDContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_ALERT_CALL_GUARD"); _TONE_CDMA_ALERT_CALL_GUARDReady = true; } return _TONE_CDMA_ALERT_CALL_GUARDContent; } }
        private static int _TONE_CDMA_ALERT_CALL_GUARDContent = default;
        private static bool _TONE_CDMA_ALERT_CALL_GUARDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_ALERT_INCALL_LITE"/>
        /// </summary>
        public static int TONE_CDMA_ALERT_INCALL_LITE { get { if (!_TONE_CDMA_ALERT_INCALL_LITEReady) { _TONE_CDMA_ALERT_INCALL_LITEContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_ALERT_INCALL_LITE"); _TONE_CDMA_ALERT_INCALL_LITEReady = true; } return _TONE_CDMA_ALERT_INCALL_LITEContent; } }
        private static int _TONE_CDMA_ALERT_INCALL_LITEContent = default;
        private static bool _TONE_CDMA_ALERT_INCALL_LITEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_ALERT_NETWORK_LITE"/>
        /// </summary>
        public static int TONE_CDMA_ALERT_NETWORK_LITE { get { if (!_TONE_CDMA_ALERT_NETWORK_LITEReady) { _TONE_CDMA_ALERT_NETWORK_LITEContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_ALERT_NETWORK_LITE"); _TONE_CDMA_ALERT_NETWORK_LITEReady = true; } return _TONE_CDMA_ALERT_NETWORK_LITEContent; } }
        private static int _TONE_CDMA_ALERT_NETWORK_LITEContent = default;
        private static bool _TONE_CDMA_ALERT_NETWORK_LITEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_ANSWER"/>
        /// </summary>
        public static int TONE_CDMA_ANSWER { get { if (!_TONE_CDMA_ANSWERReady) { _TONE_CDMA_ANSWERContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_ANSWER"); _TONE_CDMA_ANSWERReady = true; } return _TONE_CDMA_ANSWERContent; } }
        private static int _TONE_CDMA_ANSWERContent = default;
        private static bool _TONE_CDMA_ANSWERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_CALL_SIGNAL_ISDN_INTERGROUP"/>
        /// </summary>
        public static int TONE_CDMA_CALL_SIGNAL_ISDN_INTERGROUP { get { if (!_TONE_CDMA_CALL_SIGNAL_ISDN_INTERGROUPReady) { _TONE_CDMA_CALL_SIGNAL_ISDN_INTERGROUPContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_CALL_SIGNAL_ISDN_INTERGROUP"); _TONE_CDMA_CALL_SIGNAL_ISDN_INTERGROUPReady = true; } return _TONE_CDMA_CALL_SIGNAL_ISDN_INTERGROUPContent; } }
        private static int _TONE_CDMA_CALL_SIGNAL_ISDN_INTERGROUPContent = default;
        private static bool _TONE_CDMA_CALL_SIGNAL_ISDN_INTERGROUPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_CALL_SIGNAL_ISDN_NORMAL"/>
        /// </summary>
        public static int TONE_CDMA_CALL_SIGNAL_ISDN_NORMAL { get { if (!_TONE_CDMA_CALL_SIGNAL_ISDN_NORMALReady) { _TONE_CDMA_CALL_SIGNAL_ISDN_NORMALContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_CALL_SIGNAL_ISDN_NORMAL"); _TONE_CDMA_CALL_SIGNAL_ISDN_NORMALReady = true; } return _TONE_CDMA_CALL_SIGNAL_ISDN_NORMALContent; } }
        private static int _TONE_CDMA_CALL_SIGNAL_ISDN_NORMALContent = default;
        private static bool _TONE_CDMA_CALL_SIGNAL_ISDN_NORMALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_CALL_SIGNAL_ISDN_PAT3"/>
        /// </summary>
        public static int TONE_CDMA_CALL_SIGNAL_ISDN_PAT3 { get { if (!_TONE_CDMA_CALL_SIGNAL_ISDN_PAT3Ready) { _TONE_CDMA_CALL_SIGNAL_ISDN_PAT3Content = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_CALL_SIGNAL_ISDN_PAT3"); _TONE_CDMA_CALL_SIGNAL_ISDN_PAT3Ready = true; } return _TONE_CDMA_CALL_SIGNAL_ISDN_PAT3Content; } }
        private static int _TONE_CDMA_CALL_SIGNAL_ISDN_PAT3Content = default;
        private static bool _TONE_CDMA_CALL_SIGNAL_ISDN_PAT3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_CALL_SIGNAL_ISDN_PAT5"/>
        /// </summary>
        public static int TONE_CDMA_CALL_SIGNAL_ISDN_PAT5 { get { if (!_TONE_CDMA_CALL_SIGNAL_ISDN_PAT5Ready) { _TONE_CDMA_CALL_SIGNAL_ISDN_PAT5Content = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_CALL_SIGNAL_ISDN_PAT5"); _TONE_CDMA_CALL_SIGNAL_ISDN_PAT5Ready = true; } return _TONE_CDMA_CALL_SIGNAL_ISDN_PAT5Content; } }
        private static int _TONE_CDMA_CALL_SIGNAL_ISDN_PAT5Content = default;
        private static bool _TONE_CDMA_CALL_SIGNAL_ISDN_PAT5Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_CALL_SIGNAL_ISDN_PAT6"/>
        /// </summary>
        public static int TONE_CDMA_CALL_SIGNAL_ISDN_PAT6 { get { if (!_TONE_CDMA_CALL_SIGNAL_ISDN_PAT6Ready) { _TONE_CDMA_CALL_SIGNAL_ISDN_PAT6Content = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_CALL_SIGNAL_ISDN_PAT6"); _TONE_CDMA_CALL_SIGNAL_ISDN_PAT6Ready = true; } return _TONE_CDMA_CALL_SIGNAL_ISDN_PAT6Content; } }
        private static int _TONE_CDMA_CALL_SIGNAL_ISDN_PAT6Content = default;
        private static bool _TONE_CDMA_CALL_SIGNAL_ISDN_PAT6Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_CALL_SIGNAL_ISDN_PAT7"/>
        /// </summary>
        public static int TONE_CDMA_CALL_SIGNAL_ISDN_PAT7 { get { if (!_TONE_CDMA_CALL_SIGNAL_ISDN_PAT7Ready) { _TONE_CDMA_CALL_SIGNAL_ISDN_PAT7Content = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_CALL_SIGNAL_ISDN_PAT7"); _TONE_CDMA_CALL_SIGNAL_ISDN_PAT7Ready = true; } return _TONE_CDMA_CALL_SIGNAL_ISDN_PAT7Content; } }
        private static int _TONE_CDMA_CALL_SIGNAL_ISDN_PAT7Content = default;
        private static bool _TONE_CDMA_CALL_SIGNAL_ISDN_PAT7Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_CALL_SIGNAL_ISDN_PING_RING"/>
        /// </summary>
        public static int TONE_CDMA_CALL_SIGNAL_ISDN_PING_RING { get { if (!_TONE_CDMA_CALL_SIGNAL_ISDN_PING_RINGReady) { _TONE_CDMA_CALL_SIGNAL_ISDN_PING_RINGContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_CALL_SIGNAL_ISDN_PING_RING"); _TONE_CDMA_CALL_SIGNAL_ISDN_PING_RINGReady = true; } return _TONE_CDMA_CALL_SIGNAL_ISDN_PING_RINGContent; } }
        private static int _TONE_CDMA_CALL_SIGNAL_ISDN_PING_RINGContent = default;
        private static bool _TONE_CDMA_CALL_SIGNAL_ISDN_PING_RINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_CALL_SIGNAL_ISDN_SP_PRI"/>
        /// </summary>
        public static int TONE_CDMA_CALL_SIGNAL_ISDN_SP_PRI { get { if (!_TONE_CDMA_CALL_SIGNAL_ISDN_SP_PRIReady) { _TONE_CDMA_CALL_SIGNAL_ISDN_SP_PRIContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_CALL_SIGNAL_ISDN_SP_PRI"); _TONE_CDMA_CALL_SIGNAL_ISDN_SP_PRIReady = true; } return _TONE_CDMA_CALL_SIGNAL_ISDN_SP_PRIContent; } }
        private static int _TONE_CDMA_CALL_SIGNAL_ISDN_SP_PRIContent = default;
        private static bool _TONE_CDMA_CALL_SIGNAL_ISDN_SP_PRIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_CALLDROP_LITE"/>
        /// </summary>
        public static int TONE_CDMA_CALLDROP_LITE { get { if (!_TONE_CDMA_CALLDROP_LITEReady) { _TONE_CDMA_CALLDROP_LITEContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_CALLDROP_LITE"); _TONE_CDMA_CALLDROP_LITEReady = true; } return _TONE_CDMA_CALLDROP_LITEContent; } }
        private static int _TONE_CDMA_CALLDROP_LITEContent = default;
        private static bool _TONE_CDMA_CALLDROP_LITEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_CONFIRM"/>
        /// </summary>
        public static int TONE_CDMA_CONFIRM { get { if (!_TONE_CDMA_CONFIRMReady) { _TONE_CDMA_CONFIRMContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_CONFIRM"); _TONE_CDMA_CONFIRMReady = true; } return _TONE_CDMA_CONFIRMContent; } }
        private static int _TONE_CDMA_CONFIRMContent = default;
        private static bool _TONE_CDMA_CONFIRMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_DIAL_TONE_LITE"/>
        /// </summary>
        public static int TONE_CDMA_DIAL_TONE_LITE { get { if (!_TONE_CDMA_DIAL_TONE_LITEReady) { _TONE_CDMA_DIAL_TONE_LITEContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_DIAL_TONE_LITE"); _TONE_CDMA_DIAL_TONE_LITEReady = true; } return _TONE_CDMA_DIAL_TONE_LITEContent; } }
        private static int _TONE_CDMA_DIAL_TONE_LITEContent = default;
        private static bool _TONE_CDMA_DIAL_TONE_LITEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_EMERGENCY_RINGBACK"/>
        /// </summary>
        public static int TONE_CDMA_EMERGENCY_RINGBACK { get { if (!_TONE_CDMA_EMERGENCY_RINGBACKReady) { _TONE_CDMA_EMERGENCY_RINGBACKContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_EMERGENCY_RINGBACK"); _TONE_CDMA_EMERGENCY_RINGBACKReady = true; } return _TONE_CDMA_EMERGENCY_RINGBACKContent; } }
        private static int _TONE_CDMA_EMERGENCY_RINGBACKContent = default;
        private static bool _TONE_CDMA_EMERGENCY_RINGBACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_HIGH_L"/>
        /// </summary>
        public static int TONE_CDMA_HIGH_L { get { if (!_TONE_CDMA_HIGH_LReady) { _TONE_CDMA_HIGH_LContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_HIGH_L"); _TONE_CDMA_HIGH_LReady = true; } return _TONE_CDMA_HIGH_LContent; } }
        private static int _TONE_CDMA_HIGH_LContent = default;
        private static bool _TONE_CDMA_HIGH_LReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_HIGH_PBX_L"/>
        /// </summary>
        public static int TONE_CDMA_HIGH_PBX_L { get { if (!_TONE_CDMA_HIGH_PBX_LReady) { _TONE_CDMA_HIGH_PBX_LContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_HIGH_PBX_L"); _TONE_CDMA_HIGH_PBX_LReady = true; } return _TONE_CDMA_HIGH_PBX_LContent; } }
        private static int _TONE_CDMA_HIGH_PBX_LContent = default;
        private static bool _TONE_CDMA_HIGH_PBX_LReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_HIGH_PBX_S_X4"/>
        /// </summary>
        public static int TONE_CDMA_HIGH_PBX_S_X4 { get { if (!_TONE_CDMA_HIGH_PBX_S_X4Ready) { _TONE_CDMA_HIGH_PBX_S_X4Content = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_HIGH_PBX_S_X4"); _TONE_CDMA_HIGH_PBX_S_X4Ready = true; } return _TONE_CDMA_HIGH_PBX_S_X4Content; } }
        private static int _TONE_CDMA_HIGH_PBX_S_X4Content = default;
        private static bool _TONE_CDMA_HIGH_PBX_S_X4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_HIGH_PBX_SLS"/>
        /// </summary>
        public static int TONE_CDMA_HIGH_PBX_SLS { get { if (!_TONE_CDMA_HIGH_PBX_SLSReady) { _TONE_CDMA_HIGH_PBX_SLSContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_HIGH_PBX_SLS"); _TONE_CDMA_HIGH_PBX_SLSReady = true; } return _TONE_CDMA_HIGH_PBX_SLSContent; } }
        private static int _TONE_CDMA_HIGH_PBX_SLSContent = default;
        private static bool _TONE_CDMA_HIGH_PBX_SLSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_HIGH_PBX_SS"/>
        /// </summary>
        public static int TONE_CDMA_HIGH_PBX_SS { get { if (!_TONE_CDMA_HIGH_PBX_SSReady) { _TONE_CDMA_HIGH_PBX_SSContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_HIGH_PBX_SS"); _TONE_CDMA_HIGH_PBX_SSReady = true; } return _TONE_CDMA_HIGH_PBX_SSContent; } }
        private static int _TONE_CDMA_HIGH_PBX_SSContent = default;
        private static bool _TONE_CDMA_HIGH_PBX_SSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_HIGH_PBX_SSL"/>
        /// </summary>
        public static int TONE_CDMA_HIGH_PBX_SSL { get { if (!_TONE_CDMA_HIGH_PBX_SSLReady) { _TONE_CDMA_HIGH_PBX_SSLContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_HIGH_PBX_SSL"); _TONE_CDMA_HIGH_PBX_SSLReady = true; } return _TONE_CDMA_HIGH_PBX_SSLContent; } }
        private static int _TONE_CDMA_HIGH_PBX_SSLContent = default;
        private static bool _TONE_CDMA_HIGH_PBX_SSLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_HIGH_S_X4"/>
        /// </summary>
        public static int TONE_CDMA_HIGH_S_X4 { get { if (!_TONE_CDMA_HIGH_S_X4Ready) { _TONE_CDMA_HIGH_S_X4Content = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_HIGH_S_X4"); _TONE_CDMA_HIGH_S_X4Ready = true; } return _TONE_CDMA_HIGH_S_X4Content; } }
        private static int _TONE_CDMA_HIGH_S_X4Content = default;
        private static bool _TONE_CDMA_HIGH_S_X4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_HIGH_SLS"/>
        /// </summary>
        public static int TONE_CDMA_HIGH_SLS { get { if (!_TONE_CDMA_HIGH_SLSReady) { _TONE_CDMA_HIGH_SLSContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_HIGH_SLS"); _TONE_CDMA_HIGH_SLSReady = true; } return _TONE_CDMA_HIGH_SLSContent; } }
        private static int _TONE_CDMA_HIGH_SLSContent = default;
        private static bool _TONE_CDMA_HIGH_SLSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_HIGH_SS"/>
        /// </summary>
        public static int TONE_CDMA_HIGH_SS { get { if (!_TONE_CDMA_HIGH_SSReady) { _TONE_CDMA_HIGH_SSContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_HIGH_SS"); _TONE_CDMA_HIGH_SSReady = true; } return _TONE_CDMA_HIGH_SSContent; } }
        private static int _TONE_CDMA_HIGH_SSContent = default;
        private static bool _TONE_CDMA_HIGH_SSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_HIGH_SS_2"/>
        /// </summary>
        public static int TONE_CDMA_HIGH_SS_2 { get { if (!_TONE_CDMA_HIGH_SS_2Ready) { _TONE_CDMA_HIGH_SS_2Content = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_HIGH_SS_2"); _TONE_CDMA_HIGH_SS_2Ready = true; } return _TONE_CDMA_HIGH_SS_2Content; } }
        private static int _TONE_CDMA_HIGH_SS_2Content = default;
        private static bool _TONE_CDMA_HIGH_SS_2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_HIGH_SSL"/>
        /// </summary>
        public static int TONE_CDMA_HIGH_SSL { get { if (!_TONE_CDMA_HIGH_SSLReady) { _TONE_CDMA_HIGH_SSLContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_HIGH_SSL"); _TONE_CDMA_HIGH_SSLReady = true; } return _TONE_CDMA_HIGH_SSLContent; } }
        private static int _TONE_CDMA_HIGH_SSLContent = default;
        private static bool _TONE_CDMA_HIGH_SSLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_INTERCEPT"/>
        /// </summary>
        public static int TONE_CDMA_INTERCEPT { get { if (!_TONE_CDMA_INTERCEPTReady) { _TONE_CDMA_INTERCEPTContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_INTERCEPT"); _TONE_CDMA_INTERCEPTReady = true; } return _TONE_CDMA_INTERCEPTContent; } }
        private static int _TONE_CDMA_INTERCEPTContent = default;
        private static bool _TONE_CDMA_INTERCEPTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_KEYPAD_VOLUME_KEY_LITE"/>
        /// </summary>
        public static int TONE_CDMA_KEYPAD_VOLUME_KEY_LITE { get { if (!_TONE_CDMA_KEYPAD_VOLUME_KEY_LITEReady) { _TONE_CDMA_KEYPAD_VOLUME_KEY_LITEContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_KEYPAD_VOLUME_KEY_LITE"); _TONE_CDMA_KEYPAD_VOLUME_KEY_LITEReady = true; } return _TONE_CDMA_KEYPAD_VOLUME_KEY_LITEContent; } }
        private static int _TONE_CDMA_KEYPAD_VOLUME_KEY_LITEContent = default;
        private static bool _TONE_CDMA_KEYPAD_VOLUME_KEY_LITEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_LOW_L"/>
        /// </summary>
        public static int TONE_CDMA_LOW_L { get { if (!_TONE_CDMA_LOW_LReady) { _TONE_CDMA_LOW_LContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_LOW_L"); _TONE_CDMA_LOW_LReady = true; } return _TONE_CDMA_LOW_LContent; } }
        private static int _TONE_CDMA_LOW_LContent = default;
        private static bool _TONE_CDMA_LOW_LReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_LOW_PBX_L"/>
        /// </summary>
        public static int TONE_CDMA_LOW_PBX_L { get { if (!_TONE_CDMA_LOW_PBX_LReady) { _TONE_CDMA_LOW_PBX_LContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_LOW_PBX_L"); _TONE_CDMA_LOW_PBX_LReady = true; } return _TONE_CDMA_LOW_PBX_LContent; } }
        private static int _TONE_CDMA_LOW_PBX_LContent = default;
        private static bool _TONE_CDMA_LOW_PBX_LReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_LOW_PBX_S_X4"/>
        /// </summary>
        public static int TONE_CDMA_LOW_PBX_S_X4 { get { if (!_TONE_CDMA_LOW_PBX_S_X4Ready) { _TONE_CDMA_LOW_PBX_S_X4Content = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_LOW_PBX_S_X4"); _TONE_CDMA_LOW_PBX_S_X4Ready = true; } return _TONE_CDMA_LOW_PBX_S_X4Content; } }
        private static int _TONE_CDMA_LOW_PBX_S_X4Content = default;
        private static bool _TONE_CDMA_LOW_PBX_S_X4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_LOW_PBX_SLS"/>
        /// </summary>
        public static int TONE_CDMA_LOW_PBX_SLS { get { if (!_TONE_CDMA_LOW_PBX_SLSReady) { _TONE_CDMA_LOW_PBX_SLSContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_LOW_PBX_SLS"); _TONE_CDMA_LOW_PBX_SLSReady = true; } return _TONE_CDMA_LOW_PBX_SLSContent; } }
        private static int _TONE_CDMA_LOW_PBX_SLSContent = default;
        private static bool _TONE_CDMA_LOW_PBX_SLSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_LOW_PBX_SS"/>
        /// </summary>
        public static int TONE_CDMA_LOW_PBX_SS { get { if (!_TONE_CDMA_LOW_PBX_SSReady) { _TONE_CDMA_LOW_PBX_SSContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_LOW_PBX_SS"); _TONE_CDMA_LOW_PBX_SSReady = true; } return _TONE_CDMA_LOW_PBX_SSContent; } }
        private static int _TONE_CDMA_LOW_PBX_SSContent = default;
        private static bool _TONE_CDMA_LOW_PBX_SSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_LOW_PBX_SSL"/>
        /// </summary>
        public static int TONE_CDMA_LOW_PBX_SSL { get { if (!_TONE_CDMA_LOW_PBX_SSLReady) { _TONE_CDMA_LOW_PBX_SSLContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_LOW_PBX_SSL"); _TONE_CDMA_LOW_PBX_SSLReady = true; } return _TONE_CDMA_LOW_PBX_SSLContent; } }
        private static int _TONE_CDMA_LOW_PBX_SSLContent = default;
        private static bool _TONE_CDMA_LOW_PBX_SSLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_LOW_S_X4"/>
        /// </summary>
        public static int TONE_CDMA_LOW_S_X4 { get { if (!_TONE_CDMA_LOW_S_X4Ready) { _TONE_CDMA_LOW_S_X4Content = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_LOW_S_X4"); _TONE_CDMA_LOW_S_X4Ready = true; } return _TONE_CDMA_LOW_S_X4Content; } }
        private static int _TONE_CDMA_LOW_S_X4Content = default;
        private static bool _TONE_CDMA_LOW_S_X4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_LOW_SLS"/>
        /// </summary>
        public static int TONE_CDMA_LOW_SLS { get { if (!_TONE_CDMA_LOW_SLSReady) { _TONE_CDMA_LOW_SLSContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_LOW_SLS"); _TONE_CDMA_LOW_SLSReady = true; } return _TONE_CDMA_LOW_SLSContent; } }
        private static int _TONE_CDMA_LOW_SLSContent = default;
        private static bool _TONE_CDMA_LOW_SLSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_LOW_SS"/>
        /// </summary>
        public static int TONE_CDMA_LOW_SS { get { if (!_TONE_CDMA_LOW_SSReady) { _TONE_CDMA_LOW_SSContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_LOW_SS"); _TONE_CDMA_LOW_SSReady = true; } return _TONE_CDMA_LOW_SSContent; } }
        private static int _TONE_CDMA_LOW_SSContent = default;
        private static bool _TONE_CDMA_LOW_SSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_LOW_SS_2"/>
        /// </summary>
        public static int TONE_CDMA_LOW_SS_2 { get { if (!_TONE_CDMA_LOW_SS_2Ready) { _TONE_CDMA_LOW_SS_2Content = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_LOW_SS_2"); _TONE_CDMA_LOW_SS_2Ready = true; } return _TONE_CDMA_LOW_SS_2Content; } }
        private static int _TONE_CDMA_LOW_SS_2Content = default;
        private static bool _TONE_CDMA_LOW_SS_2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_LOW_SSL"/>
        /// </summary>
        public static int TONE_CDMA_LOW_SSL { get { if (!_TONE_CDMA_LOW_SSLReady) { _TONE_CDMA_LOW_SSLContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_LOW_SSL"); _TONE_CDMA_LOW_SSLReady = true; } return _TONE_CDMA_LOW_SSLContent; } }
        private static int _TONE_CDMA_LOW_SSLContent = default;
        private static bool _TONE_CDMA_LOW_SSLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_MED_L"/>
        /// </summary>
        public static int TONE_CDMA_MED_L { get { if (!_TONE_CDMA_MED_LReady) { _TONE_CDMA_MED_LContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_MED_L"); _TONE_CDMA_MED_LReady = true; } return _TONE_CDMA_MED_LContent; } }
        private static int _TONE_CDMA_MED_LContent = default;
        private static bool _TONE_CDMA_MED_LReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_MED_PBX_L"/>
        /// </summary>
        public static int TONE_CDMA_MED_PBX_L { get { if (!_TONE_CDMA_MED_PBX_LReady) { _TONE_CDMA_MED_PBX_LContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_MED_PBX_L"); _TONE_CDMA_MED_PBX_LReady = true; } return _TONE_CDMA_MED_PBX_LContent; } }
        private static int _TONE_CDMA_MED_PBX_LContent = default;
        private static bool _TONE_CDMA_MED_PBX_LReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_MED_PBX_S_X4"/>
        /// </summary>
        public static int TONE_CDMA_MED_PBX_S_X4 { get { if (!_TONE_CDMA_MED_PBX_S_X4Ready) { _TONE_CDMA_MED_PBX_S_X4Content = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_MED_PBX_S_X4"); _TONE_CDMA_MED_PBX_S_X4Ready = true; } return _TONE_CDMA_MED_PBX_S_X4Content; } }
        private static int _TONE_CDMA_MED_PBX_S_X4Content = default;
        private static bool _TONE_CDMA_MED_PBX_S_X4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_MED_PBX_SLS"/>
        /// </summary>
        public static int TONE_CDMA_MED_PBX_SLS { get { if (!_TONE_CDMA_MED_PBX_SLSReady) { _TONE_CDMA_MED_PBX_SLSContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_MED_PBX_SLS"); _TONE_CDMA_MED_PBX_SLSReady = true; } return _TONE_CDMA_MED_PBX_SLSContent; } }
        private static int _TONE_CDMA_MED_PBX_SLSContent = default;
        private static bool _TONE_CDMA_MED_PBX_SLSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_MED_PBX_SS"/>
        /// </summary>
        public static int TONE_CDMA_MED_PBX_SS { get { if (!_TONE_CDMA_MED_PBX_SSReady) { _TONE_CDMA_MED_PBX_SSContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_MED_PBX_SS"); _TONE_CDMA_MED_PBX_SSReady = true; } return _TONE_CDMA_MED_PBX_SSContent; } }
        private static int _TONE_CDMA_MED_PBX_SSContent = default;
        private static bool _TONE_CDMA_MED_PBX_SSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_MED_PBX_SSL"/>
        /// </summary>
        public static int TONE_CDMA_MED_PBX_SSL { get { if (!_TONE_CDMA_MED_PBX_SSLReady) { _TONE_CDMA_MED_PBX_SSLContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_MED_PBX_SSL"); _TONE_CDMA_MED_PBX_SSLReady = true; } return _TONE_CDMA_MED_PBX_SSLContent; } }
        private static int _TONE_CDMA_MED_PBX_SSLContent = default;
        private static bool _TONE_CDMA_MED_PBX_SSLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_MED_S_X4"/>
        /// </summary>
        public static int TONE_CDMA_MED_S_X4 { get { if (!_TONE_CDMA_MED_S_X4Ready) { _TONE_CDMA_MED_S_X4Content = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_MED_S_X4"); _TONE_CDMA_MED_S_X4Ready = true; } return _TONE_CDMA_MED_S_X4Content; } }
        private static int _TONE_CDMA_MED_S_X4Content = default;
        private static bool _TONE_CDMA_MED_S_X4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_MED_SLS"/>
        /// </summary>
        public static int TONE_CDMA_MED_SLS { get { if (!_TONE_CDMA_MED_SLSReady) { _TONE_CDMA_MED_SLSContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_MED_SLS"); _TONE_CDMA_MED_SLSReady = true; } return _TONE_CDMA_MED_SLSContent; } }
        private static int _TONE_CDMA_MED_SLSContent = default;
        private static bool _TONE_CDMA_MED_SLSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_MED_SS"/>
        /// </summary>
        public static int TONE_CDMA_MED_SS { get { if (!_TONE_CDMA_MED_SSReady) { _TONE_CDMA_MED_SSContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_MED_SS"); _TONE_CDMA_MED_SSReady = true; } return _TONE_CDMA_MED_SSContent; } }
        private static int _TONE_CDMA_MED_SSContent = default;
        private static bool _TONE_CDMA_MED_SSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_MED_SS_2"/>
        /// </summary>
        public static int TONE_CDMA_MED_SS_2 { get { if (!_TONE_CDMA_MED_SS_2Ready) { _TONE_CDMA_MED_SS_2Content = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_MED_SS_2"); _TONE_CDMA_MED_SS_2Ready = true; } return _TONE_CDMA_MED_SS_2Content; } }
        private static int _TONE_CDMA_MED_SS_2Content = default;
        private static bool _TONE_CDMA_MED_SS_2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_MED_SSL"/>
        /// </summary>
        public static int TONE_CDMA_MED_SSL { get { if (!_TONE_CDMA_MED_SSLReady) { _TONE_CDMA_MED_SSLContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_MED_SSL"); _TONE_CDMA_MED_SSLReady = true; } return _TONE_CDMA_MED_SSLContent; } }
        private static int _TONE_CDMA_MED_SSLContent = default;
        private static bool _TONE_CDMA_MED_SSLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_NETWORK_BUSY"/>
        /// </summary>
        public static int TONE_CDMA_NETWORK_BUSY { get { if (!_TONE_CDMA_NETWORK_BUSYReady) { _TONE_CDMA_NETWORK_BUSYContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_NETWORK_BUSY"); _TONE_CDMA_NETWORK_BUSYReady = true; } return _TONE_CDMA_NETWORK_BUSYContent; } }
        private static int _TONE_CDMA_NETWORK_BUSYContent = default;
        private static bool _TONE_CDMA_NETWORK_BUSYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_NETWORK_BUSY_ONE_SHOT"/>
        /// </summary>
        public static int TONE_CDMA_NETWORK_BUSY_ONE_SHOT { get { if (!_TONE_CDMA_NETWORK_BUSY_ONE_SHOTReady) { _TONE_CDMA_NETWORK_BUSY_ONE_SHOTContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_NETWORK_BUSY_ONE_SHOT"); _TONE_CDMA_NETWORK_BUSY_ONE_SHOTReady = true; } return _TONE_CDMA_NETWORK_BUSY_ONE_SHOTContent; } }
        private static int _TONE_CDMA_NETWORK_BUSY_ONE_SHOTContent = default;
        private static bool _TONE_CDMA_NETWORK_BUSY_ONE_SHOTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_NETWORK_CALLWAITING"/>
        /// </summary>
        public static int TONE_CDMA_NETWORK_CALLWAITING { get { if (!_TONE_CDMA_NETWORK_CALLWAITINGReady) { _TONE_CDMA_NETWORK_CALLWAITINGContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_NETWORK_CALLWAITING"); _TONE_CDMA_NETWORK_CALLWAITINGReady = true; } return _TONE_CDMA_NETWORK_CALLWAITINGContent; } }
        private static int _TONE_CDMA_NETWORK_CALLWAITINGContent = default;
        private static bool _TONE_CDMA_NETWORK_CALLWAITINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_NETWORK_USA_RINGBACK"/>
        /// </summary>
        public static int TONE_CDMA_NETWORK_USA_RINGBACK { get { if (!_TONE_CDMA_NETWORK_USA_RINGBACKReady) { _TONE_CDMA_NETWORK_USA_RINGBACKContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_NETWORK_USA_RINGBACK"); _TONE_CDMA_NETWORK_USA_RINGBACKReady = true; } return _TONE_CDMA_NETWORK_USA_RINGBACKContent; } }
        private static int _TONE_CDMA_NETWORK_USA_RINGBACKContent = default;
        private static bool _TONE_CDMA_NETWORK_USA_RINGBACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_ONE_MIN_BEEP"/>
        /// </summary>
        public static int TONE_CDMA_ONE_MIN_BEEP { get { if (!_TONE_CDMA_ONE_MIN_BEEPReady) { _TONE_CDMA_ONE_MIN_BEEPContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_ONE_MIN_BEEP"); _TONE_CDMA_ONE_MIN_BEEPReady = true; } return _TONE_CDMA_ONE_MIN_BEEPContent; } }
        private static int _TONE_CDMA_ONE_MIN_BEEPContent = default;
        private static bool _TONE_CDMA_ONE_MIN_BEEPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_PIP"/>
        /// </summary>
        public static int TONE_CDMA_PIP { get { if (!_TONE_CDMA_PIPReady) { _TONE_CDMA_PIPContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_PIP"); _TONE_CDMA_PIPReady = true; } return _TONE_CDMA_PIPContent; } }
        private static int _TONE_CDMA_PIPContent = default;
        private static bool _TONE_CDMA_PIPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_PRESSHOLDKEY_LITE"/>
        /// </summary>
        public static int TONE_CDMA_PRESSHOLDKEY_LITE { get { if (!_TONE_CDMA_PRESSHOLDKEY_LITEReady) { _TONE_CDMA_PRESSHOLDKEY_LITEContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_PRESSHOLDKEY_LITE"); _TONE_CDMA_PRESSHOLDKEY_LITEReady = true; } return _TONE_CDMA_PRESSHOLDKEY_LITEContent; } }
        private static int _TONE_CDMA_PRESSHOLDKEY_LITEContent = default;
        private static bool _TONE_CDMA_PRESSHOLDKEY_LITEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_REORDER"/>
        /// </summary>
        public static int TONE_CDMA_REORDER { get { if (!_TONE_CDMA_REORDERReady) { _TONE_CDMA_REORDERContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_REORDER"); _TONE_CDMA_REORDERReady = true; } return _TONE_CDMA_REORDERContent; } }
        private static int _TONE_CDMA_REORDERContent = default;
        private static bool _TONE_CDMA_REORDERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_SIGNAL_OFF"/>
        /// </summary>
        public static int TONE_CDMA_SIGNAL_OFF { get { if (!_TONE_CDMA_SIGNAL_OFFReady) { _TONE_CDMA_SIGNAL_OFFContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_SIGNAL_OFF"); _TONE_CDMA_SIGNAL_OFFReady = true; } return _TONE_CDMA_SIGNAL_OFFContent; } }
        private static int _TONE_CDMA_SIGNAL_OFFContent = default;
        private static bool _TONE_CDMA_SIGNAL_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_CDMA_SOFT_ERROR_LITE"/>
        /// </summary>
        public static int TONE_CDMA_SOFT_ERROR_LITE { get { if (!_TONE_CDMA_SOFT_ERROR_LITEReady) { _TONE_CDMA_SOFT_ERROR_LITEContent = SGetField<int>(LocalBridgeClazz, "TONE_CDMA_SOFT_ERROR_LITE"); _TONE_CDMA_SOFT_ERROR_LITEReady = true; } return _TONE_CDMA_SOFT_ERROR_LITEContent; } }
        private static int _TONE_CDMA_SOFT_ERROR_LITEContent = default;
        private static bool _TONE_CDMA_SOFT_ERROR_LITEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_DTMF_0"/>
        /// </summary>
        public static int TONE_DTMF_0 { get { if (!_TONE_DTMF_0Ready) { _TONE_DTMF_0Content = SGetField<int>(LocalBridgeClazz, "TONE_DTMF_0"); _TONE_DTMF_0Ready = true; } return _TONE_DTMF_0Content; } }
        private static int _TONE_DTMF_0Content = default;
        private static bool _TONE_DTMF_0Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_DTMF_1"/>
        /// </summary>
        public static int TONE_DTMF_1 { get { if (!_TONE_DTMF_1Ready) { _TONE_DTMF_1Content = SGetField<int>(LocalBridgeClazz, "TONE_DTMF_1"); _TONE_DTMF_1Ready = true; } return _TONE_DTMF_1Content; } }
        private static int _TONE_DTMF_1Content = default;
        private static bool _TONE_DTMF_1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_DTMF_2"/>
        /// </summary>
        public static int TONE_DTMF_2 { get { if (!_TONE_DTMF_2Ready) { _TONE_DTMF_2Content = SGetField<int>(LocalBridgeClazz, "TONE_DTMF_2"); _TONE_DTMF_2Ready = true; } return _TONE_DTMF_2Content; } }
        private static int _TONE_DTMF_2Content = default;
        private static bool _TONE_DTMF_2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_DTMF_3"/>
        /// </summary>
        public static int TONE_DTMF_3 { get { if (!_TONE_DTMF_3Ready) { _TONE_DTMF_3Content = SGetField<int>(LocalBridgeClazz, "TONE_DTMF_3"); _TONE_DTMF_3Ready = true; } return _TONE_DTMF_3Content; } }
        private static int _TONE_DTMF_3Content = default;
        private static bool _TONE_DTMF_3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_DTMF_4"/>
        /// </summary>
        public static int TONE_DTMF_4 { get { if (!_TONE_DTMF_4Ready) { _TONE_DTMF_4Content = SGetField<int>(LocalBridgeClazz, "TONE_DTMF_4"); _TONE_DTMF_4Ready = true; } return _TONE_DTMF_4Content; } }
        private static int _TONE_DTMF_4Content = default;
        private static bool _TONE_DTMF_4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_DTMF_5"/>
        /// </summary>
        public static int TONE_DTMF_5 { get { if (!_TONE_DTMF_5Ready) { _TONE_DTMF_5Content = SGetField<int>(LocalBridgeClazz, "TONE_DTMF_5"); _TONE_DTMF_5Ready = true; } return _TONE_DTMF_5Content; } }
        private static int _TONE_DTMF_5Content = default;
        private static bool _TONE_DTMF_5Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_DTMF_6"/>
        /// </summary>
        public static int TONE_DTMF_6 { get { if (!_TONE_DTMF_6Ready) { _TONE_DTMF_6Content = SGetField<int>(LocalBridgeClazz, "TONE_DTMF_6"); _TONE_DTMF_6Ready = true; } return _TONE_DTMF_6Content; } }
        private static int _TONE_DTMF_6Content = default;
        private static bool _TONE_DTMF_6Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_DTMF_7"/>
        /// </summary>
        public static int TONE_DTMF_7 { get { if (!_TONE_DTMF_7Ready) { _TONE_DTMF_7Content = SGetField<int>(LocalBridgeClazz, "TONE_DTMF_7"); _TONE_DTMF_7Ready = true; } return _TONE_DTMF_7Content; } }
        private static int _TONE_DTMF_7Content = default;
        private static bool _TONE_DTMF_7Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_DTMF_8"/>
        /// </summary>
        public static int TONE_DTMF_8 { get { if (!_TONE_DTMF_8Ready) { _TONE_DTMF_8Content = SGetField<int>(LocalBridgeClazz, "TONE_DTMF_8"); _TONE_DTMF_8Ready = true; } return _TONE_DTMF_8Content; } }
        private static int _TONE_DTMF_8Content = default;
        private static bool _TONE_DTMF_8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_DTMF_9"/>
        /// </summary>
        public static int TONE_DTMF_9 { get { if (!_TONE_DTMF_9Ready) { _TONE_DTMF_9Content = SGetField<int>(LocalBridgeClazz, "TONE_DTMF_9"); _TONE_DTMF_9Ready = true; } return _TONE_DTMF_9Content; } }
        private static int _TONE_DTMF_9Content = default;
        private static bool _TONE_DTMF_9Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_DTMF_A"/>
        /// </summary>
        public static int TONE_DTMF_A { get { if (!_TONE_DTMF_AReady) { _TONE_DTMF_AContent = SGetField<int>(LocalBridgeClazz, "TONE_DTMF_A"); _TONE_DTMF_AReady = true; } return _TONE_DTMF_AContent; } }
        private static int _TONE_DTMF_AContent = default;
        private static bool _TONE_DTMF_AReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_DTMF_B"/>
        /// </summary>
        public static int TONE_DTMF_B { get { if (!_TONE_DTMF_BReady) { _TONE_DTMF_BContent = SGetField<int>(LocalBridgeClazz, "TONE_DTMF_B"); _TONE_DTMF_BReady = true; } return _TONE_DTMF_BContent; } }
        private static int _TONE_DTMF_BContent = default;
        private static bool _TONE_DTMF_BReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_DTMF_C"/>
        /// </summary>
        public static int TONE_DTMF_C { get { if (!_TONE_DTMF_CReady) { _TONE_DTMF_CContent = SGetField<int>(LocalBridgeClazz, "TONE_DTMF_C"); _TONE_DTMF_CReady = true; } return _TONE_DTMF_CContent; } }
        private static int _TONE_DTMF_CContent = default;
        private static bool _TONE_DTMF_CReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_DTMF_D"/>
        /// </summary>
        public static int TONE_DTMF_D { get { if (!_TONE_DTMF_DReady) { _TONE_DTMF_DContent = SGetField<int>(LocalBridgeClazz, "TONE_DTMF_D"); _TONE_DTMF_DReady = true; } return _TONE_DTMF_DContent; } }
        private static int _TONE_DTMF_DContent = default;
        private static bool _TONE_DTMF_DReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_DTMF_P"/>
        /// </summary>
        public static int TONE_DTMF_P { get { if (!_TONE_DTMF_PReady) { _TONE_DTMF_PContent = SGetField<int>(LocalBridgeClazz, "TONE_DTMF_P"); _TONE_DTMF_PReady = true; } return _TONE_DTMF_PContent; } }
        private static int _TONE_DTMF_PContent = default;
        private static bool _TONE_DTMF_PReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_DTMF_S"/>
        /// </summary>
        public static int TONE_DTMF_S { get { if (!_TONE_DTMF_SReady) { _TONE_DTMF_SContent = SGetField<int>(LocalBridgeClazz, "TONE_DTMF_S"); _TONE_DTMF_SReady = true; } return _TONE_DTMF_SContent; } }
        private static int _TONE_DTMF_SContent = default;
        private static bool _TONE_DTMF_SReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_PROP_ACK"/>
        /// </summary>
        public static int TONE_PROP_ACK { get { if (!_TONE_PROP_ACKReady) { _TONE_PROP_ACKContent = SGetField<int>(LocalBridgeClazz, "TONE_PROP_ACK"); _TONE_PROP_ACKReady = true; } return _TONE_PROP_ACKContent; } }
        private static int _TONE_PROP_ACKContent = default;
        private static bool _TONE_PROP_ACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_PROP_BEEP"/>
        /// </summary>
        public static int TONE_PROP_BEEP { get { if (!_TONE_PROP_BEEPReady) { _TONE_PROP_BEEPContent = SGetField<int>(LocalBridgeClazz, "TONE_PROP_BEEP"); _TONE_PROP_BEEPReady = true; } return _TONE_PROP_BEEPContent; } }
        private static int _TONE_PROP_BEEPContent = default;
        private static bool _TONE_PROP_BEEPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_PROP_BEEP2"/>
        /// </summary>
        public static int TONE_PROP_BEEP2 { get { if (!_TONE_PROP_BEEP2Ready) { _TONE_PROP_BEEP2Content = SGetField<int>(LocalBridgeClazz, "TONE_PROP_BEEP2"); _TONE_PROP_BEEP2Ready = true; } return _TONE_PROP_BEEP2Content; } }
        private static int _TONE_PROP_BEEP2Content = default;
        private static bool _TONE_PROP_BEEP2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_PROP_NACK"/>
        /// </summary>
        public static int TONE_PROP_NACK { get { if (!_TONE_PROP_NACKReady) { _TONE_PROP_NACKContent = SGetField<int>(LocalBridgeClazz, "TONE_PROP_NACK"); _TONE_PROP_NACKReady = true; } return _TONE_PROP_NACKContent; } }
        private static int _TONE_PROP_NACKContent = default;
        private static bool _TONE_PROP_NACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_PROP_PROMPT"/>
        /// </summary>
        public static int TONE_PROP_PROMPT { get { if (!_TONE_PROP_PROMPTReady) { _TONE_PROP_PROMPTContent = SGetField<int>(LocalBridgeClazz, "TONE_PROP_PROMPT"); _TONE_PROP_PROMPTReady = true; } return _TONE_PROP_PROMPTContent; } }
        private static int _TONE_PROP_PROMPTContent = default;
        private static bool _TONE_PROP_PROMPTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_SUP_BUSY"/>
        /// </summary>
        public static int TONE_SUP_BUSY { get { if (!_TONE_SUP_BUSYReady) { _TONE_SUP_BUSYContent = SGetField<int>(LocalBridgeClazz, "TONE_SUP_BUSY"); _TONE_SUP_BUSYReady = true; } return _TONE_SUP_BUSYContent; } }
        private static int _TONE_SUP_BUSYContent = default;
        private static bool _TONE_SUP_BUSYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_SUP_CALL_WAITING"/>
        /// </summary>
        public static int TONE_SUP_CALL_WAITING { get { if (!_TONE_SUP_CALL_WAITINGReady) { _TONE_SUP_CALL_WAITINGContent = SGetField<int>(LocalBridgeClazz, "TONE_SUP_CALL_WAITING"); _TONE_SUP_CALL_WAITINGReady = true; } return _TONE_SUP_CALL_WAITINGContent; } }
        private static int _TONE_SUP_CALL_WAITINGContent = default;
        private static bool _TONE_SUP_CALL_WAITINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_SUP_CONFIRM"/>
        /// </summary>
        public static int TONE_SUP_CONFIRM { get { if (!_TONE_SUP_CONFIRMReady) { _TONE_SUP_CONFIRMContent = SGetField<int>(LocalBridgeClazz, "TONE_SUP_CONFIRM"); _TONE_SUP_CONFIRMReady = true; } return _TONE_SUP_CONFIRMContent; } }
        private static int _TONE_SUP_CONFIRMContent = default;
        private static bool _TONE_SUP_CONFIRMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_SUP_CONGESTION"/>
        /// </summary>
        public static int TONE_SUP_CONGESTION { get { if (!_TONE_SUP_CONGESTIONReady) { _TONE_SUP_CONGESTIONContent = SGetField<int>(LocalBridgeClazz, "TONE_SUP_CONGESTION"); _TONE_SUP_CONGESTIONReady = true; } return _TONE_SUP_CONGESTIONContent; } }
        private static int _TONE_SUP_CONGESTIONContent = default;
        private static bool _TONE_SUP_CONGESTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_SUP_CONGESTION_ABBREV"/>
        /// </summary>
        public static int TONE_SUP_CONGESTION_ABBREV { get { if (!_TONE_SUP_CONGESTION_ABBREVReady) { _TONE_SUP_CONGESTION_ABBREVContent = SGetField<int>(LocalBridgeClazz, "TONE_SUP_CONGESTION_ABBREV"); _TONE_SUP_CONGESTION_ABBREVReady = true; } return _TONE_SUP_CONGESTION_ABBREVContent; } }
        private static int _TONE_SUP_CONGESTION_ABBREVContent = default;
        private static bool _TONE_SUP_CONGESTION_ABBREVReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_SUP_DIAL"/>
        /// </summary>
        public static int TONE_SUP_DIAL { get { if (!_TONE_SUP_DIALReady) { _TONE_SUP_DIALContent = SGetField<int>(LocalBridgeClazz, "TONE_SUP_DIAL"); _TONE_SUP_DIALReady = true; } return _TONE_SUP_DIALContent; } }
        private static int _TONE_SUP_DIALContent = default;
        private static bool _TONE_SUP_DIALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_SUP_ERROR"/>
        /// </summary>
        public static int TONE_SUP_ERROR { get { if (!_TONE_SUP_ERRORReady) { _TONE_SUP_ERRORContent = SGetField<int>(LocalBridgeClazz, "TONE_SUP_ERROR"); _TONE_SUP_ERRORReady = true; } return _TONE_SUP_ERRORContent; } }
        private static int _TONE_SUP_ERRORContent = default;
        private static bool _TONE_SUP_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_SUP_INTERCEPT"/>
        /// </summary>
        public static int TONE_SUP_INTERCEPT { get { if (!_TONE_SUP_INTERCEPTReady) { _TONE_SUP_INTERCEPTContent = SGetField<int>(LocalBridgeClazz, "TONE_SUP_INTERCEPT"); _TONE_SUP_INTERCEPTReady = true; } return _TONE_SUP_INTERCEPTContent; } }
        private static int _TONE_SUP_INTERCEPTContent = default;
        private static bool _TONE_SUP_INTERCEPTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_SUP_INTERCEPT_ABBREV"/>
        /// </summary>
        public static int TONE_SUP_INTERCEPT_ABBREV { get { if (!_TONE_SUP_INTERCEPT_ABBREVReady) { _TONE_SUP_INTERCEPT_ABBREVContent = SGetField<int>(LocalBridgeClazz, "TONE_SUP_INTERCEPT_ABBREV"); _TONE_SUP_INTERCEPT_ABBREVReady = true; } return _TONE_SUP_INTERCEPT_ABBREVContent; } }
        private static int _TONE_SUP_INTERCEPT_ABBREVContent = default;
        private static bool _TONE_SUP_INTERCEPT_ABBREVReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_SUP_PIP"/>
        /// </summary>
        public static int TONE_SUP_PIP { get { if (!_TONE_SUP_PIPReady) { _TONE_SUP_PIPContent = SGetField<int>(LocalBridgeClazz, "TONE_SUP_PIP"); _TONE_SUP_PIPReady = true; } return _TONE_SUP_PIPContent; } }
        private static int _TONE_SUP_PIPContent = default;
        private static bool _TONE_SUP_PIPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_SUP_RADIO_ACK"/>
        /// </summary>
        public static int TONE_SUP_RADIO_ACK { get { if (!_TONE_SUP_RADIO_ACKReady) { _TONE_SUP_RADIO_ACKContent = SGetField<int>(LocalBridgeClazz, "TONE_SUP_RADIO_ACK"); _TONE_SUP_RADIO_ACKReady = true; } return _TONE_SUP_RADIO_ACKContent; } }
        private static int _TONE_SUP_RADIO_ACKContent = default;
        private static bool _TONE_SUP_RADIO_ACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_SUP_RADIO_NOTAVAIL"/>
        /// </summary>
        public static int TONE_SUP_RADIO_NOTAVAIL { get { if (!_TONE_SUP_RADIO_NOTAVAILReady) { _TONE_SUP_RADIO_NOTAVAILContent = SGetField<int>(LocalBridgeClazz, "TONE_SUP_RADIO_NOTAVAIL"); _TONE_SUP_RADIO_NOTAVAILReady = true; } return _TONE_SUP_RADIO_NOTAVAILContent; } }
        private static int _TONE_SUP_RADIO_NOTAVAILContent = default;
        private static bool _TONE_SUP_RADIO_NOTAVAILReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#TONE_SUP_RINGTONE"/>
        /// </summary>
        public static int TONE_SUP_RINGTONE { get { if (!_TONE_SUP_RINGTONEReady) { _TONE_SUP_RINGTONEContent = SGetField<int>(LocalBridgeClazz, "TONE_SUP_RINGTONE"); _TONE_SUP_RINGTONEReady = true; } return _TONE_SUP_RINGTONEContent; } }
        private static int _TONE_SUP_RINGTONEContent = default;
        private static bool _TONE_SUP_RINGTONEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#startTone(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool StartTone(int arg0)
        {
            return IExecuteWithSignature<bool>("startTone", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#getAudioSessionId()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetAudioSessionId()
        {
            return IExecuteWithSignature<int>("getAudioSessionId", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#startTone(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool StartTone(int arg0, int arg1)
        {
            return IExecute<bool>("startTone", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#release()"/>
        /// </summary>
        public void Release()
        {
            IExecuteWithSignature("release", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ToneGenerator.html#stopTone()"/>
        /// </summary>
        public void StopTone()
        {
            IExecuteWithSignature("stopTone", "()V");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
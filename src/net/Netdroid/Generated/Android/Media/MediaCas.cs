/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media
{
    #region MediaCas
    public partial class MediaCas
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCas.html#%3Cinit%3E(android.content.Context,int,java.lang.String,int,android.os.Handler,android.media.MediaCas.EventListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="Android.Os.Handler"/></param>
        /// <param name="arg5"><see cref="Android.Media.MediaCas.EventListener"/></param>
        /// <exception cref="Android.Media.MediaCasException.UnsupportedCasException"/>
        public MediaCas(Android.Content.Context arg0, int arg1, Java.Lang.String arg2, int arg3, Android.Os.Handler arg4, Android.Media.MediaCas.EventListener arg5)
            : base(arg0, arg1, arg2, arg3, arg4, arg5)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCas.html#%3Cinit%3E(android.content.Context,int,java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <exception cref="Android.Media.MediaCasException.UnsupportedCasException"/>
        public MediaCas(Android.Content.Context arg0, int arg1, Java.Lang.String arg2, int arg3)
            : base(arg0, arg1, arg2, arg3)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCas.html#%3Cinit%3E(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <exception cref="Android.Media.MediaCasException.UnsupportedCasException"/>
        public MediaCas(int arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCas.html#PLUGIN_STATUS_PHYSICAL_MODULE_CHANGED"/>
        /// </summary>
        public static int PLUGIN_STATUS_PHYSICAL_MODULE_CHANGED { get { if (!_PLUGIN_STATUS_PHYSICAL_MODULE_CHANGEDReady) { _PLUGIN_STATUS_PHYSICAL_MODULE_CHANGEDContent = SGetField<int>(LocalBridgeClazz, "PLUGIN_STATUS_PHYSICAL_MODULE_CHANGED"); _PLUGIN_STATUS_PHYSICAL_MODULE_CHANGEDReady = true; } return _PLUGIN_STATUS_PHYSICAL_MODULE_CHANGEDContent; } }
        private static int _PLUGIN_STATUS_PHYSICAL_MODULE_CHANGEDContent = default;
        private static bool _PLUGIN_STATUS_PHYSICAL_MODULE_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCas.html#PLUGIN_STATUS_SESSION_NUMBER_CHANGED"/>
        /// </summary>
        public static int PLUGIN_STATUS_SESSION_NUMBER_CHANGED { get { if (!_PLUGIN_STATUS_SESSION_NUMBER_CHANGEDReady) { _PLUGIN_STATUS_SESSION_NUMBER_CHANGEDContent = SGetField<int>(LocalBridgeClazz, "PLUGIN_STATUS_SESSION_NUMBER_CHANGED"); _PLUGIN_STATUS_SESSION_NUMBER_CHANGEDReady = true; } return _PLUGIN_STATUS_SESSION_NUMBER_CHANGEDContent; } }
        private static int _PLUGIN_STATUS_SESSION_NUMBER_CHANGEDContent = default;
        private static bool _PLUGIN_STATUS_SESSION_NUMBER_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCas.html#SCRAMBLING_MODE_AES_CBC"/>
        /// </summary>
        public static int SCRAMBLING_MODE_AES_CBC { get { if (!_SCRAMBLING_MODE_AES_CBCReady) { _SCRAMBLING_MODE_AES_CBCContent = SGetField<int>(LocalBridgeClazz, "SCRAMBLING_MODE_AES_CBC"); _SCRAMBLING_MODE_AES_CBCReady = true; } return _SCRAMBLING_MODE_AES_CBCContent; } }
        private static int _SCRAMBLING_MODE_AES_CBCContent = default;
        private static bool _SCRAMBLING_MODE_AES_CBCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCas.html#SCRAMBLING_MODE_AES_ECB"/>
        /// </summary>
        public static int SCRAMBLING_MODE_AES_ECB { get { if (!_SCRAMBLING_MODE_AES_ECBReady) { _SCRAMBLING_MODE_AES_ECBContent = SGetField<int>(LocalBridgeClazz, "SCRAMBLING_MODE_AES_ECB"); _SCRAMBLING_MODE_AES_ECBReady = true; } return _SCRAMBLING_MODE_AES_ECBContent; } }
        private static int _SCRAMBLING_MODE_AES_ECBContent = default;
        private static bool _SCRAMBLING_MODE_AES_ECBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCas.html#SCRAMBLING_MODE_AES_SCTE52"/>
        /// </summary>
        public static int SCRAMBLING_MODE_AES_SCTE52 { get { if (!_SCRAMBLING_MODE_AES_SCTE52Ready) { _SCRAMBLING_MODE_AES_SCTE52Content = SGetField<int>(LocalBridgeClazz, "SCRAMBLING_MODE_AES_SCTE52"); _SCRAMBLING_MODE_AES_SCTE52Ready = true; } return _SCRAMBLING_MODE_AES_SCTE52Content; } }
        private static int _SCRAMBLING_MODE_AES_SCTE52Content = default;
        private static bool _SCRAMBLING_MODE_AES_SCTE52Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCas.html#SCRAMBLING_MODE_AES128"/>
        /// </summary>
        public static int SCRAMBLING_MODE_AES128 { get { if (!_SCRAMBLING_MODE_AES128Ready) { _SCRAMBLING_MODE_AES128Content = SGetField<int>(LocalBridgeClazz, "SCRAMBLING_MODE_AES128"); _SCRAMBLING_MODE_AES128Ready = true; } return _SCRAMBLING_MODE_AES128Content; } }
        private static int _SCRAMBLING_MODE_AES128Content = default;
        private static bool _SCRAMBLING_MODE_AES128Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCas.html#SCRAMBLING_MODE_DVB_CISSA_V1"/>
        /// </summary>
        public static int SCRAMBLING_MODE_DVB_CISSA_V1 { get { if (!_SCRAMBLING_MODE_DVB_CISSA_V1Ready) { _SCRAMBLING_MODE_DVB_CISSA_V1Content = SGetField<int>(LocalBridgeClazz, "SCRAMBLING_MODE_DVB_CISSA_V1"); _SCRAMBLING_MODE_DVB_CISSA_V1Ready = true; } return _SCRAMBLING_MODE_DVB_CISSA_V1Content; } }
        private static int _SCRAMBLING_MODE_DVB_CISSA_V1Content = default;
        private static bool _SCRAMBLING_MODE_DVB_CISSA_V1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCas.html#SCRAMBLING_MODE_DVB_CSA1"/>
        /// </summary>
        public static int SCRAMBLING_MODE_DVB_CSA1 { get { if (!_SCRAMBLING_MODE_DVB_CSA1Ready) { _SCRAMBLING_MODE_DVB_CSA1Content = SGetField<int>(LocalBridgeClazz, "SCRAMBLING_MODE_DVB_CSA1"); _SCRAMBLING_MODE_DVB_CSA1Ready = true; } return _SCRAMBLING_MODE_DVB_CSA1Content; } }
        private static int _SCRAMBLING_MODE_DVB_CSA1Content = default;
        private static bool _SCRAMBLING_MODE_DVB_CSA1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCas.html#SCRAMBLING_MODE_DVB_CSA2"/>
        /// </summary>
        public static int SCRAMBLING_MODE_DVB_CSA2 { get { if (!_SCRAMBLING_MODE_DVB_CSA2Ready) { _SCRAMBLING_MODE_DVB_CSA2Content = SGetField<int>(LocalBridgeClazz, "SCRAMBLING_MODE_DVB_CSA2"); _SCRAMBLING_MODE_DVB_CSA2Ready = true; } return _SCRAMBLING_MODE_DVB_CSA2Content; } }
        private static int _SCRAMBLING_MODE_DVB_CSA2Content = default;
        private static bool _SCRAMBLING_MODE_DVB_CSA2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCas.html#SCRAMBLING_MODE_DVB_CSA3_ENHANCE"/>
        /// </summary>
        public static int SCRAMBLING_MODE_DVB_CSA3_ENHANCE { get { if (!_SCRAMBLING_MODE_DVB_CSA3_ENHANCEReady) { _SCRAMBLING_MODE_DVB_CSA3_ENHANCEContent = SGetField<int>(LocalBridgeClazz, "SCRAMBLING_MODE_DVB_CSA3_ENHANCE"); _SCRAMBLING_MODE_DVB_CSA3_ENHANCEReady = true; } return _SCRAMBLING_MODE_DVB_CSA3_ENHANCEContent; } }
        private static int _SCRAMBLING_MODE_DVB_CSA3_ENHANCEContent = default;
        private static bool _SCRAMBLING_MODE_DVB_CSA3_ENHANCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCas.html#SCRAMBLING_MODE_DVB_CSA3_MINIMAL"/>
        /// </summary>
        public static int SCRAMBLING_MODE_DVB_CSA3_MINIMAL { get { if (!_SCRAMBLING_MODE_DVB_CSA3_MINIMALReady) { _SCRAMBLING_MODE_DVB_CSA3_MINIMALContent = SGetField<int>(LocalBridgeClazz, "SCRAMBLING_MODE_DVB_CSA3_MINIMAL"); _SCRAMBLING_MODE_DVB_CSA3_MINIMALReady = true; } return _SCRAMBLING_MODE_DVB_CSA3_MINIMALContent; } }
        private static int _SCRAMBLING_MODE_DVB_CSA3_MINIMALContent = default;
        private static bool _SCRAMBLING_MODE_DVB_CSA3_MINIMALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCas.html#SCRAMBLING_MODE_DVB_CSA3_STANDARD"/>
        /// </summary>
        public static int SCRAMBLING_MODE_DVB_CSA3_STANDARD { get { if (!_SCRAMBLING_MODE_DVB_CSA3_STANDARDReady) { _SCRAMBLING_MODE_DVB_CSA3_STANDARDContent = SGetField<int>(LocalBridgeClazz, "SCRAMBLING_MODE_DVB_CSA3_STANDARD"); _SCRAMBLING_MODE_DVB_CSA3_STANDARDReady = true; } return _SCRAMBLING_MODE_DVB_CSA3_STANDARDContent; } }
        private static int _SCRAMBLING_MODE_DVB_CSA3_STANDARDContent = default;
        private static bool _SCRAMBLING_MODE_DVB_CSA3_STANDARDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCas.html#SCRAMBLING_MODE_DVB_IDSA"/>
        /// </summary>
        public static int SCRAMBLING_MODE_DVB_IDSA { get { if (!_SCRAMBLING_MODE_DVB_IDSAReady) { _SCRAMBLING_MODE_DVB_IDSAContent = SGetField<int>(LocalBridgeClazz, "SCRAMBLING_MODE_DVB_IDSA"); _SCRAMBLING_MODE_DVB_IDSAReady = true; } return _SCRAMBLING_MODE_DVB_IDSAContent; } }
        private static int _SCRAMBLING_MODE_DVB_IDSAContent = default;
        private static bool _SCRAMBLING_MODE_DVB_IDSAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCas.html#SCRAMBLING_MODE_MULTI2"/>
        /// </summary>
        public static int SCRAMBLING_MODE_MULTI2 { get { if (!_SCRAMBLING_MODE_MULTI2Ready) { _SCRAMBLING_MODE_MULTI2Content = SGetField<int>(LocalBridgeClazz, "SCRAMBLING_MODE_MULTI2"); _SCRAMBLING_MODE_MULTI2Ready = true; } return _SCRAMBLING_MODE_MULTI2Content; } }
        private static int _SCRAMBLING_MODE_MULTI2Content = default;
        private static bool _SCRAMBLING_MODE_MULTI2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCas.html#SCRAMBLING_MODE_RESERVED"/>
        /// </summary>
        public static int SCRAMBLING_MODE_RESERVED { get { if (!_SCRAMBLING_MODE_RESERVEDReady) { _SCRAMBLING_MODE_RESERVEDContent = SGetField<int>(LocalBridgeClazz, "SCRAMBLING_MODE_RESERVED"); _SCRAMBLING_MODE_RESERVEDReady = true; } return _SCRAMBLING_MODE_RESERVEDContent; } }
        private static int _SCRAMBLING_MODE_RESERVEDContent = default;
        private static bool _SCRAMBLING_MODE_RESERVEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCas.html#SCRAMBLING_MODE_TDES_ECB"/>
        /// </summary>
        public static int SCRAMBLING_MODE_TDES_ECB { get { if (!_SCRAMBLING_MODE_TDES_ECBReady) { _SCRAMBLING_MODE_TDES_ECBContent = SGetField<int>(LocalBridgeClazz, "SCRAMBLING_MODE_TDES_ECB"); _SCRAMBLING_MODE_TDES_ECBReady = true; } return _SCRAMBLING_MODE_TDES_ECBContent; } }
        private static int _SCRAMBLING_MODE_TDES_ECBContent = default;
        private static bool _SCRAMBLING_MODE_TDES_ECBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCas.html#SCRAMBLING_MODE_TDES_SCTE52"/>
        /// </summary>
        public static int SCRAMBLING_MODE_TDES_SCTE52 { get { if (!_SCRAMBLING_MODE_TDES_SCTE52Ready) { _SCRAMBLING_MODE_TDES_SCTE52Content = SGetField<int>(LocalBridgeClazz, "SCRAMBLING_MODE_TDES_SCTE52"); _SCRAMBLING_MODE_TDES_SCTE52Ready = true; } return _SCRAMBLING_MODE_TDES_SCTE52Content; } }
        private static int _SCRAMBLING_MODE_TDES_SCTE52Content = default;
        private static bool _SCRAMBLING_MODE_TDES_SCTE52Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCas.html#SESSION_USAGE_LIVE"/>
        /// </summary>
        public static int SESSION_USAGE_LIVE { get { if (!_SESSION_USAGE_LIVEReady) { _SESSION_USAGE_LIVEContent = SGetField<int>(LocalBridgeClazz, "SESSION_USAGE_LIVE"); _SESSION_USAGE_LIVEReady = true; } return _SESSION_USAGE_LIVEContent; } }
        private static int _SESSION_USAGE_LIVEContent = default;
        private static bool _SESSION_USAGE_LIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCas.html#SESSION_USAGE_PLAYBACK"/>
        /// </summary>
        public static int SESSION_USAGE_PLAYBACK { get { if (!_SESSION_USAGE_PLAYBACKReady) { _SESSION_USAGE_PLAYBACKContent = SGetField<int>(LocalBridgeClazz, "SESSION_USAGE_PLAYBACK"); _SESSION_USAGE_PLAYBACKReady = true; } return _SESSION_USAGE_PLAYBACKContent; } }
        private static int _SESSION_USAGE_PLAYBACKContent = default;
        private static bool _SESSION_USAGE_PLAYBACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCas.html#SESSION_USAGE_RECORD"/>
        /// </summary>
        public static int SESSION_USAGE_RECORD { get { if (!_SESSION_USAGE_RECORDReady) { _SESSION_USAGE_RECORDContent = SGetField<int>(LocalBridgeClazz, "SESSION_USAGE_RECORD"); _SESSION_USAGE_RECORDReady = true; } return _SESSION_USAGE_RECORDContent; } }
        private static int _SESSION_USAGE_RECORDContent = default;
        private static bool _SESSION_USAGE_RECORDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCas.html#SESSION_USAGE_TIMESHIFT"/>
        /// </summary>
        public static int SESSION_USAGE_TIMESHIFT { get { if (!_SESSION_USAGE_TIMESHIFTReady) { _SESSION_USAGE_TIMESHIFTContent = SGetField<int>(LocalBridgeClazz, "SESSION_USAGE_TIMESHIFT"); _SESSION_USAGE_TIMESHIFTReady = true; } return _SESSION_USAGE_TIMESHIFTContent; } }
        private static int _SESSION_USAGE_TIMESHIFTContent = default;
        private static bool _SESSION_USAGE_TIMESHIFTReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCas.html#enumeratePlugins()"/>
        /// </summary>
        /// <returns><see cref="Android.Media.MediaCas.PluginDescriptor"/></returns>
        public static Android.Media.MediaCas.PluginDescriptor[] EnumeratePlugins()
        {
            return SExecuteWithSignatureArray<Android.Media.MediaCas.PluginDescriptor>(LocalBridgeClazz, "enumeratePlugins", "()[Landroid/media/MediaCas$PluginDescriptor;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCas.html#isSystemIdSupported(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsSystemIdSupported(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isSystemIdSupported", "(I)Z", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCas.html#openSession()"/>
        /// </summary>
        /// <returns><see cref="Android.Media.MediaCas.Session"/></returns>
        /// <exception cref="Android.Media.MediaCasException"/>
        public Android.Media.MediaCas.Session OpenSession()
        {
            return IExecuteWithSignature<Android.Media.MediaCas.Session>("openSession", "()Landroid/media/MediaCas$Session;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCas.html#openSession(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.Media.MediaCas.Session"/></returns>
        /// <exception cref="Android.Media.MediaCasException"/>
        public Android.Media.MediaCas.Session OpenSession(int arg0, int arg1)
        {
            return IExecute<Android.Media.MediaCas.Session>("openSession", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCas.html#close()"/>
        /// </summary>
        public void Close()
        {
            IExecuteWithSignature("close", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCas.html#processEmm(byte[],int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <exception cref="Android.Media.MediaCasException"/>
        public void ProcessEmm(byte[] arg0, int arg1, int arg2)
        {
            IExecute("processEmm", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCas.html#processEmm(byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <exception cref="Android.Media.MediaCasException"/>
        public void ProcessEmm(byte[] arg0)
        {
            IExecuteWithSignature("processEmm", "([B)V", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCas.html#provision(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <exception cref="Android.Media.MediaCasException"/>
        public void Provision(Java.Lang.String arg0)
        {
            IExecuteWithSignature("provision", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCas.html#refreshEntitlements(int,byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        /// <exception cref="Android.Media.MediaCasException"/>
        public void RefreshEntitlements(int arg0, byte[] arg1)
        {
            IExecute("refreshEntitlements", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCas.html#sendEvent(int,int,byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="byte"/></param>
        /// <exception cref="Android.Media.MediaCasException"/>
        public void SendEvent(int arg0, int arg1, byte[] arg2)
        {
            IExecute("sendEvent", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCas.html#setEventListener(android.media.MediaCas.EventListener,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaCas.EventListener"/></param>
        /// <param name="arg1"><see cref="Android.Os.Handler"/></param>
        public void SetEventListener(Android.Media.MediaCas.EventListener arg0, Android.Os.Handler arg1)
        {
            IExecute("setEventListener", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCas.html#setPrivateData(byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <exception cref="Android.Media.MediaCasException"/>
        public void SetPrivateData(byte[] arg0)
        {
            IExecuteWithSignature("setPrivateData", "([B)V", new object[] { arg0 });
        }

        #endregion

        #region Nested classes
        #region EventListener
        public partial class EventListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="EventListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onEvent", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Media.MediaCas>>>(OnEventEventHandler));
                AddEventHandler("onPluginStatusUpdate", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Media.MediaCas>>>(OnPluginStatusUpdateEventHandler));
                AddEventHandler("onResourceLost", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Media.MediaCas>>>(OnResourceLostEventHandler));
                AddEventHandler("onSessionEvent", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Media.MediaCas>>>(OnSessionEventEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/MediaCas.EventListener.html#onEvent(android.media.MediaCas,int,int,byte[])"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnEvent"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Media.MediaCas, int, int, byte[]> OnOnEvent { get; set; } = null;

            void OnEventEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Media.MediaCas>> data)
            {
                var methodToExecute = (OnOnEvent != null) ? OnOnEvent : OnEvent;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<int>(1), data.EventData.GetAt<byte[]>(2));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCas.EventListener.html#onEvent(android.media.MediaCas,int,int,byte[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaCas"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="byte"/></param>
            public virtual void OnEvent(Android.Media.MediaCas arg0, int arg1, int arg2, byte[] arg3)
            {
                
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCas.EventListener.html#onPluginStatusUpdate(android.media.MediaCas,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaCas"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface</remarks>
            public void OnPluginStatusUpdateDefault(Android.Media.MediaCas arg0, int arg1, int arg2)
            {
                IExecute("onPluginStatusUpdateDefault", arg0, arg1, arg2);
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/MediaCas.EventListener.html#onPluginStatusUpdate(android.media.MediaCas,int,int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnPluginStatusUpdate"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Media.MediaCas, int, int> OnOnPluginStatusUpdate { get; set; } = null;

            void OnPluginStatusUpdateEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Media.MediaCas>> data)
            {
                var methodToExecute = (OnOnPluginStatusUpdate != null) ? OnOnPluginStatusUpdate : OnPluginStatusUpdate;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<int>(1));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCas.EventListener.html#onPluginStatusUpdate(android.media.MediaCas,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaCas"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface using <see cref="OnPluginStatusUpdateDefault"/>; override the method to implement a different behavior</remarks>
            public virtual void OnPluginStatusUpdate(Android.Media.MediaCas arg0, int arg1, int arg2)
            {
                OnPluginStatusUpdateDefault(arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCas.EventListener.html#onResourceLost(android.media.MediaCas)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaCas"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface</remarks>
            public void OnResourceLostDefault(Android.Media.MediaCas arg0)
            {
                IExecuteWithSignature("onResourceLostDefault", "(Landroid/media/MediaCas;)V", arg0);
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/MediaCas.EventListener.html#onResourceLost(android.media.MediaCas)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnResourceLost"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Media.MediaCas> OnOnResourceLost { get; set; } = null;

            void OnResourceLostEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Media.MediaCas>> data)
            {
                var methodToExecute = (OnOnResourceLost != null) ? OnOnResourceLost : OnResourceLost;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCas.EventListener.html#onResourceLost(android.media.MediaCas)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaCas"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface using <see cref="OnResourceLostDefault"/>; override the method to implement a different behavior</remarks>
            public virtual void OnResourceLost(Android.Media.MediaCas arg0)
            {
                OnResourceLostDefault(arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCas.EventListener.html#onSessionEvent(android.media.MediaCas,android.media.MediaCas.Session,int,int,byte[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaCas"/></param>
            /// <param name="arg1"><see cref="Android.Media.MediaCas.Session"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="int"/></param>
            /// <param name="arg4"><see cref="byte"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface</remarks>
            public void OnSessionEventDefault(Android.Media.MediaCas arg0, Android.Media.MediaCas.Session arg1, int arg2, int arg3, byte[] arg4)
            {
                IExecute("onSessionEventDefault", arg0, arg1, arg2, arg3, arg4);
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/MediaCas.EventListener.html#onSessionEvent(android.media.MediaCas,android.media.MediaCas.Session,int,int,byte[])"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnSessionEvent"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Media.MediaCas, Android.Media.MediaCas.Session, int, int, byte[]> OnOnSessionEvent { get; set; } = null;

            void OnSessionEventEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Media.MediaCas>> data)
            {
                var methodToExecute = (OnOnSessionEvent != null) ? OnOnSessionEvent : OnSessionEvent;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.Media.MediaCas.Session>(0), data.EventData.GetAt<int>(1), data.EventData.GetAt<int>(2), data.EventData.GetAt<byte[]>(3));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCas.EventListener.html#onSessionEvent(android.media.MediaCas,android.media.MediaCas.Session,int,int,byte[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaCas"/></param>
            /// <param name="arg1"><see cref="Android.Media.MediaCas.Session"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="int"/></param>
            /// <param name="arg4"><see cref="byte"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface using <see cref="OnSessionEventDefault"/>; override the method to implement a different behavior</remarks>
            public virtual void OnSessionEvent(Android.Media.MediaCas arg0, Android.Media.MediaCas.Session arg1, int arg2, int arg3, byte[] arg4)
            {
                OnSessionEventDefault(arg0, arg1, arg2, arg3, arg4);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region EventListenerDirect
        public partial class EventListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCas.EventListener.html#onEvent(android.media.MediaCas,int,int,byte[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaCas"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="byte"/></param>
            public override void OnEvent(Android.Media.MediaCas arg0, int arg1, int arg2, byte[] arg3)
            {
                IExecute("onEvent", arg0, arg1, arg2, arg3);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCas.EventListener.html#onPluginStatusUpdate(android.media.MediaCas,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaCas"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            public override void OnPluginStatusUpdate(Android.Media.MediaCas arg0, int arg1, int arg2)
            {
                IExecute("onPluginStatusUpdate", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCas.EventListener.html#onResourceLost(android.media.MediaCas)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaCas"/></param>
            public override void OnResourceLost(Android.Media.MediaCas arg0)
            {
                IExecuteWithSignature("onResourceLost", "(Landroid/media/MediaCas;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCas.EventListener.html#onSessionEvent(android.media.MediaCas,android.media.MediaCas.Session,int,int,byte[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaCas"/></param>
            /// <param name="arg1"><see cref="Android.Media.MediaCas.Session"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="int"/></param>
            /// <param name="arg4"><see cref="byte"/></param>
            public override void OnSessionEvent(Android.Media.MediaCas arg0, Android.Media.MediaCas.Session arg1, int arg2, int arg3, byte[] arg4)
            {
                IExecute("onSessionEvent", arg0, arg1, arg2, arg3, arg4);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region PluginDescriptor
        public partial class PluginDescriptor
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCas.PluginDescriptor.html#getSystemId()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetSystemId()
            {
                return IExecuteWithSignature<int>("getSystemId", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCas.PluginDescriptor.html#getName()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetName()
            {
                return IExecuteWithSignature<Java.Lang.String>("getName", "()Ljava/lang/String;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Session
        public partial class Session
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCas.Session.html#getSessionId()"/>
            /// </summary>
            /// <returns><see cref="byte"/></returns>
            public byte[] GetSessionId()
            {
                return IExecuteWithSignatureArray<byte>("getSessionId", "()[B");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCas.Session.html#close()"/>
            /// </summary>
            public void Close()
            {
                IExecuteWithSignature("close", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCas.Session.html#processEcm(byte[],int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="byte"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <exception cref="Android.Media.MediaCasException"/>
            public void ProcessEcm(byte[] arg0, int arg1, int arg2)
            {
                IExecute("processEcm", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCas.Session.html#processEcm(byte[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="byte"/></param>
            /// <exception cref="Android.Media.MediaCasException"/>
            public void ProcessEcm(byte[] arg0)
            {
                IExecuteWithSignature("processEcm", "([B)V", new object[] { arg0 });
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCas.Session.html#sendSessionEvent(int,int,byte[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="byte"/></param>
            /// <exception cref="Android.Media.MediaCasException"/>
            public void SendSessionEvent(int arg0, int arg1, byte[] arg2)
            {
                IExecute("sendSessionEvent", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCas.Session.html#setPrivateData(byte[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="byte"/></param>
            /// <exception cref="Android.Media.MediaCasException"/>
            public void SetPrivateData(byte[] arg0)
            {
                IExecuteWithSignature("setPrivateData", "([B)V", new object[] { arg0 });
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
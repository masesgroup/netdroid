/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media
{
    #region ImageWriter declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/media/ImageWriter.html"/>
    /// </summary>
    public partial class ImageWriter : Java.Lang.AutoCloseable
    {
        const string _bridgeClassName = "android.media.ImageWriter";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public ImageWriter() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public ImageWriter(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region Builder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ImageWriter.Builder.html"/>
        /// </summary>
        public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
        {
            const string _bridgeClassName = "android.media.ImageWriter$Builder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Builder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Builder(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region OnImageReleasedListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ImageWriter.OnImageReleasedListener.html"/>
        /// </summary>
        public partial class OnImageReleasedListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnImageReleasedListener() { InitializeHandlers(); }
        
            const string _bridgeClassName = "org.mases.netdroid.generated.android.media.ImageWriter_OnImageReleasedListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
        
        
            // TODO: complete the class
        
        }
        #endregion
        
        #region OnImageReleasedListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="OnImageReleasedListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnImageReleasedListenerDirect : OnImageReleasedListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;
        
            /// <inheritdoc />
            protected override void InitializeHandlers() { }
        
            const string _bridgeClassName = "android.media.ImageWriter$OnImageReleasedListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

    
    }
    #endregion

    #region ImageWriter implementation
    public partial class ImageWriter
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
    
        #endregion
    
        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ImageWriter.html#newInstance(android.view.Surface,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Surface"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="Android.Media.ImageWriter"/></returns>
        public static Android.Media.ImageWriter NewInstance(Android.View.Surface arg0, int arg1, int arg2)
        {
            return SExecuteWithSignature<Android.Media.ImageWriter>(LocalBridgeClazz, "newInstance", "(Landroid/view/Surface;II)Landroid/media/ImageWriter;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ImageWriter.html#newInstance(android.view.Surface,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Surface"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.Media.ImageWriter"/></returns>
        public static Android.Media.ImageWriter NewInstance(Android.View.Surface arg0, int arg1)
        {
            return SExecuteWithSignature<Android.Media.ImageWriter>(LocalBridgeClazz, "newInstance", "(Landroid/view/Surface;I)Landroid/media/ImageWriter;", arg0, arg1);
        }
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ImageWriter.html#dequeueInputImage()"/>
        /// </summary>
        /// <returns><see cref="Android.Media.Image"/></returns>
        public Android.Media.Image DequeueInputImage()
        {
            return IExecuteWithSignature<Android.Media.Image>("dequeueInputImage", "()Landroid/media/Image;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ImageWriter.html#getDataSpace()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetDataSpace()
        {
            return IExecuteWithSignature<int>("getDataSpace", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ImageWriter.html#getFormat()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetFormat()
        {
            return IExecuteWithSignature<int>("getFormat", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ImageWriter.html#getHardwareBufferFormat()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetHardwareBufferFormat()
        {
            return IExecuteWithSignature<int>("getHardwareBufferFormat", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ImageWriter.html#getHeight()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetHeight()
        {
            return IExecuteWithSignature<int>("getHeight", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ImageWriter.html#getMaxImages()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMaxImages()
        {
            return IExecuteWithSignature<int>("getMaxImages", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ImageWriter.html#getWidth()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetWidth()
        {
            return IExecuteWithSignature<int>("getWidth", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ImageWriter.html#getUsage()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetUsage()
        {
            return IExecuteWithSignature<long>("getUsage", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ImageWriter.html#close()"/>
        /// </summary>
        public void Close()
        {
            IExecuteWithSignature("close", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ImageWriter.html#queueInputImage(android.media.Image)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.Image"/></param>
        public void QueueInputImage(Android.Media.Image arg0)
        {
            IExecuteWithSignature("queueInputImage", "(Landroid/media/Image;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/ImageWriter.html#setOnImageReleasedListener(android.media.ImageWriter.OnImageReleasedListener,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.ImageWriter.OnImageReleasedListener"/></param>
        /// <param name="arg1"><see cref="Android.Os.Handler"/></param>
        public void SetOnImageReleasedListener(Android.Media.ImageWriter.OnImageReleasedListener arg0, Android.Os.Handler arg1)
        {
            IExecuteWithSignature("setOnImageReleasedListener", "(Landroid/media/ImageWriter$OnImageReleasedListener;Landroid/os/Handler;)V", arg0, arg1);
        }
    
        #endregion
    
        #region Nested classes
        #region Builder implementation
        public partial class Builder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/ImageWriter.Builder.html#%3Cinit%3E(android.view.Surface)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.Surface"/></param>
            public Builder(Android.View.Surface arg0)
                : base(arg0)
            {
            }
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/ImageWriter.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Media.ImageWriter"/></returns>
            public Android.Media.ImageWriter Build()
            {
                return IExecuteWithSignature<Android.Media.ImageWriter>("build", "()Landroid/media/ImageWriter;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/ImageWriter.Builder.html#setDataSpace(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.ImageWriter.Builder"/></returns>
            public Android.Media.ImageWriter.Builder SetDataSpace(int arg0)
            {
                return IExecuteWithSignature<Android.Media.ImageWriter.Builder>("setDataSpace", "(I)Landroid/media/ImageWriter$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/ImageWriter.Builder.html#setHardwareBufferFormat(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.ImageWriter.Builder"/></returns>
            public Android.Media.ImageWriter.Builder SetHardwareBufferFormat(int arg0)
            {
                return IExecuteWithSignature<Android.Media.ImageWriter.Builder>("setHardwareBufferFormat", "(I)Landroid/media/ImageWriter$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/ImageWriter.Builder.html#setImageFormat(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.ImageWriter.Builder"/></returns>
            public Android.Media.ImageWriter.Builder SetImageFormat(int arg0)
            {
                return IExecuteWithSignature<Android.Media.ImageWriter.Builder>("setImageFormat", "(I)Landroid/media/ImageWriter$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/ImageWriter.Builder.html#setMaxImages(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.ImageWriter.Builder"/></returns>
            public Android.Media.ImageWriter.Builder SetMaxImages(int arg0)
            {
                return IExecuteWithSignature<Android.Media.ImageWriter.Builder>("setMaxImages", "(I)Landroid/media/ImageWriter$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/ImageWriter.Builder.html#setUsage(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.Media.ImageWriter.Builder"/></returns>
            public Android.Media.ImageWriter.Builder SetUsage(long arg0)
            {
                return IExecuteWithSignature<Android.Media.ImageWriter.Builder>("setUsage", "(J)Landroid/media/ImageWriter$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/ImageWriter.Builder.html#setWidthAndHeight(int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.ImageWriter.Builder"/></returns>
            public Android.Media.ImageWriter.Builder SetWidthAndHeight(int arg0, int arg1)
            {
                return IExecuteWithSignature<Android.Media.ImageWriter.Builder>("setWidthAndHeight", "(II)Landroid/media/ImageWriter$Builder;", arg0, arg1);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region OnImageReleasedListener implementation
        public partial class OnImageReleasedListener
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnImageReleasedListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onImageReleased", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnImageReleasedEventHandler));

            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/ImageWriter.OnImageReleasedListener.html#onImageReleased(android.media.ImageWriter)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnImageReleased"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Media.ImageWriter> OnOnImageReleased { get; set; } = null;
            
            bool hasOverrideOnImageReleased = true;
            void OnImageReleasedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnImageReleased = true;
                var methodToExecute = (OnOnImageReleased != null) ? OnOnImageReleased : OnImageReleased;
                methodToExecute.Invoke(data.EventData.GetAt<Android.Media.ImageWriter>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnImageReleased;
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/ImageWriter.OnImageReleasedListener.html#onImageReleased(android.media.ImageWriter)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.ImageWriter"/></param>
            public virtual void OnImageReleased(Android.Media.ImageWriter arg0)
            {
                hasOverrideOnImageReleased = false;
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region OnImageReleasedListenerDirect implementation
        public partial class OnImageReleasedListenerDirect
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/ImageWriter.OnImageReleasedListener.html#onImageReleased(android.media.ImageWriter)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.ImageWriter"/></param>
            public override void OnImageReleased(Android.Media.ImageWriter arg0)
            {
                IExecuteWithSignature("onImageReleased", "(Landroid/media/ImageWriter;)V", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
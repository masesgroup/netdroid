/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.5.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media
{
    #region MediaDescrambler
    public partial class MediaDescrambler
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDescrambler.html#%3Cinit%3E(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <exception cref="Android.Media.MediaCasException.UnsupportedCasException"/>
        public MediaDescrambler(int arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDescrambler.html#SCRAMBLE_CONTROL_EVEN_KEY"/>
        /// </summary>
        public static byte SCRAMBLE_CONTROL_EVEN_KEY { get { if (!_SCRAMBLE_CONTROL_EVEN_KEYReady) { _SCRAMBLE_CONTROL_EVEN_KEYContent = SGetField<byte>(LocalBridgeClazz, "SCRAMBLE_CONTROL_EVEN_KEY"); _SCRAMBLE_CONTROL_EVEN_KEYReady = true; } return _SCRAMBLE_CONTROL_EVEN_KEYContent; } }
        private static byte _SCRAMBLE_CONTROL_EVEN_KEYContent = default;
        private static bool _SCRAMBLE_CONTROL_EVEN_KEYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDescrambler.html#SCRAMBLE_CONTROL_ODD_KEY"/>
        /// </summary>
        public static byte SCRAMBLE_CONTROL_ODD_KEY { get { if (!_SCRAMBLE_CONTROL_ODD_KEYReady) { _SCRAMBLE_CONTROL_ODD_KEYContent = SGetField<byte>(LocalBridgeClazz, "SCRAMBLE_CONTROL_ODD_KEY"); _SCRAMBLE_CONTROL_ODD_KEYReady = true; } return _SCRAMBLE_CONTROL_ODD_KEYContent; } }
        private static byte _SCRAMBLE_CONTROL_ODD_KEYContent = default;
        private static bool _SCRAMBLE_CONTROL_ODD_KEYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDescrambler.html#SCRAMBLE_CONTROL_RESERVED"/>
        /// </summary>
        public static byte SCRAMBLE_CONTROL_RESERVED { get { if (!_SCRAMBLE_CONTROL_RESERVEDReady) { _SCRAMBLE_CONTROL_RESERVEDContent = SGetField<byte>(LocalBridgeClazz, "SCRAMBLE_CONTROL_RESERVED"); _SCRAMBLE_CONTROL_RESERVEDReady = true; } return _SCRAMBLE_CONTROL_RESERVEDContent; } }
        private static byte _SCRAMBLE_CONTROL_RESERVEDContent = default;
        private static bool _SCRAMBLE_CONTROL_RESERVEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDescrambler.html#SCRAMBLE_CONTROL_UNSCRAMBLED"/>
        /// </summary>
        public static byte SCRAMBLE_CONTROL_UNSCRAMBLED { get { if (!_SCRAMBLE_CONTROL_UNSCRAMBLEDReady) { _SCRAMBLE_CONTROL_UNSCRAMBLEDContent = SGetField<byte>(LocalBridgeClazz, "SCRAMBLE_CONTROL_UNSCRAMBLED"); _SCRAMBLE_CONTROL_UNSCRAMBLEDReady = true; } return _SCRAMBLE_CONTROL_UNSCRAMBLEDContent; } }
        private static byte _SCRAMBLE_CONTROL_UNSCRAMBLEDContent = default;
        private static bool _SCRAMBLE_CONTROL_UNSCRAMBLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDescrambler.html#SCRAMBLE_FLAG_PES_HEADER"/>
        /// </summary>
        public static byte SCRAMBLE_FLAG_PES_HEADER { get { if (!_SCRAMBLE_FLAG_PES_HEADERReady) { _SCRAMBLE_FLAG_PES_HEADERContent = SGetField<byte>(LocalBridgeClazz, "SCRAMBLE_FLAG_PES_HEADER"); _SCRAMBLE_FLAG_PES_HEADERReady = true; } return _SCRAMBLE_FLAG_PES_HEADERContent; } }
        private static byte _SCRAMBLE_FLAG_PES_HEADERContent = default;
        private static bool _SCRAMBLE_FLAG_PES_HEADERReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDescrambler.html#requiresSecureDecoderComponent(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RequiresSecureDecoderComponent(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<bool>("requiresSecureDecoderComponent", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDescrambler.html#descramble(java.nio.ByteBuffer,java.nio.ByteBuffer,android.media.MediaCodec.CryptoInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="arg1"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="arg2"><see cref="Android.Media.MediaCodec.CryptoInfo"/></param>
        /// <returns><see cref="int"/></returns>
        public int Descramble(Java.Nio.ByteBuffer arg0, Java.Nio.ByteBuffer arg1, Android.Media.MediaCodec.CryptoInfo arg2)
        {
            return IExecute<int>("descramble", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDescrambler.html#close()"/>
        /// </summary>
        public void Close()
        {
            IExecuteWithSignature("close", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDescrambler.html#setMediaCasSession(android.media.MediaCas.Session)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaCas.Session"/></param>
        public void SetMediaCasSession(Android.Media.MediaCas.Session arg0)
        {
            IExecuteWithSignature("setMediaCasSession", "(Landroid/media/MediaCas$Session;)V", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
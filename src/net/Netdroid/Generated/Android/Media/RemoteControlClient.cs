/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.8.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media
{
    #region RemoteControlClient
    public partial class RemoteControlClient
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RemoteControlClient.html#%3Cinit%3E(android.app.PendingIntent,android.os.Looper)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.PendingIntent"/></param>
        /// <param name="arg1"><see cref="Android.Os.Looper"/></param>
        [global::System.Obsolete()]
        public RemoteControlClient(Android.App.PendingIntent arg0, Android.Os.Looper arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RemoteControlClient.html#%3Cinit%3E(android.app.PendingIntent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.PendingIntent"/></param>
        [global::System.Obsolete()]
        public RemoteControlClient(Android.App.PendingIntent arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RemoteControlClient.html#FLAG_KEY_MEDIA_FAST_FORWARD"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int FLAG_KEY_MEDIA_FAST_FORWARD { get { if (!_FLAG_KEY_MEDIA_FAST_FORWARDReady) { _FLAG_KEY_MEDIA_FAST_FORWARDContent = SGetField<int>(LocalBridgeClazz, "FLAG_KEY_MEDIA_FAST_FORWARD"); _FLAG_KEY_MEDIA_FAST_FORWARDReady = true; } return _FLAG_KEY_MEDIA_FAST_FORWARDContent; } }
        private static int _FLAG_KEY_MEDIA_FAST_FORWARDContent = default;
        private static bool _FLAG_KEY_MEDIA_FAST_FORWARDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RemoteControlClient.html#FLAG_KEY_MEDIA_NEXT"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int FLAG_KEY_MEDIA_NEXT { get { if (!_FLAG_KEY_MEDIA_NEXTReady) { _FLAG_KEY_MEDIA_NEXTContent = SGetField<int>(LocalBridgeClazz, "FLAG_KEY_MEDIA_NEXT"); _FLAG_KEY_MEDIA_NEXTReady = true; } return _FLAG_KEY_MEDIA_NEXTContent; } }
        private static int _FLAG_KEY_MEDIA_NEXTContent = default;
        private static bool _FLAG_KEY_MEDIA_NEXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RemoteControlClient.html#FLAG_KEY_MEDIA_PAUSE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int FLAG_KEY_MEDIA_PAUSE { get { if (!_FLAG_KEY_MEDIA_PAUSEReady) { _FLAG_KEY_MEDIA_PAUSEContent = SGetField<int>(LocalBridgeClazz, "FLAG_KEY_MEDIA_PAUSE"); _FLAG_KEY_MEDIA_PAUSEReady = true; } return _FLAG_KEY_MEDIA_PAUSEContent; } }
        private static int _FLAG_KEY_MEDIA_PAUSEContent = default;
        private static bool _FLAG_KEY_MEDIA_PAUSEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RemoteControlClient.html#FLAG_KEY_MEDIA_PLAY"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int FLAG_KEY_MEDIA_PLAY { get { if (!_FLAG_KEY_MEDIA_PLAYReady) { _FLAG_KEY_MEDIA_PLAYContent = SGetField<int>(LocalBridgeClazz, "FLAG_KEY_MEDIA_PLAY"); _FLAG_KEY_MEDIA_PLAYReady = true; } return _FLAG_KEY_MEDIA_PLAYContent; } }
        private static int _FLAG_KEY_MEDIA_PLAYContent = default;
        private static bool _FLAG_KEY_MEDIA_PLAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RemoteControlClient.html#FLAG_KEY_MEDIA_PLAY_PAUSE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int FLAG_KEY_MEDIA_PLAY_PAUSE { get { if (!_FLAG_KEY_MEDIA_PLAY_PAUSEReady) { _FLAG_KEY_MEDIA_PLAY_PAUSEContent = SGetField<int>(LocalBridgeClazz, "FLAG_KEY_MEDIA_PLAY_PAUSE"); _FLAG_KEY_MEDIA_PLAY_PAUSEReady = true; } return _FLAG_KEY_MEDIA_PLAY_PAUSEContent; } }
        private static int _FLAG_KEY_MEDIA_PLAY_PAUSEContent = default;
        private static bool _FLAG_KEY_MEDIA_PLAY_PAUSEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RemoteControlClient.html#FLAG_KEY_MEDIA_POSITION_UPDATE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int FLAG_KEY_MEDIA_POSITION_UPDATE { get { if (!_FLAG_KEY_MEDIA_POSITION_UPDATEReady) { _FLAG_KEY_MEDIA_POSITION_UPDATEContent = SGetField<int>(LocalBridgeClazz, "FLAG_KEY_MEDIA_POSITION_UPDATE"); _FLAG_KEY_MEDIA_POSITION_UPDATEReady = true; } return _FLAG_KEY_MEDIA_POSITION_UPDATEContent; } }
        private static int _FLAG_KEY_MEDIA_POSITION_UPDATEContent = default;
        private static bool _FLAG_KEY_MEDIA_POSITION_UPDATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RemoteControlClient.html#FLAG_KEY_MEDIA_PREVIOUS"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int FLAG_KEY_MEDIA_PREVIOUS { get { if (!_FLAG_KEY_MEDIA_PREVIOUSReady) { _FLAG_KEY_MEDIA_PREVIOUSContent = SGetField<int>(LocalBridgeClazz, "FLAG_KEY_MEDIA_PREVIOUS"); _FLAG_KEY_MEDIA_PREVIOUSReady = true; } return _FLAG_KEY_MEDIA_PREVIOUSContent; } }
        private static int _FLAG_KEY_MEDIA_PREVIOUSContent = default;
        private static bool _FLAG_KEY_MEDIA_PREVIOUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RemoteControlClient.html#FLAG_KEY_MEDIA_RATING"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int FLAG_KEY_MEDIA_RATING { get { if (!_FLAG_KEY_MEDIA_RATINGReady) { _FLAG_KEY_MEDIA_RATINGContent = SGetField<int>(LocalBridgeClazz, "FLAG_KEY_MEDIA_RATING"); _FLAG_KEY_MEDIA_RATINGReady = true; } return _FLAG_KEY_MEDIA_RATINGContent; } }
        private static int _FLAG_KEY_MEDIA_RATINGContent = default;
        private static bool _FLAG_KEY_MEDIA_RATINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RemoteControlClient.html#FLAG_KEY_MEDIA_REWIND"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int FLAG_KEY_MEDIA_REWIND { get { if (!_FLAG_KEY_MEDIA_REWINDReady) { _FLAG_KEY_MEDIA_REWINDContent = SGetField<int>(LocalBridgeClazz, "FLAG_KEY_MEDIA_REWIND"); _FLAG_KEY_MEDIA_REWINDReady = true; } return _FLAG_KEY_MEDIA_REWINDContent; } }
        private static int _FLAG_KEY_MEDIA_REWINDContent = default;
        private static bool _FLAG_KEY_MEDIA_REWINDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RemoteControlClient.html#FLAG_KEY_MEDIA_STOP"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int FLAG_KEY_MEDIA_STOP { get { if (!_FLAG_KEY_MEDIA_STOPReady) { _FLAG_KEY_MEDIA_STOPContent = SGetField<int>(LocalBridgeClazz, "FLAG_KEY_MEDIA_STOP"); _FLAG_KEY_MEDIA_STOPReady = true; } return _FLAG_KEY_MEDIA_STOPContent; } }
        private static int _FLAG_KEY_MEDIA_STOPContent = default;
        private static bool _FLAG_KEY_MEDIA_STOPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RemoteControlClient.html#PLAYSTATE_BUFFERING"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int PLAYSTATE_BUFFERING { get { if (!_PLAYSTATE_BUFFERINGReady) { _PLAYSTATE_BUFFERINGContent = SGetField<int>(LocalBridgeClazz, "PLAYSTATE_BUFFERING"); _PLAYSTATE_BUFFERINGReady = true; } return _PLAYSTATE_BUFFERINGContent; } }
        private static int _PLAYSTATE_BUFFERINGContent = default;
        private static bool _PLAYSTATE_BUFFERINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RemoteControlClient.html#PLAYSTATE_ERROR"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int PLAYSTATE_ERROR { get { if (!_PLAYSTATE_ERRORReady) { _PLAYSTATE_ERRORContent = SGetField<int>(LocalBridgeClazz, "PLAYSTATE_ERROR"); _PLAYSTATE_ERRORReady = true; } return _PLAYSTATE_ERRORContent; } }
        private static int _PLAYSTATE_ERRORContent = default;
        private static bool _PLAYSTATE_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RemoteControlClient.html#PLAYSTATE_FAST_FORWARDING"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int PLAYSTATE_FAST_FORWARDING { get { if (!_PLAYSTATE_FAST_FORWARDINGReady) { _PLAYSTATE_FAST_FORWARDINGContent = SGetField<int>(LocalBridgeClazz, "PLAYSTATE_FAST_FORWARDING"); _PLAYSTATE_FAST_FORWARDINGReady = true; } return _PLAYSTATE_FAST_FORWARDINGContent; } }
        private static int _PLAYSTATE_FAST_FORWARDINGContent = default;
        private static bool _PLAYSTATE_FAST_FORWARDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RemoteControlClient.html#PLAYSTATE_PAUSED"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int PLAYSTATE_PAUSED { get { if (!_PLAYSTATE_PAUSEDReady) { _PLAYSTATE_PAUSEDContent = SGetField<int>(LocalBridgeClazz, "PLAYSTATE_PAUSED"); _PLAYSTATE_PAUSEDReady = true; } return _PLAYSTATE_PAUSEDContent; } }
        private static int _PLAYSTATE_PAUSEDContent = default;
        private static bool _PLAYSTATE_PAUSEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RemoteControlClient.html#PLAYSTATE_PLAYING"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int PLAYSTATE_PLAYING { get { if (!_PLAYSTATE_PLAYINGReady) { _PLAYSTATE_PLAYINGContent = SGetField<int>(LocalBridgeClazz, "PLAYSTATE_PLAYING"); _PLAYSTATE_PLAYINGReady = true; } return _PLAYSTATE_PLAYINGContent; } }
        private static int _PLAYSTATE_PLAYINGContent = default;
        private static bool _PLAYSTATE_PLAYINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RemoteControlClient.html#PLAYSTATE_REWINDING"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int PLAYSTATE_REWINDING { get { if (!_PLAYSTATE_REWINDINGReady) { _PLAYSTATE_REWINDINGContent = SGetField<int>(LocalBridgeClazz, "PLAYSTATE_REWINDING"); _PLAYSTATE_REWINDINGReady = true; } return _PLAYSTATE_REWINDINGContent; } }
        private static int _PLAYSTATE_REWINDINGContent = default;
        private static bool _PLAYSTATE_REWINDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RemoteControlClient.html#PLAYSTATE_SKIPPING_BACKWARDS"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int PLAYSTATE_SKIPPING_BACKWARDS { get { if (!_PLAYSTATE_SKIPPING_BACKWARDSReady) { _PLAYSTATE_SKIPPING_BACKWARDSContent = SGetField<int>(LocalBridgeClazz, "PLAYSTATE_SKIPPING_BACKWARDS"); _PLAYSTATE_SKIPPING_BACKWARDSReady = true; } return _PLAYSTATE_SKIPPING_BACKWARDSContent; } }
        private static int _PLAYSTATE_SKIPPING_BACKWARDSContent = default;
        private static bool _PLAYSTATE_SKIPPING_BACKWARDSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RemoteControlClient.html#PLAYSTATE_SKIPPING_FORWARDS"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int PLAYSTATE_SKIPPING_FORWARDS { get { if (!_PLAYSTATE_SKIPPING_FORWARDSReady) { _PLAYSTATE_SKIPPING_FORWARDSContent = SGetField<int>(LocalBridgeClazz, "PLAYSTATE_SKIPPING_FORWARDS"); _PLAYSTATE_SKIPPING_FORWARDSReady = true; } return _PLAYSTATE_SKIPPING_FORWARDSContent; } }
        private static int _PLAYSTATE_SKIPPING_FORWARDSContent = default;
        private static bool _PLAYSTATE_SKIPPING_FORWARDSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RemoteControlClient.html#PLAYSTATE_STOPPED"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int PLAYSTATE_STOPPED { get { if (!_PLAYSTATE_STOPPEDReady) { _PLAYSTATE_STOPPEDContent = SGetField<int>(LocalBridgeClazz, "PLAYSTATE_STOPPED"); _PLAYSTATE_STOPPEDReady = true; } return _PLAYSTATE_STOPPEDContent; } }
        private static int _PLAYSTATE_STOPPEDContent = default;
        private static bool _PLAYSTATE_STOPPEDReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RemoteControlClient.html#editMetadata(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        /// <returns><see cref="Android.Media.RemoteControlClient.MetadataEditor"/></returns>
        [global::System.Obsolete()]
        public Android.Media.RemoteControlClient.MetadataEditor EditMetadata(bool arg0)
        {
            return IExecuteWithSignature<Android.Media.RemoteControlClient.MetadataEditor>("editMetadata", "(Z)Landroid/media/RemoteControlClient$MetadataEditor;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RemoteControlClient.html#getMediaSession()"/>
        /// </summary>
        /// <returns><see cref="Android.Media.Session.MediaSession"/></returns>
        [global::System.Obsolete()]
        public Android.Media.Session.MediaSession GetMediaSession()
        {
            return IExecuteWithSignature<Android.Media.Session.MediaSession>("getMediaSession", "()Landroid/media/session/MediaSession;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RemoteControlClient.html#setMetadataUpdateListener(android.media.RemoteControlClient.OnMetadataUpdateListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.RemoteControlClient.OnMetadataUpdateListener"/></param>
        [global::System.Obsolete()]
        public void SetMetadataUpdateListener(Android.Media.RemoteControlClient.OnMetadataUpdateListener arg0)
        {
            IExecuteWithSignature("setMetadataUpdateListener", "(Landroid/media/RemoteControlClient$OnMetadataUpdateListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RemoteControlClient.html#setOnGetPlaybackPositionListener(android.media.RemoteControlClient.OnGetPlaybackPositionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.RemoteControlClient.OnGetPlaybackPositionListener"/></param>
        [global::System.Obsolete()]
        public void SetOnGetPlaybackPositionListener(Android.Media.RemoteControlClient.OnGetPlaybackPositionListener arg0)
        {
            IExecuteWithSignature("setOnGetPlaybackPositionListener", "(Landroid/media/RemoteControlClient$OnGetPlaybackPositionListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RemoteControlClient.html#setPlaybackPositionUpdateListener(android.media.RemoteControlClient.OnPlaybackPositionUpdateListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.RemoteControlClient.OnPlaybackPositionUpdateListener"/></param>
        [global::System.Obsolete()]
        public void SetPlaybackPositionUpdateListener(Android.Media.RemoteControlClient.OnPlaybackPositionUpdateListener arg0)
        {
            IExecuteWithSignature("setPlaybackPositionUpdateListener", "(Landroid/media/RemoteControlClient$OnPlaybackPositionUpdateListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RemoteControlClient.html#setPlaybackState(int,long,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        [global::System.Obsolete()]
        public void SetPlaybackState(int arg0, long arg1, float arg2)
        {
            IExecute("setPlaybackState", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RemoteControlClient.html#setPlaybackState(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void SetPlaybackState(int arg0)
        {
            IExecuteWithSignature("setPlaybackState", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RemoteControlClient.html#setTransportControlFlags(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void SetTransportControlFlags(int arg0)
        {
            IExecuteWithSignature("setTransportControlFlags", "(I)V", arg0);
        }

        #endregion

        #region Nested classes
        #region MetadataEditor
        public partial class MetadataEditor
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/RemoteControlClient.MetadataEditor.html#BITMAP_KEY_ARTWORK"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int BITMAP_KEY_ARTWORK { get { if (!_BITMAP_KEY_ARTWORKReady) { _BITMAP_KEY_ARTWORKContent = SGetField<int>(LocalBridgeClazz, "BITMAP_KEY_ARTWORK"); _BITMAP_KEY_ARTWORKReady = true; } return _BITMAP_KEY_ARTWORKContent; } }
            private static int _BITMAP_KEY_ARTWORKContent = default;
            private static bool _BITMAP_KEY_ARTWORKReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnGetPlaybackPositionListener
        public partial class OnGetPlaybackPositionListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnGetPlaybackPositionListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onGetPlaybackPosition", new global::System.EventHandler<CLRListenerEventArgs<CLREventData>>(OnGetPlaybackPositionEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/RemoteControlClient.OnGetPlaybackPositionListener.html#onGetPlaybackPosition()"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnGetPlaybackPosition"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<long> OnOnGetPlaybackPosition { get; set; } = null;

            void OnGetPlaybackPositionEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
            {
                var methodToExecute = (OnOnGetPlaybackPosition != null) ? OnOnGetPlaybackPosition : OnGetPlaybackPosition;
                var executionResult = methodToExecute.Invoke();
                data.SetReturnValue(executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/RemoteControlClient.OnGetPlaybackPositionListener.html#onGetPlaybackPosition()"/>
            /// </summary>
            /// <returns><see cref="long"/></returns>
            [global::System.Obsolete()]
            public virtual long OnGetPlaybackPosition()
            {
                return default;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnGetPlaybackPositionListenerDirect
        public partial class OnGetPlaybackPositionListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/RemoteControlClient.OnGetPlaybackPositionListener.html#onGetPlaybackPosition()"/>
            /// </summary>
            /// <returns><see cref="long"/></returns>
            [global::System.Obsolete()]
            public override long OnGetPlaybackPosition()
            {
                return IExecuteWithSignature<long>("onGetPlaybackPosition", "()J");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnMetadataUpdateListener
        public partial class OnMetadataUpdateListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnMetadataUpdateListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onMetadataUpdate", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(OnMetadataUpdateEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/RemoteControlClient.OnMetadataUpdateListener.html#onMetadataUpdate(int,java.lang.Object)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnMetadataUpdate"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<int, object> OnOnMetadataUpdate { get; set; } = null;

            void OnMetadataUpdateEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
            {
                var methodToExecute = (OnOnMetadataUpdate != null) ? OnOnMetadataUpdate : OnMetadataUpdate;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<object>(0));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/RemoteControlClient.OnMetadataUpdateListener.html#onMetadataUpdate(int,java.lang.Object)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="object"/></param>
            [global::System.Obsolete()]
            public virtual void OnMetadataUpdate(int arg0, object arg1)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnMetadataUpdateListenerDirect
        public partial class OnMetadataUpdateListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/RemoteControlClient.OnMetadataUpdateListener.html#onMetadataUpdate(int,java.lang.Object)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="object"/></param>
            [global::System.Obsolete()]
            public override void OnMetadataUpdate(int arg0, object arg1)
            {
                IExecute("onMetadataUpdate", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnPlaybackPositionUpdateListener
        public partial class OnPlaybackPositionUpdateListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnPlaybackPositionUpdateListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onPlaybackPositionUpdate", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<long>>>(OnPlaybackPositionUpdateEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/RemoteControlClient.OnPlaybackPositionUpdateListener.html#onPlaybackPositionUpdate(long)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnPlaybackPositionUpdate"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<long> OnOnPlaybackPositionUpdate { get; set; } = null;

            void OnPlaybackPositionUpdateEventHandler(object sender, CLRListenerEventArgs<CLREventData<long>> data)
            {
                var methodToExecute = (OnOnPlaybackPositionUpdate != null) ? OnOnPlaybackPositionUpdate : OnPlaybackPositionUpdate;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/RemoteControlClient.OnPlaybackPositionUpdateListener.html#onPlaybackPositionUpdate(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            [global::System.Obsolete()]
            public virtual void OnPlaybackPositionUpdate(long arg0)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnPlaybackPositionUpdateListenerDirect
        public partial class OnPlaybackPositionUpdateListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/RemoteControlClient.OnPlaybackPositionUpdateListener.html#onPlaybackPositionUpdate(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            [global::System.Obsolete()]
            public override void OnPlaybackPositionUpdate(long arg0)
            {
                IExecuteWithSignature("onPlaybackPositionUpdate", "(J)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
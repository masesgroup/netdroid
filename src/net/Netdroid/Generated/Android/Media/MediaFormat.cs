/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media
{
    #region MediaFormat declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html"/>
    /// </summary>
    public partial class MediaFormat : MASES.JCOBridge.C2JBridge.JVMBridgeBase<MediaFormat>
    {
        const string _bridgeClassName = "android.media.MediaFormat";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public MediaFormat() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public MediaFormat(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region QpOffsetRect declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.QpOffsetRect.html"/>
        /// </summary>
        public partial class QpOffsetRect : MASES.JCOBridge.C2JBridge.JVMBridgeBase<QpOffsetRect>
        {
            const string _bridgeClassName = "android.media.MediaFormat$QpOffsetRect";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public QpOffsetRect() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public QpOffsetRect(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region MediaFormat implementation
    public partial class MediaFormat
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#%3Cinit%3E(android.media.MediaFormat)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaFormat"/></param>
        public MediaFormat(Android.Media.MediaFormat arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#COLOR_RANGE_FULL"/>
        /// </summary>
        public static int COLOR_RANGE_FULL { get { if (!_COLOR_RANGE_FULLReady) { _COLOR_RANGE_FULLContent = SGetField<int>(LocalBridgeClazz, "COLOR_RANGE_FULL"); _COLOR_RANGE_FULLReady = true; } return _COLOR_RANGE_FULLContent; } }
        private static int _COLOR_RANGE_FULLContent = default;
        private static bool _COLOR_RANGE_FULLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#COLOR_RANGE_LIMITED"/>
        /// </summary>
        public static int COLOR_RANGE_LIMITED { get { if (!_COLOR_RANGE_LIMITEDReady) { _COLOR_RANGE_LIMITEDContent = SGetField<int>(LocalBridgeClazz, "COLOR_RANGE_LIMITED"); _COLOR_RANGE_LIMITEDReady = true; } return _COLOR_RANGE_LIMITEDContent; } }
        private static int _COLOR_RANGE_LIMITEDContent = default;
        private static bool _COLOR_RANGE_LIMITEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#COLOR_STANDARD_BT2020"/>
        /// </summary>
        public static int COLOR_STANDARD_BT2020 { get { if (!_COLOR_STANDARD_BT2020Ready) { _COLOR_STANDARD_BT2020Content = SGetField<int>(LocalBridgeClazz, "COLOR_STANDARD_BT2020"); _COLOR_STANDARD_BT2020Ready = true; } return _COLOR_STANDARD_BT2020Content; } }
        private static int _COLOR_STANDARD_BT2020Content = default;
        private static bool _COLOR_STANDARD_BT2020Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#COLOR_STANDARD_BT601_NTSC"/>
        /// </summary>
        public static int COLOR_STANDARD_BT601_NTSC { get { if (!_COLOR_STANDARD_BT601_NTSCReady) { _COLOR_STANDARD_BT601_NTSCContent = SGetField<int>(LocalBridgeClazz, "COLOR_STANDARD_BT601_NTSC"); _COLOR_STANDARD_BT601_NTSCReady = true; } return _COLOR_STANDARD_BT601_NTSCContent; } }
        private static int _COLOR_STANDARD_BT601_NTSCContent = default;
        private static bool _COLOR_STANDARD_BT601_NTSCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#COLOR_STANDARD_BT601_PAL"/>
        /// </summary>
        public static int COLOR_STANDARD_BT601_PAL { get { if (!_COLOR_STANDARD_BT601_PALReady) { _COLOR_STANDARD_BT601_PALContent = SGetField<int>(LocalBridgeClazz, "COLOR_STANDARD_BT601_PAL"); _COLOR_STANDARD_BT601_PALReady = true; } return _COLOR_STANDARD_BT601_PALContent; } }
        private static int _COLOR_STANDARD_BT601_PALContent = default;
        private static bool _COLOR_STANDARD_BT601_PALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#COLOR_STANDARD_BT709"/>
        /// </summary>
        public static int COLOR_STANDARD_BT709 { get { if (!_COLOR_STANDARD_BT709Ready) { _COLOR_STANDARD_BT709Content = SGetField<int>(LocalBridgeClazz, "COLOR_STANDARD_BT709"); _COLOR_STANDARD_BT709Ready = true; } return _COLOR_STANDARD_BT709Content; } }
        private static int _COLOR_STANDARD_BT709Content = default;
        private static bool _COLOR_STANDARD_BT709Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#COLOR_TRANSFER_HLG"/>
        /// </summary>
        public static int COLOR_TRANSFER_HLG { get { if (!_COLOR_TRANSFER_HLGReady) { _COLOR_TRANSFER_HLGContent = SGetField<int>(LocalBridgeClazz, "COLOR_TRANSFER_HLG"); _COLOR_TRANSFER_HLGReady = true; } return _COLOR_TRANSFER_HLGContent; } }
        private static int _COLOR_TRANSFER_HLGContent = default;
        private static bool _COLOR_TRANSFER_HLGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#COLOR_TRANSFER_LINEAR"/>
        /// </summary>
        public static int COLOR_TRANSFER_LINEAR { get { if (!_COLOR_TRANSFER_LINEARReady) { _COLOR_TRANSFER_LINEARContent = SGetField<int>(LocalBridgeClazz, "COLOR_TRANSFER_LINEAR"); _COLOR_TRANSFER_LINEARReady = true; } return _COLOR_TRANSFER_LINEARContent; } }
        private static int _COLOR_TRANSFER_LINEARContent = default;
        private static bool _COLOR_TRANSFER_LINEARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#COLOR_TRANSFER_SDR_VIDEO"/>
        /// </summary>
        public static int COLOR_TRANSFER_SDR_VIDEO { get { if (!_COLOR_TRANSFER_SDR_VIDEOReady) { _COLOR_TRANSFER_SDR_VIDEOContent = SGetField<int>(LocalBridgeClazz, "COLOR_TRANSFER_SDR_VIDEO"); _COLOR_TRANSFER_SDR_VIDEOReady = true; } return _COLOR_TRANSFER_SDR_VIDEOContent; } }
        private static int _COLOR_TRANSFER_SDR_VIDEOContent = default;
        private static bool _COLOR_TRANSFER_SDR_VIDEOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#COLOR_TRANSFER_ST2084"/>
        /// </summary>
        public static int COLOR_TRANSFER_ST2084 { get { if (!_COLOR_TRANSFER_ST2084Ready) { _COLOR_TRANSFER_ST2084Content = SGetField<int>(LocalBridgeClazz, "COLOR_TRANSFER_ST2084"); _COLOR_TRANSFER_ST2084Ready = true; } return _COLOR_TRANSFER_ST2084Content; } }
        private static int _COLOR_TRANSFER_ST2084Content = default;
        private static bool _COLOR_TRANSFER_ST2084Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#PICTURE_TYPE_B"/>
        /// </summary>
        public static int PICTURE_TYPE_B { get { if (!_PICTURE_TYPE_BReady) { _PICTURE_TYPE_BContent = SGetField<int>(LocalBridgeClazz, "PICTURE_TYPE_B"); _PICTURE_TYPE_BReady = true; } return _PICTURE_TYPE_BContent; } }
        private static int _PICTURE_TYPE_BContent = default;
        private static bool _PICTURE_TYPE_BReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#PICTURE_TYPE_I"/>
        /// </summary>
        public static int PICTURE_TYPE_I { get { if (!_PICTURE_TYPE_IReady) { _PICTURE_TYPE_IContent = SGetField<int>(LocalBridgeClazz, "PICTURE_TYPE_I"); _PICTURE_TYPE_IReady = true; } return _PICTURE_TYPE_IContent; } }
        private static int _PICTURE_TYPE_IContent = default;
        private static bool _PICTURE_TYPE_IReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#PICTURE_TYPE_P"/>
        /// </summary>
        public static int PICTURE_TYPE_P { get { if (!_PICTURE_TYPE_PReady) { _PICTURE_TYPE_PContent = SGetField<int>(LocalBridgeClazz, "PICTURE_TYPE_P"); _PICTURE_TYPE_PReady = true; } return _PICTURE_TYPE_PContent; } }
        private static int _PICTURE_TYPE_PContent = default;
        private static bool _PICTURE_TYPE_PReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#PICTURE_TYPE_UNKNOWN"/>
        /// </summary>
        public static int PICTURE_TYPE_UNKNOWN { get { if (!_PICTURE_TYPE_UNKNOWNReady) { _PICTURE_TYPE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "PICTURE_TYPE_UNKNOWN"); _PICTURE_TYPE_UNKNOWNReady = true; } return _PICTURE_TYPE_UNKNOWNContent; } }
        private static int _PICTURE_TYPE_UNKNOWNContent = default;
        private static bool _PICTURE_TYPE_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#TYPE_BYTE_BUFFER"/>
        /// </summary>
        public static int TYPE_BYTE_BUFFER { get { if (!_TYPE_BYTE_BUFFERReady) { _TYPE_BYTE_BUFFERContent = SGetField<int>(LocalBridgeClazz, "TYPE_BYTE_BUFFER"); _TYPE_BYTE_BUFFERReady = true; } return _TYPE_BYTE_BUFFERContent; } }
        private static int _TYPE_BYTE_BUFFERContent = default;
        private static bool _TYPE_BYTE_BUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#TYPE_FLOAT"/>
        /// </summary>
        public static int TYPE_FLOAT { get { if (!_TYPE_FLOATReady) { _TYPE_FLOATContent = SGetField<int>(LocalBridgeClazz, "TYPE_FLOAT"); _TYPE_FLOATReady = true; } return _TYPE_FLOATContent; } }
        private static int _TYPE_FLOATContent = default;
        private static bool _TYPE_FLOATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#TYPE_INTEGER"/>
        /// </summary>
        public static int TYPE_INTEGER { get { if (!_TYPE_INTEGERReady) { _TYPE_INTEGERContent = SGetField<int>(LocalBridgeClazz, "TYPE_INTEGER"); _TYPE_INTEGERReady = true; } return _TYPE_INTEGERContent; } }
        private static int _TYPE_INTEGERContent = default;
        private static bool _TYPE_INTEGERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#TYPE_LONG"/>
        /// </summary>
        public static int TYPE_LONG { get { if (!_TYPE_LONGReady) { _TYPE_LONGContent = SGetField<int>(LocalBridgeClazz, "TYPE_LONG"); _TYPE_LONGReady = true; } return _TYPE_LONGContent; } }
        private static int _TYPE_LONGContent = default;
        private static bool _TYPE_LONGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#TYPE_NULL"/>
        /// </summary>
        public static int TYPE_NULL { get { if (!_TYPE_NULLReady) { _TYPE_NULLContent = SGetField<int>(LocalBridgeClazz, "TYPE_NULL"); _TYPE_NULLReady = true; } return _TYPE_NULLContent; } }
        private static int _TYPE_NULLContent = default;
        private static bool _TYPE_NULLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#TYPE_STRING"/>
        /// </summary>
        public static int TYPE_STRING { get { if (!_TYPE_STRINGReady) { _TYPE_STRINGContent = SGetField<int>(LocalBridgeClazz, "TYPE_STRING"); _TYPE_STRINGReady = true; } return _TYPE_STRINGContent; } }
        private static int _TYPE_STRINGContent = default;
        private static bool _TYPE_STRINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#VIDEO_ENCODING_STATISTICS_LEVEL_1"/>
        /// </summary>
        public static int VIDEO_ENCODING_STATISTICS_LEVEL_1 { get { if (!_VIDEO_ENCODING_STATISTICS_LEVEL_1Ready) { _VIDEO_ENCODING_STATISTICS_LEVEL_1Content = SGetField<int>(LocalBridgeClazz, "VIDEO_ENCODING_STATISTICS_LEVEL_1"); _VIDEO_ENCODING_STATISTICS_LEVEL_1Ready = true; } return _VIDEO_ENCODING_STATISTICS_LEVEL_1Content; } }
        private static int _VIDEO_ENCODING_STATISTICS_LEVEL_1Content = default;
        private static bool _VIDEO_ENCODING_STATISTICS_LEVEL_1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#VIDEO_ENCODING_STATISTICS_LEVEL_NONE"/>
        /// </summary>
        public static int VIDEO_ENCODING_STATISTICS_LEVEL_NONE { get { if (!_VIDEO_ENCODING_STATISTICS_LEVEL_NONEReady) { _VIDEO_ENCODING_STATISTICS_LEVEL_NONEContent = SGetField<int>(LocalBridgeClazz, "VIDEO_ENCODING_STATISTICS_LEVEL_NONE"); _VIDEO_ENCODING_STATISTICS_LEVEL_NONEReady = true; } return _VIDEO_ENCODING_STATISTICS_LEVEL_NONEContent; } }
        private static int _VIDEO_ENCODING_STATISTICS_LEVEL_NONEContent = default;
        private static bool _VIDEO_ENCODING_STATISTICS_LEVEL_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_AAC_DRC_ALBUM_MODE"/>
        /// </summary>
        public static Java.Lang.String KEY_AAC_DRC_ALBUM_MODE { get { if (!_KEY_AAC_DRC_ALBUM_MODEReady) { _KEY_AAC_DRC_ALBUM_MODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_AAC_DRC_ALBUM_MODE"); _KEY_AAC_DRC_ALBUM_MODEReady = true; } return _KEY_AAC_DRC_ALBUM_MODEContent; } }
        private static Java.Lang.String _KEY_AAC_DRC_ALBUM_MODEContent = default;
        private static bool _KEY_AAC_DRC_ALBUM_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_AAC_DRC_ATTENUATION_FACTOR"/>
        /// </summary>
        public static Java.Lang.String KEY_AAC_DRC_ATTENUATION_FACTOR { get { if (!_KEY_AAC_DRC_ATTENUATION_FACTORReady) { _KEY_AAC_DRC_ATTENUATION_FACTORContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_AAC_DRC_ATTENUATION_FACTOR"); _KEY_AAC_DRC_ATTENUATION_FACTORReady = true; } return _KEY_AAC_DRC_ATTENUATION_FACTORContent; } }
        private static Java.Lang.String _KEY_AAC_DRC_ATTENUATION_FACTORContent = default;
        private static bool _KEY_AAC_DRC_ATTENUATION_FACTORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_AAC_DRC_BOOST_FACTOR"/>
        /// </summary>
        public static Java.Lang.String KEY_AAC_DRC_BOOST_FACTOR { get { if (!_KEY_AAC_DRC_BOOST_FACTORReady) { _KEY_AAC_DRC_BOOST_FACTORContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_AAC_DRC_BOOST_FACTOR"); _KEY_AAC_DRC_BOOST_FACTORReady = true; } return _KEY_AAC_DRC_BOOST_FACTORContent; } }
        private static Java.Lang.String _KEY_AAC_DRC_BOOST_FACTORContent = default;
        private static bool _KEY_AAC_DRC_BOOST_FACTORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_AAC_DRC_EFFECT_TYPE"/>
        /// </summary>
        public static Java.Lang.String KEY_AAC_DRC_EFFECT_TYPE { get { if (!_KEY_AAC_DRC_EFFECT_TYPEReady) { _KEY_AAC_DRC_EFFECT_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_AAC_DRC_EFFECT_TYPE"); _KEY_AAC_DRC_EFFECT_TYPEReady = true; } return _KEY_AAC_DRC_EFFECT_TYPEContent; } }
        private static Java.Lang.String _KEY_AAC_DRC_EFFECT_TYPEContent = default;
        private static bool _KEY_AAC_DRC_EFFECT_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_AAC_DRC_HEAVY_COMPRESSION"/>
        /// </summary>
        public static Java.Lang.String KEY_AAC_DRC_HEAVY_COMPRESSION { get { if (!_KEY_AAC_DRC_HEAVY_COMPRESSIONReady) { _KEY_AAC_DRC_HEAVY_COMPRESSIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_AAC_DRC_HEAVY_COMPRESSION"); _KEY_AAC_DRC_HEAVY_COMPRESSIONReady = true; } return _KEY_AAC_DRC_HEAVY_COMPRESSIONContent; } }
        private static Java.Lang.String _KEY_AAC_DRC_HEAVY_COMPRESSIONContent = default;
        private static bool _KEY_AAC_DRC_HEAVY_COMPRESSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_AAC_DRC_OUTPUT_LOUDNESS"/>
        /// </summary>
        public static Java.Lang.String KEY_AAC_DRC_OUTPUT_LOUDNESS { get { if (!_KEY_AAC_DRC_OUTPUT_LOUDNESSReady) { _KEY_AAC_DRC_OUTPUT_LOUDNESSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_AAC_DRC_OUTPUT_LOUDNESS"); _KEY_AAC_DRC_OUTPUT_LOUDNESSReady = true; } return _KEY_AAC_DRC_OUTPUT_LOUDNESSContent; } }
        private static Java.Lang.String _KEY_AAC_DRC_OUTPUT_LOUDNESSContent = default;
        private static bool _KEY_AAC_DRC_OUTPUT_LOUDNESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_AAC_DRC_TARGET_REFERENCE_LEVEL"/>
        /// </summary>
        public static Java.Lang.String KEY_AAC_DRC_TARGET_REFERENCE_LEVEL { get { if (!_KEY_AAC_DRC_TARGET_REFERENCE_LEVELReady) { _KEY_AAC_DRC_TARGET_REFERENCE_LEVELContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_AAC_DRC_TARGET_REFERENCE_LEVEL"); _KEY_AAC_DRC_TARGET_REFERENCE_LEVELReady = true; } return _KEY_AAC_DRC_TARGET_REFERENCE_LEVELContent; } }
        private static Java.Lang.String _KEY_AAC_DRC_TARGET_REFERENCE_LEVELContent = default;
        private static bool _KEY_AAC_DRC_TARGET_REFERENCE_LEVELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_AAC_ENCODED_TARGET_LEVEL"/>
        /// </summary>
        public static Java.Lang.String KEY_AAC_ENCODED_TARGET_LEVEL { get { if (!_KEY_AAC_ENCODED_TARGET_LEVELReady) { _KEY_AAC_ENCODED_TARGET_LEVELContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_AAC_ENCODED_TARGET_LEVEL"); _KEY_AAC_ENCODED_TARGET_LEVELReady = true; } return _KEY_AAC_ENCODED_TARGET_LEVELContent; } }
        private static Java.Lang.String _KEY_AAC_ENCODED_TARGET_LEVELContent = default;
        private static bool _KEY_AAC_ENCODED_TARGET_LEVELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_AAC_MAX_OUTPUT_CHANNEL_COUNT"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String KEY_AAC_MAX_OUTPUT_CHANNEL_COUNT { get { if (!_KEY_AAC_MAX_OUTPUT_CHANNEL_COUNTReady) { _KEY_AAC_MAX_OUTPUT_CHANNEL_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_AAC_MAX_OUTPUT_CHANNEL_COUNT"); _KEY_AAC_MAX_OUTPUT_CHANNEL_COUNTReady = true; } return _KEY_AAC_MAX_OUTPUT_CHANNEL_COUNTContent; } }
        private static Java.Lang.String _KEY_AAC_MAX_OUTPUT_CHANNEL_COUNTContent = default;
        private static bool _KEY_AAC_MAX_OUTPUT_CHANNEL_COUNTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_AAC_PROFILE"/>
        /// </summary>
        public static Java.Lang.String KEY_AAC_PROFILE { get { if (!_KEY_AAC_PROFILEReady) { _KEY_AAC_PROFILEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_AAC_PROFILE"); _KEY_AAC_PROFILEReady = true; } return _KEY_AAC_PROFILEContent; } }
        private static Java.Lang.String _KEY_AAC_PROFILEContent = default;
        private static bool _KEY_AAC_PROFILEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_AAC_SBR_MODE"/>
        /// </summary>
        public static Java.Lang.String KEY_AAC_SBR_MODE { get { if (!_KEY_AAC_SBR_MODEReady) { _KEY_AAC_SBR_MODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_AAC_SBR_MODE"); _KEY_AAC_SBR_MODEReady = true; } return _KEY_AAC_SBR_MODEContent; } }
        private static Java.Lang.String _KEY_AAC_SBR_MODEContent = default;
        private static bool _KEY_AAC_SBR_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_ALLOW_FRAME_DROP"/>
        /// </summary>
        public static Java.Lang.String KEY_ALLOW_FRAME_DROP { get { if (!_KEY_ALLOW_FRAME_DROPReady) { _KEY_ALLOW_FRAME_DROPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_ALLOW_FRAME_DROP"); _KEY_ALLOW_FRAME_DROPReady = true; } return _KEY_ALLOW_FRAME_DROPContent; } }
        private static Java.Lang.String _KEY_ALLOW_FRAME_DROPContent = default;
        private static bool _KEY_ALLOW_FRAME_DROPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_AUDIO_SESSION_ID"/>
        /// </summary>
        public static Java.Lang.String KEY_AUDIO_SESSION_ID { get { if (!_KEY_AUDIO_SESSION_IDReady) { _KEY_AUDIO_SESSION_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_AUDIO_SESSION_ID"); _KEY_AUDIO_SESSION_IDReady = true; } return _KEY_AUDIO_SESSION_IDContent; } }
        private static Java.Lang.String _KEY_AUDIO_SESSION_IDContent = default;
        private static bool _KEY_AUDIO_SESSION_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_BIT_RATE"/>
        /// </summary>
        public static Java.Lang.String KEY_BIT_RATE { get { if (!_KEY_BIT_RATEReady) { _KEY_BIT_RATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_BIT_RATE"); _KEY_BIT_RATEReady = true; } return _KEY_BIT_RATEContent; } }
        private static Java.Lang.String _KEY_BIT_RATEContent = default;
        private static bool _KEY_BIT_RATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_BITRATE_MODE"/>
        /// </summary>
        public static Java.Lang.String KEY_BITRATE_MODE { get { if (!_KEY_BITRATE_MODEReady) { _KEY_BITRATE_MODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_BITRATE_MODE"); _KEY_BITRATE_MODEReady = true; } return _KEY_BITRATE_MODEContent; } }
        private static Java.Lang.String _KEY_BITRATE_MODEContent = default;
        private static bool _KEY_BITRATE_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_BUFFER_BATCH_MAX_OUTPUT_SIZE"/>
        /// </summary>
        public static Java.Lang.String KEY_BUFFER_BATCH_MAX_OUTPUT_SIZE { get { if (!_KEY_BUFFER_BATCH_MAX_OUTPUT_SIZEReady) { _KEY_BUFFER_BATCH_MAX_OUTPUT_SIZEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_BUFFER_BATCH_MAX_OUTPUT_SIZE"); _KEY_BUFFER_BATCH_MAX_OUTPUT_SIZEReady = true; } return _KEY_BUFFER_BATCH_MAX_OUTPUT_SIZEContent; } }
        private static Java.Lang.String _KEY_BUFFER_BATCH_MAX_OUTPUT_SIZEContent = default;
        private static bool _KEY_BUFFER_BATCH_MAX_OUTPUT_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_BUFFER_BATCH_THRESHOLD_OUTPUT_SIZE"/>
        /// </summary>
        public static Java.Lang.String KEY_BUFFER_BATCH_THRESHOLD_OUTPUT_SIZE { get { if (!_KEY_BUFFER_BATCH_THRESHOLD_OUTPUT_SIZEReady) { _KEY_BUFFER_BATCH_THRESHOLD_OUTPUT_SIZEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_BUFFER_BATCH_THRESHOLD_OUTPUT_SIZE"); _KEY_BUFFER_BATCH_THRESHOLD_OUTPUT_SIZEReady = true; } return _KEY_BUFFER_BATCH_THRESHOLD_OUTPUT_SIZEContent; } }
        private static Java.Lang.String _KEY_BUFFER_BATCH_THRESHOLD_OUTPUT_SIZEContent = default;
        private static bool _KEY_BUFFER_BATCH_THRESHOLD_OUTPUT_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_CAPTION_SERVICE_NUMBER"/>
        /// </summary>
        public static Java.Lang.String KEY_CAPTION_SERVICE_NUMBER { get { if (!_KEY_CAPTION_SERVICE_NUMBERReady) { _KEY_CAPTION_SERVICE_NUMBERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_CAPTION_SERVICE_NUMBER"); _KEY_CAPTION_SERVICE_NUMBERReady = true; } return _KEY_CAPTION_SERVICE_NUMBERContent; } }
        private static Java.Lang.String _KEY_CAPTION_SERVICE_NUMBERContent = default;
        private static bool _KEY_CAPTION_SERVICE_NUMBERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_CAPTURE_RATE"/>
        /// </summary>
        public static Java.Lang.String KEY_CAPTURE_RATE { get { if (!_KEY_CAPTURE_RATEReady) { _KEY_CAPTURE_RATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_CAPTURE_RATE"); _KEY_CAPTURE_RATEReady = true; } return _KEY_CAPTURE_RATEContent; } }
        private static Java.Lang.String _KEY_CAPTURE_RATEContent = default;
        private static bool _KEY_CAPTURE_RATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_CHANNEL_COUNT"/>
        /// </summary>
        public static Java.Lang.String KEY_CHANNEL_COUNT { get { if (!_KEY_CHANNEL_COUNTReady) { _KEY_CHANNEL_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_CHANNEL_COUNT"); _KEY_CHANNEL_COUNTReady = true; } return _KEY_CHANNEL_COUNTContent; } }
        private static Java.Lang.String _KEY_CHANNEL_COUNTContent = default;
        private static bool _KEY_CHANNEL_COUNTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_CHANNEL_MASK"/>
        /// </summary>
        public static Java.Lang.String KEY_CHANNEL_MASK { get { if (!_KEY_CHANNEL_MASKReady) { _KEY_CHANNEL_MASKContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_CHANNEL_MASK"); _KEY_CHANNEL_MASKReady = true; } return _KEY_CHANNEL_MASKContent; } }
        private static Java.Lang.String _KEY_CHANNEL_MASKContent = default;
        private static bool _KEY_CHANNEL_MASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_CODECS_STRING"/>
        /// </summary>
        public static Java.Lang.String KEY_CODECS_STRING { get { if (!_KEY_CODECS_STRINGReady) { _KEY_CODECS_STRINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_CODECS_STRING"); _KEY_CODECS_STRINGReady = true; } return _KEY_CODECS_STRINGContent; } }
        private static Java.Lang.String _KEY_CODECS_STRINGContent = default;
        private static bool _KEY_CODECS_STRINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_COLOR_FORMAT"/>
        /// </summary>
        public static Java.Lang.String KEY_COLOR_FORMAT { get { if (!_KEY_COLOR_FORMATReady) { _KEY_COLOR_FORMATContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_COLOR_FORMAT"); _KEY_COLOR_FORMATReady = true; } return _KEY_COLOR_FORMATContent; } }
        private static Java.Lang.String _KEY_COLOR_FORMATContent = default;
        private static bool _KEY_COLOR_FORMATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_COLOR_RANGE"/>
        /// </summary>
        public static Java.Lang.String KEY_COLOR_RANGE { get { if (!_KEY_COLOR_RANGEReady) { _KEY_COLOR_RANGEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_COLOR_RANGE"); _KEY_COLOR_RANGEReady = true; } return _KEY_COLOR_RANGEContent; } }
        private static Java.Lang.String _KEY_COLOR_RANGEContent = default;
        private static bool _KEY_COLOR_RANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_COLOR_STANDARD"/>
        /// </summary>
        public static Java.Lang.String KEY_COLOR_STANDARD { get { if (!_KEY_COLOR_STANDARDReady) { _KEY_COLOR_STANDARDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_COLOR_STANDARD"); _KEY_COLOR_STANDARDReady = true; } return _KEY_COLOR_STANDARDContent; } }
        private static Java.Lang.String _KEY_COLOR_STANDARDContent = default;
        private static bool _KEY_COLOR_STANDARDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_COLOR_TRANSFER"/>
        /// </summary>
        public static Java.Lang.String KEY_COLOR_TRANSFER { get { if (!_KEY_COLOR_TRANSFERReady) { _KEY_COLOR_TRANSFERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_COLOR_TRANSFER"); _KEY_COLOR_TRANSFERReady = true; } return _KEY_COLOR_TRANSFERContent; } }
        private static Java.Lang.String _KEY_COLOR_TRANSFERContent = default;
        private static bool _KEY_COLOR_TRANSFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_COLOR_TRANSFER_REQUEST"/>
        /// </summary>
        public static Java.Lang.String KEY_COLOR_TRANSFER_REQUEST { get { if (!_KEY_COLOR_TRANSFER_REQUESTReady) { _KEY_COLOR_TRANSFER_REQUESTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_COLOR_TRANSFER_REQUEST"); _KEY_COLOR_TRANSFER_REQUESTReady = true; } return _KEY_COLOR_TRANSFER_REQUESTContent; } }
        private static Java.Lang.String _KEY_COLOR_TRANSFER_REQUESTContent = default;
        private static bool _KEY_COLOR_TRANSFER_REQUESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_COMPLEXITY"/>
        /// </summary>
        public static Java.Lang.String KEY_COMPLEXITY { get { if (!_KEY_COMPLEXITYReady) { _KEY_COMPLEXITYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_COMPLEXITY"); _KEY_COMPLEXITYReady = true; } return _KEY_COMPLEXITYContent; } }
        private static Java.Lang.String _KEY_COMPLEXITYContent = default;
        private static bool _KEY_COMPLEXITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_CREATE_INPUT_SURFACE_SUSPENDED"/>
        /// </summary>
        public static Java.Lang.String KEY_CREATE_INPUT_SURFACE_SUSPENDED { get { if (!_KEY_CREATE_INPUT_SURFACE_SUSPENDEDReady) { _KEY_CREATE_INPUT_SURFACE_SUSPENDEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_CREATE_INPUT_SURFACE_SUSPENDED"); _KEY_CREATE_INPUT_SURFACE_SUSPENDEDReady = true; } return _KEY_CREATE_INPUT_SURFACE_SUSPENDEDContent; } }
        private static Java.Lang.String _KEY_CREATE_INPUT_SURFACE_SUSPENDEDContent = default;
        private static bool _KEY_CREATE_INPUT_SURFACE_SUSPENDEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_CROP_BOTTOM"/>
        /// </summary>
        public static Java.Lang.String KEY_CROP_BOTTOM { get { if (!_KEY_CROP_BOTTOMReady) { _KEY_CROP_BOTTOMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_CROP_BOTTOM"); _KEY_CROP_BOTTOMReady = true; } return _KEY_CROP_BOTTOMContent; } }
        private static Java.Lang.String _KEY_CROP_BOTTOMContent = default;
        private static bool _KEY_CROP_BOTTOMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_CROP_LEFT"/>
        /// </summary>
        public static Java.Lang.String KEY_CROP_LEFT { get { if (!_KEY_CROP_LEFTReady) { _KEY_CROP_LEFTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_CROP_LEFT"); _KEY_CROP_LEFTReady = true; } return _KEY_CROP_LEFTContent; } }
        private static Java.Lang.String _KEY_CROP_LEFTContent = default;
        private static bool _KEY_CROP_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_CROP_RIGHT"/>
        /// </summary>
        public static Java.Lang.String KEY_CROP_RIGHT { get { if (!_KEY_CROP_RIGHTReady) { _KEY_CROP_RIGHTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_CROP_RIGHT"); _KEY_CROP_RIGHTReady = true; } return _KEY_CROP_RIGHTContent; } }
        private static Java.Lang.String _KEY_CROP_RIGHTContent = default;
        private static bool _KEY_CROP_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_CROP_TOP"/>
        /// </summary>
        public static Java.Lang.String KEY_CROP_TOP { get { if (!_KEY_CROP_TOPReady) { _KEY_CROP_TOPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_CROP_TOP"); _KEY_CROP_TOPReady = true; } return _KEY_CROP_TOPContent; } }
        private static Java.Lang.String _KEY_CROP_TOPContent = default;
        private static bool _KEY_CROP_TOPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_DURATION"/>
        /// </summary>
        public static Java.Lang.String KEY_DURATION { get { if (!_KEY_DURATIONReady) { _KEY_DURATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_DURATION"); _KEY_DURATIONReady = true; } return _KEY_DURATIONContent; } }
        private static Java.Lang.String _KEY_DURATIONContent = default;
        private static bool _KEY_DURATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_ENCODER_DELAY"/>
        /// </summary>
        public static Java.Lang.String KEY_ENCODER_DELAY { get { if (!_KEY_ENCODER_DELAYReady) { _KEY_ENCODER_DELAYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_ENCODER_DELAY"); _KEY_ENCODER_DELAYReady = true; } return _KEY_ENCODER_DELAYContent; } }
        private static Java.Lang.String _KEY_ENCODER_DELAYContent = default;
        private static bool _KEY_ENCODER_DELAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_ENCODER_PADDING"/>
        /// </summary>
        public static Java.Lang.String KEY_ENCODER_PADDING { get { if (!_KEY_ENCODER_PADDINGReady) { _KEY_ENCODER_PADDINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_ENCODER_PADDING"); _KEY_ENCODER_PADDINGReady = true; } return _KEY_ENCODER_PADDINGContent; } }
        private static Java.Lang.String _KEY_ENCODER_PADDINGContent = default;
        private static bool _KEY_ENCODER_PADDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_FLAC_COMPRESSION_LEVEL"/>
        /// </summary>
        public static Java.Lang.String KEY_FLAC_COMPRESSION_LEVEL { get { if (!_KEY_FLAC_COMPRESSION_LEVELReady) { _KEY_FLAC_COMPRESSION_LEVELContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_FLAC_COMPRESSION_LEVEL"); _KEY_FLAC_COMPRESSION_LEVELReady = true; } return _KEY_FLAC_COMPRESSION_LEVELContent; } }
        private static Java.Lang.String _KEY_FLAC_COMPRESSION_LEVELContent = default;
        private static bool _KEY_FLAC_COMPRESSION_LEVELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_FRAME_RATE"/>
        /// </summary>
        public static Java.Lang.String KEY_FRAME_RATE { get { if (!_KEY_FRAME_RATEReady) { _KEY_FRAME_RATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_FRAME_RATE"); _KEY_FRAME_RATEReady = true; } return _KEY_FRAME_RATEContent; } }
        private static Java.Lang.String _KEY_FRAME_RATEContent = default;
        private static bool _KEY_FRAME_RATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_GRID_COLUMNS"/>
        /// </summary>
        public static Java.Lang.String KEY_GRID_COLUMNS { get { if (!_KEY_GRID_COLUMNSReady) { _KEY_GRID_COLUMNSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_GRID_COLUMNS"); _KEY_GRID_COLUMNSReady = true; } return _KEY_GRID_COLUMNSContent; } }
        private static Java.Lang.String _KEY_GRID_COLUMNSContent = default;
        private static bool _KEY_GRID_COLUMNSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_GRID_ROWS"/>
        /// </summary>
        public static Java.Lang.String KEY_GRID_ROWS { get { if (!_KEY_GRID_ROWSReady) { _KEY_GRID_ROWSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_GRID_ROWS"); _KEY_GRID_ROWSReady = true; } return _KEY_GRID_ROWSContent; } }
        private static Java.Lang.String _KEY_GRID_ROWSContent = default;
        private static bool _KEY_GRID_ROWSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_HAPTIC_CHANNEL_COUNT"/>
        /// </summary>
        public static Java.Lang.String KEY_HAPTIC_CHANNEL_COUNT { get { if (!_KEY_HAPTIC_CHANNEL_COUNTReady) { _KEY_HAPTIC_CHANNEL_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_HAPTIC_CHANNEL_COUNT"); _KEY_HAPTIC_CHANNEL_COUNTReady = true; } return _KEY_HAPTIC_CHANNEL_COUNTContent; } }
        private static Java.Lang.String _KEY_HAPTIC_CHANNEL_COUNTContent = default;
        private static bool _KEY_HAPTIC_CHANNEL_COUNTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_HARDWARE_AV_SYNC_ID"/>
        /// </summary>
        public static Java.Lang.String KEY_HARDWARE_AV_SYNC_ID { get { if (!_KEY_HARDWARE_AV_SYNC_IDReady) { _KEY_HARDWARE_AV_SYNC_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_HARDWARE_AV_SYNC_ID"); _KEY_HARDWARE_AV_SYNC_IDReady = true; } return _KEY_HARDWARE_AV_SYNC_IDContent; } }
        private static Java.Lang.String _KEY_HARDWARE_AV_SYNC_IDContent = default;
        private static bool _KEY_HARDWARE_AV_SYNC_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_HDR_STATIC_INFO"/>
        /// </summary>
        public static Java.Lang.String KEY_HDR_STATIC_INFO { get { if (!_KEY_HDR_STATIC_INFOReady) { _KEY_HDR_STATIC_INFOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_HDR_STATIC_INFO"); _KEY_HDR_STATIC_INFOReady = true; } return _KEY_HDR_STATIC_INFOContent; } }
        private static Java.Lang.String _KEY_HDR_STATIC_INFOContent = default;
        private static bool _KEY_HDR_STATIC_INFOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_HDR10_PLUS_INFO"/>
        /// </summary>
        public static Java.Lang.String KEY_HDR10_PLUS_INFO { get { if (!_KEY_HDR10_PLUS_INFOReady) { _KEY_HDR10_PLUS_INFOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_HDR10_PLUS_INFO"); _KEY_HDR10_PLUS_INFOReady = true; } return _KEY_HDR10_PLUS_INFOContent; } }
        private static Java.Lang.String _KEY_HDR10_PLUS_INFOContent = default;
        private static bool _KEY_HDR10_PLUS_INFOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_HEIGHT"/>
        /// </summary>
        public static Java.Lang.String KEY_HEIGHT { get { if (!_KEY_HEIGHTReady) { _KEY_HEIGHTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_HEIGHT"); _KEY_HEIGHTReady = true; } return _KEY_HEIGHTContent; } }
        private static Java.Lang.String _KEY_HEIGHTContent = default;
        private static bool _KEY_HEIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_I_FRAME_INTERVAL"/>
        /// </summary>
        public static Java.Lang.String KEY_I_FRAME_INTERVAL { get { if (!_KEY_I_FRAME_INTERVALReady) { _KEY_I_FRAME_INTERVALContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_I_FRAME_INTERVAL"); _KEY_I_FRAME_INTERVALReady = true; } return _KEY_I_FRAME_INTERVALContent; } }
        private static Java.Lang.String _KEY_I_FRAME_INTERVALContent = default;
        private static bool _KEY_I_FRAME_INTERVALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_IMPORTANCE"/>
        /// </summary>
        public static Java.Lang.String KEY_IMPORTANCE { get { if (!_KEY_IMPORTANCEReady) { _KEY_IMPORTANCEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_IMPORTANCE"); _KEY_IMPORTANCEReady = true; } return _KEY_IMPORTANCEContent; } }
        private static Java.Lang.String _KEY_IMPORTANCEContent = default;
        private static bool _KEY_IMPORTANCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_INTRA_REFRESH_PERIOD"/>
        /// </summary>
        public static Java.Lang.String KEY_INTRA_REFRESH_PERIOD { get { if (!_KEY_INTRA_REFRESH_PERIODReady) { _KEY_INTRA_REFRESH_PERIODContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_INTRA_REFRESH_PERIOD"); _KEY_INTRA_REFRESH_PERIODReady = true; } return _KEY_INTRA_REFRESH_PERIODContent; } }
        private static Java.Lang.String _KEY_INTRA_REFRESH_PERIODContent = default;
        private static bool _KEY_INTRA_REFRESH_PERIODReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_IS_ADTS"/>
        /// </summary>
        public static Java.Lang.String KEY_IS_ADTS { get { if (!_KEY_IS_ADTSReady) { _KEY_IS_ADTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_IS_ADTS"); _KEY_IS_ADTSReady = true; } return _KEY_IS_ADTSContent; } }
        private static Java.Lang.String _KEY_IS_ADTSContent = default;
        private static bool _KEY_IS_ADTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_IS_AUTOSELECT"/>
        /// </summary>
        public static Java.Lang.String KEY_IS_AUTOSELECT { get { if (!_KEY_IS_AUTOSELECTReady) { _KEY_IS_AUTOSELECTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_IS_AUTOSELECT"); _KEY_IS_AUTOSELECTReady = true; } return _KEY_IS_AUTOSELECTContent; } }
        private static Java.Lang.String _KEY_IS_AUTOSELECTContent = default;
        private static bool _KEY_IS_AUTOSELECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_IS_DEFAULT"/>
        /// </summary>
        public static Java.Lang.String KEY_IS_DEFAULT { get { if (!_KEY_IS_DEFAULTReady) { _KEY_IS_DEFAULTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_IS_DEFAULT"); _KEY_IS_DEFAULTReady = true; } return _KEY_IS_DEFAULTContent; } }
        private static Java.Lang.String _KEY_IS_DEFAULTContent = default;
        private static bool _KEY_IS_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_IS_FORCED_SUBTITLE"/>
        /// </summary>
        public static Java.Lang.String KEY_IS_FORCED_SUBTITLE { get { if (!_KEY_IS_FORCED_SUBTITLEReady) { _KEY_IS_FORCED_SUBTITLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_IS_FORCED_SUBTITLE"); _KEY_IS_FORCED_SUBTITLEReady = true; } return _KEY_IS_FORCED_SUBTITLEContent; } }
        private static Java.Lang.String _KEY_IS_FORCED_SUBTITLEContent = default;
        private static bool _KEY_IS_FORCED_SUBTITLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_LANGUAGE"/>
        /// </summary>
        public static Java.Lang.String KEY_LANGUAGE { get { if (!_KEY_LANGUAGEReady) { _KEY_LANGUAGEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_LANGUAGE"); _KEY_LANGUAGEReady = true; } return _KEY_LANGUAGEContent; } }
        private static Java.Lang.String _KEY_LANGUAGEContent = default;
        private static bool _KEY_LANGUAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_LATENCY"/>
        /// </summary>
        public static Java.Lang.String KEY_LATENCY { get { if (!_KEY_LATENCYReady) { _KEY_LATENCYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_LATENCY"); _KEY_LATENCYReady = true; } return _KEY_LATENCYContent; } }
        private static Java.Lang.String _KEY_LATENCYContent = default;
        private static bool _KEY_LATENCYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_LEVEL"/>
        /// </summary>
        public static Java.Lang.String KEY_LEVEL { get { if (!_KEY_LEVELReady) { _KEY_LEVELContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_LEVEL"); _KEY_LEVELReady = true; } return _KEY_LEVELContent; } }
        private static Java.Lang.String _KEY_LEVELContent = default;
        private static bool _KEY_LEVELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_LOW_LATENCY"/>
        /// </summary>
        public static Java.Lang.String KEY_LOW_LATENCY { get { if (!_KEY_LOW_LATENCYReady) { _KEY_LOW_LATENCYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_LOW_LATENCY"); _KEY_LOW_LATENCYReady = true; } return _KEY_LOW_LATENCYContent; } }
        private static Java.Lang.String _KEY_LOW_LATENCYContent = default;
        private static bool _KEY_LOW_LATENCYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_MAX_B_FRAMES"/>
        /// </summary>
        public static Java.Lang.String KEY_MAX_B_FRAMES { get { if (!_KEY_MAX_B_FRAMESReady) { _KEY_MAX_B_FRAMESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_MAX_B_FRAMES"); _KEY_MAX_B_FRAMESReady = true; } return _KEY_MAX_B_FRAMESContent; } }
        private static Java.Lang.String _KEY_MAX_B_FRAMESContent = default;
        private static bool _KEY_MAX_B_FRAMESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_MAX_FPS_TO_ENCODER"/>
        /// </summary>
        public static Java.Lang.String KEY_MAX_FPS_TO_ENCODER { get { if (!_KEY_MAX_FPS_TO_ENCODERReady) { _KEY_MAX_FPS_TO_ENCODERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_MAX_FPS_TO_ENCODER"); _KEY_MAX_FPS_TO_ENCODERReady = true; } return _KEY_MAX_FPS_TO_ENCODERContent; } }
        private static Java.Lang.String _KEY_MAX_FPS_TO_ENCODERContent = default;
        private static bool _KEY_MAX_FPS_TO_ENCODERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_MAX_HEIGHT"/>
        /// </summary>
        public static Java.Lang.String KEY_MAX_HEIGHT { get { if (!_KEY_MAX_HEIGHTReady) { _KEY_MAX_HEIGHTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_MAX_HEIGHT"); _KEY_MAX_HEIGHTReady = true; } return _KEY_MAX_HEIGHTContent; } }
        private static Java.Lang.String _KEY_MAX_HEIGHTContent = default;
        private static bool _KEY_MAX_HEIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_MAX_INPUT_SIZE"/>
        /// </summary>
        public static Java.Lang.String KEY_MAX_INPUT_SIZE { get { if (!_KEY_MAX_INPUT_SIZEReady) { _KEY_MAX_INPUT_SIZEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_MAX_INPUT_SIZE"); _KEY_MAX_INPUT_SIZEReady = true; } return _KEY_MAX_INPUT_SIZEContent; } }
        private static Java.Lang.String _KEY_MAX_INPUT_SIZEContent = default;
        private static bool _KEY_MAX_INPUT_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_MAX_OUTPUT_CHANNEL_COUNT"/>
        /// </summary>
        public static Java.Lang.String KEY_MAX_OUTPUT_CHANNEL_COUNT { get { if (!_KEY_MAX_OUTPUT_CHANNEL_COUNTReady) { _KEY_MAX_OUTPUT_CHANNEL_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_MAX_OUTPUT_CHANNEL_COUNT"); _KEY_MAX_OUTPUT_CHANNEL_COUNTReady = true; } return _KEY_MAX_OUTPUT_CHANNEL_COUNTContent; } }
        private static Java.Lang.String _KEY_MAX_OUTPUT_CHANNEL_COUNTContent = default;
        private static bool _KEY_MAX_OUTPUT_CHANNEL_COUNTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_MAX_PTS_GAP_TO_ENCODER"/>
        /// </summary>
        public static Java.Lang.String KEY_MAX_PTS_GAP_TO_ENCODER { get { if (!_KEY_MAX_PTS_GAP_TO_ENCODERReady) { _KEY_MAX_PTS_GAP_TO_ENCODERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_MAX_PTS_GAP_TO_ENCODER"); _KEY_MAX_PTS_GAP_TO_ENCODERReady = true; } return _KEY_MAX_PTS_GAP_TO_ENCODERContent; } }
        private static Java.Lang.String _KEY_MAX_PTS_GAP_TO_ENCODERContent = default;
        private static bool _KEY_MAX_PTS_GAP_TO_ENCODERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_MAX_WIDTH"/>
        /// </summary>
        public static Java.Lang.String KEY_MAX_WIDTH { get { if (!_KEY_MAX_WIDTHReady) { _KEY_MAX_WIDTHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_MAX_WIDTH"); _KEY_MAX_WIDTHReady = true; } return _KEY_MAX_WIDTHContent; } }
        private static Java.Lang.String _KEY_MAX_WIDTHContent = default;
        private static bool _KEY_MAX_WIDTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_MIME"/>
        /// </summary>
        public static Java.Lang.String KEY_MIME { get { if (!_KEY_MIMEReady) { _KEY_MIMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_MIME"); _KEY_MIMEReady = true; } return _KEY_MIMEContent; } }
        private static Java.Lang.String _KEY_MIMEContent = default;
        private static bool _KEY_MIMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_MPEGH_COMPATIBLE_SETS"/>
        /// </summary>
        public static Java.Lang.String KEY_MPEGH_COMPATIBLE_SETS { get { if (!_KEY_MPEGH_COMPATIBLE_SETSReady) { _KEY_MPEGH_COMPATIBLE_SETSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_MPEGH_COMPATIBLE_SETS"); _KEY_MPEGH_COMPATIBLE_SETSReady = true; } return _KEY_MPEGH_COMPATIBLE_SETSContent; } }
        private static Java.Lang.String _KEY_MPEGH_COMPATIBLE_SETSContent = default;
        private static bool _KEY_MPEGH_COMPATIBLE_SETSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_MPEGH_PROFILE_LEVEL_INDICATION"/>
        /// </summary>
        public static Java.Lang.String KEY_MPEGH_PROFILE_LEVEL_INDICATION { get { if (!_KEY_MPEGH_PROFILE_LEVEL_INDICATIONReady) { _KEY_MPEGH_PROFILE_LEVEL_INDICATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_MPEGH_PROFILE_LEVEL_INDICATION"); _KEY_MPEGH_PROFILE_LEVEL_INDICATIONReady = true; } return _KEY_MPEGH_PROFILE_LEVEL_INDICATIONContent; } }
        private static Java.Lang.String _KEY_MPEGH_PROFILE_LEVEL_INDICATIONContent = default;
        private static bool _KEY_MPEGH_PROFILE_LEVEL_INDICATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_MPEGH_REFERENCE_CHANNEL_LAYOUT"/>
        /// </summary>
        public static Java.Lang.String KEY_MPEGH_REFERENCE_CHANNEL_LAYOUT { get { if (!_KEY_MPEGH_REFERENCE_CHANNEL_LAYOUTReady) { _KEY_MPEGH_REFERENCE_CHANNEL_LAYOUTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_MPEGH_REFERENCE_CHANNEL_LAYOUT"); _KEY_MPEGH_REFERENCE_CHANNEL_LAYOUTReady = true; } return _KEY_MPEGH_REFERENCE_CHANNEL_LAYOUTContent; } }
        private static Java.Lang.String _KEY_MPEGH_REFERENCE_CHANNEL_LAYOUTContent = default;
        private static bool _KEY_MPEGH_REFERENCE_CHANNEL_LAYOUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_OPERATING_RATE"/>
        /// </summary>
        public static Java.Lang.String KEY_OPERATING_RATE { get { if (!_KEY_OPERATING_RATEReady) { _KEY_OPERATING_RATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_OPERATING_RATE"); _KEY_OPERATING_RATEReady = true; } return _KEY_OPERATING_RATEContent; } }
        private static Java.Lang.String _KEY_OPERATING_RATEContent = default;
        private static bool _KEY_OPERATING_RATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_OUTPUT_REORDER_DEPTH"/>
        /// </summary>
        public static Java.Lang.String KEY_OUTPUT_REORDER_DEPTH { get { if (!_KEY_OUTPUT_REORDER_DEPTHReady) { _KEY_OUTPUT_REORDER_DEPTHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_OUTPUT_REORDER_DEPTH"); _KEY_OUTPUT_REORDER_DEPTHReady = true; } return _KEY_OUTPUT_REORDER_DEPTHContent; } }
        private static Java.Lang.String _KEY_OUTPUT_REORDER_DEPTHContent = default;
        private static bool _KEY_OUTPUT_REORDER_DEPTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_PCM_ENCODING"/>
        /// </summary>
        public static Java.Lang.String KEY_PCM_ENCODING { get { if (!_KEY_PCM_ENCODINGReady) { _KEY_PCM_ENCODINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_PCM_ENCODING"); _KEY_PCM_ENCODINGReady = true; } return _KEY_PCM_ENCODINGContent; } }
        private static Java.Lang.String _KEY_PCM_ENCODINGContent = default;
        private static bool _KEY_PCM_ENCODINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_PICTURE_TYPE"/>
        /// </summary>
        public static Java.Lang.String KEY_PICTURE_TYPE { get { if (!_KEY_PICTURE_TYPEReady) { _KEY_PICTURE_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_PICTURE_TYPE"); _KEY_PICTURE_TYPEReady = true; } return _KEY_PICTURE_TYPEContent; } }
        private static Java.Lang.String _KEY_PICTURE_TYPEContent = default;
        private static bool _KEY_PICTURE_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_PIXEL_ASPECT_RATIO_HEIGHT"/>
        /// </summary>
        public static Java.Lang.String KEY_PIXEL_ASPECT_RATIO_HEIGHT { get { if (!_KEY_PIXEL_ASPECT_RATIO_HEIGHTReady) { _KEY_PIXEL_ASPECT_RATIO_HEIGHTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_PIXEL_ASPECT_RATIO_HEIGHT"); _KEY_PIXEL_ASPECT_RATIO_HEIGHTReady = true; } return _KEY_PIXEL_ASPECT_RATIO_HEIGHTContent; } }
        private static Java.Lang.String _KEY_PIXEL_ASPECT_RATIO_HEIGHTContent = default;
        private static bool _KEY_PIXEL_ASPECT_RATIO_HEIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_PIXEL_ASPECT_RATIO_WIDTH"/>
        /// </summary>
        public static Java.Lang.String KEY_PIXEL_ASPECT_RATIO_WIDTH { get { if (!_KEY_PIXEL_ASPECT_RATIO_WIDTHReady) { _KEY_PIXEL_ASPECT_RATIO_WIDTHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_PIXEL_ASPECT_RATIO_WIDTH"); _KEY_PIXEL_ASPECT_RATIO_WIDTHReady = true; } return _KEY_PIXEL_ASPECT_RATIO_WIDTHContent; } }
        private static Java.Lang.String _KEY_PIXEL_ASPECT_RATIO_WIDTHContent = default;
        private static bool _KEY_PIXEL_ASPECT_RATIO_WIDTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_PREPEND_HEADER_TO_SYNC_FRAMES"/>
        /// </summary>
        public static Java.Lang.String KEY_PREPEND_HEADER_TO_SYNC_FRAMES { get { if (!_KEY_PREPEND_HEADER_TO_SYNC_FRAMESReady) { _KEY_PREPEND_HEADER_TO_SYNC_FRAMESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_PREPEND_HEADER_TO_SYNC_FRAMES"); _KEY_PREPEND_HEADER_TO_SYNC_FRAMESReady = true; } return _KEY_PREPEND_HEADER_TO_SYNC_FRAMESContent; } }
        private static Java.Lang.String _KEY_PREPEND_HEADER_TO_SYNC_FRAMESContent = default;
        private static bool _KEY_PREPEND_HEADER_TO_SYNC_FRAMESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_PRIORITY"/>
        /// </summary>
        public static Java.Lang.String KEY_PRIORITY { get { if (!_KEY_PRIORITYReady) { _KEY_PRIORITYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_PRIORITY"); _KEY_PRIORITYReady = true; } return _KEY_PRIORITYContent; } }
        private static Java.Lang.String _KEY_PRIORITYContent = default;
        private static bool _KEY_PRIORITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_PROFILE"/>
        /// </summary>
        public static Java.Lang.String KEY_PROFILE { get { if (!_KEY_PROFILEReady) { _KEY_PROFILEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_PROFILE"); _KEY_PROFILEReady = true; } return _KEY_PROFILEContent; } }
        private static Java.Lang.String _KEY_PROFILEContent = default;
        private static bool _KEY_PROFILEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_PUSH_BLANK_BUFFERS_ON_STOP"/>
        /// </summary>
        public static Java.Lang.String KEY_PUSH_BLANK_BUFFERS_ON_STOP { get { if (!_KEY_PUSH_BLANK_BUFFERS_ON_STOPReady) { _KEY_PUSH_BLANK_BUFFERS_ON_STOPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_PUSH_BLANK_BUFFERS_ON_STOP"); _KEY_PUSH_BLANK_BUFFERS_ON_STOPReady = true; } return _KEY_PUSH_BLANK_BUFFERS_ON_STOPContent; } }
        private static Java.Lang.String _KEY_PUSH_BLANK_BUFFERS_ON_STOPContent = default;
        private static bool _KEY_PUSH_BLANK_BUFFERS_ON_STOPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_QUALITY"/>
        /// </summary>
        public static Java.Lang.String KEY_QUALITY { get { if (!_KEY_QUALITYReady) { _KEY_QUALITYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_QUALITY"); _KEY_QUALITYReady = true; } return _KEY_QUALITYContent; } }
        private static Java.Lang.String _KEY_QUALITYContent = default;
        private static bool _KEY_QUALITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_REPEAT_PREVIOUS_FRAME_AFTER"/>
        /// </summary>
        public static Java.Lang.String KEY_REPEAT_PREVIOUS_FRAME_AFTER { get { if (!_KEY_REPEAT_PREVIOUS_FRAME_AFTERReady) { _KEY_REPEAT_PREVIOUS_FRAME_AFTERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_REPEAT_PREVIOUS_FRAME_AFTER"); _KEY_REPEAT_PREVIOUS_FRAME_AFTERReady = true; } return _KEY_REPEAT_PREVIOUS_FRAME_AFTERContent; } }
        private static Java.Lang.String _KEY_REPEAT_PREVIOUS_FRAME_AFTERContent = default;
        private static bool _KEY_REPEAT_PREVIOUS_FRAME_AFTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_ROTATION"/>
        /// </summary>
        public static Java.Lang.String KEY_ROTATION { get { if (!_KEY_ROTATIONReady) { _KEY_ROTATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_ROTATION"); _KEY_ROTATIONReady = true; } return _KEY_ROTATIONContent; } }
        private static Java.Lang.String _KEY_ROTATIONContent = default;
        private static bool _KEY_ROTATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_SAMPLE_RATE"/>
        /// </summary>
        public static Java.Lang.String KEY_SAMPLE_RATE { get { if (!_KEY_SAMPLE_RATEReady) { _KEY_SAMPLE_RATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_SAMPLE_RATE"); _KEY_SAMPLE_RATEReady = true; } return _KEY_SAMPLE_RATEContent; } }
        private static Java.Lang.String _KEY_SAMPLE_RATEContent = default;
        private static bool _KEY_SAMPLE_RATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_SLICE_HEIGHT"/>
        /// </summary>
        public static Java.Lang.String KEY_SLICE_HEIGHT { get { if (!_KEY_SLICE_HEIGHTReady) { _KEY_SLICE_HEIGHTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_SLICE_HEIGHT"); _KEY_SLICE_HEIGHTReady = true; } return _KEY_SLICE_HEIGHTContent; } }
        private static Java.Lang.String _KEY_SLICE_HEIGHTContent = default;
        private static bool _KEY_SLICE_HEIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_SLOW_MOTION_MARKERS"/>
        /// </summary>
        public static Java.Lang.String KEY_SLOW_MOTION_MARKERS { get { if (!_KEY_SLOW_MOTION_MARKERSReady) { _KEY_SLOW_MOTION_MARKERSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_SLOW_MOTION_MARKERS"); _KEY_SLOW_MOTION_MARKERSReady = true; } return _KEY_SLOW_MOTION_MARKERSContent; } }
        private static Java.Lang.String _KEY_SLOW_MOTION_MARKERSContent = default;
        private static bool _KEY_SLOW_MOTION_MARKERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_STRIDE"/>
        /// </summary>
        public static Java.Lang.String KEY_STRIDE { get { if (!_KEY_STRIDEReady) { _KEY_STRIDEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_STRIDE"); _KEY_STRIDEReady = true; } return _KEY_STRIDEContent; } }
        private static Java.Lang.String _KEY_STRIDEContent = default;
        private static bool _KEY_STRIDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_TEMPORAL_LAYERING"/>
        /// </summary>
        public static Java.Lang.String KEY_TEMPORAL_LAYERING { get { if (!_KEY_TEMPORAL_LAYERINGReady) { _KEY_TEMPORAL_LAYERINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_TEMPORAL_LAYERING"); _KEY_TEMPORAL_LAYERINGReady = true; } return _KEY_TEMPORAL_LAYERINGContent; } }
        private static Java.Lang.String _KEY_TEMPORAL_LAYERINGContent = default;
        private static bool _KEY_TEMPORAL_LAYERINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_TILE_HEIGHT"/>
        /// </summary>
        public static Java.Lang.String KEY_TILE_HEIGHT { get { if (!_KEY_TILE_HEIGHTReady) { _KEY_TILE_HEIGHTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_TILE_HEIGHT"); _KEY_TILE_HEIGHTReady = true; } return _KEY_TILE_HEIGHTContent; } }
        private static Java.Lang.String _KEY_TILE_HEIGHTContent = default;
        private static bool _KEY_TILE_HEIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_TILE_WIDTH"/>
        /// </summary>
        public static Java.Lang.String KEY_TILE_WIDTH { get { if (!_KEY_TILE_WIDTHReady) { _KEY_TILE_WIDTHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_TILE_WIDTH"); _KEY_TILE_WIDTHReady = true; } return _KEY_TILE_WIDTHContent; } }
        private static Java.Lang.String _KEY_TILE_WIDTHContent = default;
        private static bool _KEY_TILE_WIDTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_TRACK_ID"/>
        /// </summary>
        public static Java.Lang.String KEY_TRACK_ID { get { if (!_KEY_TRACK_IDReady) { _KEY_TRACK_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_TRACK_ID"); _KEY_TRACK_IDReady = true; } return _KEY_TRACK_IDContent; } }
        private static Java.Lang.String _KEY_TRACK_IDContent = default;
        private static bool _KEY_TRACK_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_VIDEO_ENCODING_STATISTICS_LEVEL"/>
        /// </summary>
        public static Java.Lang.String KEY_VIDEO_ENCODING_STATISTICS_LEVEL { get { if (!_KEY_VIDEO_ENCODING_STATISTICS_LEVELReady) { _KEY_VIDEO_ENCODING_STATISTICS_LEVELContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_VIDEO_ENCODING_STATISTICS_LEVEL"); _KEY_VIDEO_ENCODING_STATISTICS_LEVELReady = true; } return _KEY_VIDEO_ENCODING_STATISTICS_LEVELContent; } }
        private static Java.Lang.String _KEY_VIDEO_ENCODING_STATISTICS_LEVELContent = default;
        private static bool _KEY_VIDEO_ENCODING_STATISTICS_LEVELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_VIDEO_QP_AVERAGE"/>
        /// </summary>
        public static Java.Lang.String KEY_VIDEO_QP_AVERAGE { get { if (!_KEY_VIDEO_QP_AVERAGEReady) { _KEY_VIDEO_QP_AVERAGEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_VIDEO_QP_AVERAGE"); _KEY_VIDEO_QP_AVERAGEReady = true; } return _KEY_VIDEO_QP_AVERAGEContent; } }
        private static Java.Lang.String _KEY_VIDEO_QP_AVERAGEContent = default;
        private static bool _KEY_VIDEO_QP_AVERAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_VIDEO_QP_B_MAX"/>
        /// </summary>
        public static Java.Lang.String KEY_VIDEO_QP_B_MAX { get { if (!_KEY_VIDEO_QP_B_MAXReady) { _KEY_VIDEO_QP_B_MAXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_VIDEO_QP_B_MAX"); _KEY_VIDEO_QP_B_MAXReady = true; } return _KEY_VIDEO_QP_B_MAXContent; } }
        private static Java.Lang.String _KEY_VIDEO_QP_B_MAXContent = default;
        private static bool _KEY_VIDEO_QP_B_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_VIDEO_QP_B_MIN"/>
        /// </summary>
        public static Java.Lang.String KEY_VIDEO_QP_B_MIN { get { if (!_KEY_VIDEO_QP_B_MINReady) { _KEY_VIDEO_QP_B_MINContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_VIDEO_QP_B_MIN"); _KEY_VIDEO_QP_B_MINReady = true; } return _KEY_VIDEO_QP_B_MINContent; } }
        private static Java.Lang.String _KEY_VIDEO_QP_B_MINContent = default;
        private static bool _KEY_VIDEO_QP_B_MINReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_VIDEO_QP_I_MAX"/>
        /// </summary>
        public static Java.Lang.String KEY_VIDEO_QP_I_MAX { get { if (!_KEY_VIDEO_QP_I_MAXReady) { _KEY_VIDEO_QP_I_MAXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_VIDEO_QP_I_MAX"); _KEY_VIDEO_QP_I_MAXReady = true; } return _KEY_VIDEO_QP_I_MAXContent; } }
        private static Java.Lang.String _KEY_VIDEO_QP_I_MAXContent = default;
        private static bool _KEY_VIDEO_QP_I_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_VIDEO_QP_I_MIN"/>
        /// </summary>
        public static Java.Lang.String KEY_VIDEO_QP_I_MIN { get { if (!_KEY_VIDEO_QP_I_MINReady) { _KEY_VIDEO_QP_I_MINContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_VIDEO_QP_I_MIN"); _KEY_VIDEO_QP_I_MINReady = true; } return _KEY_VIDEO_QP_I_MINContent; } }
        private static Java.Lang.String _KEY_VIDEO_QP_I_MINContent = default;
        private static bool _KEY_VIDEO_QP_I_MINReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_VIDEO_QP_MAX"/>
        /// </summary>
        public static Java.Lang.String KEY_VIDEO_QP_MAX { get { if (!_KEY_VIDEO_QP_MAXReady) { _KEY_VIDEO_QP_MAXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_VIDEO_QP_MAX"); _KEY_VIDEO_QP_MAXReady = true; } return _KEY_VIDEO_QP_MAXContent; } }
        private static Java.Lang.String _KEY_VIDEO_QP_MAXContent = default;
        private static bool _KEY_VIDEO_QP_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_VIDEO_QP_MIN"/>
        /// </summary>
        public static Java.Lang.String KEY_VIDEO_QP_MIN { get { if (!_KEY_VIDEO_QP_MINReady) { _KEY_VIDEO_QP_MINContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_VIDEO_QP_MIN"); _KEY_VIDEO_QP_MINReady = true; } return _KEY_VIDEO_QP_MINContent; } }
        private static Java.Lang.String _KEY_VIDEO_QP_MINContent = default;
        private static bool _KEY_VIDEO_QP_MINReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_VIDEO_QP_P_MAX"/>
        /// </summary>
        public static Java.Lang.String KEY_VIDEO_QP_P_MAX { get { if (!_KEY_VIDEO_QP_P_MAXReady) { _KEY_VIDEO_QP_P_MAXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_VIDEO_QP_P_MAX"); _KEY_VIDEO_QP_P_MAXReady = true; } return _KEY_VIDEO_QP_P_MAXContent; } }
        private static Java.Lang.String _KEY_VIDEO_QP_P_MAXContent = default;
        private static bool _KEY_VIDEO_QP_P_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_VIDEO_QP_P_MIN"/>
        /// </summary>
        public static Java.Lang.String KEY_VIDEO_QP_P_MIN { get { if (!_KEY_VIDEO_QP_P_MINReady) { _KEY_VIDEO_QP_P_MINContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_VIDEO_QP_P_MIN"); _KEY_VIDEO_QP_P_MINReady = true; } return _KEY_VIDEO_QP_P_MINContent; } }
        private static Java.Lang.String _KEY_VIDEO_QP_P_MINContent = default;
        private static bool _KEY_VIDEO_QP_P_MINReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_WIDTH"/>
        /// </summary>
        public static Java.Lang.String KEY_WIDTH { get { if (!_KEY_WIDTHReady) { _KEY_WIDTHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_WIDTH"); _KEY_WIDTHReady = true; } return _KEY_WIDTHContent; } }
        private static Java.Lang.String _KEY_WIDTHContent = default;
        private static bool _KEY_WIDTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#LOG_SESSION_ID"/>
        /// </summary>
        public static Java.Lang.String LOG_SESSION_ID { get { if (!_LOG_SESSION_IDReady) { _LOG_SESSION_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LOG_SESSION_ID"); _LOG_SESSION_IDReady = true; } return _LOG_SESSION_IDContent; } }
        private static Java.Lang.String _LOG_SESSION_IDContent = default;
        private static bool _LOG_SESSION_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_AAC"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_AUDIO_AAC { get { if (!_MIMETYPE_AUDIO_AACReady) { _MIMETYPE_AUDIO_AACContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_AUDIO_AAC"); _MIMETYPE_AUDIO_AACReady = true; } return _MIMETYPE_AUDIO_AACContent; } }
        private static Java.Lang.String _MIMETYPE_AUDIO_AACContent = default;
        private static bool _MIMETYPE_AUDIO_AACReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_AAC_ELD"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_AUDIO_AAC_ELD { get { if (!_MIMETYPE_AUDIO_AAC_ELDReady) { _MIMETYPE_AUDIO_AAC_ELDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_AUDIO_AAC_ELD"); _MIMETYPE_AUDIO_AAC_ELDReady = true; } return _MIMETYPE_AUDIO_AAC_ELDContent; } }
        private static Java.Lang.String _MIMETYPE_AUDIO_AAC_ELDContent = default;
        private static bool _MIMETYPE_AUDIO_AAC_ELDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_AAC_HE_V1"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_AUDIO_AAC_HE_V1 { get { if (!_MIMETYPE_AUDIO_AAC_HE_V1Ready) { _MIMETYPE_AUDIO_AAC_HE_V1Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_AUDIO_AAC_HE_V1"); _MIMETYPE_AUDIO_AAC_HE_V1Ready = true; } return _MIMETYPE_AUDIO_AAC_HE_V1Content; } }
        private static Java.Lang.String _MIMETYPE_AUDIO_AAC_HE_V1Content = default;
        private static bool _MIMETYPE_AUDIO_AAC_HE_V1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_AAC_HE_V2"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_AUDIO_AAC_HE_V2 { get { if (!_MIMETYPE_AUDIO_AAC_HE_V2Ready) { _MIMETYPE_AUDIO_AAC_HE_V2Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_AUDIO_AAC_HE_V2"); _MIMETYPE_AUDIO_AAC_HE_V2Ready = true; } return _MIMETYPE_AUDIO_AAC_HE_V2Content; } }
        private static Java.Lang.String _MIMETYPE_AUDIO_AAC_HE_V2Content = default;
        private static bool _MIMETYPE_AUDIO_AAC_HE_V2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_AAC_LC"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_AUDIO_AAC_LC { get { if (!_MIMETYPE_AUDIO_AAC_LCReady) { _MIMETYPE_AUDIO_AAC_LCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_AUDIO_AAC_LC"); _MIMETYPE_AUDIO_AAC_LCReady = true; } return _MIMETYPE_AUDIO_AAC_LCContent; } }
        private static Java.Lang.String _MIMETYPE_AUDIO_AAC_LCContent = default;
        private static bool _MIMETYPE_AUDIO_AAC_LCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_AAC_XHE"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_AUDIO_AAC_XHE { get { if (!_MIMETYPE_AUDIO_AAC_XHEReady) { _MIMETYPE_AUDIO_AAC_XHEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_AUDIO_AAC_XHE"); _MIMETYPE_AUDIO_AAC_XHEReady = true; } return _MIMETYPE_AUDIO_AAC_XHEContent; } }
        private static Java.Lang.String _MIMETYPE_AUDIO_AAC_XHEContent = default;
        private static bool _MIMETYPE_AUDIO_AAC_XHEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_AC3"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_AUDIO_AC3 { get { if (!_MIMETYPE_AUDIO_AC3Ready) { _MIMETYPE_AUDIO_AC3Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_AUDIO_AC3"); _MIMETYPE_AUDIO_AC3Ready = true; } return _MIMETYPE_AUDIO_AC3Content; } }
        private static Java.Lang.String _MIMETYPE_AUDIO_AC3Content = default;
        private static bool _MIMETYPE_AUDIO_AC3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_AC4"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_AUDIO_AC4 { get { if (!_MIMETYPE_AUDIO_AC4Ready) { _MIMETYPE_AUDIO_AC4Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_AUDIO_AC4"); _MIMETYPE_AUDIO_AC4Ready = true; } return _MIMETYPE_AUDIO_AC4Content; } }
        private static Java.Lang.String _MIMETYPE_AUDIO_AC4Content = default;
        private static bool _MIMETYPE_AUDIO_AC4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_AMR_NB"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_AUDIO_AMR_NB { get { if (!_MIMETYPE_AUDIO_AMR_NBReady) { _MIMETYPE_AUDIO_AMR_NBContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_AUDIO_AMR_NB"); _MIMETYPE_AUDIO_AMR_NBReady = true; } return _MIMETYPE_AUDIO_AMR_NBContent; } }
        private static Java.Lang.String _MIMETYPE_AUDIO_AMR_NBContent = default;
        private static bool _MIMETYPE_AUDIO_AMR_NBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_AMR_WB"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_AUDIO_AMR_WB { get { if (!_MIMETYPE_AUDIO_AMR_WBReady) { _MIMETYPE_AUDIO_AMR_WBContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_AUDIO_AMR_WB"); _MIMETYPE_AUDIO_AMR_WBReady = true; } return _MIMETYPE_AUDIO_AMR_WBContent; } }
        private static Java.Lang.String _MIMETYPE_AUDIO_AMR_WBContent = default;
        private static bool _MIMETYPE_AUDIO_AMR_WBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_DOLBY_MAT"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_AUDIO_DOLBY_MAT { get { if (!_MIMETYPE_AUDIO_DOLBY_MATReady) { _MIMETYPE_AUDIO_DOLBY_MATContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_AUDIO_DOLBY_MAT"); _MIMETYPE_AUDIO_DOLBY_MATReady = true; } return _MIMETYPE_AUDIO_DOLBY_MATContent; } }
        private static Java.Lang.String _MIMETYPE_AUDIO_DOLBY_MATContent = default;
        private static bool _MIMETYPE_AUDIO_DOLBY_MATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_DOLBY_TRUEHD"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_AUDIO_DOLBY_TRUEHD { get { if (!_MIMETYPE_AUDIO_DOLBY_TRUEHDReady) { _MIMETYPE_AUDIO_DOLBY_TRUEHDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_AUDIO_DOLBY_TRUEHD"); _MIMETYPE_AUDIO_DOLBY_TRUEHDReady = true; } return _MIMETYPE_AUDIO_DOLBY_TRUEHDContent; } }
        private static Java.Lang.String _MIMETYPE_AUDIO_DOLBY_TRUEHDContent = default;
        private static bool _MIMETYPE_AUDIO_DOLBY_TRUEHDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_DRA"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_AUDIO_DRA { get { if (!_MIMETYPE_AUDIO_DRAReady) { _MIMETYPE_AUDIO_DRAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_AUDIO_DRA"); _MIMETYPE_AUDIO_DRAReady = true; } return _MIMETYPE_AUDIO_DRAContent; } }
        private static Java.Lang.String _MIMETYPE_AUDIO_DRAContent = default;
        private static bool _MIMETYPE_AUDIO_DRAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_DTS"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_AUDIO_DTS { get { if (!_MIMETYPE_AUDIO_DTSReady) { _MIMETYPE_AUDIO_DTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_AUDIO_DTS"); _MIMETYPE_AUDIO_DTSReady = true; } return _MIMETYPE_AUDIO_DTSContent; } }
        private static Java.Lang.String _MIMETYPE_AUDIO_DTSContent = default;
        private static bool _MIMETYPE_AUDIO_DTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_DTS_HD"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_AUDIO_DTS_HD { get { if (!_MIMETYPE_AUDIO_DTS_HDReady) { _MIMETYPE_AUDIO_DTS_HDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_AUDIO_DTS_HD"); _MIMETYPE_AUDIO_DTS_HDReady = true; } return _MIMETYPE_AUDIO_DTS_HDContent; } }
        private static Java.Lang.String _MIMETYPE_AUDIO_DTS_HDContent = default;
        private static bool _MIMETYPE_AUDIO_DTS_HDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_DTS_UHD"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_AUDIO_DTS_UHD { get { if (!_MIMETYPE_AUDIO_DTS_UHDReady) { _MIMETYPE_AUDIO_DTS_UHDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_AUDIO_DTS_UHD"); _MIMETYPE_AUDIO_DTS_UHDReady = true; } return _MIMETYPE_AUDIO_DTS_UHDContent; } }
        private static Java.Lang.String _MIMETYPE_AUDIO_DTS_UHDContent = default;
        private static bool _MIMETYPE_AUDIO_DTS_UHDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_EAC3"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_AUDIO_EAC3 { get { if (!_MIMETYPE_AUDIO_EAC3Ready) { _MIMETYPE_AUDIO_EAC3Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_AUDIO_EAC3"); _MIMETYPE_AUDIO_EAC3Ready = true; } return _MIMETYPE_AUDIO_EAC3Content; } }
        private static Java.Lang.String _MIMETYPE_AUDIO_EAC3Content = default;
        private static bool _MIMETYPE_AUDIO_EAC3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_EAC3_JOC"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_AUDIO_EAC3_JOC { get { if (!_MIMETYPE_AUDIO_EAC3_JOCReady) { _MIMETYPE_AUDIO_EAC3_JOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_AUDIO_EAC3_JOC"); _MIMETYPE_AUDIO_EAC3_JOCReady = true; } return _MIMETYPE_AUDIO_EAC3_JOCContent; } }
        private static Java.Lang.String _MIMETYPE_AUDIO_EAC3_JOCContent = default;
        private static bool _MIMETYPE_AUDIO_EAC3_JOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_FLAC"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_AUDIO_FLAC { get { if (!_MIMETYPE_AUDIO_FLACReady) { _MIMETYPE_AUDIO_FLACContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_AUDIO_FLAC"); _MIMETYPE_AUDIO_FLACReady = true; } return _MIMETYPE_AUDIO_FLACContent; } }
        private static Java.Lang.String _MIMETYPE_AUDIO_FLACContent = default;
        private static bool _MIMETYPE_AUDIO_FLACReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_G711_ALAW"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_AUDIO_G711_ALAW { get { if (!_MIMETYPE_AUDIO_G711_ALAWReady) { _MIMETYPE_AUDIO_G711_ALAWContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_AUDIO_G711_ALAW"); _MIMETYPE_AUDIO_G711_ALAWReady = true; } return _MIMETYPE_AUDIO_G711_ALAWContent; } }
        private static Java.Lang.String _MIMETYPE_AUDIO_G711_ALAWContent = default;
        private static bool _MIMETYPE_AUDIO_G711_ALAWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_G711_MLAW"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_AUDIO_G711_MLAW { get { if (!_MIMETYPE_AUDIO_G711_MLAWReady) { _MIMETYPE_AUDIO_G711_MLAWContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_AUDIO_G711_MLAW"); _MIMETYPE_AUDIO_G711_MLAWReady = true; } return _MIMETYPE_AUDIO_G711_MLAWContent; } }
        private static Java.Lang.String _MIMETYPE_AUDIO_G711_MLAWContent = default;
        private static bool _MIMETYPE_AUDIO_G711_MLAWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_IEC61937"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_AUDIO_IEC61937 { get { if (!_MIMETYPE_AUDIO_IEC61937Ready) { _MIMETYPE_AUDIO_IEC61937Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_AUDIO_IEC61937"); _MIMETYPE_AUDIO_IEC61937Ready = true; } return _MIMETYPE_AUDIO_IEC61937Content; } }
        private static Java.Lang.String _MIMETYPE_AUDIO_IEC61937Content = default;
        private static bool _MIMETYPE_AUDIO_IEC61937Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_MPEG"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_AUDIO_MPEG { get { if (!_MIMETYPE_AUDIO_MPEGReady) { _MIMETYPE_AUDIO_MPEGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_AUDIO_MPEG"); _MIMETYPE_AUDIO_MPEGReady = true; } return _MIMETYPE_AUDIO_MPEGContent; } }
        private static Java.Lang.String _MIMETYPE_AUDIO_MPEGContent = default;
        private static bool _MIMETYPE_AUDIO_MPEGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_MPEGH_BL_L3"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_AUDIO_MPEGH_BL_L3 { get { if (!_MIMETYPE_AUDIO_MPEGH_BL_L3Ready) { _MIMETYPE_AUDIO_MPEGH_BL_L3Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_AUDIO_MPEGH_BL_L3"); _MIMETYPE_AUDIO_MPEGH_BL_L3Ready = true; } return _MIMETYPE_AUDIO_MPEGH_BL_L3Content; } }
        private static Java.Lang.String _MIMETYPE_AUDIO_MPEGH_BL_L3Content = default;
        private static bool _MIMETYPE_AUDIO_MPEGH_BL_L3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_MPEGH_BL_L4"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_AUDIO_MPEGH_BL_L4 { get { if (!_MIMETYPE_AUDIO_MPEGH_BL_L4Ready) { _MIMETYPE_AUDIO_MPEGH_BL_L4Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_AUDIO_MPEGH_BL_L4"); _MIMETYPE_AUDIO_MPEGH_BL_L4Ready = true; } return _MIMETYPE_AUDIO_MPEGH_BL_L4Content; } }
        private static Java.Lang.String _MIMETYPE_AUDIO_MPEGH_BL_L4Content = default;
        private static bool _MIMETYPE_AUDIO_MPEGH_BL_L4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_MPEGH_LC_L3"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_AUDIO_MPEGH_LC_L3 { get { if (!_MIMETYPE_AUDIO_MPEGH_LC_L3Ready) { _MIMETYPE_AUDIO_MPEGH_LC_L3Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_AUDIO_MPEGH_LC_L3"); _MIMETYPE_AUDIO_MPEGH_LC_L3Ready = true; } return _MIMETYPE_AUDIO_MPEGH_LC_L3Content; } }
        private static Java.Lang.String _MIMETYPE_AUDIO_MPEGH_LC_L3Content = default;
        private static bool _MIMETYPE_AUDIO_MPEGH_LC_L3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_MPEGH_LC_L4"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_AUDIO_MPEGH_LC_L4 { get { if (!_MIMETYPE_AUDIO_MPEGH_LC_L4Ready) { _MIMETYPE_AUDIO_MPEGH_LC_L4Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_AUDIO_MPEGH_LC_L4"); _MIMETYPE_AUDIO_MPEGH_LC_L4Ready = true; } return _MIMETYPE_AUDIO_MPEGH_LC_L4Content; } }
        private static Java.Lang.String _MIMETYPE_AUDIO_MPEGH_LC_L4Content = default;
        private static bool _MIMETYPE_AUDIO_MPEGH_LC_L4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_MPEGH_MHA1"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_AUDIO_MPEGH_MHA1 { get { if (!_MIMETYPE_AUDIO_MPEGH_MHA1Ready) { _MIMETYPE_AUDIO_MPEGH_MHA1Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_AUDIO_MPEGH_MHA1"); _MIMETYPE_AUDIO_MPEGH_MHA1Ready = true; } return _MIMETYPE_AUDIO_MPEGH_MHA1Content; } }
        private static Java.Lang.String _MIMETYPE_AUDIO_MPEGH_MHA1Content = default;
        private static bool _MIMETYPE_AUDIO_MPEGH_MHA1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_MPEGH_MHM1"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_AUDIO_MPEGH_MHM1 { get { if (!_MIMETYPE_AUDIO_MPEGH_MHM1Ready) { _MIMETYPE_AUDIO_MPEGH_MHM1Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_AUDIO_MPEGH_MHM1"); _MIMETYPE_AUDIO_MPEGH_MHM1Ready = true; } return _MIMETYPE_AUDIO_MPEGH_MHM1Content; } }
        private static Java.Lang.String _MIMETYPE_AUDIO_MPEGH_MHM1Content = default;
        private static bool _MIMETYPE_AUDIO_MPEGH_MHM1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_MSGSM"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_AUDIO_MSGSM { get { if (!_MIMETYPE_AUDIO_MSGSMReady) { _MIMETYPE_AUDIO_MSGSMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_AUDIO_MSGSM"); _MIMETYPE_AUDIO_MSGSMReady = true; } return _MIMETYPE_AUDIO_MSGSMContent; } }
        private static Java.Lang.String _MIMETYPE_AUDIO_MSGSMContent = default;
        private static bool _MIMETYPE_AUDIO_MSGSMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_OPUS"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_AUDIO_OPUS { get { if (!_MIMETYPE_AUDIO_OPUSReady) { _MIMETYPE_AUDIO_OPUSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_AUDIO_OPUS"); _MIMETYPE_AUDIO_OPUSReady = true; } return _MIMETYPE_AUDIO_OPUSContent; } }
        private static Java.Lang.String _MIMETYPE_AUDIO_OPUSContent = default;
        private static bool _MIMETYPE_AUDIO_OPUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_QCELP"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_AUDIO_QCELP { get { if (!_MIMETYPE_AUDIO_QCELPReady) { _MIMETYPE_AUDIO_QCELPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_AUDIO_QCELP"); _MIMETYPE_AUDIO_QCELPReady = true; } return _MIMETYPE_AUDIO_QCELPContent; } }
        private static Java.Lang.String _MIMETYPE_AUDIO_QCELPContent = default;
        private static bool _MIMETYPE_AUDIO_QCELPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_RAW"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_AUDIO_RAW { get { if (!_MIMETYPE_AUDIO_RAWReady) { _MIMETYPE_AUDIO_RAWContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_AUDIO_RAW"); _MIMETYPE_AUDIO_RAWReady = true; } return _MIMETYPE_AUDIO_RAWContent; } }
        private static Java.Lang.String _MIMETYPE_AUDIO_RAWContent = default;
        private static bool _MIMETYPE_AUDIO_RAWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_SCRAMBLED"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_AUDIO_SCRAMBLED { get { if (!_MIMETYPE_AUDIO_SCRAMBLEDReady) { _MIMETYPE_AUDIO_SCRAMBLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_AUDIO_SCRAMBLED"); _MIMETYPE_AUDIO_SCRAMBLEDReady = true; } return _MIMETYPE_AUDIO_SCRAMBLEDContent; } }
        private static Java.Lang.String _MIMETYPE_AUDIO_SCRAMBLEDContent = default;
        private static bool _MIMETYPE_AUDIO_SCRAMBLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_VORBIS"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_AUDIO_VORBIS { get { if (!_MIMETYPE_AUDIO_VORBISReady) { _MIMETYPE_AUDIO_VORBISContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_AUDIO_VORBIS"); _MIMETYPE_AUDIO_VORBISReady = true; } return _MIMETYPE_AUDIO_VORBISContent; } }
        private static Java.Lang.String _MIMETYPE_AUDIO_VORBISContent = default;
        private static bool _MIMETYPE_AUDIO_VORBISReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_IMAGE_ANDROID_HEIC"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_IMAGE_ANDROID_HEIC { get { if (!_MIMETYPE_IMAGE_ANDROID_HEICReady) { _MIMETYPE_IMAGE_ANDROID_HEICContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_IMAGE_ANDROID_HEIC"); _MIMETYPE_IMAGE_ANDROID_HEICReady = true; } return _MIMETYPE_IMAGE_ANDROID_HEICContent; } }
        private static Java.Lang.String _MIMETYPE_IMAGE_ANDROID_HEICContent = default;
        private static bool _MIMETYPE_IMAGE_ANDROID_HEICReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_IMAGE_AVIF"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_IMAGE_AVIF { get { if (!_MIMETYPE_IMAGE_AVIFReady) { _MIMETYPE_IMAGE_AVIFContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_IMAGE_AVIF"); _MIMETYPE_IMAGE_AVIFReady = true; } return _MIMETYPE_IMAGE_AVIFContent; } }
        private static Java.Lang.String _MIMETYPE_IMAGE_AVIFContent = default;
        private static bool _MIMETYPE_IMAGE_AVIFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_TEXT_CEA_608"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_TEXT_CEA_608 { get { if (!_MIMETYPE_TEXT_CEA_608Ready) { _MIMETYPE_TEXT_CEA_608Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_TEXT_CEA_608"); _MIMETYPE_TEXT_CEA_608Ready = true; } return _MIMETYPE_TEXT_CEA_608Content; } }
        private static Java.Lang.String _MIMETYPE_TEXT_CEA_608Content = default;
        private static bool _MIMETYPE_TEXT_CEA_608Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_TEXT_CEA_708"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_TEXT_CEA_708 { get { if (!_MIMETYPE_TEXT_CEA_708Ready) { _MIMETYPE_TEXT_CEA_708Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_TEXT_CEA_708"); _MIMETYPE_TEXT_CEA_708Ready = true; } return _MIMETYPE_TEXT_CEA_708Content; } }
        private static Java.Lang.String _MIMETYPE_TEXT_CEA_708Content = default;
        private static bool _MIMETYPE_TEXT_CEA_708Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_TEXT_SUBRIP"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_TEXT_SUBRIP { get { if (!_MIMETYPE_TEXT_SUBRIPReady) { _MIMETYPE_TEXT_SUBRIPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_TEXT_SUBRIP"); _MIMETYPE_TEXT_SUBRIPReady = true; } return _MIMETYPE_TEXT_SUBRIPContent; } }
        private static Java.Lang.String _MIMETYPE_TEXT_SUBRIPContent = default;
        private static bool _MIMETYPE_TEXT_SUBRIPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_TEXT_VTT"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_TEXT_VTT { get { if (!_MIMETYPE_TEXT_VTTReady) { _MIMETYPE_TEXT_VTTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_TEXT_VTT"); _MIMETYPE_TEXT_VTTReady = true; } return _MIMETYPE_TEXT_VTTContent; } }
        private static Java.Lang.String _MIMETYPE_TEXT_VTTContent = default;
        private static bool _MIMETYPE_TEXT_VTTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_VIDEO_AV1"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_VIDEO_AV1 { get { if (!_MIMETYPE_VIDEO_AV1Ready) { _MIMETYPE_VIDEO_AV1Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_VIDEO_AV1"); _MIMETYPE_VIDEO_AV1Ready = true; } return _MIMETYPE_VIDEO_AV1Content; } }
        private static Java.Lang.String _MIMETYPE_VIDEO_AV1Content = default;
        private static bool _MIMETYPE_VIDEO_AV1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_VIDEO_AVC"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_VIDEO_AVC { get { if (!_MIMETYPE_VIDEO_AVCReady) { _MIMETYPE_VIDEO_AVCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_VIDEO_AVC"); _MIMETYPE_VIDEO_AVCReady = true; } return _MIMETYPE_VIDEO_AVCContent; } }
        private static Java.Lang.String _MIMETYPE_VIDEO_AVCContent = default;
        private static bool _MIMETYPE_VIDEO_AVCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_VIDEO_DOLBY_VISION"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_VIDEO_DOLBY_VISION { get { if (!_MIMETYPE_VIDEO_DOLBY_VISIONReady) { _MIMETYPE_VIDEO_DOLBY_VISIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_VIDEO_DOLBY_VISION"); _MIMETYPE_VIDEO_DOLBY_VISIONReady = true; } return _MIMETYPE_VIDEO_DOLBY_VISIONContent; } }
        private static Java.Lang.String _MIMETYPE_VIDEO_DOLBY_VISIONContent = default;
        private static bool _MIMETYPE_VIDEO_DOLBY_VISIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_VIDEO_H263"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_VIDEO_H263 { get { if (!_MIMETYPE_VIDEO_H263Ready) { _MIMETYPE_VIDEO_H263Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_VIDEO_H263"); _MIMETYPE_VIDEO_H263Ready = true; } return _MIMETYPE_VIDEO_H263Content; } }
        private static Java.Lang.String _MIMETYPE_VIDEO_H263Content = default;
        private static bool _MIMETYPE_VIDEO_H263Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_VIDEO_HEVC"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_VIDEO_HEVC { get { if (!_MIMETYPE_VIDEO_HEVCReady) { _MIMETYPE_VIDEO_HEVCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_VIDEO_HEVC"); _MIMETYPE_VIDEO_HEVCReady = true; } return _MIMETYPE_VIDEO_HEVCContent; } }
        private static Java.Lang.String _MIMETYPE_VIDEO_HEVCContent = default;
        private static bool _MIMETYPE_VIDEO_HEVCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_VIDEO_MPEG2"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_VIDEO_MPEG2 { get { if (!_MIMETYPE_VIDEO_MPEG2Ready) { _MIMETYPE_VIDEO_MPEG2Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_VIDEO_MPEG2"); _MIMETYPE_VIDEO_MPEG2Ready = true; } return _MIMETYPE_VIDEO_MPEG2Content; } }
        private static Java.Lang.String _MIMETYPE_VIDEO_MPEG2Content = default;
        private static bool _MIMETYPE_VIDEO_MPEG2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_VIDEO_MPEG4"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_VIDEO_MPEG4 { get { if (!_MIMETYPE_VIDEO_MPEG4Ready) { _MIMETYPE_VIDEO_MPEG4Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_VIDEO_MPEG4"); _MIMETYPE_VIDEO_MPEG4Ready = true; } return _MIMETYPE_VIDEO_MPEG4Content; } }
        private static Java.Lang.String _MIMETYPE_VIDEO_MPEG4Content = default;
        private static bool _MIMETYPE_VIDEO_MPEG4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_VIDEO_RAW"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_VIDEO_RAW { get { if (!_MIMETYPE_VIDEO_RAWReady) { _MIMETYPE_VIDEO_RAWContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_VIDEO_RAW"); _MIMETYPE_VIDEO_RAWReady = true; } return _MIMETYPE_VIDEO_RAWContent; } }
        private static Java.Lang.String _MIMETYPE_VIDEO_RAWContent = default;
        private static bool _MIMETYPE_VIDEO_RAWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_VIDEO_SCRAMBLED"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_VIDEO_SCRAMBLED { get { if (!_MIMETYPE_VIDEO_SCRAMBLEDReady) { _MIMETYPE_VIDEO_SCRAMBLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_VIDEO_SCRAMBLED"); _MIMETYPE_VIDEO_SCRAMBLEDReady = true; } return _MIMETYPE_VIDEO_SCRAMBLEDContent; } }
        private static Java.Lang.String _MIMETYPE_VIDEO_SCRAMBLEDContent = default;
        private static bool _MIMETYPE_VIDEO_SCRAMBLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_VIDEO_VP8"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_VIDEO_VP8 { get { if (!_MIMETYPE_VIDEO_VP8Ready) { _MIMETYPE_VIDEO_VP8Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_VIDEO_VP8"); _MIMETYPE_VIDEO_VP8Ready = true; } return _MIMETYPE_VIDEO_VP8Content; } }
        private static Java.Lang.String _MIMETYPE_VIDEO_VP8Content = default;
        private static bool _MIMETYPE_VIDEO_VP8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_VIDEO_VP9"/>
        /// </summary>
        public static Java.Lang.String MIMETYPE_VIDEO_VP9 { get { if (!_MIMETYPE_VIDEO_VP9Ready) { _MIMETYPE_VIDEO_VP9Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIMETYPE_VIDEO_VP9"); _MIMETYPE_VIDEO_VP9Ready = true; } return _MIMETYPE_VIDEO_VP9Content; } }
        private static Java.Lang.String _MIMETYPE_VIDEO_VP9Content = default;
        private static bool _MIMETYPE_VIDEO_VP9Ready = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#createAudioFormat(java.lang.String,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="Android.Media.MediaFormat"/></returns>
        public static Android.Media.MediaFormat CreateAudioFormat(Java.Lang.String arg0, int arg1, int arg2)
        {
            return SExecuteWithSignature<Android.Media.MediaFormat>(LocalBridgeClazz, "createAudioFormat", "(Ljava/lang/String;II)Landroid/media/MediaFormat;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#createSubtitleFormat(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Media.MediaFormat"/></returns>
        public static Android.Media.MediaFormat CreateSubtitleFormat(Java.Lang.String arg0, Java.Lang.String arg1)
        {
            return SExecuteWithSignature<Android.Media.MediaFormat>(LocalBridgeClazz, "createSubtitleFormat", "(Ljava/lang/String;Ljava/lang/String;)Landroid/media/MediaFormat;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#createVideoFormat(java.lang.String,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="Android.Media.MediaFormat"/></returns>
        public static Android.Media.MediaFormat CreateVideoFormat(Java.Lang.String arg0, int arg1, int arg2)
        {
            return SExecuteWithSignature<Android.Media.MediaFormat>(LocalBridgeClazz, "createVideoFormat", "(Ljava/lang/String;II)Landroid/media/MediaFormat;", arg0, arg1, arg2);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#containsFeature(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ContainsFeature(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<bool>("containsFeature", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#containsKey(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ContainsKey(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<bool>("containsKey", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#getFeatureEnabled(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool GetFeatureEnabled(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<bool>("getFeatureEnabled", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#getFloat(java.lang.String,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetFloat(Java.Lang.String arg0, float arg1)
        {
            return IExecuteWithSignature<float>("getFloat", "(Ljava/lang/String;F)F", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#getFloat(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetFloat(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<float>("getFloat", "(Ljava/lang/String;)F", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#getInteger(java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetInteger(Java.Lang.String arg0, int arg1)
        {
            return IExecuteWithSignature<int>("getInteger", "(Ljava/lang/String;I)I", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#getInteger(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetInteger(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<int>("getInteger", "(Ljava/lang/String;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#getValueTypeForKey(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetValueTypeForKey(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<int>("getValueTypeForKey", "(Ljava/lang/String;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#getNumber(java.lang.String,java.lang.Number)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.Number"/></param>
        /// <returns><see cref="Java.Lang.Number"/></returns>
        public Java.Lang.Number GetNumber(Java.Lang.String arg0, Java.Lang.Number arg1)
        {
            return IExecuteWithSignature<Java.Lang.Number>("getNumber", "(Ljava/lang/String;Ljava/lang/Number;)Ljava/lang/Number;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#getNumber(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.Number"/></returns>
        public Java.Lang.Number GetNumber(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Java.Lang.Number>("getNumber", "(Ljava/lang/String;)Ljava/lang/Number;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#getString(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetString(Java.Lang.String arg0, Java.Lang.String arg1)
        {
            return IExecuteWithSignature<Java.Lang.String>("getString", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#getString(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetString(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getString", "(Ljava/lang/String;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#getByteBuffer(java.lang.String,java.nio.ByteBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <returns><see cref="Java.Nio.ByteBuffer"/></returns>
        public Java.Nio.ByteBuffer GetByteBuffer(Java.Lang.String arg0, Java.Nio.ByteBuffer arg1)
        {
            return IExecuteWithSignature<Java.Nio.ByteBuffer>("getByteBuffer", "(Ljava/lang/String;Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#getByteBuffer(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Nio.ByteBuffer"/></returns>
        public Java.Nio.ByteBuffer GetByteBuffer(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Java.Nio.ByteBuffer>("getByteBuffer", "(Ljava/lang/String;)Ljava/nio/ByteBuffer;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#getFeatures()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Set"/></returns>
        public Java.Util.Set<Java.Lang.String> GetFeatures()
        {
            return IExecuteWithSignature<Java.Util.Set<Java.Lang.String>>("getFeatures", "()Ljava/util/Set;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#getKeys()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Set"/></returns>
        public Java.Util.Set<Java.Lang.String> GetKeys()
        {
            return IExecuteWithSignature<Java.Util.Set<Java.Lang.String>>("getKeys", "()Ljava/util/Set;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#getLong(java.lang.String,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <returns><see cref="long"/></returns>
        public long GetLong(Java.Lang.String arg0, long arg1)
        {
            return IExecuteWithSignature<long>("getLong", "(Ljava/lang/String;J)J", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#getLong(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="long"/></returns>
        public long GetLong(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<long>("getLong", "(Ljava/lang/String;)J", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#removeFeature(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void RemoveFeature(Java.Lang.String arg0)
        {
            IExecuteWithSignature("removeFeature", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#removeKey(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void RemoveKey(Java.Lang.String arg0)
        {
            IExecuteWithSignature("removeKey", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#setByteBuffer(java.lang.String,java.nio.ByteBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Nio.ByteBuffer"/></param>
        public void SetByteBuffer(Java.Lang.String arg0, Java.Nio.ByteBuffer arg1)
        {
            IExecuteWithSignature("setByteBuffer", "(Ljava/lang/String;Ljava/nio/ByteBuffer;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#setFeatureEnabled(java.lang.String,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public void SetFeatureEnabled(Java.Lang.String arg0, bool arg1)
        {
            IExecuteWithSignature("setFeatureEnabled", "(Ljava/lang/String;Z)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#setFloat(java.lang.String,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public void SetFloat(Java.Lang.String arg0, float arg1)
        {
            IExecuteWithSignature("setFloat", "(Ljava/lang/String;F)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#setInteger(java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetInteger(Java.Lang.String arg0, int arg1)
        {
            IExecuteWithSignature("setInteger", "(Ljava/lang/String;I)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#setLong(java.lang.String,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        public void SetLong(Java.Lang.String arg0, long arg1)
        {
            IExecuteWithSignature("setLong", "(Ljava/lang/String;J)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaFormat.html#setString(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        public void SetString(Java.Lang.String arg0, Java.Lang.String arg1)
        {
            IExecuteWithSignature("setString", "(Ljava/lang/String;Ljava/lang/String;)V", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region QpOffsetRect implementation
        public partial class QpOffsetRect
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaFormat.QpOffsetRect.html#%3Cinit%3E(android.graphics.Rect,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public QpOffsetRect(Android.Graphics.Rect arg0, int arg1)
                : base(arg0, arg1)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaFormat.QpOffsetRect.html#flattenToString(java.util.List)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.List"/></param>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public static Java.Lang.String FlattenToString(Java.Util.List<Android.Media.MediaFormat.QpOffsetRect> arg0)
            {
                return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "flattenToString", "(Ljava/util/List;)Ljava/lang/String;", arg0);
            }

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaFormat.QpOffsetRect.html#flattenToString()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String FlattenToString()
            {
                return IExecuteWithSignature<Java.Lang.String>("flattenToString", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaFormat.QpOffsetRect.html#set(android.graphics.Rect,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void Set(Android.Graphics.Rect arg0, int arg1)
            {
                IExecuteWithSignature("set", "(Landroid/graphics/Rect;I)V", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media
{
    #region MediaRouter2 declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.html"/>
    /// </summary>
    public partial class MediaRouter2 : MASES.JCOBridge.C2JBridge.JVMBridgeBase<MediaRouter2>
    {
        const string _bridgeClassName = "android.media.MediaRouter2";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public MediaRouter2() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public MediaRouter2(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region ControllerCallback declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.ControllerCallback.html"/>
        /// </summary>
        public partial class ControllerCallback : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ControllerCallback>
        {
            const string _bridgeClassName = "android.media.MediaRouter2$ControllerCallback";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("ControllerCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public ControllerCallback() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("ControllerCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public ControllerCallback(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region OnGetControllerHintsListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.OnGetControllerHintsListener.html"/>
        /// </summary>
        public partial class OnGetControllerHintsListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnGetControllerHintsListener() { InitializeHandlers(); }
        
            const string _bridgeClassName = "org.mases.netdroid.generated.android.media.MediaRouter2_OnGetControllerHintsListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
        
        
            // TODO: complete the class
        
        }
        #endregion
        
        #region OnGetControllerHintsListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="OnGetControllerHintsListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnGetControllerHintsListenerDirect : OnGetControllerHintsListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;
        
            /// <inheritdoc />
            protected override void InitializeHandlers() { }
        
            const string _bridgeClassName = "android.media.MediaRouter2$OnGetControllerHintsListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region RouteCallback declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.RouteCallback.html"/>
        /// </summary>
        public partial class RouteCallback : MASES.JCOBridge.C2JBridge.JVMBridgeBase<RouteCallback>
        {
            const string _bridgeClassName = "android.media.MediaRouter2$RouteCallback";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("RouteCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public RouteCallback() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("RouteCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public RouteCallback(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region RoutingController declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.RoutingController.html"/>
        /// </summary>
        public partial class RoutingController : MASES.JCOBridge.C2JBridge.JVMBridgeBase<RoutingController>
        {
            const string _bridgeClassName = "android.media.MediaRouter2$RoutingController";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public RoutingController() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public RoutingController(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => false;
        
            // TODO: complete the class
        
        }
        #endregion

        #region ScanRequest declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.ScanRequest.html"/>
        /// </summary>
        public partial class ScanRequest : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ScanRequest>
        {
            const string _bridgeClassName = "android.media.MediaRouter2$ScanRequest";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public ScanRequest() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public ScanRequest(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
            #region Builder declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.ScanRequest.Builder.html"/>
            /// </summary>
            public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
            {
                const string _bridgeClassName = "android.media.MediaRouter2$ScanRequest$Builder";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                public Builder() { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                public Builder(params object[] args) : base(args) { }
            
                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                /// </summary>
                public override string BridgeClassName => _bridgeClassName;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                /// </summary>
                public override bool IsBridgeAbstract => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                /// </summary>
                public override bool IsBridgeCloseable => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                /// </summary>
                public override bool IsBridgeInterface => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                /// </summary>
                public override bool IsBridgeStatic => true;
            
                // TODO: complete the class
            
            }
            #endregion

        
        }
        #endregion

        #region ScanToken declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.ScanToken.html"/>
        /// </summary>
        public partial class ScanToken : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ScanToken>
        {
            const string _bridgeClassName = "android.media.MediaRouter2$ScanToken";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public ScanToken() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public ScanToken(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region TransferCallback declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.TransferCallback.html"/>
        /// </summary>
        public partial class TransferCallback : MASES.JCOBridge.C2JBridge.JVMBridgeBase<TransferCallback>
        {
            const string _bridgeClassName = "android.media.MediaRouter2$TransferCallback";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("TransferCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public TransferCallback() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("TransferCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public TransferCallback(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region MediaRouter2 implementation
    public partial class MediaRouter2
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
    
        #endregion
    
        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.html#getInstance(android.content.Context,java.lang.String,java.util.concurrent.Executor,java.lang.Runnable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg3"><see cref="Java.Lang.Runnable"/></param>
        /// <returns><see cref="Android.Media.MediaRouter2"/></returns>
        public static Android.Media.MediaRouter2 GetInstance(Android.Content.Context arg0, Java.Lang.String arg1, Java.Util.Concurrent.Executor arg2, Java.Lang.Runnable arg3)
        {
            return SExecuteWithSignature<Android.Media.MediaRouter2>(LocalBridgeClazz, "getInstance", "(Landroid/content/Context;Ljava/lang/String;Ljava/util/concurrent/Executor;Ljava/lang/Runnable;)Landroid/media/MediaRouter2;", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.html#getInstance(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <returns><see cref="Android.Media.MediaRouter2"/></returns>
        public static Android.Media.MediaRouter2 GetInstance(Android.Content.Context arg0)
        {
            return SExecuteWithSignature<Android.Media.MediaRouter2>(LocalBridgeClazz, "getInstance", "(Landroid/content/Context;)Landroid/media/MediaRouter2;", arg0);
        }
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.html#getController(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Media.MediaRouter2.RoutingController"/></returns>
        public Android.Media.MediaRouter2.RoutingController GetController(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Android.Media.MediaRouter2.RoutingController>("getController", "(Ljava/lang/String;)Landroid/media/MediaRouter2$RoutingController;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.html#getSystemController()"/>
        /// </summary>
        /// <returns><see cref="Android.Media.MediaRouter2.RoutingController"/></returns>
        public Android.Media.MediaRouter2.RoutingController GetSystemController()
        {
            return IExecuteWithSignature<Android.Media.MediaRouter2.RoutingController>("getSystemController", "()Landroid/media/MediaRouter2$RoutingController;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.html#requestScan(android.media.MediaRouter2.ScanRequest)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaRouter2.ScanRequest"/></param>
        /// <returns><see cref="Android.Media.MediaRouter2.ScanToken"/></returns>
        public Android.Media.MediaRouter2.ScanToken RequestScan(Android.Media.MediaRouter2.ScanRequest arg0)
        {
            return IExecuteWithSignature<Android.Media.MediaRouter2.ScanToken>("requestScan", "(Landroid/media/MediaRouter2$ScanRequest;)Landroid/media/MediaRouter2$ScanToken;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.html#getRouteListingPreference()"/>
        /// </summary>
        /// <returns><see cref="Android.Media.RouteListingPreference"/></returns>
        public Android.Media.RouteListingPreference GetRouteListingPreference()
        {
            return IExecuteWithSignature<Android.Media.RouteListingPreference>("getRouteListingPreference", "()Landroid/media/RouteListingPreference;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.html#showSystemOutputSwitcher()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool ShowSystemOutputSwitcher()
        {
            return IExecuteWithSignature<bool>("showSystemOutputSwitcher", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.html#getRoutes()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Media.MediaRoute2Info> GetRoutes()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Media.MediaRoute2Info>>("getRoutes", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.html#getControllers()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Media.MediaRouter2.RoutingController> GetControllers()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Media.MediaRouter2.RoutingController>>("getControllers", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.html#cancelScanRequest(android.media.MediaRouter2.ScanToken)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaRouter2.ScanToken"/></param>
        public void CancelScanRequest(Android.Media.MediaRouter2.ScanToken arg0)
        {
            IExecuteWithSignature("cancelScanRequest", "(Landroid/media/MediaRouter2$ScanToken;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.html#registerControllerCallback(java.util.concurrent.Executor,android.media.MediaRouter2.ControllerCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Media.MediaRouter2.ControllerCallback"/></param>
        public void RegisterControllerCallback(Java.Util.Concurrent.Executor arg0, Android.Media.MediaRouter2.ControllerCallback arg1)
        {
            IExecuteWithSignature("registerControllerCallback", "(Ljava/util/concurrent/Executor;Landroid/media/MediaRouter2$ControllerCallback;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.html#registerRouteCallback(java.util.concurrent.Executor,android.media.MediaRouter2.RouteCallback,android.media.RouteDiscoveryPreference)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Media.MediaRouter2.RouteCallback"/></param>
        /// <param name="arg2"><see cref="Android.Media.RouteDiscoveryPreference"/></param>
        public void RegisterRouteCallback(Java.Util.Concurrent.Executor arg0, Android.Media.MediaRouter2.RouteCallback arg1, Android.Media.RouteDiscoveryPreference arg2)
        {
            IExecuteWithSignature("registerRouteCallback", "(Ljava/util/concurrent/Executor;Landroid/media/MediaRouter2$RouteCallback;Landroid/media/RouteDiscoveryPreference;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.html#registerRouteListingPreferenceUpdatedCallback(java.util.concurrent.Executor,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Java.Util.Function.Consumer"/></param>
        public void RegisterRouteListingPreferenceUpdatedCallback(Java.Util.Concurrent.Executor arg0, Java.Util.Function.Consumer<Android.Media.RouteListingPreference> arg1)
        {
            IExecuteWithSignature("registerRouteListingPreferenceUpdatedCallback", "(Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.html#registerTransferCallback(java.util.concurrent.Executor,android.media.MediaRouter2.TransferCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Media.MediaRouter2.TransferCallback"/></param>
        public void RegisterTransferCallback(Java.Util.Concurrent.Executor arg0, Android.Media.MediaRouter2.TransferCallback arg1)
        {
            IExecuteWithSignature("registerTransferCallback", "(Ljava/util/concurrent/Executor;Landroid/media/MediaRouter2$TransferCallback;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.html#setOnGetControllerHintsListener(android.media.MediaRouter2.OnGetControllerHintsListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaRouter2.OnGetControllerHintsListener"/></param>
        public void SetOnGetControllerHintsListener(Android.Media.MediaRouter2.OnGetControllerHintsListener arg0)
        {
            IExecuteWithSignature("setOnGetControllerHintsListener", "(Landroid/media/MediaRouter2$OnGetControllerHintsListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.html#setRouteListingPreference(android.media.RouteListingPreference)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.RouteListingPreference"/></param>
        public void SetRouteListingPreference(Android.Media.RouteListingPreference arg0)
        {
            IExecuteWithSignature("setRouteListingPreference", "(Landroid/media/RouteListingPreference;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.html#setRouteVolume(android.media.MediaRoute2Info,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaRoute2Info"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetRouteVolume(Android.Media.MediaRoute2Info arg0, int arg1)
        {
            IExecuteWithSignature("setRouteVolume", "(Landroid/media/MediaRoute2Info;I)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.html#stop()"/>
        /// </summary>
        public void Stop()
        {
            IExecuteWithSignature("stop", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.html#transferTo(android.media.MediaRoute2Info)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaRoute2Info"/></param>
        public void TransferTo(Android.Media.MediaRoute2Info arg0)
        {
            IExecuteWithSignature("transferTo", "(Landroid/media/MediaRoute2Info;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.html#unregisterControllerCallback(android.media.MediaRouter2.ControllerCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaRouter2.ControllerCallback"/></param>
        public void UnregisterControllerCallback(Android.Media.MediaRouter2.ControllerCallback arg0)
        {
            IExecuteWithSignature("unregisterControllerCallback", "(Landroid/media/MediaRouter2$ControllerCallback;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.html#unregisterRouteCallback(android.media.MediaRouter2.RouteCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaRouter2.RouteCallback"/></param>
        public void UnregisterRouteCallback(Android.Media.MediaRouter2.RouteCallback arg0)
        {
            IExecuteWithSignature("unregisterRouteCallback", "(Landroid/media/MediaRouter2$RouteCallback;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.html#unregisterRouteListingPreferenceUpdatedCallback(java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Consumer"/></param>
        public void UnregisterRouteListingPreferenceUpdatedCallback(Java.Util.Function.Consumer<Android.Media.RouteListingPreference> arg0)
        {
            IExecuteWithSignature("unregisterRouteListingPreferenceUpdatedCallback", "(Ljava/util/function/Consumer;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.html#unregisterTransferCallback(android.media.MediaRouter2.TransferCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaRouter2.TransferCallback"/></param>
        public void UnregisterTransferCallback(Android.Media.MediaRouter2.TransferCallback arg0)
        {
            IExecuteWithSignature("unregisterTransferCallback", "(Landroid/media/MediaRouter2$TransferCallback;)V", arg0);
        }
    
        #endregion
    
        #region Nested classes
        #region ControllerCallback implementation
        public partial class ControllerCallback
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.ControllerCallback.html#onControllerUpdated(android.media.MediaRouter2.RoutingController)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaRouter2.RoutingController"/></param>
            public void OnControllerUpdated(Android.Media.MediaRouter2.RoutingController arg0)
            {
                IExecuteWithSignature("onControllerUpdated", "(Landroid/media/MediaRouter2$RoutingController;)V", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region OnGetControllerHintsListener implementation
        public partial class OnGetControllerHintsListener
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnGetControllerHintsListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onGetControllerHints", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnGetControllerHintsEventHandler));

            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/MediaRouter2.OnGetControllerHintsListener.html#onGetControllerHints(android.media.MediaRoute2Info)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnGetControllerHints"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<Android.Media.MediaRoute2Info, Android.Os.Bundle> OnOnGetControllerHints { get; set; } = null;
            
            bool hasOverrideOnGetControllerHints = true;
            void OnGetControllerHintsEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnGetControllerHints = true;
                var methodToExecute = (OnOnGetControllerHints != null) ? OnOnGetControllerHints : OnGetControllerHints;
                var executionResult = methodToExecute.Invoke(data.EventData.GetAt<Android.Media.MediaRoute2Info>(0));
                data.EventData.TypedEventData.SetReturnData(hasOverrideOnGetControllerHints, executionResult);
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.OnGetControllerHintsListener.html#onGetControllerHints(android.media.MediaRoute2Info)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaRoute2Info"/></param>
            /// <returns><see cref="Android.Os.Bundle"/></returns>
            public virtual Android.Os.Bundle OnGetControllerHints(Android.Media.MediaRoute2Info arg0)
            {
                hasOverrideOnGetControllerHints = false; return default;
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region OnGetControllerHintsListenerDirect implementation
        public partial class OnGetControllerHintsListenerDirect
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.OnGetControllerHintsListener.html#onGetControllerHints(android.media.MediaRoute2Info)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaRoute2Info"/></param>
            /// <returns><see cref="Android.Os.Bundle"/></returns>
            public override Android.Os.Bundle OnGetControllerHints(Android.Media.MediaRoute2Info arg0)
            {
                return IExecuteWithSignature<Android.Os.Bundle>("onGetControllerHints", "(Landroid/media/MediaRoute2Info;)Landroid/os/Bundle;", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region RouteCallback implementation
        public partial class RouteCallback
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.RouteCallback.html#onRoutesAdded(java.util.List)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.List"/></param>
            [global::System.Obsolete()]
            public void OnRoutesAdded(Java.Util.List<Android.Media.MediaRoute2Info> arg0)
            {
                IExecuteWithSignature("onRoutesAdded", "(Ljava/util/List;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.RouteCallback.html#onRoutesChanged(java.util.List)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.List"/></param>
            [global::System.Obsolete()]
            public void OnRoutesChanged(Java.Util.List<Android.Media.MediaRoute2Info> arg0)
            {
                IExecuteWithSignature("onRoutesChanged", "(Ljava/util/List;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.RouteCallback.html#onRoutesRemoved(java.util.List)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.List"/></param>
            [global::System.Obsolete()]
            public void OnRoutesRemoved(Java.Util.List<Android.Media.MediaRoute2Info> arg0)
            {
                IExecuteWithSignature("onRoutesRemoved", "(Ljava/util/List;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.RouteCallback.html#onRoutesUpdated(java.util.List)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.List"/></param>
            public void OnRoutesUpdated(Java.Util.List<Android.Media.MediaRoute2Info> arg0)
            {
                IExecuteWithSignature("onRoutesUpdated", "(Ljava/util/List;)V", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region RoutingController implementation
        public partial class RoutingController
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.RoutingController.html#getRoutingSessionInfo()"/>
            /// </summary>
            /// <returns><see cref="Android.Media.RoutingSessionInfo"/></returns>
            public Android.Media.RoutingSessionInfo GetRoutingSessionInfo()
            {
                return IExecuteWithSignature<Android.Media.RoutingSessionInfo>("getRoutingSessionInfo", "()Landroid/media/RoutingSessionInfo;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.RoutingController.html#getControlHints()"/>
            /// </summary>
            /// <returns><see cref="Android.Os.Bundle"/></returns>
            public Android.Os.Bundle GetControlHints()
            {
                return IExecuteWithSignature<Android.Os.Bundle>("getControlHints", "()Landroid/os/Bundle;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.RoutingController.html#isReleased()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsReleased()
            {
                return IExecuteWithSignature<bool>("isReleased", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.RoutingController.html#wasTransferInitiatedBySelf()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool WasTransferInitiatedBySelf()
            {
                return IExecuteWithSignature<bool>("wasTransferInitiatedBySelf", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.RoutingController.html#getVolume()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetVolume()
            {
                return IExecuteWithSignature<int>("getVolume", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.RoutingController.html#getVolumeHandling()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetVolumeHandling()
            {
                return IExecuteWithSignature<int>("getVolumeHandling", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.RoutingController.html#getVolumeMax()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetVolumeMax()
            {
                return IExecuteWithSignature<int>("getVolumeMax", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.RoutingController.html#getId()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetId()
            {
                return IExecuteWithSignature<Java.Lang.String>("getId", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.RoutingController.html#getDeselectableRoutes()"/>
            /// </summary>
            /// <returns><see cref="Java.Util.List"/></returns>
            public Java.Util.List<Android.Media.MediaRoute2Info> GetDeselectableRoutes()
            {
                return IExecuteWithSignature<Java.Util.List<Android.Media.MediaRoute2Info>>("getDeselectableRoutes", "()Ljava/util/List;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.RoutingController.html#getSelectableRoutes()"/>
            /// </summary>
            /// <returns><see cref="Java.Util.List"/></returns>
            public Java.Util.List<Android.Media.MediaRoute2Info> GetSelectableRoutes()
            {
                return IExecuteWithSignature<Java.Util.List<Android.Media.MediaRoute2Info>>("getSelectableRoutes", "()Ljava/util/List;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.RoutingController.html#getSelectedRoutes()"/>
            /// </summary>
            /// <returns><see cref="Java.Util.List"/></returns>
            public Java.Util.List<Android.Media.MediaRoute2Info> GetSelectedRoutes()
            {
                return IExecuteWithSignature<Java.Util.List<Android.Media.MediaRoute2Info>>("getSelectedRoutes", "()Ljava/util/List;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.RoutingController.html#getTransferableRoutes()"/>
            /// </summary>
            /// <returns><see cref="Java.Util.List"/></returns>
            public Java.Util.List<Android.Media.MediaRoute2Info> GetTransferableRoutes()
            {
                return IExecuteWithSignature<Java.Util.List<Android.Media.MediaRoute2Info>>("getTransferableRoutes", "()Ljava/util/List;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.RoutingController.html#deselectRoute(android.media.MediaRoute2Info)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaRoute2Info"/></param>
            public void DeselectRoute(Android.Media.MediaRoute2Info arg0)
            {
                IExecuteWithSignature("deselectRoute", "(Landroid/media/MediaRoute2Info;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.RoutingController.html#release()"/>
            /// </summary>
            public void Release()
            {
                IExecuteWithSignature("release", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.RoutingController.html#selectRoute(android.media.MediaRoute2Info)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaRoute2Info"/></param>
            public void SelectRoute(Android.Media.MediaRoute2Info arg0)
            {
                IExecuteWithSignature("selectRoute", "(Landroid/media/MediaRoute2Info;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.RoutingController.html#setVolume(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void SetVolume(int arg0)
            {
                IExecuteWithSignature("setVolume", "(I)V", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region ScanRequest implementation
        public partial class ScanRequest
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.ScanRequest.html#isScreenOffScan()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsScreenOffScan()
            {
                return IExecuteWithSignature<bool>("isScreenOffScan", "()Z");
            }
        
            #endregion
        
            #region Nested classes
            #region Builder implementation
            public partial class Builder
            {
                #region Constructors
            
                #endregion
            
                #region Class/Interface conversion operators
            
                #endregion
            
                #region Fields
            
                #endregion
            
                #region Static methods
            
                #endregion
            
                #region Instance methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.ScanRequest.Builder.html#build()"/>
                /// </summary>
                /// <returns><see cref="Android.Media.MediaRouter2.ScanRequest"/></returns>
                public Android.Media.MediaRouter2.ScanRequest Build()
                {
                    return IExecute<Android.Media.MediaRouter2.ScanRequest>("build");
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.ScanRequest.Builder.html#setScreenOffScan(boolean)"/>
                /// </summary>
                /// <param name="arg0"><see cref="bool"/></param>
                /// <returns><see cref="Android.Media.MediaRouter2.ScanRequest.Builder"/></returns>
                public Android.Media.MediaRouter2.ScanRequest.Builder SetScreenOffScan(bool arg0)
                {
                    return IExecute<Android.Media.MediaRouter2.ScanRequest.Builder>("setScreenOffScan", arg0);
                }
            
                #endregion
            
                #region Nested classes
            
                #endregion
            
                // TODO: complete the class
            }
            #endregion

        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region ScanToken implementation
        public partial class ScanToken
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region TransferCallback implementation
        public partial class TransferCallback
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.TransferCallback.html#onStop(android.media.MediaRouter2.RoutingController)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaRouter2.RoutingController"/></param>
            public void OnStop(Android.Media.MediaRouter2.RoutingController arg0)
            {
                IExecuteWithSignature("onStop", "(Landroid/media/MediaRouter2$RoutingController;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.TransferCallback.html#onTransfer(android.media.MediaRouter2.RoutingController,android.media.MediaRouter2.RoutingController)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaRouter2.RoutingController"/></param>
            /// <param name="arg1"><see cref="Android.Media.MediaRouter2.RoutingController"/></param>
            public void OnTransfer(Android.Media.MediaRouter2.RoutingController arg0, Android.Media.MediaRouter2.RoutingController arg1)
            {
                IExecuteWithSignature("onTransfer", "(Landroid/media/MediaRouter2$RoutingController;Landroid/media/MediaRouter2$RoutingController;)V", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter2.TransferCallback.html#onTransferFailure(android.media.MediaRoute2Info)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaRoute2Info"/></param>
            public void OnTransferFailure(Android.Media.MediaRoute2Info arg0)
            {
                IExecuteWithSignature("onTransferFailure", "(Landroid/media/MediaRoute2Info;)V", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
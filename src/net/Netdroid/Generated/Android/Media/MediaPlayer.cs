/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.8.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media
{
    #region MediaPlayer
    public partial class MediaPlayer : Android.Media.IVolumeAutomation, Android.Media.IAudioRouting
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#%3Cinit%3E(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        public MediaPlayer(Android.Content.Context arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Android.Media.MediaPlayer"/> to <see cref="Android.Media.VolumeAutomation"/>
        /// </summary>
        public static implicit operator Android.Media.VolumeAutomation(Android.Media.MediaPlayer t) => t.Cast<Android.Media.VolumeAutomation>();
        /// <summary>
        /// Converter from <see cref="Android.Media.MediaPlayer"/> to <see cref="Android.Media.AudioRouting"/>
        /// </summary>
        public static implicit operator Android.Media.AudioRouting(Android.Media.MediaPlayer t) => t.Cast<Android.Media.AudioRouting>();

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_ERROR_IO"/>
        /// </summary>
        public static int MEDIA_ERROR_IO { get { if (!_MEDIA_ERROR_IOReady) { _MEDIA_ERROR_IOContent = SGetField<int>(LocalBridgeClazz, "MEDIA_ERROR_IO"); _MEDIA_ERROR_IOReady = true; } return _MEDIA_ERROR_IOContent; } }
        private static int _MEDIA_ERROR_IOContent = default;
        private static bool _MEDIA_ERROR_IOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_ERROR_MALFORMED"/>
        /// </summary>
        public static int MEDIA_ERROR_MALFORMED { get { if (!_MEDIA_ERROR_MALFORMEDReady) { _MEDIA_ERROR_MALFORMEDContent = SGetField<int>(LocalBridgeClazz, "MEDIA_ERROR_MALFORMED"); _MEDIA_ERROR_MALFORMEDReady = true; } return _MEDIA_ERROR_MALFORMEDContent; } }
        private static int _MEDIA_ERROR_MALFORMEDContent = default;
        private static bool _MEDIA_ERROR_MALFORMEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK"/>
        /// </summary>
        public static int MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK { get { if (!_MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACKReady) { _MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACKContent = SGetField<int>(LocalBridgeClazz, "MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK"); _MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACKReady = true; } return _MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACKContent; } }
        private static int _MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACKContent = default;
        private static bool _MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_ERROR_SERVER_DIED"/>
        /// </summary>
        public static int MEDIA_ERROR_SERVER_DIED { get { if (!_MEDIA_ERROR_SERVER_DIEDReady) { _MEDIA_ERROR_SERVER_DIEDContent = SGetField<int>(LocalBridgeClazz, "MEDIA_ERROR_SERVER_DIED"); _MEDIA_ERROR_SERVER_DIEDReady = true; } return _MEDIA_ERROR_SERVER_DIEDContent; } }
        private static int _MEDIA_ERROR_SERVER_DIEDContent = default;
        private static bool _MEDIA_ERROR_SERVER_DIEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_ERROR_TIMED_OUT"/>
        /// </summary>
        public static int MEDIA_ERROR_TIMED_OUT { get { if (!_MEDIA_ERROR_TIMED_OUTReady) { _MEDIA_ERROR_TIMED_OUTContent = SGetField<int>(LocalBridgeClazz, "MEDIA_ERROR_TIMED_OUT"); _MEDIA_ERROR_TIMED_OUTReady = true; } return _MEDIA_ERROR_TIMED_OUTContent; } }
        private static int _MEDIA_ERROR_TIMED_OUTContent = default;
        private static bool _MEDIA_ERROR_TIMED_OUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_ERROR_UNKNOWN"/>
        /// </summary>
        public static int MEDIA_ERROR_UNKNOWN { get { if (!_MEDIA_ERROR_UNKNOWNReady) { _MEDIA_ERROR_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "MEDIA_ERROR_UNKNOWN"); _MEDIA_ERROR_UNKNOWNReady = true; } return _MEDIA_ERROR_UNKNOWNContent; } }
        private static int _MEDIA_ERROR_UNKNOWNContent = default;
        private static bool _MEDIA_ERROR_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_ERROR_UNSUPPORTED"/>
        /// </summary>
        public static int MEDIA_ERROR_UNSUPPORTED { get { if (!_MEDIA_ERROR_UNSUPPORTEDReady) { _MEDIA_ERROR_UNSUPPORTEDContent = SGetField<int>(LocalBridgeClazz, "MEDIA_ERROR_UNSUPPORTED"); _MEDIA_ERROR_UNSUPPORTEDReady = true; } return _MEDIA_ERROR_UNSUPPORTEDContent; } }
        private static int _MEDIA_ERROR_UNSUPPORTEDContent = default;
        private static bool _MEDIA_ERROR_UNSUPPORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_INFO_AUDIO_NOT_PLAYING"/>
        /// </summary>
        public static int MEDIA_INFO_AUDIO_NOT_PLAYING { get { if (!_MEDIA_INFO_AUDIO_NOT_PLAYINGReady) { _MEDIA_INFO_AUDIO_NOT_PLAYINGContent = SGetField<int>(LocalBridgeClazz, "MEDIA_INFO_AUDIO_NOT_PLAYING"); _MEDIA_INFO_AUDIO_NOT_PLAYINGReady = true; } return _MEDIA_INFO_AUDIO_NOT_PLAYINGContent; } }
        private static int _MEDIA_INFO_AUDIO_NOT_PLAYINGContent = default;
        private static bool _MEDIA_INFO_AUDIO_NOT_PLAYINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_INFO_BAD_INTERLEAVING"/>
        /// </summary>
        public static int MEDIA_INFO_BAD_INTERLEAVING { get { if (!_MEDIA_INFO_BAD_INTERLEAVINGReady) { _MEDIA_INFO_BAD_INTERLEAVINGContent = SGetField<int>(LocalBridgeClazz, "MEDIA_INFO_BAD_INTERLEAVING"); _MEDIA_INFO_BAD_INTERLEAVINGReady = true; } return _MEDIA_INFO_BAD_INTERLEAVINGContent; } }
        private static int _MEDIA_INFO_BAD_INTERLEAVINGContent = default;
        private static bool _MEDIA_INFO_BAD_INTERLEAVINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_INFO_BUFFERING_END"/>
        /// </summary>
        public static int MEDIA_INFO_BUFFERING_END { get { if (!_MEDIA_INFO_BUFFERING_ENDReady) { _MEDIA_INFO_BUFFERING_ENDContent = SGetField<int>(LocalBridgeClazz, "MEDIA_INFO_BUFFERING_END"); _MEDIA_INFO_BUFFERING_ENDReady = true; } return _MEDIA_INFO_BUFFERING_ENDContent; } }
        private static int _MEDIA_INFO_BUFFERING_ENDContent = default;
        private static bool _MEDIA_INFO_BUFFERING_ENDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_INFO_BUFFERING_START"/>
        /// </summary>
        public static int MEDIA_INFO_BUFFERING_START { get { if (!_MEDIA_INFO_BUFFERING_STARTReady) { _MEDIA_INFO_BUFFERING_STARTContent = SGetField<int>(LocalBridgeClazz, "MEDIA_INFO_BUFFERING_START"); _MEDIA_INFO_BUFFERING_STARTReady = true; } return _MEDIA_INFO_BUFFERING_STARTContent; } }
        private static int _MEDIA_INFO_BUFFERING_STARTContent = default;
        private static bool _MEDIA_INFO_BUFFERING_STARTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_INFO_METADATA_UPDATE"/>
        /// </summary>
        public static int MEDIA_INFO_METADATA_UPDATE { get { if (!_MEDIA_INFO_METADATA_UPDATEReady) { _MEDIA_INFO_METADATA_UPDATEContent = SGetField<int>(LocalBridgeClazz, "MEDIA_INFO_METADATA_UPDATE"); _MEDIA_INFO_METADATA_UPDATEReady = true; } return _MEDIA_INFO_METADATA_UPDATEContent; } }
        private static int _MEDIA_INFO_METADATA_UPDATEContent = default;
        private static bool _MEDIA_INFO_METADATA_UPDATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_INFO_NOT_SEEKABLE"/>
        /// </summary>
        public static int MEDIA_INFO_NOT_SEEKABLE { get { if (!_MEDIA_INFO_NOT_SEEKABLEReady) { _MEDIA_INFO_NOT_SEEKABLEContent = SGetField<int>(LocalBridgeClazz, "MEDIA_INFO_NOT_SEEKABLE"); _MEDIA_INFO_NOT_SEEKABLEReady = true; } return _MEDIA_INFO_NOT_SEEKABLEContent; } }
        private static int _MEDIA_INFO_NOT_SEEKABLEContent = default;
        private static bool _MEDIA_INFO_NOT_SEEKABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_INFO_STARTED_AS_NEXT"/>
        /// </summary>
        public static int MEDIA_INFO_STARTED_AS_NEXT { get { if (!_MEDIA_INFO_STARTED_AS_NEXTReady) { _MEDIA_INFO_STARTED_AS_NEXTContent = SGetField<int>(LocalBridgeClazz, "MEDIA_INFO_STARTED_AS_NEXT"); _MEDIA_INFO_STARTED_AS_NEXTReady = true; } return _MEDIA_INFO_STARTED_AS_NEXTContent; } }
        private static int _MEDIA_INFO_STARTED_AS_NEXTContent = default;
        private static bool _MEDIA_INFO_STARTED_AS_NEXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_INFO_SUBTITLE_TIMED_OUT"/>
        /// </summary>
        public static int MEDIA_INFO_SUBTITLE_TIMED_OUT { get { if (!_MEDIA_INFO_SUBTITLE_TIMED_OUTReady) { _MEDIA_INFO_SUBTITLE_TIMED_OUTContent = SGetField<int>(LocalBridgeClazz, "MEDIA_INFO_SUBTITLE_TIMED_OUT"); _MEDIA_INFO_SUBTITLE_TIMED_OUTReady = true; } return _MEDIA_INFO_SUBTITLE_TIMED_OUTContent; } }
        private static int _MEDIA_INFO_SUBTITLE_TIMED_OUTContent = default;
        private static bool _MEDIA_INFO_SUBTITLE_TIMED_OUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_INFO_UNKNOWN"/>
        /// </summary>
        public static int MEDIA_INFO_UNKNOWN { get { if (!_MEDIA_INFO_UNKNOWNReady) { _MEDIA_INFO_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "MEDIA_INFO_UNKNOWN"); _MEDIA_INFO_UNKNOWNReady = true; } return _MEDIA_INFO_UNKNOWNContent; } }
        private static int _MEDIA_INFO_UNKNOWNContent = default;
        private static bool _MEDIA_INFO_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_INFO_UNSUPPORTED_SUBTITLE"/>
        /// </summary>
        public static int MEDIA_INFO_UNSUPPORTED_SUBTITLE { get { if (!_MEDIA_INFO_UNSUPPORTED_SUBTITLEReady) { _MEDIA_INFO_UNSUPPORTED_SUBTITLEContent = SGetField<int>(LocalBridgeClazz, "MEDIA_INFO_UNSUPPORTED_SUBTITLE"); _MEDIA_INFO_UNSUPPORTED_SUBTITLEReady = true; } return _MEDIA_INFO_UNSUPPORTED_SUBTITLEContent; } }
        private static int _MEDIA_INFO_UNSUPPORTED_SUBTITLEContent = default;
        private static bool _MEDIA_INFO_UNSUPPORTED_SUBTITLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_INFO_VIDEO_NOT_PLAYING"/>
        /// </summary>
        public static int MEDIA_INFO_VIDEO_NOT_PLAYING { get { if (!_MEDIA_INFO_VIDEO_NOT_PLAYINGReady) { _MEDIA_INFO_VIDEO_NOT_PLAYINGContent = SGetField<int>(LocalBridgeClazz, "MEDIA_INFO_VIDEO_NOT_PLAYING"); _MEDIA_INFO_VIDEO_NOT_PLAYINGReady = true; } return _MEDIA_INFO_VIDEO_NOT_PLAYINGContent; } }
        private static int _MEDIA_INFO_VIDEO_NOT_PLAYINGContent = default;
        private static bool _MEDIA_INFO_VIDEO_NOT_PLAYINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_INFO_VIDEO_RENDERING_START"/>
        /// </summary>
        public static int MEDIA_INFO_VIDEO_RENDERING_START { get { if (!_MEDIA_INFO_VIDEO_RENDERING_STARTReady) { _MEDIA_INFO_VIDEO_RENDERING_STARTContent = SGetField<int>(LocalBridgeClazz, "MEDIA_INFO_VIDEO_RENDERING_START"); _MEDIA_INFO_VIDEO_RENDERING_STARTReady = true; } return _MEDIA_INFO_VIDEO_RENDERING_STARTContent; } }
        private static int _MEDIA_INFO_VIDEO_RENDERING_STARTContent = default;
        private static bool _MEDIA_INFO_VIDEO_RENDERING_STARTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_INFO_VIDEO_TRACK_LAGGING"/>
        /// </summary>
        public static int MEDIA_INFO_VIDEO_TRACK_LAGGING { get { if (!_MEDIA_INFO_VIDEO_TRACK_LAGGINGReady) { _MEDIA_INFO_VIDEO_TRACK_LAGGINGContent = SGetField<int>(LocalBridgeClazz, "MEDIA_INFO_VIDEO_TRACK_LAGGING"); _MEDIA_INFO_VIDEO_TRACK_LAGGINGReady = true; } return _MEDIA_INFO_VIDEO_TRACK_LAGGINGContent; } }
        private static int _MEDIA_INFO_VIDEO_TRACK_LAGGINGContent = default;
        private static bool _MEDIA_INFO_VIDEO_TRACK_LAGGINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#PREPARE_DRM_STATUS_PREPARATION_ERROR"/>
        /// </summary>
        public static int PREPARE_DRM_STATUS_PREPARATION_ERROR { get { if (!_PREPARE_DRM_STATUS_PREPARATION_ERRORReady) { _PREPARE_DRM_STATUS_PREPARATION_ERRORContent = SGetField<int>(LocalBridgeClazz, "PREPARE_DRM_STATUS_PREPARATION_ERROR"); _PREPARE_DRM_STATUS_PREPARATION_ERRORReady = true; } return _PREPARE_DRM_STATUS_PREPARATION_ERRORContent; } }
        private static int _PREPARE_DRM_STATUS_PREPARATION_ERRORContent = default;
        private static bool _PREPARE_DRM_STATUS_PREPARATION_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#PREPARE_DRM_STATUS_PROVISIONING_NETWORK_ERROR"/>
        /// </summary>
        public static int PREPARE_DRM_STATUS_PROVISIONING_NETWORK_ERROR { get { if (!_PREPARE_DRM_STATUS_PROVISIONING_NETWORK_ERRORReady) { _PREPARE_DRM_STATUS_PROVISIONING_NETWORK_ERRORContent = SGetField<int>(LocalBridgeClazz, "PREPARE_DRM_STATUS_PROVISIONING_NETWORK_ERROR"); _PREPARE_DRM_STATUS_PROVISIONING_NETWORK_ERRORReady = true; } return _PREPARE_DRM_STATUS_PROVISIONING_NETWORK_ERRORContent; } }
        private static int _PREPARE_DRM_STATUS_PROVISIONING_NETWORK_ERRORContent = default;
        private static bool _PREPARE_DRM_STATUS_PROVISIONING_NETWORK_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#PREPARE_DRM_STATUS_PROVISIONING_SERVER_ERROR"/>
        /// </summary>
        public static int PREPARE_DRM_STATUS_PROVISIONING_SERVER_ERROR { get { if (!_PREPARE_DRM_STATUS_PROVISIONING_SERVER_ERRORReady) { _PREPARE_DRM_STATUS_PROVISIONING_SERVER_ERRORContent = SGetField<int>(LocalBridgeClazz, "PREPARE_DRM_STATUS_PROVISIONING_SERVER_ERROR"); _PREPARE_DRM_STATUS_PROVISIONING_SERVER_ERRORReady = true; } return _PREPARE_DRM_STATUS_PROVISIONING_SERVER_ERRORContent; } }
        private static int _PREPARE_DRM_STATUS_PROVISIONING_SERVER_ERRORContent = default;
        private static bool _PREPARE_DRM_STATUS_PROVISIONING_SERVER_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#PREPARE_DRM_STATUS_SUCCESS"/>
        /// </summary>
        public static int PREPARE_DRM_STATUS_SUCCESS { get { if (!_PREPARE_DRM_STATUS_SUCCESSReady) { _PREPARE_DRM_STATUS_SUCCESSContent = SGetField<int>(LocalBridgeClazz, "PREPARE_DRM_STATUS_SUCCESS"); _PREPARE_DRM_STATUS_SUCCESSReady = true; } return _PREPARE_DRM_STATUS_SUCCESSContent; } }
        private static int _PREPARE_DRM_STATUS_SUCCESSContent = default;
        private static bool _PREPARE_DRM_STATUS_SUCCESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#SEEK_CLOSEST"/>
        /// </summary>
        public static int SEEK_CLOSEST { get { if (!_SEEK_CLOSESTReady) { _SEEK_CLOSESTContent = SGetField<int>(LocalBridgeClazz, "SEEK_CLOSEST"); _SEEK_CLOSESTReady = true; } return _SEEK_CLOSESTContent; } }
        private static int _SEEK_CLOSESTContent = default;
        private static bool _SEEK_CLOSESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#SEEK_CLOSEST_SYNC"/>
        /// </summary>
        public static int SEEK_CLOSEST_SYNC { get { if (!_SEEK_CLOSEST_SYNCReady) { _SEEK_CLOSEST_SYNCContent = SGetField<int>(LocalBridgeClazz, "SEEK_CLOSEST_SYNC"); _SEEK_CLOSEST_SYNCReady = true; } return _SEEK_CLOSEST_SYNCContent; } }
        private static int _SEEK_CLOSEST_SYNCContent = default;
        private static bool _SEEK_CLOSEST_SYNCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#SEEK_NEXT_SYNC"/>
        /// </summary>
        public static int SEEK_NEXT_SYNC { get { if (!_SEEK_NEXT_SYNCReady) { _SEEK_NEXT_SYNCContent = SGetField<int>(LocalBridgeClazz, "SEEK_NEXT_SYNC"); _SEEK_NEXT_SYNCReady = true; } return _SEEK_NEXT_SYNCContent; } }
        private static int _SEEK_NEXT_SYNCContent = default;
        private static bool _SEEK_NEXT_SYNCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#SEEK_PREVIOUS_SYNC"/>
        /// </summary>
        public static int SEEK_PREVIOUS_SYNC { get { if (!_SEEK_PREVIOUS_SYNCReady) { _SEEK_PREVIOUS_SYNCContent = SGetField<int>(LocalBridgeClazz, "SEEK_PREVIOUS_SYNC"); _SEEK_PREVIOUS_SYNCReady = true; } return _SEEK_PREVIOUS_SYNCContent; } }
        private static int _SEEK_PREVIOUS_SYNCContent = default;
        private static bool _SEEK_PREVIOUS_SYNCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#VIDEO_SCALING_MODE_SCALE_TO_FIT"/>
        /// </summary>
        public static int VIDEO_SCALING_MODE_SCALE_TO_FIT { get { if (!_VIDEO_SCALING_MODE_SCALE_TO_FITReady) { _VIDEO_SCALING_MODE_SCALE_TO_FITContent = SGetField<int>(LocalBridgeClazz, "VIDEO_SCALING_MODE_SCALE_TO_FIT"); _VIDEO_SCALING_MODE_SCALE_TO_FITReady = true; } return _VIDEO_SCALING_MODE_SCALE_TO_FITContent; } }
        private static int _VIDEO_SCALING_MODE_SCALE_TO_FITContent = default;
        private static bool _VIDEO_SCALING_MODE_SCALE_TO_FITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING"/>
        /// </summary>
        public static int VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING { get { if (!_VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPINGReady) { _VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPINGContent = SGetField<int>(LocalBridgeClazz, "VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING"); _VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPINGReady = true; } return _VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPINGContent; } }
        private static int _VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPINGContent = default;
        private static bool _VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_MIMETYPE_TEXT_SUBRIP"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String MEDIA_MIMETYPE_TEXT_SUBRIP { get { if (!_MEDIA_MIMETYPE_TEXT_SUBRIPReady) { _MEDIA_MIMETYPE_TEXT_SUBRIPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MEDIA_MIMETYPE_TEXT_SUBRIP"); _MEDIA_MIMETYPE_TEXT_SUBRIPReady = true; } return _MEDIA_MIMETYPE_TEXT_SUBRIPContent; } }
        private static Java.Lang.String _MEDIA_MIMETYPE_TEXT_SUBRIPContent = default;
        private static bool _MEDIA_MIMETYPE_TEXT_SUBRIPReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#create(android.content.Context,android.net.Uri,android.view.SurfaceHolder,android.media.AudioAttributes,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg2"><see cref="Android.View.SurfaceHolder"/></param>
        /// <param name="arg3"><see cref="Android.Media.AudioAttributes"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <returns><see cref="Android.Media.MediaPlayer"/></returns>
        public static Android.Media.MediaPlayer Create(Android.Content.Context arg0, Android.Net.Uri arg1, Android.View.SurfaceHolder arg2, Android.Media.AudioAttributes arg3, int arg4)
        {
            return SExecute<Android.Media.MediaPlayer>(LocalBridgeClazz, "create", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#create(android.content.Context,android.net.Uri,android.view.SurfaceHolder)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg2"><see cref="Android.View.SurfaceHolder"/></param>
        /// <returns><see cref="Android.Media.MediaPlayer"/></returns>
        public static Android.Media.MediaPlayer Create(Android.Content.Context arg0, Android.Net.Uri arg1, Android.View.SurfaceHolder arg2)
        {
            return SExecute<Android.Media.MediaPlayer>(LocalBridgeClazz, "create", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#create(android.content.Context,android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
        /// <returns><see cref="Android.Media.MediaPlayer"/></returns>
        public static Android.Media.MediaPlayer Create(Android.Content.Context arg0, Android.Net.Uri arg1)
        {
            return SExecute<Android.Media.MediaPlayer>(LocalBridgeClazz, "create", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#create(android.content.Context,int,android.media.AudioAttributes,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Media.AudioAttributes"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="Android.Media.MediaPlayer"/></returns>
        public static Android.Media.MediaPlayer Create(Android.Content.Context arg0, int arg1, Android.Media.AudioAttributes arg2, int arg3)
        {
            return SExecute<Android.Media.MediaPlayer>(LocalBridgeClazz, "create", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#create(android.content.Context,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.Media.MediaPlayer"/></returns>
        public static Android.Media.MediaPlayer Create(Android.Content.Context arg0, int arg1)
        {
            return SExecute<Android.Media.MediaPlayer>(LocalBridgeClazz, "create", arg0, arg1);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#getPreferredDevice()"/>
        /// </summary>
        /// <returns><see cref="Android.Media.AudioDeviceInfo"/></returns>
        public Android.Media.AudioDeviceInfo GetPreferredDevice()
        {
            return IExecuteWithSignature<Android.Media.AudioDeviceInfo>("getPreferredDevice", "()Landroid/media/AudioDeviceInfo;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#getRoutedDevice()"/>
        /// </summary>
        /// <returns><see cref="Android.Media.AudioDeviceInfo"/></returns>
        public Android.Media.AudioDeviceInfo GetRoutedDevice()
        {
            return IExecuteWithSignature<Android.Media.AudioDeviceInfo>("getRoutedDevice", "()Landroid/media/AudioDeviceInfo;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#getKeyRequest(byte[],byte[],java.lang.String,int,java.util.Map)"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="Java.Util.Map"/></param>
        /// <returns><see cref="Android.Media.MediaDrm.KeyRequest"/></returns>
        /// <exception cref="Android.Media.MediaPlayer.NoDrmSchemeException"/>
        public Android.Media.MediaDrm.KeyRequest GetKeyRequest(byte[] arg0, byte[] arg1, Java.Lang.String arg2, int arg3, Java.Util.Map<Java.Lang.String, Java.Lang.String> arg4)
        {
            return IExecute<Android.Media.MediaDrm.KeyRequest>("getKeyRequest", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#getDrmInfo()"/>
        /// </summary>
        /// <returns><see cref="Android.Media.MediaPlayer.DrmInfo"/></returns>
        public Android.Media.MediaPlayer.DrmInfo GetDrmInfo()
        {
            return IExecuteWithSignature<Android.Media.MediaPlayer.DrmInfo>("getDrmInfo", "()Landroid/media/MediaPlayer$DrmInfo;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#getTrackInfo()"/>
        /// </summary>
        /// <returns><see cref="Android.Media.MediaPlayer.TrackInfo"/></returns>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public Android.Media.MediaPlayer.TrackInfo[] GetTrackInfo()
        {
            return IExecuteWithSignatureArray<Android.Media.MediaPlayer.TrackInfo>("getTrackInfo", "()[Landroid/media/MediaPlayer$TrackInfo;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#getTimestamp()"/>
        /// </summary>
        /// <returns><see cref="Android.Media.MediaTimestamp"/></returns>
        public Android.Media.MediaTimestamp GetTimestamp()
        {
            return IExecuteWithSignature<Android.Media.MediaTimestamp>("getTimestamp", "()Landroid/media/MediaTimestamp;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#createVolumeShaper(android.media.VolumeShaper.Configuration)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.VolumeShaper.Configuration"/></param>
        /// <returns><see cref="Android.Media.VolumeShaper"/></returns>
        public Android.Media.VolumeShaper CreateVolumeShaper(Android.Media.VolumeShaper.Configuration arg0)
        {
            return IExecuteWithSignature<Android.Media.VolumeShaper>("createVolumeShaper", "(Landroid/media/VolumeShaper$Configuration;)Landroid/media/VolumeShaper;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#getMetrics()"/>
        /// </summary>
        /// <returns><see cref="Android.Os.PersistableBundle"/></returns>
        public Android.Os.PersistableBundle GetMetrics()
        {
            return IExecuteWithSignature<Android.Os.PersistableBundle>("getMetrics", "()Landroid/os/PersistableBundle;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setPreferredDevice(android.media.AudioDeviceInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioDeviceInfo"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetPreferredDevice(Android.Media.AudioDeviceInfo arg0)
        {
            return IExecuteWithSignature<bool>("setPreferredDevice", "(Landroid/media/AudioDeviceInfo;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#provideKeyResponse(byte[],byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        /// <returns><see cref="byte"/></returns>
        /// <exception cref="Android.Media.DeniedByServerException"/>
        /// <exception cref="Android.Media.MediaPlayer.NoDrmSchemeException"/>
        public byte[] ProvideKeyResponse(byte[] arg0, byte[] arg1)
        {
            return IExecuteArray<byte>("provideKeyResponse", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#getSelectedTrack(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public int GetSelectedTrack(int arg0)
        {
            return IExecuteWithSignature<int>("getSelectedTrack", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#getDrmPropertyString(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        /// <exception cref="Android.Media.MediaPlayer.NoDrmSchemeException"/>
        public Java.Lang.String GetDrmPropertyString(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getDrmPropertyString", "(Ljava/lang/String;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#getPlaybackParams()"/>
        /// </summary>
        /// <returns><see cref="Android.Media.PlaybackParams"/></returns>
        public Android.Media.PlaybackParams GetPlaybackParams()
        {
            return IExecuteWithSignature<Android.Media.PlaybackParams>("getPlaybackParams", "()Landroid/media/PlaybackParams;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#getSyncParams()"/>
        /// </summary>
        /// <returns><see cref="Android.Media.SyncParams"/></returns>
        public Android.Media.SyncParams GetSyncParams()
        {
            return IExecuteWithSignature<Android.Media.SyncParams>("getSyncParams", "()Landroid/media/SyncParams;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#isLooping()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsLooping()
        {
            return IExecuteWithSignature<bool>("isLooping", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#isPlaying()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsPlaying()
        {
            return IExecuteWithSignature<bool>("isPlaying", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#getAudioSessionId()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetAudioSessionId()
        {
            return IExecuteWithSignature<int>("getAudioSessionId", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#getCurrentPosition()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetCurrentPosition()
        {
            return IExecuteWithSignature<int>("getCurrentPosition", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#getDuration()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetDuration()
        {
            return IExecuteWithSignature<int>("getDuration", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#getVideoHeight()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetVideoHeight()
        {
            return IExecuteWithSignature<int>("getVideoHeight", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#getVideoWidth()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetVideoWidth()
        {
            return IExecuteWithSignature<int>("getVideoWidth", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#attachAuxEffect(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void AttachAuxEffect(int arg0)
        {
            IExecuteWithSignature("attachAuxEffect", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setLooping(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetLooping(bool arg0)
        {
            IExecuteWithSignature("setLooping", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setNextMediaPlayer(android.media.MediaPlayer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaPlayer"/></param>
        public void SetNextMediaPlayer(Android.Media.MediaPlayer arg0)
        {
            IExecuteWithSignature("setNextMediaPlayer", "(Landroid/media/MediaPlayer;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setPlaybackParams(android.media.PlaybackParams)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.PlaybackParams"/></param>
        public void SetPlaybackParams(Android.Media.PlaybackParams arg0)
        {
            IExecuteWithSignature("setPlaybackParams", "(Landroid/media/PlaybackParams;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setSyncParams(android.media.SyncParams)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.SyncParams"/></param>
        public void SetSyncParams(Android.Media.SyncParams arg0)
        {
            IExecuteWithSignature("setSyncParams", "(Landroid/media/SyncParams;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#addOnRoutingChangedListener(android.media.AudioRouting.OnRoutingChangedListener,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioRouting.OnRoutingChangedListener"/></param>
        /// <param name="arg1"><see cref="Android.Os.Handler"/></param>
        public void AddOnRoutingChangedListener(Android.Media.AudioRouting.OnRoutingChangedListener arg0, Android.Os.Handler arg1)
        {
            IExecute("addOnRoutingChangedListener", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#addTimedTextSource(android.content.Context,android.net.Uri,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <exception cref="Java.Io.IOException"/>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public void AddTimedTextSource(Android.Content.Context arg0, Android.Net.Uri arg1, Java.Lang.String arg2)
        {
            IExecute("addTimedTextSource", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#addTimedTextSource(java.io.FileDescriptor,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.FileDescriptor"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public void AddTimedTextSource(Java.Io.FileDescriptor arg0, Java.Lang.String arg1)
        {
            IExecute("addTimedTextSource", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#addTimedTextSource(java.io.FileDescriptor,long,long,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.FileDescriptor"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public void AddTimedTextSource(Java.Io.FileDescriptor arg0, long arg1, long arg2, Java.Lang.String arg3)
        {
            IExecute("addTimedTextSource", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#addTimedTextSource(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <exception cref="Java.Io.IOException"/>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public void AddTimedTextSource(Java.Lang.String arg0, Java.Lang.String arg1)
        {
            IExecute("addTimedTextSource", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#clearOnMediaTimeDiscontinuityListener()"/>
        /// </summary>
        public void ClearOnMediaTimeDiscontinuityListener()
        {
            IExecuteWithSignature("clearOnMediaTimeDiscontinuityListener", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#clearOnSubtitleDataListener()"/>
        /// </summary>
        public void ClearOnSubtitleDataListener()
        {
            IExecuteWithSignature("clearOnSubtitleDataListener", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#deselectTrack(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public void DeselectTrack(int arg0)
        {
            IExecuteWithSignature("deselectTrack", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#pause()"/>
        /// </summary>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public void Pause()
        {
            IExecuteWithSignature("pause", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#prepare()"/>
        /// </summary>
        /// <exception cref="Java.Io.IOException"/>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public void Prepare()
        {
            IExecuteWithSignature("prepare", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#prepareAsync()"/>
        /// </summary>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public void PrepareAsync()
        {
            IExecuteWithSignature("prepareAsync", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#prepareDrm(java.util.UUID)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.UUID"/></param>
        /// <exception cref="Android.Media.MediaPlayer.ProvisioningNetworkErrorException"/>
        /// <exception cref="Android.Media.MediaPlayer.ProvisioningServerErrorException"/>
        /// <exception cref="Android.Media.ResourceBusyException"/>
        /// <exception cref="Android.Media.UnsupportedSchemeException"/>
        public void PrepareDrm(Java.Util.UUID arg0)
        {
            IExecuteWithSignature("prepareDrm", "(Ljava/util/UUID;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#release()"/>
        /// </summary>
        public void Release()
        {
            IExecuteWithSignature("release", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#releaseDrm()"/>
        /// </summary>
        /// <exception cref="Android.Media.MediaPlayer.NoDrmSchemeException"/>
        public void ReleaseDrm()
        {
            IExecuteWithSignature("releaseDrm", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#removeOnRoutingChangedListener(android.media.AudioRouting.OnRoutingChangedListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioRouting.OnRoutingChangedListener"/></param>
        public void RemoveOnRoutingChangedListener(Android.Media.AudioRouting.OnRoutingChangedListener arg0)
        {
            IExecuteWithSignature("removeOnRoutingChangedListener", "(Landroid/media/AudioRouting$OnRoutingChangedListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#reset()"/>
        /// </summary>
        public void Reset()
        {
            IExecuteWithSignature("reset", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#restoreKeys(byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <exception cref="Android.Media.MediaPlayer.NoDrmSchemeException"/>
        public void RestoreKeys(byte[] arg0)
        {
            IExecuteWithSignature("restoreKeys", "([B)V", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#seekTo(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public void SeekTo(int arg0)
        {
            IExecuteWithSignature("seekTo", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#seekTo(long,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SeekTo(long arg0, int arg1)
        {
            IExecute("seekTo", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#selectTrack(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public void SelectTrack(int arg0)
        {
            IExecuteWithSignature("selectTrack", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setAudioAttributes(android.media.AudioAttributes)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioAttributes"/></param>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        public void SetAudioAttributes(Android.Media.AudioAttributes arg0)
        {
            IExecuteWithSignature("setAudioAttributes", "(Landroid/media/AudioAttributes;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setAudioSessionId(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public void SetAudioSessionId(int arg0)
        {
            IExecuteWithSignature("setAudioSessionId", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setAudioStreamType(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void SetAudioStreamType(int arg0)
        {
            IExecuteWithSignature("setAudioStreamType", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setAuxEffectSendLevel(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetAuxEffectSendLevel(float arg0)
        {
            IExecuteWithSignature("setAuxEffectSendLevel", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setDataSource(android.content.Context,android.net.Uri,java.util.Map,java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg2"><see cref="Java.Util.Map"/></param>
        /// <param name="arg3"><see cref="Java.Util.List"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void SetDataSource(Android.Content.Context arg0, Android.Net.Uri arg1, Java.Util.Map<Java.Lang.String, Java.Lang.String> arg2, Java.Util.List<Java.Net.HttpCookie> arg3)
        {
            IExecute("setDataSource", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setDataSource(android.content.Context,android.net.Uri,java.util.Map)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg2"><see cref="Java.Util.Map"/></param>
        /// <exception cref="Java.Io.IOException"/>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        /// <exception cref="Java.Lang.SecurityException"/>
        public void SetDataSource(Android.Content.Context arg0, Android.Net.Uri arg1, Java.Util.Map<Java.Lang.String, Java.Lang.String> arg2)
        {
            IExecute("setDataSource", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setDataSource(android.content.Context,android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
        /// <exception cref="Java.Io.IOException"/>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        /// <exception cref="Java.Lang.SecurityException"/>
        public void SetDataSource(Android.Content.Context arg0, Android.Net.Uri arg1)
        {
            IExecute("setDataSource", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setDataSource(android.content.res.AssetFileDescriptor)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Res.AssetFileDescriptor"/></param>
        /// <exception cref="Java.Io.IOException"/>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public void SetDataSource(Android.Content.Res.AssetFileDescriptor arg0)
        {
            IExecuteWithSignature("setDataSource", "(Landroid/content/res/AssetFileDescriptor;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setDataSource(android.media.MediaDataSource)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaDataSource"/></param>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public void SetDataSource(Android.Media.MediaDataSource arg0)
        {
            IExecuteWithSignature("setDataSource", "(Landroid/media/MediaDataSource;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setDataSource(java.io.FileDescriptor,long,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.FileDescriptor"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <exception cref="Java.Io.IOException"/>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public void SetDataSource(Java.Io.FileDescriptor arg0, long arg1, long arg2)
        {
            IExecute("setDataSource", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setDataSource(java.io.FileDescriptor)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.FileDescriptor"/></param>
        /// <exception cref="Java.Io.IOException"/>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public void SetDataSource(Java.Io.FileDescriptor arg0)
        {
            IExecuteWithSignature("setDataSource", "(Ljava/io/FileDescriptor;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setDataSource(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <exception cref="Java.Io.IOException"/>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        /// <exception cref="Java.Lang.SecurityException"/>
        public void SetDataSource(Java.Lang.String arg0)
        {
            IExecuteWithSignature("setDataSource", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setDisplay(android.view.SurfaceHolder)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.SurfaceHolder"/></param>
        public void SetDisplay(Android.View.SurfaceHolder arg0)
        {
            IExecuteWithSignature("setDisplay", "(Landroid/view/SurfaceHolder;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setDrmPropertyString(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <exception cref="Android.Media.MediaPlayer.NoDrmSchemeException"/>
        public void SetDrmPropertyString(Java.Lang.String arg0, Java.Lang.String arg1)
        {
            IExecute("setDrmPropertyString", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setOnBufferingUpdateListener(android.media.MediaPlayer.OnBufferingUpdateListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaPlayer.OnBufferingUpdateListener"/></param>
        public void SetOnBufferingUpdateListener(Android.Media.MediaPlayer.OnBufferingUpdateListener arg0)
        {
            IExecuteWithSignature("setOnBufferingUpdateListener", "(Landroid/media/MediaPlayer$OnBufferingUpdateListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setOnCompletionListener(android.media.MediaPlayer.OnCompletionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaPlayer.OnCompletionListener"/></param>
        public void SetOnCompletionListener(Android.Media.MediaPlayer.OnCompletionListener arg0)
        {
            IExecuteWithSignature("setOnCompletionListener", "(Landroid/media/MediaPlayer$OnCompletionListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setOnDrmConfigHelper(android.media.MediaPlayer.OnDrmConfigHelper)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaPlayer.OnDrmConfigHelper"/></param>
        public void SetOnDrmConfigHelper(Android.Media.MediaPlayer.OnDrmConfigHelper arg0)
        {
            IExecuteWithSignature("setOnDrmConfigHelper", "(Landroid/media/MediaPlayer$OnDrmConfigHelper;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setOnDrmInfoListener(android.media.MediaPlayer.OnDrmInfoListener,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaPlayer.OnDrmInfoListener"/></param>
        /// <param name="arg1"><see cref="Android.Os.Handler"/></param>
        public void SetOnDrmInfoListener(Android.Media.MediaPlayer.OnDrmInfoListener arg0, Android.Os.Handler arg1)
        {
            IExecute("setOnDrmInfoListener", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setOnDrmInfoListener(android.media.MediaPlayer.OnDrmInfoListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaPlayer.OnDrmInfoListener"/></param>
        public void SetOnDrmInfoListener(Android.Media.MediaPlayer.OnDrmInfoListener arg0)
        {
            IExecuteWithSignature("setOnDrmInfoListener", "(Landroid/media/MediaPlayer$OnDrmInfoListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setOnDrmPreparedListener(android.media.MediaPlayer.OnDrmPreparedListener,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaPlayer.OnDrmPreparedListener"/></param>
        /// <param name="arg1"><see cref="Android.Os.Handler"/></param>
        public void SetOnDrmPreparedListener(Android.Media.MediaPlayer.OnDrmPreparedListener arg0, Android.Os.Handler arg1)
        {
            IExecute("setOnDrmPreparedListener", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setOnDrmPreparedListener(android.media.MediaPlayer.OnDrmPreparedListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaPlayer.OnDrmPreparedListener"/></param>
        public void SetOnDrmPreparedListener(Android.Media.MediaPlayer.OnDrmPreparedListener arg0)
        {
            IExecuteWithSignature("setOnDrmPreparedListener", "(Landroid/media/MediaPlayer$OnDrmPreparedListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setOnErrorListener(android.media.MediaPlayer.OnErrorListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaPlayer.OnErrorListener"/></param>
        public void SetOnErrorListener(Android.Media.MediaPlayer.OnErrorListener arg0)
        {
            IExecuteWithSignature("setOnErrorListener", "(Landroid/media/MediaPlayer$OnErrorListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setOnInfoListener(android.media.MediaPlayer.OnInfoListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaPlayer.OnInfoListener"/></param>
        public void SetOnInfoListener(Android.Media.MediaPlayer.OnInfoListener arg0)
        {
            IExecuteWithSignature("setOnInfoListener", "(Landroid/media/MediaPlayer$OnInfoListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setOnMediaTimeDiscontinuityListener(android.media.MediaPlayer.OnMediaTimeDiscontinuityListener,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaPlayer.OnMediaTimeDiscontinuityListener"/></param>
        /// <param name="arg1"><see cref="Android.Os.Handler"/></param>
        public void SetOnMediaTimeDiscontinuityListener(Android.Media.MediaPlayer.OnMediaTimeDiscontinuityListener arg0, Android.Os.Handler arg1)
        {
            IExecute("setOnMediaTimeDiscontinuityListener", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setOnMediaTimeDiscontinuityListener(android.media.MediaPlayer.OnMediaTimeDiscontinuityListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaPlayer.OnMediaTimeDiscontinuityListener"/></param>
        public void SetOnMediaTimeDiscontinuityListener(Android.Media.MediaPlayer.OnMediaTimeDiscontinuityListener arg0)
        {
            IExecuteWithSignature("setOnMediaTimeDiscontinuityListener", "(Landroid/media/MediaPlayer$OnMediaTimeDiscontinuityListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setOnPreparedListener(android.media.MediaPlayer.OnPreparedListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaPlayer.OnPreparedListener"/></param>
        public void SetOnPreparedListener(Android.Media.MediaPlayer.OnPreparedListener arg0)
        {
            IExecuteWithSignature("setOnPreparedListener", "(Landroid/media/MediaPlayer$OnPreparedListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setOnSeekCompleteListener(android.media.MediaPlayer.OnSeekCompleteListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaPlayer.OnSeekCompleteListener"/></param>
        public void SetOnSeekCompleteListener(Android.Media.MediaPlayer.OnSeekCompleteListener arg0)
        {
            IExecuteWithSignature("setOnSeekCompleteListener", "(Landroid/media/MediaPlayer$OnSeekCompleteListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setOnSubtitleDataListener(android.media.MediaPlayer.OnSubtitleDataListener,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaPlayer.OnSubtitleDataListener"/></param>
        /// <param name="arg1"><see cref="Android.Os.Handler"/></param>
        public void SetOnSubtitleDataListener(Android.Media.MediaPlayer.OnSubtitleDataListener arg0, Android.Os.Handler arg1)
        {
            IExecute("setOnSubtitleDataListener", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setOnSubtitleDataListener(android.media.MediaPlayer.OnSubtitleDataListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaPlayer.OnSubtitleDataListener"/></param>
        public void SetOnSubtitleDataListener(Android.Media.MediaPlayer.OnSubtitleDataListener arg0)
        {
            IExecuteWithSignature("setOnSubtitleDataListener", "(Landroid/media/MediaPlayer$OnSubtitleDataListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setOnTimedMetaDataAvailableListener(android.media.MediaPlayer.OnTimedMetaDataAvailableListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaPlayer.OnTimedMetaDataAvailableListener"/></param>
        public void SetOnTimedMetaDataAvailableListener(Android.Media.MediaPlayer.OnTimedMetaDataAvailableListener arg0)
        {
            IExecuteWithSignature("setOnTimedMetaDataAvailableListener", "(Landroid/media/MediaPlayer$OnTimedMetaDataAvailableListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setOnTimedTextListener(android.media.MediaPlayer.OnTimedTextListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaPlayer.OnTimedTextListener"/></param>
        public void SetOnTimedTextListener(Android.Media.MediaPlayer.OnTimedTextListener arg0)
        {
            IExecuteWithSignature("setOnTimedTextListener", "(Landroid/media/MediaPlayer$OnTimedTextListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setOnVideoSizeChangedListener(android.media.MediaPlayer.OnVideoSizeChangedListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaPlayer.OnVideoSizeChangedListener"/></param>
        public void SetOnVideoSizeChangedListener(Android.Media.MediaPlayer.OnVideoSizeChangedListener arg0)
        {
            IExecuteWithSignature("setOnVideoSizeChangedListener", "(Landroid/media/MediaPlayer$OnVideoSizeChangedListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setScreenOnWhilePlaying(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetScreenOnWhilePlaying(bool arg0)
        {
            IExecuteWithSignature("setScreenOnWhilePlaying", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setSurface(android.view.Surface)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Surface"/></param>
        public void SetSurface(Android.View.Surface arg0)
        {
            IExecuteWithSignature("setSurface", "(Landroid/view/Surface;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setVideoScalingMode(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetVideoScalingMode(int arg0)
        {
            IExecuteWithSignature("setVideoScalingMode", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setVolume(float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public void SetVolume(float arg0, float arg1)
        {
            IExecute("setVolume", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#setWakeMode(android.content.Context,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetWakeMode(Android.Content.Context arg0, int arg1)
        {
            IExecute("setWakeMode", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#start()"/>
        /// </summary>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public void Start()
        {
            IExecuteWithSignature("start", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.html#stop()"/>
        /// </summary>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public void Stop()
        {
            IExecuteWithSignature("stop", "()V");
        }

        #endregion

        #region Nested classes
        #region DrmInfo
        public partial class DrmInfo
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.DrmInfo.html#getPssh()"/>
            /// </summary>
            /// <returns><see cref="Java.Util.Map"/></returns>
            public Java.Util.Map<Java.Util.UUID, byte[]> GetPssh()
            {
                return IExecuteWithSignature<Java.Util.Map<Java.Util.UUID, byte[]>>("getPssh", "()Ljava/util/Map;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.DrmInfo.html#getSupportedSchemes()"/>
            /// </summary>
            /// <returns><see cref="Java.Util.UUID"/></returns>
            public Java.Util.UUID[] GetSupportedSchemes()
            {
                return IExecuteWithSignatureArray<Java.Util.UUID>("getSupportedSchemes", "()[Ljava/util/UUID;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region MetricsConstants
        public partial class MetricsConstants
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.MetricsConstants.html#CODEC_AUDIO"/>
            /// </summary>
            public static Java.Lang.String CODEC_AUDIO { get { if (!_CODEC_AUDIOReady) { _CODEC_AUDIOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CODEC_AUDIO"); _CODEC_AUDIOReady = true; } return _CODEC_AUDIOContent; } }
            private static Java.Lang.String _CODEC_AUDIOContent = default;
            private static bool _CODEC_AUDIOReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.MetricsConstants.html#CODEC_VIDEO"/>
            /// </summary>
            public static Java.Lang.String CODEC_VIDEO { get { if (!_CODEC_VIDEOReady) { _CODEC_VIDEOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CODEC_VIDEO"); _CODEC_VIDEOReady = true; } return _CODEC_VIDEOContent; } }
            private static Java.Lang.String _CODEC_VIDEOContent = default;
            private static bool _CODEC_VIDEOReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.MetricsConstants.html#DURATION"/>
            /// </summary>
            public static Java.Lang.String DURATION { get { if (!_DURATIONReady) { _DURATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DURATION"); _DURATIONReady = true; } return _DURATIONContent; } }
            private static Java.Lang.String _DURATIONContent = default;
            private static bool _DURATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.MetricsConstants.html#ERROR_CODE"/>
            /// </summary>
            public static Java.Lang.String ERROR_CODE { get { if (!_ERROR_CODEReady) { _ERROR_CODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ERROR_CODE"); _ERROR_CODEReady = true; } return _ERROR_CODEContent; } }
            private static Java.Lang.String _ERROR_CODEContent = default;
            private static bool _ERROR_CODEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.MetricsConstants.html#ERRORS"/>
            /// </summary>
            public static Java.Lang.String ERRORS { get { if (!_ERRORSReady) { _ERRORSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ERRORS"); _ERRORSReady = true; } return _ERRORSContent; } }
            private static Java.Lang.String _ERRORSContent = default;
            private static bool _ERRORSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.MetricsConstants.html#FRAMES"/>
            /// </summary>
            public static Java.Lang.String FRAMES { get { if (!_FRAMESReady) { _FRAMESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FRAMES"); _FRAMESReady = true; } return _FRAMESContent; } }
            private static Java.Lang.String _FRAMESContent = default;
            private static bool _FRAMESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.MetricsConstants.html#FRAMES_DROPPED"/>
            /// </summary>
            public static Java.Lang.String FRAMES_DROPPED { get { if (!_FRAMES_DROPPEDReady) { _FRAMES_DROPPEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FRAMES_DROPPED"); _FRAMES_DROPPEDReady = true; } return _FRAMES_DROPPEDContent; } }
            private static Java.Lang.String _FRAMES_DROPPEDContent = default;
            private static bool _FRAMES_DROPPEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.MetricsConstants.html#HEIGHT"/>
            /// </summary>
            public static Java.Lang.String HEIGHT { get { if (!_HEIGHTReady) { _HEIGHTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "HEIGHT"); _HEIGHTReady = true; } return _HEIGHTContent; } }
            private static Java.Lang.String _HEIGHTContent = default;
            private static bool _HEIGHTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.MetricsConstants.html#MIME_TYPE_AUDIO"/>
            /// </summary>
            public static Java.Lang.String MIME_TYPE_AUDIO { get { if (!_MIME_TYPE_AUDIOReady) { _MIME_TYPE_AUDIOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIME_TYPE_AUDIO"); _MIME_TYPE_AUDIOReady = true; } return _MIME_TYPE_AUDIOContent; } }
            private static Java.Lang.String _MIME_TYPE_AUDIOContent = default;
            private static bool _MIME_TYPE_AUDIOReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.MetricsConstants.html#MIME_TYPE_VIDEO"/>
            /// </summary>
            public static Java.Lang.String MIME_TYPE_VIDEO { get { if (!_MIME_TYPE_VIDEOReady) { _MIME_TYPE_VIDEOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIME_TYPE_VIDEO"); _MIME_TYPE_VIDEOReady = true; } return _MIME_TYPE_VIDEOContent; } }
            private static Java.Lang.String _MIME_TYPE_VIDEOContent = default;
            private static bool _MIME_TYPE_VIDEOReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.MetricsConstants.html#PLAYING"/>
            /// </summary>
            public static Java.Lang.String PLAYING { get { if (!_PLAYINGReady) { _PLAYINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PLAYING"); _PLAYINGReady = true; } return _PLAYINGContent; } }
            private static Java.Lang.String _PLAYINGContent = default;
            private static bool _PLAYINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.MetricsConstants.html#WIDTH"/>
            /// </summary>
            public static Java.Lang.String WIDTH { get { if (!_WIDTHReady) { _WIDTHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIDTH"); _WIDTHReady = true; } return _WIDTHContent; } }
            private static Java.Lang.String _WIDTHContent = default;
            private static bool _WIDTHReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region NoDrmSchemeException
        public partial class NoDrmSchemeException
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnBufferingUpdateListener
        public partial class OnBufferingUpdateListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnBufferingUpdateListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onBufferingUpdate", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Media.MediaPlayer>>>(OnBufferingUpdateEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/MediaPlayer.OnBufferingUpdateListener.html#onBufferingUpdate(android.media.MediaPlayer,int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnBufferingUpdate"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Media.MediaPlayer, int> OnOnBufferingUpdate { get; set; } = null;

            void OnBufferingUpdateEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Media.MediaPlayer>> data)
            {
                var methodToExecute = (OnOnBufferingUpdate != null) ? OnOnBufferingUpdate : OnBufferingUpdate;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.OnBufferingUpdateListener.html#onBufferingUpdate(android.media.MediaPlayer,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaPlayer"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public virtual void OnBufferingUpdate(Android.Media.MediaPlayer arg0, int arg1)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnBufferingUpdateListenerDirect
        public partial class OnBufferingUpdateListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.OnBufferingUpdateListener.html#onBufferingUpdate(android.media.MediaPlayer,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaPlayer"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public override void OnBufferingUpdate(Android.Media.MediaPlayer arg0, int arg1)
            {
                IExecute("onBufferingUpdate", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnCompletionListener
        public partial class OnCompletionListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnCompletionListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onCompletion", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Media.MediaPlayer>>>(OnCompletionEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/MediaPlayer.OnCompletionListener.html#onCompletion(android.media.MediaPlayer)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnCompletion"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Media.MediaPlayer> OnOnCompletion { get; set; } = null;

            void OnCompletionEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Media.MediaPlayer>> data)
            {
                var methodToExecute = (OnOnCompletion != null) ? OnOnCompletion : OnCompletion;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.OnCompletionListener.html#onCompletion(android.media.MediaPlayer)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaPlayer"/></param>
            public virtual void OnCompletion(Android.Media.MediaPlayer arg0)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnCompletionListenerDirect
        public partial class OnCompletionListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.OnCompletionListener.html#onCompletion(android.media.MediaPlayer)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaPlayer"/></param>
            public override void OnCompletion(Android.Media.MediaPlayer arg0)
            {
                IExecuteWithSignature("onCompletion", "(Landroid/media/MediaPlayer;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnDrmConfigHelper
        public partial class OnDrmConfigHelper
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.OnDrmConfigHelper.html#onDrmConfig(android.media.MediaPlayer)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaPlayer"/></param>
            public void OnDrmConfig(Android.Media.MediaPlayer arg0)
            {
                IExecuteWithSignature("onDrmConfig", "(Landroid/media/MediaPlayer;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnDrmInfoListener
        public partial class OnDrmInfoListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnDrmInfoListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onDrmInfo", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Media.MediaPlayer>>>(OnDrmInfoEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/MediaPlayer.OnDrmInfoListener.html#onDrmInfo(android.media.MediaPlayer,android.media.MediaPlayer.DrmInfo)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnDrmInfo"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Media.MediaPlayer, Android.Media.MediaPlayer.DrmInfo> OnOnDrmInfo { get; set; } = null;

            void OnDrmInfoEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Media.MediaPlayer>> data)
            {
                var methodToExecute = (OnOnDrmInfo != null) ? OnOnDrmInfo : OnDrmInfo;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.Media.MediaPlayer.DrmInfo>(0));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.OnDrmInfoListener.html#onDrmInfo(android.media.MediaPlayer,android.media.MediaPlayer.DrmInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaPlayer"/></param>
            /// <param name="arg1"><see cref="Android.Media.MediaPlayer.DrmInfo"/></param>
            public virtual void OnDrmInfo(Android.Media.MediaPlayer arg0, Android.Media.MediaPlayer.DrmInfo arg1)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnDrmInfoListenerDirect
        public partial class OnDrmInfoListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.OnDrmInfoListener.html#onDrmInfo(android.media.MediaPlayer,android.media.MediaPlayer.DrmInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaPlayer"/></param>
            /// <param name="arg1"><see cref="Android.Media.MediaPlayer.DrmInfo"/></param>
            public override void OnDrmInfo(Android.Media.MediaPlayer arg0, Android.Media.MediaPlayer.DrmInfo arg1)
            {
                IExecute("onDrmInfo", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnDrmPreparedListener
        public partial class OnDrmPreparedListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnDrmPreparedListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onDrmPrepared", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Media.MediaPlayer>>>(OnDrmPreparedEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/MediaPlayer.OnDrmPreparedListener.html#onDrmPrepared(android.media.MediaPlayer,int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnDrmPrepared"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Media.MediaPlayer, int> OnOnDrmPrepared { get; set; } = null;

            void OnDrmPreparedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Media.MediaPlayer>> data)
            {
                var methodToExecute = (OnOnDrmPrepared != null) ? OnOnDrmPrepared : OnDrmPrepared;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.OnDrmPreparedListener.html#onDrmPrepared(android.media.MediaPlayer,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaPlayer"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public virtual void OnDrmPrepared(Android.Media.MediaPlayer arg0, int arg1)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnDrmPreparedListenerDirect
        public partial class OnDrmPreparedListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.OnDrmPreparedListener.html#onDrmPrepared(android.media.MediaPlayer,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaPlayer"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public override void OnDrmPrepared(Android.Media.MediaPlayer arg0, int arg1)
            {
                IExecute("onDrmPrepared", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnErrorListener
        public partial class OnErrorListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnErrorListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onError", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Media.MediaPlayer>>>(OnErrorEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/MediaPlayer.OnErrorListener.html#onError(android.media.MediaPlayer,int,int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnError"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<Android.Media.MediaPlayer, int, int, bool> OnOnError { get; set; } = null;

            void OnErrorEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Media.MediaPlayer>> data)
            {
                var methodToExecute = (OnOnError != null) ? OnOnError : OnError;
                var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<int>(1));
                data.SetReturnValue(executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.OnErrorListener.html#onError(android.media.MediaPlayer,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaPlayer"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnError(Android.Media.MediaPlayer arg0, int arg1, int arg2)
            {
                return default;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnErrorListenerDirect
        public partial class OnErrorListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.OnErrorListener.html#onError(android.media.MediaPlayer,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaPlayer"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnError(Android.Media.MediaPlayer arg0, int arg1, int arg2)
            {
                return IExecute<bool>("onError", arg0, arg1, arg2);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnInfoListener
        public partial class OnInfoListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnInfoListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onInfo", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Media.MediaPlayer>>>(OnInfoEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/MediaPlayer.OnInfoListener.html#onInfo(android.media.MediaPlayer,int,int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnInfo"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<Android.Media.MediaPlayer, int, int, bool> OnOnInfo { get; set; } = null;

            void OnInfoEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Media.MediaPlayer>> data)
            {
                var methodToExecute = (OnOnInfo != null) ? OnOnInfo : OnInfo;
                var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<int>(1));
                data.SetReturnValue(executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.OnInfoListener.html#onInfo(android.media.MediaPlayer,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaPlayer"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnInfo(Android.Media.MediaPlayer arg0, int arg1, int arg2)
            {
                return default;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnInfoListenerDirect
        public partial class OnInfoListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.OnInfoListener.html#onInfo(android.media.MediaPlayer,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaPlayer"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnInfo(Android.Media.MediaPlayer arg0, int arg1, int arg2)
            {
                return IExecute<bool>("onInfo", arg0, arg1, arg2);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnMediaTimeDiscontinuityListener
        public partial class OnMediaTimeDiscontinuityListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnMediaTimeDiscontinuityListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onMediaTimeDiscontinuity", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Media.MediaPlayer>>>(OnMediaTimeDiscontinuityEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/MediaPlayer.OnMediaTimeDiscontinuityListener.html#onMediaTimeDiscontinuity(android.media.MediaPlayer,android.media.MediaTimestamp)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnMediaTimeDiscontinuity"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Media.MediaPlayer, Android.Media.MediaTimestamp> OnOnMediaTimeDiscontinuity { get; set; } = null;

            void OnMediaTimeDiscontinuityEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Media.MediaPlayer>> data)
            {
                var methodToExecute = (OnOnMediaTimeDiscontinuity != null) ? OnOnMediaTimeDiscontinuity : OnMediaTimeDiscontinuity;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.Media.MediaTimestamp>(0));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.OnMediaTimeDiscontinuityListener.html#onMediaTimeDiscontinuity(android.media.MediaPlayer,android.media.MediaTimestamp)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaPlayer"/></param>
            /// <param name="arg1"><see cref="Android.Media.MediaTimestamp"/></param>
            public virtual void OnMediaTimeDiscontinuity(Android.Media.MediaPlayer arg0, Android.Media.MediaTimestamp arg1)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnMediaTimeDiscontinuityListenerDirect
        public partial class OnMediaTimeDiscontinuityListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.OnMediaTimeDiscontinuityListener.html#onMediaTimeDiscontinuity(android.media.MediaPlayer,android.media.MediaTimestamp)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaPlayer"/></param>
            /// <param name="arg1"><see cref="Android.Media.MediaTimestamp"/></param>
            public override void OnMediaTimeDiscontinuity(Android.Media.MediaPlayer arg0, Android.Media.MediaTimestamp arg1)
            {
                IExecute("onMediaTimeDiscontinuity", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnPreparedListener
        public partial class OnPreparedListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnPreparedListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onPrepared", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Media.MediaPlayer>>>(OnPreparedEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/MediaPlayer.OnPreparedListener.html#onPrepared(android.media.MediaPlayer)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnPrepared"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Media.MediaPlayer> OnOnPrepared { get; set; } = null;

            void OnPreparedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Media.MediaPlayer>> data)
            {
                var methodToExecute = (OnOnPrepared != null) ? OnOnPrepared : OnPrepared;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.OnPreparedListener.html#onPrepared(android.media.MediaPlayer)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaPlayer"/></param>
            public virtual void OnPrepared(Android.Media.MediaPlayer arg0)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnPreparedListenerDirect
        public partial class OnPreparedListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.OnPreparedListener.html#onPrepared(android.media.MediaPlayer)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaPlayer"/></param>
            public override void OnPrepared(Android.Media.MediaPlayer arg0)
            {
                IExecuteWithSignature("onPrepared", "(Landroid/media/MediaPlayer;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnSeekCompleteListener
        public partial class OnSeekCompleteListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnSeekCompleteListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onSeekComplete", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Media.MediaPlayer>>>(OnSeekCompleteEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/MediaPlayer.OnSeekCompleteListener.html#onSeekComplete(android.media.MediaPlayer)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnSeekComplete"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Media.MediaPlayer> OnOnSeekComplete { get; set; } = null;

            void OnSeekCompleteEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Media.MediaPlayer>> data)
            {
                var methodToExecute = (OnOnSeekComplete != null) ? OnOnSeekComplete : OnSeekComplete;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.OnSeekCompleteListener.html#onSeekComplete(android.media.MediaPlayer)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaPlayer"/></param>
            public virtual void OnSeekComplete(Android.Media.MediaPlayer arg0)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnSeekCompleteListenerDirect
        public partial class OnSeekCompleteListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.OnSeekCompleteListener.html#onSeekComplete(android.media.MediaPlayer)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaPlayer"/></param>
            public override void OnSeekComplete(Android.Media.MediaPlayer arg0)
            {
                IExecuteWithSignature("onSeekComplete", "(Landroid/media/MediaPlayer;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnSubtitleDataListener
        public partial class OnSubtitleDataListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnSubtitleDataListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onSubtitleData", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Media.MediaPlayer>>>(OnSubtitleDataEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/MediaPlayer.OnSubtitleDataListener.html#onSubtitleData(android.media.MediaPlayer,android.media.SubtitleData)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnSubtitleData"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Media.MediaPlayer, Android.Media.SubtitleData> OnOnSubtitleData { get; set; } = null;

            void OnSubtitleDataEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Media.MediaPlayer>> data)
            {
                var methodToExecute = (OnOnSubtitleData != null) ? OnOnSubtitleData : OnSubtitleData;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.Media.SubtitleData>(0));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.OnSubtitleDataListener.html#onSubtitleData(android.media.MediaPlayer,android.media.SubtitleData)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaPlayer"/></param>
            /// <param name="arg1"><see cref="Android.Media.SubtitleData"/></param>
            public virtual void OnSubtitleData(Android.Media.MediaPlayer arg0, Android.Media.SubtitleData arg1)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnSubtitleDataListenerDirect
        public partial class OnSubtitleDataListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.OnSubtitleDataListener.html#onSubtitleData(android.media.MediaPlayer,android.media.SubtitleData)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaPlayer"/></param>
            /// <param name="arg1"><see cref="Android.Media.SubtitleData"/></param>
            public override void OnSubtitleData(Android.Media.MediaPlayer arg0, Android.Media.SubtitleData arg1)
            {
                IExecute("onSubtitleData", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnTimedMetaDataAvailableListener
        public partial class OnTimedMetaDataAvailableListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnTimedMetaDataAvailableListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onTimedMetaDataAvailable", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Media.MediaPlayer>>>(OnTimedMetaDataAvailableEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/MediaPlayer.OnTimedMetaDataAvailableListener.html#onTimedMetaDataAvailable(android.media.MediaPlayer,android.media.TimedMetaData)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnTimedMetaDataAvailable"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Media.MediaPlayer, Android.Media.TimedMetaData> OnOnTimedMetaDataAvailable { get; set; } = null;

            void OnTimedMetaDataAvailableEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Media.MediaPlayer>> data)
            {
                var methodToExecute = (OnOnTimedMetaDataAvailable != null) ? OnOnTimedMetaDataAvailable : OnTimedMetaDataAvailable;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.Media.TimedMetaData>(0));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.OnTimedMetaDataAvailableListener.html#onTimedMetaDataAvailable(android.media.MediaPlayer,android.media.TimedMetaData)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaPlayer"/></param>
            /// <param name="arg1"><see cref="Android.Media.TimedMetaData"/></param>
            public virtual void OnTimedMetaDataAvailable(Android.Media.MediaPlayer arg0, Android.Media.TimedMetaData arg1)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnTimedMetaDataAvailableListenerDirect
        public partial class OnTimedMetaDataAvailableListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.OnTimedMetaDataAvailableListener.html#onTimedMetaDataAvailable(android.media.MediaPlayer,android.media.TimedMetaData)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaPlayer"/></param>
            /// <param name="arg1"><see cref="Android.Media.TimedMetaData"/></param>
            public override void OnTimedMetaDataAvailable(Android.Media.MediaPlayer arg0, Android.Media.TimedMetaData arg1)
            {
                IExecute("onTimedMetaDataAvailable", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnTimedTextListener
        public partial class OnTimedTextListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnTimedTextListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onTimedText", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Media.MediaPlayer>>>(OnTimedTextEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/MediaPlayer.OnTimedTextListener.html#onTimedText(android.media.MediaPlayer,android.media.TimedText)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnTimedText"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Media.MediaPlayer, Android.Media.TimedText> OnOnTimedText { get; set; } = null;

            void OnTimedTextEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Media.MediaPlayer>> data)
            {
                var methodToExecute = (OnOnTimedText != null) ? OnOnTimedText : OnTimedText;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.Media.TimedText>(0));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.OnTimedTextListener.html#onTimedText(android.media.MediaPlayer,android.media.TimedText)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaPlayer"/></param>
            /// <param name="arg1"><see cref="Android.Media.TimedText"/></param>
            public virtual void OnTimedText(Android.Media.MediaPlayer arg0, Android.Media.TimedText arg1)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnTimedTextListenerDirect
        public partial class OnTimedTextListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.OnTimedTextListener.html#onTimedText(android.media.MediaPlayer,android.media.TimedText)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaPlayer"/></param>
            /// <param name="arg1"><see cref="Android.Media.TimedText"/></param>
            public override void OnTimedText(Android.Media.MediaPlayer arg0, Android.Media.TimedText arg1)
            {
                IExecute("onTimedText", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnVideoSizeChangedListener
        public partial class OnVideoSizeChangedListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnVideoSizeChangedListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onVideoSizeChanged", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Media.MediaPlayer>>>(OnVideoSizeChangedEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/MediaPlayer.OnVideoSizeChangedListener.html#onVideoSizeChanged(android.media.MediaPlayer,int,int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnVideoSizeChanged"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Media.MediaPlayer, int, int> OnOnVideoSizeChanged { get; set; } = null;

            void OnVideoSizeChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Media.MediaPlayer>> data)
            {
                var methodToExecute = (OnOnVideoSizeChanged != null) ? OnOnVideoSizeChanged : OnVideoSizeChanged;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<int>(1));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.OnVideoSizeChangedListener.html#onVideoSizeChanged(android.media.MediaPlayer,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaPlayer"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            public virtual void OnVideoSizeChanged(Android.Media.MediaPlayer arg0, int arg1, int arg2)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnVideoSizeChangedListenerDirect
        public partial class OnVideoSizeChangedListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.OnVideoSizeChangedListener.html#onVideoSizeChanged(android.media.MediaPlayer,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaPlayer"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            public override void OnVideoSizeChanged(Android.Media.MediaPlayer arg0, int arg1, int arg2)
            {
                IExecute("onVideoSizeChanged", arg0, arg1, arg2);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ProvisioningNetworkErrorException
        public partial class ProvisioningNetworkErrorException
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ProvisioningServerErrorException
        public partial class ProvisioningServerErrorException
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region TrackInfo
        public partial class TrackInfo
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.TrackInfo.html#MEDIA_TRACK_TYPE_AUDIO"/>
            /// </summary>
            public static int MEDIA_TRACK_TYPE_AUDIO { get { if (!_MEDIA_TRACK_TYPE_AUDIOReady) { _MEDIA_TRACK_TYPE_AUDIOContent = SGetField<int>(LocalBridgeClazz, "MEDIA_TRACK_TYPE_AUDIO"); _MEDIA_TRACK_TYPE_AUDIOReady = true; } return _MEDIA_TRACK_TYPE_AUDIOContent; } }
            private static int _MEDIA_TRACK_TYPE_AUDIOContent = default;
            private static bool _MEDIA_TRACK_TYPE_AUDIOReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.TrackInfo.html#MEDIA_TRACK_TYPE_METADATA"/>
            /// </summary>
            public static int MEDIA_TRACK_TYPE_METADATA { get { if (!_MEDIA_TRACK_TYPE_METADATAReady) { _MEDIA_TRACK_TYPE_METADATAContent = SGetField<int>(LocalBridgeClazz, "MEDIA_TRACK_TYPE_METADATA"); _MEDIA_TRACK_TYPE_METADATAReady = true; } return _MEDIA_TRACK_TYPE_METADATAContent; } }
            private static int _MEDIA_TRACK_TYPE_METADATAContent = default;
            private static bool _MEDIA_TRACK_TYPE_METADATAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.TrackInfo.html#MEDIA_TRACK_TYPE_SUBTITLE"/>
            /// </summary>
            public static int MEDIA_TRACK_TYPE_SUBTITLE { get { if (!_MEDIA_TRACK_TYPE_SUBTITLEReady) { _MEDIA_TRACK_TYPE_SUBTITLEContent = SGetField<int>(LocalBridgeClazz, "MEDIA_TRACK_TYPE_SUBTITLE"); _MEDIA_TRACK_TYPE_SUBTITLEReady = true; } return _MEDIA_TRACK_TYPE_SUBTITLEContent; } }
            private static int _MEDIA_TRACK_TYPE_SUBTITLEContent = default;
            private static bool _MEDIA_TRACK_TYPE_SUBTITLEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.TrackInfo.html#MEDIA_TRACK_TYPE_TIMEDTEXT"/>
            /// </summary>
            public static int MEDIA_TRACK_TYPE_TIMEDTEXT { get { if (!_MEDIA_TRACK_TYPE_TIMEDTEXTReady) { _MEDIA_TRACK_TYPE_TIMEDTEXTContent = SGetField<int>(LocalBridgeClazz, "MEDIA_TRACK_TYPE_TIMEDTEXT"); _MEDIA_TRACK_TYPE_TIMEDTEXTReady = true; } return _MEDIA_TRACK_TYPE_TIMEDTEXTContent; } }
            private static int _MEDIA_TRACK_TYPE_TIMEDTEXTContent = default;
            private static bool _MEDIA_TRACK_TYPE_TIMEDTEXTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.TrackInfo.html#MEDIA_TRACK_TYPE_UNKNOWN"/>
            /// </summary>
            public static int MEDIA_TRACK_TYPE_UNKNOWN { get { if (!_MEDIA_TRACK_TYPE_UNKNOWNReady) { _MEDIA_TRACK_TYPE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "MEDIA_TRACK_TYPE_UNKNOWN"); _MEDIA_TRACK_TYPE_UNKNOWNReady = true; } return _MEDIA_TRACK_TYPE_UNKNOWNContent; } }
            private static int _MEDIA_TRACK_TYPE_UNKNOWNContent = default;
            private static bool _MEDIA_TRACK_TYPE_UNKNOWNReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.TrackInfo.html#MEDIA_TRACK_TYPE_VIDEO"/>
            /// </summary>
            public static int MEDIA_TRACK_TYPE_VIDEO { get { if (!_MEDIA_TRACK_TYPE_VIDEOReady) { _MEDIA_TRACK_TYPE_VIDEOContent = SGetField<int>(LocalBridgeClazz, "MEDIA_TRACK_TYPE_VIDEO"); _MEDIA_TRACK_TYPE_VIDEOReady = true; } return _MEDIA_TRACK_TYPE_VIDEOContent; } }
            private static int _MEDIA_TRACK_TYPE_VIDEOContent = default;
            private static bool _MEDIA_TRACK_TYPE_VIDEOReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.TrackInfo.html#getFormat()"/>
            /// </summary>
            /// <returns><see cref="Android.Media.MediaFormat"/></returns>
            public Android.Media.MediaFormat GetFormat()
            {
                return IExecuteWithSignature<Android.Media.MediaFormat>("getFormat", "()Landroid/media/MediaFormat;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.TrackInfo.html#describeContents()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int DescribeContents()
            {
                return IExecuteWithSignature<int>("describeContents", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.TrackInfo.html#getTrackType()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetTrackType()
            {
                return IExecuteWithSignature<int>("getTrackType", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.TrackInfo.html#getLanguage()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetLanguage()
            {
                return IExecuteWithSignature<Java.Lang.String>("getLanguage", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaPlayer.TrackInfo.html#writeToParcel(android.os.Parcel,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
            {
                IExecute("writeToParcel", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media
{
    #region AudioRecord
    public partial class AudioRecord : Android.Media.IAudioRouting, Android.Media.IMicrophoneDirection, Android.Media.IAudioRecordingMonitor
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#%3Cinit%3E(int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        public AudioRecord(int arg0, int arg1, int arg2, int arg3, int arg4)
            : base(arg0, arg1, arg2, arg3, arg4)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Android.Media.AudioRecord"/> to <see cref="Android.Media.AudioRouting"/>
        /// </summary>
        public static implicit operator Android.Media.AudioRouting(Android.Media.AudioRecord t) => t.Cast<Android.Media.AudioRouting>();
        /// <summary>
        /// Converter from <see cref="Android.Media.AudioRecord"/> to <see cref="Android.Media.MicrophoneDirection"/>
        /// </summary>
        public static implicit operator Android.Media.MicrophoneDirection(Android.Media.AudioRecord t) => t.Cast<Android.Media.MicrophoneDirection>();
        /// <summary>
        /// Converter from <see cref="Android.Media.AudioRecord"/> to <see cref="Android.Media.AudioRecordingMonitor"/>
        /// </summary>
        public static implicit operator Android.Media.AudioRecordingMonitor(Android.Media.AudioRecord t) => t.Cast<Android.Media.AudioRecordingMonitor>();

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#ERROR"/>
        /// </summary>
        public static int ERROR { get { if (!_ERRORReady) { _ERRORContent = SGetField<int>(LocalBridgeClazz, "ERROR"); _ERRORReady = true; } return _ERRORContent; } }
        private static int _ERRORContent = default;
        private static bool _ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#ERROR_BAD_VALUE"/>
        /// </summary>
        public static int ERROR_BAD_VALUE { get { if (!_ERROR_BAD_VALUEReady) { _ERROR_BAD_VALUEContent = SGetField<int>(LocalBridgeClazz, "ERROR_BAD_VALUE"); _ERROR_BAD_VALUEReady = true; } return _ERROR_BAD_VALUEContent; } }
        private static int _ERROR_BAD_VALUEContent = default;
        private static bool _ERROR_BAD_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#ERROR_DEAD_OBJECT"/>
        /// </summary>
        public static int ERROR_DEAD_OBJECT { get { if (!_ERROR_DEAD_OBJECTReady) { _ERROR_DEAD_OBJECTContent = SGetField<int>(LocalBridgeClazz, "ERROR_DEAD_OBJECT"); _ERROR_DEAD_OBJECTReady = true; } return _ERROR_DEAD_OBJECTContent; } }
        private static int _ERROR_DEAD_OBJECTContent = default;
        private static bool _ERROR_DEAD_OBJECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#ERROR_INVALID_OPERATION"/>
        /// </summary>
        public static int ERROR_INVALID_OPERATION { get { if (!_ERROR_INVALID_OPERATIONReady) { _ERROR_INVALID_OPERATIONContent = SGetField<int>(LocalBridgeClazz, "ERROR_INVALID_OPERATION"); _ERROR_INVALID_OPERATIONReady = true; } return _ERROR_INVALID_OPERATIONContent; } }
        private static int _ERROR_INVALID_OPERATIONContent = default;
        private static bool _ERROR_INVALID_OPERATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#READ_BLOCKING"/>
        /// </summary>
        public static int READ_BLOCKING { get { if (!_READ_BLOCKINGReady) { _READ_BLOCKINGContent = SGetField<int>(LocalBridgeClazz, "READ_BLOCKING"); _READ_BLOCKINGReady = true; } return _READ_BLOCKINGContent; } }
        private static int _READ_BLOCKINGContent = default;
        private static bool _READ_BLOCKINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#READ_NON_BLOCKING"/>
        /// </summary>
        public static int READ_NON_BLOCKING { get { if (!_READ_NON_BLOCKINGReady) { _READ_NON_BLOCKINGContent = SGetField<int>(LocalBridgeClazz, "READ_NON_BLOCKING"); _READ_NON_BLOCKINGReady = true; } return _READ_NON_BLOCKINGContent; } }
        private static int _READ_NON_BLOCKINGContent = default;
        private static bool _READ_NON_BLOCKINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#RECORDSTATE_RECORDING"/>
        /// </summary>
        public static int RECORDSTATE_RECORDING { get { if (!_RECORDSTATE_RECORDINGReady) { _RECORDSTATE_RECORDINGContent = SGetField<int>(LocalBridgeClazz, "RECORDSTATE_RECORDING"); _RECORDSTATE_RECORDINGReady = true; } return _RECORDSTATE_RECORDINGContent; } }
        private static int _RECORDSTATE_RECORDINGContent = default;
        private static bool _RECORDSTATE_RECORDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#RECORDSTATE_STOPPED"/>
        /// </summary>
        public static int RECORDSTATE_STOPPED { get { if (!_RECORDSTATE_STOPPEDReady) { _RECORDSTATE_STOPPEDContent = SGetField<int>(LocalBridgeClazz, "RECORDSTATE_STOPPED"); _RECORDSTATE_STOPPEDReady = true; } return _RECORDSTATE_STOPPEDContent; } }
        private static int _RECORDSTATE_STOPPEDContent = default;
        private static bool _RECORDSTATE_STOPPEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#STATE_INITIALIZED"/>
        /// </summary>
        public static int STATE_INITIALIZED { get { if (!_STATE_INITIALIZEDReady) { _STATE_INITIALIZEDContent = SGetField<int>(LocalBridgeClazz, "STATE_INITIALIZED"); _STATE_INITIALIZEDReady = true; } return _STATE_INITIALIZEDContent; } }
        private static int _STATE_INITIALIZEDContent = default;
        private static bool _STATE_INITIALIZEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#STATE_UNINITIALIZED"/>
        /// </summary>
        public static int STATE_UNINITIALIZED { get { if (!_STATE_UNINITIALIZEDReady) { _STATE_UNINITIALIZEDContent = SGetField<int>(LocalBridgeClazz, "STATE_UNINITIALIZED"); _STATE_UNINITIALIZEDReady = true; } return _STATE_UNINITIALIZEDContent; } }
        private static int _STATE_UNINITIALIZEDContent = default;
        private static bool _STATE_UNINITIALIZEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#SUCCESS"/>
        /// </summary>
        public static int SUCCESS { get { if (!_SUCCESSReady) { _SUCCESSContent = SGetField<int>(LocalBridgeClazz, "SUCCESS"); _SUCCESSReady = true; } return _SUCCESSContent; } }
        private static int _SUCCESSContent = default;
        private static bool _SUCCESSReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#getMinBufferSize(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GetMinBufferSize(int arg0, int arg1, int arg2)
        {
            return SExecute<int>(LocalBridgeClazz, "getMinBufferSize", arg0, arg1, arg2);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#getActiveMicrophones()"/> 
        /// </summary>
        public Java.Util.List<Android.Media.MicrophoneInfo> ActiveMicrophones
        {
            get { return IExecuteWithSignature<Java.Util.List<Android.Media.MicrophoneInfo>>("getActiveMicrophones", "()Ljava/util/List;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#getActiveRecordingConfiguration()"/> 
        /// </summary>
        public Android.Media.AudioRecordingConfiguration ActiveRecordingConfiguration
        {
            get { return IExecuteWithSignature<Android.Media.AudioRecordingConfiguration>("getActiveRecordingConfiguration", "()Landroid/media/AudioRecordingConfiguration;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#getAudioFormat()"/> 
        /// </summary>
        public int AudioFormat
        {
            get { return IExecuteWithSignature<int>("getAudioFormat", "()I"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#getAudioSessionId()"/> 
        /// </summary>
        public int AudioSessionId
        {
            get { return IExecuteWithSignature<int>("getAudioSessionId", "()I"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#getAudioSource()"/> 
        /// </summary>
        public int AudioSource
        {
            get { return IExecuteWithSignature<int>("getAudioSource", "()I"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#getBufferSizeInFrames()"/> 
        /// </summary>
        public int BufferSizeInFrames
        {
            get { return IExecuteWithSignature<int>("getBufferSizeInFrames", "()I"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#getChannelConfiguration()"/> 
        /// </summary>
        public int ChannelConfiguration
        {
            get { return IExecuteWithSignature<int>("getChannelConfiguration", "()I"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#getChannelCount()"/> 
        /// </summary>
        public int ChannelCount
        {
            get { return IExecuteWithSignature<int>("getChannelCount", "()I"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#getFormat()"/> 
        /// </summary>
        public Android.Media.AudioFormat Format
        {
            get { return IExecuteWithSignature<Android.Media.AudioFormat>("getFormat", "()Landroid/media/AudioFormat;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#getLogSessionId()"/> <see href="https://developer.android.com/reference/android/media/AudioRecord.html#setLogSessionId(android.media.metrics.LogSessionId)"/>
        /// </summary>
        public Android.Media.Metrics.LogSessionId LogSessionId
        {
            get { return IExecuteWithSignature<Android.Media.Metrics.LogSessionId>("getLogSessionId", "()Landroid/media/metrics/LogSessionId;"); } set { IExecuteWithSignature("setLogSessionId", "(Landroid/media/metrics/LogSessionId;)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#getMetrics()"/> 
        /// </summary>
        public Android.Os.PersistableBundle Metrics
        {
            get { return IExecuteWithSignature<Android.Os.PersistableBundle>("getMetrics", "()Landroid/os/PersistableBundle;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#getNotificationMarkerPosition()"/> 
        /// </summary>
        public int NotificationMarkerPosition
        {
            get { return IExecuteWithSignature<int>("getNotificationMarkerPosition", "()I"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#getPositionNotificationPeriod()"/> 
        /// </summary>
        public int PositionNotificationPeriod
        {
            get { return IExecuteWithSignature<int>("getPositionNotificationPeriod", "()I"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#getPreferredDevice()"/> 
        /// </summary>
        public Android.Media.AudioDeviceInfo PreferredDevice
        {
            get { return IExecuteWithSignature<Android.Media.AudioDeviceInfo>("getPreferredDevice", "()Landroid/media/AudioDeviceInfo;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#getRecordingState()"/> 
        /// </summary>
        public int RecordingState
        {
            get { return IExecuteWithSignature<int>("getRecordingState", "()I"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#getRoutedDevice()"/> 
        /// </summary>
        public Android.Media.AudioDeviceInfo RoutedDevice
        {
            get { return IExecuteWithSignature<Android.Media.AudioDeviceInfo>("getRoutedDevice", "()Landroid/media/AudioDeviceInfo;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#getSampleRate()"/> 
        /// </summary>
        public int SampleRate
        {
            get { return IExecuteWithSignature<int>("getSampleRate", "()I"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#getState()"/> 
        /// </summary>
        public int State
        {
            get { return IExecuteWithSignature<int>("getState", "()I"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#isPrivacySensitive()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsPrivacySensitive()
        {
            return IExecuteWithSignature<bool>("isPrivacySensitive", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#setPreferredDevice(android.media.AudioDeviceInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioDeviceInfo"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetPreferredDevice(Android.Media.AudioDeviceInfo arg0)
        {
            return IExecuteWithSignature<bool>("setPreferredDevice", "(Landroid/media/AudioDeviceInfo;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#setPreferredMicrophoneDirection(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetPreferredMicrophoneDirection(int arg0)
        {
            return IExecuteWithSignature<bool>("setPreferredMicrophoneDirection", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#setPreferredMicrophoneFieldDimension(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetPreferredMicrophoneFieldDimension(float arg0)
        {
            return IExecuteWithSignature<bool>("setPreferredMicrophoneFieldDimension", "(F)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#getTimestamp(android.media.AudioTimestamp,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioTimestamp"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetTimestamp(Android.Media.AudioTimestamp arg0, int arg1)
        {
            return IExecute<int>("getTimestamp", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#read(byte[],int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int Read(byte[] arg0, int arg1, int arg2, int arg3)
        {
            return IExecute<int>("read", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#read(byte[],int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int Read(byte[] arg0, int arg1, int arg2)
        {
            return IExecute<int>("read", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#read(float[],int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int Read(float[] arg0, int arg1, int arg2, int arg3)
        {
            return IExecute<int>("read", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#read(java.nio.ByteBuffer,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int Read(Java.Nio.ByteBuffer arg0, int arg1, int arg2)
        {
            return IExecute<int>("read", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#read(java.nio.ByteBuffer,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int Read(Java.Nio.ByteBuffer arg0, int arg1)
        {
            return IExecute<int>("read", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#read(short[],int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="short"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int Read(short[] arg0, int arg1, int arg2, int arg3)
        {
            return IExecute<int>("read", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#read(short[],int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="short"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int Read(short[] arg0, int arg1, int arg2)
        {
            return IExecute<int>("read", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#setNotificationMarkerPosition(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int SetNotificationMarkerPosition(int arg0)
        {
            return IExecuteWithSignature<int>("setNotificationMarkerPosition", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#setPositionNotificationPeriod(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int SetPositionNotificationPeriod(int arg0)
        {
            return IExecuteWithSignature<int>("setPositionNotificationPeriod", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#addOnRoutingChangedListener(android.media.AudioRecord.OnRoutingChangedListener,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioRecord.OnRoutingChangedListener"/></param>
        /// <param name="arg1"><see cref="Android.Os.Handler"/></param>
        [System.Obsolete()]
        public void AddOnRoutingChangedListener(Android.Media.AudioRecord.OnRoutingChangedListener arg0, Android.Os.Handler arg1)
        {
            IExecute("addOnRoutingChangedListener", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#addOnRoutingChangedListener(android.media.AudioRouting.OnRoutingChangedListener,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioRouting.OnRoutingChangedListener"/></param>
        /// <param name="arg1"><see cref="Android.Os.Handler"/></param>
        public void AddOnRoutingChangedListener(Android.Media.AudioRouting.OnRoutingChangedListener arg0, Android.Os.Handler arg1)
        {
            IExecute("addOnRoutingChangedListener", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#registerAudioRecordingCallback(java.util.concurrent.Executor,android.media.AudioManager.AudioRecordingCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Media.AudioManager.AudioRecordingCallback"/></param>
        public void RegisterAudioRecordingCallback(Java.Util.Concurrent.Executor arg0, Android.Media.AudioManager.AudioRecordingCallback arg1)
        {
            IExecute("registerAudioRecordingCallback", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#release()"/>
        /// </summary>
        public void Release()
        {
            IExecuteWithSignature("release", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#removeOnRoutingChangedListener(android.media.AudioRecord.OnRoutingChangedListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioRecord.OnRoutingChangedListener"/></param>
        [System.Obsolete()]
        public void RemoveOnRoutingChangedListener(Android.Media.AudioRecord.OnRoutingChangedListener arg0)
        {
            IExecuteWithSignature("removeOnRoutingChangedListener", "(Landroid/media/AudioRecord$OnRoutingChangedListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#removeOnRoutingChangedListener(android.media.AudioRouting.OnRoutingChangedListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioRouting.OnRoutingChangedListener"/></param>
        public void RemoveOnRoutingChangedListener(Android.Media.AudioRouting.OnRoutingChangedListener arg0)
        {
            IExecuteWithSignature("removeOnRoutingChangedListener", "(Landroid/media/AudioRouting$OnRoutingChangedListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#setRecordPositionUpdateListener(android.media.AudioRecord.OnRecordPositionUpdateListener,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioRecord.OnRecordPositionUpdateListener"/></param>
        /// <param name="arg1"><see cref="Android.Os.Handler"/></param>
        public void SetRecordPositionUpdateListener(Android.Media.AudioRecord.OnRecordPositionUpdateListener arg0, Android.Os.Handler arg1)
        {
            IExecute("setRecordPositionUpdateListener", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#setRecordPositionUpdateListener(android.media.AudioRecord.OnRecordPositionUpdateListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioRecord.OnRecordPositionUpdateListener"/></param>
        public void SetRecordPositionUpdateListener(Android.Media.AudioRecord.OnRecordPositionUpdateListener arg0)
        {
            IExecuteWithSignature("setRecordPositionUpdateListener", "(Landroid/media/AudioRecord$OnRecordPositionUpdateListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#startRecording()"/>
        /// </summary>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public void StartRecording()
        {
            IExecuteWithSignature("startRecording", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#startRecording(android.media.MediaSyncEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaSyncEvent"/></param>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public void StartRecording(Android.Media.MediaSyncEvent arg0)
        {
            IExecuteWithSignature("startRecording", "(Landroid/media/MediaSyncEvent;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#stop()"/>
        /// </summary>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public void Stop()
        {
            IExecuteWithSignature("stop", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioRecord.html#unregisterAudioRecordingCallback(android.media.AudioManager.AudioRecordingCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioManager.AudioRecordingCallback"/></param>
        public void UnregisterAudioRecordingCallback(Android.Media.AudioManager.AudioRecordingCallback arg0)
        {
            IExecuteWithSignature("unregisterAudioRecordingCallback", "(Landroid/media/AudioManager$AudioRecordingCallback;)V", arg0);
        }

        #endregion

        #region Nested classes
        #region Builder
        public partial class Builder
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioRecord.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Media.AudioRecord"/></returns>
            /// <exception cref="Java.Lang.UnsupportedOperationException"/>
            public Android.Media.AudioRecord Build()
            {
                return IExecuteWithSignature<Android.Media.AudioRecord>("build", "()Landroid/media/AudioRecord;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioRecord.Builder.html#setAudioFormat(android.media.AudioFormat)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.AudioFormat"/></param>
            /// <returns><see cref="Android.Media.AudioRecord.Builder"/></returns>
            /// <exception cref="Java.Lang.IllegalArgumentException"/>
            public Android.Media.AudioRecord.Builder SetAudioFormat(Android.Media.AudioFormat arg0)
            {
                return IExecuteWithSignature<Android.Media.AudioRecord.Builder>("setAudioFormat", "(Landroid/media/AudioFormat;)Landroid/media/AudioRecord$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioRecord.Builder.html#setAudioPlaybackCaptureConfig(android.media.AudioPlaybackCaptureConfiguration)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.AudioPlaybackCaptureConfiguration"/></param>
            /// <returns><see cref="Android.Media.AudioRecord.Builder"/></returns>
            public Android.Media.AudioRecord.Builder SetAudioPlaybackCaptureConfig(Android.Media.AudioPlaybackCaptureConfiguration arg0)
            {
                return IExecuteWithSignature<Android.Media.AudioRecord.Builder>("setAudioPlaybackCaptureConfig", "(Landroid/media/AudioPlaybackCaptureConfiguration;)Landroid/media/AudioRecord$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioRecord.Builder.html#setAudioSource(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.AudioRecord.Builder"/></returns>
            /// <exception cref="Java.Lang.IllegalArgumentException"/>
            public Android.Media.AudioRecord.Builder SetAudioSource(int arg0)
            {
                return IExecuteWithSignature<Android.Media.AudioRecord.Builder>("setAudioSource", "(I)Landroid/media/AudioRecord$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioRecord.Builder.html#setBufferSizeInBytes(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.AudioRecord.Builder"/></returns>
            /// <exception cref="Java.Lang.IllegalArgumentException"/>
            public Android.Media.AudioRecord.Builder SetBufferSizeInBytes(int arg0)
            {
                return IExecuteWithSignature<Android.Media.AudioRecord.Builder>("setBufferSizeInBytes", "(I)Landroid/media/AudioRecord$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioRecord.Builder.html#setContext(android.content.Context)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.Context"/></param>
            /// <returns><see cref="Android.Media.AudioRecord.Builder"/></returns>
            public Android.Media.AudioRecord.Builder SetContext(Android.Content.Context arg0)
            {
                return IExecuteWithSignature<Android.Media.AudioRecord.Builder>("setContext", "(Landroid/content/Context;)Landroid/media/AudioRecord$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioRecord.Builder.html#setPrivacySensitive(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Media.AudioRecord.Builder"/></returns>
            public Android.Media.AudioRecord.Builder SetPrivacySensitive(bool arg0)
            {
                return IExecuteWithSignature<Android.Media.AudioRecord.Builder>("setPrivacySensitive", "(Z)Landroid/media/AudioRecord$Builder;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region MetricsConstants
        public partial class MetricsConstants
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioRecord.MetricsConstants.html#CHANNELS"/>
            /// </summary>
            public static Java.Lang.String CHANNELS { get { if (!_CHANNELSReady) { _CHANNELSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CHANNELS"); _CHANNELSReady = true; } return _CHANNELSContent; } }
            private static Java.Lang.String _CHANNELSContent = default;
            private static bool _CHANNELSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioRecord.MetricsConstants.html#ENCODING"/>
            /// </summary>
            public static Java.Lang.String ENCODING { get { if (!_ENCODINGReady) { _ENCODINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ENCODING"); _ENCODINGReady = true; } return _ENCODINGContent; } }
            private static Java.Lang.String _ENCODINGContent = default;
            private static bool _ENCODINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioRecord.MetricsConstants.html#LATENCY"/>
            /// </summary>
            [System.Obsolete()]
            public static Java.Lang.String LATENCY { get { if (!_LATENCYReady) { _LATENCYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LATENCY"); _LATENCYReady = true; } return _LATENCYContent; } }
            private static Java.Lang.String _LATENCYContent = default;
            private static bool _LATENCYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioRecord.MetricsConstants.html#SAMPLERATE"/>
            /// </summary>
            public static Java.Lang.String SAMPLERATE { get { if (!_SAMPLERATEReady) { _SAMPLERATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SAMPLERATE"); _SAMPLERATEReady = true; } return _SAMPLERATEContent; } }
            private static Java.Lang.String _SAMPLERATEContent = default;
            private static bool _SAMPLERATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioRecord.MetricsConstants.html#SOURCE"/>
            /// </summary>
            public static Java.Lang.String SOURCE { get { if (!_SOURCEReady) { _SOURCEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SOURCE"); _SOURCEReady = true; } return _SOURCEContent; } }
            private static Java.Lang.String _SOURCEContent = default;
            private static bool _SOURCEReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnRecordPositionUpdateListener
        public partial class OnRecordPositionUpdateListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnRecordPositionUpdateListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onMarkerReached", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Media.AudioRecord>>>(OnMarkerReachedEventHandler));
                AddEventHandler("onPeriodicNotification", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Media.AudioRecord>>>(OnPeriodicNotificationEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/AudioRecord.OnRecordPositionUpdateListener.html#onMarkerReached(android.media.AudioRecord)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnMarkerReached"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Media.AudioRecord> OnOnMarkerReached { get; set; } = null;

            void OnMarkerReachedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Media.AudioRecord>> data)
            {
                var methodToExecute = (OnOnMarkerReached != null) ? OnOnMarkerReached : OnMarkerReached;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioRecord.OnRecordPositionUpdateListener.html#onMarkerReached(android.media.AudioRecord)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.AudioRecord"/></param>
            public virtual void OnMarkerReached(Android.Media.AudioRecord arg0)
            {
                
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/AudioRecord.OnRecordPositionUpdateListener.html#onPeriodicNotification(android.media.AudioRecord)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnPeriodicNotification"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Media.AudioRecord> OnOnPeriodicNotification { get; set; } = null;

            void OnPeriodicNotificationEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Media.AudioRecord>> data)
            {
                var methodToExecute = (OnOnPeriodicNotification != null) ? OnOnPeriodicNotification : OnPeriodicNotification;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioRecord.OnRecordPositionUpdateListener.html#onPeriodicNotification(android.media.AudioRecord)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.AudioRecord"/></param>
            public virtual void OnPeriodicNotification(Android.Media.AudioRecord arg0)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnRecordPositionUpdateListenerDirect
        public partial class OnRecordPositionUpdateListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioRecord.OnRecordPositionUpdateListener.html#onMarkerReached(android.media.AudioRecord)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.AudioRecord"/></param>
            public override void OnMarkerReached(Android.Media.AudioRecord arg0)
            {
                IExecuteWithSignature("onMarkerReached", "(Landroid/media/AudioRecord;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioRecord.OnRecordPositionUpdateListener.html#onPeriodicNotification(android.media.AudioRecord)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.AudioRecord"/></param>
            public override void OnPeriodicNotification(Android.Media.AudioRecord arg0)
            {
                IExecuteWithSignature("onPeriodicNotification", "(Landroid/media/AudioRecord;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnRoutingChangedListener
        public partial class OnRoutingChangedListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnRoutingChangedListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onRoutingChanged", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Media.AudioRecord>>>(OnRoutingChangedEventHandler));
                AddEventHandler("onRoutingChanged1", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Media.AudioRouting>>>(OnRoutingChanged1EventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/AudioRecord.OnRoutingChangedListener.html#onRoutingChanged(android.media.AudioRecord)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnRoutingChanged"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Media.AudioRecord> OnOnRoutingChanged { get; set; } = null;

            void OnRoutingChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Media.AudioRecord>> data)
            {
                var methodToExecute = (OnOnRoutingChanged != null) ? OnOnRoutingChanged : OnRoutingChanged;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioRecord.OnRoutingChangedListener.html#onRoutingChanged(android.media.AudioRecord)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.AudioRecord"/></param>
            [System.Obsolete()]
            public virtual void OnRoutingChanged(Android.Media.AudioRecord arg0)
            {
                
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioRecord.OnRoutingChangedListener.html#onRoutingChanged(android.media.AudioRouting)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.AudioRouting"/></param>
            [System.Obsolete()]
            /// <remarks>The method invokes the default implementation in the JVM interface</remarks>
            public void OnRoutingChangedDefault(Android.Media.AudioRouting arg0)
            {
                IExecuteWithSignature("onRoutingChangedDefault", "(Landroid/media/AudioRouting;)V", arg0);
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/AudioRecord.OnRoutingChangedListener.html#onRoutingChanged(android.media.AudioRouting)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnRoutingChanged1"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Media.AudioRouting> OnOnRoutingChanged1 { get; set; } = null;

            void OnRoutingChanged1EventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Media.AudioRouting>> data)
            {
                var methodToExecute = (OnOnRoutingChanged1 != null) ? OnOnRoutingChanged1 : OnRoutingChanged;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioRecord.OnRoutingChangedListener.html#onRoutingChanged(android.media.AudioRouting)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.AudioRouting"/></param>
            [System.Obsolete()]
            /// <remarks>The method invokes the default implementation in the JVM interface using <see cref="OnRoutingChangedDefault"/>; override the method to implement a different behavior</remarks>
            public virtual void OnRoutingChanged(Android.Media.AudioRouting arg0)
            {
                OnRoutingChangedDefault(arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnRoutingChangedListenerDirect
        public partial class OnRoutingChangedListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioRecord.OnRoutingChangedListener.html#onRoutingChanged(android.media.AudioRecord)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.AudioRecord"/></param>
            [System.Obsolete()]
            public override void OnRoutingChanged(Android.Media.AudioRecord arg0)
            {
                IExecuteWithSignature("onRoutingChanged", "(Landroid/media/AudioRecord;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioRecord.OnRoutingChangedListener.html#onRoutingChanged(android.media.AudioRouting)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.AudioRouting"/></param>
            [System.Obsolete()]
            public override void OnRoutingChanged(Android.Media.AudioRouting arg0)
            {
                IExecuteWithSignature("onRoutingChanged", "(Landroid/media/AudioRouting;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
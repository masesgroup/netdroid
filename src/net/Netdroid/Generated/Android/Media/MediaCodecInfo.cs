/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media
{
    #region MediaCodecInfo declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.html"/>
    /// </summary>
    public partial class MediaCodecInfo : MASES.JCOBridge.C2JBridge.JVMBridgeBase<MediaCodecInfo>
    {
        const string _bridgeClassName = "android.media.MediaCodecInfo";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public MediaCodecInfo() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public MediaCodecInfo(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region AudioCapabilities declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.AudioCapabilities.html"/>
        /// </summary>
        public partial class AudioCapabilities : MASES.JCOBridge.C2JBridge.JVMBridgeBase<AudioCapabilities>
        {
            const string _bridgeClassName = "android.media.MediaCodecInfo$AudioCapabilities";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public AudioCapabilities() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public AudioCapabilities(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region CodecCapabilities declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html"/>
        /// </summary>
        public partial class CodecCapabilities : MASES.JCOBridge.C2JBridge.JVMBridgeBase<CodecCapabilities>
        {
            const string _bridgeClassName = "android.media.MediaCodecInfo$CodecCapabilities";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public CodecCapabilities() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public CodecCapabilities(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region CodecProfileLevel declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html"/>
        /// </summary>
        public partial class CodecProfileLevel : MASES.JCOBridge.C2JBridge.JVMBridgeBase<CodecProfileLevel>
        {
            const string _bridgeClassName = "android.media.MediaCodecInfo$CodecProfileLevel";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public CodecProfileLevel() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public CodecProfileLevel(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region EncoderCapabilities declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.EncoderCapabilities.html"/>
        /// </summary>
        public partial class EncoderCapabilities : MASES.JCOBridge.C2JBridge.JVMBridgeBase<EncoderCapabilities>
        {
            const string _bridgeClassName = "android.media.MediaCodecInfo$EncoderCapabilities";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public EncoderCapabilities() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public EncoderCapabilities(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region VideoCapabilities declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.html"/>
        /// </summary>
        public partial class VideoCapabilities : MASES.JCOBridge.C2JBridge.JVMBridgeBase<VideoCapabilities>
        {
            const string _bridgeClassName = "android.media.MediaCodecInfo$VideoCapabilities";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public VideoCapabilities() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public VideoCapabilities(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
            #region PerformancePoint declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.PerformancePoint.html"/>
            /// </summary>
            public partial class PerformancePoint : MASES.JCOBridge.C2JBridge.JVMBridgeBase<PerformancePoint>
            {
                const string _bridgeClassName = "android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                public PerformancePoint() { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                public PerformancePoint(params object[] args) : base(args) { }
            
                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                /// </summary>
                public override string BridgeClassName => _bridgeClassName;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                /// </summary>
                public override bool IsBridgeAbstract => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                /// </summary>
                public override bool IsBridgeCloseable => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                /// </summary>
                public override bool IsBridgeInterface => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                /// </summary>
                public override bool IsBridgeStatic => true;
            
                // TODO: complete the class
            
            }
            #endregion

        
        }
        #endregion

    
    }
    #endregion

    #region MediaCodecInfo implementation
    public partial class MediaCodecInfo
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.html#getCapabilitiesForType(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Media.MediaCodecInfo.CodecCapabilities"/></returns>
        public Android.Media.MediaCodecInfo.CodecCapabilities GetCapabilitiesForType(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Android.Media.MediaCodecInfo.CodecCapabilities>("getCapabilitiesForType", "(Ljava/lang/String;)Landroid/media/MediaCodecInfo$CodecCapabilities;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.html#isAlias()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAlias()
        {
            return IExecuteWithSignature<bool>("isAlias", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.html#isEncoder()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsEncoder()
        {
            return IExecuteWithSignature<bool>("isEncoder", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.html#isHardwareAccelerated()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsHardwareAccelerated()
        {
            return IExecuteWithSignature<bool>("isHardwareAccelerated", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.html#isSoftwareOnly()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsSoftwareOnly()
        {
            return IExecuteWithSignature<bool>("isSoftwareOnly", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.html#isVendor()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsVendor()
        {
            return IExecuteWithSignature<bool>("isVendor", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.html#getCanonicalName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetCanonicalName()
        {
            return IExecuteWithSignature<Java.Lang.String>("getCanonicalName", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.html#getName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetName()
        {
            return IExecuteWithSignature<Java.Lang.String>("getName", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.html#getSupportedTypes()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String[] GetSupportedTypes()
        {
            return IExecuteWithSignatureArray<Java.Lang.String>("getSupportedTypes", "()[Ljava/lang/String;");
        }
    
        #endregion
    
        #region Nested classes
        #region AudioCapabilities implementation
        public partial class AudioCapabilities
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.AudioCapabilities.html#isSampleRateSupported(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool IsSampleRateSupported(int arg0)
            {
                return IExecuteWithSignature<bool>("isSampleRateSupported", "(I)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.AudioCapabilities.html#getMaxInputChannelCount()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetMaxInputChannelCount()
            {
                return IExecuteWithSignature<int>("getMaxInputChannelCount", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.AudioCapabilities.html#getMinInputChannelCount()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetMinInputChannelCount()
            {
                return IExecuteWithSignature<int>("getMinInputChannelCount", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.AudioCapabilities.html#getSupportedSampleRates()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int[] GetSupportedSampleRates()
            {
                return IExecuteWithSignatureArray<int>("getSupportedSampleRates", "()[I");
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region CodecCapabilities implementation
        public partial class CodecCapabilities
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#profileLevels"/>
            /// </summary>
            public Android.Media.MediaCodecInfo.CodecProfileLevel[] profileLevels { get { return IGetFieldArray<Android.Media.MediaCodecInfo.CodecProfileLevel>("profileLevels"); } set { ISetField("profileLevels", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#colorFormats"/>
            /// </summary>
            public int[] colorFormats { get { return IGetFieldArray<int>("colorFormats"); } set { ISetField("colorFormats", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_Format12bitRGB444"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int COLOR_Format12bitRGB444 { get { if (!_COLOR_Format12bitRGB444Ready) { _COLOR_Format12bitRGB444Content = SGetField<int>(LocalBridgeClazz, "COLOR_Format12bitRGB444"); _COLOR_Format12bitRGB444Ready = true; } return _COLOR_Format12bitRGB444Content; } }
            private static int _COLOR_Format12bitRGB444Content = default;
            private static bool _COLOR_Format12bitRGB444Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_Format16bitARGB1555"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int COLOR_Format16bitARGB1555 { get { if (!_COLOR_Format16bitARGB1555Ready) { _COLOR_Format16bitARGB1555Content = SGetField<int>(LocalBridgeClazz, "COLOR_Format16bitARGB1555"); _COLOR_Format16bitARGB1555Ready = true; } return _COLOR_Format16bitARGB1555Content; } }
            private static int _COLOR_Format16bitARGB1555Content = default;
            private static bool _COLOR_Format16bitARGB1555Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_Format16bitARGB4444"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int COLOR_Format16bitARGB4444 { get { if (!_COLOR_Format16bitARGB4444Ready) { _COLOR_Format16bitARGB4444Content = SGetField<int>(LocalBridgeClazz, "COLOR_Format16bitARGB4444"); _COLOR_Format16bitARGB4444Ready = true; } return _COLOR_Format16bitARGB4444Content; } }
            private static int _COLOR_Format16bitARGB4444Content = default;
            private static bool _COLOR_Format16bitARGB4444Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_Format16bitBGR565"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int COLOR_Format16bitBGR565 { get { if (!_COLOR_Format16bitBGR565Ready) { _COLOR_Format16bitBGR565Content = SGetField<int>(LocalBridgeClazz, "COLOR_Format16bitBGR565"); _COLOR_Format16bitBGR565Ready = true; } return _COLOR_Format16bitBGR565Content; } }
            private static int _COLOR_Format16bitBGR565Content = default;
            private static bool _COLOR_Format16bitBGR565Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_Format16bitRGB565"/>
            /// </summary>
            public static int COLOR_Format16bitRGB565 { get { if (!_COLOR_Format16bitRGB565Ready) { _COLOR_Format16bitRGB565Content = SGetField<int>(LocalBridgeClazz, "COLOR_Format16bitRGB565"); _COLOR_Format16bitRGB565Ready = true; } return _COLOR_Format16bitRGB565Content; } }
            private static int _COLOR_Format16bitRGB565Content = default;
            private static bool _COLOR_Format16bitRGB565Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_Format18bitARGB1665"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int COLOR_Format18bitARGB1665 { get { if (!_COLOR_Format18bitARGB1665Ready) { _COLOR_Format18bitARGB1665Content = SGetField<int>(LocalBridgeClazz, "COLOR_Format18bitARGB1665"); _COLOR_Format18bitARGB1665Ready = true; } return _COLOR_Format18bitARGB1665Content; } }
            private static int _COLOR_Format18bitARGB1665Content = default;
            private static bool _COLOR_Format18bitARGB1665Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_Format18BitBGR666"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int COLOR_Format18BitBGR666 { get { if (!_COLOR_Format18BitBGR666Ready) { _COLOR_Format18BitBGR666Content = SGetField<int>(LocalBridgeClazz, "COLOR_Format18BitBGR666"); _COLOR_Format18BitBGR666Ready = true; } return _COLOR_Format18BitBGR666Content; } }
            private static int _COLOR_Format18BitBGR666Content = default;
            private static bool _COLOR_Format18BitBGR666Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_Format18bitRGB666"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int COLOR_Format18bitRGB666 { get { if (!_COLOR_Format18bitRGB666Ready) { _COLOR_Format18bitRGB666Content = SGetField<int>(LocalBridgeClazz, "COLOR_Format18bitRGB666"); _COLOR_Format18bitRGB666Ready = true; } return _COLOR_Format18bitRGB666Content; } }
            private static int _COLOR_Format18bitRGB666Content = default;
            private static bool _COLOR_Format18bitRGB666Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_Format19bitARGB1666"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int COLOR_Format19bitARGB1666 { get { if (!_COLOR_Format19bitARGB1666Ready) { _COLOR_Format19bitARGB1666Content = SGetField<int>(LocalBridgeClazz, "COLOR_Format19bitARGB1666"); _COLOR_Format19bitARGB1666Ready = true; } return _COLOR_Format19bitARGB1666Content; } }
            private static int _COLOR_Format19bitARGB1666Content = default;
            private static bool _COLOR_Format19bitARGB1666Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_Format24BitABGR6666"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int COLOR_Format24BitABGR6666 { get { if (!_COLOR_Format24BitABGR6666Ready) { _COLOR_Format24BitABGR6666Content = SGetField<int>(LocalBridgeClazz, "COLOR_Format24BitABGR6666"); _COLOR_Format24BitABGR6666Ready = true; } return _COLOR_Format24BitABGR6666Content; } }
            private static int _COLOR_Format24BitABGR6666Content = default;
            private static bool _COLOR_Format24BitABGR6666Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_Format24bitARGB1887"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int COLOR_Format24bitARGB1887 { get { if (!_COLOR_Format24bitARGB1887Ready) { _COLOR_Format24bitARGB1887Content = SGetField<int>(LocalBridgeClazz, "COLOR_Format24bitARGB1887"); _COLOR_Format24bitARGB1887Ready = true; } return _COLOR_Format24bitARGB1887Content; } }
            private static int _COLOR_Format24bitARGB1887Content = default;
            private static bool _COLOR_Format24bitARGB1887Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_Format24BitARGB6666"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int COLOR_Format24BitARGB6666 { get { if (!_COLOR_Format24BitARGB6666Ready) { _COLOR_Format24BitARGB6666Content = SGetField<int>(LocalBridgeClazz, "COLOR_Format24BitARGB6666"); _COLOR_Format24BitARGB6666Ready = true; } return _COLOR_Format24BitARGB6666Content; } }
            private static int _COLOR_Format24BitARGB6666Content = default;
            private static bool _COLOR_Format24BitARGB6666Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_Format24bitBGR888"/>
            /// </summary>
            public static int COLOR_Format24bitBGR888 { get { if (!_COLOR_Format24bitBGR888Ready) { _COLOR_Format24bitBGR888Content = SGetField<int>(LocalBridgeClazz, "COLOR_Format24bitBGR888"); _COLOR_Format24bitBGR888Ready = true; } return _COLOR_Format24bitBGR888Content; } }
            private static int _COLOR_Format24bitBGR888Content = default;
            private static bool _COLOR_Format24bitBGR888Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_Format24bitRGB888"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int COLOR_Format24bitRGB888 { get { if (!_COLOR_Format24bitRGB888Ready) { _COLOR_Format24bitRGB888Content = SGetField<int>(LocalBridgeClazz, "COLOR_Format24bitRGB888"); _COLOR_Format24bitRGB888Ready = true; } return _COLOR_Format24bitRGB888Content; } }
            private static int _COLOR_Format24bitRGB888Content = default;
            private static bool _COLOR_Format24bitRGB888Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_Format25bitARGB1888"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int COLOR_Format25bitARGB1888 { get { if (!_COLOR_Format25bitARGB1888Ready) { _COLOR_Format25bitARGB1888Content = SGetField<int>(LocalBridgeClazz, "COLOR_Format25bitARGB1888"); _COLOR_Format25bitARGB1888Ready = true; } return _COLOR_Format25bitARGB1888Content; } }
            private static int _COLOR_Format25bitARGB1888Content = default;
            private static bool _COLOR_Format25bitARGB1888Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_Format32bitABGR2101010"/>
            /// </summary>
            public static int COLOR_Format32bitABGR2101010 { get { if (!_COLOR_Format32bitABGR2101010Ready) { _COLOR_Format32bitABGR2101010Content = SGetField<int>(LocalBridgeClazz, "COLOR_Format32bitABGR2101010"); _COLOR_Format32bitABGR2101010Ready = true; } return _COLOR_Format32bitABGR2101010Content; } }
            private static int _COLOR_Format32bitABGR2101010Content = default;
            private static bool _COLOR_Format32bitABGR2101010Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_Format32bitABGR8888"/>
            /// </summary>
            public static int COLOR_Format32bitABGR8888 { get { if (!_COLOR_Format32bitABGR8888Ready) { _COLOR_Format32bitABGR8888Content = SGetField<int>(LocalBridgeClazz, "COLOR_Format32bitABGR8888"); _COLOR_Format32bitABGR8888Ready = true; } return _COLOR_Format32bitABGR8888Content; } }
            private static int _COLOR_Format32bitABGR8888Content = default;
            private static bool _COLOR_Format32bitABGR8888Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_Format32bitARGB8888"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int COLOR_Format32bitARGB8888 { get { if (!_COLOR_Format32bitARGB8888Ready) { _COLOR_Format32bitARGB8888Content = SGetField<int>(LocalBridgeClazz, "COLOR_Format32bitARGB8888"); _COLOR_Format32bitARGB8888Ready = true; } return _COLOR_Format32bitARGB8888Content; } }
            private static int _COLOR_Format32bitARGB8888Content = default;
            private static bool _COLOR_Format32bitARGB8888Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_Format32bitBGRA8888"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int COLOR_Format32bitBGRA8888 { get { if (!_COLOR_Format32bitBGRA8888Ready) { _COLOR_Format32bitBGRA8888Content = SGetField<int>(LocalBridgeClazz, "COLOR_Format32bitBGRA8888"); _COLOR_Format32bitBGRA8888Ready = true; } return _COLOR_Format32bitBGRA8888Content; } }
            private static int _COLOR_Format32bitBGRA8888Content = default;
            private static bool _COLOR_Format32bitBGRA8888Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_Format64bitABGRFloat"/>
            /// </summary>
            public static int COLOR_Format64bitABGRFloat { get { if (!_COLOR_Format64bitABGRFloatReady) { _COLOR_Format64bitABGRFloatContent = SGetField<int>(LocalBridgeClazz, "COLOR_Format64bitABGRFloat"); _COLOR_Format64bitABGRFloatReady = true; } return _COLOR_Format64bitABGRFloatContent; } }
            private static int _COLOR_Format64bitABGRFloatContent = default;
            private static bool _COLOR_Format64bitABGRFloatReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_Format8bitRGB332"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int COLOR_Format8bitRGB332 { get { if (!_COLOR_Format8bitRGB332Ready) { _COLOR_Format8bitRGB332Content = SGetField<int>(LocalBridgeClazz, "COLOR_Format8bitRGB332"); _COLOR_Format8bitRGB332Ready = true; } return _COLOR_Format8bitRGB332Content; } }
            private static int _COLOR_Format8bitRGB332Content = default;
            private static bool _COLOR_Format8bitRGB332Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatCbYCrY"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int COLOR_FormatCbYCrY { get { if (!_COLOR_FormatCbYCrYReady) { _COLOR_FormatCbYCrYContent = SGetField<int>(LocalBridgeClazz, "COLOR_FormatCbYCrY"); _COLOR_FormatCbYCrYReady = true; } return _COLOR_FormatCbYCrYContent; } }
            private static int _COLOR_FormatCbYCrYContent = default;
            private static bool _COLOR_FormatCbYCrYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatCrYCbY"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int COLOR_FormatCrYCbY { get { if (!_COLOR_FormatCrYCbYReady) { _COLOR_FormatCrYCbYContent = SGetField<int>(LocalBridgeClazz, "COLOR_FormatCrYCbY"); _COLOR_FormatCrYCbYReady = true; } return _COLOR_FormatCrYCbYContent; } }
            private static int _COLOR_FormatCrYCbYContent = default;
            private static bool _COLOR_FormatCrYCbYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatL16"/>
            /// </summary>
            public static int COLOR_FormatL16 { get { if (!_COLOR_FormatL16Ready) { _COLOR_FormatL16Content = SGetField<int>(LocalBridgeClazz, "COLOR_FormatL16"); _COLOR_FormatL16Ready = true; } return _COLOR_FormatL16Content; } }
            private static int _COLOR_FormatL16Content = default;
            private static bool _COLOR_FormatL16Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatL2"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int COLOR_FormatL2 { get { if (!_COLOR_FormatL2Ready) { _COLOR_FormatL2Content = SGetField<int>(LocalBridgeClazz, "COLOR_FormatL2"); _COLOR_FormatL2Ready = true; } return _COLOR_FormatL2Content; } }
            private static int _COLOR_FormatL2Content = default;
            private static bool _COLOR_FormatL2Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatL24"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int COLOR_FormatL24 { get { if (!_COLOR_FormatL24Ready) { _COLOR_FormatL24Content = SGetField<int>(LocalBridgeClazz, "COLOR_FormatL24"); _COLOR_FormatL24Ready = true; } return _COLOR_FormatL24Content; } }
            private static int _COLOR_FormatL24Content = default;
            private static bool _COLOR_FormatL24Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatL32"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int COLOR_FormatL32 { get { if (!_COLOR_FormatL32Ready) { _COLOR_FormatL32Content = SGetField<int>(LocalBridgeClazz, "COLOR_FormatL32"); _COLOR_FormatL32Ready = true; } return _COLOR_FormatL32Content; } }
            private static int _COLOR_FormatL32Content = default;
            private static bool _COLOR_FormatL32Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatL4"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int COLOR_FormatL4 { get { if (!_COLOR_FormatL4Ready) { _COLOR_FormatL4Content = SGetField<int>(LocalBridgeClazz, "COLOR_FormatL4"); _COLOR_FormatL4Ready = true; } return _COLOR_FormatL4Content; } }
            private static int _COLOR_FormatL4Content = default;
            private static bool _COLOR_FormatL4Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatL8"/>
            /// </summary>
            public static int COLOR_FormatL8 { get { if (!_COLOR_FormatL8Ready) { _COLOR_FormatL8Content = SGetField<int>(LocalBridgeClazz, "COLOR_FormatL8"); _COLOR_FormatL8Ready = true; } return _COLOR_FormatL8Content; } }
            private static int _COLOR_FormatL8Content = default;
            private static bool _COLOR_FormatL8Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatMonochrome"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int COLOR_FormatMonochrome { get { if (!_COLOR_FormatMonochromeReady) { _COLOR_FormatMonochromeContent = SGetField<int>(LocalBridgeClazz, "COLOR_FormatMonochrome"); _COLOR_FormatMonochromeReady = true; } return _COLOR_FormatMonochromeContent; } }
            private static int _COLOR_FormatMonochromeContent = default;
            private static bool _COLOR_FormatMonochromeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatRawBayer10bit"/>
            /// </summary>
            public static int COLOR_FormatRawBayer10bit { get { if (!_COLOR_FormatRawBayer10bitReady) { _COLOR_FormatRawBayer10bitContent = SGetField<int>(LocalBridgeClazz, "COLOR_FormatRawBayer10bit"); _COLOR_FormatRawBayer10bitReady = true; } return _COLOR_FormatRawBayer10bitContent; } }
            private static int _COLOR_FormatRawBayer10bitContent = default;
            private static bool _COLOR_FormatRawBayer10bitReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatRawBayer8bit"/>
            /// </summary>
            public static int COLOR_FormatRawBayer8bit { get { if (!_COLOR_FormatRawBayer8bitReady) { _COLOR_FormatRawBayer8bitContent = SGetField<int>(LocalBridgeClazz, "COLOR_FormatRawBayer8bit"); _COLOR_FormatRawBayer8bitReady = true; } return _COLOR_FormatRawBayer8bitContent; } }
            private static int _COLOR_FormatRawBayer8bitContent = default;
            private static bool _COLOR_FormatRawBayer8bitReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatRawBayer8bitcompressed"/>
            /// </summary>
            public static int COLOR_FormatRawBayer8bitcompressed { get { if (!_COLOR_FormatRawBayer8bitcompressedReady) { _COLOR_FormatRawBayer8bitcompressedContent = SGetField<int>(LocalBridgeClazz, "COLOR_FormatRawBayer8bitcompressed"); _COLOR_FormatRawBayer8bitcompressedReady = true; } return _COLOR_FormatRawBayer8bitcompressedContent; } }
            private static int _COLOR_FormatRawBayer8bitcompressedContent = default;
            private static bool _COLOR_FormatRawBayer8bitcompressedReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatRGBAFlexible"/>
            /// </summary>
            public static int COLOR_FormatRGBAFlexible { get { if (!_COLOR_FormatRGBAFlexibleReady) { _COLOR_FormatRGBAFlexibleContent = SGetField<int>(LocalBridgeClazz, "COLOR_FormatRGBAFlexible"); _COLOR_FormatRGBAFlexibleReady = true; } return _COLOR_FormatRGBAFlexibleContent; } }
            private static int _COLOR_FormatRGBAFlexibleContent = default;
            private static bool _COLOR_FormatRGBAFlexibleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatRGBFlexible"/>
            /// </summary>
            public static int COLOR_FormatRGBFlexible { get { if (!_COLOR_FormatRGBFlexibleReady) { _COLOR_FormatRGBFlexibleContent = SGetField<int>(LocalBridgeClazz, "COLOR_FormatRGBFlexible"); _COLOR_FormatRGBFlexibleReady = true; } return _COLOR_FormatRGBFlexibleContent; } }
            private static int _COLOR_FormatRGBFlexibleContent = default;
            private static bool _COLOR_FormatRGBFlexibleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatSurface"/>
            /// </summary>
            public static int COLOR_FormatSurface { get { if (!_COLOR_FormatSurfaceReady) { _COLOR_FormatSurfaceContent = SGetField<int>(LocalBridgeClazz, "COLOR_FormatSurface"); _COLOR_FormatSurfaceReady = true; } return _COLOR_FormatSurfaceContent; } }
            private static int _COLOR_FormatSurfaceContent = default;
            private static bool _COLOR_FormatSurfaceReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatYCbYCr"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int COLOR_FormatYCbYCr { get { if (!_COLOR_FormatYCbYCrReady) { _COLOR_FormatYCbYCrContent = SGetField<int>(LocalBridgeClazz, "COLOR_FormatYCbYCr"); _COLOR_FormatYCbYCrReady = true; } return _COLOR_FormatYCbYCrContent; } }
            private static int _COLOR_FormatYCbYCrContent = default;
            private static bool _COLOR_FormatYCbYCrReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatYCrYCb"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int COLOR_FormatYCrYCb { get { if (!_COLOR_FormatYCrYCbReady) { _COLOR_FormatYCrYCbContent = SGetField<int>(LocalBridgeClazz, "COLOR_FormatYCrYCb"); _COLOR_FormatYCrYCbReady = true; } return _COLOR_FormatYCrYCbContent; } }
            private static int _COLOR_FormatYCrYCbContent = default;
            private static bool _COLOR_FormatYCrYCbReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatYUV411PackedPlanar"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int COLOR_FormatYUV411PackedPlanar { get { if (!_COLOR_FormatYUV411PackedPlanarReady) { _COLOR_FormatYUV411PackedPlanarContent = SGetField<int>(LocalBridgeClazz, "COLOR_FormatYUV411PackedPlanar"); _COLOR_FormatYUV411PackedPlanarReady = true; } return _COLOR_FormatYUV411PackedPlanarContent; } }
            private static int _COLOR_FormatYUV411PackedPlanarContent = default;
            private static bool _COLOR_FormatYUV411PackedPlanarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatYUV411Planar"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int COLOR_FormatYUV411Planar { get { if (!_COLOR_FormatYUV411PlanarReady) { _COLOR_FormatYUV411PlanarContent = SGetField<int>(LocalBridgeClazz, "COLOR_FormatYUV411Planar"); _COLOR_FormatYUV411PlanarReady = true; } return _COLOR_FormatYUV411PlanarContent; } }
            private static int _COLOR_FormatYUV411PlanarContent = default;
            private static bool _COLOR_FormatYUV411PlanarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatYUV420Flexible"/>
            /// </summary>
            public static int COLOR_FormatYUV420Flexible { get { if (!_COLOR_FormatYUV420FlexibleReady) { _COLOR_FormatYUV420FlexibleContent = SGetField<int>(LocalBridgeClazz, "COLOR_FormatYUV420Flexible"); _COLOR_FormatYUV420FlexibleReady = true; } return _COLOR_FormatYUV420FlexibleContent; } }
            private static int _COLOR_FormatYUV420FlexibleContent = default;
            private static bool _COLOR_FormatYUV420FlexibleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatYUV420PackedPlanar"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int COLOR_FormatYUV420PackedPlanar { get { if (!_COLOR_FormatYUV420PackedPlanarReady) { _COLOR_FormatYUV420PackedPlanarContent = SGetField<int>(LocalBridgeClazz, "COLOR_FormatYUV420PackedPlanar"); _COLOR_FormatYUV420PackedPlanarReady = true; } return _COLOR_FormatYUV420PackedPlanarContent; } }
            private static int _COLOR_FormatYUV420PackedPlanarContent = default;
            private static bool _COLOR_FormatYUV420PackedPlanarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatYUV420PackedSemiPlanar"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int COLOR_FormatYUV420PackedSemiPlanar { get { if (!_COLOR_FormatYUV420PackedSemiPlanarReady) { _COLOR_FormatYUV420PackedSemiPlanarContent = SGetField<int>(LocalBridgeClazz, "COLOR_FormatYUV420PackedSemiPlanar"); _COLOR_FormatYUV420PackedSemiPlanarReady = true; } return _COLOR_FormatYUV420PackedSemiPlanarContent; } }
            private static int _COLOR_FormatYUV420PackedSemiPlanarContent = default;
            private static bool _COLOR_FormatYUV420PackedSemiPlanarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatYUV420Planar"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int COLOR_FormatYUV420Planar { get { if (!_COLOR_FormatYUV420PlanarReady) { _COLOR_FormatYUV420PlanarContent = SGetField<int>(LocalBridgeClazz, "COLOR_FormatYUV420Planar"); _COLOR_FormatYUV420PlanarReady = true; } return _COLOR_FormatYUV420PlanarContent; } }
            private static int _COLOR_FormatYUV420PlanarContent = default;
            private static bool _COLOR_FormatYUV420PlanarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatYUV420SemiPlanar"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int COLOR_FormatYUV420SemiPlanar { get { if (!_COLOR_FormatYUV420SemiPlanarReady) { _COLOR_FormatYUV420SemiPlanarContent = SGetField<int>(LocalBridgeClazz, "COLOR_FormatYUV420SemiPlanar"); _COLOR_FormatYUV420SemiPlanarReady = true; } return _COLOR_FormatYUV420SemiPlanarContent; } }
            private static int _COLOR_FormatYUV420SemiPlanarContent = default;
            private static bool _COLOR_FormatYUV420SemiPlanarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatYUV422Flexible"/>
            /// </summary>
            public static int COLOR_FormatYUV422Flexible { get { if (!_COLOR_FormatYUV422FlexibleReady) { _COLOR_FormatYUV422FlexibleContent = SGetField<int>(LocalBridgeClazz, "COLOR_FormatYUV422Flexible"); _COLOR_FormatYUV422FlexibleReady = true; } return _COLOR_FormatYUV422FlexibleContent; } }
            private static int _COLOR_FormatYUV422FlexibleContent = default;
            private static bool _COLOR_FormatYUV422FlexibleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatYUV422PackedPlanar"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int COLOR_FormatYUV422PackedPlanar { get { if (!_COLOR_FormatYUV422PackedPlanarReady) { _COLOR_FormatYUV422PackedPlanarContent = SGetField<int>(LocalBridgeClazz, "COLOR_FormatYUV422PackedPlanar"); _COLOR_FormatYUV422PackedPlanarReady = true; } return _COLOR_FormatYUV422PackedPlanarContent; } }
            private static int _COLOR_FormatYUV422PackedPlanarContent = default;
            private static bool _COLOR_FormatYUV422PackedPlanarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatYUV422PackedSemiPlanar"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int COLOR_FormatYUV422PackedSemiPlanar { get { if (!_COLOR_FormatYUV422PackedSemiPlanarReady) { _COLOR_FormatYUV422PackedSemiPlanarContent = SGetField<int>(LocalBridgeClazz, "COLOR_FormatYUV422PackedSemiPlanar"); _COLOR_FormatYUV422PackedSemiPlanarReady = true; } return _COLOR_FormatYUV422PackedSemiPlanarContent; } }
            private static int _COLOR_FormatYUV422PackedSemiPlanarContent = default;
            private static bool _COLOR_FormatYUV422PackedSemiPlanarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatYUV422Planar"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int COLOR_FormatYUV422Planar { get { if (!_COLOR_FormatYUV422PlanarReady) { _COLOR_FormatYUV422PlanarContent = SGetField<int>(LocalBridgeClazz, "COLOR_FormatYUV422Planar"); _COLOR_FormatYUV422PlanarReady = true; } return _COLOR_FormatYUV422PlanarContent; } }
            private static int _COLOR_FormatYUV422PlanarContent = default;
            private static bool _COLOR_FormatYUV422PlanarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatYUV422SemiPlanar"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int COLOR_FormatYUV422SemiPlanar { get { if (!_COLOR_FormatYUV422SemiPlanarReady) { _COLOR_FormatYUV422SemiPlanarContent = SGetField<int>(LocalBridgeClazz, "COLOR_FormatYUV422SemiPlanar"); _COLOR_FormatYUV422SemiPlanarReady = true; } return _COLOR_FormatYUV422SemiPlanarContent; } }
            private static int _COLOR_FormatYUV422SemiPlanarContent = default;
            private static bool _COLOR_FormatYUV422SemiPlanarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatYUV444Flexible"/>
            /// </summary>
            public static int COLOR_FormatYUV444Flexible { get { if (!_COLOR_FormatYUV444FlexibleReady) { _COLOR_FormatYUV444FlexibleContent = SGetField<int>(LocalBridgeClazz, "COLOR_FormatYUV444Flexible"); _COLOR_FormatYUV444FlexibleReady = true; } return _COLOR_FormatYUV444FlexibleContent; } }
            private static int _COLOR_FormatYUV444FlexibleContent = default;
            private static bool _COLOR_FormatYUV444FlexibleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatYUV444Interleaved"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int COLOR_FormatYUV444Interleaved { get { if (!_COLOR_FormatYUV444InterleavedReady) { _COLOR_FormatYUV444InterleavedContent = SGetField<int>(LocalBridgeClazz, "COLOR_FormatYUV444Interleaved"); _COLOR_FormatYUV444InterleavedReady = true; } return _COLOR_FormatYUV444InterleavedContent; } }
            private static int _COLOR_FormatYUV444InterleavedContent = default;
            private static bool _COLOR_FormatYUV444InterleavedReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatYUVP010"/>
            /// </summary>
            public static int COLOR_FormatYUVP010 { get { if (!_COLOR_FormatYUVP010Ready) { _COLOR_FormatYUVP010Content = SGetField<int>(LocalBridgeClazz, "COLOR_FormatYUVP010"); _COLOR_FormatYUVP010Ready = true; } return _COLOR_FormatYUVP010Content; } }
            private static int _COLOR_FormatYUVP010Content = default;
            private static bool _COLOR_FormatYUVP010Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_QCOM_FormatYUV420SemiPlanar"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int COLOR_QCOM_FormatYUV420SemiPlanar { get { if (!_COLOR_QCOM_FormatYUV420SemiPlanarReady) { _COLOR_QCOM_FormatYUV420SemiPlanarContent = SGetField<int>(LocalBridgeClazz, "COLOR_QCOM_FormatYUV420SemiPlanar"); _COLOR_QCOM_FormatYUV420SemiPlanarReady = true; } return _COLOR_QCOM_FormatYUV420SemiPlanarContent; } }
            private static int _COLOR_QCOM_FormatYUV420SemiPlanarContent = default;
            private static bool _COLOR_QCOM_FormatYUV420SemiPlanarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_TI_FormatYUV420PackedSemiPlanar"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int COLOR_TI_FormatYUV420PackedSemiPlanar { get { if (!_COLOR_TI_FormatYUV420PackedSemiPlanarReady) { _COLOR_TI_FormatYUV420PackedSemiPlanarContent = SGetField<int>(LocalBridgeClazz, "COLOR_TI_FormatYUV420PackedSemiPlanar"); _COLOR_TI_FormatYUV420PackedSemiPlanarReady = true; } return _COLOR_TI_FormatYUV420PackedSemiPlanarContent; } }
            private static int _COLOR_TI_FormatYUV420PackedSemiPlanarContent = default;
            private static bool _COLOR_TI_FormatYUV420PackedSemiPlanarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#FEATURE_AdaptivePlayback"/>
            /// </summary>
            public static Java.Lang.String FEATURE_AdaptivePlayback { get { if (!_FEATURE_AdaptivePlaybackReady) { _FEATURE_AdaptivePlaybackContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_AdaptivePlayback"); _FEATURE_AdaptivePlaybackReady = true; } return _FEATURE_AdaptivePlaybackContent; } }
            private static Java.Lang.String _FEATURE_AdaptivePlaybackContent = default;
            private static bool _FEATURE_AdaptivePlaybackReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#FEATURE_DetachedSurface"/>
            /// </summary>
            public static Java.Lang.String FEATURE_DetachedSurface { get { if (!_FEATURE_DetachedSurfaceReady) { _FEATURE_DetachedSurfaceContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_DetachedSurface"); _FEATURE_DetachedSurfaceReady = true; } return _FEATURE_DetachedSurfaceContent; } }
            private static Java.Lang.String _FEATURE_DetachedSurfaceContent = default;
            private static bool _FEATURE_DetachedSurfaceReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#FEATURE_DynamicColorAspects"/>
            /// </summary>
            public static Java.Lang.String FEATURE_DynamicColorAspects { get { if (!_FEATURE_DynamicColorAspectsReady) { _FEATURE_DynamicColorAspectsContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_DynamicColorAspects"); _FEATURE_DynamicColorAspectsReady = true; } return _FEATURE_DynamicColorAspectsContent; } }
            private static Java.Lang.String _FEATURE_DynamicColorAspectsContent = default;
            private static bool _FEATURE_DynamicColorAspectsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#FEATURE_DynamicTimestamp"/>
            /// </summary>
            public static Java.Lang.String FEATURE_DynamicTimestamp { get { if (!_FEATURE_DynamicTimestampReady) { _FEATURE_DynamicTimestampContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_DynamicTimestamp"); _FEATURE_DynamicTimestampReady = true; } return _FEATURE_DynamicTimestampContent; } }
            private static Java.Lang.String _FEATURE_DynamicTimestampContent = default;
            private static bool _FEATURE_DynamicTimestampReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#FEATURE_EncodingStatistics"/>
            /// </summary>
            public static Java.Lang.String FEATURE_EncodingStatistics { get { if (!_FEATURE_EncodingStatisticsReady) { _FEATURE_EncodingStatisticsContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_EncodingStatistics"); _FEATURE_EncodingStatisticsReady = true; } return _FEATURE_EncodingStatisticsContent; } }
            private static Java.Lang.String _FEATURE_EncodingStatisticsContent = default;
            private static bool _FEATURE_EncodingStatisticsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#FEATURE_FrameParsing"/>
            /// </summary>
            public static Java.Lang.String FEATURE_FrameParsing { get { if (!_FEATURE_FrameParsingReady) { _FEATURE_FrameParsingContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_FrameParsing"); _FEATURE_FrameParsingReady = true; } return _FEATURE_FrameParsingContent; } }
            private static Java.Lang.String _FEATURE_FrameParsingContent = default;
            private static bool _FEATURE_FrameParsingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#FEATURE_HdrEditing"/>
            /// </summary>
            public static Java.Lang.String FEATURE_HdrEditing { get { if (!_FEATURE_HdrEditingReady) { _FEATURE_HdrEditingContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_HdrEditing"); _FEATURE_HdrEditingReady = true; } return _FEATURE_HdrEditingContent; } }
            private static Java.Lang.String _FEATURE_HdrEditingContent = default;
            private static bool _FEATURE_HdrEditingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#FEATURE_HlgEditing"/>
            /// </summary>
            public static Java.Lang.String FEATURE_HlgEditing { get { if (!_FEATURE_HlgEditingReady) { _FEATURE_HlgEditingContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_HlgEditing"); _FEATURE_HlgEditingReady = true; } return _FEATURE_HlgEditingContent; } }
            private static Java.Lang.String _FEATURE_HlgEditingContent = default;
            private static bool _FEATURE_HlgEditingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#FEATURE_IntraRefresh"/>
            /// </summary>
            public static Java.Lang.String FEATURE_IntraRefresh { get { if (!_FEATURE_IntraRefreshReady) { _FEATURE_IntraRefreshContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_IntraRefresh"); _FEATURE_IntraRefreshReady = true; } return _FEATURE_IntraRefreshContent; } }
            private static Java.Lang.String _FEATURE_IntraRefreshContent = default;
            private static bool _FEATURE_IntraRefreshReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#FEATURE_LowLatency"/>
            /// </summary>
            public static Java.Lang.String FEATURE_LowLatency { get { if (!_FEATURE_LowLatencyReady) { _FEATURE_LowLatencyContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_LowLatency"); _FEATURE_LowLatencyReady = true; } return _FEATURE_LowLatencyContent; } }
            private static Java.Lang.String _FEATURE_LowLatencyContent = default;
            private static bool _FEATURE_LowLatencyReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#FEATURE_MultipleFrames"/>
            /// </summary>
            public static Java.Lang.String FEATURE_MultipleFrames { get { if (!_FEATURE_MultipleFramesReady) { _FEATURE_MultipleFramesContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_MultipleFrames"); _FEATURE_MultipleFramesReady = true; } return _FEATURE_MultipleFramesContent; } }
            private static Java.Lang.String _FEATURE_MultipleFramesContent = default;
            private static bool _FEATURE_MultipleFramesReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#FEATURE_PartialFrame"/>
            /// </summary>
            public static Java.Lang.String FEATURE_PartialFrame { get { if (!_FEATURE_PartialFrameReady) { _FEATURE_PartialFrameContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_PartialFrame"); _FEATURE_PartialFrameReady = true; } return _FEATURE_PartialFrameContent; } }
            private static Java.Lang.String _FEATURE_PartialFrameContent = default;
            private static bool _FEATURE_PartialFrameReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#FEATURE_QpBounds"/>
            /// </summary>
            public static Java.Lang.String FEATURE_QpBounds { get { if (!_FEATURE_QpBoundsReady) { _FEATURE_QpBoundsContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_QpBounds"); _FEATURE_QpBoundsReady = true; } return _FEATURE_QpBoundsContent; } }
            private static Java.Lang.String _FEATURE_QpBoundsContent = default;
            private static bool _FEATURE_QpBoundsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#FEATURE_Roi"/>
            /// </summary>
            public static Java.Lang.String FEATURE_Roi { get { if (!_FEATURE_RoiReady) { _FEATURE_RoiContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_Roi"); _FEATURE_RoiReady = true; } return _FEATURE_RoiContent; } }
            private static Java.Lang.String _FEATURE_RoiContent = default;
            private static bool _FEATURE_RoiReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#FEATURE_SecurePlayback"/>
            /// </summary>
            public static Java.Lang.String FEATURE_SecurePlayback { get { if (!_FEATURE_SecurePlaybackReady) { _FEATURE_SecurePlaybackContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_SecurePlayback"); _FEATURE_SecurePlaybackReady = true; } return _FEATURE_SecurePlaybackContent; } }
            private static Java.Lang.String _FEATURE_SecurePlaybackContent = default;
            private static bool _FEATURE_SecurePlaybackReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#FEATURE_TunneledPlayback"/>
            /// </summary>
            public static Java.Lang.String FEATURE_TunneledPlayback { get { if (!_FEATURE_TunneledPlaybackReady) { _FEATURE_TunneledPlaybackContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_TunneledPlayback"); _FEATURE_TunneledPlaybackReady = true; } return _FEATURE_TunneledPlaybackContent; } }
            private static Java.Lang.String _FEATURE_TunneledPlaybackContent = default;
            private static bool _FEATURE_TunneledPlaybackReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#createFromProfileLevel(java.lang.String,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.MediaCodecInfo.CodecCapabilities"/></returns>
            public static Android.Media.MediaCodecInfo.CodecCapabilities CreateFromProfileLevel(Java.Lang.String arg0, int arg1, int arg2)
            {
                return SExecuteWithSignature<Android.Media.MediaCodecInfo.CodecCapabilities>(LocalBridgeClazz, "createFromProfileLevel", "(Ljava/lang/String;II)Landroid/media/MediaCodecInfo$CodecCapabilities;", arg0, arg1, arg2);
            }
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#getAudioCapabilities()"/>
            /// </summary>
            /// <returns><see cref="Android.Media.MediaCodecInfo.AudioCapabilities"/></returns>
            public Android.Media.MediaCodecInfo.AudioCapabilities GetAudioCapabilities()
            {
                return IExecuteWithSignature<Android.Media.MediaCodecInfo.AudioCapabilities>("getAudioCapabilities", "()Landroid/media/MediaCodecInfo$AudioCapabilities;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#getEncoderCapabilities()"/>
            /// </summary>
            /// <returns><see cref="Android.Media.MediaCodecInfo.EncoderCapabilities"/></returns>
            public Android.Media.MediaCodecInfo.EncoderCapabilities GetEncoderCapabilities()
            {
                return IExecuteWithSignature<Android.Media.MediaCodecInfo.EncoderCapabilities>("getEncoderCapabilities", "()Landroid/media/MediaCodecInfo$EncoderCapabilities;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#getVideoCapabilities()"/>
            /// </summary>
            /// <returns><see cref="Android.Media.MediaCodecInfo.VideoCapabilities"/></returns>
            public Android.Media.MediaCodecInfo.VideoCapabilities GetVideoCapabilities()
            {
                return IExecuteWithSignature<Android.Media.MediaCodecInfo.VideoCapabilities>("getVideoCapabilities", "()Landroid/media/MediaCodecInfo$VideoCapabilities;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#getDefaultFormat()"/>
            /// </summary>
            /// <returns><see cref="Android.Media.MediaFormat"/></returns>
            public Android.Media.MediaFormat GetDefaultFormat()
            {
                return IExecuteWithSignature<Android.Media.MediaFormat>("getDefaultFormat", "()Landroid/media/MediaFormat;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#isFeatureRequired(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool IsFeatureRequired(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<bool>("isFeatureRequired", "(Ljava/lang/String;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#isFeatureSupported(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool IsFeatureSupported(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<bool>("isFeatureSupported", "(Ljava/lang/String;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#isFormatSupported(android.media.MediaFormat)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaFormat"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool IsFormatSupported(Android.Media.MediaFormat arg0)
            {
                return IExecuteWithSignature<bool>("isFormatSupported", "(Landroid/media/MediaFormat;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#getMaxSupportedInstances()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetMaxSupportedInstances()
            {
                return IExecuteWithSignature<int>("getMaxSupportedInstances", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#getMimeType()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetMimeType()
            {
                return IExecuteWithSignature<Java.Lang.String>("getMimeType", "()Ljava/lang/String;");
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region CodecProfileLevel implementation
        public partial class CodecProfileLevel
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#level"/>
            /// </summary>
            public int level { get { return IGetField<int>("level"); } set { ISetField("level", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#profile"/>
            /// </summary>
            public int profile { get { return IGetField<int>("profile"); } set { ISetField("profile", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AACObjectELD"/>
            /// </summary>
            public static int AACObjectELD { get { if (!_AACObjectELDReady) { _AACObjectELDContent = SGetField<int>(LocalBridgeClazz, "AACObjectELD"); _AACObjectELDReady = true; } return _AACObjectELDContent; } }
            private static int _AACObjectELDContent = default;
            private static bool _AACObjectELDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AACObjectERLC"/>
            /// </summary>
            public static int AACObjectERLC { get { if (!_AACObjectERLCReady) { _AACObjectERLCContent = SGetField<int>(LocalBridgeClazz, "AACObjectERLC"); _AACObjectERLCReady = true; } return _AACObjectERLCContent; } }
            private static int _AACObjectERLCContent = default;
            private static bool _AACObjectERLCReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AACObjectERScalable"/>
            /// </summary>
            public static int AACObjectERScalable { get { if (!_AACObjectERScalableReady) { _AACObjectERScalableContent = SGetField<int>(LocalBridgeClazz, "AACObjectERScalable"); _AACObjectERScalableReady = true; } return _AACObjectERScalableContent; } }
            private static int _AACObjectERScalableContent = default;
            private static bool _AACObjectERScalableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AACObjectHE"/>
            /// </summary>
            public static int AACObjectHE { get { if (!_AACObjectHEReady) { _AACObjectHEContent = SGetField<int>(LocalBridgeClazz, "AACObjectHE"); _AACObjectHEReady = true; } return _AACObjectHEContent; } }
            private static int _AACObjectHEContent = default;
            private static bool _AACObjectHEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AACObjectHE_PS"/>
            /// </summary>
            public static int AACObjectHE_PS { get { if (!_AACObjectHE_PSReady) { _AACObjectHE_PSContent = SGetField<int>(LocalBridgeClazz, "AACObjectHE_PS"); _AACObjectHE_PSReady = true; } return _AACObjectHE_PSContent; } }
            private static int _AACObjectHE_PSContent = default;
            private static bool _AACObjectHE_PSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AACObjectLC"/>
            /// </summary>
            public static int AACObjectLC { get { if (!_AACObjectLCReady) { _AACObjectLCContent = SGetField<int>(LocalBridgeClazz, "AACObjectLC"); _AACObjectLCReady = true; } return _AACObjectLCContent; } }
            private static int _AACObjectLCContent = default;
            private static bool _AACObjectLCReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AACObjectLD"/>
            /// </summary>
            public static int AACObjectLD { get { if (!_AACObjectLDReady) { _AACObjectLDContent = SGetField<int>(LocalBridgeClazz, "AACObjectLD"); _AACObjectLDReady = true; } return _AACObjectLDContent; } }
            private static int _AACObjectLDContent = default;
            private static bool _AACObjectLDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AACObjectLTP"/>
            /// </summary>
            public static int AACObjectLTP { get { if (!_AACObjectLTPReady) { _AACObjectLTPContent = SGetField<int>(LocalBridgeClazz, "AACObjectLTP"); _AACObjectLTPReady = true; } return _AACObjectLTPContent; } }
            private static int _AACObjectLTPContent = default;
            private static bool _AACObjectLTPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AACObjectMain"/>
            /// </summary>
            public static int AACObjectMain { get { if (!_AACObjectMainReady) { _AACObjectMainContent = SGetField<int>(LocalBridgeClazz, "AACObjectMain"); _AACObjectMainReady = true; } return _AACObjectMainContent; } }
            private static int _AACObjectMainContent = default;
            private static bool _AACObjectMainReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AACObjectScalable"/>
            /// </summary>
            public static int AACObjectScalable { get { if (!_AACObjectScalableReady) { _AACObjectScalableContent = SGetField<int>(LocalBridgeClazz, "AACObjectScalable"); _AACObjectScalableReady = true; } return _AACObjectScalableContent; } }
            private static int _AACObjectScalableContent = default;
            private static bool _AACObjectScalableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AACObjectSSR"/>
            /// </summary>
            public static int AACObjectSSR { get { if (!_AACObjectSSRReady) { _AACObjectSSRContent = SGetField<int>(LocalBridgeClazz, "AACObjectSSR"); _AACObjectSSRReady = true; } return _AACObjectSSRContent; } }
            private static int _AACObjectSSRContent = default;
            private static bool _AACObjectSSRReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AACObjectXHE"/>
            /// </summary>
            public static int AACObjectXHE { get { if (!_AACObjectXHEReady) { _AACObjectXHEContent = SGetField<int>(LocalBridgeClazz, "AACObjectXHE"); _AACObjectXHEReady = true; } return _AACObjectXHEContent; } }
            private static int _AACObjectXHEContent = default;
            private static bool _AACObjectXHEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AC4Level0"/>
            /// </summary>
            public static int AC4Level0 { get { if (!_AC4Level0Ready) { _AC4Level0Content = SGetField<int>(LocalBridgeClazz, "AC4Level0"); _AC4Level0Ready = true; } return _AC4Level0Content; } }
            private static int _AC4Level0Content = default;
            private static bool _AC4Level0Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AC4Level1"/>
            /// </summary>
            public static int AC4Level1 { get { if (!_AC4Level1Ready) { _AC4Level1Content = SGetField<int>(LocalBridgeClazz, "AC4Level1"); _AC4Level1Ready = true; } return _AC4Level1Content; } }
            private static int _AC4Level1Content = default;
            private static bool _AC4Level1Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AC4Level2"/>
            /// </summary>
            public static int AC4Level2 { get { if (!_AC4Level2Ready) { _AC4Level2Content = SGetField<int>(LocalBridgeClazz, "AC4Level2"); _AC4Level2Ready = true; } return _AC4Level2Content; } }
            private static int _AC4Level2Content = default;
            private static bool _AC4Level2Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AC4Level3"/>
            /// </summary>
            public static int AC4Level3 { get { if (!_AC4Level3Ready) { _AC4Level3Content = SGetField<int>(LocalBridgeClazz, "AC4Level3"); _AC4Level3Ready = true; } return _AC4Level3Content; } }
            private static int _AC4Level3Content = default;
            private static bool _AC4Level3Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AC4Level4"/>
            /// </summary>
            public static int AC4Level4 { get { if (!_AC4Level4Ready) { _AC4Level4Content = SGetField<int>(LocalBridgeClazz, "AC4Level4"); _AC4Level4Ready = true; } return _AC4Level4Content; } }
            private static int _AC4Level4Content = default;
            private static bool _AC4Level4Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AC4Profile00"/>
            /// </summary>
            public static int AC4Profile00 { get { if (!_AC4Profile00Ready) { _AC4Profile00Content = SGetField<int>(LocalBridgeClazz, "AC4Profile00"); _AC4Profile00Ready = true; } return _AC4Profile00Content; } }
            private static int _AC4Profile00Content = default;
            private static bool _AC4Profile00Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AC4Profile10"/>
            /// </summary>
            public static int AC4Profile10 { get { if (!_AC4Profile10Ready) { _AC4Profile10Content = SGetField<int>(LocalBridgeClazz, "AC4Profile10"); _AC4Profile10Ready = true; } return _AC4Profile10Content; } }
            private static int _AC4Profile10Content = default;
            private static bool _AC4Profile10Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AC4Profile11"/>
            /// </summary>
            public static int AC4Profile11 { get { if (!_AC4Profile11Ready) { _AC4Profile11Content = SGetField<int>(LocalBridgeClazz, "AC4Profile11"); _AC4Profile11Ready = true; } return _AC4Profile11Content; } }
            private static int _AC4Profile11Content = default;
            private static bool _AC4Profile11Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AC4Profile21"/>
            /// </summary>
            public static int AC4Profile21 { get { if (!_AC4Profile21Ready) { _AC4Profile21Content = SGetField<int>(LocalBridgeClazz, "AC4Profile21"); _AC4Profile21Ready = true; } return _AC4Profile21Content; } }
            private static int _AC4Profile21Content = default;
            private static bool _AC4Profile21Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AC4Profile22"/>
            /// </summary>
            public static int AC4Profile22 { get { if (!_AC4Profile22Ready) { _AC4Profile22Content = SGetField<int>(LocalBridgeClazz, "AC4Profile22"); _AC4Profile22Ready = true; } return _AC4Profile22Content; } }
            private static int _AC4Profile22Content = default;
            private static bool _AC4Profile22Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AV1Level2"/>
            /// </summary>
            public static int AV1Level2 { get { if (!_AV1Level2Ready) { _AV1Level2Content = SGetField<int>(LocalBridgeClazz, "AV1Level2"); _AV1Level2Ready = true; } return _AV1Level2Content; } }
            private static int _AV1Level2Content = default;
            private static bool _AV1Level2Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AV1Level21"/>
            /// </summary>
            public static int AV1Level21 { get { if (!_AV1Level21Ready) { _AV1Level21Content = SGetField<int>(LocalBridgeClazz, "AV1Level21"); _AV1Level21Ready = true; } return _AV1Level21Content; } }
            private static int _AV1Level21Content = default;
            private static bool _AV1Level21Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AV1Level22"/>
            /// </summary>
            public static int AV1Level22 { get { if (!_AV1Level22Ready) { _AV1Level22Content = SGetField<int>(LocalBridgeClazz, "AV1Level22"); _AV1Level22Ready = true; } return _AV1Level22Content; } }
            private static int _AV1Level22Content = default;
            private static bool _AV1Level22Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AV1Level23"/>
            /// </summary>
            public static int AV1Level23 { get { if (!_AV1Level23Ready) { _AV1Level23Content = SGetField<int>(LocalBridgeClazz, "AV1Level23"); _AV1Level23Ready = true; } return _AV1Level23Content; } }
            private static int _AV1Level23Content = default;
            private static bool _AV1Level23Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AV1Level3"/>
            /// </summary>
            public static int AV1Level3 { get { if (!_AV1Level3Ready) { _AV1Level3Content = SGetField<int>(LocalBridgeClazz, "AV1Level3"); _AV1Level3Ready = true; } return _AV1Level3Content; } }
            private static int _AV1Level3Content = default;
            private static bool _AV1Level3Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AV1Level31"/>
            /// </summary>
            public static int AV1Level31 { get { if (!_AV1Level31Ready) { _AV1Level31Content = SGetField<int>(LocalBridgeClazz, "AV1Level31"); _AV1Level31Ready = true; } return _AV1Level31Content; } }
            private static int _AV1Level31Content = default;
            private static bool _AV1Level31Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AV1Level32"/>
            /// </summary>
            public static int AV1Level32 { get { if (!_AV1Level32Ready) { _AV1Level32Content = SGetField<int>(LocalBridgeClazz, "AV1Level32"); _AV1Level32Ready = true; } return _AV1Level32Content; } }
            private static int _AV1Level32Content = default;
            private static bool _AV1Level32Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AV1Level33"/>
            /// </summary>
            public static int AV1Level33 { get { if (!_AV1Level33Ready) { _AV1Level33Content = SGetField<int>(LocalBridgeClazz, "AV1Level33"); _AV1Level33Ready = true; } return _AV1Level33Content; } }
            private static int _AV1Level33Content = default;
            private static bool _AV1Level33Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AV1Level4"/>
            /// </summary>
            public static int AV1Level4 { get { if (!_AV1Level4Ready) { _AV1Level4Content = SGetField<int>(LocalBridgeClazz, "AV1Level4"); _AV1Level4Ready = true; } return _AV1Level4Content; } }
            private static int _AV1Level4Content = default;
            private static bool _AV1Level4Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AV1Level41"/>
            /// </summary>
            public static int AV1Level41 { get { if (!_AV1Level41Ready) { _AV1Level41Content = SGetField<int>(LocalBridgeClazz, "AV1Level41"); _AV1Level41Ready = true; } return _AV1Level41Content; } }
            private static int _AV1Level41Content = default;
            private static bool _AV1Level41Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AV1Level42"/>
            /// </summary>
            public static int AV1Level42 { get { if (!_AV1Level42Ready) { _AV1Level42Content = SGetField<int>(LocalBridgeClazz, "AV1Level42"); _AV1Level42Ready = true; } return _AV1Level42Content; } }
            private static int _AV1Level42Content = default;
            private static bool _AV1Level42Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AV1Level43"/>
            /// </summary>
            public static int AV1Level43 { get { if (!_AV1Level43Ready) { _AV1Level43Content = SGetField<int>(LocalBridgeClazz, "AV1Level43"); _AV1Level43Ready = true; } return _AV1Level43Content; } }
            private static int _AV1Level43Content = default;
            private static bool _AV1Level43Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AV1Level5"/>
            /// </summary>
            public static int AV1Level5 { get { if (!_AV1Level5Ready) { _AV1Level5Content = SGetField<int>(LocalBridgeClazz, "AV1Level5"); _AV1Level5Ready = true; } return _AV1Level5Content; } }
            private static int _AV1Level5Content = default;
            private static bool _AV1Level5Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AV1Level51"/>
            /// </summary>
            public static int AV1Level51 { get { if (!_AV1Level51Ready) { _AV1Level51Content = SGetField<int>(LocalBridgeClazz, "AV1Level51"); _AV1Level51Ready = true; } return _AV1Level51Content; } }
            private static int _AV1Level51Content = default;
            private static bool _AV1Level51Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AV1Level52"/>
            /// </summary>
            public static int AV1Level52 { get { if (!_AV1Level52Ready) { _AV1Level52Content = SGetField<int>(LocalBridgeClazz, "AV1Level52"); _AV1Level52Ready = true; } return _AV1Level52Content; } }
            private static int _AV1Level52Content = default;
            private static bool _AV1Level52Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AV1Level53"/>
            /// </summary>
            public static int AV1Level53 { get { if (!_AV1Level53Ready) { _AV1Level53Content = SGetField<int>(LocalBridgeClazz, "AV1Level53"); _AV1Level53Ready = true; } return _AV1Level53Content; } }
            private static int _AV1Level53Content = default;
            private static bool _AV1Level53Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AV1Level6"/>
            /// </summary>
            public static int AV1Level6 { get { if (!_AV1Level6Ready) { _AV1Level6Content = SGetField<int>(LocalBridgeClazz, "AV1Level6"); _AV1Level6Ready = true; } return _AV1Level6Content; } }
            private static int _AV1Level6Content = default;
            private static bool _AV1Level6Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AV1Level61"/>
            /// </summary>
            public static int AV1Level61 { get { if (!_AV1Level61Ready) { _AV1Level61Content = SGetField<int>(LocalBridgeClazz, "AV1Level61"); _AV1Level61Ready = true; } return _AV1Level61Content; } }
            private static int _AV1Level61Content = default;
            private static bool _AV1Level61Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AV1Level62"/>
            /// </summary>
            public static int AV1Level62 { get { if (!_AV1Level62Ready) { _AV1Level62Content = SGetField<int>(LocalBridgeClazz, "AV1Level62"); _AV1Level62Ready = true; } return _AV1Level62Content; } }
            private static int _AV1Level62Content = default;
            private static bool _AV1Level62Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AV1Level63"/>
            /// </summary>
            public static int AV1Level63 { get { if (!_AV1Level63Ready) { _AV1Level63Content = SGetField<int>(LocalBridgeClazz, "AV1Level63"); _AV1Level63Ready = true; } return _AV1Level63Content; } }
            private static int _AV1Level63Content = default;
            private static bool _AV1Level63Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AV1Level7"/>
            /// </summary>
            public static int AV1Level7 { get { if (!_AV1Level7Ready) { _AV1Level7Content = SGetField<int>(LocalBridgeClazz, "AV1Level7"); _AV1Level7Ready = true; } return _AV1Level7Content; } }
            private static int _AV1Level7Content = default;
            private static bool _AV1Level7Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AV1Level71"/>
            /// </summary>
            public static int AV1Level71 { get { if (!_AV1Level71Ready) { _AV1Level71Content = SGetField<int>(LocalBridgeClazz, "AV1Level71"); _AV1Level71Ready = true; } return _AV1Level71Content; } }
            private static int _AV1Level71Content = default;
            private static bool _AV1Level71Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AV1Level72"/>
            /// </summary>
            public static int AV1Level72 { get { if (!_AV1Level72Ready) { _AV1Level72Content = SGetField<int>(LocalBridgeClazz, "AV1Level72"); _AV1Level72Ready = true; } return _AV1Level72Content; } }
            private static int _AV1Level72Content = default;
            private static bool _AV1Level72Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AV1Level73"/>
            /// </summary>
            public static int AV1Level73 { get { if (!_AV1Level73Ready) { _AV1Level73Content = SGetField<int>(LocalBridgeClazz, "AV1Level73"); _AV1Level73Ready = true; } return _AV1Level73Content; } }
            private static int _AV1Level73Content = default;
            private static bool _AV1Level73Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AV1ProfileMain10"/>
            /// </summary>
            public static int AV1ProfileMain10 { get { if (!_AV1ProfileMain10Ready) { _AV1ProfileMain10Content = SGetField<int>(LocalBridgeClazz, "AV1ProfileMain10"); _AV1ProfileMain10Ready = true; } return _AV1ProfileMain10Content; } }
            private static int _AV1ProfileMain10Content = default;
            private static bool _AV1ProfileMain10Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AV1ProfileMain10HDR10"/>
            /// </summary>
            public static int AV1ProfileMain10HDR10 { get { if (!_AV1ProfileMain10HDR10Ready) { _AV1ProfileMain10HDR10Content = SGetField<int>(LocalBridgeClazz, "AV1ProfileMain10HDR10"); _AV1ProfileMain10HDR10Ready = true; } return _AV1ProfileMain10HDR10Content; } }
            private static int _AV1ProfileMain10HDR10Content = default;
            private static bool _AV1ProfileMain10HDR10Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AV1ProfileMain10HDR10Plus"/>
            /// </summary>
            public static int AV1ProfileMain10HDR10Plus { get { if (!_AV1ProfileMain10HDR10PlusReady) { _AV1ProfileMain10HDR10PlusContent = SGetField<int>(LocalBridgeClazz, "AV1ProfileMain10HDR10Plus"); _AV1ProfileMain10HDR10PlusReady = true; } return _AV1ProfileMain10HDR10PlusContent; } }
            private static int _AV1ProfileMain10HDR10PlusContent = default;
            private static bool _AV1ProfileMain10HDR10PlusReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AV1ProfileMain8"/>
            /// </summary>
            public static int AV1ProfileMain8 { get { if (!_AV1ProfileMain8Ready) { _AV1ProfileMain8Content = SGetField<int>(LocalBridgeClazz, "AV1ProfileMain8"); _AV1ProfileMain8Ready = true; } return _AV1ProfileMain8Content; } }
            private static int _AV1ProfileMain8Content = default;
            private static bool _AV1ProfileMain8Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AVCLevel1"/>
            /// </summary>
            public static int AVCLevel1 { get { if (!_AVCLevel1Ready) { _AVCLevel1Content = SGetField<int>(LocalBridgeClazz, "AVCLevel1"); _AVCLevel1Ready = true; } return _AVCLevel1Content; } }
            private static int _AVCLevel1Content = default;
            private static bool _AVCLevel1Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AVCLevel11"/>
            /// </summary>
            public static int AVCLevel11 { get { if (!_AVCLevel11Ready) { _AVCLevel11Content = SGetField<int>(LocalBridgeClazz, "AVCLevel11"); _AVCLevel11Ready = true; } return _AVCLevel11Content; } }
            private static int _AVCLevel11Content = default;
            private static bool _AVCLevel11Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AVCLevel12"/>
            /// </summary>
            public static int AVCLevel12 { get { if (!_AVCLevel12Ready) { _AVCLevel12Content = SGetField<int>(LocalBridgeClazz, "AVCLevel12"); _AVCLevel12Ready = true; } return _AVCLevel12Content; } }
            private static int _AVCLevel12Content = default;
            private static bool _AVCLevel12Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AVCLevel13"/>
            /// </summary>
            public static int AVCLevel13 { get { if (!_AVCLevel13Ready) { _AVCLevel13Content = SGetField<int>(LocalBridgeClazz, "AVCLevel13"); _AVCLevel13Ready = true; } return _AVCLevel13Content; } }
            private static int _AVCLevel13Content = default;
            private static bool _AVCLevel13Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AVCLevel1b"/>
            /// </summary>
            public static int AVCLevel1b { get { if (!_AVCLevel1bReady) { _AVCLevel1bContent = SGetField<int>(LocalBridgeClazz, "AVCLevel1b"); _AVCLevel1bReady = true; } return _AVCLevel1bContent; } }
            private static int _AVCLevel1bContent = default;
            private static bool _AVCLevel1bReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AVCLevel2"/>
            /// </summary>
            public static int AVCLevel2 { get { if (!_AVCLevel2Ready) { _AVCLevel2Content = SGetField<int>(LocalBridgeClazz, "AVCLevel2"); _AVCLevel2Ready = true; } return _AVCLevel2Content; } }
            private static int _AVCLevel2Content = default;
            private static bool _AVCLevel2Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AVCLevel21"/>
            /// </summary>
            public static int AVCLevel21 { get { if (!_AVCLevel21Ready) { _AVCLevel21Content = SGetField<int>(LocalBridgeClazz, "AVCLevel21"); _AVCLevel21Ready = true; } return _AVCLevel21Content; } }
            private static int _AVCLevel21Content = default;
            private static bool _AVCLevel21Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AVCLevel22"/>
            /// </summary>
            public static int AVCLevel22 { get { if (!_AVCLevel22Ready) { _AVCLevel22Content = SGetField<int>(LocalBridgeClazz, "AVCLevel22"); _AVCLevel22Ready = true; } return _AVCLevel22Content; } }
            private static int _AVCLevel22Content = default;
            private static bool _AVCLevel22Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AVCLevel3"/>
            /// </summary>
            public static int AVCLevel3 { get { if (!_AVCLevel3Ready) { _AVCLevel3Content = SGetField<int>(LocalBridgeClazz, "AVCLevel3"); _AVCLevel3Ready = true; } return _AVCLevel3Content; } }
            private static int _AVCLevel3Content = default;
            private static bool _AVCLevel3Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AVCLevel31"/>
            /// </summary>
            public static int AVCLevel31 { get { if (!_AVCLevel31Ready) { _AVCLevel31Content = SGetField<int>(LocalBridgeClazz, "AVCLevel31"); _AVCLevel31Ready = true; } return _AVCLevel31Content; } }
            private static int _AVCLevel31Content = default;
            private static bool _AVCLevel31Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AVCLevel32"/>
            /// </summary>
            public static int AVCLevel32 { get { if (!_AVCLevel32Ready) { _AVCLevel32Content = SGetField<int>(LocalBridgeClazz, "AVCLevel32"); _AVCLevel32Ready = true; } return _AVCLevel32Content; } }
            private static int _AVCLevel32Content = default;
            private static bool _AVCLevel32Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AVCLevel4"/>
            /// </summary>
            public static int AVCLevel4 { get { if (!_AVCLevel4Ready) { _AVCLevel4Content = SGetField<int>(LocalBridgeClazz, "AVCLevel4"); _AVCLevel4Ready = true; } return _AVCLevel4Content; } }
            private static int _AVCLevel4Content = default;
            private static bool _AVCLevel4Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AVCLevel41"/>
            /// </summary>
            public static int AVCLevel41 { get { if (!_AVCLevel41Ready) { _AVCLevel41Content = SGetField<int>(LocalBridgeClazz, "AVCLevel41"); _AVCLevel41Ready = true; } return _AVCLevel41Content; } }
            private static int _AVCLevel41Content = default;
            private static bool _AVCLevel41Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AVCLevel42"/>
            /// </summary>
            public static int AVCLevel42 { get { if (!_AVCLevel42Ready) { _AVCLevel42Content = SGetField<int>(LocalBridgeClazz, "AVCLevel42"); _AVCLevel42Ready = true; } return _AVCLevel42Content; } }
            private static int _AVCLevel42Content = default;
            private static bool _AVCLevel42Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AVCLevel5"/>
            /// </summary>
            public static int AVCLevel5 { get { if (!_AVCLevel5Ready) { _AVCLevel5Content = SGetField<int>(LocalBridgeClazz, "AVCLevel5"); _AVCLevel5Ready = true; } return _AVCLevel5Content; } }
            private static int _AVCLevel5Content = default;
            private static bool _AVCLevel5Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AVCLevel51"/>
            /// </summary>
            public static int AVCLevel51 { get { if (!_AVCLevel51Ready) { _AVCLevel51Content = SGetField<int>(LocalBridgeClazz, "AVCLevel51"); _AVCLevel51Ready = true; } return _AVCLevel51Content; } }
            private static int _AVCLevel51Content = default;
            private static bool _AVCLevel51Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AVCLevel52"/>
            /// </summary>
            public static int AVCLevel52 { get { if (!_AVCLevel52Ready) { _AVCLevel52Content = SGetField<int>(LocalBridgeClazz, "AVCLevel52"); _AVCLevel52Ready = true; } return _AVCLevel52Content; } }
            private static int _AVCLevel52Content = default;
            private static bool _AVCLevel52Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AVCLevel6"/>
            /// </summary>
            public static int AVCLevel6 { get { if (!_AVCLevel6Ready) { _AVCLevel6Content = SGetField<int>(LocalBridgeClazz, "AVCLevel6"); _AVCLevel6Ready = true; } return _AVCLevel6Content; } }
            private static int _AVCLevel6Content = default;
            private static bool _AVCLevel6Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AVCLevel61"/>
            /// </summary>
            public static int AVCLevel61 { get { if (!_AVCLevel61Ready) { _AVCLevel61Content = SGetField<int>(LocalBridgeClazz, "AVCLevel61"); _AVCLevel61Ready = true; } return _AVCLevel61Content; } }
            private static int _AVCLevel61Content = default;
            private static bool _AVCLevel61Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AVCLevel62"/>
            /// </summary>
            public static int AVCLevel62 { get { if (!_AVCLevel62Ready) { _AVCLevel62Content = SGetField<int>(LocalBridgeClazz, "AVCLevel62"); _AVCLevel62Ready = true; } return _AVCLevel62Content; } }
            private static int _AVCLevel62Content = default;
            private static bool _AVCLevel62Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AVCProfileBaseline"/>
            /// </summary>
            public static int AVCProfileBaseline { get { if (!_AVCProfileBaselineReady) { _AVCProfileBaselineContent = SGetField<int>(LocalBridgeClazz, "AVCProfileBaseline"); _AVCProfileBaselineReady = true; } return _AVCProfileBaselineContent; } }
            private static int _AVCProfileBaselineContent = default;
            private static bool _AVCProfileBaselineReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AVCProfileConstrainedBaseline"/>
            /// </summary>
            public static int AVCProfileConstrainedBaseline { get { if (!_AVCProfileConstrainedBaselineReady) { _AVCProfileConstrainedBaselineContent = SGetField<int>(LocalBridgeClazz, "AVCProfileConstrainedBaseline"); _AVCProfileConstrainedBaselineReady = true; } return _AVCProfileConstrainedBaselineContent; } }
            private static int _AVCProfileConstrainedBaselineContent = default;
            private static bool _AVCProfileConstrainedBaselineReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AVCProfileConstrainedHigh"/>
            /// </summary>
            public static int AVCProfileConstrainedHigh { get { if (!_AVCProfileConstrainedHighReady) { _AVCProfileConstrainedHighContent = SGetField<int>(LocalBridgeClazz, "AVCProfileConstrainedHigh"); _AVCProfileConstrainedHighReady = true; } return _AVCProfileConstrainedHighContent; } }
            private static int _AVCProfileConstrainedHighContent = default;
            private static bool _AVCProfileConstrainedHighReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AVCProfileExtended"/>
            /// </summary>
            public static int AVCProfileExtended { get { if (!_AVCProfileExtendedReady) { _AVCProfileExtendedContent = SGetField<int>(LocalBridgeClazz, "AVCProfileExtended"); _AVCProfileExtendedReady = true; } return _AVCProfileExtendedContent; } }
            private static int _AVCProfileExtendedContent = default;
            private static bool _AVCProfileExtendedReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AVCProfileHigh"/>
            /// </summary>
            public static int AVCProfileHigh { get { if (!_AVCProfileHighReady) { _AVCProfileHighContent = SGetField<int>(LocalBridgeClazz, "AVCProfileHigh"); _AVCProfileHighReady = true; } return _AVCProfileHighContent; } }
            private static int _AVCProfileHighContent = default;
            private static bool _AVCProfileHighReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AVCProfileHigh10"/>
            /// </summary>
            public static int AVCProfileHigh10 { get { if (!_AVCProfileHigh10Ready) { _AVCProfileHigh10Content = SGetField<int>(LocalBridgeClazz, "AVCProfileHigh10"); _AVCProfileHigh10Ready = true; } return _AVCProfileHigh10Content; } }
            private static int _AVCProfileHigh10Content = default;
            private static bool _AVCProfileHigh10Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AVCProfileHigh422"/>
            /// </summary>
            public static int AVCProfileHigh422 { get { if (!_AVCProfileHigh422Ready) { _AVCProfileHigh422Content = SGetField<int>(LocalBridgeClazz, "AVCProfileHigh422"); _AVCProfileHigh422Ready = true; } return _AVCProfileHigh422Content; } }
            private static int _AVCProfileHigh422Content = default;
            private static bool _AVCProfileHigh422Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AVCProfileHigh444"/>
            /// </summary>
            public static int AVCProfileHigh444 { get { if (!_AVCProfileHigh444Ready) { _AVCProfileHigh444Content = SGetField<int>(LocalBridgeClazz, "AVCProfileHigh444"); _AVCProfileHigh444Ready = true; } return _AVCProfileHigh444Content; } }
            private static int _AVCProfileHigh444Content = default;
            private static bool _AVCProfileHigh444Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#AVCProfileMain"/>
            /// </summary>
            public static int AVCProfileMain { get { if (!_AVCProfileMainReady) { _AVCProfileMainContent = SGetField<int>(LocalBridgeClazz, "AVCProfileMain"); _AVCProfileMainReady = true; } return _AVCProfileMainContent; } }
            private static int _AVCProfileMainContent = default;
            private static bool _AVCProfileMainReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#DolbyVisionLevel8k30"/>
            /// </summary>
            public static int DolbyVisionLevel8k30 { get { if (!_DolbyVisionLevel8k30Ready) { _DolbyVisionLevel8k30Content = SGetField<int>(LocalBridgeClazz, "DolbyVisionLevel8k30"); _DolbyVisionLevel8k30Ready = true; } return _DolbyVisionLevel8k30Content; } }
            private static int _DolbyVisionLevel8k30Content = default;
            private static bool _DolbyVisionLevel8k30Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#DolbyVisionLevel8k60"/>
            /// </summary>
            public static int DolbyVisionLevel8k60 { get { if (!_DolbyVisionLevel8k60Ready) { _DolbyVisionLevel8k60Content = SGetField<int>(LocalBridgeClazz, "DolbyVisionLevel8k60"); _DolbyVisionLevel8k60Ready = true; } return _DolbyVisionLevel8k60Content; } }
            private static int _DolbyVisionLevel8k60Content = default;
            private static bool _DolbyVisionLevel8k60Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#DolbyVisionLevelFhd24"/>
            /// </summary>
            public static int DolbyVisionLevelFhd24 { get { if (!_DolbyVisionLevelFhd24Ready) { _DolbyVisionLevelFhd24Content = SGetField<int>(LocalBridgeClazz, "DolbyVisionLevelFhd24"); _DolbyVisionLevelFhd24Ready = true; } return _DolbyVisionLevelFhd24Content; } }
            private static int _DolbyVisionLevelFhd24Content = default;
            private static bool _DolbyVisionLevelFhd24Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#DolbyVisionLevelFhd30"/>
            /// </summary>
            public static int DolbyVisionLevelFhd30 { get { if (!_DolbyVisionLevelFhd30Ready) { _DolbyVisionLevelFhd30Content = SGetField<int>(LocalBridgeClazz, "DolbyVisionLevelFhd30"); _DolbyVisionLevelFhd30Ready = true; } return _DolbyVisionLevelFhd30Content; } }
            private static int _DolbyVisionLevelFhd30Content = default;
            private static bool _DolbyVisionLevelFhd30Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#DolbyVisionLevelFhd60"/>
            /// </summary>
            public static int DolbyVisionLevelFhd60 { get { if (!_DolbyVisionLevelFhd60Ready) { _DolbyVisionLevelFhd60Content = SGetField<int>(LocalBridgeClazz, "DolbyVisionLevelFhd60"); _DolbyVisionLevelFhd60Ready = true; } return _DolbyVisionLevelFhd60Content; } }
            private static int _DolbyVisionLevelFhd60Content = default;
            private static bool _DolbyVisionLevelFhd60Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#DolbyVisionLevelHd24"/>
            /// </summary>
            public static int DolbyVisionLevelHd24 { get { if (!_DolbyVisionLevelHd24Ready) { _DolbyVisionLevelHd24Content = SGetField<int>(LocalBridgeClazz, "DolbyVisionLevelHd24"); _DolbyVisionLevelHd24Ready = true; } return _DolbyVisionLevelHd24Content; } }
            private static int _DolbyVisionLevelHd24Content = default;
            private static bool _DolbyVisionLevelHd24Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#DolbyVisionLevelHd30"/>
            /// </summary>
            public static int DolbyVisionLevelHd30 { get { if (!_DolbyVisionLevelHd30Ready) { _DolbyVisionLevelHd30Content = SGetField<int>(LocalBridgeClazz, "DolbyVisionLevelHd30"); _DolbyVisionLevelHd30Ready = true; } return _DolbyVisionLevelHd30Content; } }
            private static int _DolbyVisionLevelHd30Content = default;
            private static bool _DolbyVisionLevelHd30Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#DolbyVisionLevelUhd120"/>
            /// </summary>
            public static int DolbyVisionLevelUhd120 { get { if (!_DolbyVisionLevelUhd120Ready) { _DolbyVisionLevelUhd120Content = SGetField<int>(LocalBridgeClazz, "DolbyVisionLevelUhd120"); _DolbyVisionLevelUhd120Ready = true; } return _DolbyVisionLevelUhd120Content; } }
            private static int _DolbyVisionLevelUhd120Content = default;
            private static bool _DolbyVisionLevelUhd120Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#DolbyVisionLevelUhd24"/>
            /// </summary>
            public static int DolbyVisionLevelUhd24 { get { if (!_DolbyVisionLevelUhd24Ready) { _DolbyVisionLevelUhd24Content = SGetField<int>(LocalBridgeClazz, "DolbyVisionLevelUhd24"); _DolbyVisionLevelUhd24Ready = true; } return _DolbyVisionLevelUhd24Content; } }
            private static int _DolbyVisionLevelUhd24Content = default;
            private static bool _DolbyVisionLevelUhd24Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#DolbyVisionLevelUhd30"/>
            /// </summary>
            public static int DolbyVisionLevelUhd30 { get { if (!_DolbyVisionLevelUhd30Ready) { _DolbyVisionLevelUhd30Content = SGetField<int>(LocalBridgeClazz, "DolbyVisionLevelUhd30"); _DolbyVisionLevelUhd30Ready = true; } return _DolbyVisionLevelUhd30Content; } }
            private static int _DolbyVisionLevelUhd30Content = default;
            private static bool _DolbyVisionLevelUhd30Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#DolbyVisionLevelUhd48"/>
            /// </summary>
            public static int DolbyVisionLevelUhd48 { get { if (!_DolbyVisionLevelUhd48Ready) { _DolbyVisionLevelUhd48Content = SGetField<int>(LocalBridgeClazz, "DolbyVisionLevelUhd48"); _DolbyVisionLevelUhd48Ready = true; } return _DolbyVisionLevelUhd48Content; } }
            private static int _DolbyVisionLevelUhd48Content = default;
            private static bool _DolbyVisionLevelUhd48Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#DolbyVisionLevelUhd60"/>
            /// </summary>
            public static int DolbyVisionLevelUhd60 { get { if (!_DolbyVisionLevelUhd60Ready) { _DolbyVisionLevelUhd60Content = SGetField<int>(LocalBridgeClazz, "DolbyVisionLevelUhd60"); _DolbyVisionLevelUhd60Ready = true; } return _DolbyVisionLevelUhd60Content; } }
            private static int _DolbyVisionLevelUhd60Content = default;
            private static bool _DolbyVisionLevelUhd60Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#DolbyVisionProfileDvav110"/>
            /// </summary>
            public static int DolbyVisionProfileDvav110 { get { if (!_DolbyVisionProfileDvav110Ready) { _DolbyVisionProfileDvav110Content = SGetField<int>(LocalBridgeClazz, "DolbyVisionProfileDvav110"); _DolbyVisionProfileDvav110Ready = true; } return _DolbyVisionProfileDvav110Content; } }
            private static int _DolbyVisionProfileDvav110Content = default;
            private static bool _DolbyVisionProfileDvav110Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#DolbyVisionProfileDvavPen"/>
            /// </summary>
            public static int DolbyVisionProfileDvavPen { get { if (!_DolbyVisionProfileDvavPenReady) { _DolbyVisionProfileDvavPenContent = SGetField<int>(LocalBridgeClazz, "DolbyVisionProfileDvavPen"); _DolbyVisionProfileDvavPenReady = true; } return _DolbyVisionProfileDvavPenContent; } }
            private static int _DolbyVisionProfileDvavPenContent = default;
            private static bool _DolbyVisionProfileDvavPenReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#DolbyVisionProfileDvavPer"/>
            /// </summary>
            public static int DolbyVisionProfileDvavPer { get { if (!_DolbyVisionProfileDvavPerReady) { _DolbyVisionProfileDvavPerContent = SGetField<int>(LocalBridgeClazz, "DolbyVisionProfileDvavPer"); _DolbyVisionProfileDvavPerReady = true; } return _DolbyVisionProfileDvavPerContent; } }
            private static int _DolbyVisionProfileDvavPerContent = default;
            private static bool _DolbyVisionProfileDvavPerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#DolbyVisionProfileDvavSe"/>
            /// </summary>
            public static int DolbyVisionProfileDvavSe { get { if (!_DolbyVisionProfileDvavSeReady) { _DolbyVisionProfileDvavSeContent = SGetField<int>(LocalBridgeClazz, "DolbyVisionProfileDvavSe"); _DolbyVisionProfileDvavSeReady = true; } return _DolbyVisionProfileDvavSeContent; } }
            private static int _DolbyVisionProfileDvavSeContent = default;
            private static bool _DolbyVisionProfileDvavSeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#DolbyVisionProfileDvheDen"/>
            /// </summary>
            public static int DolbyVisionProfileDvheDen { get { if (!_DolbyVisionProfileDvheDenReady) { _DolbyVisionProfileDvheDenContent = SGetField<int>(LocalBridgeClazz, "DolbyVisionProfileDvheDen"); _DolbyVisionProfileDvheDenReady = true; } return _DolbyVisionProfileDvheDenContent; } }
            private static int _DolbyVisionProfileDvheDenContent = default;
            private static bool _DolbyVisionProfileDvheDenReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#DolbyVisionProfileDvheDer"/>
            /// </summary>
            public static int DolbyVisionProfileDvheDer { get { if (!_DolbyVisionProfileDvheDerReady) { _DolbyVisionProfileDvheDerContent = SGetField<int>(LocalBridgeClazz, "DolbyVisionProfileDvheDer"); _DolbyVisionProfileDvheDerReady = true; } return _DolbyVisionProfileDvheDerContent; } }
            private static int _DolbyVisionProfileDvheDerContent = default;
            private static bool _DolbyVisionProfileDvheDerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#DolbyVisionProfileDvheDtb"/>
            /// </summary>
            public static int DolbyVisionProfileDvheDtb { get { if (!_DolbyVisionProfileDvheDtbReady) { _DolbyVisionProfileDvheDtbContent = SGetField<int>(LocalBridgeClazz, "DolbyVisionProfileDvheDtb"); _DolbyVisionProfileDvheDtbReady = true; } return _DolbyVisionProfileDvheDtbContent; } }
            private static int _DolbyVisionProfileDvheDtbContent = default;
            private static bool _DolbyVisionProfileDvheDtbReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#DolbyVisionProfileDvheDth"/>
            /// </summary>
            public static int DolbyVisionProfileDvheDth { get { if (!_DolbyVisionProfileDvheDthReady) { _DolbyVisionProfileDvheDthContent = SGetField<int>(LocalBridgeClazz, "DolbyVisionProfileDvheDth"); _DolbyVisionProfileDvheDthReady = true; } return _DolbyVisionProfileDvheDthContent; } }
            private static int _DolbyVisionProfileDvheDthContent = default;
            private static bool _DolbyVisionProfileDvheDthReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#DolbyVisionProfileDvheDtr"/>
            /// </summary>
            public static int DolbyVisionProfileDvheDtr { get { if (!_DolbyVisionProfileDvheDtrReady) { _DolbyVisionProfileDvheDtrContent = SGetField<int>(LocalBridgeClazz, "DolbyVisionProfileDvheDtr"); _DolbyVisionProfileDvheDtrReady = true; } return _DolbyVisionProfileDvheDtrContent; } }
            private static int _DolbyVisionProfileDvheDtrContent = default;
            private static bool _DolbyVisionProfileDvheDtrReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#DolbyVisionProfileDvheSt"/>
            /// </summary>
            public static int DolbyVisionProfileDvheSt { get { if (!_DolbyVisionProfileDvheStReady) { _DolbyVisionProfileDvheStContent = SGetField<int>(LocalBridgeClazz, "DolbyVisionProfileDvheSt"); _DolbyVisionProfileDvheStReady = true; } return _DolbyVisionProfileDvheStContent; } }
            private static int _DolbyVisionProfileDvheStContent = default;
            private static bool _DolbyVisionProfileDvheStReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#DolbyVisionProfileDvheStn"/>
            /// </summary>
            public static int DolbyVisionProfileDvheStn { get { if (!_DolbyVisionProfileDvheStnReady) { _DolbyVisionProfileDvheStnContent = SGetField<int>(LocalBridgeClazz, "DolbyVisionProfileDvheStn"); _DolbyVisionProfileDvheStnReady = true; } return _DolbyVisionProfileDvheStnContent; } }
            private static int _DolbyVisionProfileDvheStnContent = default;
            private static bool _DolbyVisionProfileDvheStnReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#DTS_HDProfileHRA"/>
            /// </summary>
            public static int DTS_HDProfileHRA { get { if (!_DTS_HDProfileHRAReady) { _DTS_HDProfileHRAContent = SGetField<int>(LocalBridgeClazz, "DTS_HDProfileHRA"); _DTS_HDProfileHRAReady = true; } return _DTS_HDProfileHRAContent; } }
            private static int _DTS_HDProfileHRAContent = default;
            private static bool _DTS_HDProfileHRAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#DTS_HDProfileLBR"/>
            /// </summary>
            public static int DTS_HDProfileLBR { get { if (!_DTS_HDProfileLBRReady) { _DTS_HDProfileLBRContent = SGetField<int>(LocalBridgeClazz, "DTS_HDProfileLBR"); _DTS_HDProfileLBRReady = true; } return _DTS_HDProfileLBRContent; } }
            private static int _DTS_HDProfileLBRContent = default;
            private static bool _DTS_HDProfileLBRReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#DTS_HDProfileMA"/>
            /// </summary>
            public static int DTS_HDProfileMA { get { if (!_DTS_HDProfileMAReady) { _DTS_HDProfileMAContent = SGetField<int>(LocalBridgeClazz, "DTS_HDProfileMA"); _DTS_HDProfileMAReady = true; } return _DTS_HDProfileMAContent; } }
            private static int _DTS_HDProfileMAContent = default;
            private static bool _DTS_HDProfileMAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#DTS_UHDProfileP1"/>
            /// </summary>
            public static int DTS_UHDProfileP1 { get { if (!_DTS_UHDProfileP1Ready) { _DTS_UHDProfileP1Content = SGetField<int>(LocalBridgeClazz, "DTS_UHDProfileP1"); _DTS_UHDProfileP1Ready = true; } return _DTS_UHDProfileP1Content; } }
            private static int _DTS_UHDProfileP1Content = default;
            private static bool _DTS_UHDProfileP1Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#DTS_UHDProfileP2"/>
            /// </summary>
            public static int DTS_UHDProfileP2 { get { if (!_DTS_UHDProfileP2Ready) { _DTS_UHDProfileP2Content = SGetField<int>(LocalBridgeClazz, "DTS_UHDProfileP2"); _DTS_UHDProfileP2Ready = true; } return _DTS_UHDProfileP2Content; } }
            private static int _DTS_UHDProfileP2Content = default;
            private static bool _DTS_UHDProfileP2Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#H263Level10"/>
            /// </summary>
            public static int H263Level10 { get { if (!_H263Level10Ready) { _H263Level10Content = SGetField<int>(LocalBridgeClazz, "H263Level10"); _H263Level10Ready = true; } return _H263Level10Content; } }
            private static int _H263Level10Content = default;
            private static bool _H263Level10Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#H263Level20"/>
            /// </summary>
            public static int H263Level20 { get { if (!_H263Level20Ready) { _H263Level20Content = SGetField<int>(LocalBridgeClazz, "H263Level20"); _H263Level20Ready = true; } return _H263Level20Content; } }
            private static int _H263Level20Content = default;
            private static bool _H263Level20Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#H263Level30"/>
            /// </summary>
            public static int H263Level30 { get { if (!_H263Level30Ready) { _H263Level30Content = SGetField<int>(LocalBridgeClazz, "H263Level30"); _H263Level30Ready = true; } return _H263Level30Content; } }
            private static int _H263Level30Content = default;
            private static bool _H263Level30Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#H263Level40"/>
            /// </summary>
            public static int H263Level40 { get { if (!_H263Level40Ready) { _H263Level40Content = SGetField<int>(LocalBridgeClazz, "H263Level40"); _H263Level40Ready = true; } return _H263Level40Content; } }
            private static int _H263Level40Content = default;
            private static bool _H263Level40Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#H263Level45"/>
            /// </summary>
            public static int H263Level45 { get { if (!_H263Level45Ready) { _H263Level45Content = SGetField<int>(LocalBridgeClazz, "H263Level45"); _H263Level45Ready = true; } return _H263Level45Content; } }
            private static int _H263Level45Content = default;
            private static bool _H263Level45Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#H263Level50"/>
            /// </summary>
            public static int H263Level50 { get { if (!_H263Level50Ready) { _H263Level50Content = SGetField<int>(LocalBridgeClazz, "H263Level50"); _H263Level50Ready = true; } return _H263Level50Content; } }
            private static int _H263Level50Content = default;
            private static bool _H263Level50Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#H263Level60"/>
            /// </summary>
            public static int H263Level60 { get { if (!_H263Level60Ready) { _H263Level60Content = SGetField<int>(LocalBridgeClazz, "H263Level60"); _H263Level60Ready = true; } return _H263Level60Content; } }
            private static int _H263Level60Content = default;
            private static bool _H263Level60Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#H263Level70"/>
            /// </summary>
            public static int H263Level70 { get { if (!_H263Level70Ready) { _H263Level70Content = SGetField<int>(LocalBridgeClazz, "H263Level70"); _H263Level70Ready = true; } return _H263Level70Content; } }
            private static int _H263Level70Content = default;
            private static bool _H263Level70Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#H263ProfileBackwardCompatible"/>
            /// </summary>
            public static int H263ProfileBackwardCompatible { get { if (!_H263ProfileBackwardCompatibleReady) { _H263ProfileBackwardCompatibleContent = SGetField<int>(LocalBridgeClazz, "H263ProfileBackwardCompatible"); _H263ProfileBackwardCompatibleReady = true; } return _H263ProfileBackwardCompatibleContent; } }
            private static int _H263ProfileBackwardCompatibleContent = default;
            private static bool _H263ProfileBackwardCompatibleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#H263ProfileBaseline"/>
            /// </summary>
            public static int H263ProfileBaseline { get { if (!_H263ProfileBaselineReady) { _H263ProfileBaselineContent = SGetField<int>(LocalBridgeClazz, "H263ProfileBaseline"); _H263ProfileBaselineReady = true; } return _H263ProfileBaselineContent; } }
            private static int _H263ProfileBaselineContent = default;
            private static bool _H263ProfileBaselineReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#H263ProfileH320Coding"/>
            /// </summary>
            public static int H263ProfileH320Coding { get { if (!_H263ProfileH320CodingReady) { _H263ProfileH320CodingContent = SGetField<int>(LocalBridgeClazz, "H263ProfileH320Coding"); _H263ProfileH320CodingReady = true; } return _H263ProfileH320CodingContent; } }
            private static int _H263ProfileH320CodingContent = default;
            private static bool _H263ProfileH320CodingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#H263ProfileHighCompression"/>
            /// </summary>
            public static int H263ProfileHighCompression { get { if (!_H263ProfileHighCompressionReady) { _H263ProfileHighCompressionContent = SGetField<int>(LocalBridgeClazz, "H263ProfileHighCompression"); _H263ProfileHighCompressionReady = true; } return _H263ProfileHighCompressionContent; } }
            private static int _H263ProfileHighCompressionContent = default;
            private static bool _H263ProfileHighCompressionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#H263ProfileHighLatency"/>
            /// </summary>
            public static int H263ProfileHighLatency { get { if (!_H263ProfileHighLatencyReady) { _H263ProfileHighLatencyContent = SGetField<int>(LocalBridgeClazz, "H263ProfileHighLatency"); _H263ProfileHighLatencyReady = true; } return _H263ProfileHighLatencyContent; } }
            private static int _H263ProfileHighLatencyContent = default;
            private static bool _H263ProfileHighLatencyReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#H263ProfileInterlace"/>
            /// </summary>
            public static int H263ProfileInterlace { get { if (!_H263ProfileInterlaceReady) { _H263ProfileInterlaceContent = SGetField<int>(LocalBridgeClazz, "H263ProfileInterlace"); _H263ProfileInterlaceReady = true; } return _H263ProfileInterlaceContent; } }
            private static int _H263ProfileInterlaceContent = default;
            private static bool _H263ProfileInterlaceReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#H263ProfileInternet"/>
            /// </summary>
            public static int H263ProfileInternet { get { if (!_H263ProfileInternetReady) { _H263ProfileInternetContent = SGetField<int>(LocalBridgeClazz, "H263ProfileInternet"); _H263ProfileInternetReady = true; } return _H263ProfileInternetContent; } }
            private static int _H263ProfileInternetContent = default;
            private static bool _H263ProfileInternetReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#H263ProfileISWV2"/>
            /// </summary>
            public static int H263ProfileISWV2 { get { if (!_H263ProfileISWV2Ready) { _H263ProfileISWV2Content = SGetField<int>(LocalBridgeClazz, "H263ProfileISWV2"); _H263ProfileISWV2Ready = true; } return _H263ProfileISWV2Content; } }
            private static int _H263ProfileISWV2Content = default;
            private static bool _H263ProfileISWV2Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#H263ProfileISWV3"/>
            /// </summary>
            public static int H263ProfileISWV3 { get { if (!_H263ProfileISWV3Ready) { _H263ProfileISWV3Content = SGetField<int>(LocalBridgeClazz, "H263ProfileISWV3"); _H263ProfileISWV3Ready = true; } return _H263ProfileISWV3Content; } }
            private static int _H263ProfileISWV3Content = default;
            private static bool _H263ProfileISWV3Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#HEVCHighTierLevel1"/>
            /// </summary>
            public static int HEVCHighTierLevel1 { get { if (!_HEVCHighTierLevel1Ready) { _HEVCHighTierLevel1Content = SGetField<int>(LocalBridgeClazz, "HEVCHighTierLevel1"); _HEVCHighTierLevel1Ready = true; } return _HEVCHighTierLevel1Content; } }
            private static int _HEVCHighTierLevel1Content = default;
            private static bool _HEVCHighTierLevel1Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#HEVCHighTierLevel2"/>
            /// </summary>
            public static int HEVCHighTierLevel2 { get { if (!_HEVCHighTierLevel2Ready) { _HEVCHighTierLevel2Content = SGetField<int>(LocalBridgeClazz, "HEVCHighTierLevel2"); _HEVCHighTierLevel2Ready = true; } return _HEVCHighTierLevel2Content; } }
            private static int _HEVCHighTierLevel2Content = default;
            private static bool _HEVCHighTierLevel2Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#HEVCHighTierLevel21"/>
            /// </summary>
            public static int HEVCHighTierLevel21 { get { if (!_HEVCHighTierLevel21Ready) { _HEVCHighTierLevel21Content = SGetField<int>(LocalBridgeClazz, "HEVCHighTierLevel21"); _HEVCHighTierLevel21Ready = true; } return _HEVCHighTierLevel21Content; } }
            private static int _HEVCHighTierLevel21Content = default;
            private static bool _HEVCHighTierLevel21Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#HEVCHighTierLevel3"/>
            /// </summary>
            public static int HEVCHighTierLevel3 { get { if (!_HEVCHighTierLevel3Ready) { _HEVCHighTierLevel3Content = SGetField<int>(LocalBridgeClazz, "HEVCHighTierLevel3"); _HEVCHighTierLevel3Ready = true; } return _HEVCHighTierLevel3Content; } }
            private static int _HEVCHighTierLevel3Content = default;
            private static bool _HEVCHighTierLevel3Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#HEVCHighTierLevel31"/>
            /// </summary>
            public static int HEVCHighTierLevel31 { get { if (!_HEVCHighTierLevel31Ready) { _HEVCHighTierLevel31Content = SGetField<int>(LocalBridgeClazz, "HEVCHighTierLevel31"); _HEVCHighTierLevel31Ready = true; } return _HEVCHighTierLevel31Content; } }
            private static int _HEVCHighTierLevel31Content = default;
            private static bool _HEVCHighTierLevel31Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#HEVCHighTierLevel4"/>
            /// </summary>
            public static int HEVCHighTierLevel4 { get { if (!_HEVCHighTierLevel4Ready) { _HEVCHighTierLevel4Content = SGetField<int>(LocalBridgeClazz, "HEVCHighTierLevel4"); _HEVCHighTierLevel4Ready = true; } return _HEVCHighTierLevel4Content; } }
            private static int _HEVCHighTierLevel4Content = default;
            private static bool _HEVCHighTierLevel4Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#HEVCHighTierLevel41"/>
            /// </summary>
            public static int HEVCHighTierLevel41 { get { if (!_HEVCHighTierLevel41Ready) { _HEVCHighTierLevel41Content = SGetField<int>(LocalBridgeClazz, "HEVCHighTierLevel41"); _HEVCHighTierLevel41Ready = true; } return _HEVCHighTierLevel41Content; } }
            private static int _HEVCHighTierLevel41Content = default;
            private static bool _HEVCHighTierLevel41Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#HEVCHighTierLevel5"/>
            /// </summary>
            public static int HEVCHighTierLevel5 { get { if (!_HEVCHighTierLevel5Ready) { _HEVCHighTierLevel5Content = SGetField<int>(LocalBridgeClazz, "HEVCHighTierLevel5"); _HEVCHighTierLevel5Ready = true; } return _HEVCHighTierLevel5Content; } }
            private static int _HEVCHighTierLevel5Content = default;
            private static bool _HEVCHighTierLevel5Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#HEVCHighTierLevel51"/>
            /// </summary>
            public static int HEVCHighTierLevel51 { get { if (!_HEVCHighTierLevel51Ready) { _HEVCHighTierLevel51Content = SGetField<int>(LocalBridgeClazz, "HEVCHighTierLevel51"); _HEVCHighTierLevel51Ready = true; } return _HEVCHighTierLevel51Content; } }
            private static int _HEVCHighTierLevel51Content = default;
            private static bool _HEVCHighTierLevel51Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#HEVCHighTierLevel52"/>
            /// </summary>
            public static int HEVCHighTierLevel52 { get { if (!_HEVCHighTierLevel52Ready) { _HEVCHighTierLevel52Content = SGetField<int>(LocalBridgeClazz, "HEVCHighTierLevel52"); _HEVCHighTierLevel52Ready = true; } return _HEVCHighTierLevel52Content; } }
            private static int _HEVCHighTierLevel52Content = default;
            private static bool _HEVCHighTierLevel52Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#HEVCHighTierLevel6"/>
            /// </summary>
            public static int HEVCHighTierLevel6 { get { if (!_HEVCHighTierLevel6Ready) { _HEVCHighTierLevel6Content = SGetField<int>(LocalBridgeClazz, "HEVCHighTierLevel6"); _HEVCHighTierLevel6Ready = true; } return _HEVCHighTierLevel6Content; } }
            private static int _HEVCHighTierLevel6Content = default;
            private static bool _HEVCHighTierLevel6Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#HEVCHighTierLevel61"/>
            /// </summary>
            public static int HEVCHighTierLevel61 { get { if (!_HEVCHighTierLevel61Ready) { _HEVCHighTierLevel61Content = SGetField<int>(LocalBridgeClazz, "HEVCHighTierLevel61"); _HEVCHighTierLevel61Ready = true; } return _HEVCHighTierLevel61Content; } }
            private static int _HEVCHighTierLevel61Content = default;
            private static bool _HEVCHighTierLevel61Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#HEVCHighTierLevel62"/>
            /// </summary>
            public static int HEVCHighTierLevel62 { get { if (!_HEVCHighTierLevel62Ready) { _HEVCHighTierLevel62Content = SGetField<int>(LocalBridgeClazz, "HEVCHighTierLevel62"); _HEVCHighTierLevel62Ready = true; } return _HEVCHighTierLevel62Content; } }
            private static int _HEVCHighTierLevel62Content = default;
            private static bool _HEVCHighTierLevel62Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#HEVCMainTierLevel1"/>
            /// </summary>
            public static int HEVCMainTierLevel1 { get { if (!_HEVCMainTierLevel1Ready) { _HEVCMainTierLevel1Content = SGetField<int>(LocalBridgeClazz, "HEVCMainTierLevel1"); _HEVCMainTierLevel1Ready = true; } return _HEVCMainTierLevel1Content; } }
            private static int _HEVCMainTierLevel1Content = default;
            private static bool _HEVCMainTierLevel1Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#HEVCMainTierLevel2"/>
            /// </summary>
            public static int HEVCMainTierLevel2 { get { if (!_HEVCMainTierLevel2Ready) { _HEVCMainTierLevel2Content = SGetField<int>(LocalBridgeClazz, "HEVCMainTierLevel2"); _HEVCMainTierLevel2Ready = true; } return _HEVCMainTierLevel2Content; } }
            private static int _HEVCMainTierLevel2Content = default;
            private static bool _HEVCMainTierLevel2Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#HEVCMainTierLevel21"/>
            /// </summary>
            public static int HEVCMainTierLevel21 { get { if (!_HEVCMainTierLevel21Ready) { _HEVCMainTierLevel21Content = SGetField<int>(LocalBridgeClazz, "HEVCMainTierLevel21"); _HEVCMainTierLevel21Ready = true; } return _HEVCMainTierLevel21Content; } }
            private static int _HEVCMainTierLevel21Content = default;
            private static bool _HEVCMainTierLevel21Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#HEVCMainTierLevel3"/>
            /// </summary>
            public static int HEVCMainTierLevel3 { get { if (!_HEVCMainTierLevel3Ready) { _HEVCMainTierLevel3Content = SGetField<int>(LocalBridgeClazz, "HEVCMainTierLevel3"); _HEVCMainTierLevel3Ready = true; } return _HEVCMainTierLevel3Content; } }
            private static int _HEVCMainTierLevel3Content = default;
            private static bool _HEVCMainTierLevel3Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#HEVCMainTierLevel31"/>
            /// </summary>
            public static int HEVCMainTierLevel31 { get { if (!_HEVCMainTierLevel31Ready) { _HEVCMainTierLevel31Content = SGetField<int>(LocalBridgeClazz, "HEVCMainTierLevel31"); _HEVCMainTierLevel31Ready = true; } return _HEVCMainTierLevel31Content; } }
            private static int _HEVCMainTierLevel31Content = default;
            private static bool _HEVCMainTierLevel31Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#HEVCMainTierLevel4"/>
            /// </summary>
            public static int HEVCMainTierLevel4 { get { if (!_HEVCMainTierLevel4Ready) { _HEVCMainTierLevel4Content = SGetField<int>(LocalBridgeClazz, "HEVCMainTierLevel4"); _HEVCMainTierLevel4Ready = true; } return _HEVCMainTierLevel4Content; } }
            private static int _HEVCMainTierLevel4Content = default;
            private static bool _HEVCMainTierLevel4Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#HEVCMainTierLevel41"/>
            /// </summary>
            public static int HEVCMainTierLevel41 { get { if (!_HEVCMainTierLevel41Ready) { _HEVCMainTierLevel41Content = SGetField<int>(LocalBridgeClazz, "HEVCMainTierLevel41"); _HEVCMainTierLevel41Ready = true; } return _HEVCMainTierLevel41Content; } }
            private static int _HEVCMainTierLevel41Content = default;
            private static bool _HEVCMainTierLevel41Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#HEVCMainTierLevel5"/>
            /// </summary>
            public static int HEVCMainTierLevel5 { get { if (!_HEVCMainTierLevel5Ready) { _HEVCMainTierLevel5Content = SGetField<int>(LocalBridgeClazz, "HEVCMainTierLevel5"); _HEVCMainTierLevel5Ready = true; } return _HEVCMainTierLevel5Content; } }
            private static int _HEVCMainTierLevel5Content = default;
            private static bool _HEVCMainTierLevel5Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#HEVCMainTierLevel51"/>
            /// </summary>
            public static int HEVCMainTierLevel51 { get { if (!_HEVCMainTierLevel51Ready) { _HEVCMainTierLevel51Content = SGetField<int>(LocalBridgeClazz, "HEVCMainTierLevel51"); _HEVCMainTierLevel51Ready = true; } return _HEVCMainTierLevel51Content; } }
            private static int _HEVCMainTierLevel51Content = default;
            private static bool _HEVCMainTierLevel51Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#HEVCMainTierLevel52"/>
            /// </summary>
            public static int HEVCMainTierLevel52 { get { if (!_HEVCMainTierLevel52Ready) { _HEVCMainTierLevel52Content = SGetField<int>(LocalBridgeClazz, "HEVCMainTierLevel52"); _HEVCMainTierLevel52Ready = true; } return _HEVCMainTierLevel52Content; } }
            private static int _HEVCMainTierLevel52Content = default;
            private static bool _HEVCMainTierLevel52Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#HEVCMainTierLevel6"/>
            /// </summary>
            public static int HEVCMainTierLevel6 { get { if (!_HEVCMainTierLevel6Ready) { _HEVCMainTierLevel6Content = SGetField<int>(LocalBridgeClazz, "HEVCMainTierLevel6"); _HEVCMainTierLevel6Ready = true; } return _HEVCMainTierLevel6Content; } }
            private static int _HEVCMainTierLevel6Content = default;
            private static bool _HEVCMainTierLevel6Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#HEVCMainTierLevel61"/>
            /// </summary>
            public static int HEVCMainTierLevel61 { get { if (!_HEVCMainTierLevel61Ready) { _HEVCMainTierLevel61Content = SGetField<int>(LocalBridgeClazz, "HEVCMainTierLevel61"); _HEVCMainTierLevel61Ready = true; } return _HEVCMainTierLevel61Content; } }
            private static int _HEVCMainTierLevel61Content = default;
            private static bool _HEVCMainTierLevel61Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#HEVCMainTierLevel62"/>
            /// </summary>
            public static int HEVCMainTierLevel62 { get { if (!_HEVCMainTierLevel62Ready) { _HEVCMainTierLevel62Content = SGetField<int>(LocalBridgeClazz, "HEVCMainTierLevel62"); _HEVCMainTierLevel62Ready = true; } return _HEVCMainTierLevel62Content; } }
            private static int _HEVCMainTierLevel62Content = default;
            private static bool _HEVCMainTierLevel62Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#HEVCProfileMain"/>
            /// </summary>
            public static int HEVCProfileMain { get { if (!_HEVCProfileMainReady) { _HEVCProfileMainContent = SGetField<int>(LocalBridgeClazz, "HEVCProfileMain"); _HEVCProfileMainReady = true; } return _HEVCProfileMainContent; } }
            private static int _HEVCProfileMainContent = default;
            private static bool _HEVCProfileMainReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#HEVCProfileMain10"/>
            /// </summary>
            public static int HEVCProfileMain10 { get { if (!_HEVCProfileMain10Ready) { _HEVCProfileMain10Content = SGetField<int>(LocalBridgeClazz, "HEVCProfileMain10"); _HEVCProfileMain10Ready = true; } return _HEVCProfileMain10Content; } }
            private static int _HEVCProfileMain10Content = default;
            private static bool _HEVCProfileMain10Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#HEVCProfileMain10HDR10"/>
            /// </summary>
            public static int HEVCProfileMain10HDR10 { get { if (!_HEVCProfileMain10HDR10Ready) { _HEVCProfileMain10HDR10Content = SGetField<int>(LocalBridgeClazz, "HEVCProfileMain10HDR10"); _HEVCProfileMain10HDR10Ready = true; } return _HEVCProfileMain10HDR10Content; } }
            private static int _HEVCProfileMain10HDR10Content = default;
            private static bool _HEVCProfileMain10HDR10Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#HEVCProfileMain10HDR10Plus"/>
            /// </summary>
            public static int HEVCProfileMain10HDR10Plus { get { if (!_HEVCProfileMain10HDR10PlusReady) { _HEVCProfileMain10HDR10PlusContent = SGetField<int>(LocalBridgeClazz, "HEVCProfileMain10HDR10Plus"); _HEVCProfileMain10HDR10PlusReady = true; } return _HEVCProfileMain10HDR10PlusContent; } }
            private static int _HEVCProfileMain10HDR10PlusContent = default;
            private static bool _HEVCProfileMain10HDR10PlusReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#HEVCProfileMainStill"/>
            /// </summary>
            public static int HEVCProfileMainStill { get { if (!_HEVCProfileMainStillReady) { _HEVCProfileMainStillContent = SGetField<int>(LocalBridgeClazz, "HEVCProfileMainStill"); _HEVCProfileMainStillReady = true; } return _HEVCProfileMainStillContent; } }
            private static int _HEVCProfileMainStillContent = default;
            private static bool _HEVCProfileMainStillReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#MPEG2LevelH14"/>
            /// </summary>
            public static int MPEG2LevelH14 { get { if (!_MPEG2LevelH14Ready) { _MPEG2LevelH14Content = SGetField<int>(LocalBridgeClazz, "MPEG2LevelH14"); _MPEG2LevelH14Ready = true; } return _MPEG2LevelH14Content; } }
            private static int _MPEG2LevelH14Content = default;
            private static bool _MPEG2LevelH14Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#MPEG2LevelHL"/>
            /// </summary>
            public static int MPEG2LevelHL { get { if (!_MPEG2LevelHLReady) { _MPEG2LevelHLContent = SGetField<int>(LocalBridgeClazz, "MPEG2LevelHL"); _MPEG2LevelHLReady = true; } return _MPEG2LevelHLContent; } }
            private static int _MPEG2LevelHLContent = default;
            private static bool _MPEG2LevelHLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#MPEG2LevelHP"/>
            /// </summary>
            public static int MPEG2LevelHP { get { if (!_MPEG2LevelHPReady) { _MPEG2LevelHPContent = SGetField<int>(LocalBridgeClazz, "MPEG2LevelHP"); _MPEG2LevelHPReady = true; } return _MPEG2LevelHPContent; } }
            private static int _MPEG2LevelHPContent = default;
            private static bool _MPEG2LevelHPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#MPEG2LevelLL"/>
            /// </summary>
            public static int MPEG2LevelLL { get { if (!_MPEG2LevelLLReady) { _MPEG2LevelLLContent = SGetField<int>(LocalBridgeClazz, "MPEG2LevelLL"); _MPEG2LevelLLReady = true; } return _MPEG2LevelLLContent; } }
            private static int _MPEG2LevelLLContent = default;
            private static bool _MPEG2LevelLLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#MPEG2LevelML"/>
            /// </summary>
            public static int MPEG2LevelML { get { if (!_MPEG2LevelMLReady) { _MPEG2LevelMLContent = SGetField<int>(LocalBridgeClazz, "MPEG2LevelML"); _MPEG2LevelMLReady = true; } return _MPEG2LevelMLContent; } }
            private static int _MPEG2LevelMLContent = default;
            private static bool _MPEG2LevelMLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#MPEG2Profile422"/>
            /// </summary>
            public static int MPEG2Profile422 { get { if (!_MPEG2Profile422Ready) { _MPEG2Profile422Content = SGetField<int>(LocalBridgeClazz, "MPEG2Profile422"); _MPEG2Profile422Ready = true; } return _MPEG2Profile422Content; } }
            private static int _MPEG2Profile422Content = default;
            private static bool _MPEG2Profile422Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#MPEG2ProfileHigh"/>
            /// </summary>
            public static int MPEG2ProfileHigh { get { if (!_MPEG2ProfileHighReady) { _MPEG2ProfileHighContent = SGetField<int>(LocalBridgeClazz, "MPEG2ProfileHigh"); _MPEG2ProfileHighReady = true; } return _MPEG2ProfileHighContent; } }
            private static int _MPEG2ProfileHighContent = default;
            private static bool _MPEG2ProfileHighReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#MPEG2ProfileMain"/>
            /// </summary>
            public static int MPEG2ProfileMain { get { if (!_MPEG2ProfileMainReady) { _MPEG2ProfileMainContent = SGetField<int>(LocalBridgeClazz, "MPEG2ProfileMain"); _MPEG2ProfileMainReady = true; } return _MPEG2ProfileMainContent; } }
            private static int _MPEG2ProfileMainContent = default;
            private static bool _MPEG2ProfileMainReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#MPEG2ProfileSimple"/>
            /// </summary>
            public static int MPEG2ProfileSimple { get { if (!_MPEG2ProfileSimpleReady) { _MPEG2ProfileSimpleContent = SGetField<int>(LocalBridgeClazz, "MPEG2ProfileSimple"); _MPEG2ProfileSimpleReady = true; } return _MPEG2ProfileSimpleContent; } }
            private static int _MPEG2ProfileSimpleContent = default;
            private static bool _MPEG2ProfileSimpleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#MPEG2ProfileSNR"/>
            /// </summary>
            public static int MPEG2ProfileSNR { get { if (!_MPEG2ProfileSNRReady) { _MPEG2ProfileSNRContent = SGetField<int>(LocalBridgeClazz, "MPEG2ProfileSNR"); _MPEG2ProfileSNRReady = true; } return _MPEG2ProfileSNRContent; } }
            private static int _MPEG2ProfileSNRContent = default;
            private static bool _MPEG2ProfileSNRReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#MPEG2ProfileSpatial"/>
            /// </summary>
            public static int MPEG2ProfileSpatial { get { if (!_MPEG2ProfileSpatialReady) { _MPEG2ProfileSpatialContent = SGetField<int>(LocalBridgeClazz, "MPEG2ProfileSpatial"); _MPEG2ProfileSpatialReady = true; } return _MPEG2ProfileSpatialContent; } }
            private static int _MPEG2ProfileSpatialContent = default;
            private static bool _MPEG2ProfileSpatialReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#MPEG4Level0"/>
            /// </summary>
            public static int MPEG4Level0 { get { if (!_MPEG4Level0Ready) { _MPEG4Level0Content = SGetField<int>(LocalBridgeClazz, "MPEG4Level0"); _MPEG4Level0Ready = true; } return _MPEG4Level0Content; } }
            private static int _MPEG4Level0Content = default;
            private static bool _MPEG4Level0Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#MPEG4Level0b"/>
            /// </summary>
            public static int MPEG4Level0b { get { if (!_MPEG4Level0bReady) { _MPEG4Level0bContent = SGetField<int>(LocalBridgeClazz, "MPEG4Level0b"); _MPEG4Level0bReady = true; } return _MPEG4Level0bContent; } }
            private static int _MPEG4Level0bContent = default;
            private static bool _MPEG4Level0bReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#MPEG4Level1"/>
            /// </summary>
            public static int MPEG4Level1 { get { if (!_MPEG4Level1Ready) { _MPEG4Level1Content = SGetField<int>(LocalBridgeClazz, "MPEG4Level1"); _MPEG4Level1Ready = true; } return _MPEG4Level1Content; } }
            private static int _MPEG4Level1Content = default;
            private static bool _MPEG4Level1Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#MPEG4Level2"/>
            /// </summary>
            public static int MPEG4Level2 { get { if (!_MPEG4Level2Ready) { _MPEG4Level2Content = SGetField<int>(LocalBridgeClazz, "MPEG4Level2"); _MPEG4Level2Ready = true; } return _MPEG4Level2Content; } }
            private static int _MPEG4Level2Content = default;
            private static bool _MPEG4Level2Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#MPEG4Level3"/>
            /// </summary>
            public static int MPEG4Level3 { get { if (!_MPEG4Level3Ready) { _MPEG4Level3Content = SGetField<int>(LocalBridgeClazz, "MPEG4Level3"); _MPEG4Level3Ready = true; } return _MPEG4Level3Content; } }
            private static int _MPEG4Level3Content = default;
            private static bool _MPEG4Level3Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#MPEG4Level3b"/>
            /// </summary>
            public static int MPEG4Level3b { get { if (!_MPEG4Level3bReady) { _MPEG4Level3bContent = SGetField<int>(LocalBridgeClazz, "MPEG4Level3b"); _MPEG4Level3bReady = true; } return _MPEG4Level3bContent; } }
            private static int _MPEG4Level3bContent = default;
            private static bool _MPEG4Level3bReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#MPEG4Level4"/>
            /// </summary>
            public static int MPEG4Level4 { get { if (!_MPEG4Level4Ready) { _MPEG4Level4Content = SGetField<int>(LocalBridgeClazz, "MPEG4Level4"); _MPEG4Level4Ready = true; } return _MPEG4Level4Content; } }
            private static int _MPEG4Level4Content = default;
            private static bool _MPEG4Level4Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#MPEG4Level4a"/>
            /// </summary>
            public static int MPEG4Level4a { get { if (!_MPEG4Level4aReady) { _MPEG4Level4aContent = SGetField<int>(LocalBridgeClazz, "MPEG4Level4a"); _MPEG4Level4aReady = true; } return _MPEG4Level4aContent; } }
            private static int _MPEG4Level4aContent = default;
            private static bool _MPEG4Level4aReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#MPEG4Level5"/>
            /// </summary>
            public static int MPEG4Level5 { get { if (!_MPEG4Level5Ready) { _MPEG4Level5Content = SGetField<int>(LocalBridgeClazz, "MPEG4Level5"); _MPEG4Level5Ready = true; } return _MPEG4Level5Content; } }
            private static int _MPEG4Level5Content = default;
            private static bool _MPEG4Level5Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#MPEG4Level6"/>
            /// </summary>
            public static int MPEG4Level6 { get { if (!_MPEG4Level6Ready) { _MPEG4Level6Content = SGetField<int>(LocalBridgeClazz, "MPEG4Level6"); _MPEG4Level6Ready = true; } return _MPEG4Level6Content; } }
            private static int _MPEG4Level6Content = default;
            private static bool _MPEG4Level6Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#MPEG4ProfileAdvancedCoding"/>
            /// </summary>
            public static int MPEG4ProfileAdvancedCoding { get { if (!_MPEG4ProfileAdvancedCodingReady) { _MPEG4ProfileAdvancedCodingContent = SGetField<int>(LocalBridgeClazz, "MPEG4ProfileAdvancedCoding"); _MPEG4ProfileAdvancedCodingReady = true; } return _MPEG4ProfileAdvancedCodingContent; } }
            private static int _MPEG4ProfileAdvancedCodingContent = default;
            private static bool _MPEG4ProfileAdvancedCodingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#MPEG4ProfileAdvancedCore"/>
            /// </summary>
            public static int MPEG4ProfileAdvancedCore { get { if (!_MPEG4ProfileAdvancedCoreReady) { _MPEG4ProfileAdvancedCoreContent = SGetField<int>(LocalBridgeClazz, "MPEG4ProfileAdvancedCore"); _MPEG4ProfileAdvancedCoreReady = true; } return _MPEG4ProfileAdvancedCoreContent; } }
            private static int _MPEG4ProfileAdvancedCoreContent = default;
            private static bool _MPEG4ProfileAdvancedCoreReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#MPEG4ProfileAdvancedRealTime"/>
            /// </summary>
            public static int MPEG4ProfileAdvancedRealTime { get { if (!_MPEG4ProfileAdvancedRealTimeReady) { _MPEG4ProfileAdvancedRealTimeContent = SGetField<int>(LocalBridgeClazz, "MPEG4ProfileAdvancedRealTime"); _MPEG4ProfileAdvancedRealTimeReady = true; } return _MPEG4ProfileAdvancedRealTimeContent; } }
            private static int _MPEG4ProfileAdvancedRealTimeContent = default;
            private static bool _MPEG4ProfileAdvancedRealTimeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#MPEG4ProfileAdvancedScalable"/>
            /// </summary>
            public static int MPEG4ProfileAdvancedScalable { get { if (!_MPEG4ProfileAdvancedScalableReady) { _MPEG4ProfileAdvancedScalableContent = SGetField<int>(LocalBridgeClazz, "MPEG4ProfileAdvancedScalable"); _MPEG4ProfileAdvancedScalableReady = true; } return _MPEG4ProfileAdvancedScalableContent; } }
            private static int _MPEG4ProfileAdvancedScalableContent = default;
            private static bool _MPEG4ProfileAdvancedScalableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#MPEG4ProfileAdvancedSimple"/>
            /// </summary>
            public static int MPEG4ProfileAdvancedSimple { get { if (!_MPEG4ProfileAdvancedSimpleReady) { _MPEG4ProfileAdvancedSimpleContent = SGetField<int>(LocalBridgeClazz, "MPEG4ProfileAdvancedSimple"); _MPEG4ProfileAdvancedSimpleReady = true; } return _MPEG4ProfileAdvancedSimpleContent; } }
            private static int _MPEG4ProfileAdvancedSimpleContent = default;
            private static bool _MPEG4ProfileAdvancedSimpleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#MPEG4ProfileBasicAnimated"/>
            /// </summary>
            public static int MPEG4ProfileBasicAnimated { get { if (!_MPEG4ProfileBasicAnimatedReady) { _MPEG4ProfileBasicAnimatedContent = SGetField<int>(LocalBridgeClazz, "MPEG4ProfileBasicAnimated"); _MPEG4ProfileBasicAnimatedReady = true; } return _MPEG4ProfileBasicAnimatedContent; } }
            private static int _MPEG4ProfileBasicAnimatedContent = default;
            private static bool _MPEG4ProfileBasicAnimatedReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#MPEG4ProfileCore"/>
            /// </summary>
            public static int MPEG4ProfileCore { get { if (!_MPEG4ProfileCoreReady) { _MPEG4ProfileCoreContent = SGetField<int>(LocalBridgeClazz, "MPEG4ProfileCore"); _MPEG4ProfileCoreReady = true; } return _MPEG4ProfileCoreContent; } }
            private static int _MPEG4ProfileCoreContent = default;
            private static bool _MPEG4ProfileCoreReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#MPEG4ProfileCoreScalable"/>
            /// </summary>
            public static int MPEG4ProfileCoreScalable { get { if (!_MPEG4ProfileCoreScalableReady) { _MPEG4ProfileCoreScalableContent = SGetField<int>(LocalBridgeClazz, "MPEG4ProfileCoreScalable"); _MPEG4ProfileCoreScalableReady = true; } return _MPEG4ProfileCoreScalableContent; } }
            private static int _MPEG4ProfileCoreScalableContent = default;
            private static bool _MPEG4ProfileCoreScalableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#MPEG4ProfileHybrid"/>
            /// </summary>
            public static int MPEG4ProfileHybrid { get { if (!_MPEG4ProfileHybridReady) { _MPEG4ProfileHybridContent = SGetField<int>(LocalBridgeClazz, "MPEG4ProfileHybrid"); _MPEG4ProfileHybridReady = true; } return _MPEG4ProfileHybridContent; } }
            private static int _MPEG4ProfileHybridContent = default;
            private static bool _MPEG4ProfileHybridReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#MPEG4ProfileMain"/>
            /// </summary>
            public static int MPEG4ProfileMain { get { if (!_MPEG4ProfileMainReady) { _MPEG4ProfileMainContent = SGetField<int>(LocalBridgeClazz, "MPEG4ProfileMain"); _MPEG4ProfileMainReady = true; } return _MPEG4ProfileMainContent; } }
            private static int _MPEG4ProfileMainContent = default;
            private static bool _MPEG4ProfileMainReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#MPEG4ProfileNbit"/>
            /// </summary>
            public static int MPEG4ProfileNbit { get { if (!_MPEG4ProfileNbitReady) { _MPEG4ProfileNbitContent = SGetField<int>(LocalBridgeClazz, "MPEG4ProfileNbit"); _MPEG4ProfileNbitReady = true; } return _MPEG4ProfileNbitContent; } }
            private static int _MPEG4ProfileNbitContent = default;
            private static bool _MPEG4ProfileNbitReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#MPEG4ProfileScalableTexture"/>
            /// </summary>
            public static int MPEG4ProfileScalableTexture { get { if (!_MPEG4ProfileScalableTextureReady) { _MPEG4ProfileScalableTextureContent = SGetField<int>(LocalBridgeClazz, "MPEG4ProfileScalableTexture"); _MPEG4ProfileScalableTextureReady = true; } return _MPEG4ProfileScalableTextureContent; } }
            private static int _MPEG4ProfileScalableTextureContent = default;
            private static bool _MPEG4ProfileScalableTextureReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#MPEG4ProfileSimple"/>
            /// </summary>
            public static int MPEG4ProfileSimple { get { if (!_MPEG4ProfileSimpleReady) { _MPEG4ProfileSimpleContent = SGetField<int>(LocalBridgeClazz, "MPEG4ProfileSimple"); _MPEG4ProfileSimpleReady = true; } return _MPEG4ProfileSimpleContent; } }
            private static int _MPEG4ProfileSimpleContent = default;
            private static bool _MPEG4ProfileSimpleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#MPEG4ProfileSimpleFace"/>
            /// </summary>
            public static int MPEG4ProfileSimpleFace { get { if (!_MPEG4ProfileSimpleFaceReady) { _MPEG4ProfileSimpleFaceContent = SGetField<int>(LocalBridgeClazz, "MPEG4ProfileSimpleFace"); _MPEG4ProfileSimpleFaceReady = true; } return _MPEG4ProfileSimpleFaceContent; } }
            private static int _MPEG4ProfileSimpleFaceContent = default;
            private static bool _MPEG4ProfileSimpleFaceReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#MPEG4ProfileSimpleFBA"/>
            /// </summary>
            public static int MPEG4ProfileSimpleFBA { get { if (!_MPEG4ProfileSimpleFBAReady) { _MPEG4ProfileSimpleFBAContent = SGetField<int>(LocalBridgeClazz, "MPEG4ProfileSimpleFBA"); _MPEG4ProfileSimpleFBAReady = true; } return _MPEG4ProfileSimpleFBAContent; } }
            private static int _MPEG4ProfileSimpleFBAContent = default;
            private static bool _MPEG4ProfileSimpleFBAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#MPEG4ProfileSimpleScalable"/>
            /// </summary>
            public static int MPEG4ProfileSimpleScalable { get { if (!_MPEG4ProfileSimpleScalableReady) { _MPEG4ProfileSimpleScalableContent = SGetField<int>(LocalBridgeClazz, "MPEG4ProfileSimpleScalable"); _MPEG4ProfileSimpleScalableReady = true; } return _MPEG4ProfileSimpleScalableContent; } }
            private static int _MPEG4ProfileSimpleScalableContent = default;
            private static bool _MPEG4ProfileSimpleScalableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#VP8Level_Version0"/>
            /// </summary>
            public static int VP8Level_Version0 { get { if (!_VP8Level_Version0Ready) { _VP8Level_Version0Content = SGetField<int>(LocalBridgeClazz, "VP8Level_Version0"); _VP8Level_Version0Ready = true; } return _VP8Level_Version0Content; } }
            private static int _VP8Level_Version0Content = default;
            private static bool _VP8Level_Version0Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#VP8Level_Version1"/>
            /// </summary>
            public static int VP8Level_Version1 { get { if (!_VP8Level_Version1Ready) { _VP8Level_Version1Content = SGetField<int>(LocalBridgeClazz, "VP8Level_Version1"); _VP8Level_Version1Ready = true; } return _VP8Level_Version1Content; } }
            private static int _VP8Level_Version1Content = default;
            private static bool _VP8Level_Version1Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#VP8Level_Version2"/>
            /// </summary>
            public static int VP8Level_Version2 { get { if (!_VP8Level_Version2Ready) { _VP8Level_Version2Content = SGetField<int>(LocalBridgeClazz, "VP8Level_Version2"); _VP8Level_Version2Ready = true; } return _VP8Level_Version2Content; } }
            private static int _VP8Level_Version2Content = default;
            private static bool _VP8Level_Version2Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#VP8Level_Version3"/>
            /// </summary>
            public static int VP8Level_Version3 { get { if (!_VP8Level_Version3Ready) { _VP8Level_Version3Content = SGetField<int>(LocalBridgeClazz, "VP8Level_Version3"); _VP8Level_Version3Ready = true; } return _VP8Level_Version3Content; } }
            private static int _VP8Level_Version3Content = default;
            private static bool _VP8Level_Version3Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#VP8ProfileMain"/>
            /// </summary>
            public static int VP8ProfileMain { get { if (!_VP8ProfileMainReady) { _VP8ProfileMainContent = SGetField<int>(LocalBridgeClazz, "VP8ProfileMain"); _VP8ProfileMainReady = true; } return _VP8ProfileMainContent; } }
            private static int _VP8ProfileMainContent = default;
            private static bool _VP8ProfileMainReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#VP9Level1"/>
            /// </summary>
            public static int VP9Level1 { get { if (!_VP9Level1Ready) { _VP9Level1Content = SGetField<int>(LocalBridgeClazz, "VP9Level1"); _VP9Level1Ready = true; } return _VP9Level1Content; } }
            private static int _VP9Level1Content = default;
            private static bool _VP9Level1Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#VP9Level11"/>
            /// </summary>
            public static int VP9Level11 { get { if (!_VP9Level11Ready) { _VP9Level11Content = SGetField<int>(LocalBridgeClazz, "VP9Level11"); _VP9Level11Ready = true; } return _VP9Level11Content; } }
            private static int _VP9Level11Content = default;
            private static bool _VP9Level11Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#VP9Level2"/>
            /// </summary>
            public static int VP9Level2 { get { if (!_VP9Level2Ready) { _VP9Level2Content = SGetField<int>(LocalBridgeClazz, "VP9Level2"); _VP9Level2Ready = true; } return _VP9Level2Content; } }
            private static int _VP9Level2Content = default;
            private static bool _VP9Level2Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#VP9Level21"/>
            /// </summary>
            public static int VP9Level21 { get { if (!_VP9Level21Ready) { _VP9Level21Content = SGetField<int>(LocalBridgeClazz, "VP9Level21"); _VP9Level21Ready = true; } return _VP9Level21Content; } }
            private static int _VP9Level21Content = default;
            private static bool _VP9Level21Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#VP9Level3"/>
            /// </summary>
            public static int VP9Level3 { get { if (!_VP9Level3Ready) { _VP9Level3Content = SGetField<int>(LocalBridgeClazz, "VP9Level3"); _VP9Level3Ready = true; } return _VP9Level3Content; } }
            private static int _VP9Level3Content = default;
            private static bool _VP9Level3Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#VP9Level31"/>
            /// </summary>
            public static int VP9Level31 { get { if (!_VP9Level31Ready) { _VP9Level31Content = SGetField<int>(LocalBridgeClazz, "VP9Level31"); _VP9Level31Ready = true; } return _VP9Level31Content; } }
            private static int _VP9Level31Content = default;
            private static bool _VP9Level31Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#VP9Level4"/>
            /// </summary>
            public static int VP9Level4 { get { if (!_VP9Level4Ready) { _VP9Level4Content = SGetField<int>(LocalBridgeClazz, "VP9Level4"); _VP9Level4Ready = true; } return _VP9Level4Content; } }
            private static int _VP9Level4Content = default;
            private static bool _VP9Level4Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#VP9Level41"/>
            /// </summary>
            public static int VP9Level41 { get { if (!_VP9Level41Ready) { _VP9Level41Content = SGetField<int>(LocalBridgeClazz, "VP9Level41"); _VP9Level41Ready = true; } return _VP9Level41Content; } }
            private static int _VP9Level41Content = default;
            private static bool _VP9Level41Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#VP9Level5"/>
            /// </summary>
            public static int VP9Level5 { get { if (!_VP9Level5Ready) { _VP9Level5Content = SGetField<int>(LocalBridgeClazz, "VP9Level5"); _VP9Level5Ready = true; } return _VP9Level5Content; } }
            private static int _VP9Level5Content = default;
            private static bool _VP9Level5Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#VP9Level51"/>
            /// </summary>
            public static int VP9Level51 { get { if (!_VP9Level51Ready) { _VP9Level51Content = SGetField<int>(LocalBridgeClazz, "VP9Level51"); _VP9Level51Ready = true; } return _VP9Level51Content; } }
            private static int _VP9Level51Content = default;
            private static bool _VP9Level51Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#VP9Level52"/>
            /// </summary>
            public static int VP9Level52 { get { if (!_VP9Level52Ready) { _VP9Level52Content = SGetField<int>(LocalBridgeClazz, "VP9Level52"); _VP9Level52Ready = true; } return _VP9Level52Content; } }
            private static int _VP9Level52Content = default;
            private static bool _VP9Level52Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#VP9Level6"/>
            /// </summary>
            public static int VP9Level6 { get { if (!_VP9Level6Ready) { _VP9Level6Content = SGetField<int>(LocalBridgeClazz, "VP9Level6"); _VP9Level6Ready = true; } return _VP9Level6Content; } }
            private static int _VP9Level6Content = default;
            private static bool _VP9Level6Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#VP9Level61"/>
            /// </summary>
            public static int VP9Level61 { get { if (!_VP9Level61Ready) { _VP9Level61Content = SGetField<int>(LocalBridgeClazz, "VP9Level61"); _VP9Level61Ready = true; } return _VP9Level61Content; } }
            private static int _VP9Level61Content = default;
            private static bool _VP9Level61Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#VP9Level62"/>
            /// </summary>
            public static int VP9Level62 { get { if (!_VP9Level62Ready) { _VP9Level62Content = SGetField<int>(LocalBridgeClazz, "VP9Level62"); _VP9Level62Ready = true; } return _VP9Level62Content; } }
            private static int _VP9Level62Content = default;
            private static bool _VP9Level62Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#VP9Profile0"/>
            /// </summary>
            public static int VP9Profile0 { get { if (!_VP9Profile0Ready) { _VP9Profile0Content = SGetField<int>(LocalBridgeClazz, "VP9Profile0"); _VP9Profile0Ready = true; } return _VP9Profile0Content; } }
            private static int _VP9Profile0Content = default;
            private static bool _VP9Profile0Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#VP9Profile1"/>
            /// </summary>
            public static int VP9Profile1 { get { if (!_VP9Profile1Ready) { _VP9Profile1Content = SGetField<int>(LocalBridgeClazz, "VP9Profile1"); _VP9Profile1Ready = true; } return _VP9Profile1Content; } }
            private static int _VP9Profile1Content = default;
            private static bool _VP9Profile1Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#VP9Profile2"/>
            /// </summary>
            public static int VP9Profile2 { get { if (!_VP9Profile2Ready) { _VP9Profile2Content = SGetField<int>(LocalBridgeClazz, "VP9Profile2"); _VP9Profile2Ready = true; } return _VP9Profile2Content; } }
            private static int _VP9Profile2Content = default;
            private static bool _VP9Profile2Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#VP9Profile2HDR"/>
            /// </summary>
            public static int VP9Profile2HDR { get { if (!_VP9Profile2HDRReady) { _VP9Profile2HDRContent = SGetField<int>(LocalBridgeClazz, "VP9Profile2HDR"); _VP9Profile2HDRReady = true; } return _VP9Profile2HDRContent; } }
            private static int _VP9Profile2HDRContent = default;
            private static bool _VP9Profile2HDRReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#VP9Profile2HDR10Plus"/>
            /// </summary>
            public static int VP9Profile2HDR10Plus { get { if (!_VP9Profile2HDR10PlusReady) { _VP9Profile2HDR10PlusContent = SGetField<int>(LocalBridgeClazz, "VP9Profile2HDR10Plus"); _VP9Profile2HDR10PlusReady = true; } return _VP9Profile2HDR10PlusContent; } }
            private static int _VP9Profile2HDR10PlusContent = default;
            private static bool _VP9Profile2HDR10PlusReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#VP9Profile3"/>
            /// </summary>
            public static int VP9Profile3 { get { if (!_VP9Profile3Ready) { _VP9Profile3Content = SGetField<int>(LocalBridgeClazz, "VP9Profile3"); _VP9Profile3Ready = true; } return _VP9Profile3Content; } }
            private static int _VP9Profile3Content = default;
            private static bool _VP9Profile3Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#VP9Profile3HDR"/>
            /// </summary>
            public static int VP9Profile3HDR { get { if (!_VP9Profile3HDRReady) { _VP9Profile3HDRContent = SGetField<int>(LocalBridgeClazz, "VP9Profile3HDR"); _VP9Profile3HDRReady = true; } return _VP9Profile3HDRContent; } }
            private static int _VP9Profile3HDRContent = default;
            private static bool _VP9Profile3HDRReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html#VP9Profile3HDR10Plus"/>
            /// </summary>
            public static int VP9Profile3HDR10Plus { get { if (!_VP9Profile3HDR10PlusReady) { _VP9Profile3HDR10PlusContent = SGetField<int>(LocalBridgeClazz, "VP9Profile3HDR10Plus"); _VP9Profile3HDR10PlusReady = true; } return _VP9Profile3HDR10PlusContent; } }
            private static int _VP9Profile3HDR10PlusContent = default;
            private static bool _VP9Profile3HDR10PlusReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region EncoderCapabilities implementation
        public partial class EncoderCapabilities
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.EncoderCapabilities.html#BITRATE_MODE_CBR"/>
            /// </summary>
            public static int BITRATE_MODE_CBR { get { if (!_BITRATE_MODE_CBRReady) { _BITRATE_MODE_CBRContent = SGetField<int>(LocalBridgeClazz, "BITRATE_MODE_CBR"); _BITRATE_MODE_CBRReady = true; } return _BITRATE_MODE_CBRContent; } }
            private static int _BITRATE_MODE_CBRContent = default;
            private static bool _BITRATE_MODE_CBRReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.EncoderCapabilities.html#BITRATE_MODE_CBR_FD"/>
            /// </summary>
            public static int BITRATE_MODE_CBR_FD { get { if (!_BITRATE_MODE_CBR_FDReady) { _BITRATE_MODE_CBR_FDContent = SGetField<int>(LocalBridgeClazz, "BITRATE_MODE_CBR_FD"); _BITRATE_MODE_CBR_FDReady = true; } return _BITRATE_MODE_CBR_FDContent; } }
            private static int _BITRATE_MODE_CBR_FDContent = default;
            private static bool _BITRATE_MODE_CBR_FDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.EncoderCapabilities.html#BITRATE_MODE_CQ"/>
            /// </summary>
            public static int BITRATE_MODE_CQ { get { if (!_BITRATE_MODE_CQReady) { _BITRATE_MODE_CQContent = SGetField<int>(LocalBridgeClazz, "BITRATE_MODE_CQ"); _BITRATE_MODE_CQReady = true; } return _BITRATE_MODE_CQContent; } }
            private static int _BITRATE_MODE_CQContent = default;
            private static bool _BITRATE_MODE_CQReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.EncoderCapabilities.html#BITRATE_MODE_VBR"/>
            /// </summary>
            public static int BITRATE_MODE_VBR { get { if (!_BITRATE_MODE_VBRReady) { _BITRATE_MODE_VBRContent = SGetField<int>(LocalBridgeClazz, "BITRATE_MODE_VBR"); _BITRATE_MODE_VBRReady = true; } return _BITRATE_MODE_VBRContent; } }
            private static int _BITRATE_MODE_VBRContent = default;
            private static bool _BITRATE_MODE_VBRReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.EncoderCapabilities.html#isBitrateModeSupported(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool IsBitrateModeSupported(int arg0)
            {
                return IExecuteWithSignature<bool>("isBitrateModeSupported", "(I)Z", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region VideoCapabilities implementation
        public partial class VideoCapabilities
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.html#areSizeAndRateSupported(int,int,double)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="double"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool AreSizeAndRateSupported(int arg0, int arg1, double arg2)
            {
                return IExecuteWithSignature<bool>("areSizeAndRateSupported", "(IID)Z", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.html#isSizeSupported(int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool IsSizeSupported(int arg0, int arg1)
            {
                return IExecuteWithSignature<bool>("isSizeSupported", "(II)Z", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.html#getHeightAlignment()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetHeightAlignment()
            {
                return IExecuteWithSignature<int>("getHeightAlignment", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.html#getWidthAlignment()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetWidthAlignment()
            {
                return IExecuteWithSignature<int>("getWidthAlignment", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.html#getSupportedPerformancePoints()"/>
            /// </summary>
            /// <returns><see cref="Java.Util.List"/></returns>
            public Java.Util.List<Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint> GetSupportedPerformancePoints()
            {
                return IExecuteWithSignature<Java.Util.List<Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint>>("getSupportedPerformancePoints", "()Ljava/util/List;");
            }
        
            #endregion
        
            #region Nested classes
            #region PerformancePoint implementation
            public partial class PerformancePoint
            {
                #region Constructors
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.PerformancePoint.html#%3Cinit%3E(int,int,int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <param name="arg1"><see cref="int"/></param>
                /// <param name="arg2"><see cref="int"/></param>
                public PerformancePoint(int arg0, int arg1, int arg2)
                    : base(arg0, arg1, arg2)
                {
                }
            
                #endregion
            
                #region Class/Interface conversion operators
            
                #endregion
            
                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.PerformancePoint.html#FHD_100"/>
                /// </summary>
                public static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint FHD_100 { get { if (!_FHD_100Ready) { _FHD_100Content = SGetField<Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint>(LocalBridgeClazz, "FHD_100"); _FHD_100Ready = true; } return _FHD_100Content; } }
                private static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint _FHD_100Content = default;
                private static bool _FHD_100Ready = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.PerformancePoint.html#FHD_120"/>
                /// </summary>
                public static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint FHD_120 { get { if (!_FHD_120Ready) { _FHD_120Content = SGetField<Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint>(LocalBridgeClazz, "FHD_120"); _FHD_120Ready = true; } return _FHD_120Content; } }
                private static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint _FHD_120Content = default;
                private static bool _FHD_120Ready = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.PerformancePoint.html#FHD_200"/>
                /// </summary>
                public static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint FHD_200 { get { if (!_FHD_200Ready) { _FHD_200Content = SGetField<Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint>(LocalBridgeClazz, "FHD_200"); _FHD_200Ready = true; } return _FHD_200Content; } }
                private static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint _FHD_200Content = default;
                private static bool _FHD_200Ready = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.PerformancePoint.html#FHD_24"/>
                /// </summary>
                public static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint FHD_24 { get { if (!_FHD_24Ready) { _FHD_24Content = SGetField<Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint>(LocalBridgeClazz, "FHD_24"); _FHD_24Ready = true; } return _FHD_24Content; } }
                private static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint _FHD_24Content = default;
                private static bool _FHD_24Ready = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.PerformancePoint.html#FHD_240"/>
                /// </summary>
                public static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint FHD_240 { get { if (!_FHD_240Ready) { _FHD_240Content = SGetField<Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint>(LocalBridgeClazz, "FHD_240"); _FHD_240Ready = true; } return _FHD_240Content; } }
                private static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint _FHD_240Content = default;
                private static bool _FHD_240Ready = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.PerformancePoint.html#FHD_25"/>
                /// </summary>
                public static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint FHD_25 { get { if (!_FHD_25Ready) { _FHD_25Content = SGetField<Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint>(LocalBridgeClazz, "FHD_25"); _FHD_25Ready = true; } return _FHD_25Content; } }
                private static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint _FHD_25Content = default;
                private static bool _FHD_25Ready = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.PerformancePoint.html#FHD_30"/>
                /// </summary>
                public static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint FHD_30 { get { if (!_FHD_30Ready) { _FHD_30Content = SGetField<Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint>(LocalBridgeClazz, "FHD_30"); _FHD_30Ready = true; } return _FHD_30Content; } }
                private static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint _FHD_30Content = default;
                private static bool _FHD_30Ready = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.PerformancePoint.html#FHD_50"/>
                /// </summary>
                public static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint FHD_50 { get { if (!_FHD_50Ready) { _FHD_50Content = SGetField<Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint>(LocalBridgeClazz, "FHD_50"); _FHD_50Ready = true; } return _FHD_50Content; } }
                private static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint _FHD_50Content = default;
                private static bool _FHD_50Ready = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.PerformancePoint.html#FHD_60"/>
                /// </summary>
                public static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint FHD_60 { get { if (!_FHD_60Ready) { _FHD_60Content = SGetField<Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint>(LocalBridgeClazz, "FHD_60"); _FHD_60Ready = true; } return _FHD_60Content; } }
                private static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint _FHD_60Content = default;
                private static bool _FHD_60Ready = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.PerformancePoint.html#HD_100"/>
                /// </summary>
                public static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint HD_100 { get { if (!_HD_100Ready) { _HD_100Content = SGetField<Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint>(LocalBridgeClazz, "HD_100"); _HD_100Ready = true; } return _HD_100Content; } }
                private static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint _HD_100Content = default;
                private static bool _HD_100Ready = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.PerformancePoint.html#HD_120"/>
                /// </summary>
                public static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint HD_120 { get { if (!_HD_120Ready) { _HD_120Content = SGetField<Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint>(LocalBridgeClazz, "HD_120"); _HD_120Ready = true; } return _HD_120Content; } }
                private static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint _HD_120Content = default;
                private static bool _HD_120Ready = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.PerformancePoint.html#HD_200"/>
                /// </summary>
                public static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint HD_200 { get { if (!_HD_200Ready) { _HD_200Content = SGetField<Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint>(LocalBridgeClazz, "HD_200"); _HD_200Ready = true; } return _HD_200Content; } }
                private static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint _HD_200Content = default;
                private static bool _HD_200Ready = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.PerformancePoint.html#HD_24"/>
                /// </summary>
                public static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint HD_24 { get { if (!_HD_24Ready) { _HD_24Content = SGetField<Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint>(LocalBridgeClazz, "HD_24"); _HD_24Ready = true; } return _HD_24Content; } }
                private static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint _HD_24Content = default;
                private static bool _HD_24Ready = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.PerformancePoint.html#HD_240"/>
                /// </summary>
                public static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint HD_240 { get { if (!_HD_240Ready) { _HD_240Content = SGetField<Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint>(LocalBridgeClazz, "HD_240"); _HD_240Ready = true; } return _HD_240Content; } }
                private static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint _HD_240Content = default;
                private static bool _HD_240Ready = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.PerformancePoint.html#HD_25"/>
                /// </summary>
                public static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint HD_25 { get { if (!_HD_25Ready) { _HD_25Content = SGetField<Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint>(LocalBridgeClazz, "HD_25"); _HD_25Ready = true; } return _HD_25Content; } }
                private static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint _HD_25Content = default;
                private static bool _HD_25Ready = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.PerformancePoint.html#HD_30"/>
                /// </summary>
                public static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint HD_30 { get { if (!_HD_30Ready) { _HD_30Content = SGetField<Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint>(LocalBridgeClazz, "HD_30"); _HD_30Ready = true; } return _HD_30Content; } }
                private static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint _HD_30Content = default;
                private static bool _HD_30Ready = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.PerformancePoint.html#HD_50"/>
                /// </summary>
                public static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint HD_50 { get { if (!_HD_50Ready) { _HD_50Content = SGetField<Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint>(LocalBridgeClazz, "HD_50"); _HD_50Ready = true; } return _HD_50Content; } }
                private static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint _HD_50Content = default;
                private static bool _HD_50Ready = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.PerformancePoint.html#HD_60"/>
                /// </summary>
                public static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint HD_60 { get { if (!_HD_60Ready) { _HD_60Content = SGetField<Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint>(LocalBridgeClazz, "HD_60"); _HD_60Ready = true; } return _HD_60Content; } }
                private static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint _HD_60Content = default;
                private static bool _HD_60Ready = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.PerformancePoint.html#SD_24"/>
                /// </summary>
                public static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint SD_24 { get { if (!_SD_24Ready) { _SD_24Content = SGetField<Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint>(LocalBridgeClazz, "SD_24"); _SD_24Ready = true; } return _SD_24Content; } }
                private static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint _SD_24Content = default;
                private static bool _SD_24Ready = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.PerformancePoint.html#SD_25"/>
                /// </summary>
                public static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint SD_25 { get { if (!_SD_25Ready) { _SD_25Content = SGetField<Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint>(LocalBridgeClazz, "SD_25"); _SD_25Ready = true; } return _SD_25Content; } }
                private static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint _SD_25Content = default;
                private static bool _SD_25Ready = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.PerformancePoint.html#SD_30"/>
                /// </summary>
                public static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint SD_30 { get { if (!_SD_30Ready) { _SD_30Content = SGetField<Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint>(LocalBridgeClazz, "SD_30"); _SD_30Ready = true; } return _SD_30Content; } }
                private static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint _SD_30Content = default;
                private static bool _SD_30Ready = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.PerformancePoint.html#SD_48"/>
                /// </summary>
                public static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint SD_48 { get { if (!_SD_48Ready) { _SD_48Content = SGetField<Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint>(LocalBridgeClazz, "SD_48"); _SD_48Ready = true; } return _SD_48Content; } }
                private static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint _SD_48Content = default;
                private static bool _SD_48Ready = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.PerformancePoint.html#SD_50"/>
                /// </summary>
                public static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint SD_50 { get { if (!_SD_50Ready) { _SD_50Content = SGetField<Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint>(LocalBridgeClazz, "SD_50"); _SD_50Ready = true; } return _SD_50Content; } }
                private static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint _SD_50Content = default;
                private static bool _SD_50Ready = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.PerformancePoint.html#SD_60"/>
                /// </summary>
                public static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint SD_60 { get { if (!_SD_60Ready) { _SD_60Content = SGetField<Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint>(LocalBridgeClazz, "SD_60"); _SD_60Ready = true; } return _SD_60Content; } }
                private static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint _SD_60Content = default;
                private static bool _SD_60Ready = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.PerformancePoint.html#UHD_100"/>
                /// </summary>
                public static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint UHD_100 { get { if (!_UHD_100Ready) { _UHD_100Content = SGetField<Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint>(LocalBridgeClazz, "UHD_100"); _UHD_100Ready = true; } return _UHD_100Content; } }
                private static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint _UHD_100Content = default;
                private static bool _UHD_100Ready = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.PerformancePoint.html#UHD_120"/>
                /// </summary>
                public static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint UHD_120 { get { if (!_UHD_120Ready) { _UHD_120Content = SGetField<Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint>(LocalBridgeClazz, "UHD_120"); _UHD_120Ready = true; } return _UHD_120Content; } }
                private static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint _UHD_120Content = default;
                private static bool _UHD_120Ready = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.PerformancePoint.html#UHD_200"/>
                /// </summary>
                public static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint UHD_200 { get { if (!_UHD_200Ready) { _UHD_200Content = SGetField<Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint>(LocalBridgeClazz, "UHD_200"); _UHD_200Ready = true; } return _UHD_200Content; } }
                private static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint _UHD_200Content = default;
                private static bool _UHD_200Ready = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.PerformancePoint.html#UHD_24"/>
                /// </summary>
                public static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint UHD_24 { get { if (!_UHD_24Ready) { _UHD_24Content = SGetField<Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint>(LocalBridgeClazz, "UHD_24"); _UHD_24Ready = true; } return _UHD_24Content; } }
                private static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint _UHD_24Content = default;
                private static bool _UHD_24Ready = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.PerformancePoint.html#UHD_240"/>
                /// </summary>
                public static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint UHD_240 { get { if (!_UHD_240Ready) { _UHD_240Content = SGetField<Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint>(LocalBridgeClazz, "UHD_240"); _UHD_240Ready = true; } return _UHD_240Content; } }
                private static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint _UHD_240Content = default;
                private static bool _UHD_240Ready = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.PerformancePoint.html#UHD_25"/>
                /// </summary>
                public static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint UHD_25 { get { if (!_UHD_25Ready) { _UHD_25Content = SGetField<Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint>(LocalBridgeClazz, "UHD_25"); _UHD_25Ready = true; } return _UHD_25Content; } }
                private static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint _UHD_25Content = default;
                private static bool _UHD_25Ready = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.PerformancePoint.html#UHD_30"/>
                /// </summary>
                public static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint UHD_30 { get { if (!_UHD_30Ready) { _UHD_30Content = SGetField<Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint>(LocalBridgeClazz, "UHD_30"); _UHD_30Ready = true; } return _UHD_30Content; } }
                private static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint _UHD_30Content = default;
                private static bool _UHD_30Ready = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.PerformancePoint.html#UHD_50"/>
                /// </summary>
                public static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint UHD_50 { get { if (!_UHD_50Ready) { _UHD_50Content = SGetField<Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint>(LocalBridgeClazz, "UHD_50"); _UHD_50Ready = true; } return _UHD_50Content; } }
                private static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint _UHD_50Content = default;
                private static bool _UHD_50Ready = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.PerformancePoint.html#UHD_60"/>
                /// </summary>
                public static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint UHD_60 { get { if (!_UHD_60Ready) { _UHD_60Content = SGetField<Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint>(LocalBridgeClazz, "UHD_60"); _UHD_60Ready = true; } return _UHD_60Content; } }
                private static Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint _UHD_60Content = default;
                private static bool _UHD_60Ready = false; // this is used because in case of generics 
            
                #endregion
            
                #region Static methods
            
                #endregion
            
                #region Instance methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.PerformancePoint.html#covers(android.media.MediaCodecInfo.VideoCapabilities.PerformancePoint)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint"/></param>
                /// <returns><see cref="bool"/></returns>
                public bool Covers(Android.Media.MediaCodecInfo.VideoCapabilities.PerformancePoint arg0)
                {
                    return IExecute<bool>("covers", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.PerformancePoint.html#covers(android.media.MediaFormat)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Media.MediaFormat"/></param>
                /// <returns><see cref="bool"/></returns>
                public bool Covers(Android.Media.MediaFormat arg0)
                {
                    return IExecute<bool>("covers", arg0);
                }
            
                #endregion
            
                #region Nested classes
            
                #endregion
            
                // TODO: complete the class
            }
            #endregion

        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
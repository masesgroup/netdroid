/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.2.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media
{
    #region MediaParser
    public partial class MediaParser
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#SAMPLE_FLAG_DECODE_ONLY"/>
        /// </summary>
        public static int SAMPLE_FLAG_DECODE_ONLY { get { if (!_SAMPLE_FLAG_DECODE_ONLYReady) { _SAMPLE_FLAG_DECODE_ONLYContent = SGetField<int>(LocalBridgeClazz, "SAMPLE_FLAG_DECODE_ONLY"); _SAMPLE_FLAG_DECODE_ONLYReady = true; } return _SAMPLE_FLAG_DECODE_ONLYContent; } }
        private static int _SAMPLE_FLAG_DECODE_ONLYContent = default;
        private static bool _SAMPLE_FLAG_DECODE_ONLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#SAMPLE_FLAG_ENCRYPTED"/>
        /// </summary>
        public static int SAMPLE_FLAG_ENCRYPTED { get { if (!_SAMPLE_FLAG_ENCRYPTEDReady) { _SAMPLE_FLAG_ENCRYPTEDContent = SGetField<int>(LocalBridgeClazz, "SAMPLE_FLAG_ENCRYPTED"); _SAMPLE_FLAG_ENCRYPTEDReady = true; } return _SAMPLE_FLAG_ENCRYPTEDContent; } }
        private static int _SAMPLE_FLAG_ENCRYPTEDContent = default;
        private static bool _SAMPLE_FLAG_ENCRYPTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#SAMPLE_FLAG_HAS_SUPPLEMENTAL_DATA"/>
        /// </summary>
        public static int SAMPLE_FLAG_HAS_SUPPLEMENTAL_DATA { get { if (!_SAMPLE_FLAG_HAS_SUPPLEMENTAL_DATAReady) { _SAMPLE_FLAG_HAS_SUPPLEMENTAL_DATAContent = SGetField<int>(LocalBridgeClazz, "SAMPLE_FLAG_HAS_SUPPLEMENTAL_DATA"); _SAMPLE_FLAG_HAS_SUPPLEMENTAL_DATAReady = true; } return _SAMPLE_FLAG_HAS_SUPPLEMENTAL_DATAContent; } }
        private static int _SAMPLE_FLAG_HAS_SUPPLEMENTAL_DATAContent = default;
        private static bool _SAMPLE_FLAG_HAS_SUPPLEMENTAL_DATAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#SAMPLE_FLAG_KEY_FRAME"/>
        /// </summary>
        public static int SAMPLE_FLAG_KEY_FRAME { get { if (!_SAMPLE_FLAG_KEY_FRAMEReady) { _SAMPLE_FLAG_KEY_FRAMEContent = SGetField<int>(LocalBridgeClazz, "SAMPLE_FLAG_KEY_FRAME"); _SAMPLE_FLAG_KEY_FRAMEReady = true; } return _SAMPLE_FLAG_KEY_FRAMEContent; } }
        private static int _SAMPLE_FLAG_KEY_FRAMEContent = default;
        private static bool _SAMPLE_FLAG_KEY_FRAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#SAMPLE_FLAG_LAST_SAMPLE"/>
        /// </summary>
        public static int SAMPLE_FLAG_LAST_SAMPLE { get { if (!_SAMPLE_FLAG_LAST_SAMPLEReady) { _SAMPLE_FLAG_LAST_SAMPLEContent = SGetField<int>(LocalBridgeClazz, "SAMPLE_FLAG_LAST_SAMPLE"); _SAMPLE_FLAG_LAST_SAMPLEReady = true; } return _SAMPLE_FLAG_LAST_SAMPLEContent; } }
        private static int _SAMPLE_FLAG_LAST_SAMPLEContent = default;
        private static bool _SAMPLE_FLAG_LAST_SAMPLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#PARAMETER_ADTS_ENABLE_CBR_SEEKING"/>
        /// </summary>
        public static Java.Lang.String PARAMETER_ADTS_ENABLE_CBR_SEEKING { get { if (!_PARAMETER_ADTS_ENABLE_CBR_SEEKINGReady) { _PARAMETER_ADTS_ENABLE_CBR_SEEKINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_ADTS_ENABLE_CBR_SEEKING"); _PARAMETER_ADTS_ENABLE_CBR_SEEKINGReady = true; } return _PARAMETER_ADTS_ENABLE_CBR_SEEKINGContent; } }
        private static Java.Lang.String _PARAMETER_ADTS_ENABLE_CBR_SEEKINGContent = default;
        private static bool _PARAMETER_ADTS_ENABLE_CBR_SEEKINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#PARAMETER_AMR_ENABLE_CBR_SEEKING"/>
        /// </summary>
        public static Java.Lang.String PARAMETER_AMR_ENABLE_CBR_SEEKING { get { if (!_PARAMETER_AMR_ENABLE_CBR_SEEKINGReady) { _PARAMETER_AMR_ENABLE_CBR_SEEKINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_AMR_ENABLE_CBR_SEEKING"); _PARAMETER_AMR_ENABLE_CBR_SEEKINGReady = true; } return _PARAMETER_AMR_ENABLE_CBR_SEEKINGContent; } }
        private static Java.Lang.String _PARAMETER_AMR_ENABLE_CBR_SEEKINGContent = default;
        private static bool _PARAMETER_AMR_ENABLE_CBR_SEEKINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#PARAMETER_FLAC_DISABLE_ID3"/>
        /// </summary>
        public static Java.Lang.String PARAMETER_FLAC_DISABLE_ID3 { get { if (!_PARAMETER_FLAC_DISABLE_ID3Ready) { _PARAMETER_FLAC_DISABLE_ID3Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_FLAC_DISABLE_ID3"); _PARAMETER_FLAC_DISABLE_ID3Ready = true; } return _PARAMETER_FLAC_DISABLE_ID3Content; } }
        private static Java.Lang.String _PARAMETER_FLAC_DISABLE_ID3Content = default;
        private static bool _PARAMETER_FLAC_DISABLE_ID3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#PARAMETER_MATROSKA_DISABLE_CUES_SEEKING"/>
        /// </summary>
        public static Java.Lang.String PARAMETER_MATROSKA_DISABLE_CUES_SEEKING { get { if (!_PARAMETER_MATROSKA_DISABLE_CUES_SEEKINGReady) { _PARAMETER_MATROSKA_DISABLE_CUES_SEEKINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_MATROSKA_DISABLE_CUES_SEEKING"); _PARAMETER_MATROSKA_DISABLE_CUES_SEEKINGReady = true; } return _PARAMETER_MATROSKA_DISABLE_CUES_SEEKINGContent; } }
        private static Java.Lang.String _PARAMETER_MATROSKA_DISABLE_CUES_SEEKINGContent = default;
        private static bool _PARAMETER_MATROSKA_DISABLE_CUES_SEEKINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#PARAMETER_MP3_DISABLE_ID3"/>
        /// </summary>
        public static Java.Lang.String PARAMETER_MP3_DISABLE_ID3 { get { if (!_PARAMETER_MP3_DISABLE_ID3Ready) { _PARAMETER_MP3_DISABLE_ID3Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_MP3_DISABLE_ID3"); _PARAMETER_MP3_DISABLE_ID3Ready = true; } return _PARAMETER_MP3_DISABLE_ID3Content; } }
        private static Java.Lang.String _PARAMETER_MP3_DISABLE_ID3Content = default;
        private static bool _PARAMETER_MP3_DISABLE_ID3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#PARAMETER_MP3_ENABLE_CBR_SEEKING"/>
        /// </summary>
        public static Java.Lang.String PARAMETER_MP3_ENABLE_CBR_SEEKING { get { if (!_PARAMETER_MP3_ENABLE_CBR_SEEKINGReady) { _PARAMETER_MP3_ENABLE_CBR_SEEKINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_MP3_ENABLE_CBR_SEEKING"); _PARAMETER_MP3_ENABLE_CBR_SEEKINGReady = true; } return _PARAMETER_MP3_ENABLE_CBR_SEEKINGContent; } }
        private static Java.Lang.String _PARAMETER_MP3_ENABLE_CBR_SEEKINGContent = default;
        private static bool _PARAMETER_MP3_ENABLE_CBR_SEEKINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#PARAMETER_MP3_ENABLE_INDEX_SEEKING"/>
        /// </summary>
        public static Java.Lang.String PARAMETER_MP3_ENABLE_INDEX_SEEKING { get { if (!_PARAMETER_MP3_ENABLE_INDEX_SEEKINGReady) { _PARAMETER_MP3_ENABLE_INDEX_SEEKINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_MP3_ENABLE_INDEX_SEEKING"); _PARAMETER_MP3_ENABLE_INDEX_SEEKINGReady = true; } return _PARAMETER_MP3_ENABLE_INDEX_SEEKINGContent; } }
        private static Java.Lang.String _PARAMETER_MP3_ENABLE_INDEX_SEEKINGContent = default;
        private static bool _PARAMETER_MP3_ENABLE_INDEX_SEEKINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#PARAMETER_MP4_IGNORE_EDIT_LISTS"/>
        /// </summary>
        public static Java.Lang.String PARAMETER_MP4_IGNORE_EDIT_LISTS { get { if (!_PARAMETER_MP4_IGNORE_EDIT_LISTSReady) { _PARAMETER_MP4_IGNORE_EDIT_LISTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_MP4_IGNORE_EDIT_LISTS"); _PARAMETER_MP4_IGNORE_EDIT_LISTSReady = true; } return _PARAMETER_MP4_IGNORE_EDIT_LISTSContent; } }
        private static Java.Lang.String _PARAMETER_MP4_IGNORE_EDIT_LISTSContent = default;
        private static bool _PARAMETER_MP4_IGNORE_EDIT_LISTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#PARAMETER_MP4_IGNORE_TFDT_BOX"/>
        /// </summary>
        public static Java.Lang.String PARAMETER_MP4_IGNORE_TFDT_BOX { get { if (!_PARAMETER_MP4_IGNORE_TFDT_BOXReady) { _PARAMETER_MP4_IGNORE_TFDT_BOXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_MP4_IGNORE_TFDT_BOX"); _PARAMETER_MP4_IGNORE_TFDT_BOXReady = true; } return _PARAMETER_MP4_IGNORE_TFDT_BOXContent; } }
        private static Java.Lang.String _PARAMETER_MP4_IGNORE_TFDT_BOXContent = default;
        private static bool _PARAMETER_MP4_IGNORE_TFDT_BOXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#PARAMETER_MP4_TREAT_VIDEO_FRAMES_AS_KEYFRAMES"/>
        /// </summary>
        public static Java.Lang.String PARAMETER_MP4_TREAT_VIDEO_FRAMES_AS_KEYFRAMES { get { if (!_PARAMETER_MP4_TREAT_VIDEO_FRAMES_AS_KEYFRAMESReady) { _PARAMETER_MP4_TREAT_VIDEO_FRAMES_AS_KEYFRAMESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_MP4_TREAT_VIDEO_FRAMES_AS_KEYFRAMES"); _PARAMETER_MP4_TREAT_VIDEO_FRAMES_AS_KEYFRAMESReady = true; } return _PARAMETER_MP4_TREAT_VIDEO_FRAMES_AS_KEYFRAMESContent; } }
        private static Java.Lang.String _PARAMETER_MP4_TREAT_VIDEO_FRAMES_AS_KEYFRAMESContent = default;
        private static bool _PARAMETER_MP4_TREAT_VIDEO_FRAMES_AS_KEYFRAMESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#PARAMETER_TS_ALLOW_NON_IDR_AVC_KEYFRAMES"/>
        /// </summary>
        public static Java.Lang.String PARAMETER_TS_ALLOW_NON_IDR_AVC_KEYFRAMES { get { if (!_PARAMETER_TS_ALLOW_NON_IDR_AVC_KEYFRAMESReady) { _PARAMETER_TS_ALLOW_NON_IDR_AVC_KEYFRAMESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_TS_ALLOW_NON_IDR_AVC_KEYFRAMES"); _PARAMETER_TS_ALLOW_NON_IDR_AVC_KEYFRAMESReady = true; } return _PARAMETER_TS_ALLOW_NON_IDR_AVC_KEYFRAMESContent; } }
        private static Java.Lang.String _PARAMETER_TS_ALLOW_NON_IDR_AVC_KEYFRAMESContent = default;
        private static bool _PARAMETER_TS_ALLOW_NON_IDR_AVC_KEYFRAMESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#PARAMETER_TS_DETECT_ACCESS_UNITS"/>
        /// </summary>
        public static Java.Lang.String PARAMETER_TS_DETECT_ACCESS_UNITS { get { if (!_PARAMETER_TS_DETECT_ACCESS_UNITSReady) { _PARAMETER_TS_DETECT_ACCESS_UNITSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_TS_DETECT_ACCESS_UNITS"); _PARAMETER_TS_DETECT_ACCESS_UNITSReady = true; } return _PARAMETER_TS_DETECT_ACCESS_UNITSContent; } }
        private static Java.Lang.String _PARAMETER_TS_DETECT_ACCESS_UNITSContent = default;
        private static bool _PARAMETER_TS_DETECT_ACCESS_UNITSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#PARAMETER_TS_ENABLE_HDMV_DTS_AUDIO_STREAMS"/>
        /// </summary>
        public static Java.Lang.String PARAMETER_TS_ENABLE_HDMV_DTS_AUDIO_STREAMS { get { if (!_PARAMETER_TS_ENABLE_HDMV_DTS_AUDIO_STREAMSReady) { _PARAMETER_TS_ENABLE_HDMV_DTS_AUDIO_STREAMSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_TS_ENABLE_HDMV_DTS_AUDIO_STREAMS"); _PARAMETER_TS_ENABLE_HDMV_DTS_AUDIO_STREAMSReady = true; } return _PARAMETER_TS_ENABLE_HDMV_DTS_AUDIO_STREAMSContent; } }
        private static Java.Lang.String _PARAMETER_TS_ENABLE_HDMV_DTS_AUDIO_STREAMSContent = default;
        private static bool _PARAMETER_TS_ENABLE_HDMV_DTS_AUDIO_STREAMSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#PARAMETER_TS_IGNORE_AAC_STREAM"/>
        /// </summary>
        public static Java.Lang.String PARAMETER_TS_IGNORE_AAC_STREAM { get { if (!_PARAMETER_TS_IGNORE_AAC_STREAMReady) { _PARAMETER_TS_IGNORE_AAC_STREAMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_TS_IGNORE_AAC_STREAM"); _PARAMETER_TS_IGNORE_AAC_STREAMReady = true; } return _PARAMETER_TS_IGNORE_AAC_STREAMContent; } }
        private static Java.Lang.String _PARAMETER_TS_IGNORE_AAC_STREAMContent = default;
        private static bool _PARAMETER_TS_IGNORE_AAC_STREAMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#PARAMETER_TS_IGNORE_AVC_STREAM"/>
        /// </summary>
        public static Java.Lang.String PARAMETER_TS_IGNORE_AVC_STREAM { get { if (!_PARAMETER_TS_IGNORE_AVC_STREAMReady) { _PARAMETER_TS_IGNORE_AVC_STREAMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_TS_IGNORE_AVC_STREAM"); _PARAMETER_TS_IGNORE_AVC_STREAMReady = true; } return _PARAMETER_TS_IGNORE_AVC_STREAMContent; } }
        private static Java.Lang.String _PARAMETER_TS_IGNORE_AVC_STREAMContent = default;
        private static bool _PARAMETER_TS_IGNORE_AVC_STREAMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#PARAMETER_TS_IGNORE_SPLICE_INFO_STREAM"/>
        /// </summary>
        public static Java.Lang.String PARAMETER_TS_IGNORE_SPLICE_INFO_STREAM { get { if (!_PARAMETER_TS_IGNORE_SPLICE_INFO_STREAMReady) { _PARAMETER_TS_IGNORE_SPLICE_INFO_STREAMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_TS_IGNORE_SPLICE_INFO_STREAM"); _PARAMETER_TS_IGNORE_SPLICE_INFO_STREAMReady = true; } return _PARAMETER_TS_IGNORE_SPLICE_INFO_STREAMContent; } }
        private static Java.Lang.String _PARAMETER_TS_IGNORE_SPLICE_INFO_STREAMContent = default;
        private static bool _PARAMETER_TS_IGNORE_SPLICE_INFO_STREAMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#PARAMETER_TS_MODE"/>
        /// </summary>
        public static Java.Lang.String PARAMETER_TS_MODE { get { if (!_PARAMETER_TS_MODEReady) { _PARAMETER_TS_MODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_TS_MODE"); _PARAMETER_TS_MODEReady = true; } return _PARAMETER_TS_MODEContent; } }
        private static Java.Lang.String _PARAMETER_TS_MODEContent = default;
        private static bool _PARAMETER_TS_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#PARSER_NAME_AC3"/>
        /// </summary>
        public static Java.Lang.String PARSER_NAME_AC3 { get { if (!_PARSER_NAME_AC3Ready) { _PARSER_NAME_AC3Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARSER_NAME_AC3"); _PARSER_NAME_AC3Ready = true; } return _PARSER_NAME_AC3Content; } }
        private static Java.Lang.String _PARSER_NAME_AC3Content = default;
        private static bool _PARSER_NAME_AC3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#PARSER_NAME_AC4"/>
        /// </summary>
        public static Java.Lang.String PARSER_NAME_AC4 { get { if (!_PARSER_NAME_AC4Ready) { _PARSER_NAME_AC4Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARSER_NAME_AC4"); _PARSER_NAME_AC4Ready = true; } return _PARSER_NAME_AC4Content; } }
        private static Java.Lang.String _PARSER_NAME_AC4Content = default;
        private static bool _PARSER_NAME_AC4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#PARSER_NAME_ADTS"/>
        /// </summary>
        public static Java.Lang.String PARSER_NAME_ADTS { get { if (!_PARSER_NAME_ADTSReady) { _PARSER_NAME_ADTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARSER_NAME_ADTS"); _PARSER_NAME_ADTSReady = true; } return _PARSER_NAME_ADTSContent; } }
        private static Java.Lang.String _PARSER_NAME_ADTSContent = default;
        private static bool _PARSER_NAME_ADTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#PARSER_NAME_AMR"/>
        /// </summary>
        public static Java.Lang.String PARSER_NAME_AMR { get { if (!_PARSER_NAME_AMRReady) { _PARSER_NAME_AMRContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARSER_NAME_AMR"); _PARSER_NAME_AMRReady = true; } return _PARSER_NAME_AMRContent; } }
        private static Java.Lang.String _PARSER_NAME_AMRContent = default;
        private static bool _PARSER_NAME_AMRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#PARSER_NAME_FLAC"/>
        /// </summary>
        public static Java.Lang.String PARSER_NAME_FLAC { get { if (!_PARSER_NAME_FLACReady) { _PARSER_NAME_FLACContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARSER_NAME_FLAC"); _PARSER_NAME_FLACReady = true; } return _PARSER_NAME_FLACContent; } }
        private static Java.Lang.String _PARSER_NAME_FLACContent = default;
        private static bool _PARSER_NAME_FLACReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#PARSER_NAME_FLV"/>
        /// </summary>
        public static Java.Lang.String PARSER_NAME_FLV { get { if (!_PARSER_NAME_FLVReady) { _PARSER_NAME_FLVContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARSER_NAME_FLV"); _PARSER_NAME_FLVReady = true; } return _PARSER_NAME_FLVContent; } }
        private static Java.Lang.String _PARSER_NAME_FLVContent = default;
        private static bool _PARSER_NAME_FLVReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#PARSER_NAME_FMP4"/>
        /// </summary>
        public static Java.Lang.String PARSER_NAME_FMP4 { get { if (!_PARSER_NAME_FMP4Ready) { _PARSER_NAME_FMP4Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARSER_NAME_FMP4"); _PARSER_NAME_FMP4Ready = true; } return _PARSER_NAME_FMP4Content; } }
        private static Java.Lang.String _PARSER_NAME_FMP4Content = default;
        private static bool _PARSER_NAME_FMP4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#PARSER_NAME_MATROSKA"/>
        /// </summary>
        public static Java.Lang.String PARSER_NAME_MATROSKA { get { if (!_PARSER_NAME_MATROSKAReady) { _PARSER_NAME_MATROSKAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARSER_NAME_MATROSKA"); _PARSER_NAME_MATROSKAReady = true; } return _PARSER_NAME_MATROSKAContent; } }
        private static Java.Lang.String _PARSER_NAME_MATROSKAContent = default;
        private static bool _PARSER_NAME_MATROSKAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#PARSER_NAME_MP3"/>
        /// </summary>
        public static Java.Lang.String PARSER_NAME_MP3 { get { if (!_PARSER_NAME_MP3Ready) { _PARSER_NAME_MP3Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARSER_NAME_MP3"); _PARSER_NAME_MP3Ready = true; } return _PARSER_NAME_MP3Content; } }
        private static Java.Lang.String _PARSER_NAME_MP3Content = default;
        private static bool _PARSER_NAME_MP3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#PARSER_NAME_MP4"/>
        /// </summary>
        public static Java.Lang.String PARSER_NAME_MP4 { get { if (!_PARSER_NAME_MP4Ready) { _PARSER_NAME_MP4Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARSER_NAME_MP4"); _PARSER_NAME_MP4Ready = true; } return _PARSER_NAME_MP4Content; } }
        private static Java.Lang.String _PARSER_NAME_MP4Content = default;
        private static bool _PARSER_NAME_MP4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#PARSER_NAME_OGG"/>
        /// </summary>
        public static Java.Lang.String PARSER_NAME_OGG { get { if (!_PARSER_NAME_OGGReady) { _PARSER_NAME_OGGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARSER_NAME_OGG"); _PARSER_NAME_OGGReady = true; } return _PARSER_NAME_OGGContent; } }
        private static Java.Lang.String _PARSER_NAME_OGGContent = default;
        private static bool _PARSER_NAME_OGGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#PARSER_NAME_PS"/>
        /// </summary>
        public static Java.Lang.String PARSER_NAME_PS { get { if (!_PARSER_NAME_PSReady) { _PARSER_NAME_PSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARSER_NAME_PS"); _PARSER_NAME_PSReady = true; } return _PARSER_NAME_PSContent; } }
        private static Java.Lang.String _PARSER_NAME_PSContent = default;
        private static bool _PARSER_NAME_PSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#PARSER_NAME_TS"/>
        /// </summary>
        public static Java.Lang.String PARSER_NAME_TS { get { if (!_PARSER_NAME_TSReady) { _PARSER_NAME_TSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARSER_NAME_TS"); _PARSER_NAME_TSReady = true; } return _PARSER_NAME_TSContent; } }
        private static Java.Lang.String _PARSER_NAME_TSContent = default;
        private static bool _PARSER_NAME_TSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#PARSER_NAME_UNKNOWN"/>
        /// </summary>
        public static Java.Lang.String PARSER_NAME_UNKNOWN { get { if (!_PARSER_NAME_UNKNOWNReady) { _PARSER_NAME_UNKNOWNContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARSER_NAME_UNKNOWN"); _PARSER_NAME_UNKNOWNReady = true; } return _PARSER_NAME_UNKNOWNContent; } }
        private static Java.Lang.String _PARSER_NAME_UNKNOWNContent = default;
        private static bool _PARSER_NAME_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#PARSER_NAME_WAV"/>
        /// </summary>
        public static Java.Lang.String PARSER_NAME_WAV { get { if (!_PARSER_NAME_WAVReady) { _PARSER_NAME_WAVContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARSER_NAME_WAV"); _PARSER_NAME_WAVReady = true; } return _PARSER_NAME_WAVContent; } }
        private static Java.Lang.String _PARSER_NAME_WAVContent = default;
        private static bool _PARSER_NAME_WAVReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#create(android.media.MediaParser.OutputConsumer,java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaParser.OutputConsumer"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Media.MediaParser"/></returns>
        public static Android.Media.MediaParser Create(Android.Media.MediaParser.OutputConsumer arg0, params Java.Lang.String[] arg1)
        {
            if (arg1.Length == 0) return SExecute<Android.Media.MediaParser>(LocalBridgeClazz, "create", arg0); else return SExecute<Android.Media.MediaParser>(LocalBridgeClazz, "create", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#createByName(java.lang.String,android.media.MediaParser.OutputConsumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Media.MediaParser.OutputConsumer"/></param>
        /// <returns><see cref="Android.Media.MediaParser"/></returns>
        public static Android.Media.MediaParser CreateByName(Java.Lang.String arg0, Android.Media.MediaParser.OutputConsumer arg1)
        {
            return SExecute<Android.Media.MediaParser>(LocalBridgeClazz, "createByName", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#getParserNames(android.media.MediaFormat)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaFormat"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public static Java.Util.List<Java.Lang.String> GetParserNames(Android.Media.MediaFormat arg0)
        {
            return SExecuteWithSignature<Java.Util.List<Java.Lang.String>>(LocalBridgeClazz, "getParserNames", "(Landroid/media/MediaFormat;)Ljava/util/List;", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#setParameter(java.lang.String,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="object"/></param>
        /// <returns><see cref="Android.Media.MediaParser"/></returns>
        public Android.Media.MediaParser SetParameter(Java.Lang.String arg0, object arg1)
        {
            return IExecute<Android.Media.MediaParser>("setParameter", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#getLogSessionId()"/>
        /// </summary>
        /// <returns><see cref="Android.Media.Metrics.LogSessionId"/></returns>
        public Android.Media.Metrics.LogSessionId GetLogSessionId()
        {
            return IExecuteWithSignature<Android.Media.Metrics.LogSessionId>("getLogSessionId", "()Landroid/media/metrics/LogSessionId;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#advance(android.media.MediaParser.SeekableInputReader)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaParser.SeekableInputReader"/></param>
        /// <returns><see cref="bool"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public bool Advance(Android.Media.MediaParser.SeekableInputReader arg0)
        {
            return IExecuteWithSignature<bool>("advance", "(Landroid/media/MediaParser$SeekableInputReader;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#supportsParameter(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SupportsParameter(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<bool>("supportsParameter", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#getParserName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetParserName()
        {
            return IExecuteWithSignature<Java.Lang.String>("getParserName", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#release()"/>
        /// </summary>
        public void Release()
        {
            IExecuteWithSignature("release", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#seek(android.media.MediaParser.SeekPoint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaParser.SeekPoint"/></param>
        public void Seek(Android.Media.MediaParser.SeekPoint arg0)
        {
            IExecuteWithSignature("seek", "(Landroid/media/MediaParser$SeekPoint;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaParser.html#setLogSessionId(android.media.metrics.LogSessionId)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.Metrics.LogSessionId"/></param>
        public void SetLogSessionId(Android.Media.Metrics.LogSessionId arg0)
        {
            IExecuteWithSignature("setLogSessionId", "(Landroid/media/metrics/LogSessionId;)V", arg0);
        }

        #endregion

        #region Nested classes
        #region InputReader
        public partial class InputReader
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaParser.InputReader.html#read(byte[],int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="byte"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <returns><see cref="int"/></returns>
            /// <exception cref="Java.Io.IOException"/>
            public int Read(byte[] arg0, int arg1, int arg2)
            {
                return IExecute<int>("read", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaParser.InputReader.html#getLength()"/>
            /// </summary>
            /// <returns><see cref="long"/></returns>
            public long GetLength()
            {
                return IExecuteWithSignature<long>("getLength", "()J");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaParser.InputReader.html#getPosition()"/>
            /// </summary>
            /// <returns><see cref="long"/></returns>
            public long GetPosition()
            {
                return IExecuteWithSignature<long>("getPosition", "()J");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OutputConsumer
        public partial class OutputConsumer
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaParser.OutputConsumer.html#onSampleCompleted(int,long,int,int,int,android.media.MediaCodec.CryptoInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="int"/></param>
            /// <param name="arg4"><see cref="int"/></param>
            /// <param name="arg5"><see cref="Android.Media.MediaCodec.CryptoInfo"/></param>
            public void OnSampleCompleted(int arg0, long arg1, int arg2, int arg3, int arg4, Android.Media.MediaCodec.CryptoInfo arg5)
            {
                IExecute("onSampleCompleted", arg0, arg1, arg2, arg3, arg4, arg5);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaParser.OutputConsumer.html#onSampleDataFound(int,android.media.MediaParser.InputReader)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Android.Media.MediaParser.InputReader"/></param>
            /// <exception cref="Java.Io.IOException"/>
            public void OnSampleDataFound(int arg0, Android.Media.MediaParser.InputReader arg1)
            {
                IExecute("onSampleDataFound", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaParser.OutputConsumer.html#onSeekMapFound(android.media.MediaParser.SeekMap)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaParser.SeekMap"/></param>
            public void OnSeekMapFound(Android.Media.MediaParser.SeekMap arg0)
            {
                IExecuteWithSignature("onSeekMapFound", "(Landroid/media/MediaParser$SeekMap;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaParser.OutputConsumer.html#onTrackCountFound(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void OnTrackCountFound(int arg0)
            {
                IExecuteWithSignature("onTrackCountFound", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaParser.OutputConsumer.html#onTrackDataFound(int,android.media.MediaParser.TrackData)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Android.Media.MediaParser.TrackData"/></param>
            public void OnTrackDataFound(int arg0, Android.Media.MediaParser.TrackData arg1)
            {
                IExecute("onTrackDataFound", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ParsingException
        public partial class ParsingException
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region SeekableInputReader
        public partial class SeekableInputReader
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaParser.SeekableInputReader.html#seekToPosition(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            public void SeekToPosition(long arg0)
            {
                IExecuteWithSignature("seekToPosition", "(J)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region SeekMap
        public partial class SeekMap
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaParser.SeekMap.html#UNKNOWN_DURATION"/>
            /// </summary>
            public static int UNKNOWN_DURATION { get { if (!_UNKNOWN_DURATIONReady) { _UNKNOWN_DURATIONContent = SGetField<int>(LocalBridgeClazz, "UNKNOWN_DURATION"); _UNKNOWN_DURATIONReady = true; } return _UNKNOWN_DURATIONContent; } }
            private static int _UNKNOWN_DURATIONContent = default;
            private static bool _UNKNOWN_DURATIONReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaParser.SeekMap.html#getSeekPoints(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.Util.Pair"/></returns>
            public Android.Util.Pair<Android.Media.MediaParser.SeekPoint, Android.Media.MediaParser.SeekPoint> GetSeekPoints(long arg0)
            {
                return IExecuteWithSignature<Android.Util.Pair<Android.Media.MediaParser.SeekPoint, Android.Media.MediaParser.SeekPoint>>("getSeekPoints", "(J)Landroid/util/Pair;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaParser.SeekMap.html#isSeekable()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsSeekable()
            {
                return IExecuteWithSignature<bool>("isSeekable", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaParser.SeekMap.html#getDurationMicros()"/>
            /// </summary>
            /// <returns><see cref="long"/></returns>
            public long GetDurationMicros()
            {
                return IExecuteWithSignature<long>("getDurationMicros", "()J");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region SeekPoint
        public partial class SeekPoint
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaParser.SeekPoint.html#position"/>
            /// </summary>
            public long position { get { if (!_positionReady) { _positionContent = IGetField<long>("position"); _positionReady = true; } return _positionContent; } }
            private long _positionContent = default;
            private bool _positionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaParser.SeekPoint.html#timeMicros"/>
            /// </summary>
            public long timeMicros { get { if (!_timeMicrosReady) { _timeMicrosContent = IGetField<long>("timeMicros"); _timeMicrosReady = true; } return _timeMicrosContent; } }
            private long _timeMicrosContent = default;
            private bool _timeMicrosReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaParser.SeekPoint.html#START"/>
            /// </summary>
            public static Android.Media.MediaParser.SeekPoint START { get { if (!_STARTReady) { _STARTContent = SGetField<Android.Media.MediaParser.SeekPoint>(LocalBridgeClazz, "START"); _STARTReady = true; } return _STARTContent; } }
            private static Android.Media.MediaParser.SeekPoint _STARTContent = default;
            private static bool _STARTReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region TrackData
        public partial class TrackData
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaParser.TrackData.html#drmInitData"/>
            /// </summary>
            public Android.Media.DrmInitData drmInitData { get { if (!_drmInitDataReady) { _drmInitDataContent = IGetField<Android.Media.DrmInitData>("drmInitData"); _drmInitDataReady = true; } return _drmInitDataContent; } }
            private Android.Media.DrmInitData _drmInitDataContent = default;
            private bool _drmInitDataReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaParser.TrackData.html#mediaFormat"/>
            /// </summary>
            public Android.Media.MediaFormat mediaFormat { get { if (!_mediaFormatReady) { _mediaFormatContent = IGetField<Android.Media.MediaFormat>("mediaFormat"); _mediaFormatReady = true; } return _mediaFormatContent; } }
            private Android.Media.MediaFormat _mediaFormatContent = default;
            private bool _mediaFormatReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region UnrecognizedInputFormatException
        public partial class UnrecognizedInputFormatException
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
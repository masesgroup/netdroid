/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media.Audiofx
{
    #region DynamicsProcessing declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.html"/>
    /// </summary>
    public partial class DynamicsProcessing : Android.Media.Audiofx.AudioEffect
    {
        const string _bridgeClassName = "android.media.audiofx.DynamicsProcessing";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public DynamicsProcessing() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public DynamicsProcessing(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region BandBase declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.BandBase.html"/>
        /// </summary>
        public partial class BandBase : MASES.JCOBridge.C2JBridge.JVMBridgeBase<BandBase>
        {
            const string _bridgeClassName = "android.media.audiofx.DynamicsProcessing$BandBase";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public BandBase() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public BandBase(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region BandStage declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.BandStage.html"/>
        /// </summary>
        public partial class BandStage : Android.Media.Audiofx.DynamicsProcessing.Stage
        {
            const string _bridgeClassName = "android.media.audiofx.DynamicsProcessing$BandStage";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public BandStage() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public BandStage(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region Channel declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Channel.html"/>
        /// </summary>
        public partial class Channel : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Channel>
        {
            const string _bridgeClassName = "android.media.audiofx.DynamicsProcessing$Channel";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Channel() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Channel(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region Config declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html"/>
        /// </summary>
        public partial class Config : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Config>
        {
            const string _bridgeClassName = "android.media.audiofx.DynamicsProcessing$Config";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Config() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Config(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class
            #region Builder declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.Builder.html"/>
            /// </summary>
            public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
            {
                const string _bridgeClassName = "android.media.audiofx.DynamicsProcessing$Config$Builder";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                public Builder() { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                public Builder(params object[] args) : base(args) { }

                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                /// </summary>
                public override string BridgeClassName => _bridgeClassName;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                /// </summary>
                public override bool IsBridgeAbstract => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                /// </summary>
                public override bool IsBridgeCloseable => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                /// </summary>
                public override bool IsBridgeInterface => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                /// </summary>
                public override bool IsBridgeStatic => true;

                // TODO: complete the class

            }
            #endregion

        
        }
        #endregion

        #region Eq declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Eq.html"/>
        /// </summary>
        public partial class Eq : Android.Media.Audiofx.DynamicsProcessing.BandStage
        {
            const string _bridgeClassName = "android.media.audiofx.DynamicsProcessing$Eq";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Eq() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Eq(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region EqBand declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.EqBand.html"/>
        /// </summary>
        public partial class EqBand : Android.Media.Audiofx.DynamicsProcessing.BandBase
        {
            const string _bridgeClassName = "android.media.audiofx.DynamicsProcessing$EqBand";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public EqBand() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public EqBand(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region Limiter declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Limiter.html"/>
        /// </summary>
        public partial class Limiter : Android.Media.Audiofx.DynamicsProcessing.Stage
        {
            const string _bridgeClassName = "android.media.audiofx.DynamicsProcessing$Limiter";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Limiter() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Limiter(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region Mbc declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Mbc.html"/>
        /// </summary>
        public partial class Mbc : Android.Media.Audiofx.DynamicsProcessing.BandStage
        {
            const string _bridgeClassName = "android.media.audiofx.DynamicsProcessing$Mbc";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Mbc() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Mbc(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region MbcBand declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.MbcBand.html"/>
        /// </summary>
        public partial class MbcBand : Android.Media.Audiofx.DynamicsProcessing.BandBase
        {
            const string _bridgeClassName = "android.media.audiofx.DynamicsProcessing$MbcBand";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public MbcBand() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public MbcBand(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region Stage declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Stage.html"/>
        /// </summary>
        public partial class Stage : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Stage>
        {
            const string _bridgeClassName = "android.media.audiofx.DynamicsProcessing$Stage";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Stage() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Stage(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region DynamicsProcessing implementation
    public partial class DynamicsProcessing
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.html#%3Cinit%3E(int,int,android.media.audiofx.DynamicsProcessing.Config)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Media.Audiofx.DynamicsProcessing.Config"/></param>
        public DynamicsProcessing(int arg0, int arg1, Android.Media.Audiofx.DynamicsProcessing.Config arg2)
            : base(arg0, arg1, arg2)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.html#%3Cinit%3E(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public DynamicsProcessing(int arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.html#VARIANT_FAVOR_FREQUENCY_RESOLUTION"/>
        /// </summary>
        public static int VARIANT_FAVOR_FREQUENCY_RESOLUTION { get { if (!_VARIANT_FAVOR_FREQUENCY_RESOLUTIONReady) { _VARIANT_FAVOR_FREQUENCY_RESOLUTIONContent = SGetField<int>(LocalBridgeClazz, "VARIANT_FAVOR_FREQUENCY_RESOLUTION"); _VARIANT_FAVOR_FREQUENCY_RESOLUTIONReady = true; } return _VARIANT_FAVOR_FREQUENCY_RESOLUTIONContent; } }
        private static int _VARIANT_FAVOR_FREQUENCY_RESOLUTIONContent = default;
        private static bool _VARIANT_FAVOR_FREQUENCY_RESOLUTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.html#VARIANT_FAVOR_TIME_RESOLUTION"/>
        /// </summary>
        public static int VARIANT_FAVOR_TIME_RESOLUTION { get { if (!_VARIANT_FAVOR_TIME_RESOLUTIONReady) { _VARIANT_FAVOR_TIME_RESOLUTIONContent = SGetField<int>(LocalBridgeClazz, "VARIANT_FAVOR_TIME_RESOLUTION"); _VARIANT_FAVOR_TIME_RESOLUTIONReady = true; } return _VARIANT_FAVOR_TIME_RESOLUTIONContent; } }
        private static int _VARIANT_FAVOR_TIME_RESOLUTIONContent = default;
        private static bool _VARIANT_FAVOR_TIME_RESOLUTIONReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.html#getChannelByChannelIndex(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Media.Audiofx.DynamicsProcessing.Channel"/></returns>
        public Android.Media.Audiofx.DynamicsProcessing.Channel GetChannelByChannelIndex(int arg0)
        {
            return IExecuteWithSignature<Android.Media.Audiofx.DynamicsProcessing.Channel>("getChannelByChannelIndex", "(I)Landroid/media/audiofx/DynamicsProcessing$Channel;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.html#getConfig()"/>
        /// </summary>
        /// <returns><see cref="Android.Media.Audiofx.DynamicsProcessing.Config"/></returns>
        public Android.Media.Audiofx.DynamicsProcessing.Config GetConfig()
        {
            return IExecuteWithSignature<Android.Media.Audiofx.DynamicsProcessing.Config>("getConfig", "()Landroid/media/audiofx/DynamicsProcessing$Config;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.html#getPostEqByChannelIndex(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Media.Audiofx.DynamicsProcessing.Eq"/></returns>
        public Android.Media.Audiofx.DynamicsProcessing.Eq GetPostEqByChannelIndex(int arg0)
        {
            return IExecuteWithSignature<Android.Media.Audiofx.DynamicsProcessing.Eq>("getPostEqByChannelIndex", "(I)Landroid/media/audiofx/DynamicsProcessing$Eq;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.html#getPreEqByChannelIndex(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Media.Audiofx.DynamicsProcessing.Eq"/></returns>
        public Android.Media.Audiofx.DynamicsProcessing.Eq GetPreEqByChannelIndex(int arg0)
        {
            return IExecuteWithSignature<Android.Media.Audiofx.DynamicsProcessing.Eq>("getPreEqByChannelIndex", "(I)Landroid/media/audiofx/DynamicsProcessing$Eq;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.html#getPostEqBandByChannelIndex(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.Media.Audiofx.DynamicsProcessing.EqBand"/></returns>
        public Android.Media.Audiofx.DynamicsProcessing.EqBand GetPostEqBandByChannelIndex(int arg0, int arg1)
        {
            return IExecute<Android.Media.Audiofx.DynamicsProcessing.EqBand>("getPostEqBandByChannelIndex", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.html#getPreEqBandByChannelIndex(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.Media.Audiofx.DynamicsProcessing.EqBand"/></returns>
        public Android.Media.Audiofx.DynamicsProcessing.EqBand GetPreEqBandByChannelIndex(int arg0, int arg1)
        {
            return IExecute<Android.Media.Audiofx.DynamicsProcessing.EqBand>("getPreEqBandByChannelIndex", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.html#getLimiterByChannelIndex(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Media.Audiofx.DynamicsProcessing.Limiter"/></returns>
        public Android.Media.Audiofx.DynamicsProcessing.Limiter GetLimiterByChannelIndex(int arg0)
        {
            return IExecuteWithSignature<Android.Media.Audiofx.DynamicsProcessing.Limiter>("getLimiterByChannelIndex", "(I)Landroid/media/audiofx/DynamicsProcessing$Limiter;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.html#getMbcByChannelIndex(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Media.Audiofx.DynamicsProcessing.Mbc"/></returns>
        public Android.Media.Audiofx.DynamicsProcessing.Mbc GetMbcByChannelIndex(int arg0)
        {
            return IExecuteWithSignature<Android.Media.Audiofx.DynamicsProcessing.Mbc>("getMbcByChannelIndex", "(I)Landroid/media/audiofx/DynamicsProcessing$Mbc;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.html#getMbcBandByChannelIndex(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.Media.Audiofx.DynamicsProcessing.MbcBand"/></returns>
        public Android.Media.Audiofx.DynamicsProcessing.MbcBand GetMbcBandByChannelIndex(int arg0, int arg1)
        {
            return IExecute<Android.Media.Audiofx.DynamicsProcessing.MbcBand>("getMbcBandByChannelIndex", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.html#getInputGainByChannelIndex(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetInputGainByChannelIndex(int arg0)
        {
            return IExecuteWithSignature<float>("getInputGainByChannelIndex", "(I)F", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.html#getChannelCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetChannelCount()
        {
            return IExecuteWithSignature<int>("getChannelCount", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.html#setAllChannelsTo(android.media.audiofx.DynamicsProcessing.Channel)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.Audiofx.DynamicsProcessing.Channel"/></param>
        public void SetAllChannelsTo(Android.Media.Audiofx.DynamicsProcessing.Channel arg0)
        {
            IExecuteWithSignature("setAllChannelsTo", "(Landroid/media/audiofx/DynamicsProcessing$Channel;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.html#setChannelTo(int,android.media.audiofx.DynamicsProcessing.Channel)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Media.Audiofx.DynamicsProcessing.Channel"/></param>
        public void SetChannelTo(int arg0, Android.Media.Audiofx.DynamicsProcessing.Channel arg1)
        {
            IExecute("setChannelTo", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.html#setInputGainAllChannelsTo(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetInputGainAllChannelsTo(float arg0)
        {
            IExecuteWithSignature("setInputGainAllChannelsTo", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.html#setInputGainbyChannel(int,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public void SetInputGainbyChannel(int arg0, float arg1)
        {
            IExecute("setInputGainbyChannel", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.html#setLimiterAllChannelsTo(android.media.audiofx.DynamicsProcessing.Limiter)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.Audiofx.DynamicsProcessing.Limiter"/></param>
        public void SetLimiterAllChannelsTo(Android.Media.Audiofx.DynamicsProcessing.Limiter arg0)
        {
            IExecuteWithSignature("setLimiterAllChannelsTo", "(Landroid/media/audiofx/DynamicsProcessing$Limiter;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.html#setLimiterByChannelIndex(int,android.media.audiofx.DynamicsProcessing.Limiter)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Media.Audiofx.DynamicsProcessing.Limiter"/></param>
        public void SetLimiterByChannelIndex(int arg0, Android.Media.Audiofx.DynamicsProcessing.Limiter arg1)
        {
            IExecute("setLimiterByChannelIndex", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.html#setMbcAllChannelsTo(android.media.audiofx.DynamicsProcessing.Mbc)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.Audiofx.DynamicsProcessing.Mbc"/></param>
        public void SetMbcAllChannelsTo(Android.Media.Audiofx.DynamicsProcessing.Mbc arg0)
        {
            IExecuteWithSignature("setMbcAllChannelsTo", "(Landroid/media/audiofx/DynamicsProcessing$Mbc;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.html#setMbcBandAllChannelsTo(int,android.media.audiofx.DynamicsProcessing.MbcBand)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Media.Audiofx.DynamicsProcessing.MbcBand"/></param>
        public void SetMbcBandAllChannelsTo(int arg0, Android.Media.Audiofx.DynamicsProcessing.MbcBand arg1)
        {
            IExecute("setMbcBandAllChannelsTo", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.html#setMbcBandByChannelIndex(int,int,android.media.audiofx.DynamicsProcessing.MbcBand)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Media.Audiofx.DynamicsProcessing.MbcBand"/></param>
        public void SetMbcBandByChannelIndex(int arg0, int arg1, Android.Media.Audiofx.DynamicsProcessing.MbcBand arg2)
        {
            IExecute("setMbcBandByChannelIndex", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.html#setMbcByChannelIndex(int,android.media.audiofx.DynamicsProcessing.Mbc)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Media.Audiofx.DynamicsProcessing.Mbc"/></param>
        public void SetMbcByChannelIndex(int arg0, Android.Media.Audiofx.DynamicsProcessing.Mbc arg1)
        {
            IExecute("setMbcByChannelIndex", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.html#setPostEqAllChannelsTo(android.media.audiofx.DynamicsProcessing.Eq)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.Audiofx.DynamicsProcessing.Eq"/></param>
        public void SetPostEqAllChannelsTo(Android.Media.Audiofx.DynamicsProcessing.Eq arg0)
        {
            IExecuteWithSignature("setPostEqAllChannelsTo", "(Landroid/media/audiofx/DynamicsProcessing$Eq;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.html#setPostEqBandAllChannelsTo(int,android.media.audiofx.DynamicsProcessing.EqBand)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Media.Audiofx.DynamicsProcessing.EqBand"/></param>
        public void SetPostEqBandAllChannelsTo(int arg0, Android.Media.Audiofx.DynamicsProcessing.EqBand arg1)
        {
            IExecute("setPostEqBandAllChannelsTo", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.html#setPostEqBandByChannelIndex(int,int,android.media.audiofx.DynamicsProcessing.EqBand)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Media.Audiofx.DynamicsProcessing.EqBand"/></param>
        public void SetPostEqBandByChannelIndex(int arg0, int arg1, Android.Media.Audiofx.DynamicsProcessing.EqBand arg2)
        {
            IExecute("setPostEqBandByChannelIndex", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.html#setPostEqByChannelIndex(int,android.media.audiofx.DynamicsProcessing.Eq)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Media.Audiofx.DynamicsProcessing.Eq"/></param>
        public void SetPostEqByChannelIndex(int arg0, Android.Media.Audiofx.DynamicsProcessing.Eq arg1)
        {
            IExecute("setPostEqByChannelIndex", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.html#setPreEqAllChannelsTo(android.media.audiofx.DynamicsProcessing.Eq)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.Audiofx.DynamicsProcessing.Eq"/></param>
        public void SetPreEqAllChannelsTo(Android.Media.Audiofx.DynamicsProcessing.Eq arg0)
        {
            IExecuteWithSignature("setPreEqAllChannelsTo", "(Landroid/media/audiofx/DynamicsProcessing$Eq;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.html#setPreEqBandAllChannelsTo(int,android.media.audiofx.DynamicsProcessing.EqBand)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Media.Audiofx.DynamicsProcessing.EqBand"/></param>
        public void SetPreEqBandAllChannelsTo(int arg0, Android.Media.Audiofx.DynamicsProcessing.EqBand arg1)
        {
            IExecute("setPreEqBandAllChannelsTo", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.html#setPreEqBandByChannelIndex(int,int,android.media.audiofx.DynamicsProcessing.EqBand)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Media.Audiofx.DynamicsProcessing.EqBand"/></param>
        public void SetPreEqBandByChannelIndex(int arg0, int arg1, Android.Media.Audiofx.DynamicsProcessing.EqBand arg2)
        {
            IExecute("setPreEqBandByChannelIndex", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.html#setPreEqByChannelIndex(int,android.media.audiofx.DynamicsProcessing.Eq)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Media.Audiofx.DynamicsProcessing.Eq"/></param>
        public void SetPreEqByChannelIndex(int arg0, Android.Media.Audiofx.DynamicsProcessing.Eq arg1)
        {
            IExecute("setPreEqByChannelIndex", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region BandBase implementation
        public partial class BandBase
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.BandBase.html#%3Cinit%3E(boolean,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <param name="arg1"><see cref="float"/></param>
            public BandBase(bool arg0, float arg1)
                : base(arg0, arg1)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.BandBase.html#isEnabled()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsEnabled()
            {
                return IExecuteWithSignature<bool>("isEnabled", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.BandBase.html#getCutoffFrequency()"/>
            /// </summary>
            /// <returns><see cref="float"/></returns>
            public float GetCutoffFrequency()
            {
                return IExecuteWithSignature<float>("getCutoffFrequency", "()F");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.BandBase.html#setCutoffFrequency(float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            public void SetCutoffFrequency(float arg0)
            {
                IExecuteWithSignature("setCutoffFrequency", "(F)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.BandBase.html#setEnabled(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            public void SetEnabled(bool arg0)
            {
                IExecuteWithSignature("setEnabled", "(Z)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region BandStage implementation
        public partial class BandStage
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.BandStage.html#%3Cinit%3E(boolean,boolean,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <param name="arg1"><see cref="bool"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            public BandStage(bool arg0, bool arg1, int arg2)
                : base(arg0, arg1, arg2)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.BandStage.html#getBandCount()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetBandCount()
            {
                return IExecuteWithSignature<int>("getBandCount", "()I");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Channel implementation
        public partial class Channel
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Channel.html#%3Cinit%3E(android.media.audiofx.DynamicsProcessing.Channel)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.Audiofx.DynamicsProcessing.Channel"/></param>
            public Channel(Android.Media.Audiofx.DynamicsProcessing.Channel arg0)
                : base(arg0)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Channel.html#%3Cinit%3E(float,boolean,int,boolean,int,boolean,int,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            /// <param name="arg1"><see cref="bool"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="bool"/></param>
            /// <param name="arg4"><see cref="int"/></param>
            /// <param name="arg5"><see cref="bool"/></param>
            /// <param name="arg6"><see cref="int"/></param>
            /// <param name="arg7"><see cref="bool"/></param>
            public Channel(float arg0, bool arg1, int arg2, bool arg3, int arg4, bool arg5, int arg6, bool arg7)
                : base(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Channel.html#getPostEq()"/>
            /// </summary>
            /// <returns><see cref="Android.Media.Audiofx.DynamicsProcessing.Eq"/></returns>
            public Android.Media.Audiofx.DynamicsProcessing.Eq GetPostEq()
            {
                return IExecuteWithSignature<Android.Media.Audiofx.DynamicsProcessing.Eq>("getPostEq", "()Landroid/media/audiofx/DynamicsProcessing$Eq;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Channel.html#getPreEq()"/>
            /// </summary>
            /// <returns><see cref="Android.Media.Audiofx.DynamicsProcessing.Eq"/></returns>
            public Android.Media.Audiofx.DynamicsProcessing.Eq GetPreEq()
            {
                return IExecuteWithSignature<Android.Media.Audiofx.DynamicsProcessing.Eq>("getPreEq", "()Landroid/media/audiofx/DynamicsProcessing$Eq;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Channel.html#getPostEqBand(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.Audiofx.DynamicsProcessing.EqBand"/></returns>
            public Android.Media.Audiofx.DynamicsProcessing.EqBand GetPostEqBand(int arg0)
            {
                return IExecuteWithSignature<Android.Media.Audiofx.DynamicsProcessing.EqBand>("getPostEqBand", "(I)Landroid/media/audiofx/DynamicsProcessing$EqBand;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Channel.html#getPreEqBand(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.Audiofx.DynamicsProcessing.EqBand"/></returns>
            public Android.Media.Audiofx.DynamicsProcessing.EqBand GetPreEqBand(int arg0)
            {
                return IExecuteWithSignature<Android.Media.Audiofx.DynamicsProcessing.EqBand>("getPreEqBand", "(I)Landroid/media/audiofx/DynamicsProcessing$EqBand;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Channel.html#getLimiter()"/>
            /// </summary>
            /// <returns><see cref="Android.Media.Audiofx.DynamicsProcessing.Limiter"/></returns>
            public Android.Media.Audiofx.DynamicsProcessing.Limiter GetLimiter()
            {
                return IExecuteWithSignature<Android.Media.Audiofx.DynamicsProcessing.Limiter>("getLimiter", "()Landroid/media/audiofx/DynamicsProcessing$Limiter;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Channel.html#getMbc()"/>
            /// </summary>
            /// <returns><see cref="Android.Media.Audiofx.DynamicsProcessing.Mbc"/></returns>
            public Android.Media.Audiofx.DynamicsProcessing.Mbc GetMbc()
            {
                return IExecuteWithSignature<Android.Media.Audiofx.DynamicsProcessing.Mbc>("getMbc", "()Landroid/media/audiofx/DynamicsProcessing$Mbc;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Channel.html#getMbcBand(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.Audiofx.DynamicsProcessing.MbcBand"/></returns>
            public Android.Media.Audiofx.DynamicsProcessing.MbcBand GetMbcBand(int arg0)
            {
                return IExecuteWithSignature<Android.Media.Audiofx.DynamicsProcessing.MbcBand>("getMbcBand", "(I)Landroid/media/audiofx/DynamicsProcessing$MbcBand;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Channel.html#getInputGain()"/>
            /// </summary>
            /// <returns><see cref="float"/></returns>
            public float GetInputGain()
            {
                return IExecuteWithSignature<float>("getInputGain", "()F");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Channel.html#setInputGain(float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            public void SetInputGain(float arg0)
            {
                IExecuteWithSignature("setInputGain", "(F)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Channel.html#setLimiter(android.media.audiofx.DynamicsProcessing.Limiter)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.Audiofx.DynamicsProcessing.Limiter"/></param>
            public void SetLimiter(Android.Media.Audiofx.DynamicsProcessing.Limiter arg0)
            {
                IExecuteWithSignature("setLimiter", "(Landroid/media/audiofx/DynamicsProcessing$Limiter;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Channel.html#setMbc(android.media.audiofx.DynamicsProcessing.Mbc)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.Audiofx.DynamicsProcessing.Mbc"/></param>
            public void SetMbc(Android.Media.Audiofx.DynamicsProcessing.Mbc arg0)
            {
                IExecuteWithSignature("setMbc", "(Landroid/media/audiofx/DynamicsProcessing$Mbc;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Channel.html#setMbcBand(int,android.media.audiofx.DynamicsProcessing.MbcBand)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Android.Media.Audiofx.DynamicsProcessing.MbcBand"/></param>
            public void SetMbcBand(int arg0, Android.Media.Audiofx.DynamicsProcessing.MbcBand arg1)
            {
                IExecute("setMbcBand", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Channel.html#setPostEq(android.media.audiofx.DynamicsProcessing.Eq)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.Audiofx.DynamicsProcessing.Eq"/></param>
            public void SetPostEq(Android.Media.Audiofx.DynamicsProcessing.Eq arg0)
            {
                IExecuteWithSignature("setPostEq", "(Landroid/media/audiofx/DynamicsProcessing$Eq;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Channel.html#setPostEqBand(int,android.media.audiofx.DynamicsProcessing.EqBand)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Android.Media.Audiofx.DynamicsProcessing.EqBand"/></param>
            public void SetPostEqBand(int arg0, Android.Media.Audiofx.DynamicsProcessing.EqBand arg1)
            {
                IExecute("setPostEqBand", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Channel.html#setPreEq(android.media.audiofx.DynamicsProcessing.Eq)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.Audiofx.DynamicsProcessing.Eq"/></param>
            public void SetPreEq(Android.Media.Audiofx.DynamicsProcessing.Eq arg0)
            {
                IExecuteWithSignature("setPreEq", "(Landroid/media/audiofx/DynamicsProcessing$Eq;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Channel.html#setPreEqBand(int,android.media.audiofx.DynamicsProcessing.EqBand)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Android.Media.Audiofx.DynamicsProcessing.EqBand"/></param>
            public void SetPreEqBand(int arg0, Android.Media.Audiofx.DynamicsProcessing.EqBand arg1)
            {
                IExecute("setPreEqBand", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Config implementation
        public partial class Config
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#getChannelByChannelIndex(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.Audiofx.DynamicsProcessing.Channel"/></returns>
            public Android.Media.Audiofx.DynamicsProcessing.Channel GetChannelByChannelIndex(int arg0)
            {
                return IExecuteWithSignature<Android.Media.Audiofx.DynamicsProcessing.Channel>("getChannelByChannelIndex", "(I)Landroid/media/audiofx/DynamicsProcessing$Channel;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#getPostEqByChannelIndex(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.Audiofx.DynamicsProcessing.Eq"/></returns>
            public Android.Media.Audiofx.DynamicsProcessing.Eq GetPostEqByChannelIndex(int arg0)
            {
                return IExecuteWithSignature<Android.Media.Audiofx.DynamicsProcessing.Eq>("getPostEqByChannelIndex", "(I)Landroid/media/audiofx/DynamicsProcessing$Eq;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#getPreEqByChannelIndex(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.Audiofx.DynamicsProcessing.Eq"/></returns>
            public Android.Media.Audiofx.DynamicsProcessing.Eq GetPreEqByChannelIndex(int arg0)
            {
                return IExecuteWithSignature<Android.Media.Audiofx.DynamicsProcessing.Eq>("getPreEqByChannelIndex", "(I)Landroid/media/audiofx/DynamicsProcessing$Eq;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#getPostEqBandByChannelIndex(int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.Audiofx.DynamicsProcessing.EqBand"/></returns>
            public Android.Media.Audiofx.DynamicsProcessing.EqBand GetPostEqBandByChannelIndex(int arg0, int arg1)
            {
                return IExecute<Android.Media.Audiofx.DynamicsProcessing.EqBand>("getPostEqBandByChannelIndex", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#getPreEqBandByChannelIndex(int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.Audiofx.DynamicsProcessing.EqBand"/></returns>
            public Android.Media.Audiofx.DynamicsProcessing.EqBand GetPreEqBandByChannelIndex(int arg0, int arg1)
            {
                return IExecute<Android.Media.Audiofx.DynamicsProcessing.EqBand>("getPreEqBandByChannelIndex", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#getLimiterByChannelIndex(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.Audiofx.DynamicsProcessing.Limiter"/></returns>
            public Android.Media.Audiofx.DynamicsProcessing.Limiter GetLimiterByChannelIndex(int arg0)
            {
                return IExecuteWithSignature<Android.Media.Audiofx.DynamicsProcessing.Limiter>("getLimiterByChannelIndex", "(I)Landroid/media/audiofx/DynamicsProcessing$Limiter;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#getMbcByChannelIndex(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.Audiofx.DynamicsProcessing.Mbc"/></returns>
            public Android.Media.Audiofx.DynamicsProcessing.Mbc GetMbcByChannelIndex(int arg0)
            {
                return IExecuteWithSignature<Android.Media.Audiofx.DynamicsProcessing.Mbc>("getMbcByChannelIndex", "(I)Landroid/media/audiofx/DynamicsProcessing$Mbc;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#getMbcBandByChannelIndex(int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.Audiofx.DynamicsProcessing.MbcBand"/></returns>
            public Android.Media.Audiofx.DynamicsProcessing.MbcBand GetMbcBandByChannelIndex(int arg0, int arg1)
            {
                return IExecute<Android.Media.Audiofx.DynamicsProcessing.MbcBand>("getMbcBandByChannelIndex", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#isLimiterInUse()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsLimiterInUse()
            {
                return IExecuteWithSignature<bool>("isLimiterInUse", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#isMbcInUse()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsMbcInUse()
            {
                return IExecuteWithSignature<bool>("isMbcInUse", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#isPostEqInUse()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsPostEqInUse()
            {
                return IExecuteWithSignature<bool>("isPostEqInUse", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#isPreEqInUse()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsPreEqInUse()
            {
                return IExecuteWithSignature<bool>("isPreEqInUse", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#getInputGainByChannelIndex(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="float"/></returns>
            public float GetInputGainByChannelIndex(int arg0)
            {
                return IExecuteWithSignature<float>("getInputGainByChannelIndex", "(I)F", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#getPreferredFrameDuration()"/>
            /// </summary>
            /// <returns><see cref="float"/></returns>
            public float GetPreferredFrameDuration()
            {
                return IExecuteWithSignature<float>("getPreferredFrameDuration", "()F");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#getMbcBandCount()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetMbcBandCount()
            {
                return IExecuteWithSignature<int>("getMbcBandCount", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#getPostEqBandCount()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetPostEqBandCount()
            {
                return IExecuteWithSignature<int>("getPostEqBandCount", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#getPreEqBandCount()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetPreEqBandCount()
            {
                return IExecuteWithSignature<int>("getPreEqBandCount", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#getVariant()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetVariant()
            {
                return IExecuteWithSignature<int>("getVariant", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#setAllChannelsTo(android.media.audiofx.DynamicsProcessing.Channel)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.Audiofx.DynamicsProcessing.Channel"/></param>
            public void SetAllChannelsTo(Android.Media.Audiofx.DynamicsProcessing.Channel arg0)
            {
                IExecuteWithSignature("setAllChannelsTo", "(Landroid/media/audiofx/DynamicsProcessing$Channel;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#setChannelTo(int,android.media.audiofx.DynamicsProcessing.Channel)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Android.Media.Audiofx.DynamicsProcessing.Channel"/></param>
            public void SetChannelTo(int arg0, Android.Media.Audiofx.DynamicsProcessing.Channel arg1)
            {
                IExecute("setChannelTo", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#setInputGainAllChannelsTo(float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            public void SetInputGainAllChannelsTo(float arg0)
            {
                IExecuteWithSignature("setInputGainAllChannelsTo", "(F)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#setInputGainByChannelIndex(int,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="float"/></param>
            public void SetInputGainByChannelIndex(int arg0, float arg1)
            {
                IExecute("setInputGainByChannelIndex", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#setLimiterAllChannelsTo(android.media.audiofx.DynamicsProcessing.Limiter)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.Audiofx.DynamicsProcessing.Limiter"/></param>
            public void SetLimiterAllChannelsTo(Android.Media.Audiofx.DynamicsProcessing.Limiter arg0)
            {
                IExecuteWithSignature("setLimiterAllChannelsTo", "(Landroid/media/audiofx/DynamicsProcessing$Limiter;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#setLimiterByChannelIndex(int,android.media.audiofx.DynamicsProcessing.Limiter)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Android.Media.Audiofx.DynamicsProcessing.Limiter"/></param>
            public void SetLimiterByChannelIndex(int arg0, Android.Media.Audiofx.DynamicsProcessing.Limiter arg1)
            {
                IExecute("setLimiterByChannelIndex", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#setMbcAllChannelsTo(android.media.audiofx.DynamicsProcessing.Mbc)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.Audiofx.DynamicsProcessing.Mbc"/></param>
            public void SetMbcAllChannelsTo(Android.Media.Audiofx.DynamicsProcessing.Mbc arg0)
            {
                IExecuteWithSignature("setMbcAllChannelsTo", "(Landroid/media/audiofx/DynamicsProcessing$Mbc;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#setMbcBandAllChannelsTo(int,android.media.audiofx.DynamicsProcessing.MbcBand)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Android.Media.Audiofx.DynamicsProcessing.MbcBand"/></param>
            public void SetMbcBandAllChannelsTo(int arg0, Android.Media.Audiofx.DynamicsProcessing.MbcBand arg1)
            {
                IExecute("setMbcBandAllChannelsTo", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#setMbcBandByChannelIndex(int,int,android.media.audiofx.DynamicsProcessing.MbcBand)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="Android.Media.Audiofx.DynamicsProcessing.MbcBand"/></param>
            public void SetMbcBandByChannelIndex(int arg0, int arg1, Android.Media.Audiofx.DynamicsProcessing.MbcBand arg2)
            {
                IExecute("setMbcBandByChannelIndex", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#setMbcByChannelIndex(int,android.media.audiofx.DynamicsProcessing.Mbc)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Android.Media.Audiofx.DynamicsProcessing.Mbc"/></param>
            public void SetMbcByChannelIndex(int arg0, Android.Media.Audiofx.DynamicsProcessing.Mbc arg1)
            {
                IExecute("setMbcByChannelIndex", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#setPostEqAllChannelsTo(android.media.audiofx.DynamicsProcessing.Eq)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.Audiofx.DynamicsProcessing.Eq"/></param>
            public void SetPostEqAllChannelsTo(Android.Media.Audiofx.DynamicsProcessing.Eq arg0)
            {
                IExecuteWithSignature("setPostEqAllChannelsTo", "(Landroid/media/audiofx/DynamicsProcessing$Eq;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#setPostEqBandAllChannelsTo(int,android.media.audiofx.DynamicsProcessing.EqBand)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Android.Media.Audiofx.DynamicsProcessing.EqBand"/></param>
            public void SetPostEqBandAllChannelsTo(int arg0, Android.Media.Audiofx.DynamicsProcessing.EqBand arg1)
            {
                IExecute("setPostEqBandAllChannelsTo", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#setPostEqBandByChannelIndex(int,int,android.media.audiofx.DynamicsProcessing.EqBand)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="Android.Media.Audiofx.DynamicsProcessing.EqBand"/></param>
            public void SetPostEqBandByChannelIndex(int arg0, int arg1, Android.Media.Audiofx.DynamicsProcessing.EqBand arg2)
            {
                IExecute("setPostEqBandByChannelIndex", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#setPostEqByChannelIndex(int,android.media.audiofx.DynamicsProcessing.Eq)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Android.Media.Audiofx.DynamicsProcessing.Eq"/></param>
            public void SetPostEqByChannelIndex(int arg0, Android.Media.Audiofx.DynamicsProcessing.Eq arg1)
            {
                IExecute("setPostEqByChannelIndex", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#setPreEqAllChannelsTo(android.media.audiofx.DynamicsProcessing.Eq)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.Audiofx.DynamicsProcessing.Eq"/></param>
            public void SetPreEqAllChannelsTo(Android.Media.Audiofx.DynamicsProcessing.Eq arg0)
            {
                IExecuteWithSignature("setPreEqAllChannelsTo", "(Landroid/media/audiofx/DynamicsProcessing$Eq;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#setPreEqBandAllChannelsTo(int,android.media.audiofx.DynamicsProcessing.EqBand)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Android.Media.Audiofx.DynamicsProcessing.EqBand"/></param>
            public void SetPreEqBandAllChannelsTo(int arg0, Android.Media.Audiofx.DynamicsProcessing.EqBand arg1)
            {
                IExecute("setPreEqBandAllChannelsTo", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#setPreEqBandByChannelIndex(int,int,android.media.audiofx.DynamicsProcessing.EqBand)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="Android.Media.Audiofx.DynamicsProcessing.EqBand"/></param>
            public void SetPreEqBandByChannelIndex(int arg0, int arg1, Android.Media.Audiofx.DynamicsProcessing.EqBand arg2)
            {
                IExecute("setPreEqBandByChannelIndex", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#setPreEqByChannelIndex(int,android.media.audiofx.DynamicsProcessing.Eq)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Android.Media.Audiofx.DynamicsProcessing.Eq"/></param>
            public void SetPreEqByChannelIndex(int arg0, Android.Media.Audiofx.DynamicsProcessing.Eq arg1)
            {
                IExecute("setPreEqByChannelIndex", arg0, arg1);
            }

            #endregion

            #region Nested classes
            #region Builder implementation
            public partial class Builder
            {
                #region Constructors
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.Builder.html#%3Cinit%3E(int,int,boolean,int,boolean,int,boolean,int,boolean)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <param name="arg1"><see cref="int"/></param>
                /// <param name="arg2"><see cref="bool"/></param>
                /// <param name="arg3"><see cref="int"/></param>
                /// <param name="arg4"><see cref="bool"/></param>
                /// <param name="arg5"><see cref="int"/></param>
                /// <param name="arg6"><see cref="bool"/></param>
                /// <param name="arg7"><see cref="int"/></param>
                /// <param name="arg8"><see cref="bool"/></param>
                public Builder(int arg0, int arg1, bool arg2, int arg3, bool arg4, int arg5, bool arg6, int arg7, bool arg8)
                    : base(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
                {
                }

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields

                #endregion

                #region Static methods

                #endregion

                #region Instance methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.Builder.html#build()"/>
                /// </summary>
                /// <returns><see cref="Android.Media.Audiofx.DynamicsProcessing.Config"/></returns>
                public Android.Media.Audiofx.DynamicsProcessing.Config Build()
                {
                    return IExecuteWithSignature<Android.Media.Audiofx.DynamicsProcessing.Config>("build", "()Landroid/media/audiofx/DynamicsProcessing$Config;");
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.Builder.html#setAllChannelsTo(android.media.audiofx.DynamicsProcessing.Channel)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Media.Audiofx.DynamicsProcessing.Channel"/></param>
                /// <returns><see cref="Android.Media.Audiofx.DynamicsProcessing.Config.Builder"/></returns>
                public Android.Media.Audiofx.DynamicsProcessing.Config.Builder SetAllChannelsTo(Android.Media.Audiofx.DynamicsProcessing.Channel arg0)
                {
                    return IExecuteWithSignature<Android.Media.Audiofx.DynamicsProcessing.Config.Builder>("setAllChannelsTo", "(Landroid/media/audiofx/DynamicsProcessing$Channel;)Landroid/media/audiofx/DynamicsProcessing$Config$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.Builder.html#setChannelTo(int,android.media.audiofx.DynamicsProcessing.Channel)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <param name="arg1"><see cref="Android.Media.Audiofx.DynamicsProcessing.Channel"/></param>
                /// <returns><see cref="Android.Media.Audiofx.DynamicsProcessing.Config.Builder"/></returns>
                public Android.Media.Audiofx.DynamicsProcessing.Config.Builder SetChannelTo(int arg0, Android.Media.Audiofx.DynamicsProcessing.Channel arg1)
                {
                    return IExecute<Android.Media.Audiofx.DynamicsProcessing.Config.Builder>("setChannelTo", arg0, arg1);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.Builder.html#setInputGainAllChannelsTo(float)"/>
                /// </summary>
                /// <param name="arg0"><see cref="float"/></param>
                /// <returns><see cref="Android.Media.Audiofx.DynamicsProcessing.Config.Builder"/></returns>
                public Android.Media.Audiofx.DynamicsProcessing.Config.Builder SetInputGainAllChannelsTo(float arg0)
                {
                    return IExecuteWithSignature<Android.Media.Audiofx.DynamicsProcessing.Config.Builder>("setInputGainAllChannelsTo", "(F)Landroid/media/audiofx/DynamicsProcessing$Config$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.Builder.html#setInputGainByChannelIndex(int,float)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <param name="arg1"><see cref="float"/></param>
                /// <returns><see cref="Android.Media.Audiofx.DynamicsProcessing.Config.Builder"/></returns>
                public Android.Media.Audiofx.DynamicsProcessing.Config.Builder SetInputGainByChannelIndex(int arg0, float arg1)
                {
                    return IExecute<Android.Media.Audiofx.DynamicsProcessing.Config.Builder>("setInputGainByChannelIndex", arg0, arg1);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.Builder.html#setLimiterAllChannelsTo(android.media.audiofx.DynamicsProcessing.Limiter)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Media.Audiofx.DynamicsProcessing.Limiter"/></param>
                /// <returns><see cref="Android.Media.Audiofx.DynamicsProcessing.Config.Builder"/></returns>
                public Android.Media.Audiofx.DynamicsProcessing.Config.Builder SetLimiterAllChannelsTo(Android.Media.Audiofx.DynamicsProcessing.Limiter arg0)
                {
                    return IExecuteWithSignature<Android.Media.Audiofx.DynamicsProcessing.Config.Builder>("setLimiterAllChannelsTo", "(Landroid/media/audiofx/DynamicsProcessing$Limiter;)Landroid/media/audiofx/DynamicsProcessing$Config$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.Builder.html#setLimiterByChannelIndex(int,android.media.audiofx.DynamicsProcessing.Limiter)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <param name="arg1"><see cref="Android.Media.Audiofx.DynamicsProcessing.Limiter"/></param>
                /// <returns><see cref="Android.Media.Audiofx.DynamicsProcessing.Config.Builder"/></returns>
                public Android.Media.Audiofx.DynamicsProcessing.Config.Builder SetLimiterByChannelIndex(int arg0, Android.Media.Audiofx.DynamicsProcessing.Limiter arg1)
                {
                    return IExecute<Android.Media.Audiofx.DynamicsProcessing.Config.Builder>("setLimiterByChannelIndex", arg0, arg1);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.Builder.html#setMbcAllChannelsTo(android.media.audiofx.DynamicsProcessing.Mbc)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Media.Audiofx.DynamicsProcessing.Mbc"/></param>
                /// <returns><see cref="Android.Media.Audiofx.DynamicsProcessing.Config.Builder"/></returns>
                public Android.Media.Audiofx.DynamicsProcessing.Config.Builder SetMbcAllChannelsTo(Android.Media.Audiofx.DynamicsProcessing.Mbc arg0)
                {
                    return IExecuteWithSignature<Android.Media.Audiofx.DynamicsProcessing.Config.Builder>("setMbcAllChannelsTo", "(Landroid/media/audiofx/DynamicsProcessing$Mbc;)Landroid/media/audiofx/DynamicsProcessing$Config$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.Builder.html#setMbcByChannelIndex(int,android.media.audiofx.DynamicsProcessing.Mbc)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <param name="arg1"><see cref="Android.Media.Audiofx.DynamicsProcessing.Mbc"/></param>
                /// <returns><see cref="Android.Media.Audiofx.DynamicsProcessing.Config.Builder"/></returns>
                public Android.Media.Audiofx.DynamicsProcessing.Config.Builder SetMbcByChannelIndex(int arg0, Android.Media.Audiofx.DynamicsProcessing.Mbc arg1)
                {
                    return IExecute<Android.Media.Audiofx.DynamicsProcessing.Config.Builder>("setMbcByChannelIndex", arg0, arg1);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.Builder.html#setPostEqAllChannelsTo(android.media.audiofx.DynamicsProcessing.Eq)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Media.Audiofx.DynamicsProcessing.Eq"/></param>
                /// <returns><see cref="Android.Media.Audiofx.DynamicsProcessing.Config.Builder"/></returns>
                public Android.Media.Audiofx.DynamicsProcessing.Config.Builder SetPostEqAllChannelsTo(Android.Media.Audiofx.DynamicsProcessing.Eq arg0)
                {
                    return IExecuteWithSignature<Android.Media.Audiofx.DynamicsProcessing.Config.Builder>("setPostEqAllChannelsTo", "(Landroid/media/audiofx/DynamicsProcessing$Eq;)Landroid/media/audiofx/DynamicsProcessing$Config$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.Builder.html#setPostEqByChannelIndex(int,android.media.audiofx.DynamicsProcessing.Eq)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <param name="arg1"><see cref="Android.Media.Audiofx.DynamicsProcessing.Eq"/></param>
                /// <returns><see cref="Android.Media.Audiofx.DynamicsProcessing.Config.Builder"/></returns>
                public Android.Media.Audiofx.DynamicsProcessing.Config.Builder SetPostEqByChannelIndex(int arg0, Android.Media.Audiofx.DynamicsProcessing.Eq arg1)
                {
                    return IExecute<Android.Media.Audiofx.DynamicsProcessing.Config.Builder>("setPostEqByChannelIndex", arg0, arg1);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.Builder.html#setPreEqAllChannelsTo(android.media.audiofx.DynamicsProcessing.Eq)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Media.Audiofx.DynamicsProcessing.Eq"/></param>
                /// <returns><see cref="Android.Media.Audiofx.DynamicsProcessing.Config.Builder"/></returns>
                public Android.Media.Audiofx.DynamicsProcessing.Config.Builder SetPreEqAllChannelsTo(Android.Media.Audiofx.DynamicsProcessing.Eq arg0)
                {
                    return IExecuteWithSignature<Android.Media.Audiofx.DynamicsProcessing.Config.Builder>("setPreEqAllChannelsTo", "(Landroid/media/audiofx/DynamicsProcessing$Eq;)Landroid/media/audiofx/DynamicsProcessing$Config$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.Builder.html#setPreEqByChannelIndex(int,android.media.audiofx.DynamicsProcessing.Eq)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <param name="arg1"><see cref="Android.Media.Audiofx.DynamicsProcessing.Eq"/></param>
                /// <returns><see cref="Android.Media.Audiofx.DynamicsProcessing.Config.Builder"/></returns>
                public Android.Media.Audiofx.DynamicsProcessing.Config.Builder SetPreEqByChannelIndex(int arg0, Android.Media.Audiofx.DynamicsProcessing.Eq arg1)
                {
                    return IExecute<Android.Media.Audiofx.DynamicsProcessing.Config.Builder>("setPreEqByChannelIndex", arg0, arg1);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.Builder.html#setPreferredFrameDuration(float)"/>
                /// </summary>
                /// <param name="arg0"><see cref="float"/></param>
                /// <returns><see cref="Android.Media.Audiofx.DynamicsProcessing.Config.Builder"/></returns>
                public Android.Media.Audiofx.DynamicsProcessing.Config.Builder SetPreferredFrameDuration(float arg0)
                {
                    return IExecuteWithSignature<Android.Media.Audiofx.DynamicsProcessing.Config.Builder>("setPreferredFrameDuration", "(F)Landroid/media/audiofx/DynamicsProcessing$Config$Builder;", arg0);
                }

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

        
            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Eq implementation
        public partial class Eq
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Eq.html#%3Cinit%3E(android.media.audiofx.DynamicsProcessing.Eq)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.Audiofx.DynamicsProcessing.Eq"/></param>
            public Eq(Android.Media.Audiofx.DynamicsProcessing.Eq arg0)
                : base(arg0)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Eq.html#%3Cinit%3E(boolean,boolean,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <param name="arg1"><see cref="bool"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            public Eq(bool arg0, bool arg1, int arg2)
                : base(arg0, arg1, arg2)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Eq.html#getBand(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.Audiofx.DynamicsProcessing.EqBand"/></returns>
            public Android.Media.Audiofx.DynamicsProcessing.EqBand GetBand(int arg0)
            {
                return IExecuteWithSignature<Android.Media.Audiofx.DynamicsProcessing.EqBand>("getBand", "(I)Landroid/media/audiofx/DynamicsProcessing$EqBand;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Eq.html#setBand(int,android.media.audiofx.DynamicsProcessing.EqBand)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Android.Media.Audiofx.DynamicsProcessing.EqBand"/></param>
            public void SetBand(int arg0, Android.Media.Audiofx.DynamicsProcessing.EqBand arg1)
            {
                IExecute("setBand", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region EqBand implementation
        public partial class EqBand
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.EqBand.html#%3Cinit%3E(android.media.audiofx.DynamicsProcessing.EqBand)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.Audiofx.DynamicsProcessing.EqBand"/></param>
            public EqBand(Android.Media.Audiofx.DynamicsProcessing.EqBand arg0)
                : base(arg0)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.EqBand.html#%3Cinit%3E(boolean,float,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <param name="arg1"><see cref="float"/></param>
            /// <param name="arg2"><see cref="float"/></param>
            public EqBand(bool arg0, float arg1, float arg2)
                : base(arg0, arg1, arg2)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.EqBand.html#getGain()"/>
            /// </summary>
            /// <returns><see cref="float"/></returns>
            public float GetGain()
            {
                return IExecuteWithSignature<float>("getGain", "()F");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.EqBand.html#setGain(float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            public void SetGain(float arg0)
            {
                IExecuteWithSignature("setGain", "(F)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Limiter implementation
        public partial class Limiter
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Limiter.html#%3Cinit%3E(android.media.audiofx.DynamicsProcessing.Limiter)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.Audiofx.DynamicsProcessing.Limiter"/></param>
            public Limiter(Android.Media.Audiofx.DynamicsProcessing.Limiter arg0)
                : base(arg0)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Limiter.html#%3Cinit%3E(boolean,boolean,int,float,float,float,float,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <param name="arg1"><see cref="bool"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="float"/></param>
            /// <param name="arg4"><see cref="float"/></param>
            /// <param name="arg5"><see cref="float"/></param>
            /// <param name="arg6"><see cref="float"/></param>
            /// <param name="arg7"><see cref="float"/></param>
            public Limiter(bool arg0, bool arg1, int arg2, float arg3, float arg4, float arg5, float arg6, float arg7)
                : base(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Limiter.html#getAttackTime()"/>
            /// </summary>
            /// <returns><see cref="float"/></returns>
            public float GetAttackTime()
            {
                return IExecuteWithSignature<float>("getAttackTime", "()F");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Limiter.html#getPostGain()"/>
            /// </summary>
            /// <returns><see cref="float"/></returns>
            public float GetPostGain()
            {
                return IExecuteWithSignature<float>("getPostGain", "()F");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Limiter.html#getRatio()"/>
            /// </summary>
            /// <returns><see cref="float"/></returns>
            public float GetRatio()
            {
                return IExecuteWithSignature<float>("getRatio", "()F");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Limiter.html#getReleaseTime()"/>
            /// </summary>
            /// <returns><see cref="float"/></returns>
            public float GetReleaseTime()
            {
                return IExecuteWithSignature<float>("getReleaseTime", "()F");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Limiter.html#getThreshold()"/>
            /// </summary>
            /// <returns><see cref="float"/></returns>
            public float GetThreshold()
            {
                return IExecuteWithSignature<float>("getThreshold", "()F");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Limiter.html#getLinkGroup()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetLinkGroup()
            {
                return IExecuteWithSignature<int>("getLinkGroup", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Limiter.html#setAttackTime(float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            public void SetAttackTime(float arg0)
            {
                IExecuteWithSignature("setAttackTime", "(F)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Limiter.html#setLinkGroup(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void SetLinkGroup(int arg0)
            {
                IExecuteWithSignature("setLinkGroup", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Limiter.html#setPostGain(float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            public void SetPostGain(float arg0)
            {
                IExecuteWithSignature("setPostGain", "(F)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Limiter.html#setRatio(float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            public void SetRatio(float arg0)
            {
                IExecuteWithSignature("setRatio", "(F)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Limiter.html#setReleaseTime(float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            public void SetReleaseTime(float arg0)
            {
                IExecuteWithSignature("setReleaseTime", "(F)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Limiter.html#setThreshold(float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            public void SetThreshold(float arg0)
            {
                IExecuteWithSignature("setThreshold", "(F)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Mbc implementation
        public partial class Mbc
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Mbc.html#%3Cinit%3E(android.media.audiofx.DynamicsProcessing.Mbc)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.Audiofx.DynamicsProcessing.Mbc"/></param>
            public Mbc(Android.Media.Audiofx.DynamicsProcessing.Mbc arg0)
                : base(arg0)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Mbc.html#%3Cinit%3E(boolean,boolean,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <param name="arg1"><see cref="bool"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            public Mbc(bool arg0, bool arg1, int arg2)
                : base(arg0, arg1, arg2)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Mbc.html#getBand(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.Audiofx.DynamicsProcessing.MbcBand"/></returns>
            public Android.Media.Audiofx.DynamicsProcessing.MbcBand GetBand(int arg0)
            {
                return IExecuteWithSignature<Android.Media.Audiofx.DynamicsProcessing.MbcBand>("getBand", "(I)Landroid/media/audiofx/DynamicsProcessing$MbcBand;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Mbc.html#setBand(int,android.media.audiofx.DynamicsProcessing.MbcBand)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Android.Media.Audiofx.DynamicsProcessing.MbcBand"/></param>
            public void SetBand(int arg0, Android.Media.Audiofx.DynamicsProcessing.MbcBand arg1)
            {
                IExecute("setBand", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region MbcBand implementation
        public partial class MbcBand
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.MbcBand.html#%3Cinit%3E(android.media.audiofx.DynamicsProcessing.MbcBand)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.Audiofx.DynamicsProcessing.MbcBand"/></param>
            public MbcBand(Android.Media.Audiofx.DynamicsProcessing.MbcBand arg0)
                : base(arg0)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.MbcBand.html#%3Cinit%3E(boolean,float,float,float,float,float,float,float,float,float,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <param name="arg1"><see cref="float"/></param>
            /// <param name="arg2"><see cref="float"/></param>
            /// <param name="arg3"><see cref="float"/></param>
            /// <param name="arg4"><see cref="float"/></param>
            /// <param name="arg5"><see cref="float"/></param>
            /// <param name="arg6"><see cref="float"/></param>
            /// <param name="arg7"><see cref="float"/></param>
            /// <param name="arg8"><see cref="float"/></param>
            /// <param name="arg9"><see cref="float"/></param>
            /// <param name="arg10"><see cref="float"/></param>
            public MbcBand(bool arg0, float arg1, float arg2, float arg3, float arg4, float arg5, float arg6, float arg7, float arg8, float arg9, float arg10)
                : base(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.MbcBand.html#getAttackTime()"/>
            /// </summary>
            /// <returns><see cref="float"/></returns>
            public float GetAttackTime()
            {
                return IExecuteWithSignature<float>("getAttackTime", "()F");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.MbcBand.html#getExpanderRatio()"/>
            /// </summary>
            /// <returns><see cref="float"/></returns>
            public float GetExpanderRatio()
            {
                return IExecuteWithSignature<float>("getExpanderRatio", "()F");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.MbcBand.html#getKneeWidth()"/>
            /// </summary>
            /// <returns><see cref="float"/></returns>
            public float GetKneeWidth()
            {
                return IExecuteWithSignature<float>("getKneeWidth", "()F");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.MbcBand.html#getNoiseGateThreshold()"/>
            /// </summary>
            /// <returns><see cref="float"/></returns>
            public float GetNoiseGateThreshold()
            {
                return IExecuteWithSignature<float>("getNoiseGateThreshold", "()F");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.MbcBand.html#getPostGain()"/>
            /// </summary>
            /// <returns><see cref="float"/></returns>
            public float GetPostGain()
            {
                return IExecuteWithSignature<float>("getPostGain", "()F");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.MbcBand.html#getPreGain()"/>
            /// </summary>
            /// <returns><see cref="float"/></returns>
            public float GetPreGain()
            {
                return IExecuteWithSignature<float>("getPreGain", "()F");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.MbcBand.html#getRatio()"/>
            /// </summary>
            /// <returns><see cref="float"/></returns>
            public float GetRatio()
            {
                return IExecuteWithSignature<float>("getRatio", "()F");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.MbcBand.html#getReleaseTime()"/>
            /// </summary>
            /// <returns><see cref="float"/></returns>
            public float GetReleaseTime()
            {
                return IExecuteWithSignature<float>("getReleaseTime", "()F");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.MbcBand.html#getThreshold()"/>
            /// </summary>
            /// <returns><see cref="float"/></returns>
            public float GetThreshold()
            {
                return IExecuteWithSignature<float>("getThreshold", "()F");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.MbcBand.html#setAttackTime(float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            public void SetAttackTime(float arg0)
            {
                IExecuteWithSignature("setAttackTime", "(F)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.MbcBand.html#setExpanderRatio(float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            public void SetExpanderRatio(float arg0)
            {
                IExecuteWithSignature("setExpanderRatio", "(F)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.MbcBand.html#setKneeWidth(float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            public void SetKneeWidth(float arg0)
            {
                IExecuteWithSignature("setKneeWidth", "(F)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.MbcBand.html#setNoiseGateThreshold(float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            public void SetNoiseGateThreshold(float arg0)
            {
                IExecuteWithSignature("setNoiseGateThreshold", "(F)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.MbcBand.html#setPostGain(float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            public void SetPostGain(float arg0)
            {
                IExecuteWithSignature("setPostGain", "(F)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.MbcBand.html#setPreGain(float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            public void SetPreGain(float arg0)
            {
                IExecuteWithSignature("setPreGain", "(F)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.MbcBand.html#setRatio(float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            public void SetRatio(float arg0)
            {
                IExecuteWithSignature("setRatio", "(F)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.MbcBand.html#setReleaseTime(float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            public void SetReleaseTime(float arg0)
            {
                IExecuteWithSignature("setReleaseTime", "(F)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.MbcBand.html#setThreshold(float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            public void SetThreshold(float arg0)
            {
                IExecuteWithSignature("setThreshold", "(F)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Stage implementation
        public partial class Stage
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Stage.html#%3Cinit%3E(boolean,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <param name="arg1"><see cref="bool"/></param>
            public Stage(bool arg0, bool arg1)
                : base(arg0, arg1)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Stage.html#isEnabled()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsEnabled()
            {
                return IExecuteWithSignature<bool>("isEnabled", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Stage.html#isInUse()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsInUse()
            {
                return IExecuteWithSignature<bool>("isInUse", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Stage.html#setEnabled(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            public void SetEnabled(bool arg0)
            {
                IExecuteWithSignature("setEnabled", "(Z)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
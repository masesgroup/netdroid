/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media.Audiofx
{
    #region Visualizer
    public partial class Visualizer
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#%3Cinit%3E(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <exception cref="Java.Lang.RuntimeException"/>
        /// <exception cref="Java.Lang.UnsupportedOperationException"/>
        public Visualizer(int arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#ALREADY_EXISTS"/>
        /// </summary>
        public static int ALREADY_EXISTS { get { if (!_ALREADY_EXISTSReady) { _ALREADY_EXISTSContent = SGetField<int>(LocalBridgeClazz, "ALREADY_EXISTS"); _ALREADY_EXISTSReady = true; } return _ALREADY_EXISTSContent; } }
        private static int _ALREADY_EXISTSContent = default;
        private static bool _ALREADY_EXISTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#ERROR"/>
        /// </summary>
        public static int ERROR { get { if (!_ERRORReady) { _ERRORContent = SGetField<int>(LocalBridgeClazz, "ERROR"); _ERRORReady = true; } return _ERRORContent; } }
        private static int _ERRORContent = default;
        private static bool _ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#ERROR_BAD_VALUE"/>
        /// </summary>
        public static int ERROR_BAD_VALUE { get { if (!_ERROR_BAD_VALUEReady) { _ERROR_BAD_VALUEContent = SGetField<int>(LocalBridgeClazz, "ERROR_BAD_VALUE"); _ERROR_BAD_VALUEReady = true; } return _ERROR_BAD_VALUEContent; } }
        private static int _ERROR_BAD_VALUEContent = default;
        private static bool _ERROR_BAD_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#ERROR_DEAD_OBJECT"/>
        /// </summary>
        public static int ERROR_DEAD_OBJECT { get { if (!_ERROR_DEAD_OBJECTReady) { _ERROR_DEAD_OBJECTContent = SGetField<int>(LocalBridgeClazz, "ERROR_DEAD_OBJECT"); _ERROR_DEAD_OBJECTReady = true; } return _ERROR_DEAD_OBJECTContent; } }
        private static int _ERROR_DEAD_OBJECTContent = default;
        private static bool _ERROR_DEAD_OBJECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#ERROR_INVALID_OPERATION"/>
        /// </summary>
        public static int ERROR_INVALID_OPERATION { get { if (!_ERROR_INVALID_OPERATIONReady) { _ERROR_INVALID_OPERATIONContent = SGetField<int>(LocalBridgeClazz, "ERROR_INVALID_OPERATION"); _ERROR_INVALID_OPERATIONReady = true; } return _ERROR_INVALID_OPERATIONContent; } }
        private static int _ERROR_INVALID_OPERATIONContent = default;
        private static bool _ERROR_INVALID_OPERATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#ERROR_NO_INIT"/>
        /// </summary>
        public static int ERROR_NO_INIT { get { if (!_ERROR_NO_INITReady) { _ERROR_NO_INITContent = SGetField<int>(LocalBridgeClazz, "ERROR_NO_INIT"); _ERROR_NO_INITReady = true; } return _ERROR_NO_INITContent; } }
        private static int _ERROR_NO_INITContent = default;
        private static bool _ERROR_NO_INITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#ERROR_NO_MEMORY"/>
        /// </summary>
        public static int ERROR_NO_MEMORY { get { if (!_ERROR_NO_MEMORYReady) { _ERROR_NO_MEMORYContent = SGetField<int>(LocalBridgeClazz, "ERROR_NO_MEMORY"); _ERROR_NO_MEMORYReady = true; } return _ERROR_NO_MEMORYContent; } }
        private static int _ERROR_NO_MEMORYContent = default;
        private static bool _ERROR_NO_MEMORYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#MEASUREMENT_MODE_NONE"/>
        /// </summary>
        public static int MEASUREMENT_MODE_NONE { get { if (!_MEASUREMENT_MODE_NONEReady) { _MEASUREMENT_MODE_NONEContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_MODE_NONE"); _MEASUREMENT_MODE_NONEReady = true; } return _MEASUREMENT_MODE_NONEContent; } }
        private static int _MEASUREMENT_MODE_NONEContent = default;
        private static bool _MEASUREMENT_MODE_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#MEASUREMENT_MODE_PEAK_RMS"/>
        /// </summary>
        public static int MEASUREMENT_MODE_PEAK_RMS { get { if (!_MEASUREMENT_MODE_PEAK_RMSReady) { _MEASUREMENT_MODE_PEAK_RMSContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_MODE_PEAK_RMS"); _MEASUREMENT_MODE_PEAK_RMSReady = true; } return _MEASUREMENT_MODE_PEAK_RMSContent; } }
        private static int _MEASUREMENT_MODE_PEAK_RMSContent = default;
        private static bool _MEASUREMENT_MODE_PEAK_RMSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#SCALING_MODE_AS_PLAYED"/>
        /// </summary>
        public static int SCALING_MODE_AS_PLAYED { get { if (!_SCALING_MODE_AS_PLAYEDReady) { _SCALING_MODE_AS_PLAYEDContent = SGetField<int>(LocalBridgeClazz, "SCALING_MODE_AS_PLAYED"); _SCALING_MODE_AS_PLAYEDReady = true; } return _SCALING_MODE_AS_PLAYEDContent; } }
        private static int _SCALING_MODE_AS_PLAYEDContent = default;
        private static bool _SCALING_MODE_AS_PLAYEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#SCALING_MODE_NORMALIZED"/>
        /// </summary>
        public static int SCALING_MODE_NORMALIZED { get { if (!_SCALING_MODE_NORMALIZEDReady) { _SCALING_MODE_NORMALIZEDContent = SGetField<int>(LocalBridgeClazz, "SCALING_MODE_NORMALIZED"); _SCALING_MODE_NORMALIZEDReady = true; } return _SCALING_MODE_NORMALIZEDContent; } }
        private static int _SCALING_MODE_NORMALIZEDContent = default;
        private static bool _SCALING_MODE_NORMALIZEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#STATE_ENABLED"/>
        /// </summary>
        public static int STATE_ENABLED { get { if (!_STATE_ENABLEDReady) { _STATE_ENABLEDContent = SGetField<int>(LocalBridgeClazz, "STATE_ENABLED"); _STATE_ENABLEDReady = true; } return _STATE_ENABLEDContent; } }
        private static int _STATE_ENABLEDContent = default;
        private static bool _STATE_ENABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#STATE_INITIALIZED"/>
        /// </summary>
        public static int STATE_INITIALIZED { get { if (!_STATE_INITIALIZEDReady) { _STATE_INITIALIZEDContent = SGetField<int>(LocalBridgeClazz, "STATE_INITIALIZED"); _STATE_INITIALIZEDReady = true; } return _STATE_INITIALIZEDContent; } }
        private static int _STATE_INITIALIZEDContent = default;
        private static bool _STATE_INITIALIZEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#STATE_UNINITIALIZED"/>
        /// </summary>
        public static int STATE_UNINITIALIZED { get { if (!_STATE_UNINITIALIZEDReady) { _STATE_UNINITIALIZEDContent = SGetField<int>(LocalBridgeClazz, "STATE_UNINITIALIZED"); _STATE_UNINITIALIZEDReady = true; } return _STATE_UNINITIALIZEDContent; } }
        private static int _STATE_UNINITIALIZEDContent = default;
        private static bool _STATE_UNINITIALIZEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#SUCCESS"/>
        /// </summary>
        public static int SUCCESS { get { if (!_SUCCESSReady) { _SUCCESSContent = SGetField<int>(LocalBridgeClazz, "SUCCESS"); _SUCCESSReady = true; } return _SUCCESSContent; } }
        private static int _SUCCESSContent = default;
        private static bool _SUCCESSReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#getCaptureSizeRange()"/> 
        /// </summary>
        public static int[] CaptureSizeRange
        {
            get { return SExecuteWithSignatureArray<int>(LocalBridgeClazz, "getCaptureSizeRange", "()[I"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#getMaxCaptureRate()"/> 
        /// </summary>
        public static int MaxCaptureRate
        {
            get { return SExecuteWithSignature<int>(LocalBridgeClazz, "getMaxCaptureRate", "()I"); }
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#getCaptureSize()"/> 
        /// </summary>
        public int CaptureSize
        {
            get { return IExecuteWithSignature<int>("getCaptureSize", "()I"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#getEnabled()"/> 
        /// </summary>
        public bool Enabled
        {
            get { return IExecuteWithSignature<bool>("getEnabled", "()Z"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#getMeasurementMode()"/> 
        /// </summary>
        public int MeasurementMode
        {
            get { return IExecuteWithSignature<int>("getMeasurementMode", "()I"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#getSamplingRate()"/> 
        /// </summary>
        public int SamplingRate
        {
            get { return IExecuteWithSignature<int>("getSamplingRate", "()I"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#getScalingMode()"/> 
        /// </summary>
        public int ScalingMode
        {
            get { return IExecuteWithSignature<int>("getScalingMode", "()I"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#getFft(byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <returns><see cref="int"/></returns>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public int GetFft(byte[] arg0)
        {
            return IExecuteWithSignature<int>("getFft", "([B)I", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#getMeasurementPeakRms(android.media.audiofx.Visualizer.MeasurementPeakRms)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.Audiofx.Visualizer.MeasurementPeakRms"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetMeasurementPeakRms(Android.Media.Audiofx.Visualizer.MeasurementPeakRms arg0)
        {
            return IExecuteWithSignature<int>("getMeasurementPeakRms", "(Landroid/media/audiofx/Visualizer$MeasurementPeakRms;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#getWaveForm(byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <returns><see cref="int"/></returns>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public int GetWaveForm(byte[] arg0)
        {
            return IExecuteWithSignature<int>("getWaveForm", "([B)I", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#setCaptureSize(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public int SetCaptureSize(int arg0)
        {
            return IExecuteWithSignature<int>("setCaptureSize", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#setDataCaptureListener(android.media.audiofx.Visualizer.OnDataCaptureListener,int,boolean,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.Audiofx.Visualizer.OnDataCaptureListener"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <returns><see cref="int"/></returns>
        public int SetDataCaptureListener(Android.Media.Audiofx.Visualizer.OnDataCaptureListener arg0, int arg1, bool arg2, bool arg3)
        {
            return IExecute<int>("setDataCaptureListener", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#setEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        /// <returns><see cref="int"/></returns>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public int SetEnabled(bool arg0)
        {
            return IExecuteWithSignature<int>("setEnabled", "(Z)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#setMeasurementMode(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public int SetMeasurementMode(int arg0)
        {
            return IExecuteWithSignature<int>("setMeasurementMode", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#setScalingMode(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public int SetScalingMode(int arg0)
        {
            return IExecuteWithSignature<int>("setScalingMode", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#release()"/>
        /// </summary>
        public void Release()
        {
            IExecuteWithSignature("release", "()V");
        }

        #endregion

        #region Nested classes
        #region MeasurementPeakRms
        public partial class MeasurementPeakRms
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/Visualizer.MeasurementPeakRms.html#mPeak"/>
            /// </summary>
            public int mPeak { get { return IGetField<int>("mPeak"); } set { ISetField("mPeak", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/Visualizer.MeasurementPeakRms.html#mRms"/>
            /// </summary>
            public int mRms { get { return IGetField<int>("mRms"); } set { ISetField("mRms", value); } }

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnDataCaptureListener
        public partial class OnDataCaptureListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnDataCaptureListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onFftDataCapture", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Media.Audiofx.Visualizer>>>(OnFftDataCaptureEventHandler));
                AddEventHandler("onWaveFormDataCapture", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Media.Audiofx.Visualizer>>>(OnWaveFormDataCaptureEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/audiofx/Visualizer.OnDataCaptureListener.html#onFftDataCapture(android.media.audiofx.Visualizer,byte[],int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnFftDataCapture"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Media.Audiofx.Visualizer, byte[], int> OnOnFftDataCapture { get; set; } = null;

            void OnFftDataCaptureEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Media.Audiofx.Visualizer>> data)
            {
                var methodToExecute = (OnOnFftDataCapture != null) ? OnOnFftDataCapture : OnFftDataCapture;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<byte[]>(0), data.EventData.GetAt<int>(1));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/Visualizer.OnDataCaptureListener.html#onFftDataCapture(android.media.audiofx.Visualizer,byte[],int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.Audiofx.Visualizer"/></param>
            /// <param name="arg1"><see cref="byte"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            public virtual void OnFftDataCapture(Android.Media.Audiofx.Visualizer arg0, byte[] arg1, int arg2)
            {
                
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/audiofx/Visualizer.OnDataCaptureListener.html#onWaveFormDataCapture(android.media.audiofx.Visualizer,byte[],int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnWaveFormDataCapture"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Media.Audiofx.Visualizer, byte[], int> OnOnWaveFormDataCapture { get; set; } = null;

            void OnWaveFormDataCaptureEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Media.Audiofx.Visualizer>> data)
            {
                var methodToExecute = (OnOnWaveFormDataCapture != null) ? OnOnWaveFormDataCapture : OnWaveFormDataCapture;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<byte[]>(0), data.EventData.GetAt<int>(1));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/Visualizer.OnDataCaptureListener.html#onWaveFormDataCapture(android.media.audiofx.Visualizer,byte[],int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.Audiofx.Visualizer"/></param>
            /// <param name="arg1"><see cref="byte"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            public virtual void OnWaveFormDataCapture(Android.Media.Audiofx.Visualizer arg0, byte[] arg1, int arg2)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnDataCaptureListenerDirect
        public partial class OnDataCaptureListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/Visualizer.OnDataCaptureListener.html#onFftDataCapture(android.media.audiofx.Visualizer,byte[],int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.Audiofx.Visualizer"/></param>
            /// <param name="arg1"><see cref="byte"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            public override void OnFftDataCapture(Android.Media.Audiofx.Visualizer arg0, byte[] arg1, int arg2)
            {
                IExecute("onFftDataCapture", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/audiofx/Visualizer.OnDataCaptureListener.html#onWaveFormDataCapture(android.media.audiofx.Visualizer,byte[],int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.Audiofx.Visualizer"/></param>
            /// <param name="arg1"><see cref="byte"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            public override void OnWaveFormDataCapture(Android.Media.Audiofx.Visualizer arg0, byte[] arg1, int arg2)
            {
                IExecute("onWaveFormDataCapture", arg0, arg1, arg2);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
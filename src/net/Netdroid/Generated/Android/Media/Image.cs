/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media
{
    #region Image declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/media/Image.html"/>
    /// </summary>
    public partial class Image : Java.Lang.AutoCloseable
    {
        const string _bridgeClassName = "android.media.Image";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("Image class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public Image() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("Image class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public Image(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region Plane declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/Image.Plane.html"/>
        /// </summary>
        public partial class Plane : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Plane>
        {
            const string _bridgeClassName = "android.media.Image$Plane";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("Plane class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Plane() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("Plane class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Plane(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region Image implementation
    public partial class Image
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/Image.html#getPlanes()"/>
        /// </summary>
        /// <returns><see cref="Android.Media.Image.Plane"/></returns>
        public Android.Media.Image.Plane[] GetPlanes()
        {
            return IExecuteWithSignatureArray<Android.Media.Image.Plane>("getPlanes", "()[Landroid/media/Image$Plane;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/Image.html#getFormat()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetFormat()
        {
            return IExecuteWithSignature<int>("getFormat", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/Image.html#getHeight()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetHeight()
        {
            return IExecuteWithSignature<int>("getHeight", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/Image.html#getWidth()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetWidth()
        {
            return IExecuteWithSignature<int>("getWidth", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/Image.html#getTimestamp()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetTimestamp()
        {
            return IExecuteWithSignature<long>("getTimestamp", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/Image.html#close()"/>
        /// </summary>
        public void Close()
        {
            IExecuteWithSignature("close", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/Image.html#getCropRect()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Rect"/></returns>
        public Android.Graphics.Rect GetCropRect()
        {
            return IExecuteWithSignature<Android.Graphics.Rect>("getCropRect", "()Landroid/graphics/Rect;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/Image.html#getHardwareBuffer()"/>
        /// </summary>
        /// <returns><see cref="Android.Hardware.HardwareBuffer"/></returns>
        public Android.Hardware.HardwareBuffer GetHardwareBuffer()
        {
            return IExecuteWithSignature<Android.Hardware.HardwareBuffer>("getHardwareBuffer", "()Landroid/hardware/HardwareBuffer;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/Image.html#getFence()"/>
        /// </summary>
        /// <returns><see cref="Android.Hardware.SyncFence"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public Android.Hardware.SyncFence GetFence()
        {
            return IExecuteWithSignature<Android.Hardware.SyncFence>("getFence", "()Landroid/hardware/SyncFence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/Image.html#getDataSpace()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetDataSpace()
        {
            return IExecuteWithSignature<int>("getDataSpace", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/Image.html#setCropRect(android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        public void SetCropRect(Android.Graphics.Rect arg0)
        {
            IExecuteWithSignature("setCropRect", "(Landroid/graphics/Rect;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/Image.html#setDataSpace(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetDataSpace(int arg0)
        {
            IExecuteWithSignature("setDataSpace", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/Image.html#setFence(android.hardware.SyncFence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Hardware.SyncFence"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void SetFence(Android.Hardware.SyncFence arg0)
        {
            IExecuteWithSignature("setFence", "(Landroid/hardware/SyncFence;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/Image.html#setTimestamp(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        public void SetTimestamp(long arg0)
        {
            IExecuteWithSignature("setTimestamp", "(J)V", arg0);
        }
    
        #endregion
    
        #region Nested classes
        #region Plane implementation
        public partial class Plane
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/Image.Plane.html#getPixelStride()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetPixelStride()
            {
                return IExecuteWithSignature<int>("getPixelStride", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/Image.Plane.html#getRowStride()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetRowStride()
            {
                return IExecuteWithSignature<int>("getRowStride", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/Image.Plane.html#getBuffer()"/>
            /// </summary>
            /// <returns><see cref="Java.Nio.ByteBuffer"/></returns>
            public Java.Nio.ByteBuffer GetBuffer()
            {
                return IExecuteWithSignature<Java.Nio.ByteBuffer>("getBuffer", "()Ljava/nio/ByteBuffer;");
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media
{
    #region Image
    public partial class Image
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/Image.html#getCropRect()"/> <see href="https://developer.android.com/reference/android/media/Image.html#setCropRect(android.graphics.Rect)"/>
        /// </summary>
        public Android.Graphics.Rect CropRect
        {
            get { return IExecuteWithSignature<Android.Graphics.Rect>("getCropRect", "()Landroid/graphics/Rect;"); } set { IExecuteWithSignature("setCropRect", "(Landroid/graphics/Rect;)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/Image.html#getDataSpace()"/> <see href="https://developer.android.com/reference/android/media/Image.html#setDataSpace(int)"/>
        /// </summary>
        public int DataSpace
        {
            get { return IExecuteWithSignature<int>("getDataSpace", "()I"); } set { IExecuteWithSignature("setDataSpace", "(I)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/Image.html#getFence()"/> <see href="https://developer.android.com/reference/android/media/Image.html#setFence(android.hardware.SyncFence)"/>
        /// </summary>
        public Android.Hardware.SyncFence Fence
        {
            get { return IExecuteWithSignature<Android.Hardware.SyncFence>("getFence", "()Landroid/hardware/SyncFence;"); } set { IExecuteWithSignature("setFence", "(Landroid/hardware/SyncFence;)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/Image.html#getFormat()"/> 
        /// </summary>
        public int Format
        {
            get { return IExecuteWithSignature<int>("getFormat", "()I"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/Image.html#getHardwareBuffer()"/> 
        /// </summary>
        public Android.Hardware.HardwareBuffer HardwareBuffer
        {
            get { return IExecuteWithSignature<Android.Hardware.HardwareBuffer>("getHardwareBuffer", "()Landroid/hardware/HardwareBuffer;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/Image.html#getHeight()"/> 
        /// </summary>
        public int Height
        {
            get { return IExecuteWithSignature<int>("getHeight", "()I"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/Image.html#getPlanes()"/> 
        /// </summary>
        public Android.Media.Image.Plane[] Planes
        {
            get { return IExecuteWithSignatureArray<Android.Media.Image.Plane>("getPlanes", "()[Landroid/media/Image$Plane;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/Image.html#getTimestamp()"/> <see href="https://developer.android.com/reference/android/media/Image.html#setTimestamp(long)"/>
        /// </summary>
        public long Timestamp
        {
            get { return IExecuteWithSignature<long>("getTimestamp", "()J"); } set { IExecuteWithSignature("setTimestamp", "(J)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/Image.html#getWidth()"/> 
        /// </summary>
        public int Width
        {
            get { return IExecuteWithSignature<int>("getWidth", "()I"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/Image.html#close()"/>
        /// </summary>
        public void Close()
        {
            IExecuteWithSignature("close", "()V");
        }

        #endregion

        #region Nested classes
        #region Plane
        public partial class Plane
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/Image.Plane.html#getBuffer()"/> 
            /// </summary>
            public Java.Nio.ByteBuffer Buffer
            {
                get { return IExecuteWithSignature<Java.Nio.ByteBuffer>("getBuffer", "()Ljava/nio/ByteBuffer;"); }
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/Image.Plane.html#getPixelStride()"/> 
            /// </summary>
            public int PixelStride
            {
                get { return IExecuteWithSignature<int>("getPixelStride", "()I"); }
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/Image.Plane.html#getRowStride()"/> 
            /// </summary>
            public int RowStride
            {
                get { return IExecuteWithSignature<int>("getRowStride", "()I"); }
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
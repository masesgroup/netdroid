/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media
{
    #region MediaMetadataRetriever
    public partial class MediaMetadataRetriever
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_ALBUM"/>
        /// </summary>
        public static int METADATA_KEY_ALBUM { get { if (!_METADATA_KEY_ALBUMReady) { _METADATA_KEY_ALBUMContent = SGetField<int>(LocalBridgeClazz, "METADATA_KEY_ALBUM"); _METADATA_KEY_ALBUMReady = true; } return _METADATA_KEY_ALBUMContent; } }
        private static int _METADATA_KEY_ALBUMContent = default;
        private static bool _METADATA_KEY_ALBUMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_ALBUMARTIST"/>
        /// </summary>
        public static int METADATA_KEY_ALBUMARTIST { get { if (!_METADATA_KEY_ALBUMARTISTReady) { _METADATA_KEY_ALBUMARTISTContent = SGetField<int>(LocalBridgeClazz, "METADATA_KEY_ALBUMARTIST"); _METADATA_KEY_ALBUMARTISTReady = true; } return _METADATA_KEY_ALBUMARTISTContent; } }
        private static int _METADATA_KEY_ALBUMARTISTContent = default;
        private static bool _METADATA_KEY_ALBUMARTISTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_ARTIST"/>
        /// </summary>
        public static int METADATA_KEY_ARTIST { get { if (!_METADATA_KEY_ARTISTReady) { _METADATA_KEY_ARTISTContent = SGetField<int>(LocalBridgeClazz, "METADATA_KEY_ARTIST"); _METADATA_KEY_ARTISTReady = true; } return _METADATA_KEY_ARTISTContent; } }
        private static int _METADATA_KEY_ARTISTContent = default;
        private static bool _METADATA_KEY_ARTISTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_AUTHOR"/>
        /// </summary>
        public static int METADATA_KEY_AUTHOR { get { if (!_METADATA_KEY_AUTHORReady) { _METADATA_KEY_AUTHORContent = SGetField<int>(LocalBridgeClazz, "METADATA_KEY_AUTHOR"); _METADATA_KEY_AUTHORReady = true; } return _METADATA_KEY_AUTHORContent; } }
        private static int _METADATA_KEY_AUTHORContent = default;
        private static bool _METADATA_KEY_AUTHORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_BITRATE"/>
        /// </summary>
        public static int METADATA_KEY_BITRATE { get { if (!_METADATA_KEY_BITRATEReady) { _METADATA_KEY_BITRATEContent = SGetField<int>(LocalBridgeClazz, "METADATA_KEY_BITRATE"); _METADATA_KEY_BITRATEReady = true; } return _METADATA_KEY_BITRATEContent; } }
        private static int _METADATA_KEY_BITRATEContent = default;
        private static bool _METADATA_KEY_BITRATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_BITS_PER_SAMPLE"/>
        /// </summary>
        public static int METADATA_KEY_BITS_PER_SAMPLE { get { if (!_METADATA_KEY_BITS_PER_SAMPLEReady) { _METADATA_KEY_BITS_PER_SAMPLEContent = SGetField<int>(LocalBridgeClazz, "METADATA_KEY_BITS_PER_SAMPLE"); _METADATA_KEY_BITS_PER_SAMPLEReady = true; } return _METADATA_KEY_BITS_PER_SAMPLEContent; } }
        private static int _METADATA_KEY_BITS_PER_SAMPLEContent = default;
        private static bool _METADATA_KEY_BITS_PER_SAMPLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_CAPTURE_FRAMERATE"/>
        /// </summary>
        public static int METADATA_KEY_CAPTURE_FRAMERATE { get { if (!_METADATA_KEY_CAPTURE_FRAMERATEReady) { _METADATA_KEY_CAPTURE_FRAMERATEContent = SGetField<int>(LocalBridgeClazz, "METADATA_KEY_CAPTURE_FRAMERATE"); _METADATA_KEY_CAPTURE_FRAMERATEReady = true; } return _METADATA_KEY_CAPTURE_FRAMERATEContent; } }
        private static int _METADATA_KEY_CAPTURE_FRAMERATEContent = default;
        private static bool _METADATA_KEY_CAPTURE_FRAMERATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_CD_TRACK_NUMBER"/>
        /// </summary>
        public static int METADATA_KEY_CD_TRACK_NUMBER { get { if (!_METADATA_KEY_CD_TRACK_NUMBERReady) { _METADATA_KEY_CD_TRACK_NUMBERContent = SGetField<int>(LocalBridgeClazz, "METADATA_KEY_CD_TRACK_NUMBER"); _METADATA_KEY_CD_TRACK_NUMBERReady = true; } return _METADATA_KEY_CD_TRACK_NUMBERContent; } }
        private static int _METADATA_KEY_CD_TRACK_NUMBERContent = default;
        private static bool _METADATA_KEY_CD_TRACK_NUMBERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_COLOR_RANGE"/>
        /// </summary>
        public static int METADATA_KEY_COLOR_RANGE { get { if (!_METADATA_KEY_COLOR_RANGEReady) { _METADATA_KEY_COLOR_RANGEContent = SGetField<int>(LocalBridgeClazz, "METADATA_KEY_COLOR_RANGE"); _METADATA_KEY_COLOR_RANGEReady = true; } return _METADATA_KEY_COLOR_RANGEContent; } }
        private static int _METADATA_KEY_COLOR_RANGEContent = default;
        private static bool _METADATA_KEY_COLOR_RANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_COLOR_STANDARD"/>
        /// </summary>
        public static int METADATA_KEY_COLOR_STANDARD { get { if (!_METADATA_KEY_COLOR_STANDARDReady) { _METADATA_KEY_COLOR_STANDARDContent = SGetField<int>(LocalBridgeClazz, "METADATA_KEY_COLOR_STANDARD"); _METADATA_KEY_COLOR_STANDARDReady = true; } return _METADATA_KEY_COLOR_STANDARDContent; } }
        private static int _METADATA_KEY_COLOR_STANDARDContent = default;
        private static bool _METADATA_KEY_COLOR_STANDARDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_COLOR_TRANSFER"/>
        /// </summary>
        public static int METADATA_KEY_COLOR_TRANSFER { get { if (!_METADATA_KEY_COLOR_TRANSFERReady) { _METADATA_KEY_COLOR_TRANSFERContent = SGetField<int>(LocalBridgeClazz, "METADATA_KEY_COLOR_TRANSFER"); _METADATA_KEY_COLOR_TRANSFERReady = true; } return _METADATA_KEY_COLOR_TRANSFERContent; } }
        private static int _METADATA_KEY_COLOR_TRANSFERContent = default;
        private static bool _METADATA_KEY_COLOR_TRANSFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_COMPILATION"/>
        /// </summary>
        public static int METADATA_KEY_COMPILATION { get { if (!_METADATA_KEY_COMPILATIONReady) { _METADATA_KEY_COMPILATIONContent = SGetField<int>(LocalBridgeClazz, "METADATA_KEY_COMPILATION"); _METADATA_KEY_COMPILATIONReady = true; } return _METADATA_KEY_COMPILATIONContent; } }
        private static int _METADATA_KEY_COMPILATIONContent = default;
        private static bool _METADATA_KEY_COMPILATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_COMPOSER"/>
        /// </summary>
        public static int METADATA_KEY_COMPOSER { get { if (!_METADATA_KEY_COMPOSERReady) { _METADATA_KEY_COMPOSERContent = SGetField<int>(LocalBridgeClazz, "METADATA_KEY_COMPOSER"); _METADATA_KEY_COMPOSERReady = true; } return _METADATA_KEY_COMPOSERContent; } }
        private static int _METADATA_KEY_COMPOSERContent = default;
        private static bool _METADATA_KEY_COMPOSERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_DATE"/>
        /// </summary>
        public static int METADATA_KEY_DATE { get { if (!_METADATA_KEY_DATEReady) { _METADATA_KEY_DATEContent = SGetField<int>(LocalBridgeClazz, "METADATA_KEY_DATE"); _METADATA_KEY_DATEReady = true; } return _METADATA_KEY_DATEContent; } }
        private static int _METADATA_KEY_DATEContent = default;
        private static bool _METADATA_KEY_DATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_DISC_NUMBER"/>
        /// </summary>
        public static int METADATA_KEY_DISC_NUMBER { get { if (!_METADATA_KEY_DISC_NUMBERReady) { _METADATA_KEY_DISC_NUMBERContent = SGetField<int>(LocalBridgeClazz, "METADATA_KEY_DISC_NUMBER"); _METADATA_KEY_DISC_NUMBERReady = true; } return _METADATA_KEY_DISC_NUMBERContent; } }
        private static int _METADATA_KEY_DISC_NUMBERContent = default;
        private static bool _METADATA_KEY_DISC_NUMBERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_DURATION"/>
        /// </summary>
        public static int METADATA_KEY_DURATION { get { if (!_METADATA_KEY_DURATIONReady) { _METADATA_KEY_DURATIONContent = SGetField<int>(LocalBridgeClazz, "METADATA_KEY_DURATION"); _METADATA_KEY_DURATIONReady = true; } return _METADATA_KEY_DURATIONContent; } }
        private static int _METADATA_KEY_DURATIONContent = default;
        private static bool _METADATA_KEY_DURATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_EXIF_LENGTH"/>
        /// </summary>
        public static int METADATA_KEY_EXIF_LENGTH { get { if (!_METADATA_KEY_EXIF_LENGTHReady) { _METADATA_KEY_EXIF_LENGTHContent = SGetField<int>(LocalBridgeClazz, "METADATA_KEY_EXIF_LENGTH"); _METADATA_KEY_EXIF_LENGTHReady = true; } return _METADATA_KEY_EXIF_LENGTHContent; } }
        private static int _METADATA_KEY_EXIF_LENGTHContent = default;
        private static bool _METADATA_KEY_EXIF_LENGTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_EXIF_OFFSET"/>
        /// </summary>
        public static int METADATA_KEY_EXIF_OFFSET { get { if (!_METADATA_KEY_EXIF_OFFSETReady) { _METADATA_KEY_EXIF_OFFSETContent = SGetField<int>(LocalBridgeClazz, "METADATA_KEY_EXIF_OFFSET"); _METADATA_KEY_EXIF_OFFSETReady = true; } return _METADATA_KEY_EXIF_OFFSETContent; } }
        private static int _METADATA_KEY_EXIF_OFFSETContent = default;
        private static bool _METADATA_KEY_EXIF_OFFSETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_GENRE"/>
        /// </summary>
        public static int METADATA_KEY_GENRE { get { if (!_METADATA_KEY_GENREReady) { _METADATA_KEY_GENREContent = SGetField<int>(LocalBridgeClazz, "METADATA_KEY_GENRE"); _METADATA_KEY_GENREReady = true; } return _METADATA_KEY_GENREContent; } }
        private static int _METADATA_KEY_GENREContent = default;
        private static bool _METADATA_KEY_GENREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_HAS_AUDIO"/>
        /// </summary>
        public static int METADATA_KEY_HAS_AUDIO { get { if (!_METADATA_KEY_HAS_AUDIOReady) { _METADATA_KEY_HAS_AUDIOContent = SGetField<int>(LocalBridgeClazz, "METADATA_KEY_HAS_AUDIO"); _METADATA_KEY_HAS_AUDIOReady = true; } return _METADATA_KEY_HAS_AUDIOContent; } }
        private static int _METADATA_KEY_HAS_AUDIOContent = default;
        private static bool _METADATA_KEY_HAS_AUDIOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_HAS_IMAGE"/>
        /// </summary>
        public static int METADATA_KEY_HAS_IMAGE { get { if (!_METADATA_KEY_HAS_IMAGEReady) { _METADATA_KEY_HAS_IMAGEContent = SGetField<int>(LocalBridgeClazz, "METADATA_KEY_HAS_IMAGE"); _METADATA_KEY_HAS_IMAGEReady = true; } return _METADATA_KEY_HAS_IMAGEContent; } }
        private static int _METADATA_KEY_HAS_IMAGEContent = default;
        private static bool _METADATA_KEY_HAS_IMAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_HAS_VIDEO"/>
        /// </summary>
        public static int METADATA_KEY_HAS_VIDEO { get { if (!_METADATA_KEY_HAS_VIDEOReady) { _METADATA_KEY_HAS_VIDEOContent = SGetField<int>(LocalBridgeClazz, "METADATA_KEY_HAS_VIDEO"); _METADATA_KEY_HAS_VIDEOReady = true; } return _METADATA_KEY_HAS_VIDEOContent; } }
        private static int _METADATA_KEY_HAS_VIDEOContent = default;
        private static bool _METADATA_KEY_HAS_VIDEOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_IMAGE_COUNT"/>
        /// </summary>
        public static int METADATA_KEY_IMAGE_COUNT { get { if (!_METADATA_KEY_IMAGE_COUNTReady) { _METADATA_KEY_IMAGE_COUNTContent = SGetField<int>(LocalBridgeClazz, "METADATA_KEY_IMAGE_COUNT"); _METADATA_KEY_IMAGE_COUNTReady = true; } return _METADATA_KEY_IMAGE_COUNTContent; } }
        private static int _METADATA_KEY_IMAGE_COUNTContent = default;
        private static bool _METADATA_KEY_IMAGE_COUNTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_IMAGE_HEIGHT"/>
        /// </summary>
        public static int METADATA_KEY_IMAGE_HEIGHT { get { if (!_METADATA_KEY_IMAGE_HEIGHTReady) { _METADATA_KEY_IMAGE_HEIGHTContent = SGetField<int>(LocalBridgeClazz, "METADATA_KEY_IMAGE_HEIGHT"); _METADATA_KEY_IMAGE_HEIGHTReady = true; } return _METADATA_KEY_IMAGE_HEIGHTContent; } }
        private static int _METADATA_KEY_IMAGE_HEIGHTContent = default;
        private static bool _METADATA_KEY_IMAGE_HEIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_IMAGE_PRIMARY"/>
        /// </summary>
        public static int METADATA_KEY_IMAGE_PRIMARY { get { if (!_METADATA_KEY_IMAGE_PRIMARYReady) { _METADATA_KEY_IMAGE_PRIMARYContent = SGetField<int>(LocalBridgeClazz, "METADATA_KEY_IMAGE_PRIMARY"); _METADATA_KEY_IMAGE_PRIMARYReady = true; } return _METADATA_KEY_IMAGE_PRIMARYContent; } }
        private static int _METADATA_KEY_IMAGE_PRIMARYContent = default;
        private static bool _METADATA_KEY_IMAGE_PRIMARYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_IMAGE_ROTATION"/>
        /// </summary>
        public static int METADATA_KEY_IMAGE_ROTATION { get { if (!_METADATA_KEY_IMAGE_ROTATIONReady) { _METADATA_KEY_IMAGE_ROTATIONContent = SGetField<int>(LocalBridgeClazz, "METADATA_KEY_IMAGE_ROTATION"); _METADATA_KEY_IMAGE_ROTATIONReady = true; } return _METADATA_KEY_IMAGE_ROTATIONContent; } }
        private static int _METADATA_KEY_IMAGE_ROTATIONContent = default;
        private static bool _METADATA_KEY_IMAGE_ROTATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_IMAGE_WIDTH"/>
        /// </summary>
        public static int METADATA_KEY_IMAGE_WIDTH { get { if (!_METADATA_KEY_IMAGE_WIDTHReady) { _METADATA_KEY_IMAGE_WIDTHContent = SGetField<int>(LocalBridgeClazz, "METADATA_KEY_IMAGE_WIDTH"); _METADATA_KEY_IMAGE_WIDTHReady = true; } return _METADATA_KEY_IMAGE_WIDTHContent; } }
        private static int _METADATA_KEY_IMAGE_WIDTHContent = default;
        private static bool _METADATA_KEY_IMAGE_WIDTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_LOCATION"/>
        /// </summary>
        public static int METADATA_KEY_LOCATION { get { if (!_METADATA_KEY_LOCATIONReady) { _METADATA_KEY_LOCATIONContent = SGetField<int>(LocalBridgeClazz, "METADATA_KEY_LOCATION"); _METADATA_KEY_LOCATIONReady = true; } return _METADATA_KEY_LOCATIONContent; } }
        private static int _METADATA_KEY_LOCATIONContent = default;
        private static bool _METADATA_KEY_LOCATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_MIMETYPE"/>
        /// </summary>
        public static int METADATA_KEY_MIMETYPE { get { if (!_METADATA_KEY_MIMETYPEReady) { _METADATA_KEY_MIMETYPEContent = SGetField<int>(LocalBridgeClazz, "METADATA_KEY_MIMETYPE"); _METADATA_KEY_MIMETYPEReady = true; } return _METADATA_KEY_MIMETYPEContent; } }
        private static int _METADATA_KEY_MIMETYPEContent = default;
        private static bool _METADATA_KEY_MIMETYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_NUM_TRACKS"/>
        /// </summary>
        public static int METADATA_KEY_NUM_TRACKS { get { if (!_METADATA_KEY_NUM_TRACKSReady) { _METADATA_KEY_NUM_TRACKSContent = SGetField<int>(LocalBridgeClazz, "METADATA_KEY_NUM_TRACKS"); _METADATA_KEY_NUM_TRACKSReady = true; } return _METADATA_KEY_NUM_TRACKSContent; } }
        private static int _METADATA_KEY_NUM_TRACKSContent = default;
        private static bool _METADATA_KEY_NUM_TRACKSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_SAMPLERATE"/>
        /// </summary>
        public static int METADATA_KEY_SAMPLERATE { get { if (!_METADATA_KEY_SAMPLERATEReady) { _METADATA_KEY_SAMPLERATEContent = SGetField<int>(LocalBridgeClazz, "METADATA_KEY_SAMPLERATE"); _METADATA_KEY_SAMPLERATEReady = true; } return _METADATA_KEY_SAMPLERATEContent; } }
        private static int _METADATA_KEY_SAMPLERATEContent = default;
        private static bool _METADATA_KEY_SAMPLERATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_TITLE"/>
        /// </summary>
        public static int METADATA_KEY_TITLE { get { if (!_METADATA_KEY_TITLEReady) { _METADATA_KEY_TITLEContent = SGetField<int>(LocalBridgeClazz, "METADATA_KEY_TITLE"); _METADATA_KEY_TITLEReady = true; } return _METADATA_KEY_TITLEContent; } }
        private static int _METADATA_KEY_TITLEContent = default;
        private static bool _METADATA_KEY_TITLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_VIDEO_FRAME_COUNT"/>
        /// </summary>
        public static int METADATA_KEY_VIDEO_FRAME_COUNT { get { if (!_METADATA_KEY_VIDEO_FRAME_COUNTReady) { _METADATA_KEY_VIDEO_FRAME_COUNTContent = SGetField<int>(LocalBridgeClazz, "METADATA_KEY_VIDEO_FRAME_COUNT"); _METADATA_KEY_VIDEO_FRAME_COUNTReady = true; } return _METADATA_KEY_VIDEO_FRAME_COUNTContent; } }
        private static int _METADATA_KEY_VIDEO_FRAME_COUNTContent = default;
        private static bool _METADATA_KEY_VIDEO_FRAME_COUNTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_VIDEO_HEIGHT"/>
        /// </summary>
        public static int METADATA_KEY_VIDEO_HEIGHT { get { if (!_METADATA_KEY_VIDEO_HEIGHTReady) { _METADATA_KEY_VIDEO_HEIGHTContent = SGetField<int>(LocalBridgeClazz, "METADATA_KEY_VIDEO_HEIGHT"); _METADATA_KEY_VIDEO_HEIGHTReady = true; } return _METADATA_KEY_VIDEO_HEIGHTContent; } }
        private static int _METADATA_KEY_VIDEO_HEIGHTContent = default;
        private static bool _METADATA_KEY_VIDEO_HEIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_VIDEO_ROTATION"/>
        /// </summary>
        public static int METADATA_KEY_VIDEO_ROTATION { get { if (!_METADATA_KEY_VIDEO_ROTATIONReady) { _METADATA_KEY_VIDEO_ROTATIONContent = SGetField<int>(LocalBridgeClazz, "METADATA_KEY_VIDEO_ROTATION"); _METADATA_KEY_VIDEO_ROTATIONReady = true; } return _METADATA_KEY_VIDEO_ROTATIONContent; } }
        private static int _METADATA_KEY_VIDEO_ROTATIONContent = default;
        private static bool _METADATA_KEY_VIDEO_ROTATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_VIDEO_WIDTH"/>
        /// </summary>
        public static int METADATA_KEY_VIDEO_WIDTH { get { if (!_METADATA_KEY_VIDEO_WIDTHReady) { _METADATA_KEY_VIDEO_WIDTHContent = SGetField<int>(LocalBridgeClazz, "METADATA_KEY_VIDEO_WIDTH"); _METADATA_KEY_VIDEO_WIDTHReady = true; } return _METADATA_KEY_VIDEO_WIDTHContent; } }
        private static int _METADATA_KEY_VIDEO_WIDTHContent = default;
        private static bool _METADATA_KEY_VIDEO_WIDTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_WRITER"/>
        /// </summary>
        public static int METADATA_KEY_WRITER { get { if (!_METADATA_KEY_WRITERReady) { _METADATA_KEY_WRITERContent = SGetField<int>(LocalBridgeClazz, "METADATA_KEY_WRITER"); _METADATA_KEY_WRITERReady = true; } return _METADATA_KEY_WRITERContent; } }
        private static int _METADATA_KEY_WRITERContent = default;
        private static bool _METADATA_KEY_WRITERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_XMP_LENGTH"/>
        /// </summary>
        public static int METADATA_KEY_XMP_LENGTH { get { if (!_METADATA_KEY_XMP_LENGTHReady) { _METADATA_KEY_XMP_LENGTHContent = SGetField<int>(LocalBridgeClazz, "METADATA_KEY_XMP_LENGTH"); _METADATA_KEY_XMP_LENGTHReady = true; } return _METADATA_KEY_XMP_LENGTHContent; } }
        private static int _METADATA_KEY_XMP_LENGTHContent = default;
        private static bool _METADATA_KEY_XMP_LENGTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_XMP_OFFSET"/>
        /// </summary>
        public static int METADATA_KEY_XMP_OFFSET { get { if (!_METADATA_KEY_XMP_OFFSETReady) { _METADATA_KEY_XMP_OFFSETContent = SGetField<int>(LocalBridgeClazz, "METADATA_KEY_XMP_OFFSET"); _METADATA_KEY_XMP_OFFSETReady = true; } return _METADATA_KEY_XMP_OFFSETContent; } }
        private static int _METADATA_KEY_XMP_OFFSETContent = default;
        private static bool _METADATA_KEY_XMP_OFFSETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_YEAR"/>
        /// </summary>
        public static int METADATA_KEY_YEAR { get { if (!_METADATA_KEY_YEARReady) { _METADATA_KEY_YEARContent = SGetField<int>(LocalBridgeClazz, "METADATA_KEY_YEAR"); _METADATA_KEY_YEARReady = true; } return _METADATA_KEY_YEARContent; } }
        private static int _METADATA_KEY_YEARContent = default;
        private static bool _METADATA_KEY_YEARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#OPTION_CLOSEST"/>
        /// </summary>
        public static int OPTION_CLOSEST { get { if (!_OPTION_CLOSESTReady) { _OPTION_CLOSESTContent = SGetField<int>(LocalBridgeClazz, "OPTION_CLOSEST"); _OPTION_CLOSESTReady = true; } return _OPTION_CLOSESTContent; } }
        private static int _OPTION_CLOSESTContent = default;
        private static bool _OPTION_CLOSESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#OPTION_CLOSEST_SYNC"/>
        /// </summary>
        public static int OPTION_CLOSEST_SYNC { get { if (!_OPTION_CLOSEST_SYNCReady) { _OPTION_CLOSEST_SYNCContent = SGetField<int>(LocalBridgeClazz, "OPTION_CLOSEST_SYNC"); _OPTION_CLOSEST_SYNCReady = true; } return _OPTION_CLOSEST_SYNCContent; } }
        private static int _OPTION_CLOSEST_SYNCContent = default;
        private static bool _OPTION_CLOSEST_SYNCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#OPTION_NEXT_SYNC"/>
        /// </summary>
        public static int OPTION_NEXT_SYNC { get { if (!_OPTION_NEXT_SYNCReady) { _OPTION_NEXT_SYNCContent = SGetField<int>(LocalBridgeClazz, "OPTION_NEXT_SYNC"); _OPTION_NEXT_SYNCReady = true; } return _OPTION_NEXT_SYNCContent; } }
        private static int _OPTION_NEXT_SYNCContent = default;
        private static bool _OPTION_NEXT_SYNCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#OPTION_PREVIOUS_SYNC"/>
        /// </summary>
        public static int OPTION_PREVIOUS_SYNC { get { if (!_OPTION_PREVIOUS_SYNCReady) { _OPTION_PREVIOUS_SYNCContent = SGetField<int>(LocalBridgeClazz, "OPTION_PREVIOUS_SYNC"); _OPTION_PREVIOUS_SYNCReady = true; } return _OPTION_PREVIOUS_SYNCContent; } }
        private static int _OPTION_PREVIOUS_SYNCContent = default;
        private static bool _OPTION_PREVIOUS_SYNCReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#getEmbeddedPicture()"/> 
        /// </summary>
        public byte[] EmbeddedPicture
        {
            get { return IExecuteWithSignatureArray<byte>("getEmbeddedPicture", "()[B"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#getFrameAtTime()"/> 
        /// </summary>
        public Android.Graphics.Bitmap FrameAtTime
        {
            get { return IExecuteWithSignature<Android.Graphics.Bitmap>("getFrameAtTime", "()Landroid/graphics/Bitmap;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#getPrimaryImage()"/> 
        /// </summary>
        public Android.Graphics.Bitmap PrimaryImage
        {
            get { return IExecuteWithSignature<Android.Graphics.Bitmap>("getPrimaryImage", "()Landroid/graphics/Bitmap;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#getFrameAtIndex(int,android.media.MediaMetadataRetriever.BitmapParams)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Media.MediaMetadataRetriever.BitmapParams"/></param>
        /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
        public Android.Graphics.Bitmap GetFrameAtIndex(int arg0, Android.Media.MediaMetadataRetriever.BitmapParams arg1)
        {
            return IExecute<Android.Graphics.Bitmap>("getFrameAtIndex", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#getFrameAtIndex(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
        public Android.Graphics.Bitmap GetFrameAtIndex(int arg0)
        {
            return IExecuteWithSignature<Android.Graphics.Bitmap>("getFrameAtIndex", "(I)Landroid/graphics/Bitmap;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#getFrameAtTime(long,int,android.media.MediaMetadataRetriever.BitmapParams)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Media.MediaMetadataRetriever.BitmapParams"/></param>
        /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
        public Android.Graphics.Bitmap GetFrameAtTime(long arg0, int arg1, Android.Media.MediaMetadataRetriever.BitmapParams arg2)
        {
            return IExecute<Android.Graphics.Bitmap>("getFrameAtTime", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#getFrameAtTime(long,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
        public Android.Graphics.Bitmap GetFrameAtTime(long arg0, int arg1)
        {
            return IExecute<Android.Graphics.Bitmap>("getFrameAtTime", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#getFrameAtTime(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
        public Android.Graphics.Bitmap GetFrameAtTime(long arg0)
        {
            return IExecuteWithSignature<Android.Graphics.Bitmap>("getFrameAtTime", "(J)Landroid/graphics/Bitmap;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#getImageAtIndex(int,android.media.MediaMetadataRetriever.BitmapParams)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Media.MediaMetadataRetriever.BitmapParams"/></param>
        /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
        public Android.Graphics.Bitmap GetImageAtIndex(int arg0, Android.Media.MediaMetadataRetriever.BitmapParams arg1)
        {
            return IExecute<Android.Graphics.Bitmap>("getImageAtIndex", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#getImageAtIndex(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
        public Android.Graphics.Bitmap GetImageAtIndex(int arg0)
        {
            return IExecuteWithSignature<Android.Graphics.Bitmap>("getImageAtIndex", "(I)Landroid/graphics/Bitmap;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#getPrimaryImage(android.media.MediaMetadataRetriever.BitmapParams)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaMetadataRetriever.BitmapParams"/></param>
        /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
        public Android.Graphics.Bitmap GetPrimaryImage(Android.Media.MediaMetadataRetriever.BitmapParams arg0)
        {
            return IExecuteWithSignature<Android.Graphics.Bitmap>("getPrimaryImage", "(Landroid/media/MediaMetadataRetriever$BitmapParams;)Landroid/graphics/Bitmap;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#getScaledFrameAtTime(long,int,int,int,android.media.MediaMetadataRetriever.BitmapParams)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="Android.Media.MediaMetadataRetriever.BitmapParams"/></param>
        /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
        public Android.Graphics.Bitmap GetScaledFrameAtTime(long arg0, int arg1, int arg2, int arg3, Android.Media.MediaMetadataRetriever.BitmapParams arg4)
        {
            return IExecute<Android.Graphics.Bitmap>("getScaledFrameAtTime", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#getScaledFrameAtTime(long,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
        public Android.Graphics.Bitmap GetScaledFrameAtTime(long arg0, int arg1, int arg2, int arg3)
        {
            return IExecute<Android.Graphics.Bitmap>("getScaledFrameAtTime", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#extractMetadata(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String ExtractMetadata(int arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("extractMetadata", "(I)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#getFramesAtIndex(int,int,android.media.MediaMetadataRetriever.BitmapParams)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Media.MediaMetadataRetriever.BitmapParams"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Graphics.Bitmap> GetFramesAtIndex(int arg0, int arg1, Android.Media.MediaMetadataRetriever.BitmapParams arg2)
        {
            return IExecute<Java.Util.List<Android.Graphics.Bitmap>>("getFramesAtIndex", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#getFramesAtIndex(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Graphics.Bitmap> GetFramesAtIndex(int arg0, int arg1)
        {
            return IExecute<Java.Util.List<Android.Graphics.Bitmap>>("getFramesAtIndex", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#release()"/>
        /// </summary>
        /// <exception cref="Java.Io.IOException"/>
        public void Release()
        {
            IExecuteWithSignature("release", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#close()"/>
        /// </summary>
        /// <exception cref="Java.Io.IOException"/>
        public void Close()
        {
            IExecuteWithSignature("close", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#setDataSource(android.content.Context,android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        /// <exception cref="Java.Lang.SecurityException"/>
        public void SetDataSource(Android.Content.Context arg0, Android.Net.Uri arg1)
        {
            IExecute("setDataSource", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#setDataSource(android.media.MediaDataSource)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaDataSource"/></param>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        public void SetDataSource(Android.Media.MediaDataSource arg0)
        {
            IExecuteWithSignature("setDataSource", "(Landroid/media/MediaDataSource;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#setDataSource(java.io.FileDescriptor,long,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.FileDescriptor"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        public void SetDataSource(Java.Io.FileDescriptor arg0, long arg1, long arg2)
        {
            IExecute("setDataSource", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#setDataSource(java.io.FileDescriptor)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.FileDescriptor"/></param>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        public void SetDataSource(Java.Io.FileDescriptor arg0)
        {
            IExecuteWithSignature("setDataSource", "(Ljava/io/FileDescriptor;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#setDataSource(java.lang.String,java.util.Map)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Util.Map"/></param>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        public void SetDataSource(Java.Lang.String arg0, Java.Util.Map<Java.Lang.String, Java.Lang.String> arg1)
        {
            IExecute("setDataSource", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#setDataSource(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        public void SetDataSource(Java.Lang.String arg0)
        {
            IExecuteWithSignature("setDataSource", "(Ljava/lang/String;)V", arg0);
        }

        #endregion

        #region Nested classes
        #region BitmapParams
        public partial class BitmapParams
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.BitmapParams.html#getActualConfig()"/> 
            /// </summary>
            public Android.Graphics.Bitmap.Config ActualConfig
            {
                get { return IExecuteWithSignature<Android.Graphics.Bitmap.Config>("getActualConfig", "()Landroid/graphics/Bitmap$Config;"); }
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.BitmapParams.html#getPreferredConfig()"/> <see href="https://developer.android.com/reference/android/media/MediaMetadataRetriever.BitmapParams.html#setPreferredConfig(android.graphics.Bitmap.Config)"/>
            /// </summary>
            public Android.Graphics.Bitmap.Config PreferredConfig
            {
                get { return IExecuteWithSignature<Android.Graphics.Bitmap.Config>("getPreferredConfig", "()Landroid/graphics/Bitmap$Config;"); } set { IExecuteWithSignature("setPreferredConfig", "(Landroid/graphics/Bitmap$Config;)V", value); }
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
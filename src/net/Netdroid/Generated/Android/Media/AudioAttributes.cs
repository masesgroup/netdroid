/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media
{
    #region AudioAttributes declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html"/>
    /// </summary>
    public partial class AudioAttributes : Android.Os.Parcelable
    {
        const string _bridgeClassName = "android.media.AudioAttributes";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public AudioAttributes() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public AudioAttributes(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region Builder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.Builder.html"/>
        /// </summary>
        public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
        {
            const string _bridgeClassName = "android.media.AudioAttributes$Builder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Builder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Builder(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region AudioAttributes implementation
    public partial class AudioAttributes
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html#ALLOW_CAPTURE_BY_ALL"/>
        /// </summary>
        public static int ALLOW_CAPTURE_BY_ALL { get { if (!_ALLOW_CAPTURE_BY_ALLReady) { _ALLOW_CAPTURE_BY_ALLContent = SGetField<int>(LocalBridgeClazz, "ALLOW_CAPTURE_BY_ALL"); _ALLOW_CAPTURE_BY_ALLReady = true; } return _ALLOW_CAPTURE_BY_ALLContent; } }
        private static int _ALLOW_CAPTURE_BY_ALLContent = default;
        private static bool _ALLOW_CAPTURE_BY_ALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html#ALLOW_CAPTURE_BY_NONE"/>
        /// </summary>
        public static int ALLOW_CAPTURE_BY_NONE { get { if (!_ALLOW_CAPTURE_BY_NONEReady) { _ALLOW_CAPTURE_BY_NONEContent = SGetField<int>(LocalBridgeClazz, "ALLOW_CAPTURE_BY_NONE"); _ALLOW_CAPTURE_BY_NONEReady = true; } return _ALLOW_CAPTURE_BY_NONEContent; } }
        private static int _ALLOW_CAPTURE_BY_NONEContent = default;
        private static bool _ALLOW_CAPTURE_BY_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html#ALLOW_CAPTURE_BY_SYSTEM"/>
        /// </summary>
        public static int ALLOW_CAPTURE_BY_SYSTEM { get { if (!_ALLOW_CAPTURE_BY_SYSTEMReady) { _ALLOW_CAPTURE_BY_SYSTEMContent = SGetField<int>(LocalBridgeClazz, "ALLOW_CAPTURE_BY_SYSTEM"); _ALLOW_CAPTURE_BY_SYSTEMReady = true; } return _ALLOW_CAPTURE_BY_SYSTEMContent; } }
        private static int _ALLOW_CAPTURE_BY_SYSTEMContent = default;
        private static bool _ALLOW_CAPTURE_BY_SYSTEMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html#CONTENT_TYPE_MOVIE"/>
        /// </summary>
        public static int CONTENT_TYPE_MOVIE { get { if (!_CONTENT_TYPE_MOVIEReady) { _CONTENT_TYPE_MOVIEContent = SGetField<int>(LocalBridgeClazz, "CONTENT_TYPE_MOVIE"); _CONTENT_TYPE_MOVIEReady = true; } return _CONTENT_TYPE_MOVIEContent; } }
        private static int _CONTENT_TYPE_MOVIEContent = default;
        private static bool _CONTENT_TYPE_MOVIEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html#CONTENT_TYPE_MUSIC"/>
        /// </summary>
        public static int CONTENT_TYPE_MUSIC { get { if (!_CONTENT_TYPE_MUSICReady) { _CONTENT_TYPE_MUSICContent = SGetField<int>(LocalBridgeClazz, "CONTENT_TYPE_MUSIC"); _CONTENT_TYPE_MUSICReady = true; } return _CONTENT_TYPE_MUSICContent; } }
        private static int _CONTENT_TYPE_MUSICContent = default;
        private static bool _CONTENT_TYPE_MUSICReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html#CONTENT_TYPE_SONIFICATION"/>
        /// </summary>
        public static int CONTENT_TYPE_SONIFICATION { get { if (!_CONTENT_TYPE_SONIFICATIONReady) { _CONTENT_TYPE_SONIFICATIONContent = SGetField<int>(LocalBridgeClazz, "CONTENT_TYPE_SONIFICATION"); _CONTENT_TYPE_SONIFICATIONReady = true; } return _CONTENT_TYPE_SONIFICATIONContent; } }
        private static int _CONTENT_TYPE_SONIFICATIONContent = default;
        private static bool _CONTENT_TYPE_SONIFICATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html#CONTENT_TYPE_SPEECH"/>
        /// </summary>
        public static int CONTENT_TYPE_SPEECH { get { if (!_CONTENT_TYPE_SPEECHReady) { _CONTENT_TYPE_SPEECHContent = SGetField<int>(LocalBridgeClazz, "CONTENT_TYPE_SPEECH"); _CONTENT_TYPE_SPEECHReady = true; } return _CONTENT_TYPE_SPEECHContent; } }
        private static int _CONTENT_TYPE_SPEECHContent = default;
        private static bool _CONTENT_TYPE_SPEECHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html#CONTENT_TYPE_UNKNOWN"/>
        /// </summary>
        public static int CONTENT_TYPE_UNKNOWN { get { if (!_CONTENT_TYPE_UNKNOWNReady) { _CONTENT_TYPE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "CONTENT_TYPE_UNKNOWN"); _CONTENT_TYPE_UNKNOWNReady = true; } return _CONTENT_TYPE_UNKNOWNContent; } }
        private static int _CONTENT_TYPE_UNKNOWNContent = default;
        private static bool _CONTENT_TYPE_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html#FLAG_AUDIBILITY_ENFORCED"/>
        /// </summary>
        public static int FLAG_AUDIBILITY_ENFORCED { get { if (!_FLAG_AUDIBILITY_ENFORCEDReady) { _FLAG_AUDIBILITY_ENFORCEDContent = SGetField<int>(LocalBridgeClazz, "FLAG_AUDIBILITY_ENFORCED"); _FLAG_AUDIBILITY_ENFORCEDReady = true; } return _FLAG_AUDIBILITY_ENFORCEDContent; } }
        private static int _FLAG_AUDIBILITY_ENFORCEDContent = default;
        private static bool _FLAG_AUDIBILITY_ENFORCEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html#FLAG_HW_AV_SYNC"/>
        /// </summary>
        public static int FLAG_HW_AV_SYNC { get { if (!_FLAG_HW_AV_SYNCReady) { _FLAG_HW_AV_SYNCContent = SGetField<int>(LocalBridgeClazz, "FLAG_HW_AV_SYNC"); _FLAG_HW_AV_SYNCReady = true; } return _FLAG_HW_AV_SYNCContent; } }
        private static int _FLAG_HW_AV_SYNCContent = default;
        private static bool _FLAG_HW_AV_SYNCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html#FLAG_LOW_LATENCY"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int FLAG_LOW_LATENCY { get { if (!_FLAG_LOW_LATENCYReady) { _FLAG_LOW_LATENCYContent = SGetField<int>(LocalBridgeClazz, "FLAG_LOW_LATENCY"); _FLAG_LOW_LATENCYReady = true; } return _FLAG_LOW_LATENCYContent; } }
        private static int _FLAG_LOW_LATENCYContent = default;
        private static bool _FLAG_LOW_LATENCYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html#SPATIALIZATION_BEHAVIOR_AUTO"/>
        /// </summary>
        public static int SPATIALIZATION_BEHAVIOR_AUTO { get { if (!_SPATIALIZATION_BEHAVIOR_AUTOReady) { _SPATIALIZATION_BEHAVIOR_AUTOContent = SGetField<int>(LocalBridgeClazz, "SPATIALIZATION_BEHAVIOR_AUTO"); _SPATIALIZATION_BEHAVIOR_AUTOReady = true; } return _SPATIALIZATION_BEHAVIOR_AUTOContent; } }
        private static int _SPATIALIZATION_BEHAVIOR_AUTOContent = default;
        private static bool _SPATIALIZATION_BEHAVIOR_AUTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html#SPATIALIZATION_BEHAVIOR_NEVER"/>
        /// </summary>
        public static int SPATIALIZATION_BEHAVIOR_NEVER { get { if (!_SPATIALIZATION_BEHAVIOR_NEVERReady) { _SPATIALIZATION_BEHAVIOR_NEVERContent = SGetField<int>(LocalBridgeClazz, "SPATIALIZATION_BEHAVIOR_NEVER"); _SPATIALIZATION_BEHAVIOR_NEVERReady = true; } return _SPATIALIZATION_BEHAVIOR_NEVERContent; } }
        private static int _SPATIALIZATION_BEHAVIOR_NEVERContent = default;
        private static bool _SPATIALIZATION_BEHAVIOR_NEVERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html#USAGE_ALARM"/>
        /// </summary>
        public static int USAGE_ALARM { get { if (!_USAGE_ALARMReady) { _USAGE_ALARMContent = SGetField<int>(LocalBridgeClazz, "USAGE_ALARM"); _USAGE_ALARMReady = true; } return _USAGE_ALARMContent; } }
        private static int _USAGE_ALARMContent = default;
        private static bool _USAGE_ALARMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html#USAGE_ASSISTANCE_ACCESSIBILITY"/>
        /// </summary>
        public static int USAGE_ASSISTANCE_ACCESSIBILITY { get { if (!_USAGE_ASSISTANCE_ACCESSIBILITYReady) { _USAGE_ASSISTANCE_ACCESSIBILITYContent = SGetField<int>(LocalBridgeClazz, "USAGE_ASSISTANCE_ACCESSIBILITY"); _USAGE_ASSISTANCE_ACCESSIBILITYReady = true; } return _USAGE_ASSISTANCE_ACCESSIBILITYContent; } }
        private static int _USAGE_ASSISTANCE_ACCESSIBILITYContent = default;
        private static bool _USAGE_ASSISTANCE_ACCESSIBILITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html#USAGE_ASSISTANCE_NAVIGATION_GUIDANCE"/>
        /// </summary>
        public static int USAGE_ASSISTANCE_NAVIGATION_GUIDANCE { get { if (!_USAGE_ASSISTANCE_NAVIGATION_GUIDANCEReady) { _USAGE_ASSISTANCE_NAVIGATION_GUIDANCEContent = SGetField<int>(LocalBridgeClazz, "USAGE_ASSISTANCE_NAVIGATION_GUIDANCE"); _USAGE_ASSISTANCE_NAVIGATION_GUIDANCEReady = true; } return _USAGE_ASSISTANCE_NAVIGATION_GUIDANCEContent; } }
        private static int _USAGE_ASSISTANCE_NAVIGATION_GUIDANCEContent = default;
        private static bool _USAGE_ASSISTANCE_NAVIGATION_GUIDANCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html#USAGE_ASSISTANCE_SONIFICATION"/>
        /// </summary>
        public static int USAGE_ASSISTANCE_SONIFICATION { get { if (!_USAGE_ASSISTANCE_SONIFICATIONReady) { _USAGE_ASSISTANCE_SONIFICATIONContent = SGetField<int>(LocalBridgeClazz, "USAGE_ASSISTANCE_SONIFICATION"); _USAGE_ASSISTANCE_SONIFICATIONReady = true; } return _USAGE_ASSISTANCE_SONIFICATIONContent; } }
        private static int _USAGE_ASSISTANCE_SONIFICATIONContent = default;
        private static bool _USAGE_ASSISTANCE_SONIFICATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html#USAGE_ASSISTANT"/>
        /// </summary>
        public static int USAGE_ASSISTANT { get { if (!_USAGE_ASSISTANTReady) { _USAGE_ASSISTANTContent = SGetField<int>(LocalBridgeClazz, "USAGE_ASSISTANT"); _USAGE_ASSISTANTReady = true; } return _USAGE_ASSISTANTContent; } }
        private static int _USAGE_ASSISTANTContent = default;
        private static bool _USAGE_ASSISTANTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html#USAGE_GAME"/>
        /// </summary>
        public static int USAGE_GAME { get { if (!_USAGE_GAMEReady) { _USAGE_GAMEContent = SGetField<int>(LocalBridgeClazz, "USAGE_GAME"); _USAGE_GAMEReady = true; } return _USAGE_GAMEContent; } }
        private static int _USAGE_GAMEContent = default;
        private static bool _USAGE_GAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html#USAGE_MEDIA"/>
        /// </summary>
        public static int USAGE_MEDIA { get { if (!_USAGE_MEDIAReady) { _USAGE_MEDIAContent = SGetField<int>(LocalBridgeClazz, "USAGE_MEDIA"); _USAGE_MEDIAReady = true; } return _USAGE_MEDIAContent; } }
        private static int _USAGE_MEDIAContent = default;
        private static bool _USAGE_MEDIAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html#USAGE_NOTIFICATION"/>
        /// </summary>
        public static int USAGE_NOTIFICATION { get { if (!_USAGE_NOTIFICATIONReady) { _USAGE_NOTIFICATIONContent = SGetField<int>(LocalBridgeClazz, "USAGE_NOTIFICATION"); _USAGE_NOTIFICATIONReady = true; } return _USAGE_NOTIFICATIONContent; } }
        private static int _USAGE_NOTIFICATIONContent = default;
        private static bool _USAGE_NOTIFICATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html#USAGE_NOTIFICATION_COMMUNICATION_DELAYED"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int USAGE_NOTIFICATION_COMMUNICATION_DELAYED { get { if (!_USAGE_NOTIFICATION_COMMUNICATION_DELAYEDReady) { _USAGE_NOTIFICATION_COMMUNICATION_DELAYEDContent = SGetField<int>(LocalBridgeClazz, "USAGE_NOTIFICATION_COMMUNICATION_DELAYED"); _USAGE_NOTIFICATION_COMMUNICATION_DELAYEDReady = true; } return _USAGE_NOTIFICATION_COMMUNICATION_DELAYEDContent; } }
        private static int _USAGE_NOTIFICATION_COMMUNICATION_DELAYEDContent = default;
        private static bool _USAGE_NOTIFICATION_COMMUNICATION_DELAYEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html#USAGE_NOTIFICATION_COMMUNICATION_INSTANT"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int USAGE_NOTIFICATION_COMMUNICATION_INSTANT { get { if (!_USAGE_NOTIFICATION_COMMUNICATION_INSTANTReady) { _USAGE_NOTIFICATION_COMMUNICATION_INSTANTContent = SGetField<int>(LocalBridgeClazz, "USAGE_NOTIFICATION_COMMUNICATION_INSTANT"); _USAGE_NOTIFICATION_COMMUNICATION_INSTANTReady = true; } return _USAGE_NOTIFICATION_COMMUNICATION_INSTANTContent; } }
        private static int _USAGE_NOTIFICATION_COMMUNICATION_INSTANTContent = default;
        private static bool _USAGE_NOTIFICATION_COMMUNICATION_INSTANTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html#USAGE_NOTIFICATION_COMMUNICATION_REQUEST"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int USAGE_NOTIFICATION_COMMUNICATION_REQUEST { get { if (!_USAGE_NOTIFICATION_COMMUNICATION_REQUESTReady) { _USAGE_NOTIFICATION_COMMUNICATION_REQUESTContent = SGetField<int>(LocalBridgeClazz, "USAGE_NOTIFICATION_COMMUNICATION_REQUEST"); _USAGE_NOTIFICATION_COMMUNICATION_REQUESTReady = true; } return _USAGE_NOTIFICATION_COMMUNICATION_REQUESTContent; } }
        private static int _USAGE_NOTIFICATION_COMMUNICATION_REQUESTContent = default;
        private static bool _USAGE_NOTIFICATION_COMMUNICATION_REQUESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html#USAGE_NOTIFICATION_EVENT"/>
        /// </summary>
        public static int USAGE_NOTIFICATION_EVENT { get { if (!_USAGE_NOTIFICATION_EVENTReady) { _USAGE_NOTIFICATION_EVENTContent = SGetField<int>(LocalBridgeClazz, "USAGE_NOTIFICATION_EVENT"); _USAGE_NOTIFICATION_EVENTReady = true; } return _USAGE_NOTIFICATION_EVENTContent; } }
        private static int _USAGE_NOTIFICATION_EVENTContent = default;
        private static bool _USAGE_NOTIFICATION_EVENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html#USAGE_NOTIFICATION_RINGTONE"/>
        /// </summary>
        public static int USAGE_NOTIFICATION_RINGTONE { get { if (!_USAGE_NOTIFICATION_RINGTONEReady) { _USAGE_NOTIFICATION_RINGTONEContent = SGetField<int>(LocalBridgeClazz, "USAGE_NOTIFICATION_RINGTONE"); _USAGE_NOTIFICATION_RINGTONEReady = true; } return _USAGE_NOTIFICATION_RINGTONEContent; } }
        private static int _USAGE_NOTIFICATION_RINGTONEContent = default;
        private static bool _USAGE_NOTIFICATION_RINGTONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html#USAGE_UNKNOWN"/>
        /// </summary>
        public static int USAGE_UNKNOWN { get { if (!_USAGE_UNKNOWNReady) { _USAGE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "USAGE_UNKNOWN"); _USAGE_UNKNOWNReady = true; } return _USAGE_UNKNOWNContent; } }
        private static int _USAGE_UNKNOWNContent = default;
        private static bool _USAGE_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html#USAGE_VOICE_COMMUNICATION"/>
        /// </summary>
        public static int USAGE_VOICE_COMMUNICATION { get { if (!_USAGE_VOICE_COMMUNICATIONReady) { _USAGE_VOICE_COMMUNICATIONContent = SGetField<int>(LocalBridgeClazz, "USAGE_VOICE_COMMUNICATION"); _USAGE_VOICE_COMMUNICATIONReady = true; } return _USAGE_VOICE_COMMUNICATIONContent; } }
        private static int _USAGE_VOICE_COMMUNICATIONContent = default;
        private static bool _USAGE_VOICE_COMMUNICATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html#USAGE_VOICE_COMMUNICATION_SIGNALLING"/>
        /// </summary>
        public static int USAGE_VOICE_COMMUNICATION_SIGNALLING { get { if (!_USAGE_VOICE_COMMUNICATION_SIGNALLINGReady) { _USAGE_VOICE_COMMUNICATION_SIGNALLINGContent = SGetField<int>(LocalBridgeClazz, "USAGE_VOICE_COMMUNICATION_SIGNALLING"); _USAGE_VOICE_COMMUNICATION_SIGNALLINGReady = true; } return _USAGE_VOICE_COMMUNICATION_SIGNALLINGContent; } }
        private static int _USAGE_VOICE_COMMUNICATION_SIGNALLINGContent = default;
        private static bool _USAGE_VOICE_COMMUNICATION_SIGNALLINGReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html#areHapticChannelsMuted()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool AreHapticChannelsMuted()
        {
            return IExecuteWithSignature<bool>("areHapticChannelsMuted", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html#isContentSpatialized()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsContentSpatialized()
        {
            return IExecuteWithSignature<bool>("isContentSpatialized", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html#getAllowedCapturePolicy()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetAllowedCapturePolicy()
        {
            return IExecuteWithSignature<int>("getAllowedCapturePolicy", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html#getContentType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetContentType()
        {
            return IExecuteWithSignature<int>("getContentType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html#getFlags()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetFlags()
        {
            return IExecuteWithSignature<int>("getFlags", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html#getSpatializationBehavior()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetSpatializationBehavior()
        {
            return IExecuteWithSignature<int>("getSpatializationBehavior", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html#getUsage()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetUsage()
        {
            return IExecuteWithSignature<int>("getUsage", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html#getVolumeControlStream()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetVolumeControlStream()
        {
            return IExecuteWithSignature<int>("getVolumeControlStream", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecute("writeToParcel", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region Builder implementation
        public partial class Builder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.Builder.html#%3Cinit%3E(android.media.AudioAttributes)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.AudioAttributes"/></param>
            public Builder(Android.Media.AudioAttributes arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Media.AudioAttributes"/></returns>
            public Android.Media.AudioAttributes Build()
            {
                return IExecuteWithSignature<Android.Media.AudioAttributes>("build", "()Landroid/media/AudioAttributes;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.Builder.html#setAllowedCapturePolicy(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.AudioAttributes.Builder"/></returns>
            public Android.Media.AudioAttributes.Builder SetAllowedCapturePolicy(int arg0)
            {
                return IExecuteWithSignature<Android.Media.AudioAttributes.Builder>("setAllowedCapturePolicy", "(I)Landroid/media/AudioAttributes$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.Builder.html#setContentType(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.AudioAttributes.Builder"/></returns>
            public Android.Media.AudioAttributes.Builder SetContentType(int arg0)
            {
                return IExecuteWithSignature<Android.Media.AudioAttributes.Builder>("setContentType", "(I)Landroid/media/AudioAttributes$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.Builder.html#setFlags(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.AudioAttributes.Builder"/></returns>
            public Android.Media.AudioAttributes.Builder SetFlags(int arg0)
            {
                return IExecuteWithSignature<Android.Media.AudioAttributes.Builder>("setFlags", "(I)Landroid/media/AudioAttributes$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.Builder.html#setHapticChannelsMuted(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Media.AudioAttributes.Builder"/></returns>
            public Android.Media.AudioAttributes.Builder SetHapticChannelsMuted(bool arg0)
            {
                return IExecuteWithSignature<Android.Media.AudioAttributes.Builder>("setHapticChannelsMuted", "(Z)Landroid/media/AudioAttributes$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.Builder.html#setIsContentSpatialized(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Media.AudioAttributes.Builder"/></returns>
            public Android.Media.AudioAttributes.Builder SetIsContentSpatialized(bool arg0)
            {
                return IExecuteWithSignature<Android.Media.AudioAttributes.Builder>("setIsContentSpatialized", "(Z)Landroid/media/AudioAttributes$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.Builder.html#setLegacyStreamType(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.AudioAttributes.Builder"/></returns>
            public Android.Media.AudioAttributes.Builder SetLegacyStreamType(int arg0)
            {
                return IExecuteWithSignature<Android.Media.AudioAttributes.Builder>("setLegacyStreamType", "(I)Landroid/media/AudioAttributes$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.Builder.html#setSpatializationBehavior(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.AudioAttributes.Builder"/></returns>
            public Android.Media.AudioAttributes.Builder SetSpatializationBehavior(int arg0)
            {
                return IExecuteWithSignature<Android.Media.AudioAttributes.Builder>("setSpatializationBehavior", "(I)Landroid/media/AudioAttributes$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioAttributes.Builder.html#setUsage(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.AudioAttributes.Builder"/></returns>
            public Android.Media.AudioAttributes.Builder SetUsage(int arg0)
            {
                return IExecuteWithSignature<Android.Media.AudioAttributes.Builder>("setUsage", "(I)Landroid/media/AudioAttributes$Builder;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
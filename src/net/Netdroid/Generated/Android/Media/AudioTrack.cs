/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media
{
    #region AudioTrack declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html"/>
    /// </summary>
    public partial class AudioTrack : MASES.JCOBridge.C2JBridge.JVMBridgeBase<AudioTrack>
    {
        const string _bridgeClassName = "android.media.AudioTrack";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public AudioTrack() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public AudioTrack(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region Builder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.Builder.html"/>
        /// </summary>
        public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
        {
            const string _bridgeClassName = "android.media.AudioTrack$Builder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Builder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Builder(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region MetricsConstants declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.MetricsConstants.html"/>
        /// </summary>
        public partial class MetricsConstants : MASES.JCOBridge.C2JBridge.JVMBridgeBase<MetricsConstants>
        {
            const string _bridgeClassName = "android.media.AudioTrack$MetricsConstants";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public MetricsConstants() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public MetricsConstants(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region OnCodecFormatChangedListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.OnCodecFormatChangedListener.html"/>
        /// </summary>
        public partial class OnCodecFormatChangedListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnCodecFormatChangedListener() { InitializeHandlers(); }

            const string _bridgeClassName = "org.mases.netdroid.generated.android.media.AudioTrack_OnCodecFormatChangedListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

        
            // TODO: complete the class

        }
        #endregion

        #region OnCodecFormatChangedListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="OnCodecFormatChangedListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnCodecFormatChangedListenerDirect : OnCodecFormatChangedListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;

            /// <inheritdoc />
            protected override void InitializeHandlers() { }

            const string _bridgeClassName = "android.media.AudioTrack$OnCodecFormatChangedListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region OnPlaybackPositionUpdateListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.OnPlaybackPositionUpdateListener.html"/>
        /// </summary>
        public partial class OnPlaybackPositionUpdateListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnPlaybackPositionUpdateListener() { InitializeHandlers(); }

            const string _bridgeClassName = "org.mases.netdroid.generated.android.media.AudioTrack_OnPlaybackPositionUpdateListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

        
            // TODO: complete the class

        }
        #endregion

        #region OnPlaybackPositionUpdateListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="OnPlaybackPositionUpdateListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnPlaybackPositionUpdateListenerDirect : OnPlaybackPositionUpdateListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;

            /// <inheritdoc />
            protected override void InitializeHandlers() { }

            const string _bridgeClassName = "android.media.AudioTrack$OnPlaybackPositionUpdateListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region OnRoutingChangedListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.OnRoutingChangedListener.html"/>
        /// </summary>
        [global::System.Obsolete()]
        public partial class OnRoutingChangedListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnRoutingChangedListener() { InitializeHandlers(); }

            const string _bridgeClassName = "org.mases.netdroid.generated.android.media.AudioTrack_OnRoutingChangedListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

        
            // TODO: complete the class

        }
        #endregion

        #region OnRoutingChangedListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="OnRoutingChangedListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnRoutingChangedListenerDirect : OnRoutingChangedListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;

            /// <inheritdoc />
            protected override void InitializeHandlers() { }

            const string _bridgeClassName = "android.media.AudioTrack$OnRoutingChangedListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region StreamEventCallback declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.StreamEventCallback.html"/>
        /// </summary>
        public partial class StreamEventCallback : MASES.JCOBridge.C2JBridge.JVMBridgeBase<StreamEventCallback>
        {
            const string _bridgeClassName = "android.media.AudioTrack$StreamEventCallback";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("StreamEventCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public StreamEventCallback() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("StreamEventCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public StreamEventCallback(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region AudioTrack implementation
    public partial class AudioTrack : Android.Media.IAudioRouting, Android.Media.IVolumeAutomation
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#%3Cinit%3E(android.media.AudioAttributes,android.media.AudioFormat,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioAttributes"/></param>
        /// <param name="arg1"><see cref="Android.Media.AudioFormat"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        public AudioTrack(Android.Media.AudioAttributes arg0, Android.Media.AudioFormat arg1, int arg2, int arg3, int arg4)
            : base(arg0, arg1, arg2, arg3, arg4)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#%3Cinit%3E(int,int,int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        [global::System.Obsolete()]
        public AudioTrack(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6)
            : base(arg0, arg1, arg2, arg3, arg4, arg5, arg6)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#%3Cinit%3E(int,int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        [global::System.Obsolete()]
        public AudioTrack(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5)
            : base(arg0, arg1, arg2, arg3, arg4, arg5)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Android.Media.AudioTrack"/> to <see cref="Android.Media.AudioRouting"/>
        /// </summary>
        public static implicit operator Android.Media.AudioRouting(Android.Media.AudioTrack t) => t.Cast<Android.Media.AudioRouting>();
        /// <summary>
        /// Converter from <see cref="Android.Media.AudioTrack"/> to <see cref="Android.Media.VolumeAutomation"/>
        /// </summary>
        public static implicit operator Android.Media.VolumeAutomation(Android.Media.AudioTrack t) => t.Cast<Android.Media.VolumeAutomation>();

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#DUAL_MONO_MODE_LL"/>
        /// </summary>
        public static int DUAL_MONO_MODE_LL { get { if (!_DUAL_MONO_MODE_LLReady) { _DUAL_MONO_MODE_LLContent = SGetField<int>(LocalBridgeClazz, "DUAL_MONO_MODE_LL"); _DUAL_MONO_MODE_LLReady = true; } return _DUAL_MONO_MODE_LLContent; } }
        private static int _DUAL_MONO_MODE_LLContent = default;
        private static bool _DUAL_MONO_MODE_LLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#DUAL_MONO_MODE_LR"/>
        /// </summary>
        public static int DUAL_MONO_MODE_LR { get { if (!_DUAL_MONO_MODE_LRReady) { _DUAL_MONO_MODE_LRContent = SGetField<int>(LocalBridgeClazz, "DUAL_MONO_MODE_LR"); _DUAL_MONO_MODE_LRReady = true; } return _DUAL_MONO_MODE_LRContent; } }
        private static int _DUAL_MONO_MODE_LRContent = default;
        private static bool _DUAL_MONO_MODE_LRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#DUAL_MONO_MODE_OFF"/>
        /// </summary>
        public static int DUAL_MONO_MODE_OFF { get { if (!_DUAL_MONO_MODE_OFFReady) { _DUAL_MONO_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "DUAL_MONO_MODE_OFF"); _DUAL_MONO_MODE_OFFReady = true; } return _DUAL_MONO_MODE_OFFContent; } }
        private static int _DUAL_MONO_MODE_OFFContent = default;
        private static bool _DUAL_MONO_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#DUAL_MONO_MODE_RR"/>
        /// </summary>
        public static int DUAL_MONO_MODE_RR { get { if (!_DUAL_MONO_MODE_RRReady) { _DUAL_MONO_MODE_RRContent = SGetField<int>(LocalBridgeClazz, "DUAL_MONO_MODE_RR"); _DUAL_MONO_MODE_RRReady = true; } return _DUAL_MONO_MODE_RRContent; } }
        private static int _DUAL_MONO_MODE_RRContent = default;
        private static bool _DUAL_MONO_MODE_RRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#ENCAPSULATION_METADATA_TYPE_DVB_AD_DESCRIPTOR"/>
        /// </summary>
        public static int ENCAPSULATION_METADATA_TYPE_DVB_AD_DESCRIPTOR { get { if (!_ENCAPSULATION_METADATA_TYPE_DVB_AD_DESCRIPTORReady) { _ENCAPSULATION_METADATA_TYPE_DVB_AD_DESCRIPTORContent = SGetField<int>(LocalBridgeClazz, "ENCAPSULATION_METADATA_TYPE_DVB_AD_DESCRIPTOR"); _ENCAPSULATION_METADATA_TYPE_DVB_AD_DESCRIPTORReady = true; } return _ENCAPSULATION_METADATA_TYPE_DVB_AD_DESCRIPTORContent; } }
        private static int _ENCAPSULATION_METADATA_TYPE_DVB_AD_DESCRIPTORContent = default;
        private static bool _ENCAPSULATION_METADATA_TYPE_DVB_AD_DESCRIPTORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#ENCAPSULATION_METADATA_TYPE_FRAMEWORK_TUNER"/>
        /// </summary>
        public static int ENCAPSULATION_METADATA_TYPE_FRAMEWORK_TUNER { get { if (!_ENCAPSULATION_METADATA_TYPE_FRAMEWORK_TUNERReady) { _ENCAPSULATION_METADATA_TYPE_FRAMEWORK_TUNERContent = SGetField<int>(LocalBridgeClazz, "ENCAPSULATION_METADATA_TYPE_FRAMEWORK_TUNER"); _ENCAPSULATION_METADATA_TYPE_FRAMEWORK_TUNERReady = true; } return _ENCAPSULATION_METADATA_TYPE_FRAMEWORK_TUNERContent; } }
        private static int _ENCAPSULATION_METADATA_TYPE_FRAMEWORK_TUNERContent = default;
        private static bool _ENCAPSULATION_METADATA_TYPE_FRAMEWORK_TUNERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#ENCAPSULATION_METADATA_TYPE_SUPPLEMENTARY_AUDIO_PLACEMENT"/>
        /// </summary>
        public static int ENCAPSULATION_METADATA_TYPE_SUPPLEMENTARY_AUDIO_PLACEMENT { get { if (!_ENCAPSULATION_METADATA_TYPE_SUPPLEMENTARY_AUDIO_PLACEMENTReady) { _ENCAPSULATION_METADATA_TYPE_SUPPLEMENTARY_AUDIO_PLACEMENTContent = SGetField<int>(LocalBridgeClazz, "ENCAPSULATION_METADATA_TYPE_SUPPLEMENTARY_AUDIO_PLACEMENT"); _ENCAPSULATION_METADATA_TYPE_SUPPLEMENTARY_AUDIO_PLACEMENTReady = true; } return _ENCAPSULATION_METADATA_TYPE_SUPPLEMENTARY_AUDIO_PLACEMENTContent; } }
        private static int _ENCAPSULATION_METADATA_TYPE_SUPPLEMENTARY_AUDIO_PLACEMENTContent = default;
        private static bool _ENCAPSULATION_METADATA_TYPE_SUPPLEMENTARY_AUDIO_PLACEMENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#ENCAPSULATION_MODE_ELEMENTARY_STREAM"/>
        /// </summary>
        public static int ENCAPSULATION_MODE_ELEMENTARY_STREAM { get { if (!_ENCAPSULATION_MODE_ELEMENTARY_STREAMReady) { _ENCAPSULATION_MODE_ELEMENTARY_STREAMContent = SGetField<int>(LocalBridgeClazz, "ENCAPSULATION_MODE_ELEMENTARY_STREAM"); _ENCAPSULATION_MODE_ELEMENTARY_STREAMReady = true; } return _ENCAPSULATION_MODE_ELEMENTARY_STREAMContent; } }
        private static int _ENCAPSULATION_MODE_ELEMENTARY_STREAMContent = default;
        private static bool _ENCAPSULATION_MODE_ELEMENTARY_STREAMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#ENCAPSULATION_MODE_NONE"/>
        /// </summary>
        public static int ENCAPSULATION_MODE_NONE { get { if (!_ENCAPSULATION_MODE_NONEReady) { _ENCAPSULATION_MODE_NONEContent = SGetField<int>(LocalBridgeClazz, "ENCAPSULATION_MODE_NONE"); _ENCAPSULATION_MODE_NONEReady = true; } return _ENCAPSULATION_MODE_NONEContent; } }
        private static int _ENCAPSULATION_MODE_NONEContent = default;
        private static bool _ENCAPSULATION_MODE_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#ERROR"/>
        /// </summary>
        public static int ERROR { get { if (!_ERRORReady) { _ERRORContent = SGetField<int>(LocalBridgeClazz, "ERROR"); _ERRORReady = true; } return _ERRORContent; } }
        private static int _ERRORContent = default;
        private static bool _ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#ERROR_BAD_VALUE"/>
        /// </summary>
        public static int ERROR_BAD_VALUE { get { if (!_ERROR_BAD_VALUEReady) { _ERROR_BAD_VALUEContent = SGetField<int>(LocalBridgeClazz, "ERROR_BAD_VALUE"); _ERROR_BAD_VALUEReady = true; } return _ERROR_BAD_VALUEContent; } }
        private static int _ERROR_BAD_VALUEContent = default;
        private static bool _ERROR_BAD_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#ERROR_DEAD_OBJECT"/>
        /// </summary>
        public static int ERROR_DEAD_OBJECT { get { if (!_ERROR_DEAD_OBJECTReady) { _ERROR_DEAD_OBJECTContent = SGetField<int>(LocalBridgeClazz, "ERROR_DEAD_OBJECT"); _ERROR_DEAD_OBJECTReady = true; } return _ERROR_DEAD_OBJECTContent; } }
        private static int _ERROR_DEAD_OBJECTContent = default;
        private static bool _ERROR_DEAD_OBJECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#ERROR_INVALID_OPERATION"/>
        /// </summary>
        public static int ERROR_INVALID_OPERATION { get { if (!_ERROR_INVALID_OPERATIONReady) { _ERROR_INVALID_OPERATIONContent = SGetField<int>(LocalBridgeClazz, "ERROR_INVALID_OPERATION"); _ERROR_INVALID_OPERATIONReady = true; } return _ERROR_INVALID_OPERATIONContent; } }
        private static int _ERROR_INVALID_OPERATIONContent = default;
        private static bool _ERROR_INVALID_OPERATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#MODE_STATIC"/>
        /// </summary>
        public static int MODE_STATIC { get { if (!_MODE_STATICReady) { _MODE_STATICContent = SGetField<int>(LocalBridgeClazz, "MODE_STATIC"); _MODE_STATICReady = true; } return _MODE_STATICContent; } }
        private static int _MODE_STATICContent = default;
        private static bool _MODE_STATICReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#MODE_STREAM"/>
        /// </summary>
        public static int MODE_STREAM { get { if (!_MODE_STREAMReady) { _MODE_STREAMContent = SGetField<int>(LocalBridgeClazz, "MODE_STREAM"); _MODE_STREAMReady = true; } return _MODE_STREAMContent; } }
        private static int _MODE_STREAMContent = default;
        private static bool _MODE_STREAMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#PERFORMANCE_MODE_LOW_LATENCY"/>
        /// </summary>
        public static int PERFORMANCE_MODE_LOW_LATENCY { get { if (!_PERFORMANCE_MODE_LOW_LATENCYReady) { _PERFORMANCE_MODE_LOW_LATENCYContent = SGetField<int>(LocalBridgeClazz, "PERFORMANCE_MODE_LOW_LATENCY"); _PERFORMANCE_MODE_LOW_LATENCYReady = true; } return _PERFORMANCE_MODE_LOW_LATENCYContent; } }
        private static int _PERFORMANCE_MODE_LOW_LATENCYContent = default;
        private static bool _PERFORMANCE_MODE_LOW_LATENCYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#PERFORMANCE_MODE_NONE"/>
        /// </summary>
        public static int PERFORMANCE_MODE_NONE { get { if (!_PERFORMANCE_MODE_NONEReady) { _PERFORMANCE_MODE_NONEContent = SGetField<int>(LocalBridgeClazz, "PERFORMANCE_MODE_NONE"); _PERFORMANCE_MODE_NONEReady = true; } return _PERFORMANCE_MODE_NONEContent; } }
        private static int _PERFORMANCE_MODE_NONEContent = default;
        private static bool _PERFORMANCE_MODE_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#PERFORMANCE_MODE_POWER_SAVING"/>
        /// </summary>
        public static int PERFORMANCE_MODE_POWER_SAVING { get { if (!_PERFORMANCE_MODE_POWER_SAVINGReady) { _PERFORMANCE_MODE_POWER_SAVINGContent = SGetField<int>(LocalBridgeClazz, "PERFORMANCE_MODE_POWER_SAVING"); _PERFORMANCE_MODE_POWER_SAVINGReady = true; } return _PERFORMANCE_MODE_POWER_SAVINGContent; } }
        private static int _PERFORMANCE_MODE_POWER_SAVINGContent = default;
        private static bool _PERFORMANCE_MODE_POWER_SAVINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#PLAYSTATE_PAUSED"/>
        /// </summary>
        public static int PLAYSTATE_PAUSED { get { if (!_PLAYSTATE_PAUSEDReady) { _PLAYSTATE_PAUSEDContent = SGetField<int>(LocalBridgeClazz, "PLAYSTATE_PAUSED"); _PLAYSTATE_PAUSEDReady = true; } return _PLAYSTATE_PAUSEDContent; } }
        private static int _PLAYSTATE_PAUSEDContent = default;
        private static bool _PLAYSTATE_PAUSEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#PLAYSTATE_PLAYING"/>
        /// </summary>
        public static int PLAYSTATE_PLAYING { get { if (!_PLAYSTATE_PLAYINGReady) { _PLAYSTATE_PLAYINGContent = SGetField<int>(LocalBridgeClazz, "PLAYSTATE_PLAYING"); _PLAYSTATE_PLAYINGReady = true; } return _PLAYSTATE_PLAYINGContent; } }
        private static int _PLAYSTATE_PLAYINGContent = default;
        private static bool _PLAYSTATE_PLAYINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#PLAYSTATE_STOPPED"/>
        /// </summary>
        public static int PLAYSTATE_STOPPED { get { if (!_PLAYSTATE_STOPPEDReady) { _PLAYSTATE_STOPPEDContent = SGetField<int>(LocalBridgeClazz, "PLAYSTATE_STOPPED"); _PLAYSTATE_STOPPEDReady = true; } return _PLAYSTATE_STOPPEDContent; } }
        private static int _PLAYSTATE_STOPPEDContent = default;
        private static bool _PLAYSTATE_STOPPEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#STATE_INITIALIZED"/>
        /// </summary>
        public static int STATE_INITIALIZED { get { if (!_STATE_INITIALIZEDReady) { _STATE_INITIALIZEDContent = SGetField<int>(LocalBridgeClazz, "STATE_INITIALIZED"); _STATE_INITIALIZEDReady = true; } return _STATE_INITIALIZEDContent; } }
        private static int _STATE_INITIALIZEDContent = default;
        private static bool _STATE_INITIALIZEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#STATE_NO_STATIC_DATA"/>
        /// </summary>
        public static int STATE_NO_STATIC_DATA { get { if (!_STATE_NO_STATIC_DATAReady) { _STATE_NO_STATIC_DATAContent = SGetField<int>(LocalBridgeClazz, "STATE_NO_STATIC_DATA"); _STATE_NO_STATIC_DATAReady = true; } return _STATE_NO_STATIC_DATAContent; } }
        private static int _STATE_NO_STATIC_DATAContent = default;
        private static bool _STATE_NO_STATIC_DATAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#STATE_UNINITIALIZED"/>
        /// </summary>
        public static int STATE_UNINITIALIZED { get { if (!_STATE_UNINITIALIZEDReady) { _STATE_UNINITIALIZEDContent = SGetField<int>(LocalBridgeClazz, "STATE_UNINITIALIZED"); _STATE_UNINITIALIZEDReady = true; } return _STATE_UNINITIALIZEDContent; } }
        private static int _STATE_UNINITIALIZEDContent = default;
        private static bool _STATE_UNINITIALIZEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#SUCCESS"/>
        /// </summary>
        public static int SUCCESS { get { if (!_SUCCESSReady) { _SUCCESSContent = SGetField<int>(LocalBridgeClazz, "SUCCESS"); _SUCCESSReady = true; } return _SUCCESSContent; } }
        private static int _SUCCESSContent = default;
        private static bool _SUCCESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#SUPPLEMENTARY_AUDIO_PLACEMENT_LEFT"/>
        /// </summary>
        public static int SUPPLEMENTARY_AUDIO_PLACEMENT_LEFT { get { if (!_SUPPLEMENTARY_AUDIO_PLACEMENT_LEFTReady) { _SUPPLEMENTARY_AUDIO_PLACEMENT_LEFTContent = SGetField<int>(LocalBridgeClazz, "SUPPLEMENTARY_AUDIO_PLACEMENT_LEFT"); _SUPPLEMENTARY_AUDIO_PLACEMENT_LEFTReady = true; } return _SUPPLEMENTARY_AUDIO_PLACEMENT_LEFTContent; } }
        private static int _SUPPLEMENTARY_AUDIO_PLACEMENT_LEFTContent = default;
        private static bool _SUPPLEMENTARY_AUDIO_PLACEMENT_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#SUPPLEMENTARY_AUDIO_PLACEMENT_NORMAL"/>
        /// </summary>
        public static int SUPPLEMENTARY_AUDIO_PLACEMENT_NORMAL { get { if (!_SUPPLEMENTARY_AUDIO_PLACEMENT_NORMALReady) { _SUPPLEMENTARY_AUDIO_PLACEMENT_NORMALContent = SGetField<int>(LocalBridgeClazz, "SUPPLEMENTARY_AUDIO_PLACEMENT_NORMAL"); _SUPPLEMENTARY_AUDIO_PLACEMENT_NORMALReady = true; } return _SUPPLEMENTARY_AUDIO_PLACEMENT_NORMALContent; } }
        private static int _SUPPLEMENTARY_AUDIO_PLACEMENT_NORMALContent = default;
        private static bool _SUPPLEMENTARY_AUDIO_PLACEMENT_NORMALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#SUPPLEMENTARY_AUDIO_PLACEMENT_RIGHT"/>
        /// </summary>
        public static int SUPPLEMENTARY_AUDIO_PLACEMENT_RIGHT { get { if (!_SUPPLEMENTARY_AUDIO_PLACEMENT_RIGHTReady) { _SUPPLEMENTARY_AUDIO_PLACEMENT_RIGHTContent = SGetField<int>(LocalBridgeClazz, "SUPPLEMENTARY_AUDIO_PLACEMENT_RIGHT"); _SUPPLEMENTARY_AUDIO_PLACEMENT_RIGHTReady = true; } return _SUPPLEMENTARY_AUDIO_PLACEMENT_RIGHTContent; } }
        private static int _SUPPLEMENTARY_AUDIO_PLACEMENT_RIGHTContent = default;
        private static bool _SUPPLEMENTARY_AUDIO_PLACEMENT_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#WRITE_BLOCKING"/>
        /// </summary>
        public static int WRITE_BLOCKING { get { if (!_WRITE_BLOCKINGReady) { _WRITE_BLOCKINGContent = SGetField<int>(LocalBridgeClazz, "WRITE_BLOCKING"); _WRITE_BLOCKINGReady = true; } return _WRITE_BLOCKINGContent; } }
        private static int _WRITE_BLOCKINGContent = default;
        private static bool _WRITE_BLOCKINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#WRITE_NON_BLOCKING"/>
        /// </summary>
        public static int WRITE_NON_BLOCKING { get { if (!_WRITE_NON_BLOCKINGReady) { _WRITE_NON_BLOCKINGContent = SGetField<int>(LocalBridgeClazz, "WRITE_NON_BLOCKING"); _WRITE_NON_BLOCKINGReady = true; } return _WRITE_NON_BLOCKINGContent; } }
        private static int _WRITE_NON_BLOCKINGContent = default;
        private static bool _WRITE_NON_BLOCKINGReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#isDirectPlaybackSupported(android.media.AudioFormat,android.media.AudioAttributes)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioFormat"/></param>
        /// <param name="arg1"><see cref="Android.Media.AudioAttributes"/></param>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public static bool IsDirectPlaybackSupported(Android.Media.AudioFormat arg0, Android.Media.AudioAttributes arg1)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isDirectPlaybackSupported", "(Landroid/media/AudioFormat;Landroid/media/AudioAttributes;)Z", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#getMaxVolume()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public static float GetMaxVolume()
        {
            return SExecuteWithSignature<float>(LocalBridgeClazz, "getMaxVolume", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#getMinVolume()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public static float GetMinVolume()
        {
            return SExecuteWithSignature<float>(LocalBridgeClazz, "getMinVolume", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#getMinBufferSize(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GetMinBufferSize(int arg0, int arg1, int arg2)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "getMinBufferSize", "(III)I", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#getNativeOutputSampleRate(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GetNativeOutputSampleRate(int arg0)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "getNativeOutputSampleRate", "(I)I", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#getAudioAttributes()"/>
        /// </summary>
        /// <returns><see cref="Android.Media.AudioAttributes"/></returns>
        public Android.Media.AudioAttributes GetAudioAttributes()
        {
            return IExecuteWithSignature<Android.Media.AudioAttributes>("getAudioAttributes", "()Landroid/media/AudioAttributes;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#getPreferredDevice()"/>
        /// </summary>
        /// <returns><see cref="Android.Media.AudioDeviceInfo"/></returns>
        public Android.Media.AudioDeviceInfo GetPreferredDevice()
        {
            return IExecuteWithSignature<Android.Media.AudioDeviceInfo>("getPreferredDevice", "()Landroid/media/AudioDeviceInfo;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#getRoutedDevice()"/>
        /// </summary>
        /// <returns><see cref="Android.Media.AudioDeviceInfo"/></returns>
        public Android.Media.AudioDeviceInfo GetRoutedDevice()
        {
            return IExecuteWithSignature<Android.Media.AudioDeviceInfo>("getRoutedDevice", "()Landroid/media/AudioDeviceInfo;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#getFormat()"/>
        /// </summary>
        /// <returns><see cref="Android.Media.AudioFormat"/></returns>
        public Android.Media.AudioFormat GetFormat()
        {
            return IExecuteWithSignature<Android.Media.AudioFormat>("getFormat", "()Landroid/media/AudioFormat;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#getLogSessionId()"/>
        /// </summary>
        /// <returns><see cref="Android.Media.Metrics.LogSessionId"/></returns>
        public Android.Media.Metrics.LogSessionId GetLogSessionId()
        {
            return IExecuteWithSignature<Android.Media.Metrics.LogSessionId>("getLogSessionId", "()Landroid/media/metrics/LogSessionId;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#getPlaybackParams()"/>
        /// </summary>
        /// <returns><see cref="Android.Media.PlaybackParams"/></returns>
        public Android.Media.PlaybackParams GetPlaybackParams()
        {
            return IExecuteWithSignature<Android.Media.PlaybackParams>("getPlaybackParams", "()Landroid/media/PlaybackParams;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#createVolumeShaper(android.media.VolumeShaper.Configuration)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.VolumeShaper.Configuration"/></param>
        /// <returns><see cref="Android.Media.VolumeShaper"/></returns>
        public Android.Media.VolumeShaper CreateVolumeShaper(Android.Media.VolumeShaper.Configuration arg0)
        {
            return IExecuteWithSignature<Android.Media.VolumeShaper>("createVolumeShaper", "(Landroid/media/VolumeShaper$Configuration;)Landroid/media/VolumeShaper;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#getMetrics()"/>
        /// </summary>
        /// <returns><see cref="Android.Os.PersistableBundle"/></returns>
        public Android.Os.PersistableBundle GetMetrics()
        {
            return IExecuteWithSignature<Android.Os.PersistableBundle>("getMetrics", "()Landroid/os/PersistableBundle;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#getTimestamp(android.media.AudioTimestamp)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioTimestamp"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool GetTimestamp(Android.Media.AudioTimestamp arg0)
        {
            return IExecuteWithSignature<bool>("getTimestamp", "(Landroid/media/AudioTimestamp;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#isOffloadedPlayback()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsOffloadedPlayback()
        {
            return IExecuteWithSignature<bool>("isOffloadedPlayback", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#setAudioDescriptionMixLeveldB(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetAudioDescriptionMixLeveldB(float arg0)
        {
            return IExecuteWithSignature<bool>("setAudioDescriptionMixLeveldB", "(F)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#setDualMonoMode(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetDualMonoMode(int arg0)
        {
            return IExecuteWithSignature<bool>("setDualMonoMode", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#setPreferredDevice(android.media.AudioDeviceInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioDeviceInfo"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetPreferredDevice(Android.Media.AudioDeviceInfo arg0)
        {
            return IExecuteWithSignature<bool>("setPreferredDevice", "(Landroid/media/AudioDeviceInfo;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#getAudioDescriptionMixLeveldB()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetAudioDescriptionMixLeveldB()
        {
            return IExecuteWithSignature<float>("getAudioDescriptionMixLeveldB", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#attachAuxEffect(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int AttachAuxEffect(int arg0)
        {
            return IExecuteWithSignature<int>("attachAuxEffect", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#getAudioFormat()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetAudioFormat()
        {
            return IExecuteWithSignature<int>("getAudioFormat", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#getAudioSessionId()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetAudioSessionId()
        {
            return IExecuteWithSignature<int>("getAudioSessionId", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#getBufferCapacityInFrames()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetBufferCapacityInFrames()
        {
            return IExecuteWithSignature<int>("getBufferCapacityInFrames", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#getBufferSizeInFrames()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetBufferSizeInFrames()
        {
            return IExecuteWithSignature<int>("getBufferSizeInFrames", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#getChannelConfiguration()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetChannelConfiguration()
        {
            return IExecuteWithSignature<int>("getChannelConfiguration", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#getChannelCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetChannelCount()
        {
            return IExecuteWithSignature<int>("getChannelCount", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#getDualMonoMode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetDualMonoMode()
        {
            return IExecuteWithSignature<int>("getDualMonoMode", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#getNotificationMarkerPosition()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetNotificationMarkerPosition()
        {
            return IExecuteWithSignature<int>("getNotificationMarkerPosition", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#getOffloadDelay()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetOffloadDelay()
        {
            return IExecuteWithSignature<int>("getOffloadDelay", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#getOffloadPadding()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetOffloadPadding()
        {
            return IExecuteWithSignature<int>("getOffloadPadding", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#getPerformanceMode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetPerformanceMode()
        {
            return IExecuteWithSignature<int>("getPerformanceMode", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#getPlaybackHeadPosition()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetPlaybackHeadPosition()
        {
            return IExecuteWithSignature<int>("getPlaybackHeadPosition", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#getPlaybackRate()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetPlaybackRate()
        {
            return IExecuteWithSignature<int>("getPlaybackRate", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#getPlayState()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetPlayState()
        {
            return IExecuteWithSignature<int>("getPlayState", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#getPositionNotificationPeriod()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetPositionNotificationPeriod()
        {
            return IExecuteWithSignature<int>("getPositionNotificationPeriod", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#getSampleRate()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetSampleRate()
        {
            return IExecuteWithSignature<int>("getSampleRate", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#getStartThresholdInFrames()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetStartThresholdInFrames()
        {
            return IExecuteWithSignature<int>("getStartThresholdInFrames", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#getState()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetState()
        {
            return IExecuteWithSignature<int>("getState", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#getStreamType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetStreamType()
        {
            return IExecuteWithSignature<int>("getStreamType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#getUnderrunCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetUnderrunCount()
        {
            return IExecuteWithSignature<int>("getUnderrunCount", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#reloadStaticData()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int ReloadStaticData()
        {
            return IExecuteWithSignature<int>("reloadStaticData", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#setAuxEffectSendLevel(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <returns><see cref="int"/></returns>
        public int SetAuxEffectSendLevel(float arg0)
        {
            return IExecuteWithSignature<int>("setAuxEffectSendLevel", "(F)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#setBufferSizeInFrames(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int SetBufferSizeInFrames(int arg0)
        {
            return IExecuteWithSignature<int>("setBufferSizeInFrames", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#setLoopPoints(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int SetLoopPoints(int arg0, int arg1, int arg2)
        {
            return IExecuteWithSignature<int>("setLoopPoints", "(III)I", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#setNotificationMarkerPosition(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int SetNotificationMarkerPosition(int arg0)
        {
            return IExecuteWithSignature<int>("setNotificationMarkerPosition", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#setPlaybackHeadPosition(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int SetPlaybackHeadPosition(int arg0)
        {
            return IExecuteWithSignature<int>("setPlaybackHeadPosition", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#setPlaybackRate(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int SetPlaybackRate(int arg0)
        {
            return IExecuteWithSignature<int>("setPlaybackRate", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#setPositionNotificationPeriod(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int SetPositionNotificationPeriod(int arg0)
        {
            return IExecuteWithSignature<int>("setPositionNotificationPeriod", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#setPresentation(android.media.AudioPresentation)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioPresentation"/></param>
        /// <returns><see cref="int"/></returns>
        public int SetPresentation(Android.Media.AudioPresentation arg0)
        {
            return IExecuteWithSignature<int>("setPresentation", "(Landroid/media/AudioPresentation;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#setStartThresholdInFrames(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int SetStartThresholdInFrames(int arg0)
        {
            return IExecuteWithSignature<int>("setStartThresholdInFrames", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#setStereoVolume(float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int SetStereoVolume(float arg0, float arg1)
        {
            return IExecuteWithSignature<int>("setStereoVolume", "(FF)I", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#setVolume(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <returns><see cref="int"/></returns>
        public int SetVolume(float arg0)
        {
            return IExecuteWithSignature<int>("setVolume", "(F)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#write(byte[],int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int Write(byte[] arg0, int arg1, int arg2, int arg3)
        {
            return IExecuteWithSignature<int>("write", "([BIII)I", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#write(byte[],int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int Write(byte[] arg0, int arg1, int arg2)
        {
            return IExecuteWithSignature<int>("write", "([BII)I", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#write(float[],int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int Write(float[] arg0, int arg1, int arg2, int arg3)
        {
            return IExecuteWithSignature<int>("write", "([FIII)I", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#write(java.nio.ByteBuffer,int,int,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="long"/></param>
        /// <returns><see cref="int"/></returns>
        public int Write(Java.Nio.ByteBuffer arg0, int arg1, int arg2, long arg3)
        {
            return IExecuteWithSignature<int>("write", "(Ljava/nio/ByteBuffer;IIJ)I", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#write(java.nio.ByteBuffer,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int Write(Java.Nio.ByteBuffer arg0, int arg1, int arg2)
        {
            return IExecuteWithSignature<int>("write", "(Ljava/nio/ByteBuffer;II)I", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#write(short[],int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="short"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int Write(short[] arg0, int arg1, int arg2, int arg3)
        {
            return IExecuteWithSignature<int>("write", "([SIII)I", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#write(short[],int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="short"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int Write(short[] arg0, int arg1, int arg2)
        {
            return IExecuteWithSignature<int>("write", "([SII)I", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#addOnCodecFormatChangedListener(java.util.concurrent.Executor,android.media.AudioTrack.OnCodecFormatChangedListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Media.AudioTrack.OnCodecFormatChangedListener"/></param>
        public void AddOnCodecFormatChangedListener(Java.Util.Concurrent.Executor arg0, Android.Media.AudioTrack.OnCodecFormatChangedListener arg1)
        {
            IExecuteWithSignature("addOnCodecFormatChangedListener", "(Ljava/util/concurrent/Executor;Landroid/media/AudioTrack$OnCodecFormatChangedListener;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#addOnRoutingChangedListener(android.media.AudioRouting.OnRoutingChangedListener,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioRouting.OnRoutingChangedListener"/></param>
        /// <param name="arg1"><see cref="Android.Os.Handler"/></param>
        public void AddOnRoutingChangedListener(Android.Media.AudioRouting.OnRoutingChangedListener arg0, Android.Os.Handler arg1)
        {
            IExecuteWithSignature("addOnRoutingChangedListener", "(Landroid/media/AudioRouting$OnRoutingChangedListener;Landroid/os/Handler;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#addOnRoutingChangedListener(android.media.AudioTrack.OnRoutingChangedListener,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioTrack.OnRoutingChangedListener"/></param>
        /// <param name="arg1"><see cref="Android.Os.Handler"/></param>
        [global::System.Obsolete()]
        public void AddOnRoutingChangedListener(Android.Media.AudioTrack.OnRoutingChangedListener arg0, Android.Os.Handler arg1)
        {
            IExecuteWithSignature("addOnRoutingChangedListener", "(Landroid/media/AudioTrack$OnRoutingChangedListener;Landroid/os/Handler;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#flush()"/>
        /// </summary>
        public void Flush()
        {
            IExecuteWithSignature("flush", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#pause()"/>
        /// </summary>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public void Pause()
        {
            IExecuteWithSignature("pause", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#play()"/>
        /// </summary>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public void Play()
        {
            IExecuteWithSignature("play", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#registerStreamEventCallback(java.util.concurrent.Executor,android.media.AudioTrack.StreamEventCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Media.AudioTrack.StreamEventCallback"/></param>
        public void RegisterStreamEventCallback(Java.Util.Concurrent.Executor arg0, Android.Media.AudioTrack.StreamEventCallback arg1)
        {
            IExecuteWithSignature("registerStreamEventCallback", "(Ljava/util/concurrent/Executor;Landroid/media/AudioTrack$StreamEventCallback;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#release()"/>
        /// </summary>
        public void Release()
        {
            IExecuteWithSignature("release", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#removeOnCodecFormatChangedListener(android.media.AudioTrack.OnCodecFormatChangedListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioTrack.OnCodecFormatChangedListener"/></param>
        public void RemoveOnCodecFormatChangedListener(Android.Media.AudioTrack.OnCodecFormatChangedListener arg0)
        {
            IExecuteWithSignature("removeOnCodecFormatChangedListener", "(Landroid/media/AudioTrack$OnCodecFormatChangedListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#removeOnRoutingChangedListener(android.media.AudioRouting.OnRoutingChangedListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioRouting.OnRoutingChangedListener"/></param>
        public void RemoveOnRoutingChangedListener(Android.Media.AudioRouting.OnRoutingChangedListener arg0)
        {
            IExecuteWithSignature("removeOnRoutingChangedListener", "(Landroid/media/AudioRouting$OnRoutingChangedListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#removeOnRoutingChangedListener(android.media.AudioTrack.OnRoutingChangedListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioTrack.OnRoutingChangedListener"/></param>
        [global::System.Obsolete()]
        public void RemoveOnRoutingChangedListener(Android.Media.AudioTrack.OnRoutingChangedListener arg0)
        {
            IExecuteWithSignature("removeOnRoutingChangedListener", "(Landroid/media/AudioTrack$OnRoutingChangedListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#setLogSessionId(android.media.metrics.LogSessionId)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.Metrics.LogSessionId"/></param>
        public void SetLogSessionId(Android.Media.Metrics.LogSessionId arg0)
        {
            IExecuteWithSignature("setLogSessionId", "(Landroid/media/metrics/LogSessionId;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#setOffloadDelayPadding(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetOffloadDelayPadding(int arg0, int arg1)
        {
            IExecuteWithSignature("setOffloadDelayPadding", "(II)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#setOffloadEndOfStream()"/>
        /// </summary>
        public void SetOffloadEndOfStream()
        {
            IExecuteWithSignature("setOffloadEndOfStream", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#setPlaybackParams(android.media.PlaybackParams)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.PlaybackParams"/></param>
        public void SetPlaybackParams(Android.Media.PlaybackParams arg0)
        {
            IExecuteWithSignature("setPlaybackParams", "(Landroid/media/PlaybackParams;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#setPlaybackPositionUpdateListener(android.media.AudioTrack.OnPlaybackPositionUpdateListener,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioTrack.OnPlaybackPositionUpdateListener"/></param>
        /// <param name="arg1"><see cref="Android.Os.Handler"/></param>
        public void SetPlaybackPositionUpdateListener(Android.Media.AudioTrack.OnPlaybackPositionUpdateListener arg0, Android.Os.Handler arg1)
        {
            IExecuteWithSignature("setPlaybackPositionUpdateListener", "(Landroid/media/AudioTrack$OnPlaybackPositionUpdateListener;Landroid/os/Handler;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#setPlaybackPositionUpdateListener(android.media.AudioTrack.OnPlaybackPositionUpdateListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioTrack.OnPlaybackPositionUpdateListener"/></param>
        public void SetPlaybackPositionUpdateListener(Android.Media.AudioTrack.OnPlaybackPositionUpdateListener arg0)
        {
            IExecuteWithSignature("setPlaybackPositionUpdateListener", "(Landroid/media/AudioTrack$OnPlaybackPositionUpdateListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#stop()"/>
        /// </summary>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public void Stop()
        {
            IExecuteWithSignature("stop", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioTrack.html#unregisterStreamEventCallback(android.media.AudioTrack.StreamEventCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioTrack.StreamEventCallback"/></param>
        public void UnregisterStreamEventCallback(Android.Media.AudioTrack.StreamEventCallback arg0)
        {
            IExecuteWithSignature("unregisterStreamEventCallback", "(Landroid/media/AudioTrack$StreamEventCallback;)V", arg0);
        }

        #endregion

        #region Nested classes
        #region Builder implementation
        public partial class Builder
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioTrack.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Media.AudioTrack"/></returns>
            /// <exception cref="Java.Lang.UnsupportedOperationException"/>
            public Android.Media.AudioTrack Build()
            {
                return IExecuteWithSignature<Android.Media.AudioTrack>("build", "()Landroid/media/AudioTrack;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioTrack.Builder.html#setAudioAttributes(android.media.AudioAttributes)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.AudioAttributes"/></param>
            /// <returns><see cref="Android.Media.AudioTrack.Builder"/></returns>
            /// <exception cref="Java.Lang.IllegalArgumentException"/>
            public Android.Media.AudioTrack.Builder SetAudioAttributes(Android.Media.AudioAttributes arg0)
            {
                return IExecuteWithSignature<Android.Media.AudioTrack.Builder>("setAudioAttributes", "(Landroid/media/AudioAttributes;)Landroid/media/AudioTrack$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioTrack.Builder.html#setAudioFormat(android.media.AudioFormat)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.AudioFormat"/></param>
            /// <returns><see cref="Android.Media.AudioTrack.Builder"/></returns>
            /// <exception cref="Java.Lang.IllegalArgumentException"/>
            public Android.Media.AudioTrack.Builder SetAudioFormat(Android.Media.AudioFormat arg0)
            {
                return IExecuteWithSignature<Android.Media.AudioTrack.Builder>("setAudioFormat", "(Landroid/media/AudioFormat;)Landroid/media/AudioTrack$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioTrack.Builder.html#setBufferSizeInBytes(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.AudioTrack.Builder"/></returns>
            /// <exception cref="Java.Lang.IllegalArgumentException"/>
            public Android.Media.AudioTrack.Builder SetBufferSizeInBytes(int arg0)
            {
                return IExecuteWithSignature<Android.Media.AudioTrack.Builder>("setBufferSizeInBytes", "(I)Landroid/media/AudioTrack$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioTrack.Builder.html#setContext(android.content.Context)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.Context"/></param>
            /// <returns><see cref="Android.Media.AudioTrack.Builder"/></returns>
            public Android.Media.AudioTrack.Builder SetContext(Android.Content.Context arg0)
            {
                return IExecuteWithSignature<Android.Media.AudioTrack.Builder>("setContext", "(Landroid/content/Context;)Landroid/media/AudioTrack$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioTrack.Builder.html#setEncapsulationMode(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.AudioTrack.Builder"/></returns>
            public Android.Media.AudioTrack.Builder SetEncapsulationMode(int arg0)
            {
                return IExecuteWithSignature<Android.Media.AudioTrack.Builder>("setEncapsulationMode", "(I)Landroid/media/AudioTrack$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioTrack.Builder.html#setOffloadedPlayback(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Media.AudioTrack.Builder"/></returns>
            public Android.Media.AudioTrack.Builder SetOffloadedPlayback(bool arg0)
            {
                return IExecuteWithSignature<Android.Media.AudioTrack.Builder>("setOffloadedPlayback", "(Z)Landroid/media/AudioTrack$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioTrack.Builder.html#setPerformanceMode(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.AudioTrack.Builder"/></returns>
            public Android.Media.AudioTrack.Builder SetPerformanceMode(int arg0)
            {
                return IExecuteWithSignature<Android.Media.AudioTrack.Builder>("setPerformanceMode", "(I)Landroid/media/AudioTrack$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioTrack.Builder.html#setSessionId(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.AudioTrack.Builder"/></returns>
            /// <exception cref="Java.Lang.IllegalArgumentException"/>
            public Android.Media.AudioTrack.Builder SetSessionId(int arg0)
            {
                return IExecuteWithSignature<Android.Media.AudioTrack.Builder>("setSessionId", "(I)Landroid/media/AudioTrack$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioTrack.Builder.html#setTransferMode(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.AudioTrack.Builder"/></returns>
            /// <exception cref="Java.Lang.IllegalArgumentException"/>
            public Android.Media.AudioTrack.Builder SetTransferMode(int arg0)
            {
                return IExecuteWithSignature<Android.Media.AudioTrack.Builder>("setTransferMode", "(I)Landroid/media/AudioTrack$Builder;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region MetricsConstants implementation
        public partial class MetricsConstants
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioTrack.MetricsConstants.html#CHANNELMASK"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String CHANNELMASK { get { if (!_CHANNELMASKReady) { _CHANNELMASKContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CHANNELMASK"); _CHANNELMASKReady = true; } return _CHANNELMASKContent; } }
            private static Java.Lang.String _CHANNELMASKContent = default;
            private static bool _CHANNELMASKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioTrack.MetricsConstants.html#CONTENTTYPE"/>
            /// </summary>
            public static Java.Lang.String CONTENTTYPE { get { if (!_CONTENTTYPEReady) { _CONTENTTYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENTTYPE"); _CONTENTTYPEReady = true; } return _CONTENTTYPEContent; } }
            private static Java.Lang.String _CONTENTTYPEContent = default;
            private static bool _CONTENTTYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioTrack.MetricsConstants.html#SAMPLERATE"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String SAMPLERATE { get { if (!_SAMPLERATEReady) { _SAMPLERATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SAMPLERATE"); _SAMPLERATEReady = true; } return _SAMPLERATEContent; } }
            private static Java.Lang.String _SAMPLERATEContent = default;
            private static bool _SAMPLERATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioTrack.MetricsConstants.html#STREAMTYPE"/>
            /// </summary>
            public static Java.Lang.String STREAMTYPE { get { if (!_STREAMTYPEReady) { _STREAMTYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STREAMTYPE"); _STREAMTYPEReady = true; } return _STREAMTYPEContent; } }
            private static Java.Lang.String _STREAMTYPEContent = default;
            private static bool _STREAMTYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioTrack.MetricsConstants.html#USAGE"/>
            /// </summary>
            public static Java.Lang.String USAGE { get { if (!_USAGEReady) { _USAGEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "USAGE"); _USAGEReady = true; } return _USAGEContent; } }
            private static Java.Lang.String _USAGEContent = default;
            private static bool _USAGEReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnCodecFormatChangedListener implementation
        public partial class OnCodecFormatChangedListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnCodecFormatChangedListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onCodecFormatChanged", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnCodecFormatChangedEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/AudioTrack.OnCodecFormatChangedListener.html#onCodecFormatChanged(android.media.AudioTrack,android.media.AudioMetadataReadMap)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnCodecFormatChanged"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Media.AudioTrack, Android.Media.AudioMetadataReadMap> OnOnCodecFormatChanged { get; set; } = null;

            bool hasOverrideOnCodecFormatChanged = true;
            void OnCodecFormatChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnCodecFormatChanged = true;
                var methodToExecute = (OnOnCodecFormatChanged != null) ? OnOnCodecFormatChanged : OnCodecFormatChanged;
                methodToExecute.Invoke(data.EventData.GetAt<Android.Media.AudioTrack>(0), data.EventData.GetAt<Android.Media.AudioMetadataReadMap>(1));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnCodecFormatChanged;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioTrack.OnCodecFormatChangedListener.html#onCodecFormatChanged(android.media.AudioTrack,android.media.AudioMetadataReadMap)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.AudioTrack"/></param>
            /// <param name="arg1"><see cref="Android.Media.AudioMetadataReadMap"/></param>
            public virtual void OnCodecFormatChanged(Android.Media.AudioTrack arg0, Android.Media.AudioMetadataReadMap arg1)
            {
                hasOverrideOnCodecFormatChanged = false;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnCodecFormatChangedListenerDirect implementation
        public partial class OnCodecFormatChangedListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioTrack.OnCodecFormatChangedListener.html#onCodecFormatChanged(android.media.AudioTrack,android.media.AudioMetadataReadMap)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.AudioTrack"/></param>
            /// <param name="arg1"><see cref="Android.Media.AudioMetadataReadMap"/></param>
            public override void OnCodecFormatChanged(Android.Media.AudioTrack arg0, Android.Media.AudioMetadataReadMap arg1)
            {
                IExecuteWithSignature("onCodecFormatChanged", "(Landroid/media/AudioTrack;Landroid/media/AudioMetadataReadMap;)V", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnPlaybackPositionUpdateListener implementation
        public partial class OnPlaybackPositionUpdateListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnPlaybackPositionUpdateListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onMarkerReached", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnMarkerReachedEventHandler));
                AddEventHandler("onPeriodicNotification", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnPeriodicNotificationEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/AudioTrack.OnPlaybackPositionUpdateListener.html#onMarkerReached(android.media.AudioTrack)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnMarkerReached"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Media.AudioTrack> OnOnMarkerReached { get; set; } = null;

            bool hasOverrideOnMarkerReached = true;
            void OnMarkerReachedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnMarkerReached = true;
                var methodToExecute = (OnOnMarkerReached != null) ? OnOnMarkerReached : OnMarkerReached;
                methodToExecute.Invoke(data.EventData.GetAt<Android.Media.AudioTrack>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnMarkerReached;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioTrack.OnPlaybackPositionUpdateListener.html#onMarkerReached(android.media.AudioTrack)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.AudioTrack"/></param>
            public virtual void OnMarkerReached(Android.Media.AudioTrack arg0)
            {
                hasOverrideOnMarkerReached = false;
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/AudioTrack.OnPlaybackPositionUpdateListener.html#onPeriodicNotification(android.media.AudioTrack)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnPeriodicNotification"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Media.AudioTrack> OnOnPeriodicNotification { get; set; } = null;

            bool hasOverrideOnPeriodicNotification = true;
            void OnPeriodicNotificationEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnPeriodicNotification = true;
                var methodToExecute = (OnOnPeriodicNotification != null) ? OnOnPeriodicNotification : OnPeriodicNotification;
                methodToExecute.Invoke(data.EventData.GetAt<Android.Media.AudioTrack>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnPeriodicNotification;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioTrack.OnPlaybackPositionUpdateListener.html#onPeriodicNotification(android.media.AudioTrack)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.AudioTrack"/></param>
            public virtual void OnPeriodicNotification(Android.Media.AudioTrack arg0)
            {
                hasOverrideOnPeriodicNotification = false;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnPlaybackPositionUpdateListenerDirect implementation
        public partial class OnPlaybackPositionUpdateListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioTrack.OnPlaybackPositionUpdateListener.html#onMarkerReached(android.media.AudioTrack)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.AudioTrack"/></param>
            public override void OnMarkerReached(Android.Media.AudioTrack arg0)
            {
                IExecuteWithSignature("onMarkerReached", "(Landroid/media/AudioTrack;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioTrack.OnPlaybackPositionUpdateListener.html#onPeriodicNotification(android.media.AudioTrack)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.AudioTrack"/></param>
            public override void OnPeriodicNotification(Android.Media.AudioTrack arg0)
            {
                IExecuteWithSignature("onPeriodicNotification", "(Landroid/media/AudioTrack;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnRoutingChangedListener implementation
        public partial class OnRoutingChangedListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnRoutingChangedListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onRoutingChanged", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnRoutingChangedEventHandler));
                AddEventHandler("onRoutingChanged1", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnRoutingChanged1EventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/AudioTrack.OnRoutingChangedListener.html#onRoutingChanged(android.media.AudioTrack)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnRoutingChanged"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Media.AudioTrack> OnOnRoutingChanged { get; set; } = null;

            bool hasOverrideOnRoutingChanged = true;
            void OnRoutingChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnRoutingChanged = true;
                var methodToExecute = (OnOnRoutingChanged != null) ? OnOnRoutingChanged : OnRoutingChanged;
                methodToExecute.Invoke(data.EventData.GetAt<Android.Media.AudioTrack>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnRoutingChanged;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioTrack.OnRoutingChangedListener.html#onRoutingChanged(android.media.AudioTrack)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.AudioTrack"/></param>
            [global::System.Obsolete()]
            public virtual void OnRoutingChanged(Android.Media.AudioTrack arg0)
            {
                hasOverrideOnRoutingChanged = false;
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioTrack.OnRoutingChangedListener.html#onRoutingChanged(android.media.AudioRouting)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.AudioRouting"/></param>
            [global::System.Obsolete()]
            /// <remarks>The method invokes the default implementation in the JVM interface</remarks>
            public void OnRoutingChangedDefault(Android.Media.AudioRouting arg0)
            {
                IExecuteWithSignature("onRoutingChangedDefault", "(Landroid/media/AudioRouting;)V", arg0);
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/AudioTrack.OnRoutingChangedListener.html#onRoutingChanged(android.media.AudioRouting)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnRoutingChanged1"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Media.AudioRouting> OnOnRoutingChanged1 { get; set; } = null;

            bool hasOverrideOnRoutingChanged1 = true;
            void OnRoutingChanged1EventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnRoutingChanged1 = true;
                var methodToExecute = (OnOnRoutingChanged1 != null) ? OnOnRoutingChanged1 : OnRoutingChanged;
                methodToExecute.Invoke(data.EventData.GetAt<Android.Media.AudioRouting>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnRoutingChanged1;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioTrack.OnRoutingChangedListener.html#onRoutingChanged(android.media.AudioRouting)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.AudioRouting"/></param>
            [global::System.Obsolete()]
            /// <remarks>The method invokes the default implementation in the JVM interface using <see cref="OnRoutingChangedDefault"/>; override the method to implement a different behavior</remarks>
            public virtual void OnRoutingChanged(Android.Media.AudioRouting arg0)
            {
                hasOverrideOnRoutingChanged1 = false;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnRoutingChangedListenerDirect implementation
        public partial class OnRoutingChangedListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioTrack.OnRoutingChangedListener.html#onRoutingChanged(android.media.AudioTrack)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.AudioTrack"/></param>
            [global::System.Obsolete()]
            public override void OnRoutingChanged(Android.Media.AudioTrack arg0)
            {
                IExecuteWithSignature("onRoutingChanged", "(Landroid/media/AudioTrack;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioTrack.OnRoutingChangedListener.html#onRoutingChanged(android.media.AudioRouting)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.AudioRouting"/></param>
            [global::System.Obsolete()]
            public override void OnRoutingChanged(Android.Media.AudioRouting arg0)
            {
                IExecuteWithSignature("onRoutingChanged", "(Landroid/media/AudioRouting;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region StreamEventCallback implementation
        public partial class StreamEventCallback
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioTrack.StreamEventCallback.html#onDataRequest(android.media.AudioTrack,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.AudioTrack"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void OnDataRequest(Android.Media.AudioTrack arg0, int arg1)
            {
                IExecuteWithSignature("onDataRequest", "(Landroid/media/AudioTrack;I)V", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioTrack.StreamEventCallback.html#onPresentationEnded(android.media.AudioTrack)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.AudioTrack"/></param>
            public void OnPresentationEnded(Android.Media.AudioTrack arg0)
            {
                IExecuteWithSignature("onPresentationEnded", "(Landroid/media/AudioTrack;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioTrack.StreamEventCallback.html#onTearDown(android.media.AudioTrack)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.AudioTrack"/></param>
            public void OnTearDown(Android.Media.AudioTrack arg0)
            {
                IExecuteWithSignature("onTearDown", "(Landroid/media/AudioTrack;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
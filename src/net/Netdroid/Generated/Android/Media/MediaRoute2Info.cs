/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media
{
    #region MediaRoute2Info declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html"/>
    /// </summary>
    public partial class MediaRoute2Info : Android.Os.Parcelable
    {
        const string _bridgeClassName = "android.media.MediaRoute2Info";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public MediaRoute2Info() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public MediaRoute2Info(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region Builder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.Builder.html"/>
        /// </summary>
        public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
        {
            const string _bridgeClassName = "android.media.MediaRoute2Info$Builder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Builder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Builder(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region MediaRoute2Info implementation
    public partial class MediaRoute2Info
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#CONNECTION_STATE_CONNECTED"/>
        /// </summary>
        public static int CONNECTION_STATE_CONNECTED { get { if (!_CONNECTION_STATE_CONNECTEDReady) { _CONNECTION_STATE_CONNECTEDContent = SGetField<int>(LocalBridgeClazz, "CONNECTION_STATE_CONNECTED"); _CONNECTION_STATE_CONNECTEDReady = true; } return _CONNECTION_STATE_CONNECTEDContent; } }
        private static int _CONNECTION_STATE_CONNECTEDContent = default;
        private static bool _CONNECTION_STATE_CONNECTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#CONNECTION_STATE_CONNECTING"/>
        /// </summary>
        public static int CONNECTION_STATE_CONNECTING { get { if (!_CONNECTION_STATE_CONNECTINGReady) { _CONNECTION_STATE_CONNECTINGContent = SGetField<int>(LocalBridgeClazz, "CONNECTION_STATE_CONNECTING"); _CONNECTION_STATE_CONNECTINGReady = true; } return _CONNECTION_STATE_CONNECTINGContent; } }
        private static int _CONNECTION_STATE_CONNECTINGContent = default;
        private static bool _CONNECTION_STATE_CONNECTINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#CONNECTION_STATE_DISCONNECTED"/>
        /// </summary>
        public static int CONNECTION_STATE_DISCONNECTED { get { if (!_CONNECTION_STATE_DISCONNECTEDReady) { _CONNECTION_STATE_DISCONNECTEDContent = SGetField<int>(LocalBridgeClazz, "CONNECTION_STATE_DISCONNECTED"); _CONNECTION_STATE_DISCONNECTEDReady = true; } return _CONNECTION_STATE_DISCONNECTEDContent; } }
        private static int _CONNECTION_STATE_DISCONNECTEDContent = default;
        private static bool _CONNECTION_STATE_DISCONNECTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#PLAYBACK_VOLUME_FIXED"/>
        /// </summary>
        public static int PLAYBACK_VOLUME_FIXED { get { if (!_PLAYBACK_VOLUME_FIXEDReady) { _PLAYBACK_VOLUME_FIXEDContent = SGetField<int>(LocalBridgeClazz, "PLAYBACK_VOLUME_FIXED"); _PLAYBACK_VOLUME_FIXEDReady = true; } return _PLAYBACK_VOLUME_FIXEDContent; } }
        private static int _PLAYBACK_VOLUME_FIXEDContent = default;
        private static bool _PLAYBACK_VOLUME_FIXEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#PLAYBACK_VOLUME_VARIABLE"/>
        /// </summary>
        public static int PLAYBACK_VOLUME_VARIABLE { get { if (!_PLAYBACK_VOLUME_VARIABLEReady) { _PLAYBACK_VOLUME_VARIABLEContent = SGetField<int>(LocalBridgeClazz, "PLAYBACK_VOLUME_VARIABLE"); _PLAYBACK_VOLUME_VARIABLEReady = true; } return _PLAYBACK_VOLUME_VARIABLEContent; } }
        private static int _PLAYBACK_VOLUME_VARIABLEContent = default;
        private static bool _PLAYBACK_VOLUME_VARIABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#SUITABILITY_STATUS_NOT_SUITABLE_FOR_TRANSFER"/>
        /// </summary>
        public static int SUITABILITY_STATUS_NOT_SUITABLE_FOR_TRANSFER { get { if (!_SUITABILITY_STATUS_NOT_SUITABLE_FOR_TRANSFERReady) { _SUITABILITY_STATUS_NOT_SUITABLE_FOR_TRANSFERContent = SGetField<int>(LocalBridgeClazz, "SUITABILITY_STATUS_NOT_SUITABLE_FOR_TRANSFER"); _SUITABILITY_STATUS_NOT_SUITABLE_FOR_TRANSFERReady = true; } return _SUITABILITY_STATUS_NOT_SUITABLE_FOR_TRANSFERContent; } }
        private static int _SUITABILITY_STATUS_NOT_SUITABLE_FOR_TRANSFERContent = default;
        private static bool _SUITABILITY_STATUS_NOT_SUITABLE_FOR_TRANSFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#SUITABILITY_STATUS_SUITABLE_FOR_DEFAULT_TRANSFER"/>
        /// </summary>
        public static int SUITABILITY_STATUS_SUITABLE_FOR_DEFAULT_TRANSFER { get { if (!_SUITABILITY_STATUS_SUITABLE_FOR_DEFAULT_TRANSFERReady) { _SUITABILITY_STATUS_SUITABLE_FOR_DEFAULT_TRANSFERContent = SGetField<int>(LocalBridgeClazz, "SUITABILITY_STATUS_SUITABLE_FOR_DEFAULT_TRANSFER"); _SUITABILITY_STATUS_SUITABLE_FOR_DEFAULT_TRANSFERReady = true; } return _SUITABILITY_STATUS_SUITABLE_FOR_DEFAULT_TRANSFERContent; } }
        private static int _SUITABILITY_STATUS_SUITABLE_FOR_DEFAULT_TRANSFERContent = default;
        private static bool _SUITABILITY_STATUS_SUITABLE_FOR_DEFAULT_TRANSFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#SUITABILITY_STATUS_SUITABLE_FOR_MANUAL_TRANSFER"/>
        /// </summary>
        public static int SUITABILITY_STATUS_SUITABLE_FOR_MANUAL_TRANSFER { get { if (!_SUITABILITY_STATUS_SUITABLE_FOR_MANUAL_TRANSFERReady) { _SUITABILITY_STATUS_SUITABLE_FOR_MANUAL_TRANSFERContent = SGetField<int>(LocalBridgeClazz, "SUITABILITY_STATUS_SUITABLE_FOR_MANUAL_TRANSFER"); _SUITABILITY_STATUS_SUITABLE_FOR_MANUAL_TRANSFERReady = true; } return _SUITABILITY_STATUS_SUITABLE_FOR_MANUAL_TRANSFERContent; } }
        private static int _SUITABILITY_STATUS_SUITABLE_FOR_MANUAL_TRANSFERContent = default;
        private static bool _SUITABILITY_STATUS_SUITABLE_FOR_MANUAL_TRANSFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#TYPE_BLE_HEADSET"/>
        /// </summary>
        public static int TYPE_BLE_HEADSET { get { if (!_TYPE_BLE_HEADSETReady) { _TYPE_BLE_HEADSETContent = SGetField<int>(LocalBridgeClazz, "TYPE_BLE_HEADSET"); _TYPE_BLE_HEADSETReady = true; } return _TYPE_BLE_HEADSETContent; } }
        private static int _TYPE_BLE_HEADSETContent = default;
        private static bool _TYPE_BLE_HEADSETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#TYPE_BLUETOOTH_A2DP"/>
        /// </summary>
        public static int TYPE_BLUETOOTH_A2DP { get { if (!_TYPE_BLUETOOTH_A2DPReady) { _TYPE_BLUETOOTH_A2DPContent = SGetField<int>(LocalBridgeClazz, "TYPE_BLUETOOTH_A2DP"); _TYPE_BLUETOOTH_A2DPReady = true; } return _TYPE_BLUETOOTH_A2DPContent; } }
        private static int _TYPE_BLUETOOTH_A2DPContent = default;
        private static bool _TYPE_BLUETOOTH_A2DPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#TYPE_BUILTIN_SPEAKER"/>
        /// </summary>
        public static int TYPE_BUILTIN_SPEAKER { get { if (!_TYPE_BUILTIN_SPEAKERReady) { _TYPE_BUILTIN_SPEAKERContent = SGetField<int>(LocalBridgeClazz, "TYPE_BUILTIN_SPEAKER"); _TYPE_BUILTIN_SPEAKERReady = true; } return _TYPE_BUILTIN_SPEAKERContent; } }
        private static int _TYPE_BUILTIN_SPEAKERContent = default;
        private static bool _TYPE_BUILTIN_SPEAKERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#TYPE_DOCK"/>
        /// </summary>
        public static int TYPE_DOCK { get { if (!_TYPE_DOCKReady) { _TYPE_DOCKContent = SGetField<int>(LocalBridgeClazz, "TYPE_DOCK"); _TYPE_DOCKReady = true; } return _TYPE_DOCKContent; } }
        private static int _TYPE_DOCKContent = default;
        private static bool _TYPE_DOCKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#TYPE_GROUP"/>
        /// </summary>
        public static int TYPE_GROUP { get { if (!_TYPE_GROUPReady) { _TYPE_GROUPContent = SGetField<int>(LocalBridgeClazz, "TYPE_GROUP"); _TYPE_GROUPReady = true; } return _TYPE_GROUPContent; } }
        private static int _TYPE_GROUPContent = default;
        private static bool _TYPE_GROUPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#TYPE_HDMI"/>
        /// </summary>
        public static int TYPE_HDMI { get { if (!_TYPE_HDMIReady) { _TYPE_HDMIContent = SGetField<int>(LocalBridgeClazz, "TYPE_HDMI"); _TYPE_HDMIReady = true; } return _TYPE_HDMIContent; } }
        private static int _TYPE_HDMIContent = default;
        private static bool _TYPE_HDMIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#TYPE_HDMI_ARC"/>
        /// </summary>
        public static int TYPE_HDMI_ARC { get { if (!_TYPE_HDMI_ARCReady) { _TYPE_HDMI_ARCContent = SGetField<int>(LocalBridgeClazz, "TYPE_HDMI_ARC"); _TYPE_HDMI_ARCReady = true; } return _TYPE_HDMI_ARCContent; } }
        private static int _TYPE_HDMI_ARCContent = default;
        private static bool _TYPE_HDMI_ARCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#TYPE_HDMI_EARC"/>
        /// </summary>
        public static int TYPE_HDMI_EARC { get { if (!_TYPE_HDMI_EARCReady) { _TYPE_HDMI_EARCContent = SGetField<int>(LocalBridgeClazz, "TYPE_HDMI_EARC"); _TYPE_HDMI_EARCReady = true; } return _TYPE_HDMI_EARCContent; } }
        private static int _TYPE_HDMI_EARCContent = default;
        private static bool _TYPE_HDMI_EARCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#TYPE_HEARING_AID"/>
        /// </summary>
        public static int TYPE_HEARING_AID { get { if (!_TYPE_HEARING_AIDReady) { _TYPE_HEARING_AIDContent = SGetField<int>(LocalBridgeClazz, "TYPE_HEARING_AID"); _TYPE_HEARING_AIDReady = true; } return _TYPE_HEARING_AIDContent; } }
        private static int _TYPE_HEARING_AIDContent = default;
        private static bool _TYPE_HEARING_AIDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#TYPE_REMOTE_AUDIO_VIDEO_RECEIVER"/>
        /// </summary>
        public static int TYPE_REMOTE_AUDIO_VIDEO_RECEIVER { get { if (!_TYPE_REMOTE_AUDIO_VIDEO_RECEIVERReady) { _TYPE_REMOTE_AUDIO_VIDEO_RECEIVERContent = SGetField<int>(LocalBridgeClazz, "TYPE_REMOTE_AUDIO_VIDEO_RECEIVER"); _TYPE_REMOTE_AUDIO_VIDEO_RECEIVERReady = true; } return _TYPE_REMOTE_AUDIO_VIDEO_RECEIVERContent; } }
        private static int _TYPE_REMOTE_AUDIO_VIDEO_RECEIVERContent = default;
        private static bool _TYPE_REMOTE_AUDIO_VIDEO_RECEIVERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#TYPE_REMOTE_CAR"/>
        /// </summary>
        public static int TYPE_REMOTE_CAR { get { if (!_TYPE_REMOTE_CARReady) { _TYPE_REMOTE_CARContent = SGetField<int>(LocalBridgeClazz, "TYPE_REMOTE_CAR"); _TYPE_REMOTE_CARReady = true; } return _TYPE_REMOTE_CARContent; } }
        private static int _TYPE_REMOTE_CARContent = default;
        private static bool _TYPE_REMOTE_CARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#TYPE_REMOTE_COMPUTER"/>
        /// </summary>
        public static int TYPE_REMOTE_COMPUTER { get { if (!_TYPE_REMOTE_COMPUTERReady) { _TYPE_REMOTE_COMPUTERContent = SGetField<int>(LocalBridgeClazz, "TYPE_REMOTE_COMPUTER"); _TYPE_REMOTE_COMPUTERReady = true; } return _TYPE_REMOTE_COMPUTERContent; } }
        private static int _TYPE_REMOTE_COMPUTERContent = default;
        private static bool _TYPE_REMOTE_COMPUTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#TYPE_REMOTE_GAME_CONSOLE"/>
        /// </summary>
        public static int TYPE_REMOTE_GAME_CONSOLE { get { if (!_TYPE_REMOTE_GAME_CONSOLEReady) { _TYPE_REMOTE_GAME_CONSOLEContent = SGetField<int>(LocalBridgeClazz, "TYPE_REMOTE_GAME_CONSOLE"); _TYPE_REMOTE_GAME_CONSOLEReady = true; } return _TYPE_REMOTE_GAME_CONSOLEContent; } }
        private static int _TYPE_REMOTE_GAME_CONSOLEContent = default;
        private static bool _TYPE_REMOTE_GAME_CONSOLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#TYPE_REMOTE_SMARTPHONE"/>
        /// </summary>
        public static int TYPE_REMOTE_SMARTPHONE { get { if (!_TYPE_REMOTE_SMARTPHONEReady) { _TYPE_REMOTE_SMARTPHONEContent = SGetField<int>(LocalBridgeClazz, "TYPE_REMOTE_SMARTPHONE"); _TYPE_REMOTE_SMARTPHONEReady = true; } return _TYPE_REMOTE_SMARTPHONEContent; } }
        private static int _TYPE_REMOTE_SMARTPHONEContent = default;
        private static bool _TYPE_REMOTE_SMARTPHONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#TYPE_REMOTE_SMARTWATCH"/>
        /// </summary>
        public static int TYPE_REMOTE_SMARTWATCH { get { if (!_TYPE_REMOTE_SMARTWATCHReady) { _TYPE_REMOTE_SMARTWATCHContent = SGetField<int>(LocalBridgeClazz, "TYPE_REMOTE_SMARTWATCH"); _TYPE_REMOTE_SMARTWATCHReady = true; } return _TYPE_REMOTE_SMARTWATCHContent; } }
        private static int _TYPE_REMOTE_SMARTWATCHContent = default;
        private static bool _TYPE_REMOTE_SMARTWATCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#TYPE_REMOTE_SPEAKER"/>
        /// </summary>
        public static int TYPE_REMOTE_SPEAKER { get { if (!_TYPE_REMOTE_SPEAKERReady) { _TYPE_REMOTE_SPEAKERContent = SGetField<int>(LocalBridgeClazz, "TYPE_REMOTE_SPEAKER"); _TYPE_REMOTE_SPEAKERReady = true; } return _TYPE_REMOTE_SPEAKERContent; } }
        private static int _TYPE_REMOTE_SPEAKERContent = default;
        private static bool _TYPE_REMOTE_SPEAKERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#TYPE_REMOTE_TABLET"/>
        /// </summary>
        public static int TYPE_REMOTE_TABLET { get { if (!_TYPE_REMOTE_TABLETReady) { _TYPE_REMOTE_TABLETContent = SGetField<int>(LocalBridgeClazz, "TYPE_REMOTE_TABLET"); _TYPE_REMOTE_TABLETReady = true; } return _TYPE_REMOTE_TABLETContent; } }
        private static int _TYPE_REMOTE_TABLETContent = default;
        private static bool _TYPE_REMOTE_TABLETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#TYPE_REMOTE_TABLET_DOCKED"/>
        /// </summary>
        public static int TYPE_REMOTE_TABLET_DOCKED { get { if (!_TYPE_REMOTE_TABLET_DOCKEDReady) { _TYPE_REMOTE_TABLET_DOCKEDContent = SGetField<int>(LocalBridgeClazz, "TYPE_REMOTE_TABLET_DOCKED"); _TYPE_REMOTE_TABLET_DOCKEDReady = true; } return _TYPE_REMOTE_TABLET_DOCKEDContent; } }
        private static int _TYPE_REMOTE_TABLET_DOCKEDContent = default;
        private static bool _TYPE_REMOTE_TABLET_DOCKEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#TYPE_REMOTE_TV"/>
        /// </summary>
        public static int TYPE_REMOTE_TV { get { if (!_TYPE_REMOTE_TVReady) { _TYPE_REMOTE_TVContent = SGetField<int>(LocalBridgeClazz, "TYPE_REMOTE_TV"); _TYPE_REMOTE_TVReady = true; } return _TYPE_REMOTE_TVContent; } }
        private static int _TYPE_REMOTE_TVContent = default;
        private static bool _TYPE_REMOTE_TVReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#TYPE_UNKNOWN"/>
        /// </summary>
        public static int TYPE_UNKNOWN { get { if (!_TYPE_UNKNOWNReady) { _TYPE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "TYPE_UNKNOWN"); _TYPE_UNKNOWNReady = true; } return _TYPE_UNKNOWNContent; } }
        private static int _TYPE_UNKNOWNContent = default;
        private static bool _TYPE_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#TYPE_USB_ACCESSORY"/>
        /// </summary>
        public static int TYPE_USB_ACCESSORY { get { if (!_TYPE_USB_ACCESSORYReady) { _TYPE_USB_ACCESSORYContent = SGetField<int>(LocalBridgeClazz, "TYPE_USB_ACCESSORY"); _TYPE_USB_ACCESSORYReady = true; } return _TYPE_USB_ACCESSORYContent; } }
        private static int _TYPE_USB_ACCESSORYContent = default;
        private static bool _TYPE_USB_ACCESSORYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#TYPE_USB_DEVICE"/>
        /// </summary>
        public static int TYPE_USB_DEVICE { get { if (!_TYPE_USB_DEVICEReady) { _TYPE_USB_DEVICEContent = SGetField<int>(LocalBridgeClazz, "TYPE_USB_DEVICE"); _TYPE_USB_DEVICEReady = true; } return _TYPE_USB_DEVICEContent; } }
        private static int _TYPE_USB_DEVICEContent = default;
        private static bool _TYPE_USB_DEVICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#TYPE_USB_HEADSET"/>
        /// </summary>
        public static int TYPE_USB_HEADSET { get { if (!_TYPE_USB_HEADSETReady) { _TYPE_USB_HEADSETContent = SGetField<int>(LocalBridgeClazz, "TYPE_USB_HEADSET"); _TYPE_USB_HEADSETReady = true; } return _TYPE_USB_HEADSETContent; } }
        private static int _TYPE_USB_HEADSETContent = default;
        private static bool _TYPE_USB_HEADSETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#TYPE_WIRED_HEADPHONES"/>
        /// </summary>
        public static int TYPE_WIRED_HEADPHONES { get { if (!_TYPE_WIRED_HEADPHONESReady) { _TYPE_WIRED_HEADPHONESContent = SGetField<int>(LocalBridgeClazz, "TYPE_WIRED_HEADPHONES"); _TYPE_WIRED_HEADPHONESReady = true; } return _TYPE_WIRED_HEADPHONESContent; } }
        private static int _TYPE_WIRED_HEADPHONESContent = default;
        private static bool _TYPE_WIRED_HEADPHONESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#TYPE_WIRED_HEADSET"/>
        /// </summary>
        public static int TYPE_WIRED_HEADSET { get { if (!_TYPE_WIRED_HEADSETReady) { _TYPE_WIRED_HEADSETContent = SGetField<int>(LocalBridgeClazz, "TYPE_WIRED_HEADSET"); _TYPE_WIRED_HEADSETReady = true; } return _TYPE_WIRED_HEADSETContent; } }
        private static int _TYPE_WIRED_HEADSETContent = default;
        private static bool _TYPE_WIRED_HEADSETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#FEATURE_LIVE_AUDIO"/>
        /// </summary>
        public static Java.Lang.String FEATURE_LIVE_AUDIO { get { if (!_FEATURE_LIVE_AUDIOReady) { _FEATURE_LIVE_AUDIOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_LIVE_AUDIO"); _FEATURE_LIVE_AUDIOReady = true; } return _FEATURE_LIVE_AUDIOContent; } }
        private static Java.Lang.String _FEATURE_LIVE_AUDIOContent = default;
        private static bool _FEATURE_LIVE_AUDIOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#FEATURE_LIVE_VIDEO"/>
        /// </summary>
        public static Java.Lang.String FEATURE_LIVE_VIDEO { get { if (!_FEATURE_LIVE_VIDEOReady) { _FEATURE_LIVE_VIDEOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_LIVE_VIDEO"); _FEATURE_LIVE_VIDEOReady = true; } return _FEATURE_LIVE_VIDEOContent; } }
        private static Java.Lang.String _FEATURE_LIVE_VIDEOContent = default;
        private static bool _FEATURE_LIVE_VIDEOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#FEATURE_REMOTE_AUDIO_PLAYBACK"/>
        /// </summary>
        public static Java.Lang.String FEATURE_REMOTE_AUDIO_PLAYBACK { get { if (!_FEATURE_REMOTE_AUDIO_PLAYBACKReady) { _FEATURE_REMOTE_AUDIO_PLAYBACKContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_REMOTE_AUDIO_PLAYBACK"); _FEATURE_REMOTE_AUDIO_PLAYBACKReady = true; } return _FEATURE_REMOTE_AUDIO_PLAYBACKContent; } }
        private static Java.Lang.String _FEATURE_REMOTE_AUDIO_PLAYBACKContent = default;
        private static bool _FEATURE_REMOTE_AUDIO_PLAYBACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#FEATURE_REMOTE_PLAYBACK"/>
        /// </summary>
        public static Java.Lang.String FEATURE_REMOTE_PLAYBACK { get { if (!_FEATURE_REMOTE_PLAYBACKReady) { _FEATURE_REMOTE_PLAYBACKContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_REMOTE_PLAYBACK"); _FEATURE_REMOTE_PLAYBACKReady = true; } return _FEATURE_REMOTE_PLAYBACKContent; } }
        private static Java.Lang.String _FEATURE_REMOTE_PLAYBACKContent = default;
        private static bool _FEATURE_REMOTE_PLAYBACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#FEATURE_REMOTE_VIDEO_PLAYBACK"/>
        /// </summary>
        public static Java.Lang.String FEATURE_REMOTE_VIDEO_PLAYBACK { get { if (!_FEATURE_REMOTE_VIDEO_PLAYBACKReady) { _FEATURE_REMOTE_VIDEO_PLAYBACKContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_REMOTE_VIDEO_PLAYBACK"); _FEATURE_REMOTE_VIDEO_PLAYBACKReady = true; } return _FEATURE_REMOTE_VIDEO_PLAYBACKContent; } }
        private static Java.Lang.String _FEATURE_REMOTE_VIDEO_PLAYBACKContent = default;
        private static bool _FEATURE_REMOTE_VIDEO_PLAYBACKReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#getIconUri()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.Uri"/></returns>
        public Android.Net.Uri GetIconUri()
        {
            return IExecuteWithSignature<Android.Net.Uri>("getIconUri", "()Landroid/net/Uri;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#getExtras()"/>
        /// </summary>
        /// <returns><see cref="Android.Os.Bundle"/></returns>
        public Android.Os.Bundle GetExtras()
        {
            return IExecuteWithSignature<Android.Os.Bundle>("getExtras", "()Landroid/os/Bundle;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#isSystemRoute()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsSystemRoute()
        {
            return IExecuteWithSignature<bool>("isSystemRoute", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#getConnectionState()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetConnectionState()
        {
            return IExecuteWithSignature<int>("getConnectionState", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#getSuitabilityStatus()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetSuitabilityStatus()
        {
            return IExecuteWithSignature<int>("getSuitabilityStatus", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#getType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetType()
        {
            return IExecuteWithSignature<int>("getType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#getVolume()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetVolume()
        {
            return IExecuteWithSignature<int>("getVolume", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#getVolumeHandling()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetVolumeHandling()
        {
            return IExecuteWithSignature<int>("getVolumeHandling", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#getVolumeMax()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetVolumeMax()
        {
            return IExecuteWithSignature<int>("getVolumeMax", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#getDescription()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetDescription()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getDescription", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#getName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetName()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getName", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#getClientPackageName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetClientPackageName()
        {
            return IExecuteWithSignature<Java.Lang.String>("getClientPackageName", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#getId()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetId()
        {
            return IExecuteWithSignature<Java.Lang.String>("getId", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#getFeatures()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Java.Lang.String> GetFeatures()
        {
            return IExecuteWithSignature<Java.Util.List<Java.Lang.String>>("getFeatures", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#getDeduplicationIds()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Set"/></returns>
        public Java.Util.Set<Java.Lang.String> GetDeduplicationIds()
        {
            return IExecuteWithSignature<Java.Util.Set<Java.Lang.String>>("getDeduplicationIds", "()Ljava/util/Set;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
        }
    
        #endregion
    
        #region Nested classes
        #region Builder implementation
        public partial class Builder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.Builder.html#%3Cinit%3E(android.media.MediaRoute2Info)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaRoute2Info"/></param>
            public Builder(Android.Media.MediaRoute2Info arg0)
                : base(arg0)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.Builder.html#%3Cinit%3E(java.lang.String,java.lang.CharSequence)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Java.Lang.CharSequence"/></param>
            public Builder(Java.Lang.String arg0, Java.Lang.CharSequence arg1)
                : base(arg0, arg1)
            {
            }
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Media.MediaRoute2Info"/></returns>
            public Android.Media.MediaRoute2Info Build()
            {
                return IExecuteWithSignature<Android.Media.MediaRoute2Info>("build", "()Landroid/media/MediaRoute2Info;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.Builder.html#addFeature(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Media.MediaRoute2Info.Builder"/></returns>
            public Android.Media.MediaRoute2Info.Builder AddFeature(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Media.MediaRoute2Info.Builder>("addFeature", "(Ljava/lang/String;)Landroid/media/MediaRoute2Info$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.Builder.html#addFeatures(java.util.Collection)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.Collection"/></param>
            /// <returns><see cref="Android.Media.MediaRoute2Info.Builder"/></returns>
            public Android.Media.MediaRoute2Info.Builder AddFeatures(Java.Util.Collection<Java.Lang.String> arg0)
            {
                return IExecuteWithSignature<Android.Media.MediaRoute2Info.Builder>("addFeatures", "(Ljava/util/Collection;)Landroid/media/MediaRoute2Info$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.Builder.html#clearFeatures()"/>
            /// </summary>
            /// <returns><see cref="Android.Media.MediaRoute2Info.Builder"/></returns>
            public Android.Media.MediaRoute2Info.Builder ClearFeatures()
            {
                return IExecuteWithSignature<Android.Media.MediaRoute2Info.Builder>("clearFeatures", "()Landroid/media/MediaRoute2Info$Builder;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.Builder.html#setClientPackageName(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Media.MediaRoute2Info.Builder"/></returns>
            public Android.Media.MediaRoute2Info.Builder SetClientPackageName(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Media.MediaRoute2Info.Builder>("setClientPackageName", "(Ljava/lang/String;)Landroid/media/MediaRoute2Info$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.Builder.html#setConnectionState(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.MediaRoute2Info.Builder"/></returns>
            public Android.Media.MediaRoute2Info.Builder SetConnectionState(int arg0)
            {
                return IExecuteWithSignature<Android.Media.MediaRoute2Info.Builder>("setConnectionState", "(I)Landroid/media/MediaRoute2Info$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.Builder.html#setDeduplicationIds(java.util.Set)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.Set"/></param>
            /// <returns><see cref="Android.Media.MediaRoute2Info.Builder"/></returns>
            public Android.Media.MediaRoute2Info.Builder SetDeduplicationIds(Java.Util.Set<Java.Lang.String> arg0)
            {
                return IExecuteWithSignature<Android.Media.MediaRoute2Info.Builder>("setDeduplicationIds", "(Ljava/util/Set;)Landroid/media/MediaRoute2Info$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.Builder.html#setDescription(java.lang.CharSequence)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
            /// <returns><see cref="Android.Media.MediaRoute2Info.Builder"/></returns>
            public Android.Media.MediaRoute2Info.Builder SetDescription(Java.Lang.CharSequence arg0)
            {
                return IExecuteWithSignature<Android.Media.MediaRoute2Info.Builder>("setDescription", "(Ljava/lang/CharSequence;)Landroid/media/MediaRoute2Info$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.Builder.html#setExtras(android.os.Bundle)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Bundle"/></param>
            /// <returns><see cref="Android.Media.MediaRoute2Info.Builder"/></returns>
            public Android.Media.MediaRoute2Info.Builder SetExtras(Android.Os.Bundle arg0)
            {
                return IExecuteWithSignature<Android.Media.MediaRoute2Info.Builder>("setExtras", "(Landroid/os/Bundle;)Landroid/media/MediaRoute2Info$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.Builder.html#setIconUri(android.net.Uri)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
            /// <returns><see cref="Android.Media.MediaRoute2Info.Builder"/></returns>
            public Android.Media.MediaRoute2Info.Builder SetIconUri(Android.Net.Uri arg0)
            {
                return IExecuteWithSignature<Android.Media.MediaRoute2Info.Builder>("setIconUri", "(Landroid/net/Uri;)Landroid/media/MediaRoute2Info$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.Builder.html#setSuitabilityStatus(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.MediaRoute2Info.Builder"/></returns>
            public Android.Media.MediaRoute2Info.Builder SetSuitabilityStatus(int arg0)
            {
                return IExecuteWithSignature<Android.Media.MediaRoute2Info.Builder>("setSuitabilityStatus", "(I)Landroid/media/MediaRoute2Info$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.Builder.html#setType(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.MediaRoute2Info.Builder"/></returns>
            public Android.Media.MediaRoute2Info.Builder SetType(int arg0)
            {
                return IExecuteWithSignature<Android.Media.MediaRoute2Info.Builder>("setType", "(I)Landroid/media/MediaRoute2Info$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.Builder.html#setVisibilityPublic()"/>
            /// </summary>
            /// <returns><see cref="Android.Media.MediaRoute2Info.Builder"/></returns>
            public Android.Media.MediaRoute2Info.Builder SetVisibilityPublic()
            {
                return IExecuteWithSignature<Android.Media.MediaRoute2Info.Builder>("setVisibilityPublic", "()Landroid/media/MediaRoute2Info$Builder;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.Builder.html#setVisibilityRestricted(java.util.Set)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.Set"/></param>
            /// <returns><see cref="Android.Media.MediaRoute2Info.Builder"/></returns>
            public Android.Media.MediaRoute2Info.Builder SetVisibilityRestricted(Java.Util.Set<Java.Lang.String> arg0)
            {
                return IExecuteWithSignature<Android.Media.MediaRoute2Info.Builder>("setVisibilityRestricted", "(Ljava/util/Set;)Landroid/media/MediaRoute2Info$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.Builder.html#setVolume(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.MediaRoute2Info.Builder"/></returns>
            public Android.Media.MediaRoute2Info.Builder SetVolume(int arg0)
            {
                return IExecuteWithSignature<Android.Media.MediaRoute2Info.Builder>("setVolume", "(I)Landroid/media/MediaRoute2Info$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.Builder.html#setVolumeHandling(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.MediaRoute2Info.Builder"/></returns>
            public Android.Media.MediaRoute2Info.Builder SetVolumeHandling(int arg0)
            {
                return IExecuteWithSignature<Android.Media.MediaRoute2Info.Builder>("setVolumeHandling", "(I)Landroid/media/MediaRoute2Info$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRoute2Info.Builder.html#setVolumeMax(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.MediaRoute2Info.Builder"/></returns>
            public Android.Media.MediaRoute2Info.Builder SetVolumeMax(int arg0)
            {
                return IExecuteWithSignature<Android.Media.MediaRoute2Info.Builder>("setVolumeMax", "(I)Landroid/media/MediaRoute2Info$Builder;", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
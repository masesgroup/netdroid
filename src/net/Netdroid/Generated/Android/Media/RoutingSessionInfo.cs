/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media
{
    #region RoutingSessionInfo declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.html"/>
    /// </summary>
    public partial class RoutingSessionInfo : Android.Os.Parcelable
    {
        const string _bridgeClassName = "android.media.RoutingSessionInfo";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public RoutingSessionInfo() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public RoutingSessionInfo(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region Builder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.Builder.html"/>
        /// </summary>
        public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
        {
            const string _bridgeClassName = "android.media.RoutingSessionInfo$Builder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Builder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Builder(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region RoutingSessionInfo implementation
    public partial class RoutingSessionInfo
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.html#TRANSFER_REASON_APP"/>
        /// </summary>
        public static int TRANSFER_REASON_APP { get { if (!_TRANSFER_REASON_APPReady) { _TRANSFER_REASON_APPContent = SGetField<int>(LocalBridgeClazz, "TRANSFER_REASON_APP"); _TRANSFER_REASON_APPReady = true; } return _TRANSFER_REASON_APPContent; } }
        private static int _TRANSFER_REASON_APPContent = default;
        private static bool _TRANSFER_REASON_APPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.html#TRANSFER_REASON_FALLBACK"/>
        /// </summary>
        public static int TRANSFER_REASON_FALLBACK { get { if (!_TRANSFER_REASON_FALLBACKReady) { _TRANSFER_REASON_FALLBACKContent = SGetField<int>(LocalBridgeClazz, "TRANSFER_REASON_FALLBACK"); _TRANSFER_REASON_FALLBACKReady = true; } return _TRANSFER_REASON_FALLBACKContent; } }
        private static int _TRANSFER_REASON_FALLBACKContent = default;
        private static bool _TRANSFER_REASON_FALLBACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.html#TRANSFER_REASON_SYSTEM_REQUEST"/>
        /// </summary>
        public static int TRANSFER_REASON_SYSTEM_REQUEST { get { if (!_TRANSFER_REASON_SYSTEM_REQUESTReady) { _TRANSFER_REASON_SYSTEM_REQUESTContent = SGetField<int>(LocalBridgeClazz, "TRANSFER_REASON_SYSTEM_REQUEST"); _TRANSFER_REASON_SYSTEM_REQUESTReady = true; } return _TRANSFER_REASON_SYSTEM_REQUESTContent; } }
        private static int _TRANSFER_REASON_SYSTEM_REQUESTContent = default;
        private static bool _TRANSFER_REASON_SYSTEM_REQUESTReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.html#getControlHints()"/>
        /// </summary>
        /// <returns><see cref="Android.Os.Bundle"/></returns>
        public Android.Os.Bundle GetControlHints()
        {
            return IExecuteWithSignature<Android.Os.Bundle>("getControlHints", "()Landroid/os/Bundle;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.html#getTransferReason()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetTransferReason()
        {
            return IExecuteWithSignature<int>("getTransferReason", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.html#getVolume()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetVolume()
        {
            return IExecuteWithSignature<int>("getVolume", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.html#getVolumeHandling()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetVolumeHandling()
        {
            return IExecuteWithSignature<int>("getVolumeHandling", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.html#getVolumeMax()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetVolumeMax()
        {
            return IExecuteWithSignature<int>("getVolumeMax", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.html#getName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetName()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getName", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.html#getClientPackageName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetClientPackageName()
        {
            return IExecuteWithSignature<Java.Lang.String>("getClientPackageName", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.html#getId()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetId()
        {
            return IExecuteWithSignature<Java.Lang.String>("getId", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.html#getDeselectableRoutes()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Java.Lang.String> GetDeselectableRoutes()
        {
            return IExecuteWithSignature<Java.Util.List<Java.Lang.String>>("getDeselectableRoutes", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.html#getSelectableRoutes()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Java.Lang.String> GetSelectableRoutes()
        {
            return IExecuteWithSignature<Java.Util.List<Java.Lang.String>>("getSelectableRoutes", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.html#getSelectedRoutes()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Java.Lang.String> GetSelectedRoutes()
        {
            return IExecuteWithSignature<Java.Util.List<Java.Lang.String>>("getSelectedRoutes", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.html#getTransferableRoutes()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Java.Lang.String> GetTransferableRoutes()
        {
            return IExecuteWithSignature<Java.Util.List<Java.Lang.String>>("getTransferableRoutes", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecute("writeToParcel", arg0, arg1);
        }
    
        #endregion
    
        #region Nested classes
        #region Builder implementation
        public partial class Builder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.Builder.html#%3Cinit%3E(android.media.RoutingSessionInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.RoutingSessionInfo"/></param>
            public Builder(Android.Media.RoutingSessionInfo arg0)
                : base(arg0)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.Builder.html#%3Cinit%3E(java.lang.String,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            public Builder(Java.Lang.String arg0, Java.Lang.String arg1)
                : base(arg0, arg1)
            {
            }
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Media.RoutingSessionInfo"/></returns>
            public Android.Media.RoutingSessionInfo Build()
            {
                return IExecuteWithSignature<Android.Media.RoutingSessionInfo>("build", "()Landroid/media/RoutingSessionInfo;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.Builder.html#addDeselectableRoute(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Media.RoutingSessionInfo.Builder"/></returns>
            public Android.Media.RoutingSessionInfo.Builder AddDeselectableRoute(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Media.RoutingSessionInfo.Builder>("addDeselectableRoute", "(Ljava/lang/String;)Landroid/media/RoutingSessionInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.Builder.html#addSelectableRoute(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Media.RoutingSessionInfo.Builder"/></returns>
            public Android.Media.RoutingSessionInfo.Builder AddSelectableRoute(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Media.RoutingSessionInfo.Builder>("addSelectableRoute", "(Ljava/lang/String;)Landroid/media/RoutingSessionInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.Builder.html#addSelectedRoute(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Media.RoutingSessionInfo.Builder"/></returns>
            public Android.Media.RoutingSessionInfo.Builder AddSelectedRoute(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Media.RoutingSessionInfo.Builder>("addSelectedRoute", "(Ljava/lang/String;)Landroid/media/RoutingSessionInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.Builder.html#addTransferableRoute(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Media.RoutingSessionInfo.Builder"/></returns>
            public Android.Media.RoutingSessionInfo.Builder AddTransferableRoute(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Media.RoutingSessionInfo.Builder>("addTransferableRoute", "(Ljava/lang/String;)Landroid/media/RoutingSessionInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.Builder.html#clearDeselectableRoutes()"/>
            /// </summary>
            /// <returns><see cref="Android.Media.RoutingSessionInfo.Builder"/></returns>
            public Android.Media.RoutingSessionInfo.Builder ClearDeselectableRoutes()
            {
                return IExecuteWithSignature<Android.Media.RoutingSessionInfo.Builder>("clearDeselectableRoutes", "()Landroid/media/RoutingSessionInfo$Builder;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.Builder.html#clearSelectableRoutes()"/>
            /// </summary>
            /// <returns><see cref="Android.Media.RoutingSessionInfo.Builder"/></returns>
            public Android.Media.RoutingSessionInfo.Builder ClearSelectableRoutes()
            {
                return IExecuteWithSignature<Android.Media.RoutingSessionInfo.Builder>("clearSelectableRoutes", "()Landroid/media/RoutingSessionInfo$Builder;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.Builder.html#clearSelectedRoutes()"/>
            /// </summary>
            /// <returns><see cref="Android.Media.RoutingSessionInfo.Builder"/></returns>
            public Android.Media.RoutingSessionInfo.Builder ClearSelectedRoutes()
            {
                return IExecuteWithSignature<Android.Media.RoutingSessionInfo.Builder>("clearSelectedRoutes", "()Landroid/media/RoutingSessionInfo$Builder;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.Builder.html#clearTransferableRoutes()"/>
            /// </summary>
            /// <returns><see cref="Android.Media.RoutingSessionInfo.Builder"/></returns>
            public Android.Media.RoutingSessionInfo.Builder ClearTransferableRoutes()
            {
                return IExecuteWithSignature<Android.Media.RoutingSessionInfo.Builder>("clearTransferableRoutes", "()Landroid/media/RoutingSessionInfo$Builder;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.Builder.html#removeDeselectableRoute(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Media.RoutingSessionInfo.Builder"/></returns>
            public Android.Media.RoutingSessionInfo.Builder RemoveDeselectableRoute(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Media.RoutingSessionInfo.Builder>("removeDeselectableRoute", "(Ljava/lang/String;)Landroid/media/RoutingSessionInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.Builder.html#removeSelectableRoute(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Media.RoutingSessionInfo.Builder"/></returns>
            public Android.Media.RoutingSessionInfo.Builder RemoveSelectableRoute(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Media.RoutingSessionInfo.Builder>("removeSelectableRoute", "(Ljava/lang/String;)Landroid/media/RoutingSessionInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.Builder.html#removeSelectedRoute(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Media.RoutingSessionInfo.Builder"/></returns>
            public Android.Media.RoutingSessionInfo.Builder RemoveSelectedRoute(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Media.RoutingSessionInfo.Builder>("removeSelectedRoute", "(Ljava/lang/String;)Landroid/media/RoutingSessionInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.Builder.html#removeTransferableRoute(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Media.RoutingSessionInfo.Builder"/></returns>
            public Android.Media.RoutingSessionInfo.Builder RemoveTransferableRoute(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Media.RoutingSessionInfo.Builder>("removeTransferableRoute", "(Ljava/lang/String;)Landroid/media/RoutingSessionInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.Builder.html#setControlHints(android.os.Bundle)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Bundle"/></param>
            /// <returns><see cref="Android.Media.RoutingSessionInfo.Builder"/></returns>
            public Android.Media.RoutingSessionInfo.Builder SetControlHints(Android.Os.Bundle arg0)
            {
                return IExecuteWithSignature<Android.Media.RoutingSessionInfo.Builder>("setControlHints", "(Landroid/os/Bundle;)Landroid/media/RoutingSessionInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.Builder.html#setName(java.lang.CharSequence)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
            /// <returns><see cref="Android.Media.RoutingSessionInfo.Builder"/></returns>
            public Android.Media.RoutingSessionInfo.Builder SetName(Java.Lang.CharSequence arg0)
            {
                return IExecuteWithSignature<Android.Media.RoutingSessionInfo.Builder>("setName", "(Ljava/lang/CharSequence;)Landroid/media/RoutingSessionInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.Builder.html#setTransferInitiator(android.os.UserHandle,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.UserHandle"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Media.RoutingSessionInfo.Builder"/></returns>
            public Android.Media.RoutingSessionInfo.Builder SetTransferInitiator(Android.Os.UserHandle arg0, Java.Lang.String arg1)
            {
                return IExecute<Android.Media.RoutingSessionInfo.Builder>("setTransferInitiator", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.Builder.html#setTransferReason(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.RoutingSessionInfo.Builder"/></returns>
            public Android.Media.RoutingSessionInfo.Builder SetTransferReason(int arg0)
            {
                return IExecuteWithSignature<Android.Media.RoutingSessionInfo.Builder>("setTransferReason", "(I)Landroid/media/RoutingSessionInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.Builder.html#setVolume(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.RoutingSessionInfo.Builder"/></returns>
            public Android.Media.RoutingSessionInfo.Builder SetVolume(int arg0)
            {
                return IExecuteWithSignature<Android.Media.RoutingSessionInfo.Builder>("setVolume", "(I)Landroid/media/RoutingSessionInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.Builder.html#setVolumeHandling(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.RoutingSessionInfo.Builder"/></returns>
            public Android.Media.RoutingSessionInfo.Builder SetVolumeHandling(int arg0)
            {
                return IExecuteWithSignature<Android.Media.RoutingSessionInfo.Builder>("setVolumeHandling", "(I)Landroid/media/RoutingSessionInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/RoutingSessionInfo.Builder.html#setVolumeMax(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.RoutingSessionInfo.Builder"/></returns>
            public Android.Media.RoutingSessionInfo.Builder SetVolumeMax(int arg0)
            {
                return IExecuteWithSignature<Android.Media.RoutingSessionInfo.Builder>("setVolumeMax", "(I)Landroid/media/RoutingSessionInfo$Builder;", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
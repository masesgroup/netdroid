/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media.Quality
{
    #region ParameterCapability declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/media/quality/ParameterCapability.html"/>
    /// </summary>
    public partial class ParameterCapability : Android.Os.Parcelable
    {
        const string _bridgeClassName = "android.media.quality.ParameterCapability";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public ParameterCapability() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public ParameterCapability(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public ParameterCapability(params object[] args) : base(args) { }
    
        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region ParameterCapability implementation
    public partial class ParameterCapability
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/ParameterCapability.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/ParameterCapability.html#TYPE_DOUBLE"/>
        /// </summary>
        public static int TYPE_DOUBLE { get { if (!_TYPE_DOUBLEReady) { _TYPE_DOUBLEContent = SGetField<int>(LocalBridgeClazz, "TYPE_DOUBLE"); _TYPE_DOUBLEReady = true; } return _TYPE_DOUBLEContent; } }
        private static int _TYPE_DOUBLEContent = default;
        private static bool _TYPE_DOUBLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/ParameterCapability.html#TYPE_INT"/>
        /// </summary>
        public static int TYPE_INT { get { if (!_TYPE_INTReady) { _TYPE_INTContent = SGetField<int>(LocalBridgeClazz, "TYPE_INT"); _TYPE_INTReady = true; } return _TYPE_INTContent; } }
        private static int _TYPE_INTContent = default;
        private static bool _TYPE_INTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/ParameterCapability.html#TYPE_LONG"/>
        /// </summary>
        public static int TYPE_LONG { get { if (!_TYPE_LONGReady) { _TYPE_LONGContent = SGetField<int>(LocalBridgeClazz, "TYPE_LONG"); _TYPE_LONGReady = true; } return _TYPE_LONGContent; } }
        private static int _TYPE_LONGContent = default;
        private static bool _TYPE_LONGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/ParameterCapability.html#TYPE_NONE"/>
        /// </summary>
        public static int TYPE_NONE { get { if (!_TYPE_NONEReady) { _TYPE_NONEContent = SGetField<int>(LocalBridgeClazz, "TYPE_NONE"); _TYPE_NONEReady = true; } return _TYPE_NONEContent; } }
        private static int _TYPE_NONEContent = default;
        private static bool _TYPE_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/ParameterCapability.html#TYPE_STRING"/>
        /// </summary>
        public static int TYPE_STRING { get { if (!_TYPE_STRINGReady) { _TYPE_STRINGContent = SGetField<int>(LocalBridgeClazz, "TYPE_STRING"); _TYPE_STRINGReady = true; } return _TYPE_STRINGContent; } }
        private static int _TYPE_STRINGContent = default;
        private static bool _TYPE_STRINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/ParameterCapability.html#CAPABILITY_DEFAULT"/>
        /// </summary>
        public static Java.Lang.String CAPABILITY_DEFAULT { get { if (!_CAPABILITY_DEFAULTReady) { _CAPABILITY_DEFAULTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CAPABILITY_DEFAULT"); _CAPABILITY_DEFAULTReady = true; } return _CAPABILITY_DEFAULTContent; } }
        private static Java.Lang.String _CAPABILITY_DEFAULTContent = default;
        private static bool _CAPABILITY_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/ParameterCapability.html#CAPABILITY_ENUM"/>
        /// </summary>
        public static Java.Lang.String CAPABILITY_ENUM { get { if (!_CAPABILITY_ENUMReady) { _CAPABILITY_ENUMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CAPABILITY_ENUM"); _CAPABILITY_ENUMReady = true; } return _CAPABILITY_ENUMContent; } }
        private static Java.Lang.String _CAPABILITY_ENUMContent = default;
        private static bool _CAPABILITY_ENUMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/ParameterCapability.html#CAPABILITY_MAX"/>
        /// </summary>
        public static Java.Lang.String CAPABILITY_MAX { get { if (!_CAPABILITY_MAXReady) { _CAPABILITY_MAXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CAPABILITY_MAX"); _CAPABILITY_MAXReady = true; } return _CAPABILITY_MAXContent; } }
        private static Java.Lang.String _CAPABILITY_MAXContent = default;
        private static bool _CAPABILITY_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/ParameterCapability.html#CAPABILITY_MIN"/>
        /// </summary>
        public static Java.Lang.String CAPABILITY_MIN { get { if (!_CAPABILITY_MINReady) { _CAPABILITY_MINContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CAPABILITY_MIN"); _CAPABILITY_MINReady = true; } return _CAPABILITY_MINContent; } }
        private static Java.Lang.String _CAPABILITY_MINContent = default;
        private static bool _CAPABILITY_MINReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/ParameterCapability.html#getCapabilities()"/>
        /// </summary>
        /// <returns><see cref="Android.Os.Bundle"/></returns>
        public Android.Os.Bundle GetCapabilities()
        {
            return IExecuteWithSignature<Android.Os.Bundle>("getCapabilities", "()Landroid/os/Bundle;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/ParameterCapability.html#isSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsSupported()
        {
            return IExecuteWithSignature<bool>("isSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/ParameterCapability.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/ParameterCapability.html#getParameterType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetParameterType()
        {
            return IExecuteWithSignature<int>("getParameterType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/ParameterCapability.html#getParameterName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetParameterName()
        {
            return IExecuteWithSignature<Java.Lang.String>("getParameterName", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/ParameterCapability.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
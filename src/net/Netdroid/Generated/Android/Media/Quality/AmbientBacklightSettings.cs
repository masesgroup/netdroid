/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media.Quality
{
    #region AmbientBacklightSettings declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/media/quality/AmbientBacklightSettings.html"/>
    /// </summary>
    public partial class AmbientBacklightSettings : Android.Os.Parcelable
    {
        const string _bridgeClassName = "android.media.quality.AmbientBacklightSettings";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public AmbientBacklightSettings() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public AmbientBacklightSettings(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public AmbientBacklightSettings(params object[] args) : base(args) { }
    
        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region AmbientBacklightSettings implementation
    public partial class AmbientBacklightSettings
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/AmbientBacklightSettings.html#%3Cinit%3E(int,int,int,int,int,boolean,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="bool"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        public AmbientBacklightSettings(int arg0, int arg1, int arg2, int arg3, int arg4, bool arg5, int arg6)
            : base(arg0, arg1, arg2, arg3, arg4, arg5, arg6)
        {
        }
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/AmbientBacklightSettings.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/AmbientBacklightSettings.html#SOURCE_AUDIO"/>
        /// </summary>
        public static int SOURCE_AUDIO { get { if (!_SOURCE_AUDIOReady) { _SOURCE_AUDIOContent = SGetField<int>(LocalBridgeClazz, "SOURCE_AUDIO"); _SOURCE_AUDIOReady = true; } return _SOURCE_AUDIOContent; } }
        private static int _SOURCE_AUDIOContent = default;
        private static bool _SOURCE_AUDIOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/AmbientBacklightSettings.html#SOURCE_AUDIO_VIDEO"/>
        /// </summary>
        public static int SOURCE_AUDIO_VIDEO { get { if (!_SOURCE_AUDIO_VIDEOReady) { _SOURCE_AUDIO_VIDEOContent = SGetField<int>(LocalBridgeClazz, "SOURCE_AUDIO_VIDEO"); _SOURCE_AUDIO_VIDEOReady = true; } return _SOURCE_AUDIO_VIDEOContent; } }
        private static int _SOURCE_AUDIO_VIDEOContent = default;
        private static bool _SOURCE_AUDIO_VIDEOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/AmbientBacklightSettings.html#SOURCE_NONE"/>
        /// </summary>
        public static int SOURCE_NONE { get { if (!_SOURCE_NONEReady) { _SOURCE_NONEContent = SGetField<int>(LocalBridgeClazz, "SOURCE_NONE"); _SOURCE_NONEReady = true; } return _SOURCE_NONEContent; } }
        private static int _SOURCE_NONEContent = default;
        private static bool _SOURCE_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/AmbientBacklightSettings.html#SOURCE_VIDEO"/>
        /// </summary>
        public static int SOURCE_VIDEO { get { if (!_SOURCE_VIDEOReady) { _SOURCE_VIDEOContent = SGetField<int>(LocalBridgeClazz, "SOURCE_VIDEO"); _SOURCE_VIDEOReady = true; } return _SOURCE_VIDEOContent; } }
        private static int _SOURCE_VIDEOContent = default;
        private static bool _SOURCE_VIDEOReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/AmbientBacklightSettings.html#isLetterboxOmitted()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsLetterboxOmitted()
        {
            return IExecuteWithSignature<bool>("isLetterboxOmitted", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/AmbientBacklightSettings.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/AmbientBacklightSettings.html#getColorFormat()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetColorFormat()
        {
            return IExecuteWithSignature<int>("getColorFormat", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/AmbientBacklightSettings.html#getHorizontalZonesCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetHorizontalZonesCount()
        {
            return IExecuteWithSignature<int>("getHorizontalZonesCount", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/AmbientBacklightSettings.html#getMaxFps()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMaxFps()
        {
            return IExecuteWithSignature<int>("getMaxFps", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/AmbientBacklightSettings.html#getSource()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetSource()
        {
            return IExecuteWithSignature<int>("getSource", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/AmbientBacklightSettings.html#getThreshold()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetThreshold()
        {
            return IExecuteWithSignature<int>("getThreshold", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/AmbientBacklightSettings.html#getVerticalZonesCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetVerticalZonesCount()
        {
            return IExecuteWithSignature<int>("getVerticalZonesCount", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/AmbientBacklightSettings.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media.Quality
{
    #region MediaQualityContract declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.html"/>
    /// </summary>
    public partial class MediaQualityContract : MASES.JCOBridge.C2JBridge.JVMBridgeBase<MediaQualityContract>
    {
        const string _bridgeClassName = "android.media.quality.MediaQualityContract";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public MediaQualityContract() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public MediaQualityContract(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public MediaQualityContract(params object[] args) : base(args) { }
    
        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region PictureQuality declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.PictureQuality.html"/>
        /// </summary>
        public partial class PictureQuality : MASES.JCOBridge.C2JBridge.JVMBridgeBase<PictureQuality>
        {
            const string _bridgeClassName = "android.media.quality.MediaQualityContract$PictureQuality";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public PictureQuality() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public PictureQuality(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public PictureQuality(params object[] args) : base(args) { }
        
            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => false;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => false;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region SoundQuality declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.SoundQuality.html"/>
        /// </summary>
        public partial class SoundQuality : MASES.JCOBridge.C2JBridge.JVMBridgeBase<SoundQuality>
        {
            const string _bridgeClassName = "android.media.quality.MediaQualityContract$SoundQuality";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public SoundQuality() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public SoundQuality(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public SoundQuality(params object[] args) : base(args) { }
        
            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => false;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => false;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region MediaQualityContract implementation
    public partial class MediaQualityContract
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.html#LEVEL_HIGH"/>
        /// </summary>
        public static Java.Lang.String LEVEL_HIGH { get { if (!_LEVEL_HIGHReady) { _LEVEL_HIGHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LEVEL_HIGH"); _LEVEL_HIGHReady = true; } return _LEVEL_HIGHContent; } }
        private static Java.Lang.String _LEVEL_HIGHContent = default;
        private static bool _LEVEL_HIGHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.html#LEVEL_LOW"/>
        /// </summary>
        public static Java.Lang.String LEVEL_LOW { get { if (!_LEVEL_LOWReady) { _LEVEL_LOWContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LEVEL_LOW"); _LEVEL_LOWReady = true; } return _LEVEL_LOWContent; } }
        private static Java.Lang.String _LEVEL_LOWContent = default;
        private static bool _LEVEL_LOWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.html#LEVEL_MEDIUM"/>
        /// </summary>
        public static Java.Lang.String LEVEL_MEDIUM { get { if (!_LEVEL_MEDIUMReady) { _LEVEL_MEDIUMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LEVEL_MEDIUM"); _LEVEL_MEDIUMReady = true; } return _LEVEL_MEDIUMContent; } }
        private static Java.Lang.String _LEVEL_MEDIUMContent = default;
        private static bool _LEVEL_MEDIUMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.html#LEVEL_OFF"/>
        /// </summary>
        public static Java.Lang.String LEVEL_OFF { get { if (!_LEVEL_OFFReady) { _LEVEL_OFFContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LEVEL_OFF"); _LEVEL_OFFReady = true; } return _LEVEL_OFFContent; } }
        private static Java.Lang.String _LEVEL_OFFContent = default;
        private static bool _LEVEL_OFFReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
    
        #endregion
    
        #region Nested classes
        #region PictureQuality implementation
        public partial class PictureQuality
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.PictureQuality.html#PARAMETER_AUTO_PICTURE_QUALITY_ENABLED"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_AUTO_PICTURE_QUALITY_ENABLED { get { if (!_PARAMETER_AUTO_PICTURE_QUALITY_ENABLEDReady) { _PARAMETER_AUTO_PICTURE_QUALITY_ENABLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_AUTO_PICTURE_QUALITY_ENABLED"); _PARAMETER_AUTO_PICTURE_QUALITY_ENABLEDReady = true; } return _PARAMETER_AUTO_PICTURE_QUALITY_ENABLEDContent; } }
            private static Java.Lang.String _PARAMETER_AUTO_PICTURE_QUALITY_ENABLEDContent = default;
            private static bool _PARAMETER_AUTO_PICTURE_QUALITY_ENABLEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.PictureQuality.html#PARAMETER_AUTO_SUPER_RESOLUTION_ENABLED"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_AUTO_SUPER_RESOLUTION_ENABLED { get { if (!_PARAMETER_AUTO_SUPER_RESOLUTION_ENABLEDReady) { _PARAMETER_AUTO_SUPER_RESOLUTION_ENABLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_AUTO_SUPER_RESOLUTION_ENABLED"); _PARAMETER_AUTO_SUPER_RESOLUTION_ENABLEDReady = true; } return _PARAMETER_AUTO_SUPER_RESOLUTION_ENABLEDContent; } }
            private static Java.Lang.String _PARAMETER_AUTO_SUPER_RESOLUTION_ENABLEDContent = default;
            private static bool _PARAMETER_AUTO_SUPER_RESOLUTION_ENABLEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.PictureQuality.html#PARAMETER_BLUE_STRETCH"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_BLUE_STRETCH { get { if (!_PARAMETER_BLUE_STRETCHReady) { _PARAMETER_BLUE_STRETCHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_BLUE_STRETCH"); _PARAMETER_BLUE_STRETCHReady = true; } return _PARAMETER_BLUE_STRETCHContent; } }
            private static Java.Lang.String _PARAMETER_BLUE_STRETCHContent = default;
            private static bool _PARAMETER_BLUE_STRETCHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.PictureQuality.html#PARAMETER_BRIGHTNESS"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_BRIGHTNESS { get { if (!_PARAMETER_BRIGHTNESSReady) { _PARAMETER_BRIGHTNESSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_BRIGHTNESS"); _PARAMETER_BRIGHTNESSReady = true; } return _PARAMETER_BRIGHTNESSContent; } }
            private static Java.Lang.String _PARAMETER_BRIGHTNESSContent = default;
            private static bool _PARAMETER_BRIGHTNESSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.PictureQuality.html#PARAMETER_COLOR_TEMPERATURE"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_COLOR_TEMPERATURE { get { if (!_PARAMETER_COLOR_TEMPERATUREReady) { _PARAMETER_COLOR_TEMPERATUREContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_COLOR_TEMPERATURE"); _PARAMETER_COLOR_TEMPERATUREReady = true; } return _PARAMETER_COLOR_TEMPERATUREContent; } }
            private static Java.Lang.String _PARAMETER_COLOR_TEMPERATUREContent = default;
            private static bool _PARAMETER_COLOR_TEMPERATUREReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.PictureQuality.html#PARAMETER_COLOR_TUNE"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_COLOR_TUNE { get { if (!_PARAMETER_COLOR_TUNEReady) { _PARAMETER_COLOR_TUNEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_COLOR_TUNE"); _PARAMETER_COLOR_TUNEReady = true; } return _PARAMETER_COLOR_TUNEContent; } }
            private static Java.Lang.String _PARAMETER_COLOR_TUNEContent = default;
            private static bool _PARAMETER_COLOR_TUNEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.PictureQuality.html#PARAMETER_COLOR_TUNER_BLUE_GAIN"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_COLOR_TUNER_BLUE_GAIN { get { if (!_PARAMETER_COLOR_TUNER_BLUE_GAINReady) { _PARAMETER_COLOR_TUNER_BLUE_GAINContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_COLOR_TUNER_BLUE_GAIN"); _PARAMETER_COLOR_TUNER_BLUE_GAINReady = true; } return _PARAMETER_COLOR_TUNER_BLUE_GAINContent; } }
            private static Java.Lang.String _PARAMETER_COLOR_TUNER_BLUE_GAINContent = default;
            private static bool _PARAMETER_COLOR_TUNER_BLUE_GAINReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.PictureQuality.html#PARAMETER_COLOR_TUNER_BLUE_OFFSET"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_COLOR_TUNER_BLUE_OFFSET { get { if (!_PARAMETER_COLOR_TUNER_BLUE_OFFSETReady) { _PARAMETER_COLOR_TUNER_BLUE_OFFSETContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_COLOR_TUNER_BLUE_OFFSET"); _PARAMETER_COLOR_TUNER_BLUE_OFFSETReady = true; } return _PARAMETER_COLOR_TUNER_BLUE_OFFSETContent; } }
            private static Java.Lang.String _PARAMETER_COLOR_TUNER_BLUE_OFFSETContent = default;
            private static bool _PARAMETER_COLOR_TUNER_BLUE_OFFSETReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.PictureQuality.html#PARAMETER_COLOR_TUNER_BRIGHTNESS"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_COLOR_TUNER_BRIGHTNESS { get { if (!_PARAMETER_COLOR_TUNER_BRIGHTNESSReady) { _PARAMETER_COLOR_TUNER_BRIGHTNESSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_COLOR_TUNER_BRIGHTNESS"); _PARAMETER_COLOR_TUNER_BRIGHTNESSReady = true; } return _PARAMETER_COLOR_TUNER_BRIGHTNESSContent; } }
            private static Java.Lang.String _PARAMETER_COLOR_TUNER_BRIGHTNESSContent = default;
            private static bool _PARAMETER_COLOR_TUNER_BRIGHTNESSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.PictureQuality.html#PARAMETER_COLOR_TUNER_GREEN_GAIN"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_COLOR_TUNER_GREEN_GAIN { get { if (!_PARAMETER_COLOR_TUNER_GREEN_GAINReady) { _PARAMETER_COLOR_TUNER_GREEN_GAINContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_COLOR_TUNER_GREEN_GAIN"); _PARAMETER_COLOR_TUNER_GREEN_GAINReady = true; } return _PARAMETER_COLOR_TUNER_GREEN_GAINContent; } }
            private static Java.Lang.String _PARAMETER_COLOR_TUNER_GREEN_GAINContent = default;
            private static bool _PARAMETER_COLOR_TUNER_GREEN_GAINReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.PictureQuality.html#PARAMETER_COLOR_TUNER_GREEN_OFFSET"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_COLOR_TUNER_GREEN_OFFSET { get { if (!_PARAMETER_COLOR_TUNER_GREEN_OFFSETReady) { _PARAMETER_COLOR_TUNER_GREEN_OFFSETContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_COLOR_TUNER_GREEN_OFFSET"); _PARAMETER_COLOR_TUNER_GREEN_OFFSETReady = true; } return _PARAMETER_COLOR_TUNER_GREEN_OFFSETContent; } }
            private static Java.Lang.String _PARAMETER_COLOR_TUNER_GREEN_OFFSETContent = default;
            private static bool _PARAMETER_COLOR_TUNER_GREEN_OFFSETReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.PictureQuality.html#PARAMETER_COLOR_TUNER_HUE"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_COLOR_TUNER_HUE { get { if (!_PARAMETER_COLOR_TUNER_HUEReady) { _PARAMETER_COLOR_TUNER_HUEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_COLOR_TUNER_HUE"); _PARAMETER_COLOR_TUNER_HUEReady = true; } return _PARAMETER_COLOR_TUNER_HUEContent; } }
            private static Java.Lang.String _PARAMETER_COLOR_TUNER_HUEContent = default;
            private static bool _PARAMETER_COLOR_TUNER_HUEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.PictureQuality.html#PARAMETER_COLOR_TUNER_RED_GAIN"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_COLOR_TUNER_RED_GAIN { get { if (!_PARAMETER_COLOR_TUNER_RED_GAINReady) { _PARAMETER_COLOR_TUNER_RED_GAINContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_COLOR_TUNER_RED_GAIN"); _PARAMETER_COLOR_TUNER_RED_GAINReady = true; } return _PARAMETER_COLOR_TUNER_RED_GAINContent; } }
            private static Java.Lang.String _PARAMETER_COLOR_TUNER_RED_GAINContent = default;
            private static bool _PARAMETER_COLOR_TUNER_RED_GAINReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.PictureQuality.html#PARAMETER_COLOR_TUNER_RED_OFFSET"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_COLOR_TUNER_RED_OFFSET { get { if (!_PARAMETER_COLOR_TUNER_RED_OFFSETReady) { _PARAMETER_COLOR_TUNER_RED_OFFSETContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_COLOR_TUNER_RED_OFFSET"); _PARAMETER_COLOR_TUNER_RED_OFFSETReady = true; } return _PARAMETER_COLOR_TUNER_RED_OFFSETContent; } }
            private static Java.Lang.String _PARAMETER_COLOR_TUNER_RED_OFFSETContent = default;
            private static bool _PARAMETER_COLOR_TUNER_RED_OFFSETReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.PictureQuality.html#PARAMETER_COLOR_TUNER_SATURATION"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_COLOR_TUNER_SATURATION { get { if (!_PARAMETER_COLOR_TUNER_SATURATIONReady) { _PARAMETER_COLOR_TUNER_SATURATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_COLOR_TUNER_SATURATION"); _PARAMETER_COLOR_TUNER_SATURATIONReady = true; } return _PARAMETER_COLOR_TUNER_SATURATIONContent; } }
            private static Java.Lang.String _PARAMETER_COLOR_TUNER_SATURATIONContent = default;
            private static bool _PARAMETER_COLOR_TUNER_SATURATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.PictureQuality.html#PARAMETER_CONTRAST"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_CONTRAST { get { if (!_PARAMETER_CONTRASTReady) { _PARAMETER_CONTRASTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_CONTRAST"); _PARAMETER_CONTRASTReady = true; } return _PARAMETER_CONTRASTContent; } }
            private static Java.Lang.String _PARAMETER_CONTRASTContent = default;
            private static bool _PARAMETER_CONTRASTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.PictureQuality.html#PARAMETER_DECONTOUR"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_DECONTOUR { get { if (!_PARAMETER_DECONTOURReady) { _PARAMETER_DECONTOURContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_DECONTOUR"); _PARAMETER_DECONTOURReady = true; } return _PARAMETER_DECONTOURContent; } }
            private static Java.Lang.String _PARAMETER_DECONTOURContent = default;
            private static bool _PARAMETER_DECONTOURReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.PictureQuality.html#PARAMETER_DYNAMIC_LUMA_CONTROL"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_DYNAMIC_LUMA_CONTROL { get { if (!_PARAMETER_DYNAMIC_LUMA_CONTROLReady) { _PARAMETER_DYNAMIC_LUMA_CONTROLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_DYNAMIC_LUMA_CONTROL"); _PARAMETER_DYNAMIC_LUMA_CONTROLReady = true; } return _PARAMETER_DYNAMIC_LUMA_CONTROLContent; } }
            private static Java.Lang.String _PARAMETER_DYNAMIC_LUMA_CONTROLContent = default;
            private static bool _PARAMETER_DYNAMIC_LUMA_CONTROLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.PictureQuality.html#PARAMETER_FILM_MODE"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_FILM_MODE { get { if (!_PARAMETER_FILM_MODEReady) { _PARAMETER_FILM_MODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_FILM_MODE"); _PARAMETER_FILM_MODEReady = true; } return _PARAMETER_FILM_MODEContent; } }
            private static Java.Lang.String _PARAMETER_FILM_MODEContent = default;
            private static bool _PARAMETER_FILM_MODEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.PictureQuality.html#PARAMETER_FLESH_TONE"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_FLESH_TONE { get { if (!_PARAMETER_FLESH_TONEReady) { _PARAMETER_FLESH_TONEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_FLESH_TONE"); _PARAMETER_FLESH_TONEReady = true; } return _PARAMETER_FLESH_TONEContent; } }
            private static Java.Lang.String _PARAMETER_FLESH_TONEContent = default;
            private static bool _PARAMETER_FLESH_TONEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.PictureQuality.html#PARAMETER_GLOBAL_DIMMING"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_GLOBAL_DIMMING { get { if (!_PARAMETER_GLOBAL_DIMMINGReady) { _PARAMETER_GLOBAL_DIMMINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_GLOBAL_DIMMING"); _PARAMETER_GLOBAL_DIMMINGReady = true; } return _PARAMETER_GLOBAL_DIMMINGContent; } }
            private static Java.Lang.String _PARAMETER_GLOBAL_DIMMINGContent = default;
            private static bool _PARAMETER_GLOBAL_DIMMINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.PictureQuality.html#PARAMETER_HUE"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_HUE { get { if (!_PARAMETER_HUEReady) { _PARAMETER_HUEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_HUE"); _PARAMETER_HUEReady = true; } return _PARAMETER_HUEContent; } }
            private static Java.Lang.String _PARAMETER_HUEContent = default;
            private static bool _PARAMETER_HUEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.PictureQuality.html#PARAMETER_MPEG_NOISE_REDUCTION"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_MPEG_NOISE_REDUCTION { get { if (!_PARAMETER_MPEG_NOISE_REDUCTIONReady) { _PARAMETER_MPEG_NOISE_REDUCTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_MPEG_NOISE_REDUCTION"); _PARAMETER_MPEG_NOISE_REDUCTIONReady = true; } return _PARAMETER_MPEG_NOISE_REDUCTIONContent; } }
            private static Java.Lang.String _PARAMETER_MPEG_NOISE_REDUCTIONContent = default;
            private static bool _PARAMETER_MPEG_NOISE_REDUCTIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.PictureQuality.html#PARAMETER_NOISE_REDUCTION"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_NOISE_REDUCTION { get { if (!_PARAMETER_NOISE_REDUCTIONReady) { _PARAMETER_NOISE_REDUCTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_NOISE_REDUCTION"); _PARAMETER_NOISE_REDUCTIONReady = true; } return _PARAMETER_NOISE_REDUCTIONContent; } }
            private static Java.Lang.String _PARAMETER_NOISE_REDUCTIONContent = default;
            private static bool _PARAMETER_NOISE_REDUCTIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.PictureQuality.html#PARAMETER_SATURATION"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_SATURATION { get { if (!_PARAMETER_SATURATIONReady) { _PARAMETER_SATURATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_SATURATION"); _PARAMETER_SATURATIONReady = true; } return _PARAMETER_SATURATIONContent; } }
            private static Java.Lang.String _PARAMETER_SATURATIONContent = default;
            private static bool _PARAMETER_SATURATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.PictureQuality.html#PARAMETER_SHARPNESS"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_SHARPNESS { get { if (!_PARAMETER_SHARPNESSReady) { _PARAMETER_SHARPNESSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_SHARPNESS"); _PARAMETER_SHARPNESSReady = true; } return _PARAMETER_SHARPNESSContent; } }
            private static Java.Lang.String _PARAMETER_SHARPNESSContent = default;
            private static bool _PARAMETER_SHARPNESSReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region SoundQuality implementation
        public partial class SoundQuality
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.SoundQuality.html#PARAMETER_AUTO_VOLUME_CONTROL"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_AUTO_VOLUME_CONTROL { get { if (!_PARAMETER_AUTO_VOLUME_CONTROLReady) { _PARAMETER_AUTO_VOLUME_CONTROLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_AUTO_VOLUME_CONTROL"); _PARAMETER_AUTO_VOLUME_CONTROLReady = true; } return _PARAMETER_AUTO_VOLUME_CONTROLContent; } }
            private static Java.Lang.String _PARAMETER_AUTO_VOLUME_CONTROLContent = default;
            private static bool _PARAMETER_AUTO_VOLUME_CONTROLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.SoundQuality.html#PARAMETER_BALANCE"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_BALANCE { get { if (!_PARAMETER_BALANCEReady) { _PARAMETER_BALANCEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_BALANCE"); _PARAMETER_BALANCEReady = true; } return _PARAMETER_BALANCEContent; } }
            private static Java.Lang.String _PARAMETER_BALANCEContent = default;
            private static bool _PARAMETER_BALANCEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.SoundQuality.html#PARAMETER_BASS"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_BASS { get { if (!_PARAMETER_BASSReady) { _PARAMETER_BASSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_BASS"); _PARAMETER_BASSReady = true; } return _PARAMETER_BASSContent; } }
            private static Java.Lang.String _PARAMETER_BASSContent = default;
            private static bool _PARAMETER_BASSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.SoundQuality.html#PARAMETER_DIALOGUE_ENHANCER"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_DIALOGUE_ENHANCER { get { if (!_PARAMETER_DIALOGUE_ENHANCERReady) { _PARAMETER_DIALOGUE_ENHANCERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_DIALOGUE_ENHANCER"); _PARAMETER_DIALOGUE_ENHANCERReady = true; } return _PARAMETER_DIALOGUE_ENHANCERContent; } }
            private static Java.Lang.String _PARAMETER_DIALOGUE_ENHANCERContent = default;
            private static bool _PARAMETER_DIALOGUE_ENHANCERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.SoundQuality.html#PARAMETER_DIGITAL_OUTPUT_DELAY_MILLIS"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_DIGITAL_OUTPUT_DELAY_MILLIS { get { if (!_PARAMETER_DIGITAL_OUTPUT_DELAY_MILLISReady) { _PARAMETER_DIGITAL_OUTPUT_DELAY_MILLISContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_DIGITAL_OUTPUT_DELAY_MILLIS"); _PARAMETER_DIGITAL_OUTPUT_DELAY_MILLISReady = true; } return _PARAMETER_DIGITAL_OUTPUT_DELAY_MILLISContent; } }
            private static Java.Lang.String _PARAMETER_DIGITAL_OUTPUT_DELAY_MILLISContent = default;
            private static bool _PARAMETER_DIGITAL_OUTPUT_DELAY_MILLISReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.SoundQuality.html#PARAMETER_DIGITAL_OUTPUT_MODE"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_DIGITAL_OUTPUT_MODE { get { if (!_PARAMETER_DIGITAL_OUTPUT_MODEReady) { _PARAMETER_DIGITAL_OUTPUT_MODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_DIGITAL_OUTPUT_MODE"); _PARAMETER_DIGITAL_OUTPUT_MODEReady = true; } return _PARAMETER_DIGITAL_OUTPUT_MODEContent; } }
            private static Java.Lang.String _PARAMETER_DIGITAL_OUTPUT_MODEContent = default;
            private static bool _PARAMETER_DIGITAL_OUTPUT_MODEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.SoundQuality.html#PARAMETER_DOLBY_AUDIO_PROCESSING_DOLBY_ATMOS"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_DOLBY_AUDIO_PROCESSING_DOLBY_ATMOS { get { if (!_PARAMETER_DOLBY_AUDIO_PROCESSING_DOLBY_ATMOSReady) { _PARAMETER_DOLBY_AUDIO_PROCESSING_DOLBY_ATMOSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_DOLBY_AUDIO_PROCESSING_DOLBY_ATMOS"); _PARAMETER_DOLBY_AUDIO_PROCESSING_DOLBY_ATMOSReady = true; } return _PARAMETER_DOLBY_AUDIO_PROCESSING_DOLBY_ATMOSContent; } }
            private static Java.Lang.String _PARAMETER_DOLBY_AUDIO_PROCESSING_DOLBY_ATMOSContent = default;
            private static bool _PARAMETER_DOLBY_AUDIO_PROCESSING_DOLBY_ATMOSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.SoundQuality.html#PARAMETER_DOLBY_AUDIO_PROCESSING_SOUND_MODE"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_DOLBY_AUDIO_PROCESSING_SOUND_MODE { get { if (!_PARAMETER_DOLBY_AUDIO_PROCESSING_SOUND_MODEReady) { _PARAMETER_DOLBY_AUDIO_PROCESSING_SOUND_MODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_DOLBY_AUDIO_PROCESSING_SOUND_MODE"); _PARAMETER_DOLBY_AUDIO_PROCESSING_SOUND_MODEReady = true; } return _PARAMETER_DOLBY_AUDIO_PROCESSING_SOUND_MODEContent; } }
            private static Java.Lang.String _PARAMETER_DOLBY_AUDIO_PROCESSING_SOUND_MODEContent = default;
            private static bool _PARAMETER_DOLBY_AUDIO_PROCESSING_SOUND_MODEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.SoundQuality.html#PARAMETER_DOLBY_AUDIO_PROCESSING_SURROUND_VIRTUALIZER"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_DOLBY_AUDIO_PROCESSING_SURROUND_VIRTUALIZER { get { if (!_PARAMETER_DOLBY_AUDIO_PROCESSING_SURROUND_VIRTUALIZERReady) { _PARAMETER_DOLBY_AUDIO_PROCESSING_SURROUND_VIRTUALIZERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_DOLBY_AUDIO_PROCESSING_SURROUND_VIRTUALIZER"); _PARAMETER_DOLBY_AUDIO_PROCESSING_SURROUND_VIRTUALIZERReady = true; } return _PARAMETER_DOLBY_AUDIO_PROCESSING_SURROUND_VIRTUALIZERContent; } }
            private static Java.Lang.String _PARAMETER_DOLBY_AUDIO_PROCESSING_SURROUND_VIRTUALIZERContent = default;
            private static bool _PARAMETER_DOLBY_AUDIO_PROCESSING_SURROUND_VIRTUALIZERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.SoundQuality.html#PARAMETER_DOLBY_AUDIO_PROCESSING_VOLUME_LEVELER"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_DOLBY_AUDIO_PROCESSING_VOLUME_LEVELER { get { if (!_PARAMETER_DOLBY_AUDIO_PROCESSING_VOLUME_LEVELERReady) { _PARAMETER_DOLBY_AUDIO_PROCESSING_VOLUME_LEVELERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_DOLBY_AUDIO_PROCESSING_VOLUME_LEVELER"); _PARAMETER_DOLBY_AUDIO_PROCESSING_VOLUME_LEVELERReady = true; } return _PARAMETER_DOLBY_AUDIO_PROCESSING_VOLUME_LEVELERContent; } }
            private static Java.Lang.String _PARAMETER_DOLBY_AUDIO_PROCESSING_VOLUME_LEVELERContent = default;
            private static bool _PARAMETER_DOLBY_AUDIO_PROCESSING_VOLUME_LEVELERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.SoundQuality.html#PARAMETER_DOWN_MIX_MODE"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_DOWN_MIX_MODE { get { if (!_PARAMETER_DOWN_MIX_MODEReady) { _PARAMETER_DOWN_MIX_MODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_DOWN_MIX_MODE"); _PARAMETER_DOWN_MIX_MODEReady = true; } return _PARAMETER_DOWN_MIX_MODEContent; } }
            private static Java.Lang.String _PARAMETER_DOWN_MIX_MODEContent = default;
            private static bool _PARAMETER_DOWN_MIX_MODEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.SoundQuality.html#PARAMETER_DTS_DRC"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_DTS_DRC { get { if (!_PARAMETER_DTS_DRCReady) { _PARAMETER_DTS_DRCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_DTS_DRC"); _PARAMETER_DTS_DRCReady = true; } return _PARAMETER_DTS_DRCContent; } }
            private static Java.Lang.String _PARAMETER_DTS_DRCContent = default;
            private static bool _PARAMETER_DTS_DRCReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.SoundQuality.html#PARAMETER_DTS_VIRTUAL_X_DEFINITION"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_DTS_VIRTUAL_X_DEFINITION { get { if (!_PARAMETER_DTS_VIRTUAL_X_DEFINITIONReady) { _PARAMETER_DTS_VIRTUAL_X_DEFINITIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_DTS_VIRTUAL_X_DEFINITION"); _PARAMETER_DTS_VIRTUAL_X_DEFINITIONReady = true; } return _PARAMETER_DTS_VIRTUAL_X_DEFINITIONContent; } }
            private static Java.Lang.String _PARAMETER_DTS_VIRTUAL_X_DEFINITIONContent = default;
            private static bool _PARAMETER_DTS_VIRTUAL_X_DEFINITIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.SoundQuality.html#PARAMETER_DTS_VIRTUAL_X_DIALOG_CLARITY"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_DTS_VIRTUAL_X_DIALOG_CLARITY { get { if (!_PARAMETER_DTS_VIRTUAL_X_DIALOG_CLARITYReady) { _PARAMETER_DTS_VIRTUAL_X_DIALOG_CLARITYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_DTS_VIRTUAL_X_DIALOG_CLARITY"); _PARAMETER_DTS_VIRTUAL_X_DIALOG_CLARITYReady = true; } return _PARAMETER_DTS_VIRTUAL_X_DIALOG_CLARITYContent; } }
            private static Java.Lang.String _PARAMETER_DTS_VIRTUAL_X_DIALOG_CLARITYContent = default;
            private static bool _PARAMETER_DTS_VIRTUAL_X_DIALOG_CLARITYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.SoundQuality.html#PARAMETER_DTS_VIRTUAL_X_HEIGHT"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_DTS_VIRTUAL_X_HEIGHT { get { if (!_PARAMETER_DTS_VIRTUAL_X_HEIGHTReady) { _PARAMETER_DTS_VIRTUAL_X_HEIGHTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_DTS_VIRTUAL_X_HEIGHT"); _PARAMETER_DTS_VIRTUAL_X_HEIGHTReady = true; } return _PARAMETER_DTS_VIRTUAL_X_HEIGHTContent; } }
            private static Java.Lang.String _PARAMETER_DTS_VIRTUAL_X_HEIGHTContent = default;
            private static bool _PARAMETER_DTS_VIRTUAL_X_HEIGHTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.SoundQuality.html#PARAMETER_DTS_VIRTUAL_X_LIMITER"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_DTS_VIRTUAL_X_LIMITER { get { if (!_PARAMETER_DTS_VIRTUAL_X_LIMITERReady) { _PARAMETER_DTS_VIRTUAL_X_LIMITERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_DTS_VIRTUAL_X_LIMITER"); _PARAMETER_DTS_VIRTUAL_X_LIMITERReady = true; } return _PARAMETER_DTS_VIRTUAL_X_LIMITERContent; } }
            private static Java.Lang.String _PARAMETER_DTS_VIRTUAL_X_LIMITERContent = default;
            private static bool _PARAMETER_DTS_VIRTUAL_X_LIMITERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.SoundQuality.html#PARAMETER_DTS_VIRTUAL_X_TBHDX"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_DTS_VIRTUAL_X_TBHDX { get { if (!_PARAMETER_DTS_VIRTUAL_X_TBHDXReady) { _PARAMETER_DTS_VIRTUAL_X_TBHDXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_DTS_VIRTUAL_X_TBHDX"); _PARAMETER_DTS_VIRTUAL_X_TBHDXReady = true; } return _PARAMETER_DTS_VIRTUAL_X_TBHDXContent; } }
            private static Java.Lang.String _PARAMETER_DTS_VIRTUAL_X_TBHDXContent = default;
            private static bool _PARAMETER_DTS_VIRTUAL_X_TBHDXReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.SoundQuality.html#PARAMETER_DTS_VIRTUAL_X_TRU_SURROUND_X"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_DTS_VIRTUAL_X_TRU_SURROUND_X { get { if (!_PARAMETER_DTS_VIRTUAL_X_TRU_SURROUND_XReady) { _PARAMETER_DTS_VIRTUAL_X_TRU_SURROUND_XContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_DTS_VIRTUAL_X_TRU_SURROUND_X"); _PARAMETER_DTS_VIRTUAL_X_TRU_SURROUND_XReady = true; } return _PARAMETER_DTS_VIRTUAL_X_TRU_SURROUND_XContent; } }
            private static Java.Lang.String _PARAMETER_DTS_VIRTUAL_X_TRU_SURROUND_XContent = default;
            private static bool _PARAMETER_DTS_VIRTUAL_X_TRU_SURROUND_XReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.SoundQuality.html#PARAMETER_DTS_VIRTUAL_X_TRU_VOLUME_HD"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_DTS_VIRTUAL_X_TRU_VOLUME_HD { get { if (!_PARAMETER_DTS_VIRTUAL_X_TRU_VOLUME_HDReady) { _PARAMETER_DTS_VIRTUAL_X_TRU_VOLUME_HDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_DTS_VIRTUAL_X_TRU_VOLUME_HD"); _PARAMETER_DTS_VIRTUAL_X_TRU_VOLUME_HDReady = true; } return _PARAMETER_DTS_VIRTUAL_X_TRU_VOLUME_HDContent; } }
            private static Java.Lang.String _PARAMETER_DTS_VIRTUAL_X_TRU_VOLUME_HDContent = default;
            private static bool _PARAMETER_DTS_VIRTUAL_X_TRU_VOLUME_HDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.SoundQuality.html#PARAMETER_EARC"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_EARC { get { if (!_PARAMETER_EARCReady) { _PARAMETER_EARCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_EARC"); _PARAMETER_EARCReady = true; } return _PARAMETER_EARCContent; } }
            private static Java.Lang.String _PARAMETER_EARCContent = default;
            private static bool _PARAMETER_EARCReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.SoundQuality.html#PARAMETER_SPEAKERS"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_SPEAKERS { get { if (!_PARAMETER_SPEAKERSReady) { _PARAMETER_SPEAKERSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_SPEAKERS"); _PARAMETER_SPEAKERSReady = true; } return _PARAMETER_SPEAKERSContent; } }
            private static Java.Lang.String _PARAMETER_SPEAKERSContent = default;
            private static bool _PARAMETER_SPEAKERSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.SoundQuality.html#PARAMETER_SPEAKERS_DELAY_MILLIS"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_SPEAKERS_DELAY_MILLIS { get { if (!_PARAMETER_SPEAKERS_DELAY_MILLISReady) { _PARAMETER_SPEAKERS_DELAY_MILLISContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_SPEAKERS_DELAY_MILLIS"); _PARAMETER_SPEAKERS_DELAY_MILLISReady = true; } return _PARAMETER_SPEAKERS_DELAY_MILLISContent; } }
            private static Java.Lang.String _PARAMETER_SPEAKERS_DELAY_MILLISContent = default;
            private static bool _PARAMETER_SPEAKERS_DELAY_MILLISReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.SoundQuality.html#PARAMETER_SURROUND_SOUND"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_SURROUND_SOUND { get { if (!_PARAMETER_SURROUND_SOUNDReady) { _PARAMETER_SURROUND_SOUNDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_SURROUND_SOUND"); _PARAMETER_SURROUND_SOUNDReady = true; } return _PARAMETER_SURROUND_SOUNDContent; } }
            private static Java.Lang.String _PARAMETER_SURROUND_SOUNDContent = default;
            private static bool _PARAMETER_SURROUND_SOUNDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityContract.SoundQuality.html#PARAMETER_TREBLE"/>
            /// </summary>
            public static Java.Lang.String PARAMETER_TREBLE { get { if (!_PARAMETER_TREBLEReady) { _PARAMETER_TREBLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARAMETER_TREBLE"); _PARAMETER_TREBLEReady = true; } return _PARAMETER_TREBLEContent; } }
            private static Java.Lang.String _PARAMETER_TREBLEContent = default;
            private static bool _PARAMETER_TREBLEReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media.Quality
{
    #region MediaQualityManager declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.html"/>
    /// </summary>
    public partial class MediaQualityManager : MASES.JCOBridge.C2JBridge.JVMBridgeBase<MediaQualityManager>
    {
        const string _bridgeClassName = "android.media.quality.MediaQualityManager";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public MediaQualityManager() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public MediaQualityManager(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public MediaQualityManager(params object[] args) : base(args) { }
    
        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region AmbientBacklightCallback declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.AmbientBacklightCallback.html"/>
        /// </summary>
        public partial class AmbientBacklightCallback : MASES.JCOBridge.C2JBridge.JVMBridgeBase<AmbientBacklightCallback>
        {
            const string _bridgeClassName = "android.media.quality.MediaQualityManager$AmbientBacklightCallback";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("AmbientBacklightCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public AmbientBacklightCallback() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public AmbientBacklightCallback(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("AmbientBacklightCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public AmbientBacklightCallback(params object[] args) : base(args) { }
        
            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => true;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => true;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region PictureProfileCallback declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.PictureProfileCallback.html"/>
        /// </summary>
        public partial class PictureProfileCallback : MASES.JCOBridge.C2JBridge.JVMBridgeBase<PictureProfileCallback>
        {
            const string _bridgeClassName = "android.media.quality.MediaQualityManager$PictureProfileCallback";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("PictureProfileCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public PictureProfileCallback() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public PictureProfileCallback(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("PictureProfileCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public PictureProfileCallback(params object[] args) : base(args) { }
        
            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => true;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => false;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region ProfileQueryParams declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.ProfileQueryParams.html"/>
        /// </summary>
        public partial class ProfileQueryParams : Android.Os.Parcelable
        {
            const string _bridgeClassName = "android.media.quality.MediaQualityManager$ProfileQueryParams";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public ProfileQueryParams() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public ProfileQueryParams(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public ProfileQueryParams(params object[] args) : base(args) { }
        
            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => false;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => false;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
            #region Builder declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.ProfileQueryParams.Builder.html"/>
            /// </summary>
            public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
            {
                const string _bridgeClassName = "android.media.quality.MediaQualityManager$ProfileQueryParams$Builder";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                public Builder() { }
                /// <summary>
                /// Internal constructor: used internally from JCOBridge
                /// </summary>
                [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
                public Builder(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                public Builder(params object[] args) : base(args) { }
            
                private static readonly global::System.Exception _LocalBridgeClazzException = null;
                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
                /// <inheritdoc/>
                public override string BridgeClassName => _bridgeClassName;
                /// <inheritdoc/>
                public override bool IsBridgeAbstract => false;
                /// <inheritdoc/>
                public override bool IsBridgeCloseable => false;
                /// <inheritdoc/>
                public override bool IsBridgeInterface => false;
                /// <inheritdoc/>
                public override bool IsBridgeStatic => true;
            
                // TODO: complete the class
            
            }
            #endregion

        
        }
        #endregion

        #region SoundProfileCallback declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.SoundProfileCallback.html"/>
        /// </summary>
        public partial class SoundProfileCallback : MASES.JCOBridge.C2JBridge.JVMBridgeBase<SoundProfileCallback>
        {
            const string _bridgeClassName = "android.media.quality.MediaQualityManager$SoundProfileCallback";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("SoundProfileCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public SoundProfileCallback() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public SoundProfileCallback(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("SoundProfileCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public SoundProfileCallback(params object[] args) : base(args) { }
        
            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => true;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => false;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region MediaQualityManager implementation
    public partial class MediaQualityManager
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.html#getPictureProfile(int,java.lang.String,android.media.quality.MediaQualityManager.ProfileQueryParams)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Android.Media.Quality.MediaQualityManager.ProfileQueryParams"/></param>
        /// <returns><see cref="Android.Media.Quality.PictureProfile"/></returns>
        public Android.Media.Quality.PictureProfile GetPictureProfile(int arg0, Java.Lang.String arg1, Android.Media.Quality.MediaQualityManager.ProfileQueryParams arg2)
        {
            return IExecuteWithSignature<Android.Media.Quality.PictureProfile>("getPictureProfile", "(ILjava/lang/String;Landroid/media/quality/MediaQualityManager$ProfileQueryParams;)Landroid/media/quality/PictureProfile;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.html#getSoundProfile(int,java.lang.String,android.media.quality.MediaQualityManager.ProfileQueryParams)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Android.Media.Quality.MediaQualityManager.ProfileQueryParams"/></param>
        /// <returns><see cref="Android.Media.Quality.SoundProfile"/></returns>
        public Android.Media.Quality.SoundProfile GetSoundProfile(int arg0, Java.Lang.String arg1, Android.Media.Quality.MediaQualityManager.ProfileQueryParams arg2)
        {
            return IExecuteWithSignature<Android.Media.Quality.SoundProfile>("getSoundProfile", "(ILjava/lang/String;Landroid/media/quality/MediaQualityManager$ProfileQueryParams;)Landroid/media/quality/SoundProfile;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.html#isAmbientBacklightEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAmbientBacklightEnabled()
        {
            return IExecuteWithSignature<bool>("isAmbientBacklightEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.html#isAutoPictureQualityEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAutoPictureQualityEnabled()
        {
            return IExecuteWithSignature<bool>("isAutoPictureQualityEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.html#isAutoSoundQualityEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAutoSoundQualityEnabled()
        {
            return IExecuteWithSignature<bool>("isAutoSoundQualityEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.html#isSuperResolutionEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsSuperResolutionEnabled()
        {
            return IExecuteWithSignature<bool>("isSuperResolutionEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.html#getParameterCapabilities(java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Media.Quality.ParameterCapability> GetParameterCapabilities(Java.Util.List<Java.Lang.String> arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Android.Media.Quality.ParameterCapability>>("getParameterCapabilities", "(Ljava/util/List;)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.html#getAvailablePictureProfiles(android.media.quality.MediaQualityManager.ProfileQueryParams)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.Quality.MediaQualityManager.ProfileQueryParams"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Media.Quality.PictureProfile> GetAvailablePictureProfiles(Android.Media.Quality.MediaQualityManager.ProfileQueryParams arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Android.Media.Quality.PictureProfile>>("getAvailablePictureProfiles", "(Landroid/media/quality/MediaQualityManager$ProfileQueryParams;)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.html#getAvailableSoundProfiles(android.media.quality.MediaQualityManager.ProfileQueryParams)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.Quality.MediaQualityManager.ProfileQueryParams"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Media.Quality.SoundProfile> GetAvailableSoundProfiles(Android.Media.Quality.MediaQualityManager.ProfileQueryParams arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Android.Media.Quality.SoundProfile>>("getAvailableSoundProfiles", "(Landroid/media/quality/MediaQualityManager$ProfileQueryParams;)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.html#addActiveProcessingPictureListener(java.util.concurrent.Executor,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Java.Util.Function.Consumer"/></param>
        public void AddActiveProcessingPictureListener(Java.Util.Concurrent.Executor arg0, Java.Util.Function.Consumer<Java.Util.List<Android.Media.Quality.ActiveProcessingPicture>> arg1)
        {
            IExecuteWithSignature("addActiveProcessingPictureListener", "(Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.html#createPictureProfile(android.media.quality.PictureProfile)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.Quality.PictureProfile"/></param>
        public void CreatePictureProfile(Android.Media.Quality.PictureProfile arg0)
        {
            IExecuteWithSignature("createPictureProfile", "(Landroid/media/quality/PictureProfile;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.html#createSoundProfile(android.media.quality.SoundProfile)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.Quality.SoundProfile"/></param>
        public void CreateSoundProfile(Android.Media.Quality.SoundProfile arg0)
        {
            IExecuteWithSignature("createSoundProfile", "(Landroid/media/quality/SoundProfile;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.html#registerAmbientBacklightCallback(java.util.concurrent.Executor,android.media.quality.MediaQualityManager.AmbientBacklightCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Media.Quality.MediaQualityManager.AmbientBacklightCallback"/></param>
        public void RegisterAmbientBacklightCallback(Java.Util.Concurrent.Executor arg0, Android.Media.Quality.MediaQualityManager.AmbientBacklightCallback arg1)
        {
            IExecuteWithSignature("registerAmbientBacklightCallback", "(Ljava/util/concurrent/Executor;Landroid/media/quality/MediaQualityManager$AmbientBacklightCallback;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.html#registerPictureProfileCallback(java.util.concurrent.Executor,android.media.quality.MediaQualityManager.PictureProfileCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Media.Quality.MediaQualityManager.PictureProfileCallback"/></param>
        public void RegisterPictureProfileCallback(Java.Util.Concurrent.Executor arg0, Android.Media.Quality.MediaQualityManager.PictureProfileCallback arg1)
        {
            IExecuteWithSignature("registerPictureProfileCallback", "(Ljava/util/concurrent/Executor;Landroid/media/quality/MediaQualityManager$PictureProfileCallback;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.html#registerSoundProfileCallback(java.util.concurrent.Executor,android.media.quality.MediaQualityManager.SoundProfileCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Media.Quality.MediaQualityManager.SoundProfileCallback"/></param>
        public void RegisterSoundProfileCallback(Java.Util.Concurrent.Executor arg0, Android.Media.Quality.MediaQualityManager.SoundProfileCallback arg1)
        {
            IExecuteWithSignature("registerSoundProfileCallback", "(Ljava/util/concurrent/Executor;Landroid/media/quality/MediaQualityManager$SoundProfileCallback;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.html#removeActiveProcessingPictureListener(java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Consumer"/></param>
        public void RemoveActiveProcessingPictureListener(Java.Util.Function.Consumer<Java.Util.List<Android.Media.Quality.ActiveProcessingPicture>> arg0)
        {
            IExecuteWithSignature("removeActiveProcessingPictureListener", "(Ljava/util/function/Consumer;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.html#removePictureProfile(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void RemovePictureProfile(Java.Lang.String arg0)
        {
            IExecuteWithSignature("removePictureProfile", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.html#removeSoundProfile(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void RemoveSoundProfile(Java.Lang.String arg0)
        {
            IExecuteWithSignature("removeSoundProfile", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.html#setAmbientBacklightEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetAmbientBacklightEnabled(bool arg0)
        {
            IExecuteWithSignature("setAmbientBacklightEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.html#setAmbientBacklightSettings(android.media.quality.AmbientBacklightSettings)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.Quality.AmbientBacklightSettings"/></param>
        public void SetAmbientBacklightSettings(Android.Media.Quality.AmbientBacklightSettings arg0)
        {
            IExecuteWithSignature("setAmbientBacklightSettings", "(Landroid/media/quality/AmbientBacklightSettings;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.html#unregisterAmbientBacklightCallback(android.media.quality.MediaQualityManager.AmbientBacklightCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.Quality.MediaQualityManager.AmbientBacklightCallback"/></param>
        public void UnregisterAmbientBacklightCallback(Android.Media.Quality.MediaQualityManager.AmbientBacklightCallback arg0)
        {
            IExecuteWithSignature("unregisterAmbientBacklightCallback", "(Landroid/media/quality/MediaQualityManager$AmbientBacklightCallback;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.html#unregisterPictureProfileCallback(android.media.quality.MediaQualityManager.PictureProfileCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.Quality.MediaQualityManager.PictureProfileCallback"/></param>
        public void UnregisterPictureProfileCallback(Android.Media.Quality.MediaQualityManager.PictureProfileCallback arg0)
        {
            IExecuteWithSignature("unregisterPictureProfileCallback", "(Landroid/media/quality/MediaQualityManager$PictureProfileCallback;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.html#unregisterSoundProfileCallback(android.media.quality.MediaQualityManager.SoundProfileCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.Quality.MediaQualityManager.SoundProfileCallback"/></param>
        public void UnregisterSoundProfileCallback(Android.Media.Quality.MediaQualityManager.SoundProfileCallback arg0)
        {
            IExecuteWithSignature("unregisterSoundProfileCallback", "(Landroid/media/quality/MediaQualityManager$SoundProfileCallback;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.html#updatePictureProfile(java.lang.String,android.media.quality.PictureProfile)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Media.Quality.PictureProfile"/></param>
        public void UpdatePictureProfile(Java.Lang.String arg0, Android.Media.Quality.PictureProfile arg1)
        {
            IExecuteWithSignature("updatePictureProfile", "(Ljava/lang/String;Landroid/media/quality/PictureProfile;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.html#updateSoundProfile(java.lang.String,android.media.quality.SoundProfile)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Media.Quality.SoundProfile"/></param>
        public void UpdateSoundProfile(Java.Lang.String arg0, Android.Media.Quality.SoundProfile arg1)
        {
            IExecuteWithSignature("updateSoundProfile", "(Ljava/lang/String;Landroid/media/quality/SoundProfile;)V", arg0, arg1);
        }
    
        #endregion
    
        #region Nested classes
        #region AmbientBacklightCallback implementation
        public partial class AmbientBacklightCallback
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.AmbientBacklightCallback.html#onAmbientBacklightEvent(android.media.quality.AmbientBacklightEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.Quality.AmbientBacklightEvent"/></param>
            public void OnAmbientBacklightEvent(Android.Media.Quality.AmbientBacklightEvent arg0)
            {
                IExecuteWithSignature("onAmbientBacklightEvent", "(Landroid/media/quality/AmbientBacklightEvent;)V", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region PictureProfileCallback implementation
        public partial class PictureProfileCallback
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.PictureProfileCallback.html#onError(java.lang.String,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void OnError(Java.Lang.String arg0, int arg1)
            {
                IExecuteWithSignature("onError", "(Ljava/lang/String;I)V", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.PictureProfileCallback.html#onParameterCapabilitiesChanged(java.lang.String,java.util.List)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Java.Util.List"/></param>
            public void OnParameterCapabilitiesChanged(Java.Lang.String arg0, Java.Util.List<Android.Media.Quality.ParameterCapability> arg1)
            {
                IExecuteWithSignature("onParameterCapabilitiesChanged", "(Ljava/lang/String;Ljava/util/List;)V", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.PictureProfileCallback.html#onPictureProfileAdded(java.lang.String,android.media.quality.PictureProfile)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Android.Media.Quality.PictureProfile"/></param>
            public void OnPictureProfileAdded(Java.Lang.String arg0, Android.Media.Quality.PictureProfile arg1)
            {
                IExecuteWithSignature("onPictureProfileAdded", "(Ljava/lang/String;Landroid/media/quality/PictureProfile;)V", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.PictureProfileCallback.html#onPictureProfileRemoved(java.lang.String,android.media.quality.PictureProfile)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Android.Media.Quality.PictureProfile"/></param>
            public void OnPictureProfileRemoved(Java.Lang.String arg0, Android.Media.Quality.PictureProfile arg1)
            {
                IExecuteWithSignature("onPictureProfileRemoved", "(Ljava/lang/String;Landroid/media/quality/PictureProfile;)V", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.PictureProfileCallback.html#onPictureProfileUpdated(java.lang.String,android.media.quality.PictureProfile)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Android.Media.Quality.PictureProfile"/></param>
            public void OnPictureProfileUpdated(Java.Lang.String arg0, Android.Media.Quality.PictureProfile arg1)
            {
                IExecuteWithSignature("onPictureProfileUpdated", "(Ljava/lang/String;Landroid/media/quality/PictureProfile;)V", arg0, arg1);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region ProfileQueryParams implementation
        public partial class ProfileQueryParams
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.ProfileQueryParams.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.ProfileQueryParams.html#areParametersIncluded()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool AreParametersIncluded()
            {
                return IExecuteWithSignature<bool>("areParametersIncluded", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.ProfileQueryParams.html#describeContents()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int DescribeContents()
            {
                return IExecuteWithSignature<int>("describeContents", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.ProfileQueryParams.html#writeToParcel(android.os.Parcel,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
            {
                IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
            }
        
            #endregion
        
            #region Nested classes
            #region Builder implementation
            public partial class Builder
            {
                #region Constructors
            
                #endregion
            
                #region Class/Interface conversion operators
            
                #endregion
            
                #region Fields
            
                #endregion
            
                #region Static methods
            
                #endregion
            
                #region Instance methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.ProfileQueryParams.Builder.html#build()"/>
                /// </summary>
                /// <returns><see cref="Android.Media.Quality.MediaQualityManager.ProfileQueryParams"/></returns>
                public Android.Media.Quality.MediaQualityManager.ProfileQueryParams Build()
                {
                    return IExecute<Android.Media.Quality.MediaQualityManager.ProfileQueryParams>("build");
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.ProfileQueryParams.Builder.html#setParametersIncluded(boolean)"/>
                /// </summary>
                /// <param name="arg0"><see cref="bool"/></param>
                /// <returns><see cref="Android.Media.Quality.MediaQualityManager.ProfileQueryParams.Builder"/></returns>
                public Android.Media.Quality.MediaQualityManager.ProfileQueryParams.Builder SetParametersIncluded(bool arg0)
                {
                    return IExecute<Android.Media.Quality.MediaQualityManager.ProfileQueryParams.Builder>("setParametersIncluded", arg0);
                }
            
                #endregion
            
                #region Nested classes
            
                #endregion
            
                // TODO: complete the class
            }
            #endregion

        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region SoundProfileCallback implementation
        public partial class SoundProfileCallback
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.SoundProfileCallback.html#onError(java.lang.String,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void OnError(Java.Lang.String arg0, int arg1)
            {
                IExecuteWithSignature("onError", "(Ljava/lang/String;I)V", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.SoundProfileCallback.html#onParameterCapabilitiesChanged(java.lang.String,java.util.List)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Java.Util.List"/></param>
            public void OnParameterCapabilitiesChanged(Java.Lang.String arg0, Java.Util.List<Android.Media.Quality.ParameterCapability> arg1)
            {
                IExecuteWithSignature("onParameterCapabilitiesChanged", "(Ljava/lang/String;Ljava/util/List;)V", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.SoundProfileCallback.html#onSoundProfileAdded(java.lang.String,android.media.quality.SoundProfile)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Android.Media.Quality.SoundProfile"/></param>
            public void OnSoundProfileAdded(Java.Lang.String arg0, Android.Media.Quality.SoundProfile arg1)
            {
                IExecuteWithSignature("onSoundProfileAdded", "(Ljava/lang/String;Landroid/media/quality/SoundProfile;)V", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.SoundProfileCallback.html#onSoundProfileRemoved(java.lang.String,android.media.quality.SoundProfile)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Android.Media.Quality.SoundProfile"/></param>
            public void OnSoundProfileRemoved(Java.Lang.String arg0, Android.Media.Quality.SoundProfile arg1)
            {
                IExecuteWithSignature("onSoundProfileRemoved", "(Ljava/lang/String;Landroid/media/quality/SoundProfile;)V", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/quality/MediaQualityManager.SoundProfileCallback.html#onSoundProfileUpdated(java.lang.String,android.media.quality.SoundProfile)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Android.Media.Quality.SoundProfile"/></param>
            public void OnSoundProfileUpdated(Java.Lang.String arg0, Android.Media.Quality.SoundProfile arg1)
            {
                IExecuteWithSignature("onSoundProfileUpdated", "(Ljava/lang/String;Landroid/media/quality/SoundProfile;)V", arg0, arg1);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media
{
    #region MediaMuxer declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/media/MediaMuxer.html"/>
    /// </summary>
    public partial class MediaMuxer : MASES.JCOBridge.C2JBridge.JVMBridgeBase<MediaMuxer>
    {
        const string _bridgeClassName = "android.media.MediaMuxer";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public MediaMuxer() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public MediaMuxer(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region OutputFormat declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMuxer.OutputFormat.html"/>
        /// </summary>
        public partial class OutputFormat : MASES.JCOBridge.C2JBridge.JVMBridgeBase<OutputFormat>
        {
            const string _bridgeClassName = "android.media.MediaMuxer$OutputFormat";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OutputFormat() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public OutputFormat(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region MediaMuxer implementation
    public partial class MediaMuxer
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMuxer.html#%3Cinit%3E(java.io.FileDescriptor,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.FileDescriptor"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public MediaMuxer(Java.Io.FileDescriptor arg0, int arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMuxer.html#%3Cinit%3E(java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public MediaMuxer(Java.Lang.String arg0, int arg1)
            : base(arg0, arg1)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMuxer.html#addTrack(android.media.MediaFormat)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaFormat"/></param>
        /// <returns><see cref="int"/></returns>
        public int AddTrack(Android.Media.MediaFormat arg0)
        {
            return IExecuteWithSignature<int>("addTrack", "(Landroid/media/MediaFormat;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMuxer.html#release()"/>
        /// </summary>
        public void Release()
        {
            IExecuteWithSignature("release", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMuxer.html#setLocation(float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public void SetLocation(float arg0, float arg1)
        {
            IExecute("setLocation", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMuxer.html#setOrientationHint(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetOrientationHint(int arg0)
        {
            IExecuteWithSignature("setOrientationHint", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMuxer.html#start()"/>
        /// </summary>
        public void Start()
        {
            IExecuteWithSignature("start", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMuxer.html#stop()"/>
        /// </summary>
        public void Stop()
        {
            IExecuteWithSignature("stop", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMuxer.html#writeSampleData(int,java.nio.ByteBuffer,android.media.MediaCodec.BufferInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="arg2"><see cref="Android.Media.MediaCodec.BufferInfo"/></param>
        public void WriteSampleData(int arg0, Java.Nio.ByteBuffer arg1, Android.Media.MediaCodec.BufferInfo arg2)
        {
            IExecute("writeSampleData", arg0, arg1, arg2);
        }

        #endregion

        #region Nested classes
        #region OutputFormat implementation
        public partial class OutputFormat
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaMuxer.OutputFormat.html#MUXER_OUTPUT_3GPP"/>
            /// </summary>
            public static int MUXER_OUTPUT_3GPP { get { if (!_MUXER_OUTPUT_3GPPReady) { _MUXER_OUTPUT_3GPPContent = SGetField<int>(LocalBridgeClazz, "MUXER_OUTPUT_3GPP"); _MUXER_OUTPUT_3GPPReady = true; } return _MUXER_OUTPUT_3GPPContent; } }
            private static int _MUXER_OUTPUT_3GPPContent = default;
            private static bool _MUXER_OUTPUT_3GPPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaMuxer.OutputFormat.html#MUXER_OUTPUT_HEIF"/>
            /// </summary>
            public static int MUXER_OUTPUT_HEIF { get { if (!_MUXER_OUTPUT_HEIFReady) { _MUXER_OUTPUT_HEIFContent = SGetField<int>(LocalBridgeClazz, "MUXER_OUTPUT_HEIF"); _MUXER_OUTPUT_HEIFReady = true; } return _MUXER_OUTPUT_HEIFContent; } }
            private static int _MUXER_OUTPUT_HEIFContent = default;
            private static bool _MUXER_OUTPUT_HEIFReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaMuxer.OutputFormat.html#MUXER_OUTPUT_MPEG_4"/>
            /// </summary>
            public static int MUXER_OUTPUT_MPEG_4 { get { if (!_MUXER_OUTPUT_MPEG_4Ready) { _MUXER_OUTPUT_MPEG_4Content = SGetField<int>(LocalBridgeClazz, "MUXER_OUTPUT_MPEG_4"); _MUXER_OUTPUT_MPEG_4Ready = true; } return _MUXER_OUTPUT_MPEG_4Content; } }
            private static int _MUXER_OUTPUT_MPEG_4Content = default;
            private static bool _MUXER_OUTPUT_MPEG_4Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaMuxer.OutputFormat.html#MUXER_OUTPUT_OGG"/>
            /// </summary>
            public static int MUXER_OUTPUT_OGG { get { if (!_MUXER_OUTPUT_OGGReady) { _MUXER_OUTPUT_OGGContent = SGetField<int>(LocalBridgeClazz, "MUXER_OUTPUT_OGG"); _MUXER_OUTPUT_OGGReady = true; } return _MUXER_OUTPUT_OGGContent; } }
            private static int _MUXER_OUTPUT_OGGContent = default;
            private static bool _MUXER_OUTPUT_OGGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaMuxer.OutputFormat.html#MUXER_OUTPUT_WEBM"/>
            /// </summary>
            public static int MUXER_OUTPUT_WEBM { get { if (!_MUXER_OUTPUT_WEBMReady) { _MUXER_OUTPUT_WEBMContent = SGetField<int>(LocalBridgeClazz, "MUXER_OUTPUT_WEBM"); _MUXER_OUTPUT_WEBMReady = true; } return _MUXER_OUTPUT_WEBMContent; } }
            private static int _MUXER_OUTPUT_WEBMContent = default;
            private static bool _MUXER_OUTPUT_WEBMReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
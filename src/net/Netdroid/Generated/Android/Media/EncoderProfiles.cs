/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media
{
    #region EncoderProfiles declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/media/EncoderProfiles.html"/>
    /// </summary>
    public partial class EncoderProfiles : MASES.JCOBridge.C2JBridge.JVMBridgeBase<EncoderProfiles>
    {
        const string _bridgeClassName = "android.media.EncoderProfiles";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public EncoderProfiles() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public EncoderProfiles(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region AudioProfile declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/EncoderProfiles.AudioProfile.html"/>
        /// </summary>
        public partial class AudioProfile : MASES.JCOBridge.C2JBridge.JVMBridgeBase<AudioProfile>
        {
            const string _bridgeClassName = "android.media.EncoderProfiles$AudioProfile";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public AudioProfile() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public AudioProfile(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region VideoProfile declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/EncoderProfiles.VideoProfile.html"/>
        /// </summary>
        public partial class VideoProfile : MASES.JCOBridge.C2JBridge.JVMBridgeBase<VideoProfile>
        {
            const string _bridgeClassName = "android.media.EncoderProfiles$VideoProfile";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public VideoProfile() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public VideoProfile(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region EncoderProfiles implementation
    public partial class EncoderProfiles
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/EncoderProfiles.html#getDefaultDurationSeconds()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetDefaultDurationSeconds()
        {
            return IExecuteWithSignature<int>("getDefaultDurationSeconds", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/EncoderProfiles.html#getRecommendedFileFormat()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetRecommendedFileFormat()
        {
            return IExecuteWithSignature<int>("getRecommendedFileFormat", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/EncoderProfiles.html#getAudioProfiles()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Media.EncoderProfiles.AudioProfile> GetAudioProfiles()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Media.EncoderProfiles.AudioProfile>>("getAudioProfiles", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/EncoderProfiles.html#getVideoProfiles()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Media.EncoderProfiles.VideoProfile> GetVideoProfiles()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Media.EncoderProfiles.VideoProfile>>("getVideoProfiles", "()Ljava/util/List;");
        }
    
        #endregion
    
        #region Nested classes
        #region AudioProfile implementation
        public partial class AudioProfile
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/EncoderProfiles.AudioProfile.html#getBitrate()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetBitrate()
            {
                return IExecuteWithSignature<int>("getBitrate", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/EncoderProfiles.AudioProfile.html#getChannels()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetChannels()
            {
                return IExecuteWithSignature<int>("getChannels", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/EncoderProfiles.AudioProfile.html#getCodec()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetCodec()
            {
                return IExecuteWithSignature<int>("getCodec", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/EncoderProfiles.AudioProfile.html#getProfile()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetProfile()
            {
                return IExecuteWithSignature<int>("getProfile", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/EncoderProfiles.AudioProfile.html#getSampleRate()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetSampleRate()
            {
                return IExecuteWithSignature<int>("getSampleRate", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/EncoderProfiles.AudioProfile.html#getMediaType()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetMediaType()
            {
                return IExecuteWithSignature<Java.Lang.String>("getMediaType", "()Ljava/lang/String;");
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region VideoProfile implementation
        public partial class VideoProfile
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/EncoderProfiles.VideoProfile.html#HDR_DOLBY_VISION"/>
            /// </summary>
            public static int HDR_DOLBY_VISION { get { if (!_HDR_DOLBY_VISIONReady) { _HDR_DOLBY_VISIONContent = SGetField<int>(LocalBridgeClazz, "HDR_DOLBY_VISION"); _HDR_DOLBY_VISIONReady = true; } return _HDR_DOLBY_VISIONContent; } }
            private static int _HDR_DOLBY_VISIONContent = default;
            private static bool _HDR_DOLBY_VISIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/EncoderProfiles.VideoProfile.html#HDR_HDR10"/>
            /// </summary>
            public static int HDR_HDR10 { get { if (!_HDR_HDR10Ready) { _HDR_HDR10Content = SGetField<int>(LocalBridgeClazz, "HDR_HDR10"); _HDR_HDR10Ready = true; } return _HDR_HDR10Content; } }
            private static int _HDR_HDR10Content = default;
            private static bool _HDR_HDR10Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/EncoderProfiles.VideoProfile.html#HDR_HDR10PLUS"/>
            /// </summary>
            public static int HDR_HDR10PLUS { get { if (!_HDR_HDR10PLUSReady) { _HDR_HDR10PLUSContent = SGetField<int>(LocalBridgeClazz, "HDR_HDR10PLUS"); _HDR_HDR10PLUSReady = true; } return _HDR_HDR10PLUSContent; } }
            private static int _HDR_HDR10PLUSContent = default;
            private static bool _HDR_HDR10PLUSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/EncoderProfiles.VideoProfile.html#HDR_HLG"/>
            /// </summary>
            public static int HDR_HLG { get { if (!_HDR_HLGReady) { _HDR_HLGContent = SGetField<int>(LocalBridgeClazz, "HDR_HLG"); _HDR_HLGReady = true; } return _HDR_HLGContent; } }
            private static int _HDR_HLGContent = default;
            private static bool _HDR_HLGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/EncoderProfiles.VideoProfile.html#HDR_NONE"/>
            /// </summary>
            public static int HDR_NONE { get { if (!_HDR_NONEReady) { _HDR_NONEContent = SGetField<int>(LocalBridgeClazz, "HDR_NONE"); _HDR_NONEReady = true; } return _HDR_NONEContent; } }
            private static int _HDR_NONEContent = default;
            private static bool _HDR_NONEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/EncoderProfiles.VideoProfile.html#YUV_420"/>
            /// </summary>
            public static int YUV_420 { get { if (!_YUV_420Ready) { _YUV_420Content = SGetField<int>(LocalBridgeClazz, "YUV_420"); _YUV_420Ready = true; } return _YUV_420Content; } }
            private static int _YUV_420Content = default;
            private static bool _YUV_420Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/EncoderProfiles.VideoProfile.html#YUV_422"/>
            /// </summary>
            public static int YUV_422 { get { if (!_YUV_422Ready) { _YUV_422Content = SGetField<int>(LocalBridgeClazz, "YUV_422"); _YUV_422Ready = true; } return _YUV_422Content; } }
            private static int _YUV_422Content = default;
            private static bool _YUV_422Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/EncoderProfiles.VideoProfile.html#YUV_444"/>
            /// </summary>
            public static int YUV_444 { get { if (!_YUV_444Ready) { _YUV_444Content = SGetField<int>(LocalBridgeClazz, "YUV_444"); _YUV_444Ready = true; } return _YUV_444Content; } }
            private static int _YUV_444Content = default;
            private static bool _YUV_444Ready = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/EncoderProfiles.VideoProfile.html#getBitDepth()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetBitDepth()
            {
                return IExecuteWithSignature<int>("getBitDepth", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/EncoderProfiles.VideoProfile.html#getBitrate()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetBitrate()
            {
                return IExecuteWithSignature<int>("getBitrate", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/EncoderProfiles.VideoProfile.html#getChromaSubsampling()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetChromaSubsampling()
            {
                return IExecuteWithSignature<int>("getChromaSubsampling", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/EncoderProfiles.VideoProfile.html#getCodec()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetCodec()
            {
                return IExecuteWithSignature<int>("getCodec", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/EncoderProfiles.VideoProfile.html#getFrameRate()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetFrameRate()
            {
                return IExecuteWithSignature<int>("getFrameRate", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/EncoderProfiles.VideoProfile.html#getHdrFormat()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetHdrFormat()
            {
                return IExecuteWithSignature<int>("getHdrFormat", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/EncoderProfiles.VideoProfile.html#getHeight()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetHeight()
            {
                return IExecuteWithSignature<int>("getHeight", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/EncoderProfiles.VideoProfile.html#getProfile()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetProfile()
            {
                return IExecuteWithSignature<int>("getProfile", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/EncoderProfiles.VideoProfile.html#getWidth()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetWidth()
            {
                return IExecuteWithSignature<int>("getWidth", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/EncoderProfiles.VideoProfile.html#getMediaType()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetMediaType()
            {
                return IExecuteWithSignature<Java.Lang.String>("getMediaType", "()Ljava/lang/String;");
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.2.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media
{
    #region AudioFormat
    public partial class AudioFormat
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_CONFIGURATION_DEFAULT"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int CHANNEL_CONFIGURATION_DEFAULT { get { if (!_CHANNEL_CONFIGURATION_DEFAULTReady) { _CHANNEL_CONFIGURATION_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_CONFIGURATION_DEFAULT"); _CHANNEL_CONFIGURATION_DEFAULTReady = true; } return _CHANNEL_CONFIGURATION_DEFAULTContent; } }
        private static int _CHANNEL_CONFIGURATION_DEFAULTContent = default;
        private static bool _CHANNEL_CONFIGURATION_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_CONFIGURATION_INVALID"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int CHANNEL_CONFIGURATION_INVALID { get { if (!_CHANNEL_CONFIGURATION_INVALIDReady) { _CHANNEL_CONFIGURATION_INVALIDContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_CONFIGURATION_INVALID"); _CHANNEL_CONFIGURATION_INVALIDReady = true; } return _CHANNEL_CONFIGURATION_INVALIDContent; } }
        private static int _CHANNEL_CONFIGURATION_INVALIDContent = default;
        private static bool _CHANNEL_CONFIGURATION_INVALIDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_CONFIGURATION_MONO"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int CHANNEL_CONFIGURATION_MONO { get { if (!_CHANNEL_CONFIGURATION_MONOReady) { _CHANNEL_CONFIGURATION_MONOContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_CONFIGURATION_MONO"); _CHANNEL_CONFIGURATION_MONOReady = true; } return _CHANNEL_CONFIGURATION_MONOContent; } }
        private static int _CHANNEL_CONFIGURATION_MONOContent = default;
        private static bool _CHANNEL_CONFIGURATION_MONOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_CONFIGURATION_STEREO"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int CHANNEL_CONFIGURATION_STEREO { get { if (!_CHANNEL_CONFIGURATION_STEREOReady) { _CHANNEL_CONFIGURATION_STEREOContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_CONFIGURATION_STEREO"); _CHANNEL_CONFIGURATION_STEREOReady = true; } return _CHANNEL_CONFIGURATION_STEREOContent; } }
        private static int _CHANNEL_CONFIGURATION_STEREOContent = default;
        private static bool _CHANNEL_CONFIGURATION_STEREOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_IN_BACK"/>
        /// </summary>
        public static int CHANNEL_IN_BACK { get { if (!_CHANNEL_IN_BACKReady) { _CHANNEL_IN_BACKContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_IN_BACK"); _CHANNEL_IN_BACKReady = true; } return _CHANNEL_IN_BACKContent; } }
        private static int _CHANNEL_IN_BACKContent = default;
        private static bool _CHANNEL_IN_BACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_IN_BACK_PROCESSED"/>
        /// </summary>
        public static int CHANNEL_IN_BACK_PROCESSED { get { if (!_CHANNEL_IN_BACK_PROCESSEDReady) { _CHANNEL_IN_BACK_PROCESSEDContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_IN_BACK_PROCESSED"); _CHANNEL_IN_BACK_PROCESSEDReady = true; } return _CHANNEL_IN_BACK_PROCESSEDContent; } }
        private static int _CHANNEL_IN_BACK_PROCESSEDContent = default;
        private static bool _CHANNEL_IN_BACK_PROCESSEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_IN_DEFAULT"/>
        /// </summary>
        public static int CHANNEL_IN_DEFAULT { get { if (!_CHANNEL_IN_DEFAULTReady) { _CHANNEL_IN_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_IN_DEFAULT"); _CHANNEL_IN_DEFAULTReady = true; } return _CHANNEL_IN_DEFAULTContent; } }
        private static int _CHANNEL_IN_DEFAULTContent = default;
        private static bool _CHANNEL_IN_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_IN_FRONT"/>
        /// </summary>
        public static int CHANNEL_IN_FRONT { get { if (!_CHANNEL_IN_FRONTReady) { _CHANNEL_IN_FRONTContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_IN_FRONT"); _CHANNEL_IN_FRONTReady = true; } return _CHANNEL_IN_FRONTContent; } }
        private static int _CHANNEL_IN_FRONTContent = default;
        private static bool _CHANNEL_IN_FRONTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_IN_FRONT_PROCESSED"/>
        /// </summary>
        public static int CHANNEL_IN_FRONT_PROCESSED { get { if (!_CHANNEL_IN_FRONT_PROCESSEDReady) { _CHANNEL_IN_FRONT_PROCESSEDContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_IN_FRONT_PROCESSED"); _CHANNEL_IN_FRONT_PROCESSEDReady = true; } return _CHANNEL_IN_FRONT_PROCESSEDContent; } }
        private static int _CHANNEL_IN_FRONT_PROCESSEDContent = default;
        private static bool _CHANNEL_IN_FRONT_PROCESSEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_IN_LEFT"/>
        /// </summary>
        public static int CHANNEL_IN_LEFT { get { if (!_CHANNEL_IN_LEFTReady) { _CHANNEL_IN_LEFTContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_IN_LEFT"); _CHANNEL_IN_LEFTReady = true; } return _CHANNEL_IN_LEFTContent; } }
        private static int _CHANNEL_IN_LEFTContent = default;
        private static bool _CHANNEL_IN_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_IN_LEFT_PROCESSED"/>
        /// </summary>
        public static int CHANNEL_IN_LEFT_PROCESSED { get { if (!_CHANNEL_IN_LEFT_PROCESSEDReady) { _CHANNEL_IN_LEFT_PROCESSEDContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_IN_LEFT_PROCESSED"); _CHANNEL_IN_LEFT_PROCESSEDReady = true; } return _CHANNEL_IN_LEFT_PROCESSEDContent; } }
        private static int _CHANNEL_IN_LEFT_PROCESSEDContent = default;
        private static bool _CHANNEL_IN_LEFT_PROCESSEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_IN_MONO"/>
        /// </summary>
        public static int CHANNEL_IN_MONO { get { if (!_CHANNEL_IN_MONOReady) { _CHANNEL_IN_MONOContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_IN_MONO"); _CHANNEL_IN_MONOReady = true; } return _CHANNEL_IN_MONOContent; } }
        private static int _CHANNEL_IN_MONOContent = default;
        private static bool _CHANNEL_IN_MONOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_IN_PRESSURE"/>
        /// </summary>
        public static int CHANNEL_IN_PRESSURE { get { if (!_CHANNEL_IN_PRESSUREReady) { _CHANNEL_IN_PRESSUREContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_IN_PRESSURE"); _CHANNEL_IN_PRESSUREReady = true; } return _CHANNEL_IN_PRESSUREContent; } }
        private static int _CHANNEL_IN_PRESSUREContent = default;
        private static bool _CHANNEL_IN_PRESSUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_IN_RIGHT"/>
        /// </summary>
        public static int CHANNEL_IN_RIGHT { get { if (!_CHANNEL_IN_RIGHTReady) { _CHANNEL_IN_RIGHTContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_IN_RIGHT"); _CHANNEL_IN_RIGHTReady = true; } return _CHANNEL_IN_RIGHTContent; } }
        private static int _CHANNEL_IN_RIGHTContent = default;
        private static bool _CHANNEL_IN_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_IN_RIGHT_PROCESSED"/>
        /// </summary>
        public static int CHANNEL_IN_RIGHT_PROCESSED { get { if (!_CHANNEL_IN_RIGHT_PROCESSEDReady) { _CHANNEL_IN_RIGHT_PROCESSEDContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_IN_RIGHT_PROCESSED"); _CHANNEL_IN_RIGHT_PROCESSEDReady = true; } return _CHANNEL_IN_RIGHT_PROCESSEDContent; } }
        private static int _CHANNEL_IN_RIGHT_PROCESSEDContent = default;
        private static bool _CHANNEL_IN_RIGHT_PROCESSEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_IN_STEREO"/>
        /// </summary>
        public static int CHANNEL_IN_STEREO { get { if (!_CHANNEL_IN_STEREOReady) { _CHANNEL_IN_STEREOContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_IN_STEREO"); _CHANNEL_IN_STEREOReady = true; } return _CHANNEL_IN_STEREOContent; } }
        private static int _CHANNEL_IN_STEREOContent = default;
        private static bool _CHANNEL_IN_STEREOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_IN_VOICE_DNLINK"/>
        /// </summary>
        public static int CHANNEL_IN_VOICE_DNLINK { get { if (!_CHANNEL_IN_VOICE_DNLINKReady) { _CHANNEL_IN_VOICE_DNLINKContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_IN_VOICE_DNLINK"); _CHANNEL_IN_VOICE_DNLINKReady = true; } return _CHANNEL_IN_VOICE_DNLINKContent; } }
        private static int _CHANNEL_IN_VOICE_DNLINKContent = default;
        private static bool _CHANNEL_IN_VOICE_DNLINKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_IN_VOICE_UPLINK"/>
        /// </summary>
        public static int CHANNEL_IN_VOICE_UPLINK { get { if (!_CHANNEL_IN_VOICE_UPLINKReady) { _CHANNEL_IN_VOICE_UPLINKContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_IN_VOICE_UPLINK"); _CHANNEL_IN_VOICE_UPLINKReady = true; } return _CHANNEL_IN_VOICE_UPLINKContent; } }
        private static int _CHANNEL_IN_VOICE_UPLINKContent = default;
        private static bool _CHANNEL_IN_VOICE_UPLINKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_IN_X_AXIS"/>
        /// </summary>
        public static int CHANNEL_IN_X_AXIS { get { if (!_CHANNEL_IN_X_AXISReady) { _CHANNEL_IN_X_AXISContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_IN_X_AXIS"); _CHANNEL_IN_X_AXISReady = true; } return _CHANNEL_IN_X_AXISContent; } }
        private static int _CHANNEL_IN_X_AXISContent = default;
        private static bool _CHANNEL_IN_X_AXISReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_IN_Y_AXIS"/>
        /// </summary>
        public static int CHANNEL_IN_Y_AXIS { get { if (!_CHANNEL_IN_Y_AXISReady) { _CHANNEL_IN_Y_AXISContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_IN_Y_AXIS"); _CHANNEL_IN_Y_AXISReady = true; } return _CHANNEL_IN_Y_AXISContent; } }
        private static int _CHANNEL_IN_Y_AXISContent = default;
        private static bool _CHANNEL_IN_Y_AXISReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_IN_Z_AXIS"/>
        /// </summary>
        public static int CHANNEL_IN_Z_AXIS { get { if (!_CHANNEL_IN_Z_AXISReady) { _CHANNEL_IN_Z_AXISContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_IN_Z_AXIS"); _CHANNEL_IN_Z_AXISReady = true; } return _CHANNEL_IN_Z_AXISContent; } }
        private static int _CHANNEL_IN_Z_AXISContent = default;
        private static bool _CHANNEL_IN_Z_AXISReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_INVALID"/>
        /// </summary>
        public static int CHANNEL_INVALID { get { if (!_CHANNEL_INVALIDReady) { _CHANNEL_INVALIDContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_INVALID"); _CHANNEL_INVALIDReady = true; } return _CHANNEL_INVALIDContent; } }
        private static int _CHANNEL_INVALIDContent = default;
        private static bool _CHANNEL_INVALIDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_5POINT1"/>
        /// </summary>
        public static int CHANNEL_OUT_5POINT1 { get { if (!_CHANNEL_OUT_5POINT1Ready) { _CHANNEL_OUT_5POINT1Content = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_5POINT1"); _CHANNEL_OUT_5POINT1Ready = true; } return _CHANNEL_OUT_5POINT1Content; } }
        private static int _CHANNEL_OUT_5POINT1Content = default;
        private static bool _CHANNEL_OUT_5POINT1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_5POINT1POINT2"/>
        /// </summary>
        public static int CHANNEL_OUT_5POINT1POINT2 { get { if (!_CHANNEL_OUT_5POINT1POINT2Ready) { _CHANNEL_OUT_5POINT1POINT2Content = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_5POINT1POINT2"); _CHANNEL_OUT_5POINT1POINT2Ready = true; } return _CHANNEL_OUT_5POINT1POINT2Content; } }
        private static int _CHANNEL_OUT_5POINT1POINT2Content = default;
        private static bool _CHANNEL_OUT_5POINT1POINT2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_5POINT1POINT4"/>
        /// </summary>
        public static int CHANNEL_OUT_5POINT1POINT4 { get { if (!_CHANNEL_OUT_5POINT1POINT4Ready) { _CHANNEL_OUT_5POINT1POINT4Content = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_5POINT1POINT4"); _CHANNEL_OUT_5POINT1POINT4Ready = true; } return _CHANNEL_OUT_5POINT1POINT4Content; } }
        private static int _CHANNEL_OUT_5POINT1POINT4Content = default;
        private static bool _CHANNEL_OUT_5POINT1POINT4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_6POINT1"/>
        /// </summary>
        public static int CHANNEL_OUT_6POINT1 { get { if (!_CHANNEL_OUT_6POINT1Ready) { _CHANNEL_OUT_6POINT1Content = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_6POINT1"); _CHANNEL_OUT_6POINT1Ready = true; } return _CHANNEL_OUT_6POINT1Content; } }
        private static int _CHANNEL_OUT_6POINT1Content = default;
        private static bool _CHANNEL_OUT_6POINT1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_7POINT1"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int CHANNEL_OUT_7POINT1 { get { if (!_CHANNEL_OUT_7POINT1Ready) { _CHANNEL_OUT_7POINT1Content = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_7POINT1"); _CHANNEL_OUT_7POINT1Ready = true; } return _CHANNEL_OUT_7POINT1Content; } }
        private static int _CHANNEL_OUT_7POINT1Content = default;
        private static bool _CHANNEL_OUT_7POINT1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_7POINT1_SURROUND"/>
        /// </summary>
        public static int CHANNEL_OUT_7POINT1_SURROUND { get { if (!_CHANNEL_OUT_7POINT1_SURROUNDReady) { _CHANNEL_OUT_7POINT1_SURROUNDContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_7POINT1_SURROUND"); _CHANNEL_OUT_7POINT1_SURROUNDReady = true; } return _CHANNEL_OUT_7POINT1_SURROUNDContent; } }
        private static int _CHANNEL_OUT_7POINT1_SURROUNDContent = default;
        private static bool _CHANNEL_OUT_7POINT1_SURROUNDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_7POINT1POINT2"/>
        /// </summary>
        public static int CHANNEL_OUT_7POINT1POINT2 { get { if (!_CHANNEL_OUT_7POINT1POINT2Ready) { _CHANNEL_OUT_7POINT1POINT2Content = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_7POINT1POINT2"); _CHANNEL_OUT_7POINT1POINT2Ready = true; } return _CHANNEL_OUT_7POINT1POINT2Content; } }
        private static int _CHANNEL_OUT_7POINT1POINT2Content = default;
        private static bool _CHANNEL_OUT_7POINT1POINT2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_7POINT1POINT4"/>
        /// </summary>
        public static int CHANNEL_OUT_7POINT1POINT4 { get { if (!_CHANNEL_OUT_7POINT1POINT4Ready) { _CHANNEL_OUT_7POINT1POINT4Content = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_7POINT1POINT4"); _CHANNEL_OUT_7POINT1POINT4Ready = true; } return _CHANNEL_OUT_7POINT1POINT4Content; } }
        private static int _CHANNEL_OUT_7POINT1POINT4Content = default;
        private static bool _CHANNEL_OUT_7POINT1POINT4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_9POINT1POINT4"/>
        /// </summary>
        public static int CHANNEL_OUT_9POINT1POINT4 { get { if (!_CHANNEL_OUT_9POINT1POINT4Ready) { _CHANNEL_OUT_9POINT1POINT4Content = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_9POINT1POINT4"); _CHANNEL_OUT_9POINT1POINT4Ready = true; } return _CHANNEL_OUT_9POINT1POINT4Content; } }
        private static int _CHANNEL_OUT_9POINT1POINT4Content = default;
        private static bool _CHANNEL_OUT_9POINT1POINT4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_9POINT1POINT6"/>
        /// </summary>
        public static int CHANNEL_OUT_9POINT1POINT6 { get { if (!_CHANNEL_OUT_9POINT1POINT6Ready) { _CHANNEL_OUT_9POINT1POINT6Content = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_9POINT1POINT6"); _CHANNEL_OUT_9POINT1POINT6Ready = true; } return _CHANNEL_OUT_9POINT1POINT6Content; } }
        private static int _CHANNEL_OUT_9POINT1POINT6Content = default;
        private static bool _CHANNEL_OUT_9POINT1POINT6Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_BACK_CENTER"/>
        /// </summary>
        public static int CHANNEL_OUT_BACK_CENTER { get { if (!_CHANNEL_OUT_BACK_CENTERReady) { _CHANNEL_OUT_BACK_CENTERContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_BACK_CENTER"); _CHANNEL_OUT_BACK_CENTERReady = true; } return _CHANNEL_OUT_BACK_CENTERContent; } }
        private static int _CHANNEL_OUT_BACK_CENTERContent = default;
        private static bool _CHANNEL_OUT_BACK_CENTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_BACK_LEFT"/>
        /// </summary>
        public static int CHANNEL_OUT_BACK_LEFT { get { if (!_CHANNEL_OUT_BACK_LEFTReady) { _CHANNEL_OUT_BACK_LEFTContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_BACK_LEFT"); _CHANNEL_OUT_BACK_LEFTReady = true; } return _CHANNEL_OUT_BACK_LEFTContent; } }
        private static int _CHANNEL_OUT_BACK_LEFTContent = default;
        private static bool _CHANNEL_OUT_BACK_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_BACK_RIGHT"/>
        /// </summary>
        public static int CHANNEL_OUT_BACK_RIGHT { get { if (!_CHANNEL_OUT_BACK_RIGHTReady) { _CHANNEL_OUT_BACK_RIGHTContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_BACK_RIGHT"); _CHANNEL_OUT_BACK_RIGHTReady = true; } return _CHANNEL_OUT_BACK_RIGHTContent; } }
        private static int _CHANNEL_OUT_BACK_RIGHTContent = default;
        private static bool _CHANNEL_OUT_BACK_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_BOTTOM_FRONT_CENTER"/>
        /// </summary>
        public static int CHANNEL_OUT_BOTTOM_FRONT_CENTER { get { if (!_CHANNEL_OUT_BOTTOM_FRONT_CENTERReady) { _CHANNEL_OUT_BOTTOM_FRONT_CENTERContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_BOTTOM_FRONT_CENTER"); _CHANNEL_OUT_BOTTOM_FRONT_CENTERReady = true; } return _CHANNEL_OUT_BOTTOM_FRONT_CENTERContent; } }
        private static int _CHANNEL_OUT_BOTTOM_FRONT_CENTERContent = default;
        private static bool _CHANNEL_OUT_BOTTOM_FRONT_CENTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_BOTTOM_FRONT_LEFT"/>
        /// </summary>
        public static int CHANNEL_OUT_BOTTOM_FRONT_LEFT { get { if (!_CHANNEL_OUT_BOTTOM_FRONT_LEFTReady) { _CHANNEL_OUT_BOTTOM_FRONT_LEFTContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_BOTTOM_FRONT_LEFT"); _CHANNEL_OUT_BOTTOM_FRONT_LEFTReady = true; } return _CHANNEL_OUT_BOTTOM_FRONT_LEFTContent; } }
        private static int _CHANNEL_OUT_BOTTOM_FRONT_LEFTContent = default;
        private static bool _CHANNEL_OUT_BOTTOM_FRONT_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_BOTTOM_FRONT_RIGHT"/>
        /// </summary>
        public static int CHANNEL_OUT_BOTTOM_FRONT_RIGHT { get { if (!_CHANNEL_OUT_BOTTOM_FRONT_RIGHTReady) { _CHANNEL_OUT_BOTTOM_FRONT_RIGHTContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_BOTTOM_FRONT_RIGHT"); _CHANNEL_OUT_BOTTOM_FRONT_RIGHTReady = true; } return _CHANNEL_OUT_BOTTOM_FRONT_RIGHTContent; } }
        private static int _CHANNEL_OUT_BOTTOM_FRONT_RIGHTContent = default;
        private static bool _CHANNEL_OUT_BOTTOM_FRONT_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_DEFAULT"/>
        /// </summary>
        public static int CHANNEL_OUT_DEFAULT { get { if (!_CHANNEL_OUT_DEFAULTReady) { _CHANNEL_OUT_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_DEFAULT"); _CHANNEL_OUT_DEFAULTReady = true; } return _CHANNEL_OUT_DEFAULTContent; } }
        private static int _CHANNEL_OUT_DEFAULTContent = default;
        private static bool _CHANNEL_OUT_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_FRONT_CENTER"/>
        /// </summary>
        public static int CHANNEL_OUT_FRONT_CENTER { get { if (!_CHANNEL_OUT_FRONT_CENTERReady) { _CHANNEL_OUT_FRONT_CENTERContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_FRONT_CENTER"); _CHANNEL_OUT_FRONT_CENTERReady = true; } return _CHANNEL_OUT_FRONT_CENTERContent; } }
        private static int _CHANNEL_OUT_FRONT_CENTERContent = default;
        private static bool _CHANNEL_OUT_FRONT_CENTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_FRONT_LEFT"/>
        /// </summary>
        public static int CHANNEL_OUT_FRONT_LEFT { get { if (!_CHANNEL_OUT_FRONT_LEFTReady) { _CHANNEL_OUT_FRONT_LEFTContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_FRONT_LEFT"); _CHANNEL_OUT_FRONT_LEFTReady = true; } return _CHANNEL_OUT_FRONT_LEFTContent; } }
        private static int _CHANNEL_OUT_FRONT_LEFTContent = default;
        private static bool _CHANNEL_OUT_FRONT_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_FRONT_LEFT_OF_CENTER"/>
        /// </summary>
        public static int CHANNEL_OUT_FRONT_LEFT_OF_CENTER { get { if (!_CHANNEL_OUT_FRONT_LEFT_OF_CENTERReady) { _CHANNEL_OUT_FRONT_LEFT_OF_CENTERContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_FRONT_LEFT_OF_CENTER"); _CHANNEL_OUT_FRONT_LEFT_OF_CENTERReady = true; } return _CHANNEL_OUT_FRONT_LEFT_OF_CENTERContent; } }
        private static int _CHANNEL_OUT_FRONT_LEFT_OF_CENTERContent = default;
        private static bool _CHANNEL_OUT_FRONT_LEFT_OF_CENTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_FRONT_RIGHT"/>
        /// </summary>
        public static int CHANNEL_OUT_FRONT_RIGHT { get { if (!_CHANNEL_OUT_FRONT_RIGHTReady) { _CHANNEL_OUT_FRONT_RIGHTContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_FRONT_RIGHT"); _CHANNEL_OUT_FRONT_RIGHTReady = true; } return _CHANNEL_OUT_FRONT_RIGHTContent; } }
        private static int _CHANNEL_OUT_FRONT_RIGHTContent = default;
        private static bool _CHANNEL_OUT_FRONT_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_FRONT_RIGHT_OF_CENTER"/>
        /// </summary>
        public static int CHANNEL_OUT_FRONT_RIGHT_OF_CENTER { get { if (!_CHANNEL_OUT_FRONT_RIGHT_OF_CENTERReady) { _CHANNEL_OUT_FRONT_RIGHT_OF_CENTERContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_FRONT_RIGHT_OF_CENTER"); _CHANNEL_OUT_FRONT_RIGHT_OF_CENTERReady = true; } return _CHANNEL_OUT_FRONT_RIGHT_OF_CENTERContent; } }
        private static int _CHANNEL_OUT_FRONT_RIGHT_OF_CENTERContent = default;
        private static bool _CHANNEL_OUT_FRONT_RIGHT_OF_CENTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_FRONT_WIDE_LEFT"/>
        /// </summary>
        public static int CHANNEL_OUT_FRONT_WIDE_LEFT { get { if (!_CHANNEL_OUT_FRONT_WIDE_LEFTReady) { _CHANNEL_OUT_FRONT_WIDE_LEFTContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_FRONT_WIDE_LEFT"); _CHANNEL_OUT_FRONT_WIDE_LEFTReady = true; } return _CHANNEL_OUT_FRONT_WIDE_LEFTContent; } }
        private static int _CHANNEL_OUT_FRONT_WIDE_LEFTContent = default;
        private static bool _CHANNEL_OUT_FRONT_WIDE_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_FRONT_WIDE_RIGHT"/>
        /// </summary>
        public static int CHANNEL_OUT_FRONT_WIDE_RIGHT { get { if (!_CHANNEL_OUT_FRONT_WIDE_RIGHTReady) { _CHANNEL_OUT_FRONT_WIDE_RIGHTContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_FRONT_WIDE_RIGHT"); _CHANNEL_OUT_FRONT_WIDE_RIGHTReady = true; } return _CHANNEL_OUT_FRONT_WIDE_RIGHTContent; } }
        private static int _CHANNEL_OUT_FRONT_WIDE_RIGHTContent = default;
        private static bool _CHANNEL_OUT_FRONT_WIDE_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_LOW_FREQUENCY"/>
        /// </summary>
        public static int CHANNEL_OUT_LOW_FREQUENCY { get { if (!_CHANNEL_OUT_LOW_FREQUENCYReady) { _CHANNEL_OUT_LOW_FREQUENCYContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_LOW_FREQUENCY"); _CHANNEL_OUT_LOW_FREQUENCYReady = true; } return _CHANNEL_OUT_LOW_FREQUENCYContent; } }
        private static int _CHANNEL_OUT_LOW_FREQUENCYContent = default;
        private static bool _CHANNEL_OUT_LOW_FREQUENCYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_LOW_FREQUENCY_2"/>
        /// </summary>
        public static int CHANNEL_OUT_LOW_FREQUENCY_2 { get { if (!_CHANNEL_OUT_LOW_FREQUENCY_2Ready) { _CHANNEL_OUT_LOW_FREQUENCY_2Content = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_LOW_FREQUENCY_2"); _CHANNEL_OUT_LOW_FREQUENCY_2Ready = true; } return _CHANNEL_OUT_LOW_FREQUENCY_2Content; } }
        private static int _CHANNEL_OUT_LOW_FREQUENCY_2Content = default;
        private static bool _CHANNEL_OUT_LOW_FREQUENCY_2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_MONO"/>
        /// </summary>
        public static int CHANNEL_OUT_MONO { get { if (!_CHANNEL_OUT_MONOReady) { _CHANNEL_OUT_MONOContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_MONO"); _CHANNEL_OUT_MONOReady = true; } return _CHANNEL_OUT_MONOContent; } }
        private static int _CHANNEL_OUT_MONOContent = default;
        private static bool _CHANNEL_OUT_MONOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_QUAD"/>
        /// </summary>
        public static int CHANNEL_OUT_QUAD { get { if (!_CHANNEL_OUT_QUADReady) { _CHANNEL_OUT_QUADContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_QUAD"); _CHANNEL_OUT_QUADReady = true; } return _CHANNEL_OUT_QUADContent; } }
        private static int _CHANNEL_OUT_QUADContent = default;
        private static bool _CHANNEL_OUT_QUADReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_SIDE_LEFT"/>
        /// </summary>
        public static int CHANNEL_OUT_SIDE_LEFT { get { if (!_CHANNEL_OUT_SIDE_LEFTReady) { _CHANNEL_OUT_SIDE_LEFTContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_SIDE_LEFT"); _CHANNEL_OUT_SIDE_LEFTReady = true; } return _CHANNEL_OUT_SIDE_LEFTContent; } }
        private static int _CHANNEL_OUT_SIDE_LEFTContent = default;
        private static bool _CHANNEL_OUT_SIDE_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_SIDE_RIGHT"/>
        /// </summary>
        public static int CHANNEL_OUT_SIDE_RIGHT { get { if (!_CHANNEL_OUT_SIDE_RIGHTReady) { _CHANNEL_OUT_SIDE_RIGHTContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_SIDE_RIGHT"); _CHANNEL_OUT_SIDE_RIGHTReady = true; } return _CHANNEL_OUT_SIDE_RIGHTContent; } }
        private static int _CHANNEL_OUT_SIDE_RIGHTContent = default;
        private static bool _CHANNEL_OUT_SIDE_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_STEREO"/>
        /// </summary>
        public static int CHANNEL_OUT_STEREO { get { if (!_CHANNEL_OUT_STEREOReady) { _CHANNEL_OUT_STEREOContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_STEREO"); _CHANNEL_OUT_STEREOReady = true; } return _CHANNEL_OUT_STEREOContent; } }
        private static int _CHANNEL_OUT_STEREOContent = default;
        private static bool _CHANNEL_OUT_STEREOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_SURROUND"/>
        /// </summary>
        public static int CHANNEL_OUT_SURROUND { get { if (!_CHANNEL_OUT_SURROUNDReady) { _CHANNEL_OUT_SURROUNDContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_SURROUND"); _CHANNEL_OUT_SURROUNDReady = true; } return _CHANNEL_OUT_SURROUNDContent; } }
        private static int _CHANNEL_OUT_SURROUNDContent = default;
        private static bool _CHANNEL_OUT_SURROUNDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_TOP_BACK_CENTER"/>
        /// </summary>
        public static int CHANNEL_OUT_TOP_BACK_CENTER { get { if (!_CHANNEL_OUT_TOP_BACK_CENTERReady) { _CHANNEL_OUT_TOP_BACK_CENTERContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_TOP_BACK_CENTER"); _CHANNEL_OUT_TOP_BACK_CENTERReady = true; } return _CHANNEL_OUT_TOP_BACK_CENTERContent; } }
        private static int _CHANNEL_OUT_TOP_BACK_CENTERContent = default;
        private static bool _CHANNEL_OUT_TOP_BACK_CENTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_TOP_BACK_LEFT"/>
        /// </summary>
        public static int CHANNEL_OUT_TOP_BACK_LEFT { get { if (!_CHANNEL_OUT_TOP_BACK_LEFTReady) { _CHANNEL_OUT_TOP_BACK_LEFTContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_TOP_BACK_LEFT"); _CHANNEL_OUT_TOP_BACK_LEFTReady = true; } return _CHANNEL_OUT_TOP_BACK_LEFTContent; } }
        private static int _CHANNEL_OUT_TOP_BACK_LEFTContent = default;
        private static bool _CHANNEL_OUT_TOP_BACK_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_TOP_BACK_RIGHT"/>
        /// </summary>
        public static int CHANNEL_OUT_TOP_BACK_RIGHT { get { if (!_CHANNEL_OUT_TOP_BACK_RIGHTReady) { _CHANNEL_OUT_TOP_BACK_RIGHTContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_TOP_BACK_RIGHT"); _CHANNEL_OUT_TOP_BACK_RIGHTReady = true; } return _CHANNEL_OUT_TOP_BACK_RIGHTContent; } }
        private static int _CHANNEL_OUT_TOP_BACK_RIGHTContent = default;
        private static bool _CHANNEL_OUT_TOP_BACK_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_TOP_CENTER"/>
        /// </summary>
        public static int CHANNEL_OUT_TOP_CENTER { get { if (!_CHANNEL_OUT_TOP_CENTERReady) { _CHANNEL_OUT_TOP_CENTERContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_TOP_CENTER"); _CHANNEL_OUT_TOP_CENTERReady = true; } return _CHANNEL_OUT_TOP_CENTERContent; } }
        private static int _CHANNEL_OUT_TOP_CENTERContent = default;
        private static bool _CHANNEL_OUT_TOP_CENTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_TOP_FRONT_CENTER"/>
        /// </summary>
        public static int CHANNEL_OUT_TOP_FRONT_CENTER { get { if (!_CHANNEL_OUT_TOP_FRONT_CENTERReady) { _CHANNEL_OUT_TOP_FRONT_CENTERContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_TOP_FRONT_CENTER"); _CHANNEL_OUT_TOP_FRONT_CENTERReady = true; } return _CHANNEL_OUT_TOP_FRONT_CENTERContent; } }
        private static int _CHANNEL_OUT_TOP_FRONT_CENTERContent = default;
        private static bool _CHANNEL_OUT_TOP_FRONT_CENTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_TOP_FRONT_LEFT"/>
        /// </summary>
        public static int CHANNEL_OUT_TOP_FRONT_LEFT { get { if (!_CHANNEL_OUT_TOP_FRONT_LEFTReady) { _CHANNEL_OUT_TOP_FRONT_LEFTContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_TOP_FRONT_LEFT"); _CHANNEL_OUT_TOP_FRONT_LEFTReady = true; } return _CHANNEL_OUT_TOP_FRONT_LEFTContent; } }
        private static int _CHANNEL_OUT_TOP_FRONT_LEFTContent = default;
        private static bool _CHANNEL_OUT_TOP_FRONT_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_TOP_FRONT_RIGHT"/>
        /// </summary>
        public static int CHANNEL_OUT_TOP_FRONT_RIGHT { get { if (!_CHANNEL_OUT_TOP_FRONT_RIGHTReady) { _CHANNEL_OUT_TOP_FRONT_RIGHTContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_TOP_FRONT_RIGHT"); _CHANNEL_OUT_TOP_FRONT_RIGHTReady = true; } return _CHANNEL_OUT_TOP_FRONT_RIGHTContent; } }
        private static int _CHANNEL_OUT_TOP_FRONT_RIGHTContent = default;
        private static bool _CHANNEL_OUT_TOP_FRONT_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_TOP_SIDE_LEFT"/>
        /// </summary>
        public static int CHANNEL_OUT_TOP_SIDE_LEFT { get { if (!_CHANNEL_OUT_TOP_SIDE_LEFTReady) { _CHANNEL_OUT_TOP_SIDE_LEFTContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_TOP_SIDE_LEFT"); _CHANNEL_OUT_TOP_SIDE_LEFTReady = true; } return _CHANNEL_OUT_TOP_SIDE_LEFTContent; } }
        private static int _CHANNEL_OUT_TOP_SIDE_LEFTContent = default;
        private static bool _CHANNEL_OUT_TOP_SIDE_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_TOP_SIDE_RIGHT"/>
        /// </summary>
        public static int CHANNEL_OUT_TOP_SIDE_RIGHT { get { if (!_CHANNEL_OUT_TOP_SIDE_RIGHTReady) { _CHANNEL_OUT_TOP_SIDE_RIGHTContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_OUT_TOP_SIDE_RIGHT"); _CHANNEL_OUT_TOP_SIDE_RIGHTReady = true; } return _CHANNEL_OUT_TOP_SIDE_RIGHTContent; } }
        private static int _CHANNEL_OUT_TOP_SIDE_RIGHTContent = default;
        private static bool _CHANNEL_OUT_TOP_SIDE_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_AAC_ELD"/>
        /// </summary>
        public static int ENCODING_AAC_ELD { get { if (!_ENCODING_AAC_ELDReady) { _ENCODING_AAC_ELDContent = SGetField<int>(LocalBridgeClazz, "ENCODING_AAC_ELD"); _ENCODING_AAC_ELDReady = true; } return _ENCODING_AAC_ELDContent; } }
        private static int _ENCODING_AAC_ELDContent = default;
        private static bool _ENCODING_AAC_ELDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_AAC_HE_V1"/>
        /// </summary>
        public static int ENCODING_AAC_HE_V1 { get { if (!_ENCODING_AAC_HE_V1Ready) { _ENCODING_AAC_HE_V1Content = SGetField<int>(LocalBridgeClazz, "ENCODING_AAC_HE_V1"); _ENCODING_AAC_HE_V1Ready = true; } return _ENCODING_AAC_HE_V1Content; } }
        private static int _ENCODING_AAC_HE_V1Content = default;
        private static bool _ENCODING_AAC_HE_V1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_AAC_HE_V2"/>
        /// </summary>
        public static int ENCODING_AAC_HE_V2 { get { if (!_ENCODING_AAC_HE_V2Ready) { _ENCODING_AAC_HE_V2Content = SGetField<int>(LocalBridgeClazz, "ENCODING_AAC_HE_V2"); _ENCODING_AAC_HE_V2Ready = true; } return _ENCODING_AAC_HE_V2Content; } }
        private static int _ENCODING_AAC_HE_V2Content = default;
        private static bool _ENCODING_AAC_HE_V2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_AAC_LC"/>
        /// </summary>
        public static int ENCODING_AAC_LC { get { if (!_ENCODING_AAC_LCReady) { _ENCODING_AAC_LCContent = SGetField<int>(LocalBridgeClazz, "ENCODING_AAC_LC"); _ENCODING_AAC_LCReady = true; } return _ENCODING_AAC_LCContent; } }
        private static int _ENCODING_AAC_LCContent = default;
        private static bool _ENCODING_AAC_LCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_AAC_XHE"/>
        /// </summary>
        public static int ENCODING_AAC_XHE { get { if (!_ENCODING_AAC_XHEReady) { _ENCODING_AAC_XHEContent = SGetField<int>(LocalBridgeClazz, "ENCODING_AAC_XHE"); _ENCODING_AAC_XHEReady = true; } return _ENCODING_AAC_XHEContent; } }
        private static int _ENCODING_AAC_XHEContent = default;
        private static bool _ENCODING_AAC_XHEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_AC3"/>
        /// </summary>
        public static int ENCODING_AC3 { get { if (!_ENCODING_AC3Ready) { _ENCODING_AC3Content = SGetField<int>(LocalBridgeClazz, "ENCODING_AC3"); _ENCODING_AC3Ready = true; } return _ENCODING_AC3Content; } }
        private static int _ENCODING_AC3Content = default;
        private static bool _ENCODING_AC3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_AC4"/>
        /// </summary>
        public static int ENCODING_AC4 { get { if (!_ENCODING_AC4Ready) { _ENCODING_AC4Content = SGetField<int>(LocalBridgeClazz, "ENCODING_AC4"); _ENCODING_AC4Ready = true; } return _ENCODING_AC4Content; } }
        private static int _ENCODING_AC4Content = default;
        private static bool _ENCODING_AC4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_DEFAULT"/>
        /// </summary>
        public static int ENCODING_DEFAULT { get { if (!_ENCODING_DEFAULTReady) { _ENCODING_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "ENCODING_DEFAULT"); _ENCODING_DEFAULTReady = true; } return _ENCODING_DEFAULTContent; } }
        private static int _ENCODING_DEFAULTContent = default;
        private static bool _ENCODING_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_DOLBY_MAT"/>
        /// </summary>
        public static int ENCODING_DOLBY_MAT { get { if (!_ENCODING_DOLBY_MATReady) { _ENCODING_DOLBY_MATContent = SGetField<int>(LocalBridgeClazz, "ENCODING_DOLBY_MAT"); _ENCODING_DOLBY_MATReady = true; } return _ENCODING_DOLBY_MATContent; } }
        private static int _ENCODING_DOLBY_MATContent = default;
        private static bool _ENCODING_DOLBY_MATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_DOLBY_TRUEHD"/>
        /// </summary>
        public static int ENCODING_DOLBY_TRUEHD { get { if (!_ENCODING_DOLBY_TRUEHDReady) { _ENCODING_DOLBY_TRUEHDContent = SGetField<int>(LocalBridgeClazz, "ENCODING_DOLBY_TRUEHD"); _ENCODING_DOLBY_TRUEHDReady = true; } return _ENCODING_DOLBY_TRUEHDContent; } }
        private static int _ENCODING_DOLBY_TRUEHDContent = default;
        private static bool _ENCODING_DOLBY_TRUEHDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_DRA"/>
        /// </summary>
        public static int ENCODING_DRA { get { if (!_ENCODING_DRAReady) { _ENCODING_DRAContent = SGetField<int>(LocalBridgeClazz, "ENCODING_DRA"); _ENCODING_DRAReady = true; } return _ENCODING_DRAContent; } }
        private static int _ENCODING_DRAContent = default;
        private static bool _ENCODING_DRAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_DSD"/>
        /// </summary>
        public static int ENCODING_DSD { get { if (!_ENCODING_DSDReady) { _ENCODING_DSDContent = SGetField<int>(LocalBridgeClazz, "ENCODING_DSD"); _ENCODING_DSDReady = true; } return _ENCODING_DSDContent; } }
        private static int _ENCODING_DSDContent = default;
        private static bool _ENCODING_DSDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_DTS"/>
        /// </summary>
        public static int ENCODING_DTS { get { if (!_ENCODING_DTSReady) { _ENCODING_DTSContent = SGetField<int>(LocalBridgeClazz, "ENCODING_DTS"); _ENCODING_DTSReady = true; } return _ENCODING_DTSContent; } }
        private static int _ENCODING_DTSContent = default;
        private static bool _ENCODING_DTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_DTS_HD"/>
        /// </summary>
        public static int ENCODING_DTS_HD { get { if (!_ENCODING_DTS_HDReady) { _ENCODING_DTS_HDContent = SGetField<int>(LocalBridgeClazz, "ENCODING_DTS_HD"); _ENCODING_DTS_HDReady = true; } return _ENCODING_DTS_HDContent; } }
        private static int _ENCODING_DTS_HDContent = default;
        private static bool _ENCODING_DTS_HDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_DTS_HD_MA"/>
        /// </summary>
        public static int ENCODING_DTS_HD_MA { get { if (!_ENCODING_DTS_HD_MAReady) { _ENCODING_DTS_HD_MAContent = SGetField<int>(LocalBridgeClazz, "ENCODING_DTS_HD_MA"); _ENCODING_DTS_HD_MAReady = true; } return _ENCODING_DTS_HD_MAContent; } }
        private static int _ENCODING_DTS_HD_MAContent = default;
        private static bool _ENCODING_DTS_HD_MAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_DTS_UHD"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int ENCODING_DTS_UHD { get { if (!_ENCODING_DTS_UHDReady) { _ENCODING_DTS_UHDContent = SGetField<int>(LocalBridgeClazz, "ENCODING_DTS_UHD"); _ENCODING_DTS_UHDReady = true; } return _ENCODING_DTS_UHDContent; } }
        private static int _ENCODING_DTS_UHDContent = default;
        private static bool _ENCODING_DTS_UHDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_DTS_UHD_P1"/>
        /// </summary>
        public static int ENCODING_DTS_UHD_P1 { get { if (!_ENCODING_DTS_UHD_P1Ready) { _ENCODING_DTS_UHD_P1Content = SGetField<int>(LocalBridgeClazz, "ENCODING_DTS_UHD_P1"); _ENCODING_DTS_UHD_P1Ready = true; } return _ENCODING_DTS_UHD_P1Content; } }
        private static int _ENCODING_DTS_UHD_P1Content = default;
        private static bool _ENCODING_DTS_UHD_P1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_DTS_UHD_P2"/>
        /// </summary>
        public static int ENCODING_DTS_UHD_P2 { get { if (!_ENCODING_DTS_UHD_P2Ready) { _ENCODING_DTS_UHD_P2Content = SGetField<int>(LocalBridgeClazz, "ENCODING_DTS_UHD_P2"); _ENCODING_DTS_UHD_P2Ready = true; } return _ENCODING_DTS_UHD_P2Content; } }
        private static int _ENCODING_DTS_UHD_P2Content = default;
        private static bool _ENCODING_DTS_UHD_P2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_E_AC3"/>
        /// </summary>
        public static int ENCODING_E_AC3 { get { if (!_ENCODING_E_AC3Ready) { _ENCODING_E_AC3Content = SGetField<int>(LocalBridgeClazz, "ENCODING_E_AC3"); _ENCODING_E_AC3Ready = true; } return _ENCODING_E_AC3Content; } }
        private static int _ENCODING_E_AC3Content = default;
        private static bool _ENCODING_E_AC3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_E_AC3_JOC"/>
        /// </summary>
        public static int ENCODING_E_AC3_JOC { get { if (!_ENCODING_E_AC3_JOCReady) { _ENCODING_E_AC3_JOCContent = SGetField<int>(LocalBridgeClazz, "ENCODING_E_AC3_JOC"); _ENCODING_E_AC3_JOCReady = true; } return _ENCODING_E_AC3_JOCContent; } }
        private static int _ENCODING_E_AC3_JOCContent = default;
        private static bool _ENCODING_E_AC3_JOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_IEC61937"/>
        /// </summary>
        public static int ENCODING_IEC61937 { get { if (!_ENCODING_IEC61937Ready) { _ENCODING_IEC61937Content = SGetField<int>(LocalBridgeClazz, "ENCODING_IEC61937"); _ENCODING_IEC61937Ready = true; } return _ENCODING_IEC61937Content; } }
        private static int _ENCODING_IEC61937Content = default;
        private static bool _ENCODING_IEC61937Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_INVALID"/>
        /// </summary>
        public static int ENCODING_INVALID { get { if (!_ENCODING_INVALIDReady) { _ENCODING_INVALIDContent = SGetField<int>(LocalBridgeClazz, "ENCODING_INVALID"); _ENCODING_INVALIDReady = true; } return _ENCODING_INVALIDContent; } }
        private static int _ENCODING_INVALIDContent = default;
        private static bool _ENCODING_INVALIDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_MP3"/>
        /// </summary>
        public static int ENCODING_MP3 { get { if (!_ENCODING_MP3Ready) { _ENCODING_MP3Content = SGetField<int>(LocalBridgeClazz, "ENCODING_MP3"); _ENCODING_MP3Ready = true; } return _ENCODING_MP3Content; } }
        private static int _ENCODING_MP3Content = default;
        private static bool _ENCODING_MP3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_MPEGH_BL_L3"/>
        /// </summary>
        public static int ENCODING_MPEGH_BL_L3 { get { if (!_ENCODING_MPEGH_BL_L3Ready) { _ENCODING_MPEGH_BL_L3Content = SGetField<int>(LocalBridgeClazz, "ENCODING_MPEGH_BL_L3"); _ENCODING_MPEGH_BL_L3Ready = true; } return _ENCODING_MPEGH_BL_L3Content; } }
        private static int _ENCODING_MPEGH_BL_L3Content = default;
        private static bool _ENCODING_MPEGH_BL_L3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_MPEGH_BL_L4"/>
        /// </summary>
        public static int ENCODING_MPEGH_BL_L4 { get { if (!_ENCODING_MPEGH_BL_L4Ready) { _ENCODING_MPEGH_BL_L4Content = SGetField<int>(LocalBridgeClazz, "ENCODING_MPEGH_BL_L4"); _ENCODING_MPEGH_BL_L4Ready = true; } return _ENCODING_MPEGH_BL_L4Content; } }
        private static int _ENCODING_MPEGH_BL_L4Content = default;
        private static bool _ENCODING_MPEGH_BL_L4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_MPEGH_LC_L3"/>
        /// </summary>
        public static int ENCODING_MPEGH_LC_L3 { get { if (!_ENCODING_MPEGH_LC_L3Ready) { _ENCODING_MPEGH_LC_L3Content = SGetField<int>(LocalBridgeClazz, "ENCODING_MPEGH_LC_L3"); _ENCODING_MPEGH_LC_L3Ready = true; } return _ENCODING_MPEGH_LC_L3Content; } }
        private static int _ENCODING_MPEGH_LC_L3Content = default;
        private static bool _ENCODING_MPEGH_LC_L3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_MPEGH_LC_L4"/>
        /// </summary>
        public static int ENCODING_MPEGH_LC_L4 { get { if (!_ENCODING_MPEGH_LC_L4Ready) { _ENCODING_MPEGH_LC_L4Content = SGetField<int>(LocalBridgeClazz, "ENCODING_MPEGH_LC_L4"); _ENCODING_MPEGH_LC_L4Ready = true; } return _ENCODING_MPEGH_LC_L4Content; } }
        private static int _ENCODING_MPEGH_LC_L4Content = default;
        private static bool _ENCODING_MPEGH_LC_L4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_OPUS"/>
        /// </summary>
        public static int ENCODING_OPUS { get { if (!_ENCODING_OPUSReady) { _ENCODING_OPUSContent = SGetField<int>(LocalBridgeClazz, "ENCODING_OPUS"); _ENCODING_OPUSReady = true; } return _ENCODING_OPUSContent; } }
        private static int _ENCODING_OPUSContent = default;
        private static bool _ENCODING_OPUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_PCM_16BIT"/>
        /// </summary>
        public static int ENCODING_PCM_16BIT { get { if (!_ENCODING_PCM_16BITReady) { _ENCODING_PCM_16BITContent = SGetField<int>(LocalBridgeClazz, "ENCODING_PCM_16BIT"); _ENCODING_PCM_16BITReady = true; } return _ENCODING_PCM_16BITContent; } }
        private static int _ENCODING_PCM_16BITContent = default;
        private static bool _ENCODING_PCM_16BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_PCM_24BIT_PACKED"/>
        /// </summary>
        public static int ENCODING_PCM_24BIT_PACKED { get { if (!_ENCODING_PCM_24BIT_PACKEDReady) { _ENCODING_PCM_24BIT_PACKEDContent = SGetField<int>(LocalBridgeClazz, "ENCODING_PCM_24BIT_PACKED"); _ENCODING_PCM_24BIT_PACKEDReady = true; } return _ENCODING_PCM_24BIT_PACKEDContent; } }
        private static int _ENCODING_PCM_24BIT_PACKEDContent = default;
        private static bool _ENCODING_PCM_24BIT_PACKEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_PCM_32BIT"/>
        /// </summary>
        public static int ENCODING_PCM_32BIT { get { if (!_ENCODING_PCM_32BITReady) { _ENCODING_PCM_32BITContent = SGetField<int>(LocalBridgeClazz, "ENCODING_PCM_32BIT"); _ENCODING_PCM_32BITReady = true; } return _ENCODING_PCM_32BITContent; } }
        private static int _ENCODING_PCM_32BITContent = default;
        private static bool _ENCODING_PCM_32BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_PCM_8BIT"/>
        /// </summary>
        public static int ENCODING_PCM_8BIT { get { if (!_ENCODING_PCM_8BITReady) { _ENCODING_PCM_8BITContent = SGetField<int>(LocalBridgeClazz, "ENCODING_PCM_8BIT"); _ENCODING_PCM_8BITReady = true; } return _ENCODING_PCM_8BITContent; } }
        private static int _ENCODING_PCM_8BITContent = default;
        private static bool _ENCODING_PCM_8BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_PCM_FLOAT"/>
        /// </summary>
        public static int ENCODING_PCM_FLOAT { get { if (!_ENCODING_PCM_FLOATReady) { _ENCODING_PCM_FLOATContent = SGetField<int>(LocalBridgeClazz, "ENCODING_PCM_FLOAT"); _ENCODING_PCM_FLOATReady = true; } return _ENCODING_PCM_FLOATContent; } }
        private static int _ENCODING_PCM_FLOATContent = default;
        private static bool _ENCODING_PCM_FLOATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#SAMPLE_RATE_UNSPECIFIED"/>
        /// </summary>
        public static int SAMPLE_RATE_UNSPECIFIED { get { if (!_SAMPLE_RATE_UNSPECIFIEDReady) { _SAMPLE_RATE_UNSPECIFIEDContent = SGetField<int>(LocalBridgeClazz, "SAMPLE_RATE_UNSPECIFIED"); _SAMPLE_RATE_UNSPECIFIEDReady = true; } return _SAMPLE_RATE_UNSPECIFIEDContent; } }
        private static int _SAMPLE_RATE_UNSPECIFIEDContent = default;
        private static bool _SAMPLE_RATE_UNSPECIFIEDReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#getChannelCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetChannelCount()
        {
            return IExecuteWithSignature<int>("getChannelCount", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#getChannelIndexMask()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetChannelIndexMask()
        {
            return IExecuteWithSignature<int>("getChannelIndexMask", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#getChannelMask()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetChannelMask()
        {
            return IExecuteWithSignature<int>("getChannelMask", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#getEncoding()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetEncoding()
        {
            return IExecuteWithSignature<int>("getEncoding", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#getFrameSizeInBytes()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetFrameSizeInBytes()
        {
            return IExecuteWithSignature<int>("getFrameSizeInBytes", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#getSampleRate()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetSampleRate()
        {
            return IExecuteWithSignature<int>("getSampleRate", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFormat.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecute("writeToParcel", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region Builder
        public partial class Builder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioFormat.Builder.html#%3Cinit%3E(android.media.AudioFormat)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.AudioFormat"/></param>
            public Builder(Android.Media.AudioFormat arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioFormat.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Media.AudioFormat"/></returns>
            public Android.Media.AudioFormat Build()
            {
                return IExecuteWithSignature<Android.Media.AudioFormat>("build", "()Landroid/media/AudioFormat;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioFormat.Builder.html#setChannelIndexMask(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.AudioFormat.Builder"/></returns>
            public Android.Media.AudioFormat.Builder SetChannelIndexMask(int arg0)
            {
                return IExecuteWithSignature<Android.Media.AudioFormat.Builder>("setChannelIndexMask", "(I)Landroid/media/AudioFormat$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioFormat.Builder.html#setChannelMask(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.AudioFormat.Builder"/></returns>
            public Android.Media.AudioFormat.Builder SetChannelMask(int arg0)
            {
                return IExecuteWithSignature<Android.Media.AudioFormat.Builder>("setChannelMask", "(I)Landroid/media/AudioFormat$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioFormat.Builder.html#setEncoding(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.AudioFormat.Builder"/></returns>
            /// <exception cref="Java.Lang.IllegalArgumentException"/>
            public Android.Media.AudioFormat.Builder SetEncoding(int arg0)
            {
                return IExecuteWithSignature<Android.Media.AudioFormat.Builder>("setEncoding", "(I)Landroid/media/AudioFormat$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioFormat.Builder.html#setSampleRate(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.AudioFormat.Builder"/></returns>
            /// <exception cref="Java.Lang.IllegalArgumentException"/>
            public Android.Media.AudioFormat.Builder SetSampleRate(int arg0)
            {
                return IExecuteWithSignature<Android.Media.AudioFormat.Builder>("setSampleRate", "(I)Landroid/media/AudioFormat$Builder;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
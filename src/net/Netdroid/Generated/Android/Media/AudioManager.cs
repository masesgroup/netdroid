/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media
{
    #region AudioManager declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/media/AudioManager.html"/>
    /// </summary>
    public partial class AudioManager : MASES.JCOBridge.C2JBridge.JVMBridgeBase<AudioManager>
    {
        const string _bridgeClassName = "android.media.AudioManager";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public AudioManager() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public AudioManager(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region AudioPlaybackCallback declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.AudioPlaybackCallback.html"/>
        /// </summary>
        public partial class AudioPlaybackCallback : MASES.JCOBridge.C2JBridge.JVMBridgeBase<AudioPlaybackCallback>
        {
            const string _bridgeClassName = "android.media.AudioManager$AudioPlaybackCallback";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("AudioPlaybackCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public AudioPlaybackCallback() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("AudioPlaybackCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public AudioPlaybackCallback(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region AudioRecordingCallback declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.AudioRecordingCallback.html"/>
        /// </summary>
        public partial class AudioRecordingCallback : MASES.JCOBridge.C2JBridge.JVMBridgeBase<AudioRecordingCallback>
        {
            const string _bridgeClassName = "android.media.AudioManager$AudioRecordingCallback";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("AudioRecordingCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public AudioRecordingCallback() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("AudioRecordingCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public AudioRecordingCallback(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region OnAudioFocusChangeListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.OnAudioFocusChangeListener.html"/>
        /// </summary>
        public partial class OnAudioFocusChangeListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnAudioFocusChangeListener() { InitializeHandlers(); }
        
            const string _bridgeClassName = "org.mases.netdroid.generated.android.media.AudioManager_OnAudioFocusChangeListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
        
        
            // TODO: complete the class
        
        }
        #endregion
        
        #region OnAudioFocusChangeListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="OnAudioFocusChangeListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnAudioFocusChangeListenerDirect : OnAudioFocusChangeListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;
        
            /// <inheritdoc />
            protected override void InitializeHandlers() { }
        
            const string _bridgeClassName = "android.media.AudioManager$OnAudioFocusChangeListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region OnCommunicationDeviceChangedListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.OnCommunicationDeviceChangedListener.html"/>
        /// </summary>
        public partial class OnCommunicationDeviceChangedListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnCommunicationDeviceChangedListener() { InitializeHandlers(); }
        
            const string _bridgeClassName = "org.mases.netdroid.generated.android.media.AudioManager_OnCommunicationDeviceChangedListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
        
        
            // TODO: complete the class
        
        }
        #endregion
        
        #region OnCommunicationDeviceChangedListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="OnCommunicationDeviceChangedListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnCommunicationDeviceChangedListenerDirect : OnCommunicationDeviceChangedListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;
        
            /// <inheritdoc />
            protected override void InitializeHandlers() { }
        
            const string _bridgeClassName = "android.media.AudioManager$OnCommunicationDeviceChangedListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region OnModeChangedListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.OnModeChangedListener.html"/>
        /// </summary>
        public partial class OnModeChangedListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnModeChangedListener() { InitializeHandlers(); }
        
            const string _bridgeClassName = "org.mases.netdroid.generated.android.media.AudioManager_OnModeChangedListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
        
        
            // TODO: complete the class
        
        }
        #endregion
        
        #region OnModeChangedListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="OnModeChangedListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnModeChangedListenerDirect : OnModeChangedListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;
        
            /// <inheritdoc />
            protected override void InitializeHandlers() { }
        
            const string _bridgeClassName = "android.media.AudioManager$OnModeChangedListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region OnPreferredMixerAttributesChangedListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.OnPreferredMixerAttributesChangedListener.html"/>
        /// </summary>
        public partial class OnPreferredMixerAttributesChangedListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnPreferredMixerAttributesChangedListener() { InitializeHandlers(); }
        
            const string _bridgeClassName = "org.mases.netdroid.generated.android.media.AudioManager_OnPreferredMixerAttributesChangedListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
        
        
            // TODO: complete the class
        
        }
        #endregion
        
        #region OnPreferredMixerAttributesChangedListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="OnPreferredMixerAttributesChangedListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnPreferredMixerAttributesChangedListenerDirect : OnPreferredMixerAttributesChangedListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;
        
            /// <inheritdoc />
            protected override void InitializeHandlers() { }
        
            const string _bridgeClassName = "android.media.AudioManager$OnPreferredMixerAttributesChangedListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

    
    }
    #endregion

    #region AudioManager implementation
    public partial class AudioManager
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#ADJUST_LOWER"/>
        /// </summary>
        public static int ADJUST_LOWER { get { if (!_ADJUST_LOWERReady) { _ADJUST_LOWERContent = SGetField<int>(LocalBridgeClazz, "ADJUST_LOWER"); _ADJUST_LOWERReady = true; } return _ADJUST_LOWERContent; } }
        private static int _ADJUST_LOWERContent = default;
        private static bool _ADJUST_LOWERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#ADJUST_MUTE"/>
        /// </summary>
        public static int ADJUST_MUTE { get { if (!_ADJUST_MUTEReady) { _ADJUST_MUTEContent = SGetField<int>(LocalBridgeClazz, "ADJUST_MUTE"); _ADJUST_MUTEReady = true; } return _ADJUST_MUTEContent; } }
        private static int _ADJUST_MUTEContent = default;
        private static bool _ADJUST_MUTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#ADJUST_RAISE"/>
        /// </summary>
        public static int ADJUST_RAISE { get { if (!_ADJUST_RAISEReady) { _ADJUST_RAISEContent = SGetField<int>(LocalBridgeClazz, "ADJUST_RAISE"); _ADJUST_RAISEReady = true; } return _ADJUST_RAISEContent; } }
        private static int _ADJUST_RAISEContent = default;
        private static bool _ADJUST_RAISEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#ADJUST_SAME"/>
        /// </summary>
        public static int ADJUST_SAME { get { if (!_ADJUST_SAMEReady) { _ADJUST_SAMEContent = SGetField<int>(LocalBridgeClazz, "ADJUST_SAME"); _ADJUST_SAMEReady = true; } return _ADJUST_SAMEContent; } }
        private static int _ADJUST_SAMEContent = default;
        private static bool _ADJUST_SAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#ADJUST_TOGGLE_MUTE"/>
        /// </summary>
        public static int ADJUST_TOGGLE_MUTE { get { if (!_ADJUST_TOGGLE_MUTEReady) { _ADJUST_TOGGLE_MUTEContent = SGetField<int>(LocalBridgeClazz, "ADJUST_TOGGLE_MUTE"); _ADJUST_TOGGLE_MUTEReady = true; } return _ADJUST_TOGGLE_MUTEContent; } }
        private static int _ADJUST_TOGGLE_MUTEContent = default;
        private static bool _ADJUST_TOGGLE_MUTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#ADJUST_UNMUTE"/>
        /// </summary>
        public static int ADJUST_UNMUTE { get { if (!_ADJUST_UNMUTEReady) { _ADJUST_UNMUTEContent = SGetField<int>(LocalBridgeClazz, "ADJUST_UNMUTE"); _ADJUST_UNMUTEReady = true; } return _ADJUST_UNMUTEContent; } }
        private static int _ADJUST_UNMUTEContent = default;
        private static bool _ADJUST_UNMUTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#AUDIO_SESSION_ID_GENERATE"/>
        /// </summary>
        public static int AUDIO_SESSION_ID_GENERATE { get { if (!_AUDIO_SESSION_ID_GENERATEReady) { _AUDIO_SESSION_ID_GENERATEContent = SGetField<int>(LocalBridgeClazz, "AUDIO_SESSION_ID_GENERATE"); _AUDIO_SESSION_ID_GENERATEReady = true; } return _AUDIO_SESSION_ID_GENERATEContent; } }
        private static int _AUDIO_SESSION_ID_GENERATEContent = default;
        private static bool _AUDIO_SESSION_ID_GENERATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#AUDIOFOCUS_GAIN"/>
        /// </summary>
        public static int AUDIOFOCUS_GAIN { get { if (!_AUDIOFOCUS_GAINReady) { _AUDIOFOCUS_GAINContent = SGetField<int>(LocalBridgeClazz, "AUDIOFOCUS_GAIN"); _AUDIOFOCUS_GAINReady = true; } return _AUDIOFOCUS_GAINContent; } }
        private static int _AUDIOFOCUS_GAINContent = default;
        private static bool _AUDIOFOCUS_GAINReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#AUDIOFOCUS_GAIN_TRANSIENT"/>
        /// </summary>
        public static int AUDIOFOCUS_GAIN_TRANSIENT { get { if (!_AUDIOFOCUS_GAIN_TRANSIENTReady) { _AUDIOFOCUS_GAIN_TRANSIENTContent = SGetField<int>(LocalBridgeClazz, "AUDIOFOCUS_GAIN_TRANSIENT"); _AUDIOFOCUS_GAIN_TRANSIENTReady = true; } return _AUDIOFOCUS_GAIN_TRANSIENTContent; } }
        private static int _AUDIOFOCUS_GAIN_TRANSIENTContent = default;
        private static bool _AUDIOFOCUS_GAIN_TRANSIENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE"/>
        /// </summary>
        public static int AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE { get { if (!_AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVEReady) { _AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVEContent = SGetField<int>(LocalBridgeClazz, "AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE"); _AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVEReady = true; } return _AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVEContent; } }
        private static int _AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVEContent = default;
        private static bool _AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK"/>
        /// </summary>
        public static int AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK { get { if (!_AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCKReady) { _AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCKContent = SGetField<int>(LocalBridgeClazz, "AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK"); _AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCKReady = true; } return _AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCKContent; } }
        private static int _AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCKContent = default;
        private static bool _AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#AUDIOFOCUS_LOSS"/>
        /// </summary>
        public static int AUDIOFOCUS_LOSS { get { if (!_AUDIOFOCUS_LOSSReady) { _AUDIOFOCUS_LOSSContent = SGetField<int>(LocalBridgeClazz, "AUDIOFOCUS_LOSS"); _AUDIOFOCUS_LOSSReady = true; } return _AUDIOFOCUS_LOSSContent; } }
        private static int _AUDIOFOCUS_LOSSContent = default;
        private static bool _AUDIOFOCUS_LOSSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#AUDIOFOCUS_LOSS_TRANSIENT"/>
        /// </summary>
        public static int AUDIOFOCUS_LOSS_TRANSIENT { get { if (!_AUDIOFOCUS_LOSS_TRANSIENTReady) { _AUDIOFOCUS_LOSS_TRANSIENTContent = SGetField<int>(LocalBridgeClazz, "AUDIOFOCUS_LOSS_TRANSIENT"); _AUDIOFOCUS_LOSS_TRANSIENTReady = true; } return _AUDIOFOCUS_LOSS_TRANSIENTContent; } }
        private static int _AUDIOFOCUS_LOSS_TRANSIENTContent = default;
        private static bool _AUDIOFOCUS_LOSS_TRANSIENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK"/>
        /// </summary>
        public static int AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK { get { if (!_AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCKReady) { _AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCKContent = SGetField<int>(LocalBridgeClazz, "AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK"); _AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCKReady = true; } return _AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCKContent; } }
        private static int _AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCKContent = default;
        private static bool _AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#AUDIOFOCUS_NONE"/>
        /// </summary>
        public static int AUDIOFOCUS_NONE { get { if (!_AUDIOFOCUS_NONEReady) { _AUDIOFOCUS_NONEContent = SGetField<int>(LocalBridgeClazz, "AUDIOFOCUS_NONE"); _AUDIOFOCUS_NONEReady = true; } return _AUDIOFOCUS_NONEContent; } }
        private static int _AUDIOFOCUS_NONEContent = default;
        private static bool _AUDIOFOCUS_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#AUDIOFOCUS_REQUEST_DELAYED"/>
        /// </summary>
        public static int AUDIOFOCUS_REQUEST_DELAYED { get { if (!_AUDIOFOCUS_REQUEST_DELAYEDReady) { _AUDIOFOCUS_REQUEST_DELAYEDContent = SGetField<int>(LocalBridgeClazz, "AUDIOFOCUS_REQUEST_DELAYED"); _AUDIOFOCUS_REQUEST_DELAYEDReady = true; } return _AUDIOFOCUS_REQUEST_DELAYEDContent; } }
        private static int _AUDIOFOCUS_REQUEST_DELAYEDContent = default;
        private static bool _AUDIOFOCUS_REQUEST_DELAYEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#AUDIOFOCUS_REQUEST_FAILED"/>
        /// </summary>
        public static int AUDIOFOCUS_REQUEST_FAILED { get { if (!_AUDIOFOCUS_REQUEST_FAILEDReady) { _AUDIOFOCUS_REQUEST_FAILEDContent = SGetField<int>(LocalBridgeClazz, "AUDIOFOCUS_REQUEST_FAILED"); _AUDIOFOCUS_REQUEST_FAILEDReady = true; } return _AUDIOFOCUS_REQUEST_FAILEDContent; } }
        private static int _AUDIOFOCUS_REQUEST_FAILEDContent = default;
        private static bool _AUDIOFOCUS_REQUEST_FAILEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#AUDIOFOCUS_REQUEST_GRANTED"/>
        /// </summary>
        public static int AUDIOFOCUS_REQUEST_GRANTED { get { if (!_AUDIOFOCUS_REQUEST_GRANTEDReady) { _AUDIOFOCUS_REQUEST_GRANTEDContent = SGetField<int>(LocalBridgeClazz, "AUDIOFOCUS_REQUEST_GRANTED"); _AUDIOFOCUS_REQUEST_GRANTEDReady = true; } return _AUDIOFOCUS_REQUEST_GRANTEDContent; } }
        private static int _AUDIOFOCUS_REQUEST_GRANTEDContent = default;
        private static bool _AUDIOFOCUS_REQUEST_GRANTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#DIRECT_PLAYBACK_BITSTREAM_SUPPORTED"/>
        /// </summary>
        public static int DIRECT_PLAYBACK_BITSTREAM_SUPPORTED { get { if (!_DIRECT_PLAYBACK_BITSTREAM_SUPPORTEDReady) { _DIRECT_PLAYBACK_BITSTREAM_SUPPORTEDContent = SGetField<int>(LocalBridgeClazz, "DIRECT_PLAYBACK_BITSTREAM_SUPPORTED"); _DIRECT_PLAYBACK_BITSTREAM_SUPPORTEDReady = true; } return _DIRECT_PLAYBACK_BITSTREAM_SUPPORTEDContent; } }
        private static int _DIRECT_PLAYBACK_BITSTREAM_SUPPORTEDContent = default;
        private static bool _DIRECT_PLAYBACK_BITSTREAM_SUPPORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#DIRECT_PLAYBACK_NOT_SUPPORTED"/>
        /// </summary>
        public static int DIRECT_PLAYBACK_NOT_SUPPORTED { get { if (!_DIRECT_PLAYBACK_NOT_SUPPORTEDReady) { _DIRECT_PLAYBACK_NOT_SUPPORTEDContent = SGetField<int>(LocalBridgeClazz, "DIRECT_PLAYBACK_NOT_SUPPORTED"); _DIRECT_PLAYBACK_NOT_SUPPORTEDReady = true; } return _DIRECT_PLAYBACK_NOT_SUPPORTEDContent; } }
        private static int _DIRECT_PLAYBACK_NOT_SUPPORTEDContent = default;
        private static bool _DIRECT_PLAYBACK_NOT_SUPPORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#DIRECT_PLAYBACK_OFFLOAD_GAPLESS_SUPPORTED"/>
        /// </summary>
        public static int DIRECT_PLAYBACK_OFFLOAD_GAPLESS_SUPPORTED { get { if (!_DIRECT_PLAYBACK_OFFLOAD_GAPLESS_SUPPORTEDReady) { _DIRECT_PLAYBACK_OFFLOAD_GAPLESS_SUPPORTEDContent = SGetField<int>(LocalBridgeClazz, "DIRECT_PLAYBACK_OFFLOAD_GAPLESS_SUPPORTED"); _DIRECT_PLAYBACK_OFFLOAD_GAPLESS_SUPPORTEDReady = true; } return _DIRECT_PLAYBACK_OFFLOAD_GAPLESS_SUPPORTEDContent; } }
        private static int _DIRECT_PLAYBACK_OFFLOAD_GAPLESS_SUPPORTEDContent = default;
        private static bool _DIRECT_PLAYBACK_OFFLOAD_GAPLESS_SUPPORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#DIRECT_PLAYBACK_OFFLOAD_SUPPORTED"/>
        /// </summary>
        public static int DIRECT_PLAYBACK_OFFLOAD_SUPPORTED { get { if (!_DIRECT_PLAYBACK_OFFLOAD_SUPPORTEDReady) { _DIRECT_PLAYBACK_OFFLOAD_SUPPORTEDContent = SGetField<int>(LocalBridgeClazz, "DIRECT_PLAYBACK_OFFLOAD_SUPPORTED"); _DIRECT_PLAYBACK_OFFLOAD_SUPPORTEDReady = true; } return _DIRECT_PLAYBACK_OFFLOAD_SUPPORTEDContent; } }
        private static int _DIRECT_PLAYBACK_OFFLOAD_SUPPORTEDContent = default;
        private static bool _DIRECT_PLAYBACK_OFFLOAD_SUPPORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#ENCODED_SURROUND_OUTPUT_ALWAYS"/>
        /// </summary>
        public static int ENCODED_SURROUND_OUTPUT_ALWAYS { get { if (!_ENCODED_SURROUND_OUTPUT_ALWAYSReady) { _ENCODED_SURROUND_OUTPUT_ALWAYSContent = SGetField<int>(LocalBridgeClazz, "ENCODED_SURROUND_OUTPUT_ALWAYS"); _ENCODED_SURROUND_OUTPUT_ALWAYSReady = true; } return _ENCODED_SURROUND_OUTPUT_ALWAYSContent; } }
        private static int _ENCODED_SURROUND_OUTPUT_ALWAYSContent = default;
        private static bool _ENCODED_SURROUND_OUTPUT_ALWAYSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#ENCODED_SURROUND_OUTPUT_AUTO"/>
        /// </summary>
        public static int ENCODED_SURROUND_OUTPUT_AUTO { get { if (!_ENCODED_SURROUND_OUTPUT_AUTOReady) { _ENCODED_SURROUND_OUTPUT_AUTOContent = SGetField<int>(LocalBridgeClazz, "ENCODED_SURROUND_OUTPUT_AUTO"); _ENCODED_SURROUND_OUTPUT_AUTOReady = true; } return _ENCODED_SURROUND_OUTPUT_AUTOContent; } }
        private static int _ENCODED_SURROUND_OUTPUT_AUTOContent = default;
        private static bool _ENCODED_SURROUND_OUTPUT_AUTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#ENCODED_SURROUND_OUTPUT_MANUAL"/>
        /// </summary>
        public static int ENCODED_SURROUND_OUTPUT_MANUAL { get { if (!_ENCODED_SURROUND_OUTPUT_MANUALReady) { _ENCODED_SURROUND_OUTPUT_MANUALContent = SGetField<int>(LocalBridgeClazz, "ENCODED_SURROUND_OUTPUT_MANUAL"); _ENCODED_SURROUND_OUTPUT_MANUALReady = true; } return _ENCODED_SURROUND_OUTPUT_MANUALContent; } }
        private static int _ENCODED_SURROUND_OUTPUT_MANUALContent = default;
        private static bool _ENCODED_SURROUND_OUTPUT_MANUALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#ENCODED_SURROUND_OUTPUT_NEVER"/>
        /// </summary>
        public static int ENCODED_SURROUND_OUTPUT_NEVER { get { if (!_ENCODED_SURROUND_OUTPUT_NEVERReady) { _ENCODED_SURROUND_OUTPUT_NEVERContent = SGetField<int>(LocalBridgeClazz, "ENCODED_SURROUND_OUTPUT_NEVER"); _ENCODED_SURROUND_OUTPUT_NEVERReady = true; } return _ENCODED_SURROUND_OUTPUT_NEVERContent; } }
        private static int _ENCODED_SURROUND_OUTPUT_NEVERContent = default;
        private static bool _ENCODED_SURROUND_OUTPUT_NEVERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#ENCODED_SURROUND_OUTPUT_UNKNOWN"/>
        /// </summary>
        public static int ENCODED_SURROUND_OUTPUT_UNKNOWN { get { if (!_ENCODED_SURROUND_OUTPUT_UNKNOWNReady) { _ENCODED_SURROUND_OUTPUT_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "ENCODED_SURROUND_OUTPUT_UNKNOWN"); _ENCODED_SURROUND_OUTPUT_UNKNOWNReady = true; } return _ENCODED_SURROUND_OUTPUT_UNKNOWNContent; } }
        private static int _ENCODED_SURROUND_OUTPUT_UNKNOWNContent = default;
        private static bool _ENCODED_SURROUND_OUTPUT_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#ERROR"/>
        /// </summary>
        public static int ERROR { get { if (!_ERRORReady) { _ERRORContent = SGetField<int>(LocalBridgeClazz, "ERROR"); _ERRORReady = true; } return _ERRORContent; } }
        private static int _ERRORContent = default;
        private static bool _ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#ERROR_DEAD_OBJECT"/>
        /// </summary>
        public static int ERROR_DEAD_OBJECT { get { if (!_ERROR_DEAD_OBJECTReady) { _ERROR_DEAD_OBJECTContent = SGetField<int>(LocalBridgeClazz, "ERROR_DEAD_OBJECT"); _ERROR_DEAD_OBJECTReady = true; } return _ERROR_DEAD_OBJECTContent; } }
        private static int _ERROR_DEAD_OBJECTContent = default;
        private static bool _ERROR_DEAD_OBJECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#FLAG_ALLOW_RINGER_MODES"/>
        /// </summary>
        public static int FLAG_ALLOW_RINGER_MODES { get { if (!_FLAG_ALLOW_RINGER_MODESReady) { _FLAG_ALLOW_RINGER_MODESContent = SGetField<int>(LocalBridgeClazz, "FLAG_ALLOW_RINGER_MODES"); _FLAG_ALLOW_RINGER_MODESReady = true; } return _FLAG_ALLOW_RINGER_MODESContent; } }
        private static int _FLAG_ALLOW_RINGER_MODESContent = default;
        private static bool _FLAG_ALLOW_RINGER_MODESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#FLAG_PLAY_SOUND"/>
        /// </summary>
        public static int FLAG_PLAY_SOUND { get { if (!_FLAG_PLAY_SOUNDReady) { _FLAG_PLAY_SOUNDContent = SGetField<int>(LocalBridgeClazz, "FLAG_PLAY_SOUND"); _FLAG_PLAY_SOUNDReady = true; } return _FLAG_PLAY_SOUNDContent; } }
        private static int _FLAG_PLAY_SOUNDContent = default;
        private static bool _FLAG_PLAY_SOUNDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#FLAG_REMOVE_SOUND_AND_VIBRATE"/>
        /// </summary>
        public static int FLAG_REMOVE_SOUND_AND_VIBRATE { get { if (!_FLAG_REMOVE_SOUND_AND_VIBRATEReady) { _FLAG_REMOVE_SOUND_AND_VIBRATEContent = SGetField<int>(LocalBridgeClazz, "FLAG_REMOVE_SOUND_AND_VIBRATE"); _FLAG_REMOVE_SOUND_AND_VIBRATEReady = true; } return _FLAG_REMOVE_SOUND_AND_VIBRATEContent; } }
        private static int _FLAG_REMOVE_SOUND_AND_VIBRATEContent = default;
        private static bool _FLAG_REMOVE_SOUND_AND_VIBRATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#FLAG_SHOW_UI"/>
        /// </summary>
        public static int FLAG_SHOW_UI { get { if (!_FLAG_SHOW_UIReady) { _FLAG_SHOW_UIContent = SGetField<int>(LocalBridgeClazz, "FLAG_SHOW_UI"); _FLAG_SHOW_UIReady = true; } return _FLAG_SHOW_UIContent; } }
        private static int _FLAG_SHOW_UIContent = default;
        private static bool _FLAG_SHOW_UIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#FLAG_VIBRATE"/>
        /// </summary>
        public static int FLAG_VIBRATE { get { if (!_FLAG_VIBRATEReady) { _FLAG_VIBRATEContent = SGetField<int>(LocalBridgeClazz, "FLAG_VIBRATE"); _FLAG_VIBRATEReady = true; } return _FLAG_VIBRATEContent; } }
        private static int _FLAG_VIBRATEContent = default;
        private static bool _FLAG_VIBRATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#FX_BACK"/>
        /// </summary>
        public static int FX_BACK { get { if (!_FX_BACKReady) { _FX_BACKContent = SGetField<int>(LocalBridgeClazz, "FX_BACK"); _FX_BACKReady = true; } return _FX_BACKContent; } }
        private static int _FX_BACKContent = default;
        private static bool _FX_BACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#FX_FOCUS_NAVIGATION_DOWN"/>
        /// </summary>
        public static int FX_FOCUS_NAVIGATION_DOWN { get { if (!_FX_FOCUS_NAVIGATION_DOWNReady) { _FX_FOCUS_NAVIGATION_DOWNContent = SGetField<int>(LocalBridgeClazz, "FX_FOCUS_NAVIGATION_DOWN"); _FX_FOCUS_NAVIGATION_DOWNReady = true; } return _FX_FOCUS_NAVIGATION_DOWNContent; } }
        private static int _FX_FOCUS_NAVIGATION_DOWNContent = default;
        private static bool _FX_FOCUS_NAVIGATION_DOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#FX_FOCUS_NAVIGATION_LEFT"/>
        /// </summary>
        public static int FX_FOCUS_NAVIGATION_LEFT { get { if (!_FX_FOCUS_NAVIGATION_LEFTReady) { _FX_FOCUS_NAVIGATION_LEFTContent = SGetField<int>(LocalBridgeClazz, "FX_FOCUS_NAVIGATION_LEFT"); _FX_FOCUS_NAVIGATION_LEFTReady = true; } return _FX_FOCUS_NAVIGATION_LEFTContent; } }
        private static int _FX_FOCUS_NAVIGATION_LEFTContent = default;
        private static bool _FX_FOCUS_NAVIGATION_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#FX_FOCUS_NAVIGATION_RIGHT"/>
        /// </summary>
        public static int FX_FOCUS_NAVIGATION_RIGHT { get { if (!_FX_FOCUS_NAVIGATION_RIGHTReady) { _FX_FOCUS_NAVIGATION_RIGHTContent = SGetField<int>(LocalBridgeClazz, "FX_FOCUS_NAVIGATION_RIGHT"); _FX_FOCUS_NAVIGATION_RIGHTReady = true; } return _FX_FOCUS_NAVIGATION_RIGHTContent; } }
        private static int _FX_FOCUS_NAVIGATION_RIGHTContent = default;
        private static bool _FX_FOCUS_NAVIGATION_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#FX_FOCUS_NAVIGATION_UP"/>
        /// </summary>
        public static int FX_FOCUS_NAVIGATION_UP { get { if (!_FX_FOCUS_NAVIGATION_UPReady) { _FX_FOCUS_NAVIGATION_UPContent = SGetField<int>(LocalBridgeClazz, "FX_FOCUS_NAVIGATION_UP"); _FX_FOCUS_NAVIGATION_UPReady = true; } return _FX_FOCUS_NAVIGATION_UPContent; } }
        private static int _FX_FOCUS_NAVIGATION_UPContent = default;
        private static bool _FX_FOCUS_NAVIGATION_UPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#FX_KEY_CLICK"/>
        /// </summary>
        public static int FX_KEY_CLICK { get { if (!_FX_KEY_CLICKReady) { _FX_KEY_CLICKContent = SGetField<int>(LocalBridgeClazz, "FX_KEY_CLICK"); _FX_KEY_CLICKReady = true; } return _FX_KEY_CLICKContent; } }
        private static int _FX_KEY_CLICKContent = default;
        private static bool _FX_KEY_CLICKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#FX_KEYPRESS_DELETE"/>
        /// </summary>
        public static int FX_KEYPRESS_DELETE { get { if (!_FX_KEYPRESS_DELETEReady) { _FX_KEYPRESS_DELETEContent = SGetField<int>(LocalBridgeClazz, "FX_KEYPRESS_DELETE"); _FX_KEYPRESS_DELETEReady = true; } return _FX_KEYPRESS_DELETEContent; } }
        private static int _FX_KEYPRESS_DELETEContent = default;
        private static bool _FX_KEYPRESS_DELETEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#FX_KEYPRESS_INVALID"/>
        /// </summary>
        public static int FX_KEYPRESS_INVALID { get { if (!_FX_KEYPRESS_INVALIDReady) { _FX_KEYPRESS_INVALIDContent = SGetField<int>(LocalBridgeClazz, "FX_KEYPRESS_INVALID"); _FX_KEYPRESS_INVALIDReady = true; } return _FX_KEYPRESS_INVALIDContent; } }
        private static int _FX_KEYPRESS_INVALIDContent = default;
        private static bool _FX_KEYPRESS_INVALIDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#FX_KEYPRESS_RETURN"/>
        /// </summary>
        public static int FX_KEYPRESS_RETURN { get { if (!_FX_KEYPRESS_RETURNReady) { _FX_KEYPRESS_RETURNContent = SGetField<int>(LocalBridgeClazz, "FX_KEYPRESS_RETURN"); _FX_KEYPRESS_RETURNReady = true; } return _FX_KEYPRESS_RETURNContent; } }
        private static int _FX_KEYPRESS_RETURNContent = default;
        private static bool _FX_KEYPRESS_RETURNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#FX_KEYPRESS_SPACEBAR"/>
        /// </summary>
        public static int FX_KEYPRESS_SPACEBAR { get { if (!_FX_KEYPRESS_SPACEBARReady) { _FX_KEYPRESS_SPACEBARContent = SGetField<int>(LocalBridgeClazz, "FX_KEYPRESS_SPACEBAR"); _FX_KEYPRESS_SPACEBARReady = true; } return _FX_KEYPRESS_SPACEBARContent; } }
        private static int _FX_KEYPRESS_SPACEBARContent = default;
        private static bool _FX_KEYPRESS_SPACEBARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#FX_KEYPRESS_STANDARD"/>
        /// </summary>
        public static int FX_KEYPRESS_STANDARD { get { if (!_FX_KEYPRESS_STANDARDReady) { _FX_KEYPRESS_STANDARDContent = SGetField<int>(LocalBridgeClazz, "FX_KEYPRESS_STANDARD"); _FX_KEYPRESS_STANDARDReady = true; } return _FX_KEYPRESS_STANDARDContent; } }
        private static int _FX_KEYPRESS_STANDARDContent = default;
        private static bool _FX_KEYPRESS_STANDARDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#GET_DEVICES_ALL"/>
        /// </summary>
        public static int GET_DEVICES_ALL { get { if (!_GET_DEVICES_ALLReady) { _GET_DEVICES_ALLContent = SGetField<int>(LocalBridgeClazz, "GET_DEVICES_ALL"); _GET_DEVICES_ALLReady = true; } return _GET_DEVICES_ALLContent; } }
        private static int _GET_DEVICES_ALLContent = default;
        private static bool _GET_DEVICES_ALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#GET_DEVICES_INPUTS"/>
        /// </summary>
        public static int GET_DEVICES_INPUTS { get { if (!_GET_DEVICES_INPUTSReady) { _GET_DEVICES_INPUTSContent = SGetField<int>(LocalBridgeClazz, "GET_DEVICES_INPUTS"); _GET_DEVICES_INPUTSReady = true; } return _GET_DEVICES_INPUTSContent; } }
        private static int _GET_DEVICES_INPUTSContent = default;
        private static bool _GET_DEVICES_INPUTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#GET_DEVICES_OUTPUTS"/>
        /// </summary>
        public static int GET_DEVICES_OUTPUTS { get { if (!_GET_DEVICES_OUTPUTSReady) { _GET_DEVICES_OUTPUTSContent = SGetField<int>(LocalBridgeClazz, "GET_DEVICES_OUTPUTS"); _GET_DEVICES_OUTPUTSReady = true; } return _GET_DEVICES_OUTPUTSContent; } }
        private static int _GET_DEVICES_OUTPUTSContent = default;
        private static bool _GET_DEVICES_OUTPUTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#MODE_CALL_REDIRECT"/>
        /// </summary>
        public static int MODE_CALL_REDIRECT { get { if (!_MODE_CALL_REDIRECTReady) { _MODE_CALL_REDIRECTContent = SGetField<int>(LocalBridgeClazz, "MODE_CALL_REDIRECT"); _MODE_CALL_REDIRECTReady = true; } return _MODE_CALL_REDIRECTContent; } }
        private static int _MODE_CALL_REDIRECTContent = default;
        private static bool _MODE_CALL_REDIRECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#MODE_CALL_SCREENING"/>
        /// </summary>
        public static int MODE_CALL_SCREENING { get { if (!_MODE_CALL_SCREENINGReady) { _MODE_CALL_SCREENINGContent = SGetField<int>(LocalBridgeClazz, "MODE_CALL_SCREENING"); _MODE_CALL_SCREENINGReady = true; } return _MODE_CALL_SCREENINGContent; } }
        private static int _MODE_CALL_SCREENINGContent = default;
        private static bool _MODE_CALL_SCREENINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#MODE_COMMUNICATION_REDIRECT"/>
        /// </summary>
        public static int MODE_COMMUNICATION_REDIRECT { get { if (!_MODE_COMMUNICATION_REDIRECTReady) { _MODE_COMMUNICATION_REDIRECTContent = SGetField<int>(LocalBridgeClazz, "MODE_COMMUNICATION_REDIRECT"); _MODE_COMMUNICATION_REDIRECTReady = true; } return _MODE_COMMUNICATION_REDIRECTContent; } }
        private static int _MODE_COMMUNICATION_REDIRECTContent = default;
        private static bool _MODE_COMMUNICATION_REDIRECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#MODE_CURRENT"/>
        /// </summary>
        public static int MODE_CURRENT { get { if (!_MODE_CURRENTReady) { _MODE_CURRENTContent = SGetField<int>(LocalBridgeClazz, "MODE_CURRENT"); _MODE_CURRENTReady = true; } return _MODE_CURRENTContent; } }
        private static int _MODE_CURRENTContent = default;
        private static bool _MODE_CURRENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#MODE_IN_CALL"/>
        /// </summary>
        public static int MODE_IN_CALL { get { if (!_MODE_IN_CALLReady) { _MODE_IN_CALLContent = SGetField<int>(LocalBridgeClazz, "MODE_IN_CALL"); _MODE_IN_CALLReady = true; } return _MODE_IN_CALLContent; } }
        private static int _MODE_IN_CALLContent = default;
        private static bool _MODE_IN_CALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#MODE_IN_COMMUNICATION"/>
        /// </summary>
        public static int MODE_IN_COMMUNICATION { get { if (!_MODE_IN_COMMUNICATIONReady) { _MODE_IN_COMMUNICATIONContent = SGetField<int>(LocalBridgeClazz, "MODE_IN_COMMUNICATION"); _MODE_IN_COMMUNICATIONReady = true; } return _MODE_IN_COMMUNICATIONContent; } }
        private static int _MODE_IN_COMMUNICATIONContent = default;
        private static bool _MODE_IN_COMMUNICATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#MODE_INVALID"/>
        /// </summary>
        public static int MODE_INVALID { get { if (!_MODE_INVALIDReady) { _MODE_INVALIDContent = SGetField<int>(LocalBridgeClazz, "MODE_INVALID"); _MODE_INVALIDReady = true; } return _MODE_INVALIDContent; } }
        private static int _MODE_INVALIDContent = default;
        private static bool _MODE_INVALIDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#MODE_NORMAL"/>
        /// </summary>
        public static int MODE_NORMAL { get { if (!_MODE_NORMALReady) { _MODE_NORMALContent = SGetField<int>(LocalBridgeClazz, "MODE_NORMAL"); _MODE_NORMALReady = true; } return _MODE_NORMALContent; } }
        private static int _MODE_NORMALContent = default;
        private static bool _MODE_NORMALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#MODE_RINGTONE"/>
        /// </summary>
        public static int MODE_RINGTONE { get { if (!_MODE_RINGTONEReady) { _MODE_RINGTONEContent = SGetField<int>(LocalBridgeClazz, "MODE_RINGTONE"); _MODE_RINGTONEReady = true; } return _MODE_RINGTONEContent; } }
        private static int _MODE_RINGTONEContent = default;
        private static bool _MODE_RINGTONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#NUM_STREAMS"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int NUM_STREAMS { get { if (!_NUM_STREAMSReady) { _NUM_STREAMSContent = SGetField<int>(LocalBridgeClazz, "NUM_STREAMS"); _NUM_STREAMSReady = true; } return _NUM_STREAMSContent; } }
        private static int _NUM_STREAMSContent = default;
        private static bool _NUM_STREAMSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#PLAYBACK_OFFLOAD_GAPLESS_SUPPORTED"/>
        /// </summary>
        public static int PLAYBACK_OFFLOAD_GAPLESS_SUPPORTED { get { if (!_PLAYBACK_OFFLOAD_GAPLESS_SUPPORTEDReady) { _PLAYBACK_OFFLOAD_GAPLESS_SUPPORTEDContent = SGetField<int>(LocalBridgeClazz, "PLAYBACK_OFFLOAD_GAPLESS_SUPPORTED"); _PLAYBACK_OFFLOAD_GAPLESS_SUPPORTEDReady = true; } return _PLAYBACK_OFFLOAD_GAPLESS_SUPPORTEDContent; } }
        private static int _PLAYBACK_OFFLOAD_GAPLESS_SUPPORTEDContent = default;
        private static bool _PLAYBACK_OFFLOAD_GAPLESS_SUPPORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#PLAYBACK_OFFLOAD_NOT_SUPPORTED"/>
        /// </summary>
        public static int PLAYBACK_OFFLOAD_NOT_SUPPORTED { get { if (!_PLAYBACK_OFFLOAD_NOT_SUPPORTEDReady) { _PLAYBACK_OFFLOAD_NOT_SUPPORTEDContent = SGetField<int>(LocalBridgeClazz, "PLAYBACK_OFFLOAD_NOT_SUPPORTED"); _PLAYBACK_OFFLOAD_NOT_SUPPORTEDReady = true; } return _PLAYBACK_OFFLOAD_NOT_SUPPORTEDContent; } }
        private static int _PLAYBACK_OFFLOAD_NOT_SUPPORTEDContent = default;
        private static bool _PLAYBACK_OFFLOAD_NOT_SUPPORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#PLAYBACK_OFFLOAD_SUPPORTED"/>
        /// </summary>
        public static int PLAYBACK_OFFLOAD_SUPPORTED { get { if (!_PLAYBACK_OFFLOAD_SUPPORTEDReady) { _PLAYBACK_OFFLOAD_SUPPORTEDContent = SGetField<int>(LocalBridgeClazz, "PLAYBACK_OFFLOAD_SUPPORTED"); _PLAYBACK_OFFLOAD_SUPPORTEDReady = true; } return _PLAYBACK_OFFLOAD_SUPPORTEDContent; } }
        private static int _PLAYBACK_OFFLOAD_SUPPORTEDContent = default;
        private static bool _PLAYBACK_OFFLOAD_SUPPORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#RINGER_MODE_NORMAL"/>
        /// </summary>
        public static int RINGER_MODE_NORMAL { get { if (!_RINGER_MODE_NORMALReady) { _RINGER_MODE_NORMALContent = SGetField<int>(LocalBridgeClazz, "RINGER_MODE_NORMAL"); _RINGER_MODE_NORMALReady = true; } return _RINGER_MODE_NORMALContent; } }
        private static int _RINGER_MODE_NORMALContent = default;
        private static bool _RINGER_MODE_NORMALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#RINGER_MODE_SILENT"/>
        /// </summary>
        public static int RINGER_MODE_SILENT { get { if (!_RINGER_MODE_SILENTReady) { _RINGER_MODE_SILENTContent = SGetField<int>(LocalBridgeClazz, "RINGER_MODE_SILENT"); _RINGER_MODE_SILENTReady = true; } return _RINGER_MODE_SILENTContent; } }
        private static int _RINGER_MODE_SILENTContent = default;
        private static bool _RINGER_MODE_SILENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#RINGER_MODE_VIBRATE"/>
        /// </summary>
        public static int RINGER_MODE_VIBRATE { get { if (!_RINGER_MODE_VIBRATEReady) { _RINGER_MODE_VIBRATEContent = SGetField<int>(LocalBridgeClazz, "RINGER_MODE_VIBRATE"); _RINGER_MODE_VIBRATEReady = true; } return _RINGER_MODE_VIBRATEContent; } }
        private static int _RINGER_MODE_VIBRATEContent = default;
        private static bool _RINGER_MODE_VIBRATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#ROUTE_ALL"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int ROUTE_ALL { get { if (!_ROUTE_ALLReady) { _ROUTE_ALLContent = SGetField<int>(LocalBridgeClazz, "ROUTE_ALL"); _ROUTE_ALLReady = true; } return _ROUTE_ALLContent; } }
        private static int _ROUTE_ALLContent = default;
        private static bool _ROUTE_ALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#ROUTE_BLUETOOTH"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int ROUTE_BLUETOOTH { get { if (!_ROUTE_BLUETOOTHReady) { _ROUTE_BLUETOOTHContent = SGetField<int>(LocalBridgeClazz, "ROUTE_BLUETOOTH"); _ROUTE_BLUETOOTHReady = true; } return _ROUTE_BLUETOOTHContent; } }
        private static int _ROUTE_BLUETOOTHContent = default;
        private static bool _ROUTE_BLUETOOTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#ROUTE_BLUETOOTH_A2DP"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int ROUTE_BLUETOOTH_A2DP { get { if (!_ROUTE_BLUETOOTH_A2DPReady) { _ROUTE_BLUETOOTH_A2DPContent = SGetField<int>(LocalBridgeClazz, "ROUTE_BLUETOOTH_A2DP"); _ROUTE_BLUETOOTH_A2DPReady = true; } return _ROUTE_BLUETOOTH_A2DPContent; } }
        private static int _ROUTE_BLUETOOTH_A2DPContent = default;
        private static bool _ROUTE_BLUETOOTH_A2DPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#ROUTE_BLUETOOTH_SCO"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int ROUTE_BLUETOOTH_SCO { get { if (!_ROUTE_BLUETOOTH_SCOReady) { _ROUTE_BLUETOOTH_SCOContent = SGetField<int>(LocalBridgeClazz, "ROUTE_BLUETOOTH_SCO"); _ROUTE_BLUETOOTH_SCOReady = true; } return _ROUTE_BLUETOOTH_SCOContent; } }
        private static int _ROUTE_BLUETOOTH_SCOContent = default;
        private static bool _ROUTE_BLUETOOTH_SCOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#ROUTE_EARPIECE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int ROUTE_EARPIECE { get { if (!_ROUTE_EARPIECEReady) { _ROUTE_EARPIECEContent = SGetField<int>(LocalBridgeClazz, "ROUTE_EARPIECE"); _ROUTE_EARPIECEReady = true; } return _ROUTE_EARPIECEContent; } }
        private static int _ROUTE_EARPIECEContent = default;
        private static bool _ROUTE_EARPIECEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#ROUTE_HEADSET"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int ROUTE_HEADSET { get { if (!_ROUTE_HEADSETReady) { _ROUTE_HEADSETContent = SGetField<int>(LocalBridgeClazz, "ROUTE_HEADSET"); _ROUTE_HEADSETReady = true; } return _ROUTE_HEADSETContent; } }
        private static int _ROUTE_HEADSETContent = default;
        private static bool _ROUTE_HEADSETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#ROUTE_SPEAKER"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int ROUTE_SPEAKER { get { if (!_ROUTE_SPEAKERReady) { _ROUTE_SPEAKERContent = SGetField<int>(LocalBridgeClazz, "ROUTE_SPEAKER"); _ROUTE_SPEAKERReady = true; } return _ROUTE_SPEAKERContent; } }
        private static int _ROUTE_SPEAKERContent = default;
        private static bool _ROUTE_SPEAKERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#SCO_AUDIO_STATE_CONNECTED"/>
        /// </summary>
        public static int SCO_AUDIO_STATE_CONNECTED { get { if (!_SCO_AUDIO_STATE_CONNECTEDReady) { _SCO_AUDIO_STATE_CONNECTEDContent = SGetField<int>(LocalBridgeClazz, "SCO_AUDIO_STATE_CONNECTED"); _SCO_AUDIO_STATE_CONNECTEDReady = true; } return _SCO_AUDIO_STATE_CONNECTEDContent; } }
        private static int _SCO_AUDIO_STATE_CONNECTEDContent = default;
        private static bool _SCO_AUDIO_STATE_CONNECTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#SCO_AUDIO_STATE_CONNECTING"/>
        /// </summary>
        public static int SCO_AUDIO_STATE_CONNECTING { get { if (!_SCO_AUDIO_STATE_CONNECTINGReady) { _SCO_AUDIO_STATE_CONNECTINGContent = SGetField<int>(LocalBridgeClazz, "SCO_AUDIO_STATE_CONNECTING"); _SCO_AUDIO_STATE_CONNECTINGReady = true; } return _SCO_AUDIO_STATE_CONNECTINGContent; } }
        private static int _SCO_AUDIO_STATE_CONNECTINGContent = default;
        private static bool _SCO_AUDIO_STATE_CONNECTINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#SCO_AUDIO_STATE_DISCONNECTED"/>
        /// </summary>
        public static int SCO_AUDIO_STATE_DISCONNECTED { get { if (!_SCO_AUDIO_STATE_DISCONNECTEDReady) { _SCO_AUDIO_STATE_DISCONNECTEDContent = SGetField<int>(LocalBridgeClazz, "SCO_AUDIO_STATE_DISCONNECTED"); _SCO_AUDIO_STATE_DISCONNECTEDReady = true; } return _SCO_AUDIO_STATE_DISCONNECTEDContent; } }
        private static int _SCO_AUDIO_STATE_DISCONNECTEDContent = default;
        private static bool _SCO_AUDIO_STATE_DISCONNECTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#SCO_AUDIO_STATE_ERROR"/>
        /// </summary>
        public static int SCO_AUDIO_STATE_ERROR { get { if (!_SCO_AUDIO_STATE_ERRORReady) { _SCO_AUDIO_STATE_ERRORContent = SGetField<int>(LocalBridgeClazz, "SCO_AUDIO_STATE_ERROR"); _SCO_AUDIO_STATE_ERRORReady = true; } return _SCO_AUDIO_STATE_ERRORContent; } }
        private static int _SCO_AUDIO_STATE_ERRORContent = default;
        private static bool _SCO_AUDIO_STATE_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#STREAM_ACCESSIBILITY"/>
        /// </summary>
        public static int STREAM_ACCESSIBILITY { get { if (!_STREAM_ACCESSIBILITYReady) { _STREAM_ACCESSIBILITYContent = SGetField<int>(LocalBridgeClazz, "STREAM_ACCESSIBILITY"); _STREAM_ACCESSIBILITYReady = true; } return _STREAM_ACCESSIBILITYContent; } }
        private static int _STREAM_ACCESSIBILITYContent = default;
        private static bool _STREAM_ACCESSIBILITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#STREAM_ALARM"/>
        /// </summary>
        public static int STREAM_ALARM { get { if (!_STREAM_ALARMReady) { _STREAM_ALARMContent = SGetField<int>(LocalBridgeClazz, "STREAM_ALARM"); _STREAM_ALARMReady = true; } return _STREAM_ALARMContent; } }
        private static int _STREAM_ALARMContent = default;
        private static bool _STREAM_ALARMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#STREAM_DTMF"/>
        /// </summary>
        public static int STREAM_DTMF { get { if (!_STREAM_DTMFReady) { _STREAM_DTMFContent = SGetField<int>(LocalBridgeClazz, "STREAM_DTMF"); _STREAM_DTMFReady = true; } return _STREAM_DTMFContent; } }
        private static int _STREAM_DTMFContent = default;
        private static bool _STREAM_DTMFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#STREAM_MUSIC"/>
        /// </summary>
        public static int STREAM_MUSIC { get { if (!_STREAM_MUSICReady) { _STREAM_MUSICContent = SGetField<int>(LocalBridgeClazz, "STREAM_MUSIC"); _STREAM_MUSICReady = true; } return _STREAM_MUSICContent; } }
        private static int _STREAM_MUSICContent = default;
        private static bool _STREAM_MUSICReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#STREAM_NOTIFICATION"/>
        /// </summary>
        public static int STREAM_NOTIFICATION { get { if (!_STREAM_NOTIFICATIONReady) { _STREAM_NOTIFICATIONContent = SGetField<int>(LocalBridgeClazz, "STREAM_NOTIFICATION"); _STREAM_NOTIFICATIONReady = true; } return _STREAM_NOTIFICATIONContent; } }
        private static int _STREAM_NOTIFICATIONContent = default;
        private static bool _STREAM_NOTIFICATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#STREAM_RING"/>
        /// </summary>
        public static int STREAM_RING { get { if (!_STREAM_RINGReady) { _STREAM_RINGContent = SGetField<int>(LocalBridgeClazz, "STREAM_RING"); _STREAM_RINGReady = true; } return _STREAM_RINGContent; } }
        private static int _STREAM_RINGContent = default;
        private static bool _STREAM_RINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#STREAM_SYSTEM"/>
        /// </summary>
        public static int STREAM_SYSTEM { get { if (!_STREAM_SYSTEMReady) { _STREAM_SYSTEMContent = SGetField<int>(LocalBridgeClazz, "STREAM_SYSTEM"); _STREAM_SYSTEMReady = true; } return _STREAM_SYSTEMContent; } }
        private static int _STREAM_SYSTEMContent = default;
        private static bool _STREAM_SYSTEMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#STREAM_VOICE_CALL"/>
        /// </summary>
        public static int STREAM_VOICE_CALL { get { if (!_STREAM_VOICE_CALLReady) { _STREAM_VOICE_CALLContent = SGetField<int>(LocalBridgeClazz, "STREAM_VOICE_CALL"); _STREAM_VOICE_CALLReady = true; } return _STREAM_VOICE_CALLContent; } }
        private static int _STREAM_VOICE_CALLContent = default;
        private static bool _STREAM_VOICE_CALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#USE_DEFAULT_STREAM_TYPE"/>
        /// </summary>
        public static int USE_DEFAULT_STREAM_TYPE { get { if (!_USE_DEFAULT_STREAM_TYPEReady) { _USE_DEFAULT_STREAM_TYPEContent = SGetField<int>(LocalBridgeClazz, "USE_DEFAULT_STREAM_TYPE"); _USE_DEFAULT_STREAM_TYPEReady = true; } return _USE_DEFAULT_STREAM_TYPEContent; } }
        private static int _USE_DEFAULT_STREAM_TYPEContent = default;
        private static bool _USE_DEFAULT_STREAM_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#VIBRATE_SETTING_OFF"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int VIBRATE_SETTING_OFF { get { if (!_VIBRATE_SETTING_OFFReady) { _VIBRATE_SETTING_OFFContent = SGetField<int>(LocalBridgeClazz, "VIBRATE_SETTING_OFF"); _VIBRATE_SETTING_OFFReady = true; } return _VIBRATE_SETTING_OFFContent; } }
        private static int _VIBRATE_SETTING_OFFContent = default;
        private static bool _VIBRATE_SETTING_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#VIBRATE_SETTING_ON"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int VIBRATE_SETTING_ON { get { if (!_VIBRATE_SETTING_ONReady) { _VIBRATE_SETTING_ONContent = SGetField<int>(LocalBridgeClazz, "VIBRATE_SETTING_ON"); _VIBRATE_SETTING_ONReady = true; } return _VIBRATE_SETTING_ONContent; } }
        private static int _VIBRATE_SETTING_ONContent = default;
        private static bool _VIBRATE_SETTING_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#VIBRATE_SETTING_ONLY_SILENT"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int VIBRATE_SETTING_ONLY_SILENT { get { if (!_VIBRATE_SETTING_ONLY_SILENTReady) { _VIBRATE_SETTING_ONLY_SILENTContent = SGetField<int>(LocalBridgeClazz, "VIBRATE_SETTING_ONLY_SILENT"); _VIBRATE_SETTING_ONLY_SILENTReady = true; } return _VIBRATE_SETTING_ONLY_SILENTContent; } }
        private static int _VIBRATE_SETTING_ONLY_SILENTContent = default;
        private static bool _VIBRATE_SETTING_ONLY_SILENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#VIBRATE_TYPE_NOTIFICATION"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int VIBRATE_TYPE_NOTIFICATION { get { if (!_VIBRATE_TYPE_NOTIFICATIONReady) { _VIBRATE_TYPE_NOTIFICATIONContent = SGetField<int>(LocalBridgeClazz, "VIBRATE_TYPE_NOTIFICATION"); _VIBRATE_TYPE_NOTIFICATIONReady = true; } return _VIBRATE_TYPE_NOTIFICATIONContent; } }
        private static int _VIBRATE_TYPE_NOTIFICATIONContent = default;
        private static bool _VIBRATE_TYPE_NOTIFICATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#VIBRATE_TYPE_RINGER"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int VIBRATE_TYPE_RINGER { get { if (!_VIBRATE_TYPE_RINGERReady) { _VIBRATE_TYPE_RINGERContent = SGetField<int>(LocalBridgeClazz, "VIBRATE_TYPE_RINGER"); _VIBRATE_TYPE_RINGERReady = true; } return _VIBRATE_TYPE_RINGERContent; } }
        private static int _VIBRATE_TYPE_RINGERContent = default;
        private static bool _VIBRATE_TYPE_RINGERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#ACTION_AUDIO_BECOMING_NOISY"/>
        /// </summary>
        public static Java.Lang.String ACTION_AUDIO_BECOMING_NOISY { get { if (!_ACTION_AUDIO_BECOMING_NOISYReady) { _ACTION_AUDIO_BECOMING_NOISYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_AUDIO_BECOMING_NOISY"); _ACTION_AUDIO_BECOMING_NOISYReady = true; } return _ACTION_AUDIO_BECOMING_NOISYContent; } }
        private static Java.Lang.String _ACTION_AUDIO_BECOMING_NOISYContent = default;
        private static bool _ACTION_AUDIO_BECOMING_NOISYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#ACTION_HDMI_AUDIO_PLUG"/>
        /// </summary>
        public static Java.Lang.String ACTION_HDMI_AUDIO_PLUG { get { if (!_ACTION_HDMI_AUDIO_PLUGReady) { _ACTION_HDMI_AUDIO_PLUGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_HDMI_AUDIO_PLUG"); _ACTION_HDMI_AUDIO_PLUGReady = true; } return _ACTION_HDMI_AUDIO_PLUGContent; } }
        private static Java.Lang.String _ACTION_HDMI_AUDIO_PLUGContent = default;
        private static bool _ACTION_HDMI_AUDIO_PLUGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#ACTION_HEADSET_PLUG"/>
        /// </summary>
        public static Java.Lang.String ACTION_HEADSET_PLUG { get { if (!_ACTION_HEADSET_PLUGReady) { _ACTION_HEADSET_PLUGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_HEADSET_PLUG"); _ACTION_HEADSET_PLUGReady = true; } return _ACTION_HEADSET_PLUGContent; } }
        private static Java.Lang.String _ACTION_HEADSET_PLUGContent = default;
        private static bool _ACTION_HEADSET_PLUGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#ACTION_MICROPHONE_MUTE_CHANGED"/>
        /// </summary>
        public static Java.Lang.String ACTION_MICROPHONE_MUTE_CHANGED { get { if (!_ACTION_MICROPHONE_MUTE_CHANGEDReady) { _ACTION_MICROPHONE_MUTE_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_MICROPHONE_MUTE_CHANGED"); _ACTION_MICROPHONE_MUTE_CHANGEDReady = true; } return _ACTION_MICROPHONE_MUTE_CHANGEDContent; } }
        private static Java.Lang.String _ACTION_MICROPHONE_MUTE_CHANGEDContent = default;
        private static bool _ACTION_MICROPHONE_MUTE_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#ACTION_SCO_AUDIO_STATE_CHANGED"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String ACTION_SCO_AUDIO_STATE_CHANGED { get { if (!_ACTION_SCO_AUDIO_STATE_CHANGEDReady) { _ACTION_SCO_AUDIO_STATE_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_SCO_AUDIO_STATE_CHANGED"); _ACTION_SCO_AUDIO_STATE_CHANGEDReady = true; } return _ACTION_SCO_AUDIO_STATE_CHANGEDContent; } }
        private static Java.Lang.String _ACTION_SCO_AUDIO_STATE_CHANGEDContent = default;
        private static bool _ACTION_SCO_AUDIO_STATE_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#ACTION_SCO_AUDIO_STATE_UPDATED"/>
        /// </summary>
        public static Java.Lang.String ACTION_SCO_AUDIO_STATE_UPDATED { get { if (!_ACTION_SCO_AUDIO_STATE_UPDATEDReady) { _ACTION_SCO_AUDIO_STATE_UPDATEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_SCO_AUDIO_STATE_UPDATED"); _ACTION_SCO_AUDIO_STATE_UPDATEDReady = true; } return _ACTION_SCO_AUDIO_STATE_UPDATEDContent; } }
        private static Java.Lang.String _ACTION_SCO_AUDIO_STATE_UPDATEDContent = default;
        private static bool _ACTION_SCO_AUDIO_STATE_UPDATEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#ACTION_SPEAKERPHONE_STATE_CHANGED"/>
        /// </summary>
        public static Java.Lang.String ACTION_SPEAKERPHONE_STATE_CHANGED { get { if (!_ACTION_SPEAKERPHONE_STATE_CHANGEDReady) { _ACTION_SPEAKERPHONE_STATE_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_SPEAKERPHONE_STATE_CHANGED"); _ACTION_SPEAKERPHONE_STATE_CHANGEDReady = true; } return _ACTION_SPEAKERPHONE_STATE_CHANGEDContent; } }
        private static Java.Lang.String _ACTION_SPEAKERPHONE_STATE_CHANGEDContent = default;
        private static bool _ACTION_SPEAKERPHONE_STATE_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#EXTRA_AUDIO_PLUG_STATE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_AUDIO_PLUG_STATE { get { if (!_EXTRA_AUDIO_PLUG_STATEReady) { _EXTRA_AUDIO_PLUG_STATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_AUDIO_PLUG_STATE"); _EXTRA_AUDIO_PLUG_STATEReady = true; } return _EXTRA_AUDIO_PLUG_STATEContent; } }
        private static Java.Lang.String _EXTRA_AUDIO_PLUG_STATEContent = default;
        private static bool _EXTRA_AUDIO_PLUG_STATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#EXTRA_ENCODINGS"/>
        /// </summary>
        public static Java.Lang.String EXTRA_ENCODINGS { get { if (!_EXTRA_ENCODINGSReady) { _EXTRA_ENCODINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ENCODINGS"); _EXTRA_ENCODINGSReady = true; } return _EXTRA_ENCODINGSContent; } }
        private static Java.Lang.String _EXTRA_ENCODINGSContent = default;
        private static bool _EXTRA_ENCODINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#EXTRA_MAX_CHANNEL_COUNT"/>
        /// </summary>
        public static Java.Lang.String EXTRA_MAX_CHANNEL_COUNT { get { if (!_EXTRA_MAX_CHANNEL_COUNTReady) { _EXTRA_MAX_CHANNEL_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_MAX_CHANNEL_COUNT"); _EXTRA_MAX_CHANNEL_COUNTReady = true; } return _EXTRA_MAX_CHANNEL_COUNTContent; } }
        private static Java.Lang.String _EXTRA_MAX_CHANNEL_COUNTContent = default;
        private static bool _EXTRA_MAX_CHANNEL_COUNTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#EXTRA_RINGER_MODE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_RINGER_MODE { get { if (!_EXTRA_RINGER_MODEReady) { _EXTRA_RINGER_MODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_RINGER_MODE"); _EXTRA_RINGER_MODEReady = true; } return _EXTRA_RINGER_MODEContent; } }
        private static Java.Lang.String _EXTRA_RINGER_MODEContent = default;
        private static bool _EXTRA_RINGER_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#EXTRA_SCO_AUDIO_PREVIOUS_STATE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_SCO_AUDIO_PREVIOUS_STATE { get { if (!_EXTRA_SCO_AUDIO_PREVIOUS_STATEReady) { _EXTRA_SCO_AUDIO_PREVIOUS_STATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_SCO_AUDIO_PREVIOUS_STATE"); _EXTRA_SCO_AUDIO_PREVIOUS_STATEReady = true; } return _EXTRA_SCO_AUDIO_PREVIOUS_STATEContent; } }
        private static Java.Lang.String _EXTRA_SCO_AUDIO_PREVIOUS_STATEContent = default;
        private static bool _EXTRA_SCO_AUDIO_PREVIOUS_STATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#EXTRA_SCO_AUDIO_STATE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_SCO_AUDIO_STATE { get { if (!_EXTRA_SCO_AUDIO_STATEReady) { _EXTRA_SCO_AUDIO_STATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_SCO_AUDIO_STATE"); _EXTRA_SCO_AUDIO_STATEReady = true; } return _EXTRA_SCO_AUDIO_STATEContent; } }
        private static Java.Lang.String _EXTRA_SCO_AUDIO_STATEContent = default;
        private static bool _EXTRA_SCO_AUDIO_STATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#EXTRA_VIBRATE_SETTING"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String EXTRA_VIBRATE_SETTING { get { if (!_EXTRA_VIBRATE_SETTINGReady) { _EXTRA_VIBRATE_SETTINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_VIBRATE_SETTING"); _EXTRA_VIBRATE_SETTINGReady = true; } return _EXTRA_VIBRATE_SETTINGContent; } }
        private static Java.Lang.String _EXTRA_VIBRATE_SETTINGContent = default;
        private static bool _EXTRA_VIBRATE_SETTINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#EXTRA_VIBRATE_TYPE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String EXTRA_VIBRATE_TYPE { get { if (!_EXTRA_VIBRATE_TYPEReady) { _EXTRA_VIBRATE_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_VIBRATE_TYPE"); _EXTRA_VIBRATE_TYPEReady = true; } return _EXTRA_VIBRATE_TYPEContent; } }
        private static Java.Lang.String _EXTRA_VIBRATE_TYPEContent = default;
        private static bool _EXTRA_VIBRATE_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#PROPERTY_OUTPUT_FRAMES_PER_BUFFER"/>
        /// </summary>
        public static Java.Lang.String PROPERTY_OUTPUT_FRAMES_PER_BUFFER { get { if (!_PROPERTY_OUTPUT_FRAMES_PER_BUFFERReady) { _PROPERTY_OUTPUT_FRAMES_PER_BUFFERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROPERTY_OUTPUT_FRAMES_PER_BUFFER"); _PROPERTY_OUTPUT_FRAMES_PER_BUFFERReady = true; } return _PROPERTY_OUTPUT_FRAMES_PER_BUFFERContent; } }
        private static Java.Lang.String _PROPERTY_OUTPUT_FRAMES_PER_BUFFERContent = default;
        private static bool _PROPERTY_OUTPUT_FRAMES_PER_BUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#PROPERTY_OUTPUT_SAMPLE_RATE"/>
        /// </summary>
        public static Java.Lang.String PROPERTY_OUTPUT_SAMPLE_RATE { get { if (!_PROPERTY_OUTPUT_SAMPLE_RATEReady) { _PROPERTY_OUTPUT_SAMPLE_RATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROPERTY_OUTPUT_SAMPLE_RATE"); _PROPERTY_OUTPUT_SAMPLE_RATEReady = true; } return _PROPERTY_OUTPUT_SAMPLE_RATEContent; } }
        private static Java.Lang.String _PROPERTY_OUTPUT_SAMPLE_RATEContent = default;
        private static bool _PROPERTY_OUTPUT_SAMPLE_RATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#PROPERTY_SUPPORT_AUDIO_SOURCE_UNPROCESSED"/>
        /// </summary>
        public static Java.Lang.String PROPERTY_SUPPORT_AUDIO_SOURCE_UNPROCESSED { get { if (!_PROPERTY_SUPPORT_AUDIO_SOURCE_UNPROCESSEDReady) { _PROPERTY_SUPPORT_AUDIO_SOURCE_UNPROCESSEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROPERTY_SUPPORT_AUDIO_SOURCE_UNPROCESSED"); _PROPERTY_SUPPORT_AUDIO_SOURCE_UNPROCESSEDReady = true; } return _PROPERTY_SUPPORT_AUDIO_SOURCE_UNPROCESSEDContent; } }
        private static Java.Lang.String _PROPERTY_SUPPORT_AUDIO_SOURCE_UNPROCESSEDContent = default;
        private static bool _PROPERTY_SUPPORT_AUDIO_SOURCE_UNPROCESSEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#PROPERTY_SUPPORT_MIC_NEAR_ULTRASOUND"/>
        /// </summary>
        public static Java.Lang.String PROPERTY_SUPPORT_MIC_NEAR_ULTRASOUND { get { if (!_PROPERTY_SUPPORT_MIC_NEAR_ULTRASOUNDReady) { _PROPERTY_SUPPORT_MIC_NEAR_ULTRASOUNDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROPERTY_SUPPORT_MIC_NEAR_ULTRASOUND"); _PROPERTY_SUPPORT_MIC_NEAR_ULTRASOUNDReady = true; } return _PROPERTY_SUPPORT_MIC_NEAR_ULTRASOUNDContent; } }
        private static Java.Lang.String _PROPERTY_SUPPORT_MIC_NEAR_ULTRASOUNDContent = default;
        private static bool _PROPERTY_SUPPORT_MIC_NEAR_ULTRASOUNDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#PROPERTY_SUPPORT_SPEAKER_NEAR_ULTRASOUND"/>
        /// </summary>
        public static Java.Lang.String PROPERTY_SUPPORT_SPEAKER_NEAR_ULTRASOUND { get { if (!_PROPERTY_SUPPORT_SPEAKER_NEAR_ULTRASOUNDReady) { _PROPERTY_SUPPORT_SPEAKER_NEAR_ULTRASOUNDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROPERTY_SUPPORT_SPEAKER_NEAR_ULTRASOUND"); _PROPERTY_SUPPORT_SPEAKER_NEAR_ULTRASOUNDReady = true; } return _PROPERTY_SUPPORT_SPEAKER_NEAR_ULTRASOUNDContent; } }
        private static Java.Lang.String _PROPERTY_SUPPORT_SPEAKER_NEAR_ULTRASOUNDContent = default;
        private static bool _PROPERTY_SUPPORT_SPEAKER_NEAR_ULTRASOUNDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#RINGER_MODE_CHANGED_ACTION"/>
        /// </summary>
        public static Java.Lang.String RINGER_MODE_CHANGED_ACTION { get { if (!_RINGER_MODE_CHANGED_ACTIONReady) { _RINGER_MODE_CHANGED_ACTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RINGER_MODE_CHANGED_ACTION"); _RINGER_MODE_CHANGED_ACTIONReady = true; } return _RINGER_MODE_CHANGED_ACTIONContent; } }
        private static Java.Lang.String _RINGER_MODE_CHANGED_ACTIONContent = default;
        private static bool _RINGER_MODE_CHANGED_ACTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#VIBRATE_SETTING_CHANGED_ACTION"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String VIBRATE_SETTING_CHANGED_ACTION { get { if (!_VIBRATE_SETTING_CHANGED_ACTIONReady) { _VIBRATE_SETTING_CHANGED_ACTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "VIBRATE_SETTING_CHANGED_ACTION"); _VIBRATE_SETTING_CHANGED_ACTIONReady = true; } return _VIBRATE_SETTING_CHANGED_ACTIONContent; } }
        private static Java.Lang.String _VIBRATE_SETTING_CHANGED_ACTIONContent = default;
        private static bool _VIBRATE_SETTING_CHANGED_ACTIONReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#isHapticPlaybackSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public static bool IsHapticPlaybackSupported()
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isHapticPlaybackSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#isOffloadedPlaybackSupported(android.media.AudioFormat,android.media.AudioAttributes)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioFormat"/></param>
        /// <param name="arg1"><see cref="Android.Media.AudioAttributes"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsOffloadedPlaybackSupported(Android.Media.AudioFormat arg0, Android.Media.AudioAttributes arg1)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isOffloadedPlaybackSupported", "(Landroid/media/AudioFormat;Landroid/media/AudioAttributes;)Z", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#getDirectPlaybackSupport(android.media.AudioFormat,android.media.AudioAttributes)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioFormat"/></param>
        /// <param name="arg1"><see cref="Android.Media.AudioAttributes"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GetDirectPlaybackSupport(Android.Media.AudioFormat arg0, Android.Media.AudioAttributes arg1)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "getDirectPlaybackSupport", "(Landroid/media/AudioFormat;Landroid/media/AudioAttributes;)I", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#getPlaybackOffloadSupport(android.media.AudioFormat,android.media.AudioAttributes)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioFormat"/></param>
        /// <param name="arg1"><see cref="Android.Media.AudioAttributes"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public static int GetPlaybackOffloadSupport(Android.Media.AudioFormat arg0, Android.Media.AudioAttributes arg1)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "getPlaybackOffloadSupport", "(Landroid/media/AudioFormat;Landroid/media/AudioAttributes;)I", arg0, arg1);
        }
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#getCommunicationDevice()"/>
        /// </summary>
        /// <returns><see cref="Android.Media.AudioDeviceInfo"/></returns>
        public Android.Media.AudioDeviceInfo GetCommunicationDevice()
        {
            return IExecuteWithSignature<Android.Media.AudioDeviceInfo>("getCommunicationDevice", "()Landroid/media/AudioDeviceInfo;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#getDevices(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Media.AudioDeviceInfo"/></returns>
        public Android.Media.AudioDeviceInfo[] GetDevices(int arg0)
        {
            return IExecuteWithSignatureArray<Android.Media.AudioDeviceInfo>("getDevices", "(I)[Landroid/media/AudioDeviceInfo;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#getPreferredMixerAttributes(android.media.AudioAttributes,android.media.AudioDeviceInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioAttributes"/></param>
        /// <param name="arg1"><see cref="Android.Media.AudioDeviceInfo"/></param>
        /// <returns><see cref="Android.Media.AudioMixerAttributes"/></returns>
        public Android.Media.AudioMixerAttributes GetPreferredMixerAttributes(Android.Media.AudioAttributes arg0, Android.Media.AudioDeviceInfo arg1)
        {
            return IExecuteWithSignature<Android.Media.AudioMixerAttributes>("getPreferredMixerAttributes", "(Landroid/media/AudioAttributes;Landroid/media/AudioDeviceInfo;)Landroid/media/AudioMixerAttributes;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#getSpatializer()"/>
        /// </summary>
        /// <returns><see cref="Android.Media.Spatializer"/></returns>
        public Android.Media.Spatializer GetSpatializer()
        {
            return IExecuteWithSignature<Android.Media.Spatializer>("getSpatializer", "()Landroid/media/Spatializer;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#clearPreferredMixerAttributes(android.media.AudioAttributes,android.media.AudioDeviceInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioAttributes"/></param>
        /// <param name="arg1"><see cref="Android.Media.AudioDeviceInfo"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ClearPreferredMixerAttributes(Android.Media.AudioAttributes arg0, Android.Media.AudioDeviceInfo arg1)
        {
            return IExecuteWithSignature<bool>("clearPreferredMixerAttributes", "(Landroid/media/AudioAttributes;Landroid/media/AudioDeviceInfo;)Z", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#isBluetoothA2dpOn()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool IsBluetoothA2dpOn()
        {
            return IExecuteWithSignature<bool>("isBluetoothA2dpOn", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#isBluetoothScoAvailableOffCall()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsBluetoothScoAvailableOffCall()
        {
            return IExecuteWithSignature<bool>("isBluetoothScoAvailableOffCall", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#isBluetoothScoOn()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool IsBluetoothScoOn()
        {
            return IExecuteWithSignature<bool>("isBluetoothScoOn", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#isCallScreeningModeSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsCallScreeningModeSupported()
        {
            return IExecuteWithSignature<bool>("isCallScreeningModeSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#isMicrophoneMute()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsMicrophoneMute()
        {
            return IExecuteWithSignature<bool>("isMicrophoneMute", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#isMusicActive()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsMusicActive()
        {
            return IExecuteWithSignature<bool>("isMusicActive", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#isRampingRingerEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsRampingRingerEnabled()
        {
            return IExecuteWithSignature<bool>("isRampingRingerEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#isSpeakerphoneOn()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool IsSpeakerphoneOn()
        {
            return IExecuteWithSignature<bool>("isSpeakerphoneOn", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#isStreamMute(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsStreamMute(int arg0)
        {
            return IExecuteWithSignature<bool>("isStreamMute", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#isSurroundFormatEnabled(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsSurroundFormatEnabled(int arg0)
        {
            return IExecuteWithSignature<bool>("isSurroundFormatEnabled", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#isVolumeFixed()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsVolumeFixed()
        {
            return IExecuteWithSignature<bool>("isVolumeFixed", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#isVolumeGroupMuted(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsVolumeGroupMuted(int arg0)
        {
            return IExecuteWithSignature<bool>("isVolumeGroupMuted", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#isWiredHeadsetOn()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool IsWiredHeadsetOn()
        {
            return IExecuteWithSignature<bool>("isWiredHeadsetOn", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#registerRemoteController(android.media.RemoteController)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.RemoteController"/></param>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool RegisterRemoteController(Android.Media.RemoteController arg0)
        {
            return IExecuteWithSignature<bool>("registerRemoteController", "(Landroid/media/RemoteController;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#setCommunicationDevice(android.media.AudioDeviceInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioDeviceInfo"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetCommunicationDevice(Android.Media.AudioDeviceInfo arg0)
        {
            return IExecuteWithSignature<bool>("setCommunicationDevice", "(Landroid/media/AudioDeviceInfo;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#setEncodedSurroundMode(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetEncodedSurroundMode(int arg0)
        {
            return IExecuteWithSignature<bool>("setEncodedSurroundMode", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#setPreferredMixerAttributes(android.media.AudioAttributes,android.media.AudioDeviceInfo,android.media.AudioMixerAttributes)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioAttributes"/></param>
        /// <param name="arg1"><see cref="Android.Media.AudioDeviceInfo"/></param>
        /// <param name="arg2"><see cref="Android.Media.AudioMixerAttributes"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetPreferredMixerAttributes(Android.Media.AudioAttributes arg0, Android.Media.AudioDeviceInfo arg1, Android.Media.AudioMixerAttributes arg2)
        {
            return IExecuteWithSignature<bool>("setPreferredMixerAttributes", "(Landroid/media/AudioAttributes;Landroid/media/AudioDeviceInfo;Landroid/media/AudioMixerAttributes;)Z", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#setSurroundFormatEnabled(int,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetSurroundFormatEnabled(int arg0, bool arg1)
        {
            return IExecuteWithSignature<bool>("setSurroundFormatEnabled", "(IZ)Z", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#shouldVibrate(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool ShouldVibrate(int arg0)
        {
            return IExecuteWithSignature<bool>("shouldVibrate", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#getStreamVolumeDb(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetStreamVolumeDb(int arg0, int arg1, int arg2)
        {
            return IExecuteWithSignature<float>("getStreamVolumeDb", "(III)F", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#abandonAudioFocus(android.media.AudioManager.OnAudioFocusChangeListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioManager.OnAudioFocusChangeListener"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int AbandonAudioFocus(Android.Media.AudioManager.OnAudioFocusChangeListener arg0)
        {
            return IExecuteWithSignature<int>("abandonAudioFocus", "(Landroid/media/AudioManager$OnAudioFocusChangeListener;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#abandonAudioFocusRequest(android.media.AudioFocusRequest)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioFocusRequest"/></param>
        /// <returns><see cref="int"/></returns>
        public int AbandonAudioFocusRequest(Android.Media.AudioFocusRequest arg0)
        {
            return IExecuteWithSignature<int>("abandonAudioFocusRequest", "(Landroid/media/AudioFocusRequest;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#generateAudioSessionId()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GenerateAudioSessionId()
        {
            return IExecuteWithSignature<int>("generateAudioSessionId", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#getAllowedCapturePolicy()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetAllowedCapturePolicy()
        {
            return IExecuteWithSignature<int>("getAllowedCapturePolicy", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#getAudioHwSyncForSession(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetAudioHwSyncForSession(int arg0)
        {
            return IExecuteWithSignature<int>("getAudioHwSyncForSession", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#getEncodedSurroundMode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetEncodedSurroundMode()
        {
            return IExecuteWithSignature<int>("getEncodedSurroundMode", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#getMode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMode()
        {
            return IExecuteWithSignature<int>("getMode", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#getRingerMode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetRingerMode()
        {
            return IExecuteWithSignature<int>("getRingerMode", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#getRouting(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetRouting(int arg0)
        {
            return IExecuteWithSignature<int>("getRouting", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#getStreamMaxVolume(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetStreamMaxVolume(int arg0)
        {
            return IExecuteWithSignature<int>("getStreamMaxVolume", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#getStreamMinVolume(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetStreamMinVolume(int arg0)
        {
            return IExecuteWithSignature<int>("getStreamMinVolume", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#getStreamVolume(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetStreamVolume(int arg0)
        {
            return IExecuteWithSignature<int>("getStreamVolume", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#getVibrateSetting(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetVibrateSetting(int arg0)
        {
            return IExecuteWithSignature<int>("getVibrateSetting", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#getVolumeGroupIdForAttributes(android.media.AudioAttributes)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioAttributes"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetVolumeGroupIdForAttributes(Android.Media.AudioAttributes arg0)
        {
            return IExecuteWithSignature<int>("getVolumeGroupIdForAttributes", "(Landroid/media/AudioAttributes;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#requestAudioFocus(android.media.AudioFocusRequest)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioFocusRequest"/></param>
        /// <returns><see cref="int"/></returns>
        public int RequestAudioFocus(Android.Media.AudioFocusRequest arg0)
        {
            return IExecuteWithSignature<int>("requestAudioFocus", "(Landroid/media/AudioFocusRequest;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#requestAudioFocus(android.media.AudioManager.OnAudioFocusChangeListener,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioManager.OnAudioFocusChangeListener"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int RequestAudioFocus(Android.Media.AudioManager.OnAudioFocusChangeListener arg0, int arg1, int arg2)
        {
            return IExecuteWithSignature<int>("requestAudioFocus", "(Landroid/media/AudioManager$OnAudioFocusChangeListener;II)I", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#getParameters(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetParameters(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getParameters", "(Ljava/lang/String;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#getProperty(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetProperty(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getProperty", "(Ljava/lang/String;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#getAudioDevicesForAttributes(android.media.AudioAttributes)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioAttributes"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Media.AudioDeviceInfo> GetAudioDevicesForAttributes(Android.Media.AudioAttributes arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Android.Media.AudioDeviceInfo>>("getAudioDevicesForAttributes", "(Landroid/media/AudioAttributes;)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#getAvailableCommunicationDevices()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Media.AudioDeviceInfo> GetAvailableCommunicationDevices()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Media.AudioDeviceInfo>>("getAvailableCommunicationDevices", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#getSupportedMixerAttributes(android.media.AudioDeviceInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioDeviceInfo"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Media.AudioMixerAttributes> GetSupportedMixerAttributes(Android.Media.AudioDeviceInfo arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Android.Media.AudioMixerAttributes>>("getSupportedMixerAttributes", "(Landroid/media/AudioDeviceInfo;)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#getActivePlaybackConfigurations()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Media.AudioPlaybackConfiguration> GetActivePlaybackConfigurations()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Media.AudioPlaybackConfiguration>>("getActivePlaybackConfigurations", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#getDirectProfilesForAttributes(android.media.AudioAttributes)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioAttributes"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Media.AudioProfile> GetDirectProfilesForAttributes(Android.Media.AudioAttributes arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Android.Media.AudioProfile>>("getDirectProfilesForAttributes", "(Landroid/media/AudioAttributes;)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#getActiveRecordingConfigurations()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Media.AudioRecordingConfiguration> GetActiveRecordingConfigurations()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Media.AudioRecordingConfiguration>>("getActiveRecordingConfigurations", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#getMicrophones()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public Java.Util.List<Android.Media.MicrophoneInfo> GetMicrophones()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Media.MicrophoneInfo>>("getMicrophones", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#getSupportedDeviceTypes(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.Set"/></returns>
        public Java.Util.Set<Java.Lang.Integer> GetSupportedDeviceTypes(int arg0)
        {
            return IExecuteWithSignature<Java.Util.Set<Java.Lang.Integer>>("getSupportedDeviceTypes", "(I)Ljava/util/Set;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#addOnCommunicationDeviceChangedListener(java.util.concurrent.Executor,android.media.AudioManager.OnCommunicationDeviceChangedListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Media.AudioManager.OnCommunicationDeviceChangedListener"/></param>
        public void AddOnCommunicationDeviceChangedListener(Java.Util.Concurrent.Executor arg0, Android.Media.AudioManager.OnCommunicationDeviceChangedListener arg1)
        {
            IExecuteWithSignature("addOnCommunicationDeviceChangedListener", "(Ljava/util/concurrent/Executor;Landroid/media/AudioManager$OnCommunicationDeviceChangedListener;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#addOnModeChangedListener(java.util.concurrent.Executor,android.media.AudioManager.OnModeChangedListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Media.AudioManager.OnModeChangedListener"/></param>
        public void AddOnModeChangedListener(Java.Util.Concurrent.Executor arg0, Android.Media.AudioManager.OnModeChangedListener arg1)
        {
            IExecuteWithSignature("addOnModeChangedListener", "(Ljava/util/concurrent/Executor;Landroid/media/AudioManager$OnModeChangedListener;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#addOnPreferredMixerAttributesChangedListener(java.util.concurrent.Executor,android.media.AudioManager.OnPreferredMixerAttributesChangedListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Media.AudioManager.OnPreferredMixerAttributesChangedListener"/></param>
        public void AddOnPreferredMixerAttributesChangedListener(Java.Util.Concurrent.Executor arg0, Android.Media.AudioManager.OnPreferredMixerAttributesChangedListener arg1)
        {
            IExecuteWithSignature("addOnPreferredMixerAttributesChangedListener", "(Ljava/util/concurrent/Executor;Landroid/media/AudioManager$OnPreferredMixerAttributesChangedListener;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#adjustStreamVolume(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void AdjustStreamVolume(int arg0, int arg1, int arg2)
        {
            IExecuteWithSignature("adjustStreamVolume", "(III)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#adjustSuggestedStreamVolume(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void AdjustSuggestedStreamVolume(int arg0, int arg1, int arg2)
        {
            IExecuteWithSignature("adjustSuggestedStreamVolume", "(III)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#adjustVolume(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void AdjustVolume(int arg0, int arg1)
        {
            IExecuteWithSignature("adjustVolume", "(II)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#adjustVolumeGroupVolume(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void AdjustVolumeGroupVolume(int arg0, int arg1, int arg2)
        {
            IExecuteWithSignature("adjustVolumeGroupVolume", "(III)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#clearCommunicationDevice()"/>
        /// </summary>
        public void ClearCommunicationDevice()
        {
            IExecuteWithSignature("clearCommunicationDevice", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#dispatchMediaKeyEvent(android.view.KeyEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.KeyEvent"/></param>
        public void DispatchMediaKeyEvent(Android.View.KeyEvent arg0)
        {
            IExecuteWithSignature("dispatchMediaKeyEvent", "(Landroid/view/KeyEvent;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#loadSoundEffects()"/>
        /// </summary>
        public void LoadSoundEffects()
        {
            IExecuteWithSignature("loadSoundEffects", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#playSoundEffect(int,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public void PlaySoundEffect(int arg0, float arg1)
        {
            IExecuteWithSignature("playSoundEffect", "(IF)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#playSoundEffect(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void PlaySoundEffect(int arg0)
        {
            IExecuteWithSignature("playSoundEffect", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#registerAudioDeviceCallback(android.media.AudioDeviceCallback,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioDeviceCallback"/></param>
        /// <param name="arg1"><see cref="Android.Os.Handler"/></param>
        public void RegisterAudioDeviceCallback(Android.Media.AudioDeviceCallback arg0, Android.Os.Handler arg1)
        {
            IExecuteWithSignature("registerAudioDeviceCallback", "(Landroid/media/AudioDeviceCallback;Landroid/os/Handler;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#registerAudioPlaybackCallback(android.media.AudioManager.AudioPlaybackCallback,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioManager.AudioPlaybackCallback"/></param>
        /// <param name="arg1"><see cref="Android.Os.Handler"/></param>
        public void RegisterAudioPlaybackCallback(Android.Media.AudioManager.AudioPlaybackCallback arg0, Android.Os.Handler arg1)
        {
            IExecuteWithSignature("registerAudioPlaybackCallback", "(Landroid/media/AudioManager$AudioPlaybackCallback;Landroid/os/Handler;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#registerAudioRecordingCallback(android.media.AudioManager.AudioRecordingCallback,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioManager.AudioRecordingCallback"/></param>
        /// <param name="arg1"><see cref="Android.Os.Handler"/></param>
        public void RegisterAudioRecordingCallback(Android.Media.AudioManager.AudioRecordingCallback arg0, Android.Os.Handler arg1)
        {
            IExecuteWithSignature("registerAudioRecordingCallback", "(Landroid/media/AudioManager$AudioRecordingCallback;Landroid/os/Handler;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#registerMediaButtonEventReceiver(android.app.PendingIntent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.PendingIntent"/></param>
        [global::System.Obsolete()]
        public void RegisterMediaButtonEventReceiver(Android.App.PendingIntent arg0)
        {
            IExecuteWithSignature("registerMediaButtonEventReceiver", "(Landroid/app/PendingIntent;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#registerMediaButtonEventReceiver(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        [global::System.Obsolete()]
        public void RegisterMediaButtonEventReceiver(Android.Content.ComponentName arg0)
        {
            IExecuteWithSignature("registerMediaButtonEventReceiver", "(Landroid/content/ComponentName;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#registerRemoteControlClient(android.media.RemoteControlClient)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.RemoteControlClient"/></param>
        [global::System.Obsolete()]
        public void RegisterRemoteControlClient(Android.Media.RemoteControlClient arg0)
        {
            IExecuteWithSignature("registerRemoteControlClient", "(Landroid/media/RemoteControlClient;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#removeOnCommunicationDeviceChangedListener(android.media.AudioManager.OnCommunicationDeviceChangedListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioManager.OnCommunicationDeviceChangedListener"/></param>
        public void RemoveOnCommunicationDeviceChangedListener(Android.Media.AudioManager.OnCommunicationDeviceChangedListener arg0)
        {
            IExecuteWithSignature("removeOnCommunicationDeviceChangedListener", "(Landroid/media/AudioManager$OnCommunicationDeviceChangedListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#removeOnModeChangedListener(android.media.AudioManager.OnModeChangedListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioManager.OnModeChangedListener"/></param>
        public void RemoveOnModeChangedListener(Android.Media.AudioManager.OnModeChangedListener arg0)
        {
            IExecuteWithSignature("removeOnModeChangedListener", "(Landroid/media/AudioManager$OnModeChangedListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#removeOnPreferredMixerAttributesChangedListener(android.media.AudioManager.OnPreferredMixerAttributesChangedListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioManager.OnPreferredMixerAttributesChangedListener"/></param>
        public void RemoveOnPreferredMixerAttributesChangedListener(Android.Media.AudioManager.OnPreferredMixerAttributesChangedListener arg0)
        {
            IExecuteWithSignature("removeOnPreferredMixerAttributesChangedListener", "(Landroid/media/AudioManager$OnPreferredMixerAttributesChangedListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#setAllowedCapturePolicy(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetAllowedCapturePolicy(int arg0)
        {
            IExecuteWithSignature("setAllowedCapturePolicy", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#setBluetoothA2dpOn(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void SetBluetoothA2dpOn(bool arg0)
        {
            IExecuteWithSignature("setBluetoothA2dpOn", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#setBluetoothScoOn(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetBluetoothScoOn(bool arg0)
        {
            IExecuteWithSignature("setBluetoothScoOn", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#setMicrophoneMute(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetMicrophoneMute(bool arg0)
        {
            IExecuteWithSignature("setMicrophoneMute", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#setMode(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetMode(int arg0)
        {
            IExecuteWithSignature("setMode", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#setParameters(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void SetParameters(Java.Lang.String arg0)
        {
            IExecuteWithSignature("setParameters", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#setRingerMode(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetRingerMode(int arg0)
        {
            IExecuteWithSignature("setRingerMode", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#setRouting(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void SetRouting(int arg0, int arg1, int arg2)
        {
            IExecuteWithSignature("setRouting", "(III)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#setSpeakerphoneOn(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void SetSpeakerphoneOn(bool arg0)
        {
            IExecuteWithSignature("setSpeakerphoneOn", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#setStreamMute(int,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void SetStreamMute(int arg0, bool arg1)
        {
            IExecuteWithSignature("setStreamMute", "(IZ)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#setStreamSolo(int,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void SetStreamSolo(int arg0, bool arg1)
        {
            IExecuteWithSignature("setStreamSolo", "(IZ)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#setStreamVolume(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void SetStreamVolume(int arg0, int arg1, int arg2)
        {
            IExecuteWithSignature("setStreamVolume", "(III)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#setVibrateSetting(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void SetVibrateSetting(int arg0, int arg1)
        {
            IExecuteWithSignature("setVibrateSetting", "(II)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#setWiredHeadsetOn(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void SetWiredHeadsetOn(bool arg0)
        {
            IExecuteWithSignature("setWiredHeadsetOn", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#startBluetoothSco()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void StartBluetoothSco()
        {
            IExecuteWithSignature("startBluetoothSco", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#stopBluetoothSco()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void StopBluetoothSco()
        {
            IExecuteWithSignature("stopBluetoothSco", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#unloadSoundEffects()"/>
        /// </summary>
        public void UnloadSoundEffects()
        {
            IExecuteWithSignature("unloadSoundEffects", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#unregisterAudioDeviceCallback(android.media.AudioDeviceCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioDeviceCallback"/></param>
        public void UnregisterAudioDeviceCallback(Android.Media.AudioDeviceCallback arg0)
        {
            IExecuteWithSignature("unregisterAudioDeviceCallback", "(Landroid/media/AudioDeviceCallback;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#unregisterAudioPlaybackCallback(android.media.AudioManager.AudioPlaybackCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioManager.AudioPlaybackCallback"/></param>
        public void UnregisterAudioPlaybackCallback(Android.Media.AudioManager.AudioPlaybackCallback arg0)
        {
            IExecuteWithSignature("unregisterAudioPlaybackCallback", "(Landroid/media/AudioManager$AudioPlaybackCallback;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#unregisterAudioRecordingCallback(android.media.AudioManager.AudioRecordingCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioManager.AudioRecordingCallback"/></param>
        public void UnregisterAudioRecordingCallback(Android.Media.AudioManager.AudioRecordingCallback arg0)
        {
            IExecuteWithSignature("unregisterAudioRecordingCallback", "(Landroid/media/AudioManager$AudioRecordingCallback;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#unregisterMediaButtonEventReceiver(android.app.PendingIntent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.PendingIntent"/></param>
        [global::System.Obsolete()]
        public void UnregisterMediaButtonEventReceiver(Android.App.PendingIntent arg0)
        {
            IExecuteWithSignature("unregisterMediaButtonEventReceiver", "(Landroid/app/PendingIntent;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#unregisterMediaButtonEventReceiver(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        [global::System.Obsolete()]
        public void UnregisterMediaButtonEventReceiver(Android.Content.ComponentName arg0)
        {
            IExecuteWithSignature("unregisterMediaButtonEventReceiver", "(Landroid/content/ComponentName;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#unregisterRemoteControlClient(android.media.RemoteControlClient)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.RemoteControlClient"/></param>
        [global::System.Obsolete()]
        public void UnregisterRemoteControlClient(Android.Media.RemoteControlClient arg0)
        {
            IExecuteWithSignature("unregisterRemoteControlClient", "(Landroid/media/RemoteControlClient;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioManager.html#unregisterRemoteController(android.media.RemoteController)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.RemoteController"/></param>
        [global::System.Obsolete()]
        public void UnregisterRemoteController(Android.Media.RemoteController arg0)
        {
            IExecuteWithSignature("unregisterRemoteController", "(Landroid/media/RemoteController;)V", arg0);
        }
    
        #endregion
    
        #region Nested classes
        #region AudioPlaybackCallback implementation
        public partial class AudioPlaybackCallback
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioManager.AudioPlaybackCallback.html#onPlaybackConfigChanged(java.util.List)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.List"/></param>
            public void OnPlaybackConfigChanged(Java.Util.List<Android.Media.AudioPlaybackConfiguration> arg0)
            {
                IExecuteWithSignature("onPlaybackConfigChanged", "(Ljava/util/List;)V", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region AudioRecordingCallback implementation
        public partial class AudioRecordingCallback
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioManager.AudioRecordingCallback.html#onRecordingConfigChanged(java.util.List)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.List"/></param>
            public void OnRecordingConfigChanged(Java.Util.List<Android.Media.AudioRecordingConfiguration> arg0)
            {
                IExecuteWithSignature("onRecordingConfigChanged", "(Ljava/util/List;)V", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region OnAudioFocusChangeListener implementation
        public partial class OnAudioFocusChangeListener
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnAudioFocusChangeListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onAudioFocusChange", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnAudioFocusChangeEventHandler));

            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/AudioManager.OnAudioFocusChangeListener.html#onAudioFocusChange(int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnAudioFocusChange"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<int> OnOnAudioFocusChange { get; set; } = null;
            
            bool hasOverrideOnAudioFocusChange = true;
            void OnAudioFocusChangeEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnAudioFocusChange = true;
                var methodToExecute = (OnOnAudioFocusChange != null) ? OnOnAudioFocusChange : OnAudioFocusChange;
                methodToExecute.Invoke(data.EventData.GetAt<int>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnAudioFocusChange;
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioManager.OnAudioFocusChangeListener.html#onAudioFocusChange(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public virtual void OnAudioFocusChange(int arg0)
            {
                hasOverrideOnAudioFocusChange = false;
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region OnAudioFocusChangeListenerDirect implementation
        public partial class OnAudioFocusChangeListenerDirect
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioManager.OnAudioFocusChangeListener.html#onAudioFocusChange(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public override void OnAudioFocusChange(int arg0)
            {
                IExecuteWithSignature("onAudioFocusChange", "(I)V", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region OnCommunicationDeviceChangedListener implementation
        public partial class OnCommunicationDeviceChangedListener
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnCommunicationDeviceChangedListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onCommunicationDeviceChanged", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnCommunicationDeviceChangedEventHandler));

            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/AudioManager.OnCommunicationDeviceChangedListener.html#onCommunicationDeviceChanged(android.media.AudioDeviceInfo)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnCommunicationDeviceChanged"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Media.AudioDeviceInfo> OnOnCommunicationDeviceChanged { get; set; } = null;
            
            bool hasOverrideOnCommunicationDeviceChanged = true;
            void OnCommunicationDeviceChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnCommunicationDeviceChanged = true;
                var methodToExecute = (OnOnCommunicationDeviceChanged != null) ? OnOnCommunicationDeviceChanged : OnCommunicationDeviceChanged;
                methodToExecute.Invoke(data.EventData.GetAt<Android.Media.AudioDeviceInfo>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnCommunicationDeviceChanged;
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioManager.OnCommunicationDeviceChangedListener.html#onCommunicationDeviceChanged(android.media.AudioDeviceInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.AudioDeviceInfo"/></param>
            public virtual void OnCommunicationDeviceChanged(Android.Media.AudioDeviceInfo arg0)
            {
                hasOverrideOnCommunicationDeviceChanged = false;
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region OnCommunicationDeviceChangedListenerDirect implementation
        public partial class OnCommunicationDeviceChangedListenerDirect
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioManager.OnCommunicationDeviceChangedListener.html#onCommunicationDeviceChanged(android.media.AudioDeviceInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.AudioDeviceInfo"/></param>
            public override void OnCommunicationDeviceChanged(Android.Media.AudioDeviceInfo arg0)
            {
                IExecuteWithSignature("onCommunicationDeviceChanged", "(Landroid/media/AudioDeviceInfo;)V", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region OnModeChangedListener implementation
        public partial class OnModeChangedListener
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnModeChangedListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onModeChanged", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnModeChangedEventHandler));

            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/AudioManager.OnModeChangedListener.html#onModeChanged(int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnModeChanged"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<int> OnOnModeChanged { get; set; } = null;
            
            bool hasOverrideOnModeChanged = true;
            void OnModeChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnModeChanged = true;
                var methodToExecute = (OnOnModeChanged != null) ? OnOnModeChanged : OnModeChanged;
                methodToExecute.Invoke(data.EventData.GetAt<int>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnModeChanged;
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioManager.OnModeChangedListener.html#onModeChanged(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public virtual void OnModeChanged(int arg0)
            {
                hasOverrideOnModeChanged = false;
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region OnModeChangedListenerDirect implementation
        public partial class OnModeChangedListenerDirect
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioManager.OnModeChangedListener.html#onModeChanged(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public override void OnModeChanged(int arg0)
            {
                IExecuteWithSignature("onModeChanged", "(I)V", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region OnPreferredMixerAttributesChangedListener implementation
        public partial class OnPreferredMixerAttributesChangedListener
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnPreferredMixerAttributesChangedListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onPreferredMixerAttributesChanged", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnPreferredMixerAttributesChangedEventHandler));

            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/AudioManager.OnPreferredMixerAttributesChangedListener.html#onPreferredMixerAttributesChanged(android.media.AudioAttributes,android.media.AudioDeviceInfo,android.media.AudioMixerAttributes)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnPreferredMixerAttributesChanged"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Media.AudioAttributes, Android.Media.AudioDeviceInfo, Android.Media.AudioMixerAttributes> OnOnPreferredMixerAttributesChanged { get; set; } = null;
            
            bool hasOverrideOnPreferredMixerAttributesChanged = true;
            void OnPreferredMixerAttributesChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnPreferredMixerAttributesChanged = true;
                var methodToExecute = (OnOnPreferredMixerAttributesChanged != null) ? OnOnPreferredMixerAttributesChanged : OnPreferredMixerAttributesChanged;
                methodToExecute.Invoke(data.EventData.GetAt<Android.Media.AudioAttributes>(0), data.EventData.GetAt<Android.Media.AudioDeviceInfo>(1), data.EventData.GetAt<Android.Media.AudioMixerAttributes>(2));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnPreferredMixerAttributesChanged;
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioManager.OnPreferredMixerAttributesChangedListener.html#onPreferredMixerAttributesChanged(android.media.AudioAttributes,android.media.AudioDeviceInfo,android.media.AudioMixerAttributes)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.AudioAttributes"/></param>
            /// <param name="arg1"><see cref="Android.Media.AudioDeviceInfo"/></param>
            /// <param name="arg2"><see cref="Android.Media.AudioMixerAttributes"/></param>
            public virtual void OnPreferredMixerAttributesChanged(Android.Media.AudioAttributes arg0, Android.Media.AudioDeviceInfo arg1, Android.Media.AudioMixerAttributes arg2)
            {
                hasOverrideOnPreferredMixerAttributesChanged = false;
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region OnPreferredMixerAttributesChangedListenerDirect implementation
        public partial class OnPreferredMixerAttributesChangedListenerDirect
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioManager.OnPreferredMixerAttributesChangedListener.html#onPreferredMixerAttributesChanged(android.media.AudioAttributes,android.media.AudioDeviceInfo,android.media.AudioMixerAttributes)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.AudioAttributes"/></param>
            /// <param name="arg1"><see cref="Android.Media.AudioDeviceInfo"/></param>
            /// <param name="arg2"><see cref="Android.Media.AudioMixerAttributes"/></param>
            public override void OnPreferredMixerAttributesChanged(Android.Media.AudioAttributes arg0, Android.Media.AudioDeviceInfo arg1, Android.Media.AudioMixerAttributes arg2)
            {
                IExecuteWithSignature("onPreferredMixerAttributesChanged", "(Landroid/media/AudioAttributes;Landroid/media/AudioDeviceInfo;Landroid/media/AudioMixerAttributes;)V", arg0, arg1, arg2);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.2.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media.Metrics
{
    #region PlaybackMetrics
    public partial class PlaybackMetrics
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#CONTENT_TYPE_AD"/>
        /// </summary>
        public static int CONTENT_TYPE_AD { get { if (!_CONTENT_TYPE_ADReady) { _CONTENT_TYPE_ADContent = SGetField<int>(LocalBridgeClazz, "CONTENT_TYPE_AD"); _CONTENT_TYPE_ADReady = true; } return _CONTENT_TYPE_ADContent; } }
        private static int _CONTENT_TYPE_ADContent = default;
        private static bool _CONTENT_TYPE_ADReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#CONTENT_TYPE_MAIN"/>
        /// </summary>
        public static int CONTENT_TYPE_MAIN { get { if (!_CONTENT_TYPE_MAINReady) { _CONTENT_TYPE_MAINContent = SGetField<int>(LocalBridgeClazz, "CONTENT_TYPE_MAIN"); _CONTENT_TYPE_MAINReady = true; } return _CONTENT_TYPE_MAINContent; } }
        private static int _CONTENT_TYPE_MAINContent = default;
        private static bool _CONTENT_TYPE_MAINReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#CONTENT_TYPE_OTHER"/>
        /// </summary>
        public static int CONTENT_TYPE_OTHER { get { if (!_CONTENT_TYPE_OTHERReady) { _CONTENT_TYPE_OTHERContent = SGetField<int>(LocalBridgeClazz, "CONTENT_TYPE_OTHER"); _CONTENT_TYPE_OTHERReady = true; } return _CONTENT_TYPE_OTHERContent; } }
        private static int _CONTENT_TYPE_OTHERContent = default;
        private static bool _CONTENT_TYPE_OTHERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#CONTENT_TYPE_UNKNOWN"/>
        /// </summary>
        public static int CONTENT_TYPE_UNKNOWN { get { if (!_CONTENT_TYPE_UNKNOWNReady) { _CONTENT_TYPE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "CONTENT_TYPE_UNKNOWN"); _CONTENT_TYPE_UNKNOWNReady = true; } return _CONTENT_TYPE_UNKNOWNContent; } }
        private static int _CONTENT_TYPE_UNKNOWNContent = default;
        private static bool _CONTENT_TYPE_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#DRM_TYPE_CLEARKEY"/>
        /// </summary>
        public static int DRM_TYPE_CLEARKEY { get { if (!_DRM_TYPE_CLEARKEYReady) { _DRM_TYPE_CLEARKEYContent = SGetField<int>(LocalBridgeClazz, "DRM_TYPE_CLEARKEY"); _DRM_TYPE_CLEARKEYReady = true; } return _DRM_TYPE_CLEARKEYContent; } }
        private static int _DRM_TYPE_CLEARKEYContent = default;
        private static bool _DRM_TYPE_CLEARKEYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#DRM_TYPE_NONE"/>
        /// </summary>
        public static int DRM_TYPE_NONE { get { if (!_DRM_TYPE_NONEReady) { _DRM_TYPE_NONEContent = SGetField<int>(LocalBridgeClazz, "DRM_TYPE_NONE"); _DRM_TYPE_NONEReady = true; } return _DRM_TYPE_NONEContent; } }
        private static int _DRM_TYPE_NONEContent = default;
        private static bool _DRM_TYPE_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#DRM_TYPE_OTHER"/>
        /// </summary>
        public static int DRM_TYPE_OTHER { get { if (!_DRM_TYPE_OTHERReady) { _DRM_TYPE_OTHERContent = SGetField<int>(LocalBridgeClazz, "DRM_TYPE_OTHER"); _DRM_TYPE_OTHERReady = true; } return _DRM_TYPE_OTHERContent; } }
        private static int _DRM_TYPE_OTHERContent = default;
        private static bool _DRM_TYPE_OTHERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#DRM_TYPE_PLAY_READY"/>
        /// </summary>
        public static int DRM_TYPE_PLAY_READY { get { if (!_DRM_TYPE_PLAY_READYReady) { _DRM_TYPE_PLAY_READYContent = SGetField<int>(LocalBridgeClazz, "DRM_TYPE_PLAY_READY"); _DRM_TYPE_PLAY_READYReady = true; } return _DRM_TYPE_PLAY_READYContent; } }
        private static int _DRM_TYPE_PLAY_READYContent = default;
        private static bool _DRM_TYPE_PLAY_READYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#DRM_TYPE_WIDEVINE_L1"/>
        /// </summary>
        public static int DRM_TYPE_WIDEVINE_L1 { get { if (!_DRM_TYPE_WIDEVINE_L1Ready) { _DRM_TYPE_WIDEVINE_L1Content = SGetField<int>(LocalBridgeClazz, "DRM_TYPE_WIDEVINE_L1"); _DRM_TYPE_WIDEVINE_L1Ready = true; } return _DRM_TYPE_WIDEVINE_L1Content; } }
        private static int _DRM_TYPE_WIDEVINE_L1Content = default;
        private static bool _DRM_TYPE_WIDEVINE_L1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#DRM_TYPE_WIDEVINE_L3"/>
        /// </summary>
        public static int DRM_TYPE_WIDEVINE_L3 { get { if (!_DRM_TYPE_WIDEVINE_L3Ready) { _DRM_TYPE_WIDEVINE_L3Content = SGetField<int>(LocalBridgeClazz, "DRM_TYPE_WIDEVINE_L3"); _DRM_TYPE_WIDEVINE_L3Ready = true; } return _DRM_TYPE_WIDEVINE_L3Content; } }
        private static int _DRM_TYPE_WIDEVINE_L3Content = default;
        private static bool _DRM_TYPE_WIDEVINE_L3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#DRM_TYPE_WV_L3_FALLBACK"/>
        /// </summary>
        public static int DRM_TYPE_WV_L3_FALLBACK { get { if (!_DRM_TYPE_WV_L3_FALLBACKReady) { _DRM_TYPE_WV_L3_FALLBACKContent = SGetField<int>(LocalBridgeClazz, "DRM_TYPE_WV_L3_FALLBACK"); _DRM_TYPE_WV_L3_FALLBACKReady = true; } return _DRM_TYPE_WV_L3_FALLBACKContent; } }
        private static int _DRM_TYPE_WV_L3_FALLBACKContent = default;
        private static bool _DRM_TYPE_WV_L3_FALLBACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#PLAYBACK_TYPE_LIVE"/>
        /// </summary>
        public static int PLAYBACK_TYPE_LIVE { get { if (!_PLAYBACK_TYPE_LIVEReady) { _PLAYBACK_TYPE_LIVEContent = SGetField<int>(LocalBridgeClazz, "PLAYBACK_TYPE_LIVE"); _PLAYBACK_TYPE_LIVEReady = true; } return _PLAYBACK_TYPE_LIVEContent; } }
        private static int _PLAYBACK_TYPE_LIVEContent = default;
        private static bool _PLAYBACK_TYPE_LIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#PLAYBACK_TYPE_OTHER"/>
        /// </summary>
        public static int PLAYBACK_TYPE_OTHER { get { if (!_PLAYBACK_TYPE_OTHERReady) { _PLAYBACK_TYPE_OTHERContent = SGetField<int>(LocalBridgeClazz, "PLAYBACK_TYPE_OTHER"); _PLAYBACK_TYPE_OTHERReady = true; } return _PLAYBACK_TYPE_OTHERContent; } }
        private static int _PLAYBACK_TYPE_OTHERContent = default;
        private static bool _PLAYBACK_TYPE_OTHERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#PLAYBACK_TYPE_UNKNOWN"/>
        /// </summary>
        public static int PLAYBACK_TYPE_UNKNOWN { get { if (!_PLAYBACK_TYPE_UNKNOWNReady) { _PLAYBACK_TYPE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "PLAYBACK_TYPE_UNKNOWN"); _PLAYBACK_TYPE_UNKNOWNReady = true; } return _PLAYBACK_TYPE_UNKNOWNContent; } }
        private static int _PLAYBACK_TYPE_UNKNOWNContent = default;
        private static bool _PLAYBACK_TYPE_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#PLAYBACK_TYPE_VOD"/>
        /// </summary>
        public static int PLAYBACK_TYPE_VOD { get { if (!_PLAYBACK_TYPE_VODReady) { _PLAYBACK_TYPE_VODContent = SGetField<int>(LocalBridgeClazz, "PLAYBACK_TYPE_VOD"); _PLAYBACK_TYPE_VODReady = true; } return _PLAYBACK_TYPE_VODContent; } }
        private static int _PLAYBACK_TYPE_VODContent = default;
        private static bool _PLAYBACK_TYPE_VODReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#STREAM_SOURCE_DEVICE"/>
        /// </summary>
        public static int STREAM_SOURCE_DEVICE { get { if (!_STREAM_SOURCE_DEVICEReady) { _STREAM_SOURCE_DEVICEContent = SGetField<int>(LocalBridgeClazz, "STREAM_SOURCE_DEVICE"); _STREAM_SOURCE_DEVICEReady = true; } return _STREAM_SOURCE_DEVICEContent; } }
        private static int _STREAM_SOURCE_DEVICEContent = default;
        private static bool _STREAM_SOURCE_DEVICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#STREAM_SOURCE_MIXED"/>
        /// </summary>
        public static int STREAM_SOURCE_MIXED { get { if (!_STREAM_SOURCE_MIXEDReady) { _STREAM_SOURCE_MIXEDContent = SGetField<int>(LocalBridgeClazz, "STREAM_SOURCE_MIXED"); _STREAM_SOURCE_MIXEDReady = true; } return _STREAM_SOURCE_MIXEDContent; } }
        private static int _STREAM_SOURCE_MIXEDContent = default;
        private static bool _STREAM_SOURCE_MIXEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#STREAM_SOURCE_NETWORK"/>
        /// </summary>
        public static int STREAM_SOURCE_NETWORK { get { if (!_STREAM_SOURCE_NETWORKReady) { _STREAM_SOURCE_NETWORKContent = SGetField<int>(LocalBridgeClazz, "STREAM_SOURCE_NETWORK"); _STREAM_SOURCE_NETWORKReady = true; } return _STREAM_SOURCE_NETWORKContent; } }
        private static int _STREAM_SOURCE_NETWORKContent = default;
        private static bool _STREAM_SOURCE_NETWORKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#STREAM_SOURCE_UNKNOWN"/>
        /// </summary>
        public static int STREAM_SOURCE_UNKNOWN { get { if (!_STREAM_SOURCE_UNKNOWNReady) { _STREAM_SOURCE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "STREAM_SOURCE_UNKNOWN"); _STREAM_SOURCE_UNKNOWNReady = true; } return _STREAM_SOURCE_UNKNOWNContent; } }
        private static int _STREAM_SOURCE_UNKNOWNContent = default;
        private static bool _STREAM_SOURCE_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#STREAM_TYPE_DASH"/>
        /// </summary>
        public static int STREAM_TYPE_DASH { get { if (!_STREAM_TYPE_DASHReady) { _STREAM_TYPE_DASHContent = SGetField<int>(LocalBridgeClazz, "STREAM_TYPE_DASH"); _STREAM_TYPE_DASHReady = true; } return _STREAM_TYPE_DASHContent; } }
        private static int _STREAM_TYPE_DASHContent = default;
        private static bool _STREAM_TYPE_DASHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#STREAM_TYPE_HLS"/>
        /// </summary>
        public static int STREAM_TYPE_HLS { get { if (!_STREAM_TYPE_HLSReady) { _STREAM_TYPE_HLSContent = SGetField<int>(LocalBridgeClazz, "STREAM_TYPE_HLS"); _STREAM_TYPE_HLSReady = true; } return _STREAM_TYPE_HLSContent; } }
        private static int _STREAM_TYPE_HLSContent = default;
        private static bool _STREAM_TYPE_HLSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#STREAM_TYPE_OTHER"/>
        /// </summary>
        public static int STREAM_TYPE_OTHER { get { if (!_STREAM_TYPE_OTHERReady) { _STREAM_TYPE_OTHERContent = SGetField<int>(LocalBridgeClazz, "STREAM_TYPE_OTHER"); _STREAM_TYPE_OTHERReady = true; } return _STREAM_TYPE_OTHERContent; } }
        private static int _STREAM_TYPE_OTHERContent = default;
        private static bool _STREAM_TYPE_OTHERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#STREAM_TYPE_PROGRESSIVE"/>
        /// </summary>
        public static int STREAM_TYPE_PROGRESSIVE { get { if (!_STREAM_TYPE_PROGRESSIVEReady) { _STREAM_TYPE_PROGRESSIVEContent = SGetField<int>(LocalBridgeClazz, "STREAM_TYPE_PROGRESSIVE"); _STREAM_TYPE_PROGRESSIVEReady = true; } return _STREAM_TYPE_PROGRESSIVEContent; } }
        private static int _STREAM_TYPE_PROGRESSIVEContent = default;
        private static bool _STREAM_TYPE_PROGRESSIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#STREAM_TYPE_SS"/>
        /// </summary>
        public static int STREAM_TYPE_SS { get { if (!_STREAM_TYPE_SSReady) { _STREAM_TYPE_SSContent = SGetField<int>(LocalBridgeClazz, "STREAM_TYPE_SS"); _STREAM_TYPE_SSReady = true; } return _STREAM_TYPE_SSContent; } }
        private static int _STREAM_TYPE_SSContent = default;
        private static bool _STREAM_TYPE_SSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#STREAM_TYPE_UNKNOWN"/>
        /// </summary>
        public static int STREAM_TYPE_UNKNOWN { get { if (!_STREAM_TYPE_UNKNOWNReady) { _STREAM_TYPE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "STREAM_TYPE_UNKNOWN"); _STREAM_TYPE_UNKNOWNReady = true; } return _STREAM_TYPE_UNKNOWNContent; } }
        private static int _STREAM_TYPE_UNKNOWNContent = default;
        private static bool _STREAM_TYPE_UNKNOWNReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#getMetricsBundle()"/>
        /// </summary>
        /// <returns><see cref="Android.Os.Bundle"/></returns>
        public Android.Os.Bundle GetMetricsBundle()
        {
            return IExecuteWithSignature<Android.Os.Bundle>("getMetricsBundle", "()Landroid/os/Bundle;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#getDrmSessionId()"/>
        /// </summary>
        /// <returns><see cref="byte"/></returns>
        public byte[] GetDrmSessionId()
        {
            return IExecuteWithSignatureArray<byte>("getDrmSessionId", "()[B");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#getAudioUnderrunCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetAudioUnderrunCount()
        {
            return IExecuteWithSignature<int>("getAudioUnderrunCount", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#getContentType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetContentType()
        {
            return IExecuteWithSignature<int>("getContentType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#getDrmType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetDrmType()
        {
            return IExecuteWithSignature<int>("getDrmType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#getPlaybackType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetPlaybackType()
        {
            return IExecuteWithSignature<int>("getPlaybackType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#getStreamSource()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetStreamSource()
        {
            return IExecuteWithSignature<int>("getStreamSource", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#getStreamType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetStreamType()
        {
            return IExecuteWithSignature<int>("getStreamType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#getVideoFramesDropped()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetVideoFramesDropped()
        {
            return IExecuteWithSignature<int>("getVideoFramesDropped", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#getVideoFramesPlayed()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetVideoFramesPlayed()
        {
            return IExecuteWithSignature<int>("getVideoFramesPlayed", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#getPlayerName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetPlayerName()
        {
            return IExecuteWithSignature<Java.Lang.String>("getPlayerName", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#getPlayerVersion()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetPlayerVersion()
        {
            return IExecuteWithSignature<Java.Lang.String>("getPlayerVersion", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#getLocalBytesRead()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetLocalBytesRead()
        {
            return IExecuteWithSignature<long>("getLocalBytesRead", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#getMediaDurationMillis()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetMediaDurationMillis()
        {
            return IExecuteWithSignature<long>("getMediaDurationMillis", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#getNetworkBytesRead()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetNetworkBytesRead()
        {
            return IExecuteWithSignature<long>("getNetworkBytesRead", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#getNetworkTransferDurationMillis()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetNetworkTransferDurationMillis()
        {
            return IExecuteWithSignature<long>("getNetworkTransferDurationMillis", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#getExperimentIds()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long[] GetExperimentIds()
        {
            return IExecuteWithSignatureArray<long>("getExperimentIds", "()[J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecute("writeToParcel", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region Builder
        public partial class Builder
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Media.Metrics.PlaybackMetrics"/></returns>
            public Android.Media.Metrics.PlaybackMetrics Build()
            {
                return IExecuteWithSignature<Android.Media.Metrics.PlaybackMetrics>("build", "()Landroid/media/metrics/PlaybackMetrics;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.Builder.html#addExperimentId(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.Media.Metrics.PlaybackMetrics.Builder"/></returns>
            public Android.Media.Metrics.PlaybackMetrics.Builder AddExperimentId(long arg0)
            {
                return IExecuteWithSignature<Android.Media.Metrics.PlaybackMetrics.Builder>("addExperimentId", "(J)Landroid/media/metrics/PlaybackMetrics$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.Builder.html#setAudioUnderrunCount(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.Metrics.PlaybackMetrics.Builder"/></returns>
            public Android.Media.Metrics.PlaybackMetrics.Builder SetAudioUnderrunCount(int arg0)
            {
                return IExecuteWithSignature<Android.Media.Metrics.PlaybackMetrics.Builder>("setAudioUnderrunCount", "(I)Landroid/media/metrics/PlaybackMetrics$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.Builder.html#setContentType(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.Metrics.PlaybackMetrics.Builder"/></returns>
            public Android.Media.Metrics.PlaybackMetrics.Builder SetContentType(int arg0)
            {
                return IExecuteWithSignature<Android.Media.Metrics.PlaybackMetrics.Builder>("setContentType", "(I)Landroid/media/metrics/PlaybackMetrics$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.Builder.html#setDrmSessionId(byte[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="byte"/></param>
            /// <returns><see cref="Android.Media.Metrics.PlaybackMetrics.Builder"/></returns>
            public Android.Media.Metrics.PlaybackMetrics.Builder SetDrmSessionId(byte[] arg0)
            {
                return IExecuteWithSignature<Android.Media.Metrics.PlaybackMetrics.Builder>("setDrmSessionId", "([B)Landroid/media/metrics/PlaybackMetrics$Builder;", new object[] { arg0 });
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.Builder.html#setDrmType(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.Metrics.PlaybackMetrics.Builder"/></returns>
            public Android.Media.Metrics.PlaybackMetrics.Builder SetDrmType(int arg0)
            {
                return IExecuteWithSignature<Android.Media.Metrics.PlaybackMetrics.Builder>("setDrmType", "(I)Landroid/media/metrics/PlaybackMetrics$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.Builder.html#setLocalBytesRead(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.Media.Metrics.PlaybackMetrics.Builder"/></returns>
            public Android.Media.Metrics.PlaybackMetrics.Builder SetLocalBytesRead(long arg0)
            {
                return IExecuteWithSignature<Android.Media.Metrics.PlaybackMetrics.Builder>("setLocalBytesRead", "(J)Landroid/media/metrics/PlaybackMetrics$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.Builder.html#setMediaDurationMillis(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.Media.Metrics.PlaybackMetrics.Builder"/></returns>
            public Android.Media.Metrics.PlaybackMetrics.Builder SetMediaDurationMillis(long arg0)
            {
                return IExecuteWithSignature<Android.Media.Metrics.PlaybackMetrics.Builder>("setMediaDurationMillis", "(J)Landroid/media/metrics/PlaybackMetrics$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.Builder.html#setMetricsBundle(android.os.Bundle)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Bundle"/></param>
            /// <returns><see cref="Android.Media.Metrics.PlaybackMetrics.Builder"/></returns>
            public Android.Media.Metrics.PlaybackMetrics.Builder SetMetricsBundle(Android.Os.Bundle arg0)
            {
                return IExecuteWithSignature<Android.Media.Metrics.PlaybackMetrics.Builder>("setMetricsBundle", "(Landroid/os/Bundle;)Landroid/media/metrics/PlaybackMetrics$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.Builder.html#setNetworkBytesRead(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.Media.Metrics.PlaybackMetrics.Builder"/></returns>
            public Android.Media.Metrics.PlaybackMetrics.Builder SetNetworkBytesRead(long arg0)
            {
                return IExecuteWithSignature<Android.Media.Metrics.PlaybackMetrics.Builder>("setNetworkBytesRead", "(J)Landroid/media/metrics/PlaybackMetrics$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.Builder.html#setNetworkTransferDurationMillis(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.Media.Metrics.PlaybackMetrics.Builder"/></returns>
            public Android.Media.Metrics.PlaybackMetrics.Builder SetNetworkTransferDurationMillis(long arg0)
            {
                return IExecuteWithSignature<Android.Media.Metrics.PlaybackMetrics.Builder>("setNetworkTransferDurationMillis", "(J)Landroid/media/metrics/PlaybackMetrics$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.Builder.html#setPlaybackType(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.Metrics.PlaybackMetrics.Builder"/></returns>
            public Android.Media.Metrics.PlaybackMetrics.Builder SetPlaybackType(int arg0)
            {
                return IExecuteWithSignature<Android.Media.Metrics.PlaybackMetrics.Builder>("setPlaybackType", "(I)Landroid/media/metrics/PlaybackMetrics$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.Builder.html#setPlayerName(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Media.Metrics.PlaybackMetrics.Builder"/></returns>
            public Android.Media.Metrics.PlaybackMetrics.Builder SetPlayerName(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Media.Metrics.PlaybackMetrics.Builder>("setPlayerName", "(Ljava/lang/String;)Landroid/media/metrics/PlaybackMetrics$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.Builder.html#setPlayerVersion(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Media.Metrics.PlaybackMetrics.Builder"/></returns>
            public Android.Media.Metrics.PlaybackMetrics.Builder SetPlayerVersion(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Media.Metrics.PlaybackMetrics.Builder>("setPlayerVersion", "(Ljava/lang/String;)Landroid/media/metrics/PlaybackMetrics$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.Builder.html#setStreamSource(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.Metrics.PlaybackMetrics.Builder"/></returns>
            public Android.Media.Metrics.PlaybackMetrics.Builder SetStreamSource(int arg0)
            {
                return IExecuteWithSignature<Android.Media.Metrics.PlaybackMetrics.Builder>("setStreamSource", "(I)Landroid/media/metrics/PlaybackMetrics$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.Builder.html#setStreamType(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.Metrics.PlaybackMetrics.Builder"/></returns>
            public Android.Media.Metrics.PlaybackMetrics.Builder SetStreamType(int arg0)
            {
                return IExecuteWithSignature<Android.Media.Metrics.PlaybackMetrics.Builder>("setStreamType", "(I)Landroid/media/metrics/PlaybackMetrics$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.Builder.html#setVideoFramesDropped(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.Metrics.PlaybackMetrics.Builder"/></returns>
            public Android.Media.Metrics.PlaybackMetrics.Builder SetVideoFramesDropped(int arg0)
            {
                return IExecuteWithSignature<Android.Media.Metrics.PlaybackMetrics.Builder>("setVideoFramesDropped", "(I)Landroid/media/metrics/PlaybackMetrics$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/metrics/PlaybackMetrics.Builder.html#setVideoFramesPlayed(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.Metrics.PlaybackMetrics.Builder"/></returns>
            public Android.Media.Metrics.PlaybackMetrics.Builder SetVideoFramesPlayed(int arg0)
            {
                return IExecuteWithSignature<Android.Media.Metrics.PlaybackMetrics.Builder>("setVideoFramesPlayed", "(I)Landroid/media/metrics/PlaybackMetrics$Builder;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
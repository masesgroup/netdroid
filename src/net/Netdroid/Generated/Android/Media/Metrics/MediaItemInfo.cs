/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media.Metrics
{
    #region MediaItemInfo declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.html"/>
    /// </summary>
    public partial class MediaItemInfo : Android.Os.Parcelable
    {
        const string _bridgeClassName = "android.media.metrics.MediaItemInfo";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public MediaItemInfo() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public MediaItemInfo(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region Builder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.Builder.html"/>
        /// </summary>
        public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
        {
            const string _bridgeClassName = "android.media.metrics.MediaItemInfo$Builder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Builder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Builder(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region MediaItemInfo implementation
    public partial class MediaItemInfo
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.html#SOURCE_TYPE_CAMERA"/>
        /// </summary>
        public static int SOURCE_TYPE_CAMERA { get { if (!_SOURCE_TYPE_CAMERAReady) { _SOURCE_TYPE_CAMERAContent = SGetField<int>(LocalBridgeClazz, "SOURCE_TYPE_CAMERA"); _SOURCE_TYPE_CAMERAReady = true; } return _SOURCE_TYPE_CAMERAContent; } }
        private static int _SOURCE_TYPE_CAMERAContent = default;
        private static bool _SOURCE_TYPE_CAMERAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.html#SOURCE_TYPE_EDITING_SESSION"/>
        /// </summary>
        public static int SOURCE_TYPE_EDITING_SESSION { get { if (!_SOURCE_TYPE_EDITING_SESSIONReady) { _SOURCE_TYPE_EDITING_SESSIONContent = SGetField<int>(LocalBridgeClazz, "SOURCE_TYPE_EDITING_SESSION"); _SOURCE_TYPE_EDITING_SESSIONReady = true; } return _SOURCE_TYPE_EDITING_SESSIONContent; } }
        private static int _SOURCE_TYPE_EDITING_SESSIONContent = default;
        private static bool _SOURCE_TYPE_EDITING_SESSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.html#SOURCE_TYPE_GALLERY"/>
        /// </summary>
        public static int SOURCE_TYPE_GALLERY { get { if (!_SOURCE_TYPE_GALLERYReady) { _SOURCE_TYPE_GALLERYContent = SGetField<int>(LocalBridgeClazz, "SOURCE_TYPE_GALLERY"); _SOURCE_TYPE_GALLERYReady = true; } return _SOURCE_TYPE_GALLERYContent; } }
        private static int _SOURCE_TYPE_GALLERYContent = default;
        private static bool _SOURCE_TYPE_GALLERYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.html#SOURCE_TYPE_GENERATED"/>
        /// </summary>
        public static int SOURCE_TYPE_GENERATED { get { if (!_SOURCE_TYPE_GENERATEDReady) { _SOURCE_TYPE_GENERATEDContent = SGetField<int>(LocalBridgeClazz, "SOURCE_TYPE_GENERATED"); _SOURCE_TYPE_GENERATEDReady = true; } return _SOURCE_TYPE_GENERATEDContent; } }
        private static int _SOURCE_TYPE_GENERATEDContent = default;
        private static bool _SOURCE_TYPE_GENERATEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.html#SOURCE_TYPE_LOCAL_FILE"/>
        /// </summary>
        public static int SOURCE_TYPE_LOCAL_FILE { get { if (!_SOURCE_TYPE_LOCAL_FILEReady) { _SOURCE_TYPE_LOCAL_FILEContent = SGetField<int>(LocalBridgeClazz, "SOURCE_TYPE_LOCAL_FILE"); _SOURCE_TYPE_LOCAL_FILEReady = true; } return _SOURCE_TYPE_LOCAL_FILEContent; } }
        private static int _SOURCE_TYPE_LOCAL_FILEContent = default;
        private static bool _SOURCE_TYPE_LOCAL_FILEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.html#SOURCE_TYPE_REMOTE_FILE"/>
        /// </summary>
        public static int SOURCE_TYPE_REMOTE_FILE { get { if (!_SOURCE_TYPE_REMOTE_FILEReady) { _SOURCE_TYPE_REMOTE_FILEContent = SGetField<int>(LocalBridgeClazz, "SOURCE_TYPE_REMOTE_FILE"); _SOURCE_TYPE_REMOTE_FILEReady = true; } return _SOURCE_TYPE_REMOTE_FILEContent; } }
        private static int _SOURCE_TYPE_REMOTE_FILEContent = default;
        private static bool _SOURCE_TYPE_REMOTE_FILEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.html#SOURCE_TYPE_REMOTE_LIVE_STREAM"/>
        /// </summary>
        public static int SOURCE_TYPE_REMOTE_LIVE_STREAM { get { if (!_SOURCE_TYPE_REMOTE_LIVE_STREAMReady) { _SOURCE_TYPE_REMOTE_LIVE_STREAMContent = SGetField<int>(LocalBridgeClazz, "SOURCE_TYPE_REMOTE_LIVE_STREAM"); _SOURCE_TYPE_REMOTE_LIVE_STREAMReady = true; } return _SOURCE_TYPE_REMOTE_LIVE_STREAMContent; } }
        private static int _SOURCE_TYPE_REMOTE_LIVE_STREAMContent = default;
        private static bool _SOURCE_TYPE_REMOTE_LIVE_STREAMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.html#SOURCE_TYPE_UNSPECIFIED"/>
        /// </summary>
        public static int SOURCE_TYPE_UNSPECIFIED { get { if (!_SOURCE_TYPE_UNSPECIFIEDReady) { _SOURCE_TYPE_UNSPECIFIEDContent = SGetField<int>(LocalBridgeClazz, "SOURCE_TYPE_UNSPECIFIED"); _SOURCE_TYPE_UNSPECIFIEDReady = true; } return _SOURCE_TYPE_UNSPECIFIEDContent; } }
        private static int _SOURCE_TYPE_UNSPECIFIEDContent = default;
        private static bool _SOURCE_TYPE_UNSPECIFIEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.html#VALUE_UNSPECIFIED"/>
        /// </summary>
        public static int VALUE_UNSPECIFIED { get { if (!_VALUE_UNSPECIFIEDReady) { _VALUE_UNSPECIFIEDContent = SGetField<int>(LocalBridgeClazz, "VALUE_UNSPECIFIED"); _VALUE_UNSPECIFIEDReady = true; } return _VALUE_UNSPECIFIEDContent; } }
        private static int _VALUE_UNSPECIFIEDContent = default;
        private static bool _VALUE_UNSPECIFIEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.html#DATA_TYPE_AUDIO"/>
        /// </summary>
        public static long DATA_TYPE_AUDIO { get { if (!_DATA_TYPE_AUDIOReady) { _DATA_TYPE_AUDIOContent = SGetField<long>(LocalBridgeClazz, "DATA_TYPE_AUDIO"); _DATA_TYPE_AUDIOReady = true; } return _DATA_TYPE_AUDIOContent; } }
        private static long _DATA_TYPE_AUDIOContent = default;
        private static bool _DATA_TYPE_AUDIOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.html#DATA_TYPE_DEPTH"/>
        /// </summary>
        public static long DATA_TYPE_DEPTH { get { if (!_DATA_TYPE_DEPTHReady) { _DATA_TYPE_DEPTHContent = SGetField<long>(LocalBridgeClazz, "DATA_TYPE_DEPTH"); _DATA_TYPE_DEPTHReady = true; } return _DATA_TYPE_DEPTHContent; } }
        private static long _DATA_TYPE_DEPTHContent = default;
        private static bool _DATA_TYPE_DEPTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.html#DATA_TYPE_GAIN_MAP"/>
        /// </summary>
        public static long DATA_TYPE_GAIN_MAP { get { if (!_DATA_TYPE_GAIN_MAPReady) { _DATA_TYPE_GAIN_MAPContent = SGetField<long>(LocalBridgeClazz, "DATA_TYPE_GAIN_MAP"); _DATA_TYPE_GAIN_MAPReady = true; } return _DATA_TYPE_GAIN_MAPContent; } }
        private static long _DATA_TYPE_GAIN_MAPContent = default;
        private static bool _DATA_TYPE_GAIN_MAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.html#DATA_TYPE_GAPLESS"/>
        /// </summary>
        public static long DATA_TYPE_GAPLESS { get { if (!_DATA_TYPE_GAPLESSReady) { _DATA_TYPE_GAPLESSContent = SGetField<long>(LocalBridgeClazz, "DATA_TYPE_GAPLESS"); _DATA_TYPE_GAPLESSReady = true; } return _DATA_TYPE_GAPLESSContent; } }
        private static long _DATA_TYPE_GAPLESSContent = default;
        private static bool _DATA_TYPE_GAPLESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.html#DATA_TYPE_HIGH_DYNAMIC_RANGE_VIDEO"/>
        /// </summary>
        public static long DATA_TYPE_HIGH_DYNAMIC_RANGE_VIDEO { get { if (!_DATA_TYPE_HIGH_DYNAMIC_RANGE_VIDEOReady) { _DATA_TYPE_HIGH_DYNAMIC_RANGE_VIDEOContent = SGetField<long>(LocalBridgeClazz, "DATA_TYPE_HIGH_DYNAMIC_RANGE_VIDEO"); _DATA_TYPE_HIGH_DYNAMIC_RANGE_VIDEOReady = true; } return _DATA_TYPE_HIGH_DYNAMIC_RANGE_VIDEOContent; } }
        private static long _DATA_TYPE_HIGH_DYNAMIC_RANGE_VIDEOContent = default;
        private static bool _DATA_TYPE_HIGH_DYNAMIC_RANGE_VIDEOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.html#DATA_TYPE_HIGH_FRAME_RATE"/>
        /// </summary>
        public static long DATA_TYPE_HIGH_FRAME_RATE { get { if (!_DATA_TYPE_HIGH_FRAME_RATEReady) { _DATA_TYPE_HIGH_FRAME_RATEContent = SGetField<long>(LocalBridgeClazz, "DATA_TYPE_HIGH_FRAME_RATE"); _DATA_TYPE_HIGH_FRAME_RATEReady = true; } return _DATA_TYPE_HIGH_FRAME_RATEContent; } }
        private static long _DATA_TYPE_HIGH_FRAME_RATEContent = default;
        private static bool _DATA_TYPE_HIGH_FRAME_RATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.html#DATA_TYPE_IMAGE"/>
        /// </summary>
        public static long DATA_TYPE_IMAGE { get { if (!_DATA_TYPE_IMAGEReady) { _DATA_TYPE_IMAGEContent = SGetField<long>(LocalBridgeClazz, "DATA_TYPE_IMAGE"); _DATA_TYPE_IMAGEReady = true; } return _DATA_TYPE_IMAGEContent; } }
        private static long _DATA_TYPE_IMAGEContent = default;
        private static bool _DATA_TYPE_IMAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.html#DATA_TYPE_METADATA"/>
        /// </summary>
        public static long DATA_TYPE_METADATA { get { if (!_DATA_TYPE_METADATAReady) { _DATA_TYPE_METADATAContent = SGetField<long>(LocalBridgeClazz, "DATA_TYPE_METADATA"); _DATA_TYPE_METADATAReady = true; } return _DATA_TYPE_METADATAContent; } }
        private static long _DATA_TYPE_METADATAContent = default;
        private static bool _DATA_TYPE_METADATAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.html#DATA_TYPE_SPATIAL_AUDIO"/>
        /// </summary>
        public static long DATA_TYPE_SPATIAL_AUDIO { get { if (!_DATA_TYPE_SPATIAL_AUDIOReady) { _DATA_TYPE_SPATIAL_AUDIOContent = SGetField<long>(LocalBridgeClazz, "DATA_TYPE_SPATIAL_AUDIO"); _DATA_TYPE_SPATIAL_AUDIOReady = true; } return _DATA_TYPE_SPATIAL_AUDIOContent; } }
        private static long _DATA_TYPE_SPATIAL_AUDIOContent = default;
        private static bool _DATA_TYPE_SPATIAL_AUDIOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.html#DATA_TYPE_SPEED_SETTING_CUE_POINTS"/>
        /// </summary>
        public static long DATA_TYPE_SPEED_SETTING_CUE_POINTS { get { if (!_DATA_TYPE_SPEED_SETTING_CUE_POINTSReady) { _DATA_TYPE_SPEED_SETTING_CUE_POINTSContent = SGetField<long>(LocalBridgeClazz, "DATA_TYPE_SPEED_SETTING_CUE_POINTS"); _DATA_TYPE_SPEED_SETTING_CUE_POINTSReady = true; } return _DATA_TYPE_SPEED_SETTING_CUE_POINTSContent; } }
        private static long _DATA_TYPE_SPEED_SETTING_CUE_POINTSContent = default;
        private static bool _DATA_TYPE_SPEED_SETTING_CUE_POINTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.html#DATA_TYPE_VIDEO"/>
        /// </summary>
        public static long DATA_TYPE_VIDEO { get { if (!_DATA_TYPE_VIDEOReady) { _DATA_TYPE_VIDEOContent = SGetField<long>(LocalBridgeClazz, "DATA_TYPE_VIDEO"); _DATA_TYPE_VIDEOReady = true; } return _DATA_TYPE_VIDEOContent; } }
        private static long _DATA_TYPE_VIDEOContent = default;
        private static bool _DATA_TYPE_VIDEOReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.html#getVideoSize()"/>
        /// </summary>
        /// <returns><see cref="Android.Util.Size"/></returns>
        public Android.Util.Size GetVideoSize()
        {
            return IExecuteWithSignature<Android.Util.Size>("getVideoSize", "()Landroid/util/Size;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.html#getVideoFrameRate()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetVideoFrameRate()
        {
            return IExecuteWithSignature<float>("getVideoFrameRate", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.html#getAudioChannelCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetAudioChannelCount()
        {
            return IExecuteWithSignature<int>("getAudioChannelCount", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.html#getAudioSampleRateHz()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetAudioSampleRateHz()
        {
            return IExecuteWithSignature<int>("getAudioSampleRateHz", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.html#getSourceType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetSourceType()
        {
            return IExecuteWithSignature<int>("getSourceType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.html#getVideoDataSpace()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetVideoDataSpace()
        {
            return IExecuteWithSignature<int>("getVideoDataSpace", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.html#getContainerMimeType()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetContainerMimeType()
        {
            return IExecuteWithSignature<Java.Lang.String>("getContainerMimeType", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.html#getCodecNames()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Java.Lang.String> GetCodecNames()
        {
            return IExecuteWithSignature<Java.Util.List<Java.Lang.String>>("getCodecNames", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.html#getSampleMimeTypes()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Java.Lang.String> GetSampleMimeTypes()
        {
            return IExecuteWithSignature<Java.Util.List<Java.Lang.String>>("getSampleMimeTypes", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.html#getAudioSampleCount()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetAudioSampleCount()
        {
            return IExecuteWithSignature<long>("getAudioSampleCount", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.html#getClipDurationMillis()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetClipDurationMillis()
        {
            return IExecuteWithSignature<long>("getClipDurationMillis", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.html#getDataTypes()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetDataTypes()
        {
            return IExecuteWithSignature<long>("getDataTypes", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.html#getDurationMillis()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetDurationMillis()
        {
            return IExecuteWithSignature<long>("getDurationMillis", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.html#getVideoSampleCount()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetVideoSampleCount()
        {
            return IExecuteWithSignature<long>("getVideoSampleCount", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region Builder implementation
        public partial class Builder
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Media.Metrics.MediaItemInfo"/></returns>
            public Android.Media.Metrics.MediaItemInfo Build()
            {
                return IExecuteWithSignature<Android.Media.Metrics.MediaItemInfo>("build", "()Landroid/media/metrics/MediaItemInfo;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.Builder.html#addCodecName(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Media.Metrics.MediaItemInfo.Builder"/></returns>
            public Android.Media.Metrics.MediaItemInfo.Builder AddCodecName(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Media.Metrics.MediaItemInfo.Builder>("addCodecName", "(Ljava/lang/String;)Landroid/media/metrics/MediaItemInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.Builder.html#addDataType(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.Media.Metrics.MediaItemInfo.Builder"/></returns>
            public Android.Media.Metrics.MediaItemInfo.Builder AddDataType(long arg0)
            {
                return IExecuteWithSignature<Android.Media.Metrics.MediaItemInfo.Builder>("addDataType", "(J)Landroid/media/metrics/MediaItemInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.Builder.html#addSampleMimeType(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Media.Metrics.MediaItemInfo.Builder"/></returns>
            public Android.Media.Metrics.MediaItemInfo.Builder AddSampleMimeType(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Media.Metrics.MediaItemInfo.Builder>("addSampleMimeType", "(Ljava/lang/String;)Landroid/media/metrics/MediaItemInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.Builder.html#setAudioChannelCount(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.Metrics.MediaItemInfo.Builder"/></returns>
            public Android.Media.Metrics.MediaItemInfo.Builder SetAudioChannelCount(int arg0)
            {
                return IExecuteWithSignature<Android.Media.Metrics.MediaItemInfo.Builder>("setAudioChannelCount", "(I)Landroid/media/metrics/MediaItemInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.Builder.html#setAudioSampleCount(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.Media.Metrics.MediaItemInfo.Builder"/></returns>
            public Android.Media.Metrics.MediaItemInfo.Builder SetAudioSampleCount(long arg0)
            {
                return IExecuteWithSignature<Android.Media.Metrics.MediaItemInfo.Builder>("setAudioSampleCount", "(J)Landroid/media/metrics/MediaItemInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.Builder.html#setAudioSampleRateHz(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.Metrics.MediaItemInfo.Builder"/></returns>
            public Android.Media.Metrics.MediaItemInfo.Builder SetAudioSampleRateHz(int arg0)
            {
                return IExecuteWithSignature<Android.Media.Metrics.MediaItemInfo.Builder>("setAudioSampleRateHz", "(I)Landroid/media/metrics/MediaItemInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.Builder.html#setClipDurationMillis(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.Media.Metrics.MediaItemInfo.Builder"/></returns>
            public Android.Media.Metrics.MediaItemInfo.Builder SetClipDurationMillis(long arg0)
            {
                return IExecuteWithSignature<Android.Media.Metrics.MediaItemInfo.Builder>("setClipDurationMillis", "(J)Landroid/media/metrics/MediaItemInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.Builder.html#setContainerMimeType(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Media.Metrics.MediaItemInfo.Builder"/></returns>
            public Android.Media.Metrics.MediaItemInfo.Builder SetContainerMimeType(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Media.Metrics.MediaItemInfo.Builder>("setContainerMimeType", "(Ljava/lang/String;)Landroid/media/metrics/MediaItemInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.Builder.html#setDurationMillis(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.Media.Metrics.MediaItemInfo.Builder"/></returns>
            public Android.Media.Metrics.MediaItemInfo.Builder SetDurationMillis(long arg0)
            {
                return IExecuteWithSignature<Android.Media.Metrics.MediaItemInfo.Builder>("setDurationMillis", "(J)Landroid/media/metrics/MediaItemInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.Builder.html#setSourceType(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.Metrics.MediaItemInfo.Builder"/></returns>
            public Android.Media.Metrics.MediaItemInfo.Builder SetSourceType(int arg0)
            {
                return IExecuteWithSignature<Android.Media.Metrics.MediaItemInfo.Builder>("setSourceType", "(I)Landroid/media/metrics/MediaItemInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.Builder.html#setVideoDataSpace(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.Metrics.MediaItemInfo.Builder"/></returns>
            public Android.Media.Metrics.MediaItemInfo.Builder SetVideoDataSpace(int arg0)
            {
                return IExecuteWithSignature<Android.Media.Metrics.MediaItemInfo.Builder>("setVideoDataSpace", "(I)Landroid/media/metrics/MediaItemInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.Builder.html#setVideoFrameRate(float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            /// <returns><see cref="Android.Media.Metrics.MediaItemInfo.Builder"/></returns>
            public Android.Media.Metrics.MediaItemInfo.Builder SetVideoFrameRate(float arg0)
            {
                return IExecuteWithSignature<Android.Media.Metrics.MediaItemInfo.Builder>("setVideoFrameRate", "(F)Landroid/media/metrics/MediaItemInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.Builder.html#setVideoSampleCount(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.Media.Metrics.MediaItemInfo.Builder"/></returns>
            public Android.Media.Metrics.MediaItemInfo.Builder SetVideoSampleCount(long arg0)
            {
                return IExecuteWithSignature<Android.Media.Metrics.MediaItemInfo.Builder>("setVideoSampleCount", "(J)Landroid/media/metrics/MediaItemInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/metrics/MediaItemInfo.Builder.html#setVideoSize(android.util.Size)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Util.Size"/></param>
            /// <returns><see cref="Android.Media.Metrics.MediaItemInfo.Builder"/></returns>
            public Android.Media.Metrics.MediaItemInfo.Builder SetVideoSize(Android.Util.Size arg0)
            {
                return IExecuteWithSignature<Android.Media.Metrics.MediaItemInfo.Builder>("setVideoSize", "(Landroid/util/Size;)Landroid/media/metrics/MediaItemInfo$Builder;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
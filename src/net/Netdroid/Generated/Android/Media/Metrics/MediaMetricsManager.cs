/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.8.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media.Metrics
{
    #region MediaMetricsManager
    public partial class MediaMetricsManager
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaMetricsManager.html#INVALID_TIMESTAMP"/>
        /// </summary>
        public static long INVALID_TIMESTAMP { get { if (!_INVALID_TIMESTAMPReady) { _INVALID_TIMESTAMPContent = SGetField<long>(LocalBridgeClazz, "INVALID_TIMESTAMP"); _INVALID_TIMESTAMPReady = true; } return _INVALID_TIMESTAMPContent; } }
        private static long _INVALID_TIMESTAMPContent = default;
        private static bool _INVALID_TIMESTAMPReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaMetricsManager.html#createBundleSession()"/>
        /// </summary>
        /// <returns><see cref="Android.Media.Metrics.BundleSession"/></returns>
        public Android.Media.Metrics.BundleSession CreateBundleSession()
        {
            return IExecuteWithSignature<Android.Media.Metrics.BundleSession>("createBundleSession", "()Landroid/media/metrics/BundleSession;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaMetricsManager.html#createEditingSession()"/>
        /// </summary>
        /// <returns><see cref="Android.Media.Metrics.EditingSession"/></returns>
        public Android.Media.Metrics.EditingSession CreateEditingSession()
        {
            return IExecuteWithSignature<Android.Media.Metrics.EditingSession>("createEditingSession", "()Landroid/media/metrics/EditingSession;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaMetricsManager.html#createPlaybackSession()"/>
        /// </summary>
        /// <returns><see cref="Android.Media.Metrics.PlaybackSession"/></returns>
        public Android.Media.Metrics.PlaybackSession CreatePlaybackSession()
        {
            return IExecuteWithSignature<Android.Media.Metrics.PlaybackSession>("createPlaybackSession", "()Landroid/media/metrics/PlaybackSession;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaMetricsManager.html#createRecordingSession()"/>
        /// </summary>
        /// <returns><see cref="Android.Media.Metrics.RecordingSession"/></returns>
        public Android.Media.Metrics.RecordingSession CreateRecordingSession()
        {
            return IExecuteWithSignature<Android.Media.Metrics.RecordingSession>("createRecordingSession", "()Landroid/media/metrics/RecordingSession;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaMetricsManager.html#createTranscodingSession()"/>
        /// </summary>
        /// <returns><see cref="Android.Media.Metrics.TranscodingSession"/></returns>
        public Android.Media.Metrics.TranscodingSession CreateTranscodingSession()
        {
            return IExecuteWithSignature<Android.Media.Metrics.TranscodingSession>("createTranscodingSession", "()Landroid/media/metrics/TranscodingSession;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/metrics/MediaMetricsManager.html#releaseSessionId(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void ReleaseSessionId(Java.Lang.String arg0)
        {
            IExecuteWithSignature("releaseSessionId", "(Ljava/lang/String;)V", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
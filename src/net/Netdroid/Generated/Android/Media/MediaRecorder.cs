/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.6.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media
{
    #region MediaRecorder
    public partial class MediaRecorder : Android.Media.IAudioRouting, Android.Media.IAudioRecordingMonitor, Android.Media.IMicrophoneDirection
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#%3Cinit%3E(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        public MediaRecorder(Android.Content.Context arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Android.Media.MediaRecorder"/> to <see cref="Android.Media.AudioRouting"/>
        /// </summary>
        public static implicit operator Android.Media.AudioRouting(Android.Media.MediaRecorder t) => t.Cast<Android.Media.AudioRouting>();
        /// <summary>
        /// Converter from <see cref="Android.Media.MediaRecorder"/> to <see cref="Android.Media.AudioRecordingMonitor"/>
        /// </summary>
        public static implicit operator Android.Media.AudioRecordingMonitor(Android.Media.MediaRecorder t) => t.Cast<Android.Media.AudioRecordingMonitor>();
        /// <summary>
        /// Converter from <see cref="Android.Media.MediaRecorder"/> to <see cref="Android.Media.MicrophoneDirection"/>
        /// </summary>
        public static implicit operator Android.Media.MicrophoneDirection(Android.Media.MediaRecorder t) => t.Cast<Android.Media.MicrophoneDirection>();

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#MEDIA_ERROR_SERVER_DIED"/>
        /// </summary>
        public static int MEDIA_ERROR_SERVER_DIED { get { if (!_MEDIA_ERROR_SERVER_DIEDReady) { _MEDIA_ERROR_SERVER_DIEDContent = SGetField<int>(LocalBridgeClazz, "MEDIA_ERROR_SERVER_DIED"); _MEDIA_ERROR_SERVER_DIEDReady = true; } return _MEDIA_ERROR_SERVER_DIEDContent; } }
        private static int _MEDIA_ERROR_SERVER_DIEDContent = default;
        private static bool _MEDIA_ERROR_SERVER_DIEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#MEDIA_RECORDER_ERROR_UNKNOWN"/>
        /// </summary>
        public static int MEDIA_RECORDER_ERROR_UNKNOWN { get { if (!_MEDIA_RECORDER_ERROR_UNKNOWNReady) { _MEDIA_RECORDER_ERROR_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "MEDIA_RECORDER_ERROR_UNKNOWN"); _MEDIA_RECORDER_ERROR_UNKNOWNReady = true; } return _MEDIA_RECORDER_ERROR_UNKNOWNContent; } }
        private static int _MEDIA_RECORDER_ERROR_UNKNOWNContent = default;
        private static bool _MEDIA_RECORDER_ERROR_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#MEDIA_RECORDER_INFO_MAX_DURATION_REACHED"/>
        /// </summary>
        public static int MEDIA_RECORDER_INFO_MAX_DURATION_REACHED { get { if (!_MEDIA_RECORDER_INFO_MAX_DURATION_REACHEDReady) { _MEDIA_RECORDER_INFO_MAX_DURATION_REACHEDContent = SGetField<int>(LocalBridgeClazz, "MEDIA_RECORDER_INFO_MAX_DURATION_REACHED"); _MEDIA_RECORDER_INFO_MAX_DURATION_REACHEDReady = true; } return _MEDIA_RECORDER_INFO_MAX_DURATION_REACHEDContent; } }
        private static int _MEDIA_RECORDER_INFO_MAX_DURATION_REACHEDContent = default;
        private static bool _MEDIA_RECORDER_INFO_MAX_DURATION_REACHEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#MEDIA_RECORDER_INFO_MAX_FILESIZE_APPROACHING"/>
        /// </summary>
        public static int MEDIA_RECORDER_INFO_MAX_FILESIZE_APPROACHING { get { if (!_MEDIA_RECORDER_INFO_MAX_FILESIZE_APPROACHINGReady) { _MEDIA_RECORDER_INFO_MAX_FILESIZE_APPROACHINGContent = SGetField<int>(LocalBridgeClazz, "MEDIA_RECORDER_INFO_MAX_FILESIZE_APPROACHING"); _MEDIA_RECORDER_INFO_MAX_FILESIZE_APPROACHINGReady = true; } return _MEDIA_RECORDER_INFO_MAX_FILESIZE_APPROACHINGContent; } }
        private static int _MEDIA_RECORDER_INFO_MAX_FILESIZE_APPROACHINGContent = default;
        private static bool _MEDIA_RECORDER_INFO_MAX_FILESIZE_APPROACHINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHED"/>
        /// </summary>
        public static int MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHED { get { if (!_MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHEDReady) { _MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHEDContent = SGetField<int>(LocalBridgeClazz, "MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHED"); _MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHEDReady = true; } return _MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHEDContent; } }
        private static int _MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHEDContent = default;
        private static bool _MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#MEDIA_RECORDER_INFO_NEXT_OUTPUT_FILE_STARTED"/>
        /// </summary>
        public static int MEDIA_RECORDER_INFO_NEXT_OUTPUT_FILE_STARTED { get { if (!_MEDIA_RECORDER_INFO_NEXT_OUTPUT_FILE_STARTEDReady) { _MEDIA_RECORDER_INFO_NEXT_OUTPUT_FILE_STARTEDContent = SGetField<int>(LocalBridgeClazz, "MEDIA_RECORDER_INFO_NEXT_OUTPUT_FILE_STARTED"); _MEDIA_RECORDER_INFO_NEXT_OUTPUT_FILE_STARTEDReady = true; } return _MEDIA_RECORDER_INFO_NEXT_OUTPUT_FILE_STARTEDContent; } }
        private static int _MEDIA_RECORDER_INFO_NEXT_OUTPUT_FILE_STARTEDContent = default;
        private static bool _MEDIA_RECORDER_INFO_NEXT_OUTPUT_FILE_STARTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#MEDIA_RECORDER_INFO_UNKNOWN"/>
        /// </summary>
        public static int MEDIA_RECORDER_INFO_UNKNOWN { get { if (!_MEDIA_RECORDER_INFO_UNKNOWNReady) { _MEDIA_RECORDER_INFO_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "MEDIA_RECORDER_INFO_UNKNOWN"); _MEDIA_RECORDER_INFO_UNKNOWNReady = true; } return _MEDIA_RECORDER_INFO_UNKNOWNContent; } }
        private static int _MEDIA_RECORDER_INFO_UNKNOWNContent = default;
        private static bool _MEDIA_RECORDER_INFO_UNKNOWNReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#getAudioSourceMax()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public static int GetAudioSourceMax()
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "getAudioSourceMax", "()I");
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#getPreferredDevice()"/>
        /// </summary>
        /// <returns><see cref="Android.Media.AudioDeviceInfo"/></returns>
        public Android.Media.AudioDeviceInfo GetPreferredDevice()
        {
            return IExecuteWithSignature<Android.Media.AudioDeviceInfo>("getPreferredDevice", "()Landroid/media/AudioDeviceInfo;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#getRoutedDevice()"/>
        /// </summary>
        /// <returns><see cref="Android.Media.AudioDeviceInfo"/></returns>
        public Android.Media.AudioDeviceInfo GetRoutedDevice()
        {
            return IExecuteWithSignature<Android.Media.AudioDeviceInfo>("getRoutedDevice", "()Landroid/media/AudioDeviceInfo;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#getActiveRecordingConfiguration()"/>
        /// </summary>
        /// <returns><see cref="Android.Media.AudioRecordingConfiguration"/></returns>
        public Android.Media.AudioRecordingConfiguration GetActiveRecordingConfiguration()
        {
            return IExecuteWithSignature<Android.Media.AudioRecordingConfiguration>("getActiveRecordingConfiguration", "()Landroid/media/AudioRecordingConfiguration;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#getLogSessionId()"/>
        /// </summary>
        /// <returns><see cref="Android.Media.Metrics.LogSessionId"/></returns>
        public Android.Media.Metrics.LogSessionId GetLogSessionId()
        {
            return IExecuteWithSignature<Android.Media.Metrics.LogSessionId>("getLogSessionId", "()Landroid/media/metrics/LogSessionId;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#getMetrics()"/>
        /// </summary>
        /// <returns><see cref="Android.Os.PersistableBundle"/></returns>
        public Android.Os.PersistableBundle GetMetrics()
        {
            return IExecuteWithSignature<Android.Os.PersistableBundle>("getMetrics", "()Landroid/os/PersistableBundle;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#setPreferredDevice(android.media.AudioDeviceInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioDeviceInfo"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetPreferredDevice(Android.Media.AudioDeviceInfo arg0)
        {
            return IExecuteWithSignature<bool>("setPreferredDevice", "(Landroid/media/AudioDeviceInfo;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#setPreferredMicrophoneDirection(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetPreferredMicrophoneDirection(int arg0)
        {
            return IExecuteWithSignature<bool>("setPreferredMicrophoneDirection", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#setPreferredMicrophoneFieldDimension(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetPreferredMicrophoneFieldDimension(float arg0)
        {
            return IExecuteWithSignature<bool>("setPreferredMicrophoneFieldDimension", "(F)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#getActiveMicrophones()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public Java.Util.List<Android.Media.MicrophoneInfo> GetActiveMicrophones()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Media.MicrophoneInfo>>("getActiveMicrophones", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#getSurface()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Surface"/></returns>
        public Android.View.Surface GetSurface()
        {
            return IExecuteWithSignature<Android.View.Surface>("getSurface", "()Landroid/view/Surface;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#isPrivacySensitive()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsPrivacySensitive()
        {
            return IExecuteWithSignature<bool>("isPrivacySensitive", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#getMaxAmplitude()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public int GetMaxAmplitude()
        {
            return IExecuteWithSignature<int>("getMaxAmplitude", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#pause()"/>
        /// </summary>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public void Pause()
        {
            IExecuteWithSignature("pause", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#release()"/>
        /// </summary>
        public void Release()
        {
            IExecuteWithSignature("release", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#resume()"/>
        /// </summary>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public void Resume()
        {
            IExecuteWithSignature("resume", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#setAudioEncoder(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public void SetAudioEncoder(int arg0)
        {
            IExecuteWithSignature("setAudioEncoder", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#setAudioSource(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public void SetAudioSource(int arg0)
        {
            IExecuteWithSignature("setAudioSource", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#setCamera(android.hardware.Camera)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Hardware.Camera"/></param>
        [global::System.Obsolete()]
        public void SetCamera(Android.Hardware.Camera arg0)
        {
            IExecuteWithSignature("setCamera", "(Landroid/hardware/Camera;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#setMaxDuration(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        public void SetMaxDuration(int arg0)
        {
            IExecuteWithSignature("setMaxDuration", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#setMaxFileSize(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        public void SetMaxFileSize(long arg0)
        {
            IExecuteWithSignature("setMaxFileSize", "(J)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#setOutputFormat(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public void SetOutputFormat(int arg0)
        {
            IExecuteWithSignature("setOutputFormat", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#setPrivacySensitive(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetPrivacySensitive(bool arg0)
        {
            IExecuteWithSignature("setPrivacySensitive", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#setVideoEncoder(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public void SetVideoEncoder(int arg0)
        {
            IExecuteWithSignature("setVideoEncoder", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#setVideoFrameRate(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public void SetVideoFrameRate(int arg0)
        {
            IExecuteWithSignature("setVideoFrameRate", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#setVideoSize(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public void SetVideoSize(int arg0, int arg1)
        {
            IExecute("setVideoSize", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#setVideoSource(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public void SetVideoSource(int arg0)
        {
            IExecuteWithSignature("setVideoSource", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#start()"/>
        /// </summary>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public void Start()
        {
            IExecuteWithSignature("start", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#stop()"/>
        /// </summary>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public void Stop()
        {
            IExecuteWithSignature("stop", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#addOnRoutingChangedListener(android.media.AudioRouting.OnRoutingChangedListener,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioRouting.OnRoutingChangedListener"/></param>
        /// <param name="arg1"><see cref="Android.Os.Handler"/></param>
        public void AddOnRoutingChangedListener(Android.Media.AudioRouting.OnRoutingChangedListener arg0, Android.Os.Handler arg1)
        {
            IExecute("addOnRoutingChangedListener", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#prepare()"/>
        /// </summary>
        /// <exception cref="Java.Io.IOException"/>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public void Prepare()
        {
            IExecuteWithSignature("prepare", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#registerAudioRecordingCallback(java.util.concurrent.Executor,android.media.AudioManager.AudioRecordingCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Media.AudioManager.AudioRecordingCallback"/></param>
        public void RegisterAudioRecordingCallback(Java.Util.Concurrent.Executor arg0, Android.Media.AudioManager.AudioRecordingCallback arg1)
        {
            IExecute("registerAudioRecordingCallback", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#removeOnRoutingChangedListener(android.media.AudioRouting.OnRoutingChangedListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioRouting.OnRoutingChangedListener"/></param>
        public void RemoveOnRoutingChangedListener(Android.Media.AudioRouting.OnRoutingChangedListener arg0)
        {
            IExecuteWithSignature("removeOnRoutingChangedListener", "(Landroid/media/AudioRouting$OnRoutingChangedListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#reset()"/>
        /// </summary>
        public void Reset()
        {
            IExecuteWithSignature("reset", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#setAudioChannels(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetAudioChannels(int arg0)
        {
            IExecuteWithSignature("setAudioChannels", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#setAudioEncodingBitRate(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetAudioEncodingBitRate(int arg0)
        {
            IExecuteWithSignature("setAudioEncodingBitRate", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#setAudioProfile(android.media.EncoderProfiles.AudioProfile)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.EncoderProfiles.AudioProfile"/></param>
        public void SetAudioProfile(Android.Media.EncoderProfiles.AudioProfile arg0)
        {
            IExecuteWithSignature("setAudioProfile", "(Landroid/media/EncoderProfiles$AudioProfile;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#setAudioSamplingRate(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetAudioSamplingRate(int arg0)
        {
            IExecuteWithSignature("setAudioSamplingRate", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#setCaptureRate(double)"/>
        /// </summary>
        /// <param name="arg0"><see cref="double"/></param>
        public void SetCaptureRate(double arg0)
        {
            IExecuteWithSignature("setCaptureRate", "(D)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#setInputSurface(android.view.Surface)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Surface"/></param>
        public void SetInputSurface(Android.View.Surface arg0)
        {
            IExecuteWithSignature("setInputSurface", "(Landroid/view/Surface;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#setLocation(float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public void SetLocation(float arg0, float arg1)
        {
            IExecute("setLocation", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#setLogSessionId(android.media.metrics.LogSessionId)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.Metrics.LogSessionId"/></param>
        public void SetLogSessionId(Android.Media.Metrics.LogSessionId arg0)
        {
            IExecuteWithSignature("setLogSessionId", "(Landroid/media/metrics/LogSessionId;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#setNextOutputFile(java.io.File)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.File"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void SetNextOutputFile(Java.Io.File arg0)
        {
            IExecuteWithSignature("setNextOutputFile", "(Ljava/io/File;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#setNextOutputFile(java.io.FileDescriptor)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.FileDescriptor"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void SetNextOutputFile(Java.Io.FileDescriptor arg0)
        {
            IExecuteWithSignature("setNextOutputFile", "(Ljava/io/FileDescriptor;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#setOnErrorListener(android.media.MediaRecorder.OnErrorListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaRecorder.OnErrorListener"/></param>
        public void SetOnErrorListener(Android.Media.MediaRecorder.OnErrorListener arg0)
        {
            IExecuteWithSignature("setOnErrorListener", "(Landroid/media/MediaRecorder$OnErrorListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#setOnInfoListener(android.media.MediaRecorder.OnInfoListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaRecorder.OnInfoListener"/></param>
        public void SetOnInfoListener(Android.Media.MediaRecorder.OnInfoListener arg0)
        {
            IExecuteWithSignature("setOnInfoListener", "(Landroid/media/MediaRecorder$OnInfoListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#setOrientationHint(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetOrientationHint(int arg0)
        {
            IExecuteWithSignature("setOrientationHint", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#setOutputFile(java.io.File)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.File"/></param>
        public void SetOutputFile(Java.Io.File arg0)
        {
            IExecuteWithSignature("setOutputFile", "(Ljava/io/File;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#setOutputFile(java.io.FileDescriptor)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.FileDescriptor"/></param>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public void SetOutputFile(Java.Io.FileDescriptor arg0)
        {
            IExecuteWithSignature("setOutputFile", "(Ljava/io/FileDescriptor;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#setOutputFile(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <exception cref="Java.Lang.IllegalStateException"/>
        public void SetOutputFile(Java.Lang.String arg0)
        {
            IExecuteWithSignature("setOutputFile", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#setPreviewDisplay(android.view.Surface)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Surface"/></param>
        public void SetPreviewDisplay(Android.View.Surface arg0)
        {
            IExecuteWithSignature("setPreviewDisplay", "(Landroid/view/Surface;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#setProfile(android.media.CamcorderProfile)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.CamcorderProfile"/></param>
        public void SetProfile(Android.Media.CamcorderProfile arg0)
        {
            IExecuteWithSignature("setProfile", "(Landroid/media/CamcorderProfile;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#setVideoEncodingBitRate(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetVideoEncodingBitRate(int arg0)
        {
            IExecuteWithSignature("setVideoEncodingBitRate", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#setVideoEncodingProfileLevel(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetVideoEncodingProfileLevel(int arg0, int arg1)
        {
            IExecute("setVideoEncodingProfileLevel", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#setVideoProfile(android.media.EncoderProfiles.VideoProfile)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.EncoderProfiles.VideoProfile"/></param>
        public void SetVideoProfile(Android.Media.EncoderProfiles.VideoProfile arg0)
        {
            IExecuteWithSignature("setVideoProfile", "(Landroid/media/EncoderProfiles$VideoProfile;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.html#unregisterAudioRecordingCallback(android.media.AudioManager.AudioRecordingCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.AudioManager.AudioRecordingCallback"/></param>
        public void UnregisterAudioRecordingCallback(Android.Media.AudioManager.AudioRecordingCallback arg0)
        {
            IExecuteWithSignature("unregisterAudioRecordingCallback", "(Landroid/media/AudioManager$AudioRecordingCallback;)V", arg0);
        }

        #endregion

        #region Nested classes
        #region AudioEncoder
        public partial class AudioEncoder
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.AudioEncoder.html#AAC"/>
            /// </summary>
            public static int AAC { get { if (!_AACReady) { _AACContent = SGetField<int>(LocalBridgeClazz, "AAC"); _AACReady = true; } return _AACContent; } }
            private static int _AACContent = default;
            private static bool _AACReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.AudioEncoder.html#AAC_ELD"/>
            /// </summary>
            public static int AAC_ELD { get { if (!_AAC_ELDReady) { _AAC_ELDContent = SGetField<int>(LocalBridgeClazz, "AAC_ELD"); _AAC_ELDReady = true; } return _AAC_ELDContent; } }
            private static int _AAC_ELDContent = default;
            private static bool _AAC_ELDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.AudioEncoder.html#AMR_NB"/>
            /// </summary>
            public static int AMR_NB { get { if (!_AMR_NBReady) { _AMR_NBContent = SGetField<int>(LocalBridgeClazz, "AMR_NB"); _AMR_NBReady = true; } return _AMR_NBContent; } }
            private static int _AMR_NBContent = default;
            private static bool _AMR_NBReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.AudioEncoder.html#AMR_WB"/>
            /// </summary>
            public static int AMR_WB { get { if (!_AMR_WBReady) { _AMR_WBContent = SGetField<int>(LocalBridgeClazz, "AMR_WB"); _AMR_WBReady = true; } return _AMR_WBContent; } }
            private static int _AMR_WBContent = default;
            private static bool _AMR_WBReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.AudioEncoder.html#DEFAULT"/>
            /// </summary>
            public static int DEFAULT { get { if (!_DEFAULTReady) { _DEFAULTContent = SGetField<int>(LocalBridgeClazz, "DEFAULT"); _DEFAULTReady = true; } return _DEFAULTContent; } }
            private static int _DEFAULTContent = default;
            private static bool _DEFAULTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.AudioEncoder.html#HE_AAC"/>
            /// </summary>
            public static int HE_AAC { get { if (!_HE_AACReady) { _HE_AACContent = SGetField<int>(LocalBridgeClazz, "HE_AAC"); _HE_AACReady = true; } return _HE_AACContent; } }
            private static int _HE_AACContent = default;
            private static bool _HE_AACReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.AudioEncoder.html#OPUS"/>
            /// </summary>
            public static int OPUS { get { if (!_OPUSReady) { _OPUSContent = SGetField<int>(LocalBridgeClazz, "OPUS"); _OPUSReady = true; } return _OPUSContent; } }
            private static int _OPUSContent = default;
            private static bool _OPUSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.AudioEncoder.html#VORBIS"/>
            /// </summary>
            public static int VORBIS { get { if (!_VORBISReady) { _VORBISContent = SGetField<int>(LocalBridgeClazz, "VORBIS"); _VORBISReady = true; } return _VORBISContent; } }
            private static int _VORBISContent = default;
            private static bool _VORBISReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region AudioSource
        public partial class AudioSource
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.AudioSource.html#CAMCORDER"/>
            /// </summary>
            public static int CAMCORDER { get { if (!_CAMCORDERReady) { _CAMCORDERContent = SGetField<int>(LocalBridgeClazz, "CAMCORDER"); _CAMCORDERReady = true; } return _CAMCORDERContent; } }
            private static int _CAMCORDERContent = default;
            private static bool _CAMCORDERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.AudioSource.html#DEFAULT"/>
            /// </summary>
            public static int DEFAULT { get { if (!_DEFAULTReady) { _DEFAULTContent = SGetField<int>(LocalBridgeClazz, "DEFAULT"); _DEFAULTReady = true; } return _DEFAULTContent; } }
            private static int _DEFAULTContent = default;
            private static bool _DEFAULTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.AudioSource.html#MIC"/>
            /// </summary>
            public static int MIC { get { if (!_MICReady) { _MICContent = SGetField<int>(LocalBridgeClazz, "MIC"); _MICReady = true; } return _MICContent; } }
            private static int _MICContent = default;
            private static bool _MICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.AudioSource.html#REMOTE_SUBMIX"/>
            /// </summary>
            public static int REMOTE_SUBMIX { get { if (!_REMOTE_SUBMIXReady) { _REMOTE_SUBMIXContent = SGetField<int>(LocalBridgeClazz, "REMOTE_SUBMIX"); _REMOTE_SUBMIXReady = true; } return _REMOTE_SUBMIXContent; } }
            private static int _REMOTE_SUBMIXContent = default;
            private static bool _REMOTE_SUBMIXReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.AudioSource.html#UNPROCESSED"/>
            /// </summary>
            public static int UNPROCESSED { get { if (!_UNPROCESSEDReady) { _UNPROCESSEDContent = SGetField<int>(LocalBridgeClazz, "UNPROCESSED"); _UNPROCESSEDReady = true; } return _UNPROCESSEDContent; } }
            private static int _UNPROCESSEDContent = default;
            private static bool _UNPROCESSEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.AudioSource.html#VOICE_CALL"/>
            /// </summary>
            public static int VOICE_CALL { get { if (!_VOICE_CALLReady) { _VOICE_CALLContent = SGetField<int>(LocalBridgeClazz, "VOICE_CALL"); _VOICE_CALLReady = true; } return _VOICE_CALLContent; } }
            private static int _VOICE_CALLContent = default;
            private static bool _VOICE_CALLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.AudioSource.html#VOICE_COMMUNICATION"/>
            /// </summary>
            public static int VOICE_COMMUNICATION { get { if (!_VOICE_COMMUNICATIONReady) { _VOICE_COMMUNICATIONContent = SGetField<int>(LocalBridgeClazz, "VOICE_COMMUNICATION"); _VOICE_COMMUNICATIONReady = true; } return _VOICE_COMMUNICATIONContent; } }
            private static int _VOICE_COMMUNICATIONContent = default;
            private static bool _VOICE_COMMUNICATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.AudioSource.html#VOICE_DOWNLINK"/>
            /// </summary>
            public static int VOICE_DOWNLINK { get { if (!_VOICE_DOWNLINKReady) { _VOICE_DOWNLINKContent = SGetField<int>(LocalBridgeClazz, "VOICE_DOWNLINK"); _VOICE_DOWNLINKReady = true; } return _VOICE_DOWNLINKContent; } }
            private static int _VOICE_DOWNLINKContent = default;
            private static bool _VOICE_DOWNLINKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.AudioSource.html#VOICE_PERFORMANCE"/>
            /// </summary>
            public static int VOICE_PERFORMANCE { get { if (!_VOICE_PERFORMANCEReady) { _VOICE_PERFORMANCEContent = SGetField<int>(LocalBridgeClazz, "VOICE_PERFORMANCE"); _VOICE_PERFORMANCEReady = true; } return _VOICE_PERFORMANCEContent; } }
            private static int _VOICE_PERFORMANCEContent = default;
            private static bool _VOICE_PERFORMANCEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.AudioSource.html#VOICE_RECOGNITION"/>
            /// </summary>
            public static int VOICE_RECOGNITION { get { if (!_VOICE_RECOGNITIONReady) { _VOICE_RECOGNITIONContent = SGetField<int>(LocalBridgeClazz, "VOICE_RECOGNITION"); _VOICE_RECOGNITIONReady = true; } return _VOICE_RECOGNITIONContent; } }
            private static int _VOICE_RECOGNITIONContent = default;
            private static bool _VOICE_RECOGNITIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.AudioSource.html#VOICE_UPLINK"/>
            /// </summary>
            public static int VOICE_UPLINK { get { if (!_VOICE_UPLINKReady) { _VOICE_UPLINKContent = SGetField<int>(LocalBridgeClazz, "VOICE_UPLINK"); _VOICE_UPLINKReady = true; } return _VOICE_UPLINKContent; } }
            private static int _VOICE_UPLINKContent = default;
            private static bool _VOICE_UPLINKReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region MetricsConstants
        public partial class MetricsConstants
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.MetricsConstants.html#AUDIO_BITRATE"/>
            /// </summary>
            public static Java.Lang.String AUDIO_BITRATE { get { if (!_AUDIO_BITRATEReady) { _AUDIO_BITRATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "AUDIO_BITRATE"); _AUDIO_BITRATEReady = true; } return _AUDIO_BITRATEContent; } }
            private static Java.Lang.String _AUDIO_BITRATEContent = default;
            private static bool _AUDIO_BITRATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.MetricsConstants.html#AUDIO_CHANNELS"/>
            /// </summary>
            public static Java.Lang.String AUDIO_CHANNELS { get { if (!_AUDIO_CHANNELSReady) { _AUDIO_CHANNELSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "AUDIO_CHANNELS"); _AUDIO_CHANNELSReady = true; } return _AUDIO_CHANNELSContent; } }
            private static Java.Lang.String _AUDIO_CHANNELSContent = default;
            private static bool _AUDIO_CHANNELSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.MetricsConstants.html#AUDIO_SAMPLERATE"/>
            /// </summary>
            public static Java.Lang.String AUDIO_SAMPLERATE { get { if (!_AUDIO_SAMPLERATEReady) { _AUDIO_SAMPLERATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "AUDIO_SAMPLERATE"); _AUDIO_SAMPLERATEReady = true; } return _AUDIO_SAMPLERATEContent; } }
            private static Java.Lang.String _AUDIO_SAMPLERATEContent = default;
            private static bool _AUDIO_SAMPLERATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.MetricsConstants.html#AUDIO_TIMESCALE"/>
            /// </summary>
            public static Java.Lang.String AUDIO_TIMESCALE { get { if (!_AUDIO_TIMESCALEReady) { _AUDIO_TIMESCALEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "AUDIO_TIMESCALE"); _AUDIO_TIMESCALEReady = true; } return _AUDIO_TIMESCALEContent; } }
            private static Java.Lang.String _AUDIO_TIMESCALEContent = default;
            private static bool _AUDIO_TIMESCALEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.MetricsConstants.html#CAPTURE_FPS"/>
            /// </summary>
            public static Java.Lang.String CAPTURE_FPS { get { if (!_CAPTURE_FPSReady) { _CAPTURE_FPSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CAPTURE_FPS"); _CAPTURE_FPSReady = true; } return _CAPTURE_FPSContent; } }
            private static Java.Lang.String _CAPTURE_FPSContent = default;
            private static bool _CAPTURE_FPSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.MetricsConstants.html#CAPTURE_FPS_ENABLE"/>
            /// </summary>
            public static Java.Lang.String CAPTURE_FPS_ENABLE { get { if (!_CAPTURE_FPS_ENABLEReady) { _CAPTURE_FPS_ENABLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CAPTURE_FPS_ENABLE"); _CAPTURE_FPS_ENABLEReady = true; } return _CAPTURE_FPS_ENABLEContent; } }
            private static Java.Lang.String _CAPTURE_FPS_ENABLEContent = default;
            private static bool _CAPTURE_FPS_ENABLEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.MetricsConstants.html#FRAMERATE"/>
            /// </summary>
            public static Java.Lang.String FRAMERATE { get { if (!_FRAMERATEReady) { _FRAMERATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FRAMERATE"); _FRAMERATEReady = true; } return _FRAMERATEContent; } }
            private static Java.Lang.String _FRAMERATEContent = default;
            private static bool _FRAMERATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.MetricsConstants.html#HEIGHT"/>
            /// </summary>
            public static Java.Lang.String HEIGHT { get { if (!_HEIGHTReady) { _HEIGHTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "HEIGHT"); _HEIGHTReady = true; } return _HEIGHTContent; } }
            private static Java.Lang.String _HEIGHTContent = default;
            private static bool _HEIGHTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.MetricsConstants.html#MOVIE_TIMESCALE"/>
            /// </summary>
            public static Java.Lang.String MOVIE_TIMESCALE { get { if (!_MOVIE_TIMESCALEReady) { _MOVIE_TIMESCALEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MOVIE_TIMESCALE"); _MOVIE_TIMESCALEReady = true; } return _MOVIE_TIMESCALEContent; } }
            private static Java.Lang.String _MOVIE_TIMESCALEContent = default;
            private static bool _MOVIE_TIMESCALEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.MetricsConstants.html#ROTATION"/>
            /// </summary>
            public static Java.Lang.String ROTATION { get { if (!_ROTATIONReady) { _ROTATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ROTATION"); _ROTATIONReady = true; } return _ROTATIONContent; } }
            private static Java.Lang.String _ROTATIONContent = default;
            private static bool _ROTATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.MetricsConstants.html#VIDEO_BITRATE"/>
            /// </summary>
            public static Java.Lang.String VIDEO_BITRATE { get { if (!_VIDEO_BITRATEReady) { _VIDEO_BITRATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "VIDEO_BITRATE"); _VIDEO_BITRATEReady = true; } return _VIDEO_BITRATEContent; } }
            private static Java.Lang.String _VIDEO_BITRATEContent = default;
            private static bool _VIDEO_BITRATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.MetricsConstants.html#VIDEO_IFRAME_INTERVAL"/>
            /// </summary>
            public static Java.Lang.String VIDEO_IFRAME_INTERVAL { get { if (!_VIDEO_IFRAME_INTERVALReady) { _VIDEO_IFRAME_INTERVALContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "VIDEO_IFRAME_INTERVAL"); _VIDEO_IFRAME_INTERVALReady = true; } return _VIDEO_IFRAME_INTERVALContent; } }
            private static Java.Lang.String _VIDEO_IFRAME_INTERVALContent = default;
            private static bool _VIDEO_IFRAME_INTERVALReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.MetricsConstants.html#VIDEO_LEVEL"/>
            /// </summary>
            public static Java.Lang.String VIDEO_LEVEL { get { if (!_VIDEO_LEVELReady) { _VIDEO_LEVELContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "VIDEO_LEVEL"); _VIDEO_LEVELReady = true; } return _VIDEO_LEVELContent; } }
            private static Java.Lang.String _VIDEO_LEVELContent = default;
            private static bool _VIDEO_LEVELReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.MetricsConstants.html#VIDEO_PROFILE"/>
            /// </summary>
            public static Java.Lang.String VIDEO_PROFILE { get { if (!_VIDEO_PROFILEReady) { _VIDEO_PROFILEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "VIDEO_PROFILE"); _VIDEO_PROFILEReady = true; } return _VIDEO_PROFILEContent; } }
            private static Java.Lang.String _VIDEO_PROFILEContent = default;
            private static bool _VIDEO_PROFILEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.MetricsConstants.html#VIDEO_TIMESCALE"/>
            /// </summary>
            public static Java.Lang.String VIDEO_TIMESCALE { get { if (!_VIDEO_TIMESCALEReady) { _VIDEO_TIMESCALEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "VIDEO_TIMESCALE"); _VIDEO_TIMESCALEReady = true; } return _VIDEO_TIMESCALEContent; } }
            private static Java.Lang.String _VIDEO_TIMESCALEContent = default;
            private static bool _VIDEO_TIMESCALEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.MetricsConstants.html#WIDTH"/>
            /// </summary>
            public static Java.Lang.String WIDTH { get { if (!_WIDTHReady) { _WIDTHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIDTH"); _WIDTHReady = true; } return _WIDTHContent; } }
            private static Java.Lang.String _WIDTHContent = default;
            private static bool _WIDTHReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnErrorListener
        public partial class OnErrorListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnErrorListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onError", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Media.MediaRecorder>>>(OnErrorEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/MediaRecorder.OnErrorListener.html#onError(android.media.MediaRecorder,int,int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnError"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Media.MediaRecorder, int, int> OnOnError { get; set; } = null;

            void OnErrorEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Media.MediaRecorder>> data)
            {
                var methodToExecute = (OnOnError != null) ? OnOnError : OnError;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<int>(1));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.OnErrorListener.html#onError(android.media.MediaRecorder,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaRecorder"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            public virtual void OnError(Android.Media.MediaRecorder arg0, int arg1, int arg2)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnErrorListenerDirect
        public partial class OnErrorListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.OnErrorListener.html#onError(android.media.MediaRecorder,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaRecorder"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            public override void OnError(Android.Media.MediaRecorder arg0, int arg1, int arg2)
            {
                IExecute("onError", arg0, arg1, arg2);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnInfoListener
        public partial class OnInfoListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnInfoListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onInfo", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Media.MediaRecorder>>>(OnInfoEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/MediaRecorder.OnInfoListener.html#onInfo(android.media.MediaRecorder,int,int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnInfo"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Media.MediaRecorder, int, int> OnOnInfo { get; set; } = null;

            void OnInfoEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Media.MediaRecorder>> data)
            {
                var methodToExecute = (OnOnInfo != null) ? OnOnInfo : OnInfo;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<int>(1));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.OnInfoListener.html#onInfo(android.media.MediaRecorder,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaRecorder"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            public virtual void OnInfo(Android.Media.MediaRecorder arg0, int arg1, int arg2)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnInfoListenerDirect
        public partial class OnInfoListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.OnInfoListener.html#onInfo(android.media.MediaRecorder,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaRecorder"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            public override void OnInfo(Android.Media.MediaRecorder arg0, int arg1, int arg2)
            {
                IExecute("onInfo", arg0, arg1, arg2);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OutputFormat
        public partial class OutputFormat
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.OutputFormat.html#AAC_ADTS"/>
            /// </summary>
            public static int AAC_ADTS { get { if (!_AAC_ADTSReady) { _AAC_ADTSContent = SGetField<int>(LocalBridgeClazz, "AAC_ADTS"); _AAC_ADTSReady = true; } return _AAC_ADTSContent; } }
            private static int _AAC_ADTSContent = default;
            private static bool _AAC_ADTSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.OutputFormat.html#AMR_NB"/>
            /// </summary>
            public static int AMR_NB { get { if (!_AMR_NBReady) { _AMR_NBContent = SGetField<int>(LocalBridgeClazz, "AMR_NB"); _AMR_NBReady = true; } return _AMR_NBContent; } }
            private static int _AMR_NBContent = default;
            private static bool _AMR_NBReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.OutputFormat.html#AMR_WB"/>
            /// </summary>
            public static int AMR_WB { get { if (!_AMR_WBReady) { _AMR_WBContent = SGetField<int>(LocalBridgeClazz, "AMR_WB"); _AMR_WBReady = true; } return _AMR_WBContent; } }
            private static int _AMR_WBContent = default;
            private static bool _AMR_WBReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.OutputFormat.html#DEFAULT"/>
            /// </summary>
            public static int DEFAULT { get { if (!_DEFAULTReady) { _DEFAULTContent = SGetField<int>(LocalBridgeClazz, "DEFAULT"); _DEFAULTReady = true; } return _DEFAULTContent; } }
            private static int _DEFAULTContent = default;
            private static bool _DEFAULTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.OutputFormat.html#MPEG_2_TS"/>
            /// </summary>
            public static int MPEG_2_TS { get { if (!_MPEG_2_TSReady) { _MPEG_2_TSContent = SGetField<int>(LocalBridgeClazz, "MPEG_2_TS"); _MPEG_2_TSReady = true; } return _MPEG_2_TSContent; } }
            private static int _MPEG_2_TSContent = default;
            private static bool _MPEG_2_TSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.OutputFormat.html#MPEG_4"/>
            /// </summary>
            public static int MPEG_4 { get { if (!_MPEG_4Ready) { _MPEG_4Content = SGetField<int>(LocalBridgeClazz, "MPEG_4"); _MPEG_4Ready = true; } return _MPEG_4Content; } }
            private static int _MPEG_4Content = default;
            private static bool _MPEG_4Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.OutputFormat.html#OGG"/>
            /// </summary>
            public static int OGG { get { if (!_OGGReady) { _OGGContent = SGetField<int>(LocalBridgeClazz, "OGG"); _OGGReady = true; } return _OGGContent; } }
            private static int _OGGContent = default;
            private static bool _OGGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.OutputFormat.html#RAW_AMR"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int RAW_AMR { get { if (!_RAW_AMRReady) { _RAW_AMRContent = SGetField<int>(LocalBridgeClazz, "RAW_AMR"); _RAW_AMRReady = true; } return _RAW_AMRContent; } }
            private static int _RAW_AMRContent = default;
            private static bool _RAW_AMRReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.OutputFormat.html#THREE_GPP"/>
            /// </summary>
            public static int THREE_GPP { get { if (!_THREE_GPPReady) { _THREE_GPPContent = SGetField<int>(LocalBridgeClazz, "THREE_GPP"); _THREE_GPPReady = true; } return _THREE_GPPContent; } }
            private static int _THREE_GPPContent = default;
            private static bool _THREE_GPPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.OutputFormat.html#WEBM"/>
            /// </summary>
            public static int WEBM { get { if (!_WEBMReady) { _WEBMContent = SGetField<int>(LocalBridgeClazz, "WEBM"); _WEBMReady = true; } return _WEBMContent; } }
            private static int _WEBMContent = default;
            private static bool _WEBMReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region VideoEncoder
        public partial class VideoEncoder
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.VideoEncoder.html#AV1"/>
            /// </summary>
            public static int AV1 { get { if (!_AV1Ready) { _AV1Content = SGetField<int>(LocalBridgeClazz, "AV1"); _AV1Ready = true; } return _AV1Content; } }
            private static int _AV1Content = default;
            private static bool _AV1Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.VideoEncoder.html#DEFAULT"/>
            /// </summary>
            public static int DEFAULT { get { if (!_DEFAULTReady) { _DEFAULTContent = SGetField<int>(LocalBridgeClazz, "DEFAULT"); _DEFAULTReady = true; } return _DEFAULTContent; } }
            private static int _DEFAULTContent = default;
            private static bool _DEFAULTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.VideoEncoder.html#DOLBY_VISION"/>
            /// </summary>
            public static int DOLBY_VISION { get { if (!_DOLBY_VISIONReady) { _DOLBY_VISIONContent = SGetField<int>(LocalBridgeClazz, "DOLBY_VISION"); _DOLBY_VISIONReady = true; } return _DOLBY_VISIONContent; } }
            private static int _DOLBY_VISIONContent = default;
            private static bool _DOLBY_VISIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.VideoEncoder.html#H263"/>
            /// </summary>
            public static int H263 { get { if (!_H263Ready) { _H263Content = SGetField<int>(LocalBridgeClazz, "H263"); _H263Ready = true; } return _H263Content; } }
            private static int _H263Content = default;
            private static bool _H263Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.VideoEncoder.html#H264"/>
            /// </summary>
            public static int H264 { get { if (!_H264Ready) { _H264Content = SGetField<int>(LocalBridgeClazz, "H264"); _H264Ready = true; } return _H264Content; } }
            private static int _H264Content = default;
            private static bool _H264Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.VideoEncoder.html#HEVC"/>
            /// </summary>
            public static int HEVC { get { if (!_HEVCReady) { _HEVCContent = SGetField<int>(LocalBridgeClazz, "HEVC"); _HEVCReady = true; } return _HEVCContent; } }
            private static int _HEVCContent = default;
            private static bool _HEVCReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.VideoEncoder.html#MPEG_4_SP"/>
            /// </summary>
            public static int MPEG_4_SP { get { if (!_MPEG_4_SPReady) { _MPEG_4_SPContent = SGetField<int>(LocalBridgeClazz, "MPEG_4_SP"); _MPEG_4_SPReady = true; } return _MPEG_4_SPContent; } }
            private static int _MPEG_4_SPContent = default;
            private static bool _MPEG_4_SPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.VideoEncoder.html#VP8"/>
            /// </summary>
            public static int VP8 { get { if (!_VP8Ready) { _VP8Content = SGetField<int>(LocalBridgeClazz, "VP8"); _VP8Ready = true; } return _VP8Content; } }
            private static int _VP8Content = default;
            private static bool _VP8Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.VideoEncoder.html#VP9"/>
            /// </summary>
            public static int VP9 { get { if (!_VP9Ready) { _VP9Content = SGetField<int>(LocalBridgeClazz, "VP9"); _VP9Ready = true; } return _VP9Content; } }
            private static int _VP9Content = default;
            private static bool _VP9Ready = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region VideoSource
        public partial class VideoSource
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.VideoSource.html#CAMERA"/>
            /// </summary>
            public static int CAMERA { get { if (!_CAMERAReady) { _CAMERAContent = SGetField<int>(LocalBridgeClazz, "CAMERA"); _CAMERAReady = true; } return _CAMERAContent; } }
            private static int _CAMERAContent = default;
            private static bool _CAMERAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.VideoSource.html#DEFAULT"/>
            /// </summary>
            public static int DEFAULT { get { if (!_DEFAULTReady) { _DEFAULTContent = SGetField<int>(LocalBridgeClazz, "DEFAULT"); _DEFAULTReady = true; } return _DEFAULTContent; } }
            private static int _DEFAULTContent = default;
            private static bool _DEFAULTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRecorder.VideoSource.html#SURFACE"/>
            /// </summary>
            public static int SURFACE { get { if (!_SURFACEReady) { _SURFACEContent = SGetField<int>(LocalBridgeClazz, "SURFACE"); _SURFACEReady = true; } return _SURFACEContent; } }
            private static int _SURFACEContent = default;
            private static bool _SURFACEReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
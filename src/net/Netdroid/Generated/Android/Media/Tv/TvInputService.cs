/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media.Tv
{
    #region TvInputService declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.html"/>
    /// </summary>
    public partial class TvInputService : Android.App.Service
    {
        const string _bridgeClassName = "android.media.tv.TvInputService";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("TvInputService class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public TvInputService() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("TvInputService class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public TvInputService(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region HardwareSession declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.HardwareSession.html"/>
        /// </summary>
        public partial class HardwareSession : Android.Media.Tv.TvInputService.Session
        {
            const string _bridgeClassName = "android.media.tv.TvInputService$HardwareSession";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("HardwareSession class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public HardwareSession() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("HardwareSession class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public HardwareSession(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region RecordingSession declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.RecordingSession.html"/>
        /// </summary>
        public partial class RecordingSession : MASES.JCOBridge.C2JBridge.JVMBridgeBase<RecordingSession>
        {
            const string _bridgeClassName = "android.media.tv.TvInputService$RecordingSession";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("RecordingSession class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public RecordingSession() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("RecordingSession class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public RecordingSession(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region Session declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html"/>
        /// </summary>
        public partial class Session : Android.View.KeyEvent.Callback
        {
            const string _bridgeClassName = "android.media.tv.TvInputService$Session";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("Session class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Session() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("Session class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Session(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region TvInputService implementation
    public partial class TvInputService
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.html#PRIORITY_HINT_USE_CASE_TYPE_BACKGROUND"/>
        /// </summary>
        public static int PRIORITY_HINT_USE_CASE_TYPE_BACKGROUND { get { if (!_PRIORITY_HINT_USE_CASE_TYPE_BACKGROUNDReady) { _PRIORITY_HINT_USE_CASE_TYPE_BACKGROUNDContent = SGetField<int>(LocalBridgeClazz, "PRIORITY_HINT_USE_CASE_TYPE_BACKGROUND"); _PRIORITY_HINT_USE_CASE_TYPE_BACKGROUNDReady = true; } return _PRIORITY_HINT_USE_CASE_TYPE_BACKGROUNDContent; } }
        private static int _PRIORITY_HINT_USE_CASE_TYPE_BACKGROUNDContent = default;
        private static bool _PRIORITY_HINT_USE_CASE_TYPE_BACKGROUNDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.html#PRIORITY_HINT_USE_CASE_TYPE_LIVE"/>
        /// </summary>
        public static int PRIORITY_HINT_USE_CASE_TYPE_LIVE { get { if (!_PRIORITY_HINT_USE_CASE_TYPE_LIVEReady) { _PRIORITY_HINT_USE_CASE_TYPE_LIVEContent = SGetField<int>(LocalBridgeClazz, "PRIORITY_HINT_USE_CASE_TYPE_LIVE"); _PRIORITY_HINT_USE_CASE_TYPE_LIVEReady = true; } return _PRIORITY_HINT_USE_CASE_TYPE_LIVEContent; } }
        private static int _PRIORITY_HINT_USE_CASE_TYPE_LIVEContent = default;
        private static bool _PRIORITY_HINT_USE_CASE_TYPE_LIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.html#PRIORITY_HINT_USE_CASE_TYPE_PLAYBACK"/>
        /// </summary>
        public static int PRIORITY_HINT_USE_CASE_TYPE_PLAYBACK { get { if (!_PRIORITY_HINT_USE_CASE_TYPE_PLAYBACKReady) { _PRIORITY_HINT_USE_CASE_TYPE_PLAYBACKContent = SGetField<int>(LocalBridgeClazz, "PRIORITY_HINT_USE_CASE_TYPE_PLAYBACK"); _PRIORITY_HINT_USE_CASE_TYPE_PLAYBACKReady = true; } return _PRIORITY_HINT_USE_CASE_TYPE_PLAYBACKContent; } }
        private static int _PRIORITY_HINT_USE_CASE_TYPE_PLAYBACKContent = default;
        private static bool _PRIORITY_HINT_USE_CASE_TYPE_PLAYBACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.html#PRIORITY_HINT_USE_CASE_TYPE_RECORD"/>
        /// </summary>
        public static int PRIORITY_HINT_USE_CASE_TYPE_RECORD { get { if (!_PRIORITY_HINT_USE_CASE_TYPE_RECORDReady) { _PRIORITY_HINT_USE_CASE_TYPE_RECORDContent = SGetField<int>(LocalBridgeClazz, "PRIORITY_HINT_USE_CASE_TYPE_RECORD"); _PRIORITY_HINT_USE_CASE_TYPE_RECORDReady = true; } return _PRIORITY_HINT_USE_CASE_TYPE_RECORDContent; } }
        private static int _PRIORITY_HINT_USE_CASE_TYPE_RECORDContent = default;
        private static bool _PRIORITY_HINT_USE_CASE_TYPE_RECORDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.html#PRIORITY_HINT_USE_CASE_TYPE_SCAN"/>
        /// </summary>
        public static int PRIORITY_HINT_USE_CASE_TYPE_SCAN { get { if (!_PRIORITY_HINT_USE_CASE_TYPE_SCANReady) { _PRIORITY_HINT_USE_CASE_TYPE_SCANContent = SGetField<int>(LocalBridgeClazz, "PRIORITY_HINT_USE_CASE_TYPE_SCAN"); _PRIORITY_HINT_USE_CASE_TYPE_SCANReady = true; } return _PRIORITY_HINT_USE_CASE_TYPE_SCANContent; } }
        private static int _PRIORITY_HINT_USE_CASE_TYPE_SCANContent = default;
        private static bool _PRIORITY_HINT_USE_CASE_TYPE_SCANReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.html#SERVICE_INTERFACE"/>
        /// </summary>
        public static Java.Lang.String SERVICE_INTERFACE { get { if (!_SERVICE_INTERFACEReady) { _SERVICE_INTERFACEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SERVICE_INTERFACE"); _SERVICE_INTERFACEReady = true; } return _SERVICE_INTERFACEContent; } }
        private static Java.Lang.String _SERVICE_INTERFACEContent = default;
        private static bool _SERVICE_INTERFACEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.html#SERVICE_META_DATA"/>
        /// </summary>
        public static Java.Lang.String SERVICE_META_DATA { get { if (!_SERVICE_META_DATAReady) { _SERVICE_META_DATAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SERVICE_META_DATA"); _SERVICE_META_DATAReady = true; } return _SERVICE_META_DATAContent; } }
        private static Java.Lang.String _SERVICE_META_DATAContent = default;
        private static bool _SERVICE_META_DATAReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.html#onCreateSession(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Media.Tv.TvInputService.Session"/></returns>
        public Android.Media.Tv.TvInputService.Session OnCreateSession(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Android.Media.Tv.TvInputService.Session>("onCreateSession", "(Ljava/lang/String;)Landroid/media/tv/TvInputService$Session;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.html#onCreateRecordingSession(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Media.Tv.TvInputService.RecordingSession"/></returns>
        public Android.Media.Tv.TvInputService.RecordingSession OnCreateRecordingSession(Java.Lang.String arg0, Java.Lang.String arg1)
        {
            return IExecute<Android.Media.Tv.TvInputService.RecordingSession>("onCreateRecordingSession", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.html#onCreateRecordingSession(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Media.Tv.TvInputService.RecordingSession"/></returns>
        public Android.Media.Tv.TvInputService.RecordingSession OnCreateRecordingSession(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Android.Media.Tv.TvInputService.RecordingSession>("onCreateRecordingSession", "(Ljava/lang/String;)Landroid/media/tv/TvInputService$RecordingSession;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.html#onCreateSession(java.lang.String,java.lang.String,android.content.AttributionSource)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Android.Content.AttributionSource"/></param>
        /// <returns><see cref="Android.Media.Tv.TvInputService.Session"/></returns>
        public Android.Media.Tv.TvInputService.Session OnCreateSession(Java.Lang.String arg0, Java.Lang.String arg1, Android.Content.AttributionSource arg2)
        {
            return IExecute<Android.Media.Tv.TvInputService.Session>("onCreateSession", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.html#onCreateSession(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Media.Tv.TvInputService.Session"/></returns>
        public Android.Media.Tv.TvInputService.Session OnCreateSession(Java.Lang.String arg0, Java.Lang.String arg1)
        {
            return IExecute<Android.Media.Tv.TvInputService.Session>("onCreateSession", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region HardwareSession implementation
        public partial class HardwareSession
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.HardwareSession.html#%3Cinit%3E(android.content.Context)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.Context"/></param>
            public HardwareSession(Android.Content.Context arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.HardwareSession.html#getHardwareInputId()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetHardwareInputId()
            {
                return IExecuteWithSignature<Java.Lang.String>("getHardwareInputId", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.HardwareSession.html#onHardwareVideoAvailable()"/>
            /// </summary>
            public void OnHardwareVideoAvailable()
            {
                IExecuteWithSignature("onHardwareVideoAvailable", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.HardwareSession.html#onHardwareVideoUnavailable(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void OnHardwareVideoUnavailable(int arg0)
            {
                IExecuteWithSignature("onHardwareVideoUnavailable", "(I)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region RecordingSession implementation
        public partial class RecordingSession
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.RecordingSession.html#%3Cinit%3E(android.content.Context)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.Context"/></param>
            public RecordingSession(Android.Content.Context arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.RecordingSession.html#onRelease()"/>
            /// </summary>
            public void OnRelease()
            {
                IExecuteWithSignature("onRelease", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.RecordingSession.html#onStartRecording(android.net.Uri)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
            public void OnStartRecording(Android.Net.Uri arg0)
            {
                IExecuteWithSignature("onStartRecording", "(Landroid/net/Uri;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.RecordingSession.html#onStopRecording()"/>
            /// </summary>
            public void OnStopRecording()
            {
                IExecuteWithSignature("onStopRecording", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.RecordingSession.html#onTune(android.net.Uri)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
            public void OnTune(Android.Net.Uri arg0)
            {
                IExecuteWithSignature("onTune", "(Landroid/net/Uri;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.RecordingSession.html#notifyError(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void NotifyError(int arg0)
            {
                IExecuteWithSignature("notifyError", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.RecordingSession.html#notifyRecordingStopped(android.net.Uri)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
            public void NotifyRecordingStopped(Android.Net.Uri arg0)
            {
                IExecuteWithSignature("notifyRecordingStopped", "(Landroid/net/Uri;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.RecordingSession.html#notifyTuned(android.net.Uri)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
            public void NotifyTuned(Android.Net.Uri arg0)
            {
                IExecuteWithSignature("notifyTuned", "(Landroid/net/Uri;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.RecordingSession.html#onAppPrivateCommand(java.lang.String,android.os.Bundle)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Android.Os.Bundle"/></param>
            public void OnAppPrivateCommand(Java.Lang.String arg0, Android.Os.Bundle arg1)
            {
                IExecute("onAppPrivateCommand", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.RecordingSession.html#onPauseRecording(android.os.Bundle)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Bundle"/></param>
            public void OnPauseRecording(Android.Os.Bundle arg0)
            {
                IExecuteWithSignature("onPauseRecording", "(Landroid/os/Bundle;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.RecordingSession.html#onResumeRecording(android.os.Bundle)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Bundle"/></param>
            public void OnResumeRecording(Android.Os.Bundle arg0)
            {
                IExecuteWithSignature("onResumeRecording", "(Landroid/os/Bundle;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.RecordingSession.html#onStartRecording(android.net.Uri,android.os.Bundle)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
            /// <param name="arg1"><see cref="Android.Os.Bundle"/></param>
            public void OnStartRecording(Android.Net.Uri arg0, Android.Os.Bundle arg1)
            {
                IExecute("onStartRecording", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.RecordingSession.html#onTune(android.net.Uri,android.os.Bundle)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
            /// <param name="arg1"><see cref="Android.Os.Bundle"/></param>
            public void OnTune(Android.Net.Uri arg0, Android.Os.Bundle arg1)
            {
                IExecute("onTune", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Session implementation
        public partial class Session
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#%3Cinit%3E(android.content.Context)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.Context"/></param>
            public Session(Android.Content.Context arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#onSetSurface(android.view.Surface)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.Surface"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool OnSetSurface(Android.View.Surface arg0)
            {
                return IExecuteWithSignature<bool>("onSetSurface", "(Landroid/view/Surface;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#onTune(android.net.Uri)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool OnTune(Android.Net.Uri arg0)
            {
                return IExecuteWithSignature<bool>("onTune", "(Landroid/net/Uri;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#onRelease()"/>
            /// </summary>
            public void OnRelease()
            {
                IExecuteWithSignature("onRelease", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#onSetCaptionEnabled(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            public void OnSetCaptionEnabled(bool arg0)
            {
                IExecuteWithSignature("onSetCaptionEnabled", "(Z)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#onSetStreamVolume(float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            public void OnSetStreamVolume(float arg0)
            {
                IExecuteWithSignature("onSetStreamVolume", "(F)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#onCreateOverlayView()"/>
            /// </summary>
            /// <returns><see cref="Android.View.View"/></returns>
            public Android.View.View OnCreateOverlayView()
            {
                return IExecuteWithSignature<Android.View.View>("onCreateOverlayView", "()Landroid/view/View;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#onGenericMotionEvent(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool OnGenericMotionEvent(Android.View.MotionEvent arg0)
            {
                return IExecuteWithSignature<bool>("onGenericMotionEvent", "(Landroid/view/MotionEvent;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#onKeyDown(int,android.view.KeyEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Android.View.KeyEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool OnKeyDown(int arg0, Android.View.KeyEvent arg1)
            {
                return IExecute<bool>("onKeyDown", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#onKeyLongPress(int,android.view.KeyEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Android.View.KeyEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool OnKeyLongPress(int arg0, Android.View.KeyEvent arg1)
            {
                return IExecute<bool>("onKeyLongPress", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#onKeyMultiple(int,int,android.view.KeyEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="Android.View.KeyEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool OnKeyMultiple(int arg0, int arg1, Android.View.KeyEvent arg2)
            {
                return IExecute<bool>("onKeyMultiple", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#onKeyUp(int,android.view.KeyEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Android.View.KeyEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool OnKeyUp(int arg0, Android.View.KeyEvent arg1)
            {
                return IExecute<bool>("onKeyUp", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#onSelectAudioPresentation(int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool OnSelectAudioPresentation(int arg0, int arg1)
            {
                return IExecute<bool>("onSelectAudioPresentation", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#onSelectTrack(int,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool OnSelectTrack(int arg0, Java.Lang.String arg1)
            {
                return IExecute<bool>("onSelectTrack", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#onTouchEvent(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool OnTouchEvent(Android.View.MotionEvent arg0)
            {
                return IExecuteWithSignature<bool>("onTouchEvent", "(Landroid/view/MotionEvent;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#onTrackballEvent(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool OnTrackballEvent(Android.View.MotionEvent arg0)
            {
                return IExecuteWithSignature<bool>("onTrackballEvent", "(Landroid/view/MotionEvent;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#onTune(android.net.Uri,android.os.Bundle)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
            /// <param name="arg1"><see cref="Android.Os.Bundle"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool OnTune(Android.Net.Uri arg0, Android.Os.Bundle arg1)
            {
                return IExecute<bool>("onTune", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#onTimeShiftGetCurrentPosition()"/>
            /// </summary>
            /// <returns><see cref="long"/></returns>
            public long OnTimeShiftGetCurrentPosition()
            {
                return IExecuteWithSignature<long>("onTimeShiftGetCurrentPosition", "()J");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#onTimeShiftGetStartPosition()"/>
            /// </summary>
            /// <returns><see cref="long"/></returns>
            public long OnTimeShiftGetStartPosition()
            {
                return IExecuteWithSignature<long>("onTimeShiftGetStartPosition", "()J");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#layoutSurface(int,int,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="int"/></param>
            public void LayoutSurface(int arg0, int arg1, int arg2, int arg3)
            {
                IExecute("layoutSurface", arg0, arg1, arg2, arg3);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#notifyAdBufferConsumed(android.media.tv.AdBuffer)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.Tv.AdBuffer"/></param>
            public void NotifyAdBufferConsumed(Android.Media.Tv.AdBuffer arg0)
            {
                IExecuteWithSignature("notifyAdBufferConsumed", "(Landroid/media/tv/AdBuffer;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#notifyAdResponse(android.media.tv.AdResponse)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.Tv.AdResponse"/></param>
            public void NotifyAdResponse(Android.Media.Tv.AdResponse arg0)
            {
                IExecuteWithSignature("notifyAdResponse", "(Landroid/media/tv/AdResponse;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#notifyAitInfoUpdated(android.media.tv.AitInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.Tv.AitInfo"/></param>
            public void NotifyAitInfoUpdated(Android.Media.Tv.AitInfo arg0)
            {
                IExecuteWithSignature("notifyAitInfoUpdated", "(Landroid/media/tv/AitInfo;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#notifyAudioPresentationChanged(java.util.List)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.List"/></param>
            public void NotifyAudioPresentationChanged(Java.Util.List<Android.Media.AudioPresentation> arg0)
            {
                IExecuteWithSignature("notifyAudioPresentationChanged", "(Ljava/util/List;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#notifyAudioPresentationSelected(int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void NotifyAudioPresentationSelected(int arg0, int arg1)
            {
                IExecute("notifyAudioPresentationSelected", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#notifyAvailableSpeeds(float[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            public void NotifyAvailableSpeeds(float[] arg0)
            {
                IExecuteWithSignature("notifyAvailableSpeeds", "([F)V", new object[] { arg0 });
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#notifyBroadcastInfoResponse(android.media.tv.BroadcastInfoResponse)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.Tv.BroadcastInfoResponse"/></param>
            public void NotifyBroadcastInfoResponse(Android.Media.Tv.BroadcastInfoResponse arg0)
            {
                IExecuteWithSignature("notifyBroadcastInfoResponse", "(Landroid/media/tv/BroadcastInfoResponse;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#notifyChannelRetuned(android.net.Uri)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
            public void NotifyChannelRetuned(Android.Net.Uri arg0)
            {
                IExecuteWithSignature("notifyChannelRetuned", "(Landroid/net/Uri;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#notifyContentAllowed()"/>
            /// </summary>
            public void NotifyContentAllowed()
            {
                IExecuteWithSignature("notifyContentAllowed", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#notifyContentBlocked(android.media.tv.TvContentRating)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.Tv.TvContentRating"/></param>
            public void NotifyContentBlocked(Android.Media.Tv.TvContentRating arg0)
            {
                IExecuteWithSignature("notifyContentBlocked", "(Landroid/media/tv/TvContentRating;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#notifyCueingMessageAvailability(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            public void NotifyCueingMessageAvailability(bool arg0)
            {
                IExecuteWithSignature("notifyCueingMessageAvailability", "(Z)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#notifySignalStrength(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void NotifySignalStrength(int arg0)
            {
                IExecuteWithSignature("notifySignalStrength", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#notifyTimeShiftMode(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void NotifyTimeShiftMode(int arg0)
            {
                IExecuteWithSignature("notifyTimeShiftMode", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#notifyTimeShiftStatusChanged(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void NotifyTimeShiftStatusChanged(int arg0)
            {
                IExecuteWithSignature("notifyTimeShiftStatusChanged", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#notifyTracksChanged(java.util.List)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.List"/></param>
            public void NotifyTracksChanged(Java.Util.List<Android.Media.Tv.TvTrackInfo> arg0)
            {
                IExecuteWithSignature("notifyTracksChanged", "(Ljava/util/List;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#notifyTrackSelected(int,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            public void NotifyTrackSelected(int arg0, Java.Lang.String arg1)
            {
                IExecute("notifyTrackSelected", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#notifyTuned(android.net.Uri)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
            public void NotifyTuned(Android.Net.Uri arg0)
            {
                IExecuteWithSignature("notifyTuned", "(Landroid/net/Uri;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#notifyTvMessage(int,android.os.Bundle)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Android.Os.Bundle"/></param>
            public void NotifyTvMessage(int arg0, Android.Os.Bundle arg1)
            {
                IExecute("notifyTvMessage", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#notifyVideoAvailable()"/>
            /// </summary>
            public void NotifyVideoAvailable()
            {
                IExecuteWithSignature("notifyVideoAvailable", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#notifyVideoUnavailable(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void NotifyVideoUnavailable(int arg0)
            {
                IExecuteWithSignature("notifyVideoUnavailable", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#onAdBufferReady(android.media.tv.AdBuffer)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.Tv.AdBuffer"/></param>
            public void OnAdBufferReady(Android.Media.Tv.AdBuffer arg0)
            {
                IExecuteWithSignature("onAdBufferReady", "(Landroid/media/tv/AdBuffer;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#onAppPrivateCommand(java.lang.String,android.os.Bundle)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Android.Os.Bundle"/></param>
            public void OnAppPrivateCommand(Java.Lang.String arg0, Android.Os.Bundle arg1)
            {
                IExecute("onAppPrivateCommand", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#onOverlayViewSizeChanged(int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void OnOverlayViewSizeChanged(int arg0, int arg1)
            {
                IExecute("onOverlayViewSizeChanged", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#onRemoveBroadcastInfo(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void OnRemoveBroadcastInfo(int arg0)
            {
                IExecuteWithSignature("onRemoveBroadcastInfo", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#onRequestAd(android.media.tv.AdRequest)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.Tv.AdRequest"/></param>
            public void OnRequestAd(Android.Media.Tv.AdRequest arg0)
            {
                IExecuteWithSignature("onRequestAd", "(Landroid/media/tv/AdRequest;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#onRequestBroadcastInfo(android.media.tv.BroadcastInfoRequest)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.Tv.BroadcastInfoRequest"/></param>
            public void OnRequestBroadcastInfo(Android.Media.Tv.BroadcastInfoRequest arg0)
            {
                IExecuteWithSignature("onRequestBroadcastInfo", "(Landroid/media/tv/BroadcastInfoRequest;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#onSetInteractiveAppNotificationEnabled(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            public void OnSetInteractiveAppNotificationEnabled(bool arg0)
            {
                IExecuteWithSignature("onSetInteractiveAppNotificationEnabled", "(Z)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#onSetTvMessageEnabled(int,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="bool"/></param>
            public void OnSetTvMessageEnabled(int arg0, bool arg1)
            {
                IExecute("onSetTvMessageEnabled", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#onSurfaceChanged(int,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            public void OnSurfaceChanged(int arg0, int arg1, int arg2)
            {
                IExecute("onSurfaceChanged", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#onTimeShiftPause()"/>
            /// </summary>
            public void OnTimeShiftPause()
            {
                IExecuteWithSignature("onTimeShiftPause", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#onTimeShiftPlay(android.net.Uri)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
            public void OnTimeShiftPlay(Android.Net.Uri arg0)
            {
                IExecuteWithSignature("onTimeShiftPlay", "(Landroid/net/Uri;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#onTimeShiftResume()"/>
            /// </summary>
            public void OnTimeShiftResume()
            {
                IExecuteWithSignature("onTimeShiftResume", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#onTimeShiftSeekTo(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            public void OnTimeShiftSeekTo(long arg0)
            {
                IExecuteWithSignature("onTimeShiftSeekTo", "(J)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#onTimeShiftSetMode(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void OnTimeShiftSetMode(int arg0)
            {
                IExecuteWithSignature("onTimeShiftSetMode", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#onTimeShiftSetPlaybackParams(android.media.PlaybackParams)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.PlaybackParams"/></param>
            public void OnTimeShiftSetPlaybackParams(Android.Media.PlaybackParams arg0)
            {
                IExecuteWithSignature("onTimeShiftSetPlaybackParams", "(Landroid/media/PlaybackParams;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#onTvMessage(int,android.os.Bundle)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Android.Os.Bundle"/></param>
            public void OnTvMessage(int arg0, Android.Os.Bundle arg1)
            {
                IExecute("onTvMessage", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#onUnblockContent(android.media.tv.TvContentRating)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.Tv.TvContentRating"/></param>
            public void OnUnblockContent(Android.Media.Tv.TvContentRating arg0)
            {
                IExecuteWithSignature("onUnblockContent", "(Landroid/media/tv/TvContentRating;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#setOverlayViewEnabled(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            public void SetOverlayViewEnabled(bool arg0)
            {
                IExecuteWithSignature("setOverlayViewEnabled", "(Z)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
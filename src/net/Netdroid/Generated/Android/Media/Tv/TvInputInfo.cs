/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media.Tv
{
    #region TvInputInfo declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/media/tv/TvInputInfo.html"/>
    /// </summary>
    public partial class TvInputInfo : Android.Os.Parcelable
    {
        const string _bridgeClassName = "android.media.tv.TvInputInfo";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public TvInputInfo() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public TvInputInfo(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region Builder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputInfo.Builder.html"/>
        /// </summary>
        public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
        {
            const string _bridgeClassName = "android.media.tv.TvInputInfo$Builder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Builder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Builder(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region TvInputInfo implementation
    public partial class TvInputInfo
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputInfo.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputInfo.html#TYPE_COMPONENT"/>
        /// </summary>
        public static int TYPE_COMPONENT { get { if (!_TYPE_COMPONENTReady) { _TYPE_COMPONENTContent = SGetField<int>(LocalBridgeClazz, "TYPE_COMPONENT"); _TYPE_COMPONENTReady = true; } return _TYPE_COMPONENTContent; } }
        private static int _TYPE_COMPONENTContent = default;
        private static bool _TYPE_COMPONENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputInfo.html#TYPE_COMPOSITE"/>
        /// </summary>
        public static int TYPE_COMPOSITE { get { if (!_TYPE_COMPOSITEReady) { _TYPE_COMPOSITEContent = SGetField<int>(LocalBridgeClazz, "TYPE_COMPOSITE"); _TYPE_COMPOSITEReady = true; } return _TYPE_COMPOSITEContent; } }
        private static int _TYPE_COMPOSITEContent = default;
        private static bool _TYPE_COMPOSITEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputInfo.html#TYPE_DISPLAY_PORT"/>
        /// </summary>
        public static int TYPE_DISPLAY_PORT { get { if (!_TYPE_DISPLAY_PORTReady) { _TYPE_DISPLAY_PORTContent = SGetField<int>(LocalBridgeClazz, "TYPE_DISPLAY_PORT"); _TYPE_DISPLAY_PORTReady = true; } return _TYPE_DISPLAY_PORTContent; } }
        private static int _TYPE_DISPLAY_PORTContent = default;
        private static bool _TYPE_DISPLAY_PORTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputInfo.html#TYPE_DVI"/>
        /// </summary>
        public static int TYPE_DVI { get { if (!_TYPE_DVIReady) { _TYPE_DVIContent = SGetField<int>(LocalBridgeClazz, "TYPE_DVI"); _TYPE_DVIReady = true; } return _TYPE_DVIContent; } }
        private static int _TYPE_DVIContent = default;
        private static bool _TYPE_DVIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputInfo.html#TYPE_HDMI"/>
        /// </summary>
        public static int TYPE_HDMI { get { if (!_TYPE_HDMIReady) { _TYPE_HDMIContent = SGetField<int>(LocalBridgeClazz, "TYPE_HDMI"); _TYPE_HDMIReady = true; } return _TYPE_HDMIContent; } }
        private static int _TYPE_HDMIContent = default;
        private static bool _TYPE_HDMIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputInfo.html#TYPE_OTHER"/>
        /// </summary>
        public static int TYPE_OTHER { get { if (!_TYPE_OTHERReady) { _TYPE_OTHERContent = SGetField<int>(LocalBridgeClazz, "TYPE_OTHER"); _TYPE_OTHERReady = true; } return _TYPE_OTHERContent; } }
        private static int _TYPE_OTHERContent = default;
        private static bool _TYPE_OTHERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputInfo.html#TYPE_SCART"/>
        /// </summary>
        public static int TYPE_SCART { get { if (!_TYPE_SCARTReady) { _TYPE_SCARTContent = SGetField<int>(LocalBridgeClazz, "TYPE_SCART"); _TYPE_SCARTReady = true; } return _TYPE_SCARTContent; } }
        private static int _TYPE_SCARTContent = default;
        private static bool _TYPE_SCARTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputInfo.html#TYPE_SVIDEO"/>
        /// </summary>
        public static int TYPE_SVIDEO { get { if (!_TYPE_SVIDEOReady) { _TYPE_SVIDEOContent = SGetField<int>(LocalBridgeClazz, "TYPE_SVIDEO"); _TYPE_SVIDEOReady = true; } return _TYPE_SVIDEOContent; } }
        private static int _TYPE_SVIDEOContent = default;
        private static bool _TYPE_SVIDEOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputInfo.html#TYPE_TUNER"/>
        /// </summary>
        public static int TYPE_TUNER { get { if (!_TYPE_TUNERReady) { _TYPE_TUNERContent = SGetField<int>(LocalBridgeClazz, "TYPE_TUNER"); _TYPE_TUNERReady = true; } return _TYPE_TUNERContent; } }
        private static int _TYPE_TUNERContent = default;
        private static bool _TYPE_TUNERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputInfo.html#TYPE_VGA"/>
        /// </summary>
        public static int TYPE_VGA { get { if (!_TYPE_VGAReady) { _TYPE_VGAContent = SGetField<int>(LocalBridgeClazz, "TYPE_VGA"); _TYPE_VGAReady = true; } return _TYPE_VGAContent; } }
        private static int _TYPE_VGAContent = default;
        private static bool _TYPE_VGAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputInfo.html#EXTRA_INPUT_ID"/>
        /// </summary>
        public static Java.Lang.String EXTRA_INPUT_ID { get { if (!_EXTRA_INPUT_IDReady) { _EXTRA_INPUT_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_INPUT_ID"); _EXTRA_INPUT_IDReady = true; } return _EXTRA_INPUT_IDContent; } }
        private static Java.Lang.String _EXTRA_INPUT_IDContent = default;
        private static bool _EXTRA_INPUT_IDReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputInfo.html#createSettingsIntent()"/>
        /// </summary>
        /// <returns><see cref="Android.Content.Intent"/></returns>
        [global::System.Obsolete()]
        public Android.Content.Intent CreateSettingsIntent()
        {
            return IExecuteWithSignature<Android.Content.Intent>("createSettingsIntent", "()Landroid/content/Intent;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputInfo.html#createSetupIntent()"/>
        /// </summary>
        /// <returns><see cref="Android.Content.Intent"/></returns>
        public Android.Content.Intent CreateSetupIntent()
        {
            return IExecuteWithSignature<Android.Content.Intent>("createSetupIntent", "()Landroid/content/Intent;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputInfo.html#getServiceInfo()"/>
        /// </summary>
        /// <returns><see cref="Android.Content.Pm.ServiceInfo"/></returns>
        public Android.Content.Pm.ServiceInfo GetServiceInfo()
        {
            return IExecuteWithSignature<Android.Content.Pm.ServiceInfo>("getServiceInfo", "()Landroid/content/pm/ServiceInfo;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputInfo.html#loadIcon(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        public Android.Graphics.Drawable.Drawable LoadIcon(Android.Content.Context arg0)
        {
            return IExecuteWithSignature<Android.Graphics.Drawable.Drawable>("loadIcon", "(Landroid/content/Context;)Landroid/graphics/drawable/Drawable;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputInfo.html#getExtras()"/>
        /// </summary>
        /// <returns><see cref="Android.Os.Bundle"/></returns>
        public Android.Os.Bundle GetExtras()
        {
            return IExecuteWithSignature<Android.Os.Bundle>("getExtras", "()Landroid/os/Bundle;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputInfo.html#canPauseRecording()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool CanPauseRecording()
        {
            return IExecuteWithSignature<bool>("canPauseRecording", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputInfo.html#canRecord()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool CanRecord()
        {
            return IExecuteWithSignature<bool>("canRecord", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputInfo.html#isHidden(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsHidden(Android.Content.Context arg0)
        {
            return IExecuteWithSignature<bool>("isHidden", "(Landroid/content/Context;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputInfo.html#isPassthroughInput()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsPassthroughInput()
        {
            return IExecuteWithSignature<bool>("isPassthroughInput", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputInfo.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputInfo.html#getTunerCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetTunerCount()
        {
            return IExecuteWithSignature<int>("getTunerCount", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputInfo.html#getType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetType()
        {
            return IExecuteWithSignature<int>("getType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputInfo.html#loadCustomLabel(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence LoadCustomLabel(Android.Content.Context arg0)
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("loadCustomLabel", "(Landroid/content/Context;)Ljava/lang/CharSequence;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputInfo.html#loadLabel(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence LoadLabel(Android.Content.Context arg0)
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("loadLabel", "(Landroid/content/Context;)Ljava/lang/CharSequence;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputInfo.html#getId()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetId()
        {
            return IExecuteWithSignature<Java.Lang.String>("getId", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputInfo.html#getParentId()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetParentId()
        {
            return IExecuteWithSignature<Java.Lang.String>("getParentId", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputInfo.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region Builder implementation
        public partial class Builder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputInfo.Builder.html#%3Cinit%3E(android.content.Context,android.content.ComponentName)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.Context"/></param>
            /// <param name="arg1"><see cref="Android.Content.ComponentName"/></param>
            public Builder(Android.Content.Context arg0, Android.Content.ComponentName arg1)
                : base(arg0, arg1)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputInfo.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Media.Tv.TvInputInfo"/></returns>
            public Android.Media.Tv.TvInputInfo Build()
            {
                return IExecuteWithSignature<Android.Media.Tv.TvInputInfo>("build", "()Landroid/media/tv/TvInputInfo;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputInfo.Builder.html#setCanPauseRecording(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Media.Tv.TvInputInfo.Builder"/></returns>
            public Android.Media.Tv.TvInputInfo.Builder SetCanPauseRecording(bool arg0)
            {
                return IExecuteWithSignature<Android.Media.Tv.TvInputInfo.Builder>("setCanPauseRecording", "(Z)Landroid/media/tv/TvInputInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputInfo.Builder.html#setCanRecord(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Media.Tv.TvInputInfo.Builder"/></returns>
            public Android.Media.Tv.TvInputInfo.Builder SetCanRecord(bool arg0)
            {
                return IExecuteWithSignature<Android.Media.Tv.TvInputInfo.Builder>("setCanRecord", "(Z)Landroid/media/tv/TvInputInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputInfo.Builder.html#setExtras(android.os.Bundle)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Bundle"/></param>
            /// <returns><see cref="Android.Media.Tv.TvInputInfo.Builder"/></returns>
            public Android.Media.Tv.TvInputInfo.Builder SetExtras(Android.Os.Bundle arg0)
            {
                return IExecuteWithSignature<Android.Media.Tv.TvInputInfo.Builder>("setExtras", "(Landroid/os/Bundle;)Landroid/media/tv/TvInputInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputInfo.Builder.html#setTunerCount(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.Tv.TvInputInfo.Builder"/></returns>
            public Android.Media.Tv.TvInputInfo.Builder SetTunerCount(int arg0)
            {
                return IExecuteWithSignature<Android.Media.Tv.TvInputInfo.Builder>("setTunerCount", "(I)Landroid/media/tv/TvInputInfo$Builder;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
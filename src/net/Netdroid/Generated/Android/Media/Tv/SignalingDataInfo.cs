/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media.Tv
{
    #region SignalingDataInfo declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/media/tv/SignalingDataInfo.html"/>
    /// </summary>
    public partial class SignalingDataInfo : Android.Os.Parcelable
    {
        const string _bridgeClassName = "android.media.tv.SignalingDataInfo";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public SignalingDataInfo() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public SignalingDataInfo(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public SignalingDataInfo(params object[] args) : base(args) { }
    
        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region SignalingDataInfo implementation
    public partial class SignalingDataInfo
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/SignalingDataInfo.html#%3Cinit%3E(java.lang.String,java.lang.String,int,int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="Java.Lang.String"/></param>
        public SignalingDataInfo(Java.Lang.String arg0, Java.Lang.String arg1, int arg2, int arg3, Java.Lang.String arg4)
            : base(arg0, arg1, arg2, arg3, arg4)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/SignalingDataInfo.html#%3Cinit%3E(java.lang.String,java.lang.String,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public SignalingDataInfo(Java.Lang.String arg0, Java.Lang.String arg1, int arg2, int arg3)
            : base(arg0, arg1, arg2, arg3)
        {
        }
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/SignalingDataInfo.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/SignalingDataInfo.html#LLS_NO_GROUP_ID"/>
        /// </summary>
        public static int LLS_NO_GROUP_ID { get { if (!_LLS_NO_GROUP_IDReady) { _LLS_NO_GROUP_IDContent = SGetField<int>(LocalBridgeClazz, "LLS_NO_GROUP_ID"); _LLS_NO_GROUP_IDReady = true; } return _LLS_NO_GROUP_IDContent; } }
        private static int _LLS_NO_GROUP_IDContent = default;
        private static bool _LLS_NO_GROUP_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/SignalingDataInfo.html#CONTENT_ENCODING_BASE64"/>
        /// </summary>
        public static Java.Lang.String CONTENT_ENCODING_BASE64 { get { if (!_CONTENT_ENCODING_BASE64Ready) { _CONTENT_ENCODING_BASE64Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_ENCODING_BASE64"); _CONTENT_ENCODING_BASE64Ready = true; } return _CONTENT_ENCODING_BASE64Content; } }
        private static Java.Lang.String _CONTENT_ENCODING_BASE64Content = default;
        private static bool _CONTENT_ENCODING_BASE64Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/SignalingDataInfo.html#CONTENT_ENCODING_UTF_8"/>
        /// </summary>
        public static Java.Lang.String CONTENT_ENCODING_UTF_8 { get { if (!_CONTENT_ENCODING_UTF_8Ready) { _CONTENT_ENCODING_UTF_8Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_ENCODING_UTF_8"); _CONTENT_ENCODING_UTF_8Ready = true; } return _CONTENT_ENCODING_UTF_8Content; } }
        private static Java.Lang.String _CONTENT_ENCODING_UTF_8Content = default;
        private static bool _CONTENT_ENCODING_UTF_8Ready = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/SignalingDataInfo.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/SignalingDataInfo.html#getGroup()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetGroup()
        {
            return IExecuteWithSignature<int>("getGroup", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/SignalingDataInfo.html#getVersion()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetVersion()
        {
            return IExecuteWithSignature<int>("getVersion", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/SignalingDataInfo.html#getEncoding()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetEncoding()
        {
            return IExecuteWithSignature<Java.Lang.String>("getEncoding", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/SignalingDataInfo.html#getSignalingDataType()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetSignalingDataType()
        {
            return IExecuteWithSignature<Java.Lang.String>("getSignalingDataType", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/SignalingDataInfo.html#getTable()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetTable()
        {
            return IExecuteWithSignature<Java.Lang.String>("getTable", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/SignalingDataInfo.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
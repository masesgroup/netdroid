/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media.Tv
{
    #region TvInputManager declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html"/>
    /// </summary>
    public partial class TvInputManager : MASES.JCOBridge.C2JBridge.JVMBridgeBase<TvInputManager>
    {
        const string _bridgeClassName = "android.media.tv.TvInputManager";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public TvInputManager() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public TvInputManager(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region TvInputCallback declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.TvInputCallback.html"/>
        /// </summary>
        public partial class TvInputCallback : MASES.JCOBridge.C2JBridge.JVMBridgeBase<TvInputCallback>
        {
            const string _bridgeClassName = "android.media.tv.TvInputManager$TvInputCallback";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("TvInputCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public TvInputCallback() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("TvInputCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public TvInputCallback(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region TvInputManager implementation
    public partial class TvInputManager
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#BROADCAST_INFO_STREAM_EVENT"/>
        /// </summary>
        public static int BROADCAST_INFO_STREAM_EVENT { get { if (!_BROADCAST_INFO_STREAM_EVENTReady) { _BROADCAST_INFO_STREAM_EVENTContent = SGetField<int>(LocalBridgeClazz, "BROADCAST_INFO_STREAM_EVENT"); _BROADCAST_INFO_STREAM_EVENTReady = true; } return _BROADCAST_INFO_STREAM_EVENTContent; } }
        private static int _BROADCAST_INFO_STREAM_EVENTContent = default;
        private static bool _BROADCAST_INFO_STREAM_EVENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#BROADCAST_INFO_TYPE_COMMAND"/>
        /// </summary>
        public static int BROADCAST_INFO_TYPE_COMMAND { get { if (!_BROADCAST_INFO_TYPE_COMMANDReady) { _BROADCAST_INFO_TYPE_COMMANDContent = SGetField<int>(LocalBridgeClazz, "BROADCAST_INFO_TYPE_COMMAND"); _BROADCAST_INFO_TYPE_COMMANDReady = true; } return _BROADCAST_INFO_TYPE_COMMANDContent; } }
        private static int _BROADCAST_INFO_TYPE_COMMANDContent = default;
        private static bool _BROADCAST_INFO_TYPE_COMMANDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#BROADCAST_INFO_TYPE_DSMCC"/>
        /// </summary>
        public static int BROADCAST_INFO_TYPE_DSMCC { get { if (!_BROADCAST_INFO_TYPE_DSMCCReady) { _BROADCAST_INFO_TYPE_DSMCCContent = SGetField<int>(LocalBridgeClazz, "BROADCAST_INFO_TYPE_DSMCC"); _BROADCAST_INFO_TYPE_DSMCCReady = true; } return _BROADCAST_INFO_TYPE_DSMCCContent; } }
        private static int _BROADCAST_INFO_TYPE_DSMCCContent = default;
        private static bool _BROADCAST_INFO_TYPE_DSMCCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#BROADCAST_INFO_TYPE_PES"/>
        /// </summary>
        public static int BROADCAST_INFO_TYPE_PES { get { if (!_BROADCAST_INFO_TYPE_PESReady) { _BROADCAST_INFO_TYPE_PESContent = SGetField<int>(LocalBridgeClazz, "BROADCAST_INFO_TYPE_PES"); _BROADCAST_INFO_TYPE_PESReady = true; } return _BROADCAST_INFO_TYPE_PESContent; } }
        private static int _BROADCAST_INFO_TYPE_PESContent = default;
        private static bool _BROADCAST_INFO_TYPE_PESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#BROADCAST_INFO_TYPE_SECTION"/>
        /// </summary>
        public static int BROADCAST_INFO_TYPE_SECTION { get { if (!_BROADCAST_INFO_TYPE_SECTIONReady) { _BROADCAST_INFO_TYPE_SECTIONContent = SGetField<int>(LocalBridgeClazz, "BROADCAST_INFO_TYPE_SECTION"); _BROADCAST_INFO_TYPE_SECTIONReady = true; } return _BROADCAST_INFO_TYPE_SECTIONContent; } }
        private static int _BROADCAST_INFO_TYPE_SECTIONContent = default;
        private static bool _BROADCAST_INFO_TYPE_SECTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#BROADCAST_INFO_TYPE_TABLE"/>
        /// </summary>
        public static int BROADCAST_INFO_TYPE_TABLE { get { if (!_BROADCAST_INFO_TYPE_TABLEReady) { _BROADCAST_INFO_TYPE_TABLEContent = SGetField<int>(LocalBridgeClazz, "BROADCAST_INFO_TYPE_TABLE"); _BROADCAST_INFO_TYPE_TABLEReady = true; } return _BROADCAST_INFO_TYPE_TABLEContent; } }
        private static int _BROADCAST_INFO_TYPE_TABLEContent = default;
        private static bool _BROADCAST_INFO_TYPE_TABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#BROADCAST_INFO_TYPE_TIMELINE"/>
        /// </summary>
        public static int BROADCAST_INFO_TYPE_TIMELINE { get { if (!_BROADCAST_INFO_TYPE_TIMELINEReady) { _BROADCAST_INFO_TYPE_TIMELINEContent = SGetField<int>(LocalBridgeClazz, "BROADCAST_INFO_TYPE_TIMELINE"); _BROADCAST_INFO_TYPE_TIMELINEReady = true; } return _BROADCAST_INFO_TYPE_TIMELINEContent; } }
        private static int _BROADCAST_INFO_TYPE_TIMELINEContent = default;
        private static bool _BROADCAST_INFO_TYPE_TIMELINEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#BROADCAST_INFO_TYPE_TS"/>
        /// </summary>
        public static int BROADCAST_INFO_TYPE_TS { get { if (!_BROADCAST_INFO_TYPE_TSReady) { _BROADCAST_INFO_TYPE_TSContent = SGetField<int>(LocalBridgeClazz, "BROADCAST_INFO_TYPE_TS"); _BROADCAST_INFO_TYPE_TSReady = true; } return _BROADCAST_INFO_TYPE_TSContent; } }
        private static int _BROADCAST_INFO_TYPE_TSContent = default;
        private static bool _BROADCAST_INFO_TYPE_TSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#INPUT_STATE_CONNECTED"/>
        /// </summary>
        public static int INPUT_STATE_CONNECTED { get { if (!_INPUT_STATE_CONNECTEDReady) { _INPUT_STATE_CONNECTEDContent = SGetField<int>(LocalBridgeClazz, "INPUT_STATE_CONNECTED"); _INPUT_STATE_CONNECTEDReady = true; } return _INPUT_STATE_CONNECTEDContent; } }
        private static int _INPUT_STATE_CONNECTEDContent = default;
        private static bool _INPUT_STATE_CONNECTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#INPUT_STATE_CONNECTED_STANDBY"/>
        /// </summary>
        public static int INPUT_STATE_CONNECTED_STANDBY { get { if (!_INPUT_STATE_CONNECTED_STANDBYReady) { _INPUT_STATE_CONNECTED_STANDBYContent = SGetField<int>(LocalBridgeClazz, "INPUT_STATE_CONNECTED_STANDBY"); _INPUT_STATE_CONNECTED_STANDBYReady = true; } return _INPUT_STATE_CONNECTED_STANDBYContent; } }
        private static int _INPUT_STATE_CONNECTED_STANDBYContent = default;
        private static bool _INPUT_STATE_CONNECTED_STANDBYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#INPUT_STATE_DISCONNECTED"/>
        /// </summary>
        public static int INPUT_STATE_DISCONNECTED { get { if (!_INPUT_STATE_DISCONNECTEDReady) { _INPUT_STATE_DISCONNECTEDContent = SGetField<int>(LocalBridgeClazz, "INPUT_STATE_DISCONNECTED"); _INPUT_STATE_DISCONNECTEDReady = true; } return _INPUT_STATE_DISCONNECTEDContent; } }
        private static int _INPUT_STATE_DISCONNECTEDContent = default;
        private static bool _INPUT_STATE_DISCONNECTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#RECORDING_ERROR_INSUFFICIENT_SPACE"/>
        /// </summary>
        public static int RECORDING_ERROR_INSUFFICIENT_SPACE { get { if (!_RECORDING_ERROR_INSUFFICIENT_SPACEReady) { _RECORDING_ERROR_INSUFFICIENT_SPACEContent = SGetField<int>(LocalBridgeClazz, "RECORDING_ERROR_INSUFFICIENT_SPACE"); _RECORDING_ERROR_INSUFFICIENT_SPACEReady = true; } return _RECORDING_ERROR_INSUFFICIENT_SPACEContent; } }
        private static int _RECORDING_ERROR_INSUFFICIENT_SPACEContent = default;
        private static bool _RECORDING_ERROR_INSUFFICIENT_SPACEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#RECORDING_ERROR_RESOURCE_BUSY"/>
        /// </summary>
        public static int RECORDING_ERROR_RESOURCE_BUSY { get { if (!_RECORDING_ERROR_RESOURCE_BUSYReady) { _RECORDING_ERROR_RESOURCE_BUSYContent = SGetField<int>(LocalBridgeClazz, "RECORDING_ERROR_RESOURCE_BUSY"); _RECORDING_ERROR_RESOURCE_BUSYReady = true; } return _RECORDING_ERROR_RESOURCE_BUSYContent; } }
        private static int _RECORDING_ERROR_RESOURCE_BUSYContent = default;
        private static bool _RECORDING_ERROR_RESOURCE_BUSYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#RECORDING_ERROR_UNKNOWN"/>
        /// </summary>
        public static int RECORDING_ERROR_UNKNOWN { get { if (!_RECORDING_ERROR_UNKNOWNReady) { _RECORDING_ERROR_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "RECORDING_ERROR_UNKNOWN"); _RECORDING_ERROR_UNKNOWNReady = true; } return _RECORDING_ERROR_UNKNOWNContent; } }
        private static int _RECORDING_ERROR_UNKNOWNContent = default;
        private static bool _RECORDING_ERROR_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#SIGNAL_STRENGTH_LOST"/>
        /// </summary>
        public static int SIGNAL_STRENGTH_LOST { get { if (!_SIGNAL_STRENGTH_LOSTReady) { _SIGNAL_STRENGTH_LOSTContent = SGetField<int>(LocalBridgeClazz, "SIGNAL_STRENGTH_LOST"); _SIGNAL_STRENGTH_LOSTReady = true; } return _SIGNAL_STRENGTH_LOSTContent; } }
        private static int _SIGNAL_STRENGTH_LOSTContent = default;
        private static bool _SIGNAL_STRENGTH_LOSTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#SIGNAL_STRENGTH_STRONG"/>
        /// </summary>
        public static int SIGNAL_STRENGTH_STRONG { get { if (!_SIGNAL_STRENGTH_STRONGReady) { _SIGNAL_STRENGTH_STRONGContent = SGetField<int>(LocalBridgeClazz, "SIGNAL_STRENGTH_STRONG"); _SIGNAL_STRENGTH_STRONGReady = true; } return _SIGNAL_STRENGTH_STRONGContent; } }
        private static int _SIGNAL_STRENGTH_STRONGContent = default;
        private static bool _SIGNAL_STRENGTH_STRONGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#SIGNAL_STRENGTH_WEAK"/>
        /// </summary>
        public static int SIGNAL_STRENGTH_WEAK { get { if (!_SIGNAL_STRENGTH_WEAKReady) { _SIGNAL_STRENGTH_WEAKContent = SGetField<int>(LocalBridgeClazz, "SIGNAL_STRENGTH_WEAK"); _SIGNAL_STRENGTH_WEAKReady = true; } return _SIGNAL_STRENGTH_WEAKContent; } }
        private static int _SIGNAL_STRENGTH_WEAKContent = default;
        private static bool _SIGNAL_STRENGTH_WEAKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#TIME_SHIFT_MODE_AUTO"/>
        /// </summary>
        public static int TIME_SHIFT_MODE_AUTO { get { if (!_TIME_SHIFT_MODE_AUTOReady) { _TIME_SHIFT_MODE_AUTOContent = SGetField<int>(LocalBridgeClazz, "TIME_SHIFT_MODE_AUTO"); _TIME_SHIFT_MODE_AUTOReady = true; } return _TIME_SHIFT_MODE_AUTOContent; } }
        private static int _TIME_SHIFT_MODE_AUTOContent = default;
        private static bool _TIME_SHIFT_MODE_AUTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#TIME_SHIFT_MODE_LOCAL"/>
        /// </summary>
        public static int TIME_SHIFT_MODE_LOCAL { get { if (!_TIME_SHIFT_MODE_LOCALReady) { _TIME_SHIFT_MODE_LOCALContent = SGetField<int>(LocalBridgeClazz, "TIME_SHIFT_MODE_LOCAL"); _TIME_SHIFT_MODE_LOCALReady = true; } return _TIME_SHIFT_MODE_LOCALContent; } }
        private static int _TIME_SHIFT_MODE_LOCALContent = default;
        private static bool _TIME_SHIFT_MODE_LOCALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#TIME_SHIFT_MODE_NETWORK"/>
        /// </summary>
        public static int TIME_SHIFT_MODE_NETWORK { get { if (!_TIME_SHIFT_MODE_NETWORKReady) { _TIME_SHIFT_MODE_NETWORKContent = SGetField<int>(LocalBridgeClazz, "TIME_SHIFT_MODE_NETWORK"); _TIME_SHIFT_MODE_NETWORKReady = true; } return _TIME_SHIFT_MODE_NETWORKContent; } }
        private static int _TIME_SHIFT_MODE_NETWORKContent = default;
        private static bool _TIME_SHIFT_MODE_NETWORKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#TIME_SHIFT_MODE_OFF"/>
        /// </summary>
        public static int TIME_SHIFT_MODE_OFF { get { if (!_TIME_SHIFT_MODE_OFFReady) { _TIME_SHIFT_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "TIME_SHIFT_MODE_OFF"); _TIME_SHIFT_MODE_OFFReady = true; } return _TIME_SHIFT_MODE_OFFContent; } }
        private static int _TIME_SHIFT_MODE_OFFContent = default;
        private static bool _TIME_SHIFT_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#TIME_SHIFT_STATUS_AVAILABLE"/>
        /// </summary>
        public static int TIME_SHIFT_STATUS_AVAILABLE { get { if (!_TIME_SHIFT_STATUS_AVAILABLEReady) { _TIME_SHIFT_STATUS_AVAILABLEContent = SGetField<int>(LocalBridgeClazz, "TIME_SHIFT_STATUS_AVAILABLE"); _TIME_SHIFT_STATUS_AVAILABLEReady = true; } return _TIME_SHIFT_STATUS_AVAILABLEContent; } }
        private static int _TIME_SHIFT_STATUS_AVAILABLEContent = default;
        private static bool _TIME_SHIFT_STATUS_AVAILABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#TIME_SHIFT_STATUS_UNAVAILABLE"/>
        /// </summary>
        public static int TIME_SHIFT_STATUS_UNAVAILABLE { get { if (!_TIME_SHIFT_STATUS_UNAVAILABLEReady) { _TIME_SHIFT_STATUS_UNAVAILABLEContent = SGetField<int>(LocalBridgeClazz, "TIME_SHIFT_STATUS_UNAVAILABLE"); _TIME_SHIFT_STATUS_UNAVAILABLEReady = true; } return _TIME_SHIFT_STATUS_UNAVAILABLEContent; } }
        private static int _TIME_SHIFT_STATUS_UNAVAILABLEContent = default;
        private static bool _TIME_SHIFT_STATUS_UNAVAILABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#TIME_SHIFT_STATUS_UNKNOWN"/>
        /// </summary>
        public static int TIME_SHIFT_STATUS_UNKNOWN { get { if (!_TIME_SHIFT_STATUS_UNKNOWNReady) { _TIME_SHIFT_STATUS_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "TIME_SHIFT_STATUS_UNKNOWN"); _TIME_SHIFT_STATUS_UNKNOWNReady = true; } return _TIME_SHIFT_STATUS_UNKNOWNContent; } }
        private static int _TIME_SHIFT_STATUS_UNKNOWNContent = default;
        private static bool _TIME_SHIFT_STATUS_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#TIME_SHIFT_STATUS_UNSUPPORTED"/>
        /// </summary>
        public static int TIME_SHIFT_STATUS_UNSUPPORTED { get { if (!_TIME_SHIFT_STATUS_UNSUPPORTEDReady) { _TIME_SHIFT_STATUS_UNSUPPORTEDContent = SGetField<int>(LocalBridgeClazz, "TIME_SHIFT_STATUS_UNSUPPORTED"); _TIME_SHIFT_STATUS_UNSUPPORTEDReady = true; } return _TIME_SHIFT_STATUS_UNSUPPORTEDContent; } }
        private static int _TIME_SHIFT_STATUS_UNSUPPORTEDContent = default;
        private static bool _TIME_SHIFT_STATUS_UNSUPPORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#TV_MESSAGE_TYPE_CLOSED_CAPTION"/>
        /// </summary>
        public static int TV_MESSAGE_TYPE_CLOSED_CAPTION { get { if (!_TV_MESSAGE_TYPE_CLOSED_CAPTIONReady) { _TV_MESSAGE_TYPE_CLOSED_CAPTIONContent = SGetField<int>(LocalBridgeClazz, "TV_MESSAGE_TYPE_CLOSED_CAPTION"); _TV_MESSAGE_TYPE_CLOSED_CAPTIONReady = true; } return _TV_MESSAGE_TYPE_CLOSED_CAPTIONContent; } }
        private static int _TV_MESSAGE_TYPE_CLOSED_CAPTIONContent = default;
        private static bool _TV_MESSAGE_TYPE_CLOSED_CAPTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#TV_MESSAGE_TYPE_OTHER"/>
        /// </summary>
        public static int TV_MESSAGE_TYPE_OTHER { get { if (!_TV_MESSAGE_TYPE_OTHERReady) { _TV_MESSAGE_TYPE_OTHERContent = SGetField<int>(LocalBridgeClazz, "TV_MESSAGE_TYPE_OTHER"); _TV_MESSAGE_TYPE_OTHERReady = true; } return _TV_MESSAGE_TYPE_OTHERContent; } }
        private static int _TV_MESSAGE_TYPE_OTHERContent = default;
        private static bool _TV_MESSAGE_TYPE_OTHERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#TV_MESSAGE_TYPE_WATERMARK"/>
        /// </summary>
        public static int TV_MESSAGE_TYPE_WATERMARK { get { if (!_TV_MESSAGE_TYPE_WATERMARKReady) { _TV_MESSAGE_TYPE_WATERMARKContent = SGetField<int>(LocalBridgeClazz, "TV_MESSAGE_TYPE_WATERMARK"); _TV_MESSAGE_TYPE_WATERMARKReady = true; } return _TV_MESSAGE_TYPE_WATERMARKContent; } }
        private static int _TV_MESSAGE_TYPE_WATERMARKContent = default;
        private static bool _TV_MESSAGE_TYPE_WATERMARKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#VIDEO_UNAVAILABLE_REASON_AUDIO_ONLY"/>
        /// </summary>
        public static int VIDEO_UNAVAILABLE_REASON_AUDIO_ONLY { get { if (!_VIDEO_UNAVAILABLE_REASON_AUDIO_ONLYReady) { _VIDEO_UNAVAILABLE_REASON_AUDIO_ONLYContent = SGetField<int>(LocalBridgeClazz, "VIDEO_UNAVAILABLE_REASON_AUDIO_ONLY"); _VIDEO_UNAVAILABLE_REASON_AUDIO_ONLYReady = true; } return _VIDEO_UNAVAILABLE_REASON_AUDIO_ONLYContent; } }
        private static int _VIDEO_UNAVAILABLE_REASON_AUDIO_ONLYContent = default;
        private static bool _VIDEO_UNAVAILABLE_REASON_AUDIO_ONLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#VIDEO_UNAVAILABLE_REASON_BUFFERING"/>
        /// </summary>
        public static int VIDEO_UNAVAILABLE_REASON_BUFFERING { get { if (!_VIDEO_UNAVAILABLE_REASON_BUFFERINGReady) { _VIDEO_UNAVAILABLE_REASON_BUFFERINGContent = SGetField<int>(LocalBridgeClazz, "VIDEO_UNAVAILABLE_REASON_BUFFERING"); _VIDEO_UNAVAILABLE_REASON_BUFFERINGReady = true; } return _VIDEO_UNAVAILABLE_REASON_BUFFERINGContent; } }
        private static int _VIDEO_UNAVAILABLE_REASON_BUFFERINGContent = default;
        private static bool _VIDEO_UNAVAILABLE_REASON_BUFFERINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#VIDEO_UNAVAILABLE_REASON_CAS_BLACKOUT"/>
        /// </summary>
        public static int VIDEO_UNAVAILABLE_REASON_CAS_BLACKOUT { get { if (!_VIDEO_UNAVAILABLE_REASON_CAS_BLACKOUTReady) { _VIDEO_UNAVAILABLE_REASON_CAS_BLACKOUTContent = SGetField<int>(LocalBridgeClazz, "VIDEO_UNAVAILABLE_REASON_CAS_BLACKOUT"); _VIDEO_UNAVAILABLE_REASON_CAS_BLACKOUTReady = true; } return _VIDEO_UNAVAILABLE_REASON_CAS_BLACKOUTContent; } }
        private static int _VIDEO_UNAVAILABLE_REASON_CAS_BLACKOUTContent = default;
        private static bool _VIDEO_UNAVAILABLE_REASON_CAS_BLACKOUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#VIDEO_UNAVAILABLE_REASON_CAS_CARD_INVALID"/>
        /// </summary>
        public static int VIDEO_UNAVAILABLE_REASON_CAS_CARD_INVALID { get { if (!_VIDEO_UNAVAILABLE_REASON_CAS_CARD_INVALIDReady) { _VIDEO_UNAVAILABLE_REASON_CAS_CARD_INVALIDContent = SGetField<int>(LocalBridgeClazz, "VIDEO_UNAVAILABLE_REASON_CAS_CARD_INVALID"); _VIDEO_UNAVAILABLE_REASON_CAS_CARD_INVALIDReady = true; } return _VIDEO_UNAVAILABLE_REASON_CAS_CARD_INVALIDContent; } }
        private static int _VIDEO_UNAVAILABLE_REASON_CAS_CARD_INVALIDContent = default;
        private static bool _VIDEO_UNAVAILABLE_REASON_CAS_CARD_INVALIDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#VIDEO_UNAVAILABLE_REASON_CAS_CARD_MUTE"/>
        /// </summary>
        public static int VIDEO_UNAVAILABLE_REASON_CAS_CARD_MUTE { get { if (!_VIDEO_UNAVAILABLE_REASON_CAS_CARD_MUTEReady) { _VIDEO_UNAVAILABLE_REASON_CAS_CARD_MUTEContent = SGetField<int>(LocalBridgeClazz, "VIDEO_UNAVAILABLE_REASON_CAS_CARD_MUTE"); _VIDEO_UNAVAILABLE_REASON_CAS_CARD_MUTEReady = true; } return _VIDEO_UNAVAILABLE_REASON_CAS_CARD_MUTEContent; } }
        private static int _VIDEO_UNAVAILABLE_REASON_CAS_CARD_MUTEContent = default;
        private static bool _VIDEO_UNAVAILABLE_REASON_CAS_CARD_MUTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#VIDEO_UNAVAILABLE_REASON_CAS_INSUFFICIENT_OUTPUT_PROTECTION"/>
        /// </summary>
        public static int VIDEO_UNAVAILABLE_REASON_CAS_INSUFFICIENT_OUTPUT_PROTECTION { get { if (!_VIDEO_UNAVAILABLE_REASON_CAS_INSUFFICIENT_OUTPUT_PROTECTIONReady) { _VIDEO_UNAVAILABLE_REASON_CAS_INSUFFICIENT_OUTPUT_PROTECTIONContent = SGetField<int>(LocalBridgeClazz, "VIDEO_UNAVAILABLE_REASON_CAS_INSUFFICIENT_OUTPUT_PROTECTION"); _VIDEO_UNAVAILABLE_REASON_CAS_INSUFFICIENT_OUTPUT_PROTECTIONReady = true; } return _VIDEO_UNAVAILABLE_REASON_CAS_INSUFFICIENT_OUTPUT_PROTECTIONContent; } }
        private static int _VIDEO_UNAVAILABLE_REASON_CAS_INSUFFICIENT_OUTPUT_PROTECTIONContent = default;
        private static bool _VIDEO_UNAVAILABLE_REASON_CAS_INSUFFICIENT_OUTPUT_PROTECTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#VIDEO_UNAVAILABLE_REASON_CAS_LICENSE_EXPIRED"/>
        /// </summary>
        public static int VIDEO_UNAVAILABLE_REASON_CAS_LICENSE_EXPIRED { get { if (!_VIDEO_UNAVAILABLE_REASON_CAS_LICENSE_EXPIREDReady) { _VIDEO_UNAVAILABLE_REASON_CAS_LICENSE_EXPIREDContent = SGetField<int>(LocalBridgeClazz, "VIDEO_UNAVAILABLE_REASON_CAS_LICENSE_EXPIRED"); _VIDEO_UNAVAILABLE_REASON_CAS_LICENSE_EXPIREDReady = true; } return _VIDEO_UNAVAILABLE_REASON_CAS_LICENSE_EXPIREDContent; } }
        private static int _VIDEO_UNAVAILABLE_REASON_CAS_LICENSE_EXPIREDContent = default;
        private static bool _VIDEO_UNAVAILABLE_REASON_CAS_LICENSE_EXPIREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#VIDEO_UNAVAILABLE_REASON_CAS_NEED_ACTIVATION"/>
        /// </summary>
        public static int VIDEO_UNAVAILABLE_REASON_CAS_NEED_ACTIVATION { get { if (!_VIDEO_UNAVAILABLE_REASON_CAS_NEED_ACTIVATIONReady) { _VIDEO_UNAVAILABLE_REASON_CAS_NEED_ACTIVATIONContent = SGetField<int>(LocalBridgeClazz, "VIDEO_UNAVAILABLE_REASON_CAS_NEED_ACTIVATION"); _VIDEO_UNAVAILABLE_REASON_CAS_NEED_ACTIVATIONReady = true; } return _VIDEO_UNAVAILABLE_REASON_CAS_NEED_ACTIVATIONContent; } }
        private static int _VIDEO_UNAVAILABLE_REASON_CAS_NEED_ACTIVATIONContent = default;
        private static bool _VIDEO_UNAVAILABLE_REASON_CAS_NEED_ACTIVATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#VIDEO_UNAVAILABLE_REASON_CAS_NEED_PAIRING"/>
        /// </summary>
        public static int VIDEO_UNAVAILABLE_REASON_CAS_NEED_PAIRING { get { if (!_VIDEO_UNAVAILABLE_REASON_CAS_NEED_PAIRINGReady) { _VIDEO_UNAVAILABLE_REASON_CAS_NEED_PAIRINGContent = SGetField<int>(LocalBridgeClazz, "VIDEO_UNAVAILABLE_REASON_CAS_NEED_PAIRING"); _VIDEO_UNAVAILABLE_REASON_CAS_NEED_PAIRINGReady = true; } return _VIDEO_UNAVAILABLE_REASON_CAS_NEED_PAIRINGContent; } }
        private static int _VIDEO_UNAVAILABLE_REASON_CAS_NEED_PAIRINGContent = default;
        private static bool _VIDEO_UNAVAILABLE_REASON_CAS_NEED_PAIRINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#VIDEO_UNAVAILABLE_REASON_CAS_NO_CARD"/>
        /// </summary>
        public static int VIDEO_UNAVAILABLE_REASON_CAS_NO_CARD { get { if (!_VIDEO_UNAVAILABLE_REASON_CAS_NO_CARDReady) { _VIDEO_UNAVAILABLE_REASON_CAS_NO_CARDContent = SGetField<int>(LocalBridgeClazz, "VIDEO_UNAVAILABLE_REASON_CAS_NO_CARD"); _VIDEO_UNAVAILABLE_REASON_CAS_NO_CARDReady = true; } return _VIDEO_UNAVAILABLE_REASON_CAS_NO_CARDContent; } }
        private static int _VIDEO_UNAVAILABLE_REASON_CAS_NO_CARDContent = default;
        private static bool _VIDEO_UNAVAILABLE_REASON_CAS_NO_CARDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#VIDEO_UNAVAILABLE_REASON_CAS_PVR_RECORDING_NOT_ALLOWED"/>
        /// </summary>
        public static int VIDEO_UNAVAILABLE_REASON_CAS_PVR_RECORDING_NOT_ALLOWED { get { if (!_VIDEO_UNAVAILABLE_REASON_CAS_PVR_RECORDING_NOT_ALLOWEDReady) { _VIDEO_UNAVAILABLE_REASON_CAS_PVR_RECORDING_NOT_ALLOWEDContent = SGetField<int>(LocalBridgeClazz, "VIDEO_UNAVAILABLE_REASON_CAS_PVR_RECORDING_NOT_ALLOWED"); _VIDEO_UNAVAILABLE_REASON_CAS_PVR_RECORDING_NOT_ALLOWEDReady = true; } return _VIDEO_UNAVAILABLE_REASON_CAS_PVR_RECORDING_NOT_ALLOWEDContent; } }
        private static int _VIDEO_UNAVAILABLE_REASON_CAS_PVR_RECORDING_NOT_ALLOWEDContent = default;
        private static bool _VIDEO_UNAVAILABLE_REASON_CAS_PVR_RECORDING_NOT_ALLOWEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#VIDEO_UNAVAILABLE_REASON_CAS_REBOOTING"/>
        /// </summary>
        public static int VIDEO_UNAVAILABLE_REASON_CAS_REBOOTING { get { if (!_VIDEO_UNAVAILABLE_REASON_CAS_REBOOTINGReady) { _VIDEO_UNAVAILABLE_REASON_CAS_REBOOTINGContent = SGetField<int>(LocalBridgeClazz, "VIDEO_UNAVAILABLE_REASON_CAS_REBOOTING"); _VIDEO_UNAVAILABLE_REASON_CAS_REBOOTINGReady = true; } return _VIDEO_UNAVAILABLE_REASON_CAS_REBOOTINGContent; } }
        private static int _VIDEO_UNAVAILABLE_REASON_CAS_REBOOTINGContent = default;
        private static bool _VIDEO_UNAVAILABLE_REASON_CAS_REBOOTINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#VIDEO_UNAVAILABLE_REASON_CAS_UNKNOWN"/>
        /// </summary>
        public static int VIDEO_UNAVAILABLE_REASON_CAS_UNKNOWN { get { if (!_VIDEO_UNAVAILABLE_REASON_CAS_UNKNOWNReady) { _VIDEO_UNAVAILABLE_REASON_CAS_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "VIDEO_UNAVAILABLE_REASON_CAS_UNKNOWN"); _VIDEO_UNAVAILABLE_REASON_CAS_UNKNOWNReady = true; } return _VIDEO_UNAVAILABLE_REASON_CAS_UNKNOWNContent; } }
        private static int _VIDEO_UNAVAILABLE_REASON_CAS_UNKNOWNContent = default;
        private static bool _VIDEO_UNAVAILABLE_REASON_CAS_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#VIDEO_UNAVAILABLE_REASON_INSUFFICIENT_RESOURCE"/>
        /// </summary>
        public static int VIDEO_UNAVAILABLE_REASON_INSUFFICIENT_RESOURCE { get { if (!_VIDEO_UNAVAILABLE_REASON_INSUFFICIENT_RESOURCEReady) { _VIDEO_UNAVAILABLE_REASON_INSUFFICIENT_RESOURCEContent = SGetField<int>(LocalBridgeClazz, "VIDEO_UNAVAILABLE_REASON_INSUFFICIENT_RESOURCE"); _VIDEO_UNAVAILABLE_REASON_INSUFFICIENT_RESOURCEReady = true; } return _VIDEO_UNAVAILABLE_REASON_INSUFFICIENT_RESOURCEContent; } }
        private static int _VIDEO_UNAVAILABLE_REASON_INSUFFICIENT_RESOURCEContent = default;
        private static bool _VIDEO_UNAVAILABLE_REASON_INSUFFICIENT_RESOURCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#VIDEO_UNAVAILABLE_REASON_NOT_CONNECTED"/>
        /// </summary>
        public static int VIDEO_UNAVAILABLE_REASON_NOT_CONNECTED { get { if (!_VIDEO_UNAVAILABLE_REASON_NOT_CONNECTEDReady) { _VIDEO_UNAVAILABLE_REASON_NOT_CONNECTEDContent = SGetField<int>(LocalBridgeClazz, "VIDEO_UNAVAILABLE_REASON_NOT_CONNECTED"); _VIDEO_UNAVAILABLE_REASON_NOT_CONNECTEDReady = true; } return _VIDEO_UNAVAILABLE_REASON_NOT_CONNECTEDContent; } }
        private static int _VIDEO_UNAVAILABLE_REASON_NOT_CONNECTEDContent = default;
        private static bool _VIDEO_UNAVAILABLE_REASON_NOT_CONNECTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#VIDEO_UNAVAILABLE_REASON_TUNING"/>
        /// </summary>
        public static int VIDEO_UNAVAILABLE_REASON_TUNING { get { if (!_VIDEO_UNAVAILABLE_REASON_TUNINGReady) { _VIDEO_UNAVAILABLE_REASON_TUNINGContent = SGetField<int>(LocalBridgeClazz, "VIDEO_UNAVAILABLE_REASON_TUNING"); _VIDEO_UNAVAILABLE_REASON_TUNINGReady = true; } return _VIDEO_UNAVAILABLE_REASON_TUNINGContent; } }
        private static int _VIDEO_UNAVAILABLE_REASON_TUNINGContent = default;
        private static bool _VIDEO_UNAVAILABLE_REASON_TUNINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#VIDEO_UNAVAILABLE_REASON_UNKNOWN"/>
        /// </summary>
        public static int VIDEO_UNAVAILABLE_REASON_UNKNOWN { get { if (!_VIDEO_UNAVAILABLE_REASON_UNKNOWNReady) { _VIDEO_UNAVAILABLE_REASON_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "VIDEO_UNAVAILABLE_REASON_UNKNOWN"); _VIDEO_UNAVAILABLE_REASON_UNKNOWNReady = true; } return _VIDEO_UNAVAILABLE_REASON_UNKNOWNContent; } }
        private static int _VIDEO_UNAVAILABLE_REASON_UNKNOWNContent = default;
        private static bool _VIDEO_UNAVAILABLE_REASON_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#VIDEO_UNAVAILABLE_REASON_WEAK_SIGNAL"/>
        /// </summary>
        public static int VIDEO_UNAVAILABLE_REASON_WEAK_SIGNAL { get { if (!_VIDEO_UNAVAILABLE_REASON_WEAK_SIGNALReady) { _VIDEO_UNAVAILABLE_REASON_WEAK_SIGNALContent = SGetField<int>(LocalBridgeClazz, "VIDEO_UNAVAILABLE_REASON_WEAK_SIGNAL"); _VIDEO_UNAVAILABLE_REASON_WEAK_SIGNALReady = true; } return _VIDEO_UNAVAILABLE_REASON_WEAK_SIGNALContent; } }
        private static int _VIDEO_UNAVAILABLE_REASON_WEAK_SIGNALContent = default;
        private static bool _VIDEO_UNAVAILABLE_REASON_WEAK_SIGNALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#ACTION_BLOCKED_RATINGS_CHANGED"/>
        /// </summary>
        public static Java.Lang.String ACTION_BLOCKED_RATINGS_CHANGED { get { if (!_ACTION_BLOCKED_RATINGS_CHANGEDReady) { _ACTION_BLOCKED_RATINGS_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_BLOCKED_RATINGS_CHANGED"); _ACTION_BLOCKED_RATINGS_CHANGEDReady = true; } return _ACTION_BLOCKED_RATINGS_CHANGEDContent; } }
        private static Java.Lang.String _ACTION_BLOCKED_RATINGS_CHANGEDContent = default;
        private static bool _ACTION_BLOCKED_RATINGS_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#ACTION_PARENTAL_CONTROLS_ENABLED_CHANGED"/>
        /// </summary>
        public static Java.Lang.String ACTION_PARENTAL_CONTROLS_ENABLED_CHANGED { get { if (!_ACTION_PARENTAL_CONTROLS_ENABLED_CHANGEDReady) { _ACTION_PARENTAL_CONTROLS_ENABLED_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_PARENTAL_CONTROLS_ENABLED_CHANGED"); _ACTION_PARENTAL_CONTROLS_ENABLED_CHANGEDReady = true; } return _ACTION_PARENTAL_CONTROLS_ENABLED_CHANGEDContent; } }
        private static Java.Lang.String _ACTION_PARENTAL_CONTROLS_ENABLED_CHANGEDContent = default;
        private static bool _ACTION_PARENTAL_CONTROLS_ENABLED_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#ACTION_QUERY_CONTENT_RATING_SYSTEMS"/>
        /// </summary>
        public static Java.Lang.String ACTION_QUERY_CONTENT_RATING_SYSTEMS { get { if (!_ACTION_QUERY_CONTENT_RATING_SYSTEMSReady) { _ACTION_QUERY_CONTENT_RATING_SYSTEMSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_QUERY_CONTENT_RATING_SYSTEMS"); _ACTION_QUERY_CONTENT_RATING_SYSTEMSReady = true; } return _ACTION_QUERY_CONTENT_RATING_SYSTEMSContent; } }
        private static Java.Lang.String _ACTION_QUERY_CONTENT_RATING_SYSTEMSContent = default;
        private static bool _ACTION_QUERY_CONTENT_RATING_SYSTEMSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#ACTION_SETUP_INPUTS"/>
        /// </summary>
        public static Java.Lang.String ACTION_SETUP_INPUTS { get { if (!_ACTION_SETUP_INPUTSReady) { _ACTION_SETUP_INPUTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_SETUP_INPUTS"); _ACTION_SETUP_INPUTSReady = true; } return _ACTION_SETUP_INPUTSContent; } }
        private static Java.Lang.String _ACTION_SETUP_INPUTSContent = default;
        private static bool _ACTION_SETUP_INPUTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#ACTION_VIEW_RECORDING_SCHEDULES"/>
        /// </summary>
        public static Java.Lang.String ACTION_VIEW_RECORDING_SCHEDULES { get { if (!_ACTION_VIEW_RECORDING_SCHEDULESReady) { _ACTION_VIEW_RECORDING_SCHEDULESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_VIEW_RECORDING_SCHEDULES"); _ACTION_VIEW_RECORDING_SCHEDULESReady = true; } return _ACTION_VIEW_RECORDING_SCHEDULESContent; } }
        private static Java.Lang.String _ACTION_VIEW_RECORDING_SCHEDULESContent = default;
        private static bool _ACTION_VIEW_RECORDING_SCHEDULESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#META_DATA_CONTENT_RATING_SYSTEMS"/>
        /// </summary>
        public static Java.Lang.String META_DATA_CONTENT_RATING_SYSTEMS { get { if (!_META_DATA_CONTENT_RATING_SYSTEMSReady) { _META_DATA_CONTENT_RATING_SYSTEMSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "META_DATA_CONTENT_RATING_SYSTEMS"); _META_DATA_CONTENT_RATING_SYSTEMSReady = true; } return _META_DATA_CONTENT_RATING_SYSTEMSContent; } }
        private static Java.Lang.String _META_DATA_CONTENT_RATING_SYSTEMSContent = default;
        private static bool _META_DATA_CONTENT_RATING_SYSTEMSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#TV_MESSAGE_KEY_GROUP_ID"/>
        /// </summary>
        public static Java.Lang.String TV_MESSAGE_KEY_GROUP_ID { get { if (!_TV_MESSAGE_KEY_GROUP_IDReady) { _TV_MESSAGE_KEY_GROUP_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TV_MESSAGE_KEY_GROUP_ID"); _TV_MESSAGE_KEY_GROUP_IDReady = true; } return _TV_MESSAGE_KEY_GROUP_IDContent; } }
        private static Java.Lang.String _TV_MESSAGE_KEY_GROUP_IDContent = default;
        private static bool _TV_MESSAGE_KEY_GROUP_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#TV_MESSAGE_KEY_RAW_DATA"/>
        /// </summary>
        public static Java.Lang.String TV_MESSAGE_KEY_RAW_DATA { get { if (!_TV_MESSAGE_KEY_RAW_DATAReady) { _TV_MESSAGE_KEY_RAW_DATAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TV_MESSAGE_KEY_RAW_DATA"); _TV_MESSAGE_KEY_RAW_DATAReady = true; } return _TV_MESSAGE_KEY_RAW_DATAContent; } }
        private static Java.Lang.String _TV_MESSAGE_KEY_RAW_DATAContent = default;
        private static bool _TV_MESSAGE_KEY_RAW_DATAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#TV_MESSAGE_KEY_STREAM_ID"/>
        /// </summary>
        public static Java.Lang.String TV_MESSAGE_KEY_STREAM_ID { get { if (!_TV_MESSAGE_KEY_STREAM_IDReady) { _TV_MESSAGE_KEY_STREAM_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TV_MESSAGE_KEY_STREAM_ID"); _TV_MESSAGE_KEY_STREAM_IDReady = true; } return _TV_MESSAGE_KEY_STREAM_IDContent; } }
        private static Java.Lang.String _TV_MESSAGE_KEY_STREAM_IDContent = default;
        private static bool _TV_MESSAGE_KEY_STREAM_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#TV_MESSAGE_KEY_SUBTYPE"/>
        /// </summary>
        public static Java.Lang.String TV_MESSAGE_KEY_SUBTYPE { get { if (!_TV_MESSAGE_KEY_SUBTYPEReady) { _TV_MESSAGE_KEY_SUBTYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TV_MESSAGE_KEY_SUBTYPE"); _TV_MESSAGE_KEY_SUBTYPEReady = true; } return _TV_MESSAGE_KEY_SUBTYPEContent; } }
        private static Java.Lang.String _TV_MESSAGE_KEY_SUBTYPEContent = default;
        private static bool _TV_MESSAGE_KEY_SUBTYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#TV_MESSAGE_SUBTYPE_CC_608E"/>
        /// </summary>
        public static Java.Lang.String TV_MESSAGE_SUBTYPE_CC_608E { get { if (!_TV_MESSAGE_SUBTYPE_CC_608EReady) { _TV_MESSAGE_SUBTYPE_CC_608EContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TV_MESSAGE_SUBTYPE_CC_608E"); _TV_MESSAGE_SUBTYPE_CC_608EReady = true; } return _TV_MESSAGE_SUBTYPE_CC_608EContent; } }
        private static Java.Lang.String _TV_MESSAGE_SUBTYPE_CC_608EContent = default;
        private static bool _TV_MESSAGE_SUBTYPE_CC_608EReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#TV_MESSAGE_SUBTYPE_WATERMARKING_A335"/>
        /// </summary>
        public static Java.Lang.String TV_MESSAGE_SUBTYPE_WATERMARKING_A335 { get { if (!_TV_MESSAGE_SUBTYPE_WATERMARKING_A335Ready) { _TV_MESSAGE_SUBTYPE_WATERMARKING_A335Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "TV_MESSAGE_SUBTYPE_WATERMARKING_A335"); _TV_MESSAGE_SUBTYPE_WATERMARKING_A335Ready = true; } return _TV_MESSAGE_SUBTYPE_WATERMARKING_A335Content; } }
        private static Java.Lang.String _TV_MESSAGE_SUBTYPE_WATERMARKING_A335Content = default;
        private static bool _TV_MESSAGE_SUBTYPE_WATERMARKING_A335Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#TIME_SHIFT_INVALID_TIME"/>
        /// </summary>
        public static long TIME_SHIFT_INVALID_TIME { get { if (!_TIME_SHIFT_INVALID_TIMEReady) { _TIME_SHIFT_INVALID_TIMEContent = SGetField<long>(LocalBridgeClazz, "TIME_SHIFT_INVALID_TIME"); _TIME_SHIFT_INVALID_TIMEReady = true; } return _TIME_SHIFT_INVALID_TIMEContent; } }
        private static long _TIME_SHIFT_INVALID_TIMEContent = default;
        private static bool _TIME_SHIFT_INVALID_TIMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#TV_MESSAGE_GROUP_ID_NONE"/>
        /// </summary>
        public static long TV_MESSAGE_GROUP_ID_NONE { get { if (!_TV_MESSAGE_GROUP_ID_NONEReady) { _TV_MESSAGE_GROUP_ID_NONEContent = SGetField<long>(LocalBridgeClazz, "TV_MESSAGE_GROUP_ID_NONE"); _TV_MESSAGE_GROUP_ID_NONEReady = true; } return _TV_MESSAGE_GROUP_ID_NONEContent; } }
        private static long _TV_MESSAGE_GROUP_ID_NONEContent = default;
        private static bool _TV_MESSAGE_GROUP_ID_NONEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#getTvInputInfo(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Media.Tv.TvInputInfo"/></returns>
        public Android.Media.Tv.TvInputInfo GetTvInputInfo(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Android.Media.Tv.TvInputInfo>("getTvInputInfo", "(Ljava/lang/String;)Landroid/media/tv/TvInputInfo;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#isParentalControlsEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsParentalControlsEnabled()
        {
            return IExecuteWithSignature<bool>("isParentalControlsEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#isRatingBlocked(android.media.tv.TvContentRating)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.Tv.TvContentRating"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsRatingBlocked(Android.Media.Tv.TvContentRating arg0)
        {
            return IExecuteWithSignature<bool>("isRatingBlocked", "(Landroid/media/tv/TvContentRating;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#getInputState(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetInputState(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<int>("getInputState", "(Ljava/lang/String;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#getBlockedRatings()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Media.Tv.TvContentRating> GetBlockedRatings()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Media.Tv.TvContentRating>>("getBlockedRatings", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#getTvInputList()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Media.Tv.TvInputInfo> GetTvInputList()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Media.Tv.TvInputInfo>>("getTvInputList", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#registerCallback(android.media.tv.TvInputManager.TvInputCallback,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.Tv.TvInputManager.TvInputCallback"/></param>
        /// <param name="arg1"><see cref="Android.Os.Handler"/></param>
        public void RegisterCallback(Android.Media.Tv.TvInputManager.TvInputCallback arg0, Android.Os.Handler arg1)
        {
            IExecute("registerCallback", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#unregisterCallback(android.media.tv.TvInputManager.TvInputCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.Tv.TvInputManager.TvInputCallback"/></param>
        public void UnregisterCallback(Android.Media.Tv.TvInputManager.TvInputCallback arg0)
        {
            IExecuteWithSignature("unregisterCallback", "(Landroid/media/tv/TvInputManager$TvInputCallback;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#updateTvInputInfo(android.media.tv.TvInputInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.Tv.TvInputInfo"/></param>
        public void UpdateTvInputInfo(Android.Media.Tv.TvInputInfo arg0)
        {
            IExecuteWithSignature("updateTvInputInfo", "(Landroid/media/tv/TvInputInfo;)V", arg0);
        }

        #endregion

        #region Nested classes
        #region TvInputCallback implementation
        public partial class TvInputCallback
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.TvInputCallback.html#onInputAdded(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            public void OnInputAdded(Java.Lang.String arg0)
            {
                IExecuteWithSignature("onInputAdded", "(Ljava/lang/String;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.TvInputCallback.html#onInputRemoved(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            public void OnInputRemoved(Java.Lang.String arg0)
            {
                IExecuteWithSignature("onInputRemoved", "(Ljava/lang/String;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.TvInputCallback.html#onInputStateChanged(java.lang.String,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void OnInputStateChanged(Java.Lang.String arg0, int arg1)
            {
                IExecute("onInputStateChanged", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.TvInputCallback.html#onInputUpdated(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            public void OnInputUpdated(Java.Lang.String arg0)
            {
                IExecuteWithSignature("onInputUpdated", "(Ljava/lang/String;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/tv/TvInputManager.TvInputCallback.html#onTvInputInfoUpdated(android.media.tv.TvInputInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.Tv.TvInputInfo"/></param>
            public void OnTvInputInfoUpdated(Android.Media.Tv.TvInputInfo arg0)
            {
                IExecuteWithSignature("onTvInputInfoUpdated", "(Landroid/media/tv/TvInputInfo;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
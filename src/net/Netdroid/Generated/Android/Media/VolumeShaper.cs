/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media
{
    #region VolumeShaper declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/media/VolumeShaper.html"/>
    /// </summary>
    public partial class VolumeShaper : Java.Lang.AutoCloseable
    {
        const string _bridgeClassName = "android.media.VolumeShaper";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public VolumeShaper() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public VolumeShaper(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region Configuration declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/VolumeShaper.Configuration.html"/>
        /// </summary>
        public partial class Configuration : Android.Os.Parcelable
        {
            const string _bridgeClassName = "android.media.VolumeShaper$Configuration";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Configuration() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Configuration(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class
            #region Builder declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/VolumeShaper.Configuration.Builder.html"/>
            /// </summary>
            public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
            {
                const string _bridgeClassName = "android.media.VolumeShaper$Configuration$Builder";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                public Builder() { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                public Builder(params object[] args) : base(args) { }

                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                /// </summary>
                public override string BridgeClassName => _bridgeClassName;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                /// </summary>
                public override bool IsBridgeAbstract => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                /// </summary>
                public override bool IsBridgeCloseable => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                /// </summary>
                public override bool IsBridgeInterface => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                /// </summary>
                public override bool IsBridgeStatic => true;

                // TODO: complete the class

            }
            #endregion

        
        }
        #endregion

        #region Operation declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/VolumeShaper.Operation.html"/>
        /// </summary>
        public partial class Operation : Android.Os.Parcelable
        {
            const string _bridgeClassName = "android.media.VolumeShaper$Operation";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Operation() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Operation(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region VolumeShaper implementation
    public partial class VolumeShaper
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/VolumeShaper.html#getVolume()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetVolume()
        {
            return IExecuteWithSignature<float>("getVolume", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/VolumeShaper.html#apply(android.media.VolumeShaper.Operation)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.VolumeShaper.Operation"/></param>
        public void Apply(Android.Media.VolumeShaper.Operation arg0)
        {
            IExecuteWithSignature("apply", "(Landroid/media/VolumeShaper$Operation;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/VolumeShaper.html#close()"/>
        /// </summary>
        public void Close()
        {
            IExecuteWithSignature("close", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/VolumeShaper.html#replace(android.media.VolumeShaper.Configuration,android.media.VolumeShaper.Operation,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.VolumeShaper.Configuration"/></param>
        /// <param name="arg1"><see cref="Android.Media.VolumeShaper.Operation"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        public void Replace(Android.Media.VolumeShaper.Configuration arg0, Android.Media.VolumeShaper.Operation arg1, bool arg2)
        {
            IExecuteWithSignature("replace", "(Landroid/media/VolumeShaper$Configuration;Landroid/media/VolumeShaper$Operation;Z)V", arg0, arg1, arg2);
        }

        #endregion

        #region Nested classes
        #region Configuration implementation
        public partial class Configuration
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/VolumeShaper.Configuration.html#CUBIC_RAMP"/>
            /// </summary>
            public static Android.Media.VolumeShaper.Configuration CUBIC_RAMP { get { if (!_CUBIC_RAMPReady) { _CUBIC_RAMPContent = SGetField<Android.Media.VolumeShaper.Configuration>(LocalBridgeClazz, "CUBIC_RAMP"); _CUBIC_RAMPReady = true; } return _CUBIC_RAMPContent; } }
            private static Android.Media.VolumeShaper.Configuration _CUBIC_RAMPContent = default;
            private static bool _CUBIC_RAMPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/VolumeShaper.Configuration.html#LINEAR_RAMP"/>
            /// </summary>
            public static Android.Media.VolumeShaper.Configuration LINEAR_RAMP { get { if (!_LINEAR_RAMPReady) { _LINEAR_RAMPContent = SGetField<Android.Media.VolumeShaper.Configuration>(LocalBridgeClazz, "LINEAR_RAMP"); _LINEAR_RAMPReady = true; } return _LINEAR_RAMPContent; } }
            private static Android.Media.VolumeShaper.Configuration _LINEAR_RAMPContent = default;
            private static bool _LINEAR_RAMPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/VolumeShaper.Configuration.html#SCURVE_RAMP"/>
            /// </summary>
            public static Android.Media.VolumeShaper.Configuration SCURVE_RAMP { get { if (!_SCURVE_RAMPReady) { _SCURVE_RAMPContent = SGetField<Android.Media.VolumeShaper.Configuration>(LocalBridgeClazz, "SCURVE_RAMP"); _SCURVE_RAMPReady = true; } return _SCURVE_RAMPContent; } }
            private static Android.Media.VolumeShaper.Configuration _SCURVE_RAMPContent = default;
            private static bool _SCURVE_RAMPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/VolumeShaper.Configuration.html#SINE_RAMP"/>
            /// </summary>
            public static Android.Media.VolumeShaper.Configuration SINE_RAMP { get { if (!_SINE_RAMPReady) { _SINE_RAMPContent = SGetField<Android.Media.VolumeShaper.Configuration>(LocalBridgeClazz, "SINE_RAMP"); _SINE_RAMPReady = true; } return _SINE_RAMPContent; } }
            private static Android.Media.VolumeShaper.Configuration _SINE_RAMPContent = default;
            private static bool _SINE_RAMPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/VolumeShaper.Configuration.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/VolumeShaper.Configuration.html#INTERPOLATOR_TYPE_CUBIC"/>
            /// </summary>
            public static int INTERPOLATOR_TYPE_CUBIC { get { if (!_INTERPOLATOR_TYPE_CUBICReady) { _INTERPOLATOR_TYPE_CUBICContent = SGetField<int>(LocalBridgeClazz, "INTERPOLATOR_TYPE_CUBIC"); _INTERPOLATOR_TYPE_CUBICReady = true; } return _INTERPOLATOR_TYPE_CUBICContent; } }
            private static int _INTERPOLATOR_TYPE_CUBICContent = default;
            private static bool _INTERPOLATOR_TYPE_CUBICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/VolumeShaper.Configuration.html#INTERPOLATOR_TYPE_CUBIC_MONOTONIC"/>
            /// </summary>
            public static int INTERPOLATOR_TYPE_CUBIC_MONOTONIC { get { if (!_INTERPOLATOR_TYPE_CUBIC_MONOTONICReady) { _INTERPOLATOR_TYPE_CUBIC_MONOTONICContent = SGetField<int>(LocalBridgeClazz, "INTERPOLATOR_TYPE_CUBIC_MONOTONIC"); _INTERPOLATOR_TYPE_CUBIC_MONOTONICReady = true; } return _INTERPOLATOR_TYPE_CUBIC_MONOTONICContent; } }
            private static int _INTERPOLATOR_TYPE_CUBIC_MONOTONICContent = default;
            private static bool _INTERPOLATOR_TYPE_CUBIC_MONOTONICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/VolumeShaper.Configuration.html#INTERPOLATOR_TYPE_LINEAR"/>
            /// </summary>
            public static int INTERPOLATOR_TYPE_LINEAR { get { if (!_INTERPOLATOR_TYPE_LINEARReady) { _INTERPOLATOR_TYPE_LINEARContent = SGetField<int>(LocalBridgeClazz, "INTERPOLATOR_TYPE_LINEAR"); _INTERPOLATOR_TYPE_LINEARReady = true; } return _INTERPOLATOR_TYPE_LINEARContent; } }
            private static int _INTERPOLATOR_TYPE_LINEARContent = default;
            private static bool _INTERPOLATOR_TYPE_LINEARReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/VolumeShaper.Configuration.html#INTERPOLATOR_TYPE_STEP"/>
            /// </summary>
            public static int INTERPOLATOR_TYPE_STEP { get { if (!_INTERPOLATOR_TYPE_STEPReady) { _INTERPOLATOR_TYPE_STEPContent = SGetField<int>(LocalBridgeClazz, "INTERPOLATOR_TYPE_STEP"); _INTERPOLATOR_TYPE_STEPReady = true; } return _INTERPOLATOR_TYPE_STEPContent; } }
            private static int _INTERPOLATOR_TYPE_STEPContent = default;
            private static bool _INTERPOLATOR_TYPE_STEPReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/VolumeShaper.Configuration.html#getMaximumCurvePoints()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public static int GetMaximumCurvePoints()
            {
                return SExecuteWithSignature<int>(LocalBridgeClazz, "getMaximumCurvePoints", "()I");
            }

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/VolumeShaper.Configuration.html#getTimes()"/>
            /// </summary>
            /// <returns><see cref="float"/></returns>
            public float[] GetTimes()
            {
                return IExecuteWithSignatureArray<float>("getTimes", "()[F");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/VolumeShaper.Configuration.html#getVolumes()"/>
            /// </summary>
            /// <returns><see cref="float"/></returns>
            public float[] GetVolumes()
            {
                return IExecuteWithSignatureArray<float>("getVolumes", "()[F");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/VolumeShaper.Configuration.html#describeContents()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int DescribeContents()
            {
                return IExecuteWithSignature<int>("describeContents", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/VolumeShaper.Configuration.html#getInterpolatorType()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetInterpolatorType()
            {
                return IExecuteWithSignature<int>("getInterpolatorType", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/VolumeShaper.Configuration.html#getDuration()"/>
            /// </summary>
            /// <returns><see cref="long"/></returns>
            public long GetDuration()
            {
                return IExecuteWithSignature<long>("getDuration", "()J");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/VolumeShaper.Configuration.html#writeToParcel(android.os.Parcel,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
            {
                IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
            }

            #endregion

            #region Nested classes
            #region Builder implementation
            public partial class Builder
            {
                #region Constructors
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/VolumeShaper.Configuration.Builder.html#%3Cinit%3E(android.media.VolumeShaper.Configuration)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Media.VolumeShaper.Configuration"/></param>
                public Builder(Android.Media.VolumeShaper.Configuration arg0)
                    : base(arg0)
                {
                }

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields

                #endregion

                #region Static methods

                #endregion

                #region Instance methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/VolumeShaper.Configuration.Builder.html#build()"/>
                /// </summary>
                /// <returns><see cref="Android.Media.VolumeShaper.Configuration"/></returns>
                public Android.Media.VolumeShaper.Configuration Build()
                {
                    return IExecute<Android.Media.VolumeShaper.Configuration>("build");
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/VolumeShaper.Configuration.Builder.html#invertVolumes()"/>
                /// </summary>
                /// <returns><see cref="Android.Media.VolumeShaper.Configuration.Builder"/></returns>
                public Android.Media.VolumeShaper.Configuration.Builder InvertVolumes()
                {
                    return IExecute<Android.Media.VolumeShaper.Configuration.Builder>("invertVolumes");
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/VolumeShaper.Configuration.Builder.html#reflectTimes()"/>
                /// </summary>
                /// <returns><see cref="Android.Media.VolumeShaper.Configuration.Builder"/></returns>
                public Android.Media.VolumeShaper.Configuration.Builder ReflectTimes()
                {
                    return IExecute<Android.Media.VolumeShaper.Configuration.Builder>("reflectTimes");
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/VolumeShaper.Configuration.Builder.html#scaleToEndVolume(float)"/>
                /// </summary>
                /// <param name="arg0"><see cref="float"/></param>
                /// <returns><see cref="Android.Media.VolumeShaper.Configuration.Builder"/></returns>
                public Android.Media.VolumeShaper.Configuration.Builder ScaleToEndVolume(float arg0)
                {
                    return IExecute<Android.Media.VolumeShaper.Configuration.Builder>("scaleToEndVolume", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/VolumeShaper.Configuration.Builder.html#scaleToStartVolume(float)"/>
                /// </summary>
                /// <param name="arg0"><see cref="float"/></param>
                /// <returns><see cref="Android.Media.VolumeShaper.Configuration.Builder"/></returns>
                public Android.Media.VolumeShaper.Configuration.Builder ScaleToStartVolume(float arg0)
                {
                    return IExecute<Android.Media.VolumeShaper.Configuration.Builder>("scaleToStartVolume", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/VolumeShaper.Configuration.Builder.html#setCurve(float[],float[])"/>
                /// </summary>
                /// <param name="arg0"><see cref="float"/></param>
                /// <param name="arg1"><see cref="float"/></param>
                /// <returns><see cref="Android.Media.VolumeShaper.Configuration.Builder"/></returns>
                public Android.Media.VolumeShaper.Configuration.Builder SetCurve(float[] arg0, float[] arg1)
                {
                    return IExecute<Android.Media.VolumeShaper.Configuration.Builder>("setCurve", arg0, arg1);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/VolumeShaper.Configuration.Builder.html#setDuration(long)"/>
                /// </summary>
                /// <param name="arg0"><see cref="long"/></param>
                /// <returns><see cref="Android.Media.VolumeShaper.Configuration.Builder"/></returns>
                public Android.Media.VolumeShaper.Configuration.Builder SetDuration(long arg0)
                {
                    return IExecute<Android.Media.VolumeShaper.Configuration.Builder>("setDuration", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/media/VolumeShaper.Configuration.Builder.html#setInterpolatorType(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <returns><see cref="Android.Media.VolumeShaper.Configuration.Builder"/></returns>
                public Android.Media.VolumeShaper.Configuration.Builder SetInterpolatorType(int arg0)
                {
                    return IExecute<Android.Media.VolumeShaper.Configuration.Builder>("setInterpolatorType", arg0);
                }

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

        
            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Operation implementation
        public partial class Operation
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/VolumeShaper.Operation.html#PLAY"/>
            /// </summary>
            public static Android.Media.VolumeShaper.Operation PLAY { get { if (!_PLAYReady) { _PLAYContent = SGetField<Android.Media.VolumeShaper.Operation>(LocalBridgeClazz, "PLAY"); _PLAYReady = true; } return _PLAYContent; } }
            private static Android.Media.VolumeShaper.Operation _PLAYContent = default;
            private static bool _PLAYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/VolumeShaper.Operation.html#REVERSE"/>
            /// </summary>
            public static Android.Media.VolumeShaper.Operation REVERSE { get { if (!_REVERSEReady) { _REVERSEContent = SGetField<Android.Media.VolumeShaper.Operation>(LocalBridgeClazz, "REVERSE"); _REVERSEReady = true; } return _REVERSEContent; } }
            private static Android.Media.VolumeShaper.Operation _REVERSEContent = default;
            private static bool _REVERSEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/VolumeShaper.Operation.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/VolumeShaper.Operation.html#describeContents()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int DescribeContents()
            {
                return IExecuteWithSignature<int>("describeContents", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/VolumeShaper.Operation.html#writeToParcel(android.os.Parcel,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
            {
                IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
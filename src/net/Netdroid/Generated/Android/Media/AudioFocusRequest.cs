/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media
{
    #region AudioFocusRequest declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/media/AudioFocusRequest.html"/>
    /// </summary>
    public partial class AudioFocusRequest : MASES.JCOBridge.C2JBridge.JVMBridgeBase<AudioFocusRequest>
    {
        const string _bridgeClassName = "android.media.AudioFocusRequest";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public AudioFocusRequest() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public AudioFocusRequest(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region Builder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFocusRequest.Builder.html"/>
        /// </summary>
        public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
        {
            const string _bridgeClassName = "android.media.AudioFocusRequest$Builder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Builder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Builder(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region AudioFocusRequest implementation
    public partial class AudioFocusRequest
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFocusRequest.html#getAudioAttributes()"/>
        /// </summary>
        /// <returns><see cref="Android.Media.AudioAttributes"/></returns>
        public Android.Media.AudioAttributes GetAudioAttributes()
        {
            return IExecuteWithSignature<Android.Media.AudioAttributes>("getAudioAttributes", "()Landroid/media/AudioAttributes;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFocusRequest.html#acceptsDelayedFocusGain()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool AcceptsDelayedFocusGain()
        {
            return IExecuteWithSignature<bool>("acceptsDelayedFocusGain", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFocusRequest.html#willPauseWhenDucked()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool WillPauseWhenDucked()
        {
            return IExecuteWithSignature<bool>("willPauseWhenDucked", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioFocusRequest.html#getFocusGain()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetFocusGain()
        {
            return IExecuteWithSignature<int>("getFocusGain", "()I");
        }
    
        #endregion
    
        #region Nested classes
        #region Builder implementation
        public partial class Builder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioFocusRequest.Builder.html#%3Cinit%3E(android.media.AudioFocusRequest)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.AudioFocusRequest"/></param>
            public Builder(Android.Media.AudioFocusRequest arg0)
                : base(arg0)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioFocusRequest.Builder.html#%3Cinit%3E(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public Builder(int arg0)
                : base(arg0)
            {
            }
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioFocusRequest.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Media.AudioFocusRequest"/></returns>
            public Android.Media.AudioFocusRequest Build()
            {
                return IExecuteWithSignature<Android.Media.AudioFocusRequest>("build", "()Landroid/media/AudioFocusRequest;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioFocusRequest.Builder.html#setAcceptsDelayedFocusGain(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Media.AudioFocusRequest.Builder"/></returns>
            public Android.Media.AudioFocusRequest.Builder SetAcceptsDelayedFocusGain(bool arg0)
            {
                return IExecuteWithSignature<Android.Media.AudioFocusRequest.Builder>("setAcceptsDelayedFocusGain", "(Z)Landroid/media/AudioFocusRequest$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioFocusRequest.Builder.html#setAudioAttributes(android.media.AudioAttributes)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.AudioAttributes"/></param>
            /// <returns><see cref="Android.Media.AudioFocusRequest.Builder"/></returns>
            public Android.Media.AudioFocusRequest.Builder SetAudioAttributes(Android.Media.AudioAttributes arg0)
            {
                return IExecuteWithSignature<Android.Media.AudioFocusRequest.Builder>("setAudioAttributes", "(Landroid/media/AudioAttributes;)Landroid/media/AudioFocusRequest$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioFocusRequest.Builder.html#setFocusGain(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.AudioFocusRequest.Builder"/></returns>
            public Android.Media.AudioFocusRequest.Builder SetFocusGain(int arg0)
            {
                return IExecuteWithSignature<Android.Media.AudioFocusRequest.Builder>("setFocusGain", "(I)Landroid/media/AudioFocusRequest$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioFocusRequest.Builder.html#setForceDucking(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Media.AudioFocusRequest.Builder"/></returns>
            public Android.Media.AudioFocusRequest.Builder SetForceDucking(bool arg0)
            {
                return IExecuteWithSignature<Android.Media.AudioFocusRequest.Builder>("setForceDucking", "(Z)Landroid/media/AudioFocusRequest$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioFocusRequest.Builder.html#setOnAudioFocusChangeListener(android.media.AudioManager.OnAudioFocusChangeListener,android.os.Handler)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.AudioManager.OnAudioFocusChangeListener"/></param>
            /// <param name="arg1"><see cref="Android.Os.Handler"/></param>
            /// <returns><see cref="Android.Media.AudioFocusRequest.Builder"/></returns>
            public Android.Media.AudioFocusRequest.Builder SetOnAudioFocusChangeListener(Android.Media.AudioManager.OnAudioFocusChangeListener arg0, Android.Os.Handler arg1)
            {
                return IExecuteWithSignature<Android.Media.AudioFocusRequest.Builder>("setOnAudioFocusChangeListener", "(Landroid/media/AudioManager$OnAudioFocusChangeListener;Landroid/os/Handler;)Landroid/media/AudioFocusRequest$Builder;", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioFocusRequest.Builder.html#setOnAudioFocusChangeListener(android.media.AudioManager.OnAudioFocusChangeListener)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.AudioManager.OnAudioFocusChangeListener"/></param>
            /// <returns><see cref="Android.Media.AudioFocusRequest.Builder"/></returns>
            public Android.Media.AudioFocusRequest.Builder SetOnAudioFocusChangeListener(Android.Media.AudioManager.OnAudioFocusChangeListener arg0)
            {
                return IExecuteWithSignature<Android.Media.AudioFocusRequest.Builder>("setOnAudioFocusChangeListener", "(Landroid/media/AudioManager$OnAudioFocusChangeListener;)Landroid/media/AudioFocusRequest$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioFocusRequest.Builder.html#setWillPauseWhenDucked(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Media.AudioFocusRequest.Builder"/></returns>
            public Android.Media.AudioFocusRequest.Builder SetWillPauseWhenDucked(bool arg0)
            {
                return IExecuteWithSignature<Android.Media.AudioFocusRequest.Builder>("setWillPauseWhenDucked", "(Z)Landroid/media/AudioFocusRequest$Builder;", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
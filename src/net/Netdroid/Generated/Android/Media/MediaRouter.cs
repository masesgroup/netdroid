/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media
{
    #region MediaRouter
    public partial class MediaRouter
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter.html#CALLBACK_FLAG_PERFORM_ACTIVE_SCAN"/>
        /// </summary>
        public static int CALLBACK_FLAG_PERFORM_ACTIVE_SCAN { get { if (!_CALLBACK_FLAG_PERFORM_ACTIVE_SCANReady) { _CALLBACK_FLAG_PERFORM_ACTIVE_SCANContent = SGetField<int>(LocalBridgeClazz, "CALLBACK_FLAG_PERFORM_ACTIVE_SCAN"); _CALLBACK_FLAG_PERFORM_ACTIVE_SCANReady = true; } return _CALLBACK_FLAG_PERFORM_ACTIVE_SCANContent; } }
        private static int _CALLBACK_FLAG_PERFORM_ACTIVE_SCANContent = default;
        private static bool _CALLBACK_FLAG_PERFORM_ACTIVE_SCANReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter.html#CALLBACK_FLAG_UNFILTERED_EVENTS"/>
        /// </summary>
        public static int CALLBACK_FLAG_UNFILTERED_EVENTS { get { if (!_CALLBACK_FLAG_UNFILTERED_EVENTSReady) { _CALLBACK_FLAG_UNFILTERED_EVENTSContent = SGetField<int>(LocalBridgeClazz, "CALLBACK_FLAG_UNFILTERED_EVENTS"); _CALLBACK_FLAG_UNFILTERED_EVENTSReady = true; } return _CALLBACK_FLAG_UNFILTERED_EVENTSContent; } }
        private static int _CALLBACK_FLAG_UNFILTERED_EVENTSContent = default;
        private static bool _CALLBACK_FLAG_UNFILTERED_EVENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter.html#ROUTE_TYPE_LIVE_AUDIO"/>
        /// </summary>
        public static int ROUTE_TYPE_LIVE_AUDIO { get { if (!_ROUTE_TYPE_LIVE_AUDIOReady) { _ROUTE_TYPE_LIVE_AUDIOContent = SGetField<int>(LocalBridgeClazz, "ROUTE_TYPE_LIVE_AUDIO"); _ROUTE_TYPE_LIVE_AUDIOReady = true; } return _ROUTE_TYPE_LIVE_AUDIOContent; } }
        private static int _ROUTE_TYPE_LIVE_AUDIOContent = default;
        private static bool _ROUTE_TYPE_LIVE_AUDIOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter.html#ROUTE_TYPE_LIVE_VIDEO"/>
        /// </summary>
        public static int ROUTE_TYPE_LIVE_VIDEO { get { if (!_ROUTE_TYPE_LIVE_VIDEOReady) { _ROUTE_TYPE_LIVE_VIDEOContent = SGetField<int>(LocalBridgeClazz, "ROUTE_TYPE_LIVE_VIDEO"); _ROUTE_TYPE_LIVE_VIDEOReady = true; } return _ROUTE_TYPE_LIVE_VIDEOContent; } }
        private static int _ROUTE_TYPE_LIVE_VIDEOContent = default;
        private static bool _ROUTE_TYPE_LIVE_VIDEOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter.html#ROUTE_TYPE_USER"/>
        /// </summary>
        public static int ROUTE_TYPE_USER { get { if (!_ROUTE_TYPE_USERReady) { _ROUTE_TYPE_USERContent = SGetField<int>(LocalBridgeClazz, "ROUTE_TYPE_USER"); _ROUTE_TYPE_USERReady = true; } return _ROUTE_TYPE_USERContent; } }
        private static int _ROUTE_TYPE_USERContent = default;
        private static bool _ROUTE_TYPE_USERReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter.html#getCategoryCount()"/> 
        /// </summary>
        public int CategoryCount
        {
            get { return IExecuteWithSignature<int>("getCategoryCount", "()I"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter.html#getDefaultRoute()"/> 
        /// </summary>
        public Android.Media.MediaRouter.RouteInfo DefaultRoute
        {
            get { return IExecuteWithSignature<Android.Media.MediaRouter.RouteInfo>("getDefaultRoute", "()Landroid/media/MediaRouter$RouteInfo;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter.html#getRouteCount()"/> 
        /// </summary>
        public int RouteCount
        {
            get { return IExecuteWithSignature<int>("getRouteCount", "()I"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter.html#createRouteCategory(int,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <returns><see cref="Android.Media.MediaRouter.RouteCategory"/></returns>
        public Android.Media.MediaRouter.RouteCategory CreateRouteCategory(int arg0, bool arg1)
        {
            return IExecute<Android.Media.MediaRouter.RouteCategory>("createRouteCategory", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter.html#createRouteCategory(java.lang.CharSequence,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <returns><see cref="Android.Media.MediaRouter.RouteCategory"/></returns>
        public Android.Media.MediaRouter.RouteCategory CreateRouteCategory(Java.Lang.CharSequence arg0, bool arg1)
        {
            return IExecute<Android.Media.MediaRouter.RouteCategory>("createRouteCategory", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter.html#getCategoryAt(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Media.MediaRouter.RouteCategory"/></returns>
        public Android.Media.MediaRouter.RouteCategory GetCategoryAt(int arg0)
        {
            return IExecuteWithSignature<Android.Media.MediaRouter.RouteCategory>("getCategoryAt", "(I)Landroid/media/MediaRouter$RouteCategory;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter.html#getRouteAt(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Media.MediaRouter.RouteInfo"/></returns>
        public Android.Media.MediaRouter.RouteInfo GetRouteAt(int arg0)
        {
            return IExecuteWithSignature<Android.Media.MediaRouter.RouteInfo>("getRouteAt", "(I)Landroid/media/MediaRouter$RouteInfo;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter.html#getSelectedRoute(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Media.MediaRouter.RouteInfo"/></returns>
        public Android.Media.MediaRouter.RouteInfo GetSelectedRoute(int arg0)
        {
            return IExecuteWithSignature<Android.Media.MediaRouter.RouteInfo>("getSelectedRoute", "(I)Landroid/media/MediaRouter$RouteInfo;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter.html#createUserRoute(android.media.MediaRouter.RouteCategory)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaRouter.RouteCategory"/></param>
        /// <returns><see cref="Android.Media.MediaRouter.UserRouteInfo"/></returns>
        public Android.Media.MediaRouter.UserRouteInfo CreateUserRoute(Android.Media.MediaRouter.RouteCategory arg0)
        {
            return IExecuteWithSignature<Android.Media.MediaRouter.UserRouteInfo>("createUserRoute", "(Landroid/media/MediaRouter$RouteCategory;)Landroid/media/MediaRouter$UserRouteInfo;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter.html#addCallback(int,android.media.MediaRouter.Callback,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Media.MediaRouter.Callback"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void AddCallback(int arg0, Android.Media.MediaRouter.Callback arg1, int arg2)
        {
            IExecute("addCallback", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter.html#addCallback(int,android.media.MediaRouter.Callback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Media.MediaRouter.Callback"/></param>
        public void AddCallback(int arg0, Android.Media.MediaRouter.Callback arg1)
        {
            IExecute("addCallback", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter.html#addUserRoute(android.media.MediaRouter.UserRouteInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaRouter.UserRouteInfo"/></param>
        public void AddUserRoute(Android.Media.MediaRouter.UserRouteInfo arg0)
        {
            IExecuteWithSignature("addUserRoute", "(Landroid/media/MediaRouter$UserRouteInfo;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter.html#clearUserRoutes()"/>
        /// </summary>
        public void ClearUserRoutes()
        {
            IExecuteWithSignature("clearUserRoutes", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter.html#removeCallback(android.media.MediaRouter.Callback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaRouter.Callback"/></param>
        public void RemoveCallback(Android.Media.MediaRouter.Callback arg0)
        {
            IExecuteWithSignature("removeCallback", "(Landroid/media/MediaRouter$Callback;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter.html#removeUserRoute(android.media.MediaRouter.UserRouteInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaRouter.UserRouteInfo"/></param>
        public void RemoveUserRoute(Android.Media.MediaRouter.UserRouteInfo arg0)
        {
            IExecuteWithSignature("removeUserRoute", "(Landroid/media/MediaRouter$UserRouteInfo;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaRouter.html#selectRoute(int,android.media.MediaRouter.RouteInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Media.MediaRouter.RouteInfo"/></param>
        public void SelectRoute(int arg0, Android.Media.MediaRouter.RouteInfo arg1)
        {
            IExecute("selectRoute", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region Callback
        public partial class Callback
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.Callback.html#onRouteAdded(android.media.MediaRouter,android.media.MediaRouter.RouteInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaRouter"/></param>
            /// <param name="arg1"><see cref="Android.Media.MediaRouter.RouteInfo"/></param>
            public void OnRouteAdded(Android.Media.MediaRouter arg0, Android.Media.MediaRouter.RouteInfo arg1)
            {
                IExecute("onRouteAdded", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.Callback.html#onRouteChanged(android.media.MediaRouter,android.media.MediaRouter.RouteInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaRouter"/></param>
            /// <param name="arg1"><see cref="Android.Media.MediaRouter.RouteInfo"/></param>
            public void OnRouteChanged(Android.Media.MediaRouter arg0, Android.Media.MediaRouter.RouteInfo arg1)
            {
                IExecute("onRouteChanged", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.Callback.html#onRouteGrouped(android.media.MediaRouter,android.media.MediaRouter.RouteInfo,android.media.MediaRouter.RouteGroup,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaRouter"/></param>
            /// <param name="arg1"><see cref="Android.Media.MediaRouter.RouteInfo"/></param>
            /// <param name="arg2"><see cref="Android.Media.MediaRouter.RouteGroup"/></param>
            /// <param name="arg3"><see cref="int"/></param>
            public void OnRouteGrouped(Android.Media.MediaRouter arg0, Android.Media.MediaRouter.RouteInfo arg1, Android.Media.MediaRouter.RouteGroup arg2, int arg3)
            {
                IExecute("onRouteGrouped", arg0, arg1, arg2, arg3);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.Callback.html#onRouteRemoved(android.media.MediaRouter,android.media.MediaRouter.RouteInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaRouter"/></param>
            /// <param name="arg1"><see cref="Android.Media.MediaRouter.RouteInfo"/></param>
            public void OnRouteRemoved(Android.Media.MediaRouter arg0, Android.Media.MediaRouter.RouteInfo arg1)
            {
                IExecute("onRouteRemoved", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.Callback.html#onRouteSelected(android.media.MediaRouter,int,android.media.MediaRouter.RouteInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaRouter"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="Android.Media.MediaRouter.RouteInfo"/></param>
            public void OnRouteSelected(Android.Media.MediaRouter arg0, int arg1, Android.Media.MediaRouter.RouteInfo arg2)
            {
                IExecute("onRouteSelected", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.Callback.html#onRouteUngrouped(android.media.MediaRouter,android.media.MediaRouter.RouteInfo,android.media.MediaRouter.RouteGroup)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaRouter"/></param>
            /// <param name="arg1"><see cref="Android.Media.MediaRouter.RouteInfo"/></param>
            /// <param name="arg2"><see cref="Android.Media.MediaRouter.RouteGroup"/></param>
            public void OnRouteUngrouped(Android.Media.MediaRouter arg0, Android.Media.MediaRouter.RouteInfo arg1, Android.Media.MediaRouter.RouteGroup arg2)
            {
                IExecute("onRouteUngrouped", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.Callback.html#onRouteUnselected(android.media.MediaRouter,int,android.media.MediaRouter.RouteInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaRouter"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="Android.Media.MediaRouter.RouteInfo"/></param>
            public void OnRouteUnselected(Android.Media.MediaRouter arg0, int arg1, Android.Media.MediaRouter.RouteInfo arg2)
            {
                IExecute("onRouteUnselected", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.Callback.html#onRouteVolumeChanged(android.media.MediaRouter,android.media.MediaRouter.RouteInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaRouter"/></param>
            /// <param name="arg1"><see cref="Android.Media.MediaRouter.RouteInfo"/></param>
            public void OnRouteVolumeChanged(Android.Media.MediaRouter arg0, Android.Media.MediaRouter.RouteInfo arg1)
            {
                IExecute("onRouteVolumeChanged", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.Callback.html#onRoutePresentationDisplayChanged(android.media.MediaRouter,android.media.MediaRouter.RouteInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaRouter"/></param>
            /// <param name="arg1"><see cref="Android.Media.MediaRouter.RouteInfo"/></param>
            public void OnRoutePresentationDisplayChanged(Android.Media.MediaRouter arg0, Android.Media.MediaRouter.RouteInfo arg1)
            {
                IExecute("onRoutePresentationDisplayChanged", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region RouteCategory
        public partial class RouteCategory
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteCategory.html#getName()"/> 
            /// </summary>
            public Java.Lang.CharSequence Name
            {
                get { return IExecuteWithSignature<Java.Lang.CharSequence>("getName", "()Ljava/lang/CharSequence;"); }
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteCategory.html#getSupportedTypes()"/> 
            /// </summary>
            public int SupportedTypes
            {
                get { return IExecuteWithSignature<int>("getSupportedTypes", "()I"); }
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteCategory.html#isGroupable()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsGroupable()
            {
                return IExecuteWithSignature<bool>("isGroupable", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteCategory.html#getName(android.content.Context)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.Context"/></param>
            /// <returns><see cref="Java.Lang.CharSequence"/></returns>
            public Java.Lang.CharSequence GetName(Android.Content.Context arg0)
            {
                return IExecuteWithSignature<Java.Lang.CharSequence>("getName", "(Landroid/content/Context;)Ljava/lang/CharSequence;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteCategory.html#getRoutes(java.util.List)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.List"/></param>
            /// <returns><see cref="Java.Util.List"/></returns>
            public Java.Util.List<Android.Media.MediaRouter.RouteInfo> GetRoutes(Java.Util.List<Android.Media.MediaRouter.RouteInfo> arg0)
            {
                return IExecuteWithSignature<Java.Util.List<Android.Media.MediaRouter.RouteInfo>>("getRoutes", "(Ljava/util/List;)Ljava/util/List;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region RouteGroup
        public partial class RouteGroup
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteGroup.html#getRouteCount()"/> 
            /// </summary>
            public int RouteCount
            {
                get { return IExecuteWithSignature<int>("getRouteCount", "()I"); }
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteGroup.html#getRouteAt(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Media.MediaRouter.RouteInfo"/></returns>
            public Android.Media.MediaRouter.RouteInfo GetRouteAt(int arg0)
            {
                return IExecuteWithSignature<Android.Media.MediaRouter.RouteInfo>("getRouteAt", "(I)Landroid/media/MediaRouter$RouteInfo;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteGroup.html#addRoute(android.media.MediaRouter.RouteInfo,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaRouter.RouteInfo"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void AddRoute(Android.Media.MediaRouter.RouteInfo arg0, int arg1)
            {
                IExecute("addRoute", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteGroup.html#addRoute(android.media.MediaRouter.RouteInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaRouter.RouteInfo"/></param>
            public void AddRoute(Android.Media.MediaRouter.RouteInfo arg0)
            {
                IExecuteWithSignature("addRoute", "(Landroid/media/MediaRouter$RouteInfo;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteGroup.html#removeRoute(android.media.MediaRouter.RouteInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaRouter.RouteInfo"/></param>
            public void RemoveRoute(Android.Media.MediaRouter.RouteInfo arg0)
            {
                IExecuteWithSignature("removeRoute", "(Landroid/media/MediaRouter$RouteInfo;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteGroup.html#removeRoute(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void RemoveRoute(int arg0)
            {
                IExecuteWithSignature("removeRoute", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteGroup.html#setIconDrawable(android.graphics.drawable.Drawable)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.Drawable.Drawable"/></param>
            public void SetIconDrawable(Android.Graphics.Drawable.Drawable arg0)
            {
                IExecuteWithSignature("setIconDrawable", "(Landroid/graphics/drawable/Drawable;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteGroup.html#setIconResource(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void SetIconResource(int arg0)
            {
                IExecuteWithSignature("setIconResource", "(I)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region RouteInfo
        public partial class RouteInfo
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#DEVICE_TYPE_BLUETOOTH"/>
            /// </summary>
            public static int DEVICE_TYPE_BLUETOOTH { get { if (!_DEVICE_TYPE_BLUETOOTHReady) { _DEVICE_TYPE_BLUETOOTHContent = SGetField<int>(LocalBridgeClazz, "DEVICE_TYPE_BLUETOOTH"); _DEVICE_TYPE_BLUETOOTHReady = true; } return _DEVICE_TYPE_BLUETOOTHContent; } }
            private static int _DEVICE_TYPE_BLUETOOTHContent = default;
            private static bool _DEVICE_TYPE_BLUETOOTHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#DEVICE_TYPE_SPEAKER"/>
            /// </summary>
            public static int DEVICE_TYPE_SPEAKER { get { if (!_DEVICE_TYPE_SPEAKERReady) { _DEVICE_TYPE_SPEAKERContent = SGetField<int>(LocalBridgeClazz, "DEVICE_TYPE_SPEAKER"); _DEVICE_TYPE_SPEAKERReady = true; } return _DEVICE_TYPE_SPEAKERContent; } }
            private static int _DEVICE_TYPE_SPEAKERContent = default;
            private static bool _DEVICE_TYPE_SPEAKERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#DEVICE_TYPE_TV"/>
            /// </summary>
            public static int DEVICE_TYPE_TV { get { if (!_DEVICE_TYPE_TVReady) { _DEVICE_TYPE_TVContent = SGetField<int>(LocalBridgeClazz, "DEVICE_TYPE_TV"); _DEVICE_TYPE_TVReady = true; } return _DEVICE_TYPE_TVContent; } }
            private static int _DEVICE_TYPE_TVContent = default;
            private static bool _DEVICE_TYPE_TVReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#DEVICE_TYPE_UNKNOWN"/>
            /// </summary>
            public static int DEVICE_TYPE_UNKNOWN { get { if (!_DEVICE_TYPE_UNKNOWNReady) { _DEVICE_TYPE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "DEVICE_TYPE_UNKNOWN"); _DEVICE_TYPE_UNKNOWNReady = true; } return _DEVICE_TYPE_UNKNOWNContent; } }
            private static int _DEVICE_TYPE_UNKNOWNContent = default;
            private static bool _DEVICE_TYPE_UNKNOWNReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#PLAYBACK_TYPE_LOCAL"/>
            /// </summary>
            public static int PLAYBACK_TYPE_LOCAL { get { if (!_PLAYBACK_TYPE_LOCALReady) { _PLAYBACK_TYPE_LOCALContent = SGetField<int>(LocalBridgeClazz, "PLAYBACK_TYPE_LOCAL"); _PLAYBACK_TYPE_LOCALReady = true; } return _PLAYBACK_TYPE_LOCALContent; } }
            private static int _PLAYBACK_TYPE_LOCALContent = default;
            private static bool _PLAYBACK_TYPE_LOCALReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#PLAYBACK_TYPE_REMOTE"/>
            /// </summary>
            public static int PLAYBACK_TYPE_REMOTE { get { if (!_PLAYBACK_TYPE_REMOTEReady) { _PLAYBACK_TYPE_REMOTEContent = SGetField<int>(LocalBridgeClazz, "PLAYBACK_TYPE_REMOTE"); _PLAYBACK_TYPE_REMOTEReady = true; } return _PLAYBACK_TYPE_REMOTEContent; } }
            private static int _PLAYBACK_TYPE_REMOTEContent = default;
            private static bool _PLAYBACK_TYPE_REMOTEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#PLAYBACK_VOLUME_FIXED"/>
            /// </summary>
            public static int PLAYBACK_VOLUME_FIXED { get { if (!_PLAYBACK_VOLUME_FIXEDReady) { _PLAYBACK_VOLUME_FIXEDContent = SGetField<int>(LocalBridgeClazz, "PLAYBACK_VOLUME_FIXED"); _PLAYBACK_VOLUME_FIXEDReady = true; } return _PLAYBACK_VOLUME_FIXEDContent; } }
            private static int _PLAYBACK_VOLUME_FIXEDContent = default;
            private static bool _PLAYBACK_VOLUME_FIXEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#PLAYBACK_VOLUME_VARIABLE"/>
            /// </summary>
            public static int PLAYBACK_VOLUME_VARIABLE { get { if (!_PLAYBACK_VOLUME_VARIABLEReady) { _PLAYBACK_VOLUME_VARIABLEContent = SGetField<int>(LocalBridgeClazz, "PLAYBACK_VOLUME_VARIABLE"); _PLAYBACK_VOLUME_VARIABLEReady = true; } return _PLAYBACK_VOLUME_VARIABLEContent; } }
            private static int _PLAYBACK_VOLUME_VARIABLEContent = default;
            private static bool _PLAYBACK_VOLUME_VARIABLEReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#getCategory()"/> 
            /// </summary>
            public Android.Media.MediaRouter.RouteCategory Category
            {
                get { return IExecuteWithSignature<Android.Media.MediaRouter.RouteCategory>("getCategory", "()Landroid/media/MediaRouter$RouteCategory;"); }
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#getDescription()"/> 
            /// </summary>
            public Java.Lang.CharSequence Description
            {
                get { return IExecuteWithSignature<Java.Lang.CharSequence>("getDescription", "()Ljava/lang/CharSequence;"); }
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#getDeviceType()"/> 
            /// </summary>
            public int DeviceType
            {
                get { return IExecuteWithSignature<int>("getDeviceType", "()I"); }
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#getGroup()"/> 
            /// </summary>
            public Android.Media.MediaRouter.RouteGroup Group
            {
                get { return IExecuteWithSignature<Android.Media.MediaRouter.RouteGroup>("getGroup", "()Landroid/media/MediaRouter$RouteGroup;"); }
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#getIconDrawable()"/> 
            /// </summary>
            public Android.Graphics.Drawable.Drawable IconDrawable
            {
                get { return IExecuteWithSignature<Android.Graphics.Drawable.Drawable>("getIconDrawable", "()Landroid/graphics/drawable/Drawable;"); }
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#getName()"/> 
            /// </summary>
            public Java.Lang.CharSequence Name
            {
                get { return IExecuteWithSignature<Java.Lang.CharSequence>("getName", "()Ljava/lang/CharSequence;"); }
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#getPlaybackStream()"/> 
            /// </summary>
            public int PlaybackStream
            {
                get { return IExecuteWithSignature<int>("getPlaybackStream", "()I"); }
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#getPlaybackType()"/> 
            /// </summary>
            public int PlaybackType
            {
                get { return IExecuteWithSignature<int>("getPlaybackType", "()I"); }
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#getPresentationDisplay()"/> 
            /// </summary>
            public Android.View.Display PresentationDisplay
            {
                get { return IExecuteWithSignature<Android.View.Display>("getPresentationDisplay", "()Landroid/view/Display;"); }
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#getStatus()"/> 
            /// </summary>
            public Java.Lang.CharSequence Status
            {
                get { return IExecuteWithSignature<Java.Lang.CharSequence>("getStatus", "()Ljava/lang/CharSequence;"); }
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#getSupportedTypes()"/> 
            /// </summary>
            public int SupportedTypes
            {
                get { return IExecuteWithSignature<int>("getSupportedTypes", "()I"); }
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#getTag()"/> <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#setTag(java.lang.Object)"/>
            /// </summary>
            public object Tag
            {
                get { return IExecuteWithSignature("getTag", "()Ljava/lang/Object;"); } set { IExecuteWithSignature("setTag", "(Ljava/lang/Object;)V", value); }
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#getVolume()"/> 
            /// </summary>
            public int Volume
            {
                get { return IExecuteWithSignature<int>("getVolume", "()I"); }
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#getVolumeHandling()"/> 
            /// </summary>
            public int VolumeHandling
            {
                get { return IExecuteWithSignature<int>("getVolumeHandling", "()I"); }
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#getVolumeMax()"/> 
            /// </summary>
            public int VolumeMax
            {
                get { return IExecuteWithSignature<int>("getVolumeMax", "()I"); }
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#isConnecting()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsConnecting()
            {
                return IExecuteWithSignature<bool>("isConnecting", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#isEnabled()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsEnabled()
            {
                return IExecuteWithSignature<bool>("isEnabled", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#getName(android.content.Context)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.Context"/></param>
            /// <returns><see cref="Java.Lang.CharSequence"/></returns>
            public Java.Lang.CharSequence GetName(Android.Content.Context arg0)
            {
                return IExecuteWithSignature<Java.Lang.CharSequence>("getName", "(Landroid/content/Context;)Ljava/lang/CharSequence;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#requestSetVolume(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void RequestSetVolume(int arg0)
            {
                IExecuteWithSignature("requestSetVolume", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#requestUpdateVolume(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void RequestUpdateVolume(int arg0)
            {
                IExecuteWithSignature("requestUpdateVolume", "(I)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region SimpleCallback
        public partial class SimpleCallback
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region UserRouteInfo
        public partial class UserRouteInfo
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.UserRouteInfo.html#getRemoteControlClient()"/> <see href="https://developer.android.com/reference/android/media/MediaRouter.UserRouteInfo.html#setRemoteControlClient(android.media.RemoteControlClient)"/>
            /// </summary>
            public Android.Media.RemoteControlClient RemoteControlClient
            {
                get { return IExecuteWithSignature<Android.Media.RemoteControlClient>("getRemoteControlClient", "()Landroid/media/RemoteControlClient;"); } set { IExecuteWithSignature("setRemoteControlClient", "(Landroid/media/RemoteControlClient;)V", value); }
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.UserRouteInfo.html#setDescription(java.lang.CharSequence)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
            public void SetDescription(Java.Lang.CharSequence arg0)
            {
                IExecuteWithSignature("setDescription", "(Ljava/lang/CharSequence;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.UserRouteInfo.html#setIconDrawable(android.graphics.drawable.Drawable)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.Drawable.Drawable"/></param>
            public void SetIconDrawable(Android.Graphics.Drawable.Drawable arg0)
            {
                IExecuteWithSignature("setIconDrawable", "(Landroid/graphics/drawable/Drawable;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.UserRouteInfo.html#setIconResource(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void SetIconResource(int arg0)
            {
                IExecuteWithSignature("setIconResource", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.UserRouteInfo.html#setName(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void SetName(int arg0)
            {
                IExecuteWithSignature("setName", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.UserRouteInfo.html#setName(java.lang.CharSequence)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
            public void SetName(Java.Lang.CharSequence arg0)
            {
                IExecuteWithSignature("setName", "(Ljava/lang/CharSequence;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.UserRouteInfo.html#setPlaybackStream(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void SetPlaybackStream(int arg0)
            {
                IExecuteWithSignature("setPlaybackStream", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.UserRouteInfo.html#setPlaybackType(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void SetPlaybackType(int arg0)
            {
                IExecuteWithSignature("setPlaybackType", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.UserRouteInfo.html#setStatus(java.lang.CharSequence)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
            public void SetStatus(Java.Lang.CharSequence arg0)
            {
                IExecuteWithSignature("setStatus", "(Ljava/lang/CharSequence;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.UserRouteInfo.html#setVolume(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void SetVolume(int arg0)
            {
                IExecuteWithSignature("setVolume", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.UserRouteInfo.html#setVolumeCallback(android.media.MediaRouter.VolumeCallback)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaRouter.VolumeCallback"/></param>
            public void SetVolumeCallback(Android.Media.MediaRouter.VolumeCallback arg0)
            {
                IExecuteWithSignature("setVolumeCallback", "(Landroid/media/MediaRouter$VolumeCallback;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.UserRouteInfo.html#setVolumeHandling(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void SetVolumeHandling(int arg0)
            {
                IExecuteWithSignature("setVolumeHandling", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.UserRouteInfo.html#setVolumeMax(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void SetVolumeMax(int arg0)
            {
                IExecuteWithSignature("setVolumeMax", "(I)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region VolumeCallback
        public partial class VolumeCallback
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.VolumeCallback.html#onVolumeSetRequest(android.media.MediaRouter.RouteInfo,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaRouter.RouteInfo"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void OnVolumeSetRequest(Android.Media.MediaRouter.RouteInfo arg0, int arg1)
            {
                IExecute("onVolumeSetRequest", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaRouter.VolumeCallback.html#onVolumeUpdateRequest(android.media.MediaRouter.RouteInfo,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaRouter.RouteInfo"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void OnVolumeUpdateRequest(Android.Media.MediaRouter.RouteInfo arg0, int arg1)
            {
                IExecute("onVolumeUpdateRequest", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
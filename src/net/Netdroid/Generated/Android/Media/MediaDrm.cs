/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.6.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media
{
    #region MediaDrm
    public partial class MediaDrm
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#%3Cinit%3E(java.util.UUID)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.UUID"/></param>
        /// <exception cref="Android.Media.UnsupportedSchemeException"/>
        public MediaDrm(Java.Util.UUID arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#EVENT_KEY_EXPIRED"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int EVENT_KEY_EXPIRED { get { if (!_EVENT_KEY_EXPIREDReady) { _EVENT_KEY_EXPIREDContent = SGetField<int>(LocalBridgeClazz, "EVENT_KEY_EXPIRED"); _EVENT_KEY_EXPIREDReady = true; } return _EVENT_KEY_EXPIREDContent; } }
        private static int _EVENT_KEY_EXPIREDContent = default;
        private static bool _EVENT_KEY_EXPIREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#EVENT_KEY_REQUIRED"/>
        /// </summary>
        public static int EVENT_KEY_REQUIRED { get { if (!_EVENT_KEY_REQUIREDReady) { _EVENT_KEY_REQUIREDContent = SGetField<int>(LocalBridgeClazz, "EVENT_KEY_REQUIRED"); _EVENT_KEY_REQUIREDReady = true; } return _EVENT_KEY_REQUIREDContent; } }
        private static int _EVENT_KEY_REQUIREDContent = default;
        private static bool _EVENT_KEY_REQUIREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#EVENT_PROVISION_REQUIRED"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int EVENT_PROVISION_REQUIRED { get { if (!_EVENT_PROVISION_REQUIREDReady) { _EVENT_PROVISION_REQUIREDContent = SGetField<int>(LocalBridgeClazz, "EVENT_PROVISION_REQUIRED"); _EVENT_PROVISION_REQUIREDReady = true; } return _EVENT_PROVISION_REQUIREDContent; } }
        private static int _EVENT_PROVISION_REQUIREDContent = default;
        private static bool _EVENT_PROVISION_REQUIREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#EVENT_SESSION_RECLAIMED"/>
        /// </summary>
        public static int EVENT_SESSION_RECLAIMED { get { if (!_EVENT_SESSION_RECLAIMEDReady) { _EVENT_SESSION_RECLAIMEDContent = SGetField<int>(LocalBridgeClazz, "EVENT_SESSION_RECLAIMED"); _EVENT_SESSION_RECLAIMEDReady = true; } return _EVENT_SESSION_RECLAIMEDContent; } }
        private static int _EVENT_SESSION_RECLAIMEDContent = default;
        private static bool _EVENT_SESSION_RECLAIMEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#EVENT_VENDOR_DEFINED"/>
        /// </summary>
        public static int EVENT_VENDOR_DEFINED { get { if (!_EVENT_VENDOR_DEFINEDReady) { _EVENT_VENDOR_DEFINEDContent = SGetField<int>(LocalBridgeClazz, "EVENT_VENDOR_DEFINED"); _EVENT_VENDOR_DEFINEDReady = true; } return _EVENT_VENDOR_DEFINEDContent; } }
        private static int _EVENT_VENDOR_DEFINEDContent = default;
        private static bool _EVENT_VENDOR_DEFINEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#HDCP_LEVEL_UNKNOWN"/>
        /// </summary>
        public static int HDCP_LEVEL_UNKNOWN { get { if (!_HDCP_LEVEL_UNKNOWNReady) { _HDCP_LEVEL_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "HDCP_LEVEL_UNKNOWN"); _HDCP_LEVEL_UNKNOWNReady = true; } return _HDCP_LEVEL_UNKNOWNContent; } }
        private static int _HDCP_LEVEL_UNKNOWNContent = default;
        private static bool _HDCP_LEVEL_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#HDCP_NO_DIGITAL_OUTPUT"/>
        /// </summary>
        public static int HDCP_NO_DIGITAL_OUTPUT { get { if (!_HDCP_NO_DIGITAL_OUTPUTReady) { _HDCP_NO_DIGITAL_OUTPUTContent = SGetField<int>(LocalBridgeClazz, "HDCP_NO_DIGITAL_OUTPUT"); _HDCP_NO_DIGITAL_OUTPUTReady = true; } return _HDCP_NO_DIGITAL_OUTPUTContent; } }
        private static int _HDCP_NO_DIGITAL_OUTPUTContent = default;
        private static bool _HDCP_NO_DIGITAL_OUTPUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#HDCP_NONE"/>
        /// </summary>
        public static int HDCP_NONE { get { if (!_HDCP_NONEReady) { _HDCP_NONEContent = SGetField<int>(LocalBridgeClazz, "HDCP_NONE"); _HDCP_NONEReady = true; } return _HDCP_NONEContent; } }
        private static int _HDCP_NONEContent = default;
        private static bool _HDCP_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#HDCP_V1"/>
        /// </summary>
        public static int HDCP_V1 { get { if (!_HDCP_V1Ready) { _HDCP_V1Content = SGetField<int>(LocalBridgeClazz, "HDCP_V1"); _HDCP_V1Ready = true; } return _HDCP_V1Content; } }
        private static int _HDCP_V1Content = default;
        private static bool _HDCP_V1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#HDCP_V2"/>
        /// </summary>
        public static int HDCP_V2 { get { if (!_HDCP_V2Ready) { _HDCP_V2Content = SGetField<int>(LocalBridgeClazz, "HDCP_V2"); _HDCP_V2Ready = true; } return _HDCP_V2Content; } }
        private static int _HDCP_V2Content = default;
        private static bool _HDCP_V2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#HDCP_V2_1"/>
        /// </summary>
        public static int HDCP_V2_1 { get { if (!_HDCP_V2_1Ready) { _HDCP_V2_1Content = SGetField<int>(LocalBridgeClazz, "HDCP_V2_1"); _HDCP_V2_1Ready = true; } return _HDCP_V2_1Content; } }
        private static int _HDCP_V2_1Content = default;
        private static bool _HDCP_V2_1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#HDCP_V2_2"/>
        /// </summary>
        public static int HDCP_V2_2 { get { if (!_HDCP_V2_2Ready) { _HDCP_V2_2Content = SGetField<int>(LocalBridgeClazz, "HDCP_V2_2"); _HDCP_V2_2Ready = true; } return _HDCP_V2_2Content; } }
        private static int _HDCP_V2_2Content = default;
        private static bool _HDCP_V2_2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#HDCP_V2_3"/>
        /// </summary>
        public static int HDCP_V2_3 { get { if (!_HDCP_V2_3Ready) { _HDCP_V2_3Content = SGetField<int>(LocalBridgeClazz, "HDCP_V2_3"); _HDCP_V2_3Ready = true; } return _HDCP_V2_3Content; } }
        private static int _HDCP_V2_3Content = default;
        private static bool _HDCP_V2_3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#KEY_TYPE_OFFLINE"/>
        /// </summary>
        public static int KEY_TYPE_OFFLINE { get { if (!_KEY_TYPE_OFFLINEReady) { _KEY_TYPE_OFFLINEContent = SGetField<int>(LocalBridgeClazz, "KEY_TYPE_OFFLINE"); _KEY_TYPE_OFFLINEReady = true; } return _KEY_TYPE_OFFLINEContent; } }
        private static int _KEY_TYPE_OFFLINEContent = default;
        private static bool _KEY_TYPE_OFFLINEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#KEY_TYPE_RELEASE"/>
        /// </summary>
        public static int KEY_TYPE_RELEASE { get { if (!_KEY_TYPE_RELEASEReady) { _KEY_TYPE_RELEASEContent = SGetField<int>(LocalBridgeClazz, "KEY_TYPE_RELEASE"); _KEY_TYPE_RELEASEReady = true; } return _KEY_TYPE_RELEASEContent; } }
        private static int _KEY_TYPE_RELEASEContent = default;
        private static bool _KEY_TYPE_RELEASEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#KEY_TYPE_STREAMING"/>
        /// </summary>
        public static int KEY_TYPE_STREAMING { get { if (!_KEY_TYPE_STREAMINGReady) { _KEY_TYPE_STREAMINGContent = SGetField<int>(LocalBridgeClazz, "KEY_TYPE_STREAMING"); _KEY_TYPE_STREAMINGReady = true; } return _KEY_TYPE_STREAMINGContent; } }
        private static int _KEY_TYPE_STREAMINGContent = default;
        private static bool _KEY_TYPE_STREAMINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#OFFLINE_LICENSE_STATE_RELEASED"/>
        /// </summary>
        public static int OFFLINE_LICENSE_STATE_RELEASED { get { if (!_OFFLINE_LICENSE_STATE_RELEASEDReady) { _OFFLINE_LICENSE_STATE_RELEASEDContent = SGetField<int>(LocalBridgeClazz, "OFFLINE_LICENSE_STATE_RELEASED"); _OFFLINE_LICENSE_STATE_RELEASEDReady = true; } return _OFFLINE_LICENSE_STATE_RELEASEDContent; } }
        private static int _OFFLINE_LICENSE_STATE_RELEASEDContent = default;
        private static bool _OFFLINE_LICENSE_STATE_RELEASEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#OFFLINE_LICENSE_STATE_UNKNOWN"/>
        /// </summary>
        public static int OFFLINE_LICENSE_STATE_UNKNOWN { get { if (!_OFFLINE_LICENSE_STATE_UNKNOWNReady) { _OFFLINE_LICENSE_STATE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "OFFLINE_LICENSE_STATE_UNKNOWN"); _OFFLINE_LICENSE_STATE_UNKNOWNReady = true; } return _OFFLINE_LICENSE_STATE_UNKNOWNContent; } }
        private static int _OFFLINE_LICENSE_STATE_UNKNOWNContent = default;
        private static bool _OFFLINE_LICENSE_STATE_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#OFFLINE_LICENSE_STATE_USABLE"/>
        /// </summary>
        public static int OFFLINE_LICENSE_STATE_USABLE { get { if (!_OFFLINE_LICENSE_STATE_USABLEReady) { _OFFLINE_LICENSE_STATE_USABLEContent = SGetField<int>(LocalBridgeClazz, "OFFLINE_LICENSE_STATE_USABLE"); _OFFLINE_LICENSE_STATE_USABLEReady = true; } return _OFFLINE_LICENSE_STATE_USABLEContent; } }
        private static int _OFFLINE_LICENSE_STATE_USABLEContent = default;
        private static bool _OFFLINE_LICENSE_STATE_USABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#SECURITY_LEVEL_HW_SECURE_ALL"/>
        /// </summary>
        public static int SECURITY_LEVEL_HW_SECURE_ALL { get { if (!_SECURITY_LEVEL_HW_SECURE_ALLReady) { _SECURITY_LEVEL_HW_SECURE_ALLContent = SGetField<int>(LocalBridgeClazz, "SECURITY_LEVEL_HW_SECURE_ALL"); _SECURITY_LEVEL_HW_SECURE_ALLReady = true; } return _SECURITY_LEVEL_HW_SECURE_ALLContent; } }
        private static int _SECURITY_LEVEL_HW_SECURE_ALLContent = default;
        private static bool _SECURITY_LEVEL_HW_SECURE_ALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#SECURITY_LEVEL_HW_SECURE_CRYPTO"/>
        /// </summary>
        public static int SECURITY_LEVEL_HW_SECURE_CRYPTO { get { if (!_SECURITY_LEVEL_HW_SECURE_CRYPTOReady) { _SECURITY_LEVEL_HW_SECURE_CRYPTOContent = SGetField<int>(LocalBridgeClazz, "SECURITY_LEVEL_HW_SECURE_CRYPTO"); _SECURITY_LEVEL_HW_SECURE_CRYPTOReady = true; } return _SECURITY_LEVEL_HW_SECURE_CRYPTOContent; } }
        private static int _SECURITY_LEVEL_HW_SECURE_CRYPTOContent = default;
        private static bool _SECURITY_LEVEL_HW_SECURE_CRYPTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#SECURITY_LEVEL_HW_SECURE_DECODE"/>
        /// </summary>
        public static int SECURITY_LEVEL_HW_SECURE_DECODE { get { if (!_SECURITY_LEVEL_HW_SECURE_DECODEReady) { _SECURITY_LEVEL_HW_SECURE_DECODEContent = SGetField<int>(LocalBridgeClazz, "SECURITY_LEVEL_HW_SECURE_DECODE"); _SECURITY_LEVEL_HW_SECURE_DECODEReady = true; } return _SECURITY_LEVEL_HW_SECURE_DECODEContent; } }
        private static int _SECURITY_LEVEL_HW_SECURE_DECODEContent = default;
        private static bool _SECURITY_LEVEL_HW_SECURE_DECODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#SECURITY_LEVEL_SW_SECURE_CRYPTO"/>
        /// </summary>
        public static int SECURITY_LEVEL_SW_SECURE_CRYPTO { get { if (!_SECURITY_LEVEL_SW_SECURE_CRYPTOReady) { _SECURITY_LEVEL_SW_SECURE_CRYPTOContent = SGetField<int>(LocalBridgeClazz, "SECURITY_LEVEL_SW_SECURE_CRYPTO"); _SECURITY_LEVEL_SW_SECURE_CRYPTOReady = true; } return _SECURITY_LEVEL_SW_SECURE_CRYPTOContent; } }
        private static int _SECURITY_LEVEL_SW_SECURE_CRYPTOContent = default;
        private static bool _SECURITY_LEVEL_SW_SECURE_CRYPTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#SECURITY_LEVEL_SW_SECURE_DECODE"/>
        /// </summary>
        public static int SECURITY_LEVEL_SW_SECURE_DECODE { get { if (!_SECURITY_LEVEL_SW_SECURE_DECODEReady) { _SECURITY_LEVEL_SW_SECURE_DECODEContent = SGetField<int>(LocalBridgeClazz, "SECURITY_LEVEL_SW_SECURE_DECODE"); _SECURITY_LEVEL_SW_SECURE_DECODEReady = true; } return _SECURITY_LEVEL_SW_SECURE_DECODEContent; } }
        private static int _SECURITY_LEVEL_SW_SECURE_DECODEContent = default;
        private static bool _SECURITY_LEVEL_SW_SECURE_DECODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#SECURITY_LEVEL_UNKNOWN"/>
        /// </summary>
        public static int SECURITY_LEVEL_UNKNOWN { get { if (!_SECURITY_LEVEL_UNKNOWNReady) { _SECURITY_LEVEL_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "SECURITY_LEVEL_UNKNOWN"); _SECURITY_LEVEL_UNKNOWNReady = true; } return _SECURITY_LEVEL_UNKNOWNContent; } }
        private static int _SECURITY_LEVEL_UNKNOWNContent = default;
        private static bool _SECURITY_LEVEL_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#PROPERTY_ALGORITHMS"/>
        /// </summary>
        public static Java.Lang.String PROPERTY_ALGORITHMS { get { if (!_PROPERTY_ALGORITHMSReady) { _PROPERTY_ALGORITHMSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROPERTY_ALGORITHMS"); _PROPERTY_ALGORITHMSReady = true; } return _PROPERTY_ALGORITHMSContent; } }
        private static Java.Lang.String _PROPERTY_ALGORITHMSContent = default;
        private static bool _PROPERTY_ALGORITHMSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#PROPERTY_DESCRIPTION"/>
        /// </summary>
        public static Java.Lang.String PROPERTY_DESCRIPTION { get { if (!_PROPERTY_DESCRIPTIONReady) { _PROPERTY_DESCRIPTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROPERTY_DESCRIPTION"); _PROPERTY_DESCRIPTIONReady = true; } return _PROPERTY_DESCRIPTIONContent; } }
        private static Java.Lang.String _PROPERTY_DESCRIPTIONContent = default;
        private static bool _PROPERTY_DESCRIPTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#PROPERTY_DEVICE_UNIQUE_ID"/>
        /// </summary>
        public static Java.Lang.String PROPERTY_DEVICE_UNIQUE_ID { get { if (!_PROPERTY_DEVICE_UNIQUE_IDReady) { _PROPERTY_DEVICE_UNIQUE_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROPERTY_DEVICE_UNIQUE_ID"); _PROPERTY_DEVICE_UNIQUE_IDReady = true; } return _PROPERTY_DEVICE_UNIQUE_IDContent; } }
        private static Java.Lang.String _PROPERTY_DEVICE_UNIQUE_IDContent = default;
        private static bool _PROPERTY_DEVICE_UNIQUE_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#PROPERTY_VENDOR"/>
        /// </summary>
        public static Java.Lang.String PROPERTY_VENDOR { get { if (!_PROPERTY_VENDORReady) { _PROPERTY_VENDORContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROPERTY_VENDOR"); _PROPERTY_VENDORReady = true; } return _PROPERTY_VENDORContent; } }
        private static Java.Lang.String _PROPERTY_VENDORContent = default;
        private static bool _PROPERTY_VENDORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#PROPERTY_VERSION"/>
        /// </summary>
        public static Java.Lang.String PROPERTY_VERSION { get { if (!_PROPERTY_VERSIONReady) { _PROPERTY_VERSIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROPERTY_VERSION"); _PROPERTY_VERSIONReady = true; } return _PROPERTY_VERSIONContent; } }
        private static Java.Lang.String _PROPERTY_VERSIONContent = default;
        private static bool _PROPERTY_VERSIONReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#isCryptoSchemeSupported(java.util.UUID,java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.UUID"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsCryptoSchemeSupported(Java.Util.UUID arg0, Java.Lang.String arg1, int arg2)
        {
            return SExecute<bool>(LocalBridgeClazz, "isCryptoSchemeSupported", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#isCryptoSchemeSupported(java.util.UUID,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.UUID"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsCryptoSchemeSupported(Java.Util.UUID arg0, Java.Lang.String arg1)
        {
            return SExecute<bool>(LocalBridgeClazz, "isCryptoSchemeSupported", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#isCryptoSchemeSupported(java.util.UUID)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.UUID"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsCryptoSchemeSupported(Java.Util.UUID arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isCryptoSchemeSupported", "(Ljava/util/UUID;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#getMaxSecurityLevel()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public static int GetMaxSecurityLevel()
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "getMaxSecurityLevel", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#getSupportedCryptoSchemes()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public static Java.Util.List<Java.Util.UUID> GetSupportedCryptoSchemes()
        {
            return SExecuteWithSignature<Java.Util.List<Java.Util.UUID>>(LocalBridgeClazz, "getSupportedCryptoSchemes", "()Ljava/util/List;");
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#getCryptoSession(byte[],java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Media.MediaDrm.CryptoSession"/></returns>
        public Android.Media.MediaDrm.CryptoSession GetCryptoSession(byte[] arg0, Java.Lang.String arg1, Java.Lang.String arg2)
        {
            return IExecute<Android.Media.MediaDrm.CryptoSession>("getCryptoSession", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#getKeyRequest(byte[],byte[],java.lang.String,int,java.util.HashMap)"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="Java.Util.HashMap"/></param>
        /// <returns><see cref="Android.Media.MediaDrm.KeyRequest"/></returns>
        /// <exception cref="Android.Media.NotProvisionedException"/>
        public Android.Media.MediaDrm.KeyRequest GetKeyRequest(byte[] arg0, byte[] arg1, Java.Lang.String arg2, int arg3, Java.Util.HashMap<Java.Lang.String, Java.Lang.String> arg4)
        {
            return IExecute<Android.Media.MediaDrm.KeyRequest>("getKeyRequest", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#getPlaybackComponent(byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <returns><see cref="Android.Media.MediaDrm.PlaybackComponent"/></returns>
        public Android.Media.MediaDrm.PlaybackComponent GetPlaybackComponent(byte[] arg0)
        {
            return IExecuteWithSignature<Android.Media.MediaDrm.PlaybackComponent>("getPlaybackComponent", "([B)Landroid/media/MediaDrm$PlaybackComponent;", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#getProvisionRequest()"/>
        /// </summary>
        /// <returns><see cref="Android.Media.MediaDrm.ProvisionRequest"/></returns>
        public Android.Media.MediaDrm.ProvisionRequest GetProvisionRequest()
        {
            return IExecuteWithSignature<Android.Media.MediaDrm.ProvisionRequest>("getProvisionRequest", "()Landroid/media/MediaDrm$ProvisionRequest;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#getMetrics()"/>
        /// </summary>
        /// <returns><see cref="Android.Os.PersistableBundle"/></returns>
        public Android.Os.PersistableBundle GetMetrics()
        {
            return IExecuteWithSignature<Android.Os.PersistableBundle>("getMetrics", "()Landroid/os/PersistableBundle;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#requiresSecureDecoder(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RequiresSecureDecoder(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<bool>("requiresSecureDecoder", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#openSession()"/>
        /// </summary>
        /// <returns><see cref="byte"/></returns>
        /// <exception cref="Android.Media.NotProvisionedException"/>
        /// <exception cref="Android.Media.ResourceBusyException"/>
        public byte[] OpenSession()
        {
            return IExecuteWithSignatureArray<byte>("openSession", "()[B");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#openSession(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="byte"/></returns>
        /// <exception cref="Android.Media.NotProvisionedException"/>
        /// <exception cref="Android.Media.ResourceBusyException"/>
        public byte[] OpenSession(int arg0)
        {
            return IExecuteWithSignatureArray<byte>("openSession", "(I)[B", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#requiresSecureDecoder(java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RequiresSecureDecoder(Java.Lang.String arg0, int arg1)
        {
            return IExecute<bool>("requiresSecureDecoder", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#getPropertyByteArray(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="byte"/></returns>
        public byte[] GetPropertyByteArray(Java.Lang.String arg0)
        {
            return IExecuteWithSignatureArray<byte>("getPropertyByteArray", "(Ljava/lang/String;)[B", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#getSecureStop(byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <returns><see cref="byte"/></returns>
        [global::System.Obsolete()]
        public byte[] GetSecureStop(byte[] arg0)
        {
            return IExecuteWithSignatureArray<byte>("getSecureStop", "([B)[B", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#provideKeyResponse(byte[],byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        /// <returns><see cref="byte"/></returns>
        /// <exception cref="Android.Media.DeniedByServerException"/>
        /// <exception cref="Android.Media.NotProvisionedException"/>
        public byte[] ProvideKeyResponse(byte[] arg0, byte[] arg1)
        {
            return IExecuteArray<byte>("provideKeyResponse", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#getConnectedHdcpLevel()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetConnectedHdcpLevel()
        {
            return IExecuteWithSignature<int>("getConnectedHdcpLevel", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#getMaxHdcpLevel()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMaxHdcpLevel()
        {
            return IExecuteWithSignature<int>("getMaxHdcpLevel", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#getMaxSessionCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMaxSessionCount()
        {
            return IExecuteWithSignature<int>("getMaxSessionCount", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#getOfflineLicenseState(byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetOfflineLicenseState(byte[] arg0)
        {
            return IExecuteWithSignature<int>("getOfflineLicenseState", "([B)I", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#getOpenSessionCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetOpenSessionCount()
        {
            return IExecuteWithSignature<int>("getOpenSessionCount", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#getSecurityLevel(byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetSecurityLevel(byte[] arg0)
        {
            return IExecuteWithSignature<int>("getSecurityLevel", "([B)I", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#getPropertyString(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetPropertyString(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getPropertyString", "(Ljava/lang/String;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#queryKeyStatus(byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <returns><see cref="Java.Util.HashMap"/></returns>
        public Java.Util.HashMap<Java.Lang.String, Java.Lang.String> QueryKeyStatus(byte[] arg0)
        {
            return IExecuteWithSignature<Java.Util.HashMap<Java.Lang.String, Java.Lang.String>>("queryKeyStatus", "([B)Ljava/util/HashMap;", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#getLogMessages()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Media.MediaDrm.LogMessage> GetLogMessages()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Media.MediaDrm.LogMessage>>("getLogMessages", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#getOfflineLicenseKeySetIds()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<byte[]> GetOfflineLicenseKeySetIds()
        {
            return IExecuteWithSignature<Java.Util.List<byte[]>>("getOfflineLicenseKeySetIds", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#getSecureStopIds()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        [global::System.Obsolete()]
        public Java.Util.List<byte[]> GetSecureStopIds()
        {
            return IExecuteWithSignature<Java.Util.List<byte[]>>("getSecureStopIds", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#getSecureStops()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        [global::System.Obsolete()]
        public Java.Util.List<byte[]> GetSecureStops()
        {
            return IExecuteWithSignature<Java.Util.List<byte[]>>("getSecureStops", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#releaseSecureStops(byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        [global::System.Obsolete()]
        public void ReleaseSecureStops(byte[] arg0)
        {
            IExecuteWithSignature("releaseSecureStops", "([B)V", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#removeAllSecureStops()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void RemoveAllSecureStops()
        {
            IExecuteWithSignature("removeAllSecureStops", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#removeKeys(byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        public void RemoveKeys(byte[] arg0)
        {
            IExecuteWithSignature("removeKeys", "([B)V", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#removeOfflineLicense(byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        public void RemoveOfflineLicense(byte[] arg0)
        {
            IExecuteWithSignature("removeOfflineLicense", "([B)V", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#removeSecureStop(byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        [global::System.Obsolete()]
        public void RemoveSecureStop(byte[] arg0)
        {
            IExecuteWithSignature("removeSecureStop", "([B)V", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#restoreKeys(byte[],byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        public void RestoreKeys(byte[] arg0, byte[] arg1)
        {
            IExecute("restoreKeys", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#setPropertyByteArray(java.lang.String,byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        public void SetPropertyByteArray(Java.Lang.String arg0, byte[] arg1)
        {
            IExecute("setPropertyByteArray", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#setPropertyString(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        public void SetPropertyString(Java.Lang.String arg0, Java.Lang.String arg1)
        {
            IExecute("setPropertyString", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#clearOnEventListener()"/>
        /// </summary>
        public void ClearOnEventListener()
        {
            IExecuteWithSignature("clearOnEventListener", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#clearOnExpirationUpdateListener()"/>
        /// </summary>
        public void ClearOnExpirationUpdateListener()
        {
            IExecuteWithSignature("clearOnExpirationUpdateListener", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#clearOnKeyStatusChangeListener()"/>
        /// </summary>
        public void ClearOnKeyStatusChangeListener()
        {
            IExecuteWithSignature("clearOnKeyStatusChangeListener", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#clearOnSessionLostStateListener()"/>
        /// </summary>
        public void ClearOnSessionLostStateListener()
        {
            IExecuteWithSignature("clearOnSessionLostStateListener", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#close()"/>
        /// </summary>
        public void Close()
        {
            IExecuteWithSignature("close", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#closeSession(byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        public void CloseSession(byte[] arg0)
        {
            IExecuteWithSignature("closeSession", "([B)V", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#provideProvisionResponse(byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <exception cref="Android.Media.DeniedByServerException"/>
        public void ProvideProvisionResponse(byte[] arg0)
        {
            IExecuteWithSignature("provideProvisionResponse", "([B)V", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#release()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void Release()
        {
            IExecuteWithSignature("release", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#releaseAllSecureStops()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void ReleaseAllSecureStops()
        {
            IExecuteWithSignature("releaseAllSecureStops", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#setOnEventListener(android.media.MediaDrm.OnEventListener,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaDrm.OnEventListener"/></param>
        /// <param name="arg1"><see cref="Android.Os.Handler"/></param>
        public void SetOnEventListener(Android.Media.MediaDrm.OnEventListener arg0, Android.Os.Handler arg1)
        {
            IExecute("setOnEventListener", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#setOnEventListener(android.media.MediaDrm.OnEventListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaDrm.OnEventListener"/></param>
        public void SetOnEventListener(Android.Media.MediaDrm.OnEventListener arg0)
        {
            IExecuteWithSignature("setOnEventListener", "(Landroid/media/MediaDrm$OnEventListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#setOnEventListener(java.util.concurrent.Executor,android.media.MediaDrm.OnEventListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Media.MediaDrm.OnEventListener"/></param>
        public void SetOnEventListener(Java.Util.Concurrent.Executor arg0, Android.Media.MediaDrm.OnEventListener arg1)
        {
            IExecute("setOnEventListener", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#setOnExpirationUpdateListener(android.media.MediaDrm.OnExpirationUpdateListener,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaDrm.OnExpirationUpdateListener"/></param>
        /// <param name="arg1"><see cref="Android.Os.Handler"/></param>
        public void SetOnExpirationUpdateListener(Android.Media.MediaDrm.OnExpirationUpdateListener arg0, Android.Os.Handler arg1)
        {
            IExecute("setOnExpirationUpdateListener", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#setOnExpirationUpdateListener(java.util.concurrent.Executor,android.media.MediaDrm.OnExpirationUpdateListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Media.MediaDrm.OnExpirationUpdateListener"/></param>
        public void SetOnExpirationUpdateListener(Java.Util.Concurrent.Executor arg0, Android.Media.MediaDrm.OnExpirationUpdateListener arg1)
        {
            IExecute("setOnExpirationUpdateListener", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#setOnKeyStatusChangeListener(android.media.MediaDrm.OnKeyStatusChangeListener,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaDrm.OnKeyStatusChangeListener"/></param>
        /// <param name="arg1"><see cref="Android.Os.Handler"/></param>
        public void SetOnKeyStatusChangeListener(Android.Media.MediaDrm.OnKeyStatusChangeListener arg0, Android.Os.Handler arg1)
        {
            IExecute("setOnKeyStatusChangeListener", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#setOnKeyStatusChangeListener(java.util.concurrent.Executor,android.media.MediaDrm.OnKeyStatusChangeListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Media.MediaDrm.OnKeyStatusChangeListener"/></param>
        public void SetOnKeyStatusChangeListener(Java.Util.Concurrent.Executor arg0, Android.Media.MediaDrm.OnKeyStatusChangeListener arg1)
        {
            IExecute("setOnKeyStatusChangeListener", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#setOnSessionLostStateListener(android.media.MediaDrm.OnSessionLostStateListener,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.MediaDrm.OnSessionLostStateListener"/></param>
        /// <param name="arg1"><see cref="Android.Os.Handler"/></param>
        public void SetOnSessionLostStateListener(Android.Media.MediaDrm.OnSessionLostStateListener arg0, Android.Os.Handler arg1)
        {
            IExecute("setOnSessionLostStateListener", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaDrm.html#setOnSessionLostStateListener(java.util.concurrent.Executor,android.media.MediaDrm.OnSessionLostStateListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Media.MediaDrm.OnSessionLostStateListener"/></param>
        public void SetOnSessionLostStateListener(Java.Util.Concurrent.Executor arg0, Android.Media.MediaDrm.OnSessionLostStateListener arg1)
        {
            IExecute("setOnSessionLostStateListener", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region CryptoSession
        public partial class CryptoSession
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.CryptoSession.html#verify(byte[],byte[],byte[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="byte"/></param>
            /// <param name="arg1"><see cref="byte"/></param>
            /// <param name="arg2"><see cref="byte"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool Verify(byte[] arg0, byte[] arg1, byte[] arg2)
            {
                return IExecute<bool>("verify", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.CryptoSession.html#decrypt(byte[],byte[],byte[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="byte"/></param>
            /// <param name="arg1"><see cref="byte"/></param>
            /// <param name="arg2"><see cref="byte"/></param>
            /// <returns><see cref="byte"/></returns>
            public byte[] Decrypt(byte[] arg0, byte[] arg1, byte[] arg2)
            {
                return IExecuteArray<byte>("decrypt", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.CryptoSession.html#encrypt(byte[],byte[],byte[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="byte"/></param>
            /// <param name="arg1"><see cref="byte"/></param>
            /// <param name="arg2"><see cref="byte"/></param>
            /// <returns><see cref="byte"/></returns>
            public byte[] Encrypt(byte[] arg0, byte[] arg1, byte[] arg2)
            {
                return IExecuteArray<byte>("encrypt", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.CryptoSession.html#sign(byte[],byte[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="byte"/></param>
            /// <param name="arg1"><see cref="byte"/></param>
            /// <returns><see cref="byte"/></returns>
            public byte[] Sign(byte[] arg0, byte[] arg1)
            {
                return IExecuteArray<byte>("sign", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ErrorCodes
        public partial class ErrorCodes
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.ErrorCodes.html#ERROR_CERTIFICATE_MALFORMED"/>
            /// </summary>
            public static int ERROR_CERTIFICATE_MALFORMED { get { if (!_ERROR_CERTIFICATE_MALFORMEDReady) { _ERROR_CERTIFICATE_MALFORMEDContent = SGetField<int>(LocalBridgeClazz, "ERROR_CERTIFICATE_MALFORMED"); _ERROR_CERTIFICATE_MALFORMEDReady = true; } return _ERROR_CERTIFICATE_MALFORMEDContent; } }
            private static int _ERROR_CERTIFICATE_MALFORMEDContent = default;
            private static bool _ERROR_CERTIFICATE_MALFORMEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.ErrorCodes.html#ERROR_CERTIFICATE_MISSING"/>
            /// </summary>
            public static int ERROR_CERTIFICATE_MISSING { get { if (!_ERROR_CERTIFICATE_MISSINGReady) { _ERROR_CERTIFICATE_MISSINGContent = SGetField<int>(LocalBridgeClazz, "ERROR_CERTIFICATE_MISSING"); _ERROR_CERTIFICATE_MISSINGReady = true; } return _ERROR_CERTIFICATE_MISSINGContent; } }
            private static int _ERROR_CERTIFICATE_MISSINGContent = default;
            private static bool _ERROR_CERTIFICATE_MISSINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.ErrorCodes.html#ERROR_CRYPTO_LIBRARY"/>
            /// </summary>
            public static int ERROR_CRYPTO_LIBRARY { get { if (!_ERROR_CRYPTO_LIBRARYReady) { _ERROR_CRYPTO_LIBRARYContent = SGetField<int>(LocalBridgeClazz, "ERROR_CRYPTO_LIBRARY"); _ERROR_CRYPTO_LIBRARYReady = true; } return _ERROR_CRYPTO_LIBRARYContent; } }
            private static int _ERROR_CRYPTO_LIBRARYContent = default;
            private static bool _ERROR_CRYPTO_LIBRARYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.ErrorCodes.html#ERROR_FRAME_TOO_LARGE"/>
            /// </summary>
            public static int ERROR_FRAME_TOO_LARGE { get { if (!_ERROR_FRAME_TOO_LARGEReady) { _ERROR_FRAME_TOO_LARGEContent = SGetField<int>(LocalBridgeClazz, "ERROR_FRAME_TOO_LARGE"); _ERROR_FRAME_TOO_LARGEReady = true; } return _ERROR_FRAME_TOO_LARGEContent; } }
            private static int _ERROR_FRAME_TOO_LARGEContent = default;
            private static bool _ERROR_FRAME_TOO_LARGEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.ErrorCodes.html#ERROR_GENERIC_OEM"/>
            /// </summary>
            public static int ERROR_GENERIC_OEM { get { if (!_ERROR_GENERIC_OEMReady) { _ERROR_GENERIC_OEMContent = SGetField<int>(LocalBridgeClazz, "ERROR_GENERIC_OEM"); _ERROR_GENERIC_OEMReady = true; } return _ERROR_GENERIC_OEMContent; } }
            private static int _ERROR_GENERIC_OEMContent = default;
            private static bool _ERROR_GENERIC_OEMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.ErrorCodes.html#ERROR_GENERIC_PLUGIN"/>
            /// </summary>
            public static int ERROR_GENERIC_PLUGIN { get { if (!_ERROR_GENERIC_PLUGINReady) { _ERROR_GENERIC_PLUGINContent = SGetField<int>(LocalBridgeClazz, "ERROR_GENERIC_PLUGIN"); _ERROR_GENERIC_PLUGINReady = true; } return _ERROR_GENERIC_PLUGINContent; } }
            private static int _ERROR_GENERIC_PLUGINContent = default;
            private static bool _ERROR_GENERIC_PLUGINReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.ErrorCodes.html#ERROR_INIT_DATA"/>
            /// </summary>
            public static int ERROR_INIT_DATA { get { if (!_ERROR_INIT_DATAReady) { _ERROR_INIT_DATAContent = SGetField<int>(LocalBridgeClazz, "ERROR_INIT_DATA"); _ERROR_INIT_DATAReady = true; } return _ERROR_INIT_DATAContent; } }
            private static int _ERROR_INIT_DATAContent = default;
            private static bool _ERROR_INIT_DATAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.ErrorCodes.html#ERROR_INSUFFICIENT_OUTPUT_PROTECTION"/>
            /// </summary>
            public static int ERROR_INSUFFICIENT_OUTPUT_PROTECTION { get { if (!_ERROR_INSUFFICIENT_OUTPUT_PROTECTIONReady) { _ERROR_INSUFFICIENT_OUTPUT_PROTECTIONContent = SGetField<int>(LocalBridgeClazz, "ERROR_INSUFFICIENT_OUTPUT_PROTECTION"); _ERROR_INSUFFICIENT_OUTPUT_PROTECTIONReady = true; } return _ERROR_INSUFFICIENT_OUTPUT_PROTECTIONContent; } }
            private static int _ERROR_INSUFFICIENT_OUTPUT_PROTECTIONContent = default;
            private static bool _ERROR_INSUFFICIENT_OUTPUT_PROTECTIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.ErrorCodes.html#ERROR_INSUFFICIENT_SECURITY"/>
            /// </summary>
            public static int ERROR_INSUFFICIENT_SECURITY { get { if (!_ERROR_INSUFFICIENT_SECURITYReady) { _ERROR_INSUFFICIENT_SECURITYContent = SGetField<int>(LocalBridgeClazz, "ERROR_INSUFFICIENT_SECURITY"); _ERROR_INSUFFICIENT_SECURITYReady = true; } return _ERROR_INSUFFICIENT_SECURITYContent; } }
            private static int _ERROR_INSUFFICIENT_SECURITYContent = default;
            private static bool _ERROR_INSUFFICIENT_SECURITYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.ErrorCodes.html#ERROR_KEY_EXPIRED"/>
            /// </summary>
            public static int ERROR_KEY_EXPIRED { get { if (!_ERROR_KEY_EXPIREDReady) { _ERROR_KEY_EXPIREDContent = SGetField<int>(LocalBridgeClazz, "ERROR_KEY_EXPIRED"); _ERROR_KEY_EXPIREDReady = true; } return _ERROR_KEY_EXPIREDContent; } }
            private static int _ERROR_KEY_EXPIREDContent = default;
            private static bool _ERROR_KEY_EXPIREDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.ErrorCodes.html#ERROR_KEY_NOT_LOADED"/>
            /// </summary>
            public static int ERROR_KEY_NOT_LOADED { get { if (!_ERROR_KEY_NOT_LOADEDReady) { _ERROR_KEY_NOT_LOADEDContent = SGetField<int>(LocalBridgeClazz, "ERROR_KEY_NOT_LOADED"); _ERROR_KEY_NOT_LOADEDReady = true; } return _ERROR_KEY_NOT_LOADEDContent; } }
            private static int _ERROR_KEY_NOT_LOADEDContent = default;
            private static bool _ERROR_KEY_NOT_LOADEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.ErrorCodes.html#ERROR_LICENSE_PARSE"/>
            /// </summary>
            public static int ERROR_LICENSE_PARSE { get { if (!_ERROR_LICENSE_PARSEReady) { _ERROR_LICENSE_PARSEContent = SGetField<int>(LocalBridgeClazz, "ERROR_LICENSE_PARSE"); _ERROR_LICENSE_PARSEReady = true; } return _ERROR_LICENSE_PARSEContent; } }
            private static int _ERROR_LICENSE_PARSEContent = default;
            private static bool _ERROR_LICENSE_PARSEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.ErrorCodes.html#ERROR_LICENSE_POLICY"/>
            /// </summary>
            public static int ERROR_LICENSE_POLICY { get { if (!_ERROR_LICENSE_POLICYReady) { _ERROR_LICENSE_POLICYContent = SGetField<int>(LocalBridgeClazz, "ERROR_LICENSE_POLICY"); _ERROR_LICENSE_POLICYReady = true; } return _ERROR_LICENSE_POLICYContent; } }
            private static int _ERROR_LICENSE_POLICYContent = default;
            private static bool _ERROR_LICENSE_POLICYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.ErrorCodes.html#ERROR_LICENSE_RELEASE"/>
            /// </summary>
            public static int ERROR_LICENSE_RELEASE { get { if (!_ERROR_LICENSE_RELEASEReady) { _ERROR_LICENSE_RELEASEContent = SGetField<int>(LocalBridgeClazz, "ERROR_LICENSE_RELEASE"); _ERROR_LICENSE_RELEASEReady = true; } return _ERROR_LICENSE_RELEASEContent; } }
            private static int _ERROR_LICENSE_RELEASEContent = default;
            private static bool _ERROR_LICENSE_RELEASEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.ErrorCodes.html#ERROR_LICENSE_REQUEST_REJECTED"/>
            /// </summary>
            public static int ERROR_LICENSE_REQUEST_REJECTED { get { if (!_ERROR_LICENSE_REQUEST_REJECTEDReady) { _ERROR_LICENSE_REQUEST_REJECTEDContent = SGetField<int>(LocalBridgeClazz, "ERROR_LICENSE_REQUEST_REJECTED"); _ERROR_LICENSE_REQUEST_REJECTEDReady = true; } return _ERROR_LICENSE_REQUEST_REJECTEDContent; } }
            private static int _ERROR_LICENSE_REQUEST_REJECTEDContent = default;
            private static bool _ERROR_LICENSE_REQUEST_REJECTEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.ErrorCodes.html#ERROR_LICENSE_RESTORE"/>
            /// </summary>
            public static int ERROR_LICENSE_RESTORE { get { if (!_ERROR_LICENSE_RESTOREReady) { _ERROR_LICENSE_RESTOREContent = SGetField<int>(LocalBridgeClazz, "ERROR_LICENSE_RESTORE"); _ERROR_LICENSE_RESTOREReady = true; } return _ERROR_LICENSE_RESTOREContent; } }
            private static int _ERROR_LICENSE_RESTOREContent = default;
            private static bool _ERROR_LICENSE_RESTOREReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.ErrorCodes.html#ERROR_LICENSE_STATE"/>
            /// </summary>
            public static int ERROR_LICENSE_STATE { get { if (!_ERROR_LICENSE_STATEReady) { _ERROR_LICENSE_STATEContent = SGetField<int>(LocalBridgeClazz, "ERROR_LICENSE_STATE"); _ERROR_LICENSE_STATEReady = true; } return _ERROR_LICENSE_STATEContent; } }
            private static int _ERROR_LICENSE_STATEContent = default;
            private static bool _ERROR_LICENSE_STATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.ErrorCodes.html#ERROR_LOST_STATE"/>
            /// </summary>
            public static int ERROR_LOST_STATE { get { if (!_ERROR_LOST_STATEReady) { _ERROR_LOST_STATEContent = SGetField<int>(LocalBridgeClazz, "ERROR_LOST_STATE"); _ERROR_LOST_STATEReady = true; } return _ERROR_LOST_STATEContent; } }
            private static int _ERROR_LOST_STATEContent = default;
            private static bool _ERROR_LOST_STATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.ErrorCodes.html#ERROR_MEDIA_FRAMEWORK"/>
            /// </summary>
            public static int ERROR_MEDIA_FRAMEWORK { get { if (!_ERROR_MEDIA_FRAMEWORKReady) { _ERROR_MEDIA_FRAMEWORKContent = SGetField<int>(LocalBridgeClazz, "ERROR_MEDIA_FRAMEWORK"); _ERROR_MEDIA_FRAMEWORKReady = true; } return _ERROR_MEDIA_FRAMEWORKContent; } }
            private static int _ERROR_MEDIA_FRAMEWORKContent = default;
            private static bool _ERROR_MEDIA_FRAMEWORKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.ErrorCodes.html#ERROR_NO_KEY"/>
            /// </summary>
            public static int ERROR_NO_KEY { get { if (!_ERROR_NO_KEYReady) { _ERROR_NO_KEYContent = SGetField<int>(LocalBridgeClazz, "ERROR_NO_KEY"); _ERROR_NO_KEYReady = true; } return _ERROR_NO_KEYContent; } }
            private static int _ERROR_NO_KEYContent = default;
            private static bool _ERROR_NO_KEYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.ErrorCodes.html#ERROR_PROVISIONING_CERTIFICATE"/>
            /// </summary>
            public static int ERROR_PROVISIONING_CERTIFICATE { get { if (!_ERROR_PROVISIONING_CERTIFICATEReady) { _ERROR_PROVISIONING_CERTIFICATEContent = SGetField<int>(LocalBridgeClazz, "ERROR_PROVISIONING_CERTIFICATE"); _ERROR_PROVISIONING_CERTIFICATEReady = true; } return _ERROR_PROVISIONING_CERTIFICATEContent; } }
            private static int _ERROR_PROVISIONING_CERTIFICATEContent = default;
            private static bool _ERROR_PROVISIONING_CERTIFICATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.ErrorCodes.html#ERROR_PROVISIONING_CONFIG"/>
            /// </summary>
            public static int ERROR_PROVISIONING_CONFIG { get { if (!_ERROR_PROVISIONING_CONFIGReady) { _ERROR_PROVISIONING_CONFIGContent = SGetField<int>(LocalBridgeClazz, "ERROR_PROVISIONING_CONFIG"); _ERROR_PROVISIONING_CONFIGReady = true; } return _ERROR_PROVISIONING_CONFIGContent; } }
            private static int _ERROR_PROVISIONING_CONFIGContent = default;
            private static bool _ERROR_PROVISIONING_CONFIGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.ErrorCodes.html#ERROR_PROVISIONING_PARSE"/>
            /// </summary>
            public static int ERROR_PROVISIONING_PARSE { get { if (!_ERROR_PROVISIONING_PARSEReady) { _ERROR_PROVISIONING_PARSEContent = SGetField<int>(LocalBridgeClazz, "ERROR_PROVISIONING_PARSE"); _ERROR_PROVISIONING_PARSEReady = true; } return _ERROR_PROVISIONING_PARSEContent; } }
            private static int _ERROR_PROVISIONING_PARSEContent = default;
            private static bool _ERROR_PROVISIONING_PARSEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.ErrorCodes.html#ERROR_PROVISIONING_REQUEST_REJECTED"/>
            /// </summary>
            public static int ERROR_PROVISIONING_REQUEST_REJECTED { get { if (!_ERROR_PROVISIONING_REQUEST_REJECTEDReady) { _ERROR_PROVISIONING_REQUEST_REJECTEDContent = SGetField<int>(LocalBridgeClazz, "ERROR_PROVISIONING_REQUEST_REJECTED"); _ERROR_PROVISIONING_REQUEST_REJECTEDReady = true; } return _ERROR_PROVISIONING_REQUEST_REJECTEDContent; } }
            private static int _ERROR_PROVISIONING_REQUEST_REJECTEDContent = default;
            private static bool _ERROR_PROVISIONING_REQUEST_REJECTEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.ErrorCodes.html#ERROR_PROVISIONING_RETRY"/>
            /// </summary>
            public static int ERROR_PROVISIONING_RETRY { get { if (!_ERROR_PROVISIONING_RETRYReady) { _ERROR_PROVISIONING_RETRYContent = SGetField<int>(LocalBridgeClazz, "ERROR_PROVISIONING_RETRY"); _ERROR_PROVISIONING_RETRYReady = true; } return _ERROR_PROVISIONING_RETRYContent; } }
            private static int _ERROR_PROVISIONING_RETRYContent = default;
            private static bool _ERROR_PROVISIONING_RETRYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.ErrorCodes.html#ERROR_RESOURCE_BUSY"/>
            /// </summary>
            public static int ERROR_RESOURCE_BUSY { get { if (!_ERROR_RESOURCE_BUSYReady) { _ERROR_RESOURCE_BUSYContent = SGetField<int>(LocalBridgeClazz, "ERROR_RESOURCE_BUSY"); _ERROR_RESOURCE_BUSYReady = true; } return _ERROR_RESOURCE_BUSYContent; } }
            private static int _ERROR_RESOURCE_BUSYContent = default;
            private static bool _ERROR_RESOURCE_BUSYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.ErrorCodes.html#ERROR_RESOURCE_CONTENTION"/>
            /// </summary>
            public static int ERROR_RESOURCE_CONTENTION { get { if (!_ERROR_RESOURCE_CONTENTIONReady) { _ERROR_RESOURCE_CONTENTIONContent = SGetField<int>(LocalBridgeClazz, "ERROR_RESOURCE_CONTENTION"); _ERROR_RESOURCE_CONTENTIONReady = true; } return _ERROR_RESOURCE_CONTENTIONContent; } }
            private static int _ERROR_RESOURCE_CONTENTIONContent = default;
            private static bool _ERROR_RESOURCE_CONTENTIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.ErrorCodes.html#ERROR_SECURE_STOP_RELEASE"/>
            /// </summary>
            public static int ERROR_SECURE_STOP_RELEASE { get { if (!_ERROR_SECURE_STOP_RELEASEReady) { _ERROR_SECURE_STOP_RELEASEContent = SGetField<int>(LocalBridgeClazz, "ERROR_SECURE_STOP_RELEASE"); _ERROR_SECURE_STOP_RELEASEReady = true; } return _ERROR_SECURE_STOP_RELEASEContent; } }
            private static int _ERROR_SECURE_STOP_RELEASEContent = default;
            private static bool _ERROR_SECURE_STOP_RELEASEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.ErrorCodes.html#ERROR_SESSION_NOT_OPENED"/>
            /// </summary>
            public static int ERROR_SESSION_NOT_OPENED { get { if (!_ERROR_SESSION_NOT_OPENEDReady) { _ERROR_SESSION_NOT_OPENEDContent = SGetField<int>(LocalBridgeClazz, "ERROR_SESSION_NOT_OPENED"); _ERROR_SESSION_NOT_OPENEDReady = true; } return _ERROR_SESSION_NOT_OPENEDContent; } }
            private static int _ERROR_SESSION_NOT_OPENEDContent = default;
            private static bool _ERROR_SESSION_NOT_OPENEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.ErrorCodes.html#ERROR_STORAGE_READ"/>
            /// </summary>
            public static int ERROR_STORAGE_READ { get { if (!_ERROR_STORAGE_READReady) { _ERROR_STORAGE_READContent = SGetField<int>(LocalBridgeClazz, "ERROR_STORAGE_READ"); _ERROR_STORAGE_READReady = true; } return _ERROR_STORAGE_READContent; } }
            private static int _ERROR_STORAGE_READContent = default;
            private static bool _ERROR_STORAGE_READReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.ErrorCodes.html#ERROR_STORAGE_WRITE"/>
            /// </summary>
            public static int ERROR_STORAGE_WRITE { get { if (!_ERROR_STORAGE_WRITEReady) { _ERROR_STORAGE_WRITEContent = SGetField<int>(LocalBridgeClazz, "ERROR_STORAGE_WRITE"); _ERROR_STORAGE_WRITEReady = true; } return _ERROR_STORAGE_WRITEContent; } }
            private static int _ERROR_STORAGE_WRITEContent = default;
            private static bool _ERROR_STORAGE_WRITEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.ErrorCodes.html#ERROR_UNKNOWN"/>
            /// </summary>
            public static int ERROR_UNKNOWN { get { if (!_ERROR_UNKNOWNReady) { _ERROR_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "ERROR_UNKNOWN"); _ERROR_UNKNOWNReady = true; } return _ERROR_UNKNOWNContent; } }
            private static int _ERROR_UNKNOWNContent = default;
            private static bool _ERROR_UNKNOWNReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.ErrorCodes.html#ERROR_UNSUPPORTED_OPERATION"/>
            /// </summary>
            public static int ERROR_UNSUPPORTED_OPERATION { get { if (!_ERROR_UNSUPPORTED_OPERATIONReady) { _ERROR_UNSUPPORTED_OPERATIONContent = SGetField<int>(LocalBridgeClazz, "ERROR_UNSUPPORTED_OPERATION"); _ERROR_UNSUPPORTED_OPERATIONReady = true; } return _ERROR_UNSUPPORTED_OPERATIONContent; } }
            private static int _ERROR_UNSUPPORTED_OPERATIONContent = default;
            private static bool _ERROR_UNSUPPORTED_OPERATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.ErrorCodes.html#ERROR_ZERO_SUBSAMPLES"/>
            /// </summary>
            public static int ERROR_ZERO_SUBSAMPLES { get { if (!_ERROR_ZERO_SUBSAMPLESReady) { _ERROR_ZERO_SUBSAMPLESContent = SGetField<int>(LocalBridgeClazz, "ERROR_ZERO_SUBSAMPLES"); _ERROR_ZERO_SUBSAMPLESReady = true; } return _ERROR_ZERO_SUBSAMPLESContent; } }
            private static int _ERROR_ZERO_SUBSAMPLESContent = default;
            private static bool _ERROR_ZERO_SUBSAMPLESReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region KeyRequest
        public partial class KeyRequest
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.KeyRequest.html#REQUEST_TYPE_INITIAL"/>
            /// </summary>
            public static int REQUEST_TYPE_INITIAL { get { if (!_REQUEST_TYPE_INITIALReady) { _REQUEST_TYPE_INITIALContent = SGetField<int>(LocalBridgeClazz, "REQUEST_TYPE_INITIAL"); _REQUEST_TYPE_INITIALReady = true; } return _REQUEST_TYPE_INITIALContent; } }
            private static int _REQUEST_TYPE_INITIALContent = default;
            private static bool _REQUEST_TYPE_INITIALReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.KeyRequest.html#REQUEST_TYPE_NONE"/>
            /// </summary>
            public static int REQUEST_TYPE_NONE { get { if (!_REQUEST_TYPE_NONEReady) { _REQUEST_TYPE_NONEContent = SGetField<int>(LocalBridgeClazz, "REQUEST_TYPE_NONE"); _REQUEST_TYPE_NONEReady = true; } return _REQUEST_TYPE_NONEContent; } }
            private static int _REQUEST_TYPE_NONEContent = default;
            private static bool _REQUEST_TYPE_NONEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.KeyRequest.html#REQUEST_TYPE_RELEASE"/>
            /// </summary>
            public static int REQUEST_TYPE_RELEASE { get { if (!_REQUEST_TYPE_RELEASEReady) { _REQUEST_TYPE_RELEASEContent = SGetField<int>(LocalBridgeClazz, "REQUEST_TYPE_RELEASE"); _REQUEST_TYPE_RELEASEReady = true; } return _REQUEST_TYPE_RELEASEContent; } }
            private static int _REQUEST_TYPE_RELEASEContent = default;
            private static bool _REQUEST_TYPE_RELEASEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.KeyRequest.html#REQUEST_TYPE_RENEWAL"/>
            /// </summary>
            public static int REQUEST_TYPE_RENEWAL { get { if (!_REQUEST_TYPE_RENEWALReady) { _REQUEST_TYPE_RENEWALContent = SGetField<int>(LocalBridgeClazz, "REQUEST_TYPE_RENEWAL"); _REQUEST_TYPE_RENEWALReady = true; } return _REQUEST_TYPE_RENEWALContent; } }
            private static int _REQUEST_TYPE_RENEWALContent = default;
            private static bool _REQUEST_TYPE_RENEWALReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.KeyRequest.html#REQUEST_TYPE_UPDATE"/>
            /// </summary>
            public static int REQUEST_TYPE_UPDATE { get { if (!_REQUEST_TYPE_UPDATEReady) { _REQUEST_TYPE_UPDATEContent = SGetField<int>(LocalBridgeClazz, "REQUEST_TYPE_UPDATE"); _REQUEST_TYPE_UPDATEReady = true; } return _REQUEST_TYPE_UPDATEContent; } }
            private static int _REQUEST_TYPE_UPDATEContent = default;
            private static bool _REQUEST_TYPE_UPDATEReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.KeyRequest.html#getData()"/>
            /// </summary>
            /// <returns><see cref="byte"/></returns>
            public byte[] GetData()
            {
                return IExecuteWithSignatureArray<byte>("getData", "()[B");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.KeyRequest.html#getRequestType()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetRequestType()
            {
                return IExecuteWithSignature<int>("getRequestType", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.KeyRequest.html#getDefaultUrl()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetDefaultUrl()
            {
                return IExecuteWithSignature<Java.Lang.String>("getDefaultUrl", "()Ljava/lang/String;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region KeyStatus
        public partial class KeyStatus
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.KeyStatus.html#STATUS_EXPIRED"/>
            /// </summary>
            public static int STATUS_EXPIRED { get { if (!_STATUS_EXPIREDReady) { _STATUS_EXPIREDContent = SGetField<int>(LocalBridgeClazz, "STATUS_EXPIRED"); _STATUS_EXPIREDReady = true; } return _STATUS_EXPIREDContent; } }
            private static int _STATUS_EXPIREDContent = default;
            private static bool _STATUS_EXPIREDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.KeyStatus.html#STATUS_INTERNAL_ERROR"/>
            /// </summary>
            public static int STATUS_INTERNAL_ERROR { get { if (!_STATUS_INTERNAL_ERRORReady) { _STATUS_INTERNAL_ERRORContent = SGetField<int>(LocalBridgeClazz, "STATUS_INTERNAL_ERROR"); _STATUS_INTERNAL_ERRORReady = true; } return _STATUS_INTERNAL_ERRORContent; } }
            private static int _STATUS_INTERNAL_ERRORContent = default;
            private static bool _STATUS_INTERNAL_ERRORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.KeyStatus.html#STATUS_OUTPUT_NOT_ALLOWED"/>
            /// </summary>
            public static int STATUS_OUTPUT_NOT_ALLOWED { get { if (!_STATUS_OUTPUT_NOT_ALLOWEDReady) { _STATUS_OUTPUT_NOT_ALLOWEDContent = SGetField<int>(LocalBridgeClazz, "STATUS_OUTPUT_NOT_ALLOWED"); _STATUS_OUTPUT_NOT_ALLOWEDReady = true; } return _STATUS_OUTPUT_NOT_ALLOWEDContent; } }
            private static int _STATUS_OUTPUT_NOT_ALLOWEDContent = default;
            private static bool _STATUS_OUTPUT_NOT_ALLOWEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.KeyStatus.html#STATUS_PENDING"/>
            /// </summary>
            public static int STATUS_PENDING { get { if (!_STATUS_PENDINGReady) { _STATUS_PENDINGContent = SGetField<int>(LocalBridgeClazz, "STATUS_PENDING"); _STATUS_PENDINGReady = true; } return _STATUS_PENDINGContent; } }
            private static int _STATUS_PENDINGContent = default;
            private static bool _STATUS_PENDINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.KeyStatus.html#STATUS_USABLE"/>
            /// </summary>
            public static int STATUS_USABLE { get { if (!_STATUS_USABLEReady) { _STATUS_USABLEContent = SGetField<int>(LocalBridgeClazz, "STATUS_USABLE"); _STATUS_USABLEReady = true; } return _STATUS_USABLEContent; } }
            private static int _STATUS_USABLEContent = default;
            private static bool _STATUS_USABLEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.KeyStatus.html#STATUS_USABLE_IN_FUTURE"/>
            /// </summary>
            public static int STATUS_USABLE_IN_FUTURE { get { if (!_STATUS_USABLE_IN_FUTUREReady) { _STATUS_USABLE_IN_FUTUREContent = SGetField<int>(LocalBridgeClazz, "STATUS_USABLE_IN_FUTURE"); _STATUS_USABLE_IN_FUTUREReady = true; } return _STATUS_USABLE_IN_FUTUREContent; } }
            private static int _STATUS_USABLE_IN_FUTUREContent = default;
            private static bool _STATUS_USABLE_IN_FUTUREReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.KeyStatus.html#getKeyId()"/>
            /// </summary>
            /// <returns><see cref="byte"/></returns>
            public byte[] GetKeyId()
            {
                return IExecuteWithSignatureArray<byte>("getKeyId", "()[B");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.KeyStatus.html#getStatusCode()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetStatusCode()
            {
                return IExecuteWithSignature<int>("getStatusCode", "()I");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region LogMessage
        public partial class LogMessage
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.LogMessage.html#getPriority()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetPriority()
            {
                return IExecuteWithSignature<int>("getPriority", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.LogMessage.html#getMessage()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetMessage()
            {
                return IExecuteWithSignature<Java.Lang.String>("getMessage", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.LogMessage.html#getTimestampMillis()"/>
            /// </summary>
            /// <returns><see cref="long"/></returns>
            public long GetTimestampMillis()
            {
                return IExecuteWithSignature<long>("getTimestampMillis", "()J");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region MediaDrmStateException
        public partial class MediaDrmStateException
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region MetricsConstants
        public partial class MetricsConstants
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.MetricsConstants.html#CLOSE_SESSION_ERROR_COUNT"/>
            /// </summary>
            public static Java.Lang.String CLOSE_SESSION_ERROR_COUNT { get { if (!_CLOSE_SESSION_ERROR_COUNTReady) { _CLOSE_SESSION_ERROR_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CLOSE_SESSION_ERROR_COUNT"); _CLOSE_SESSION_ERROR_COUNTReady = true; } return _CLOSE_SESSION_ERROR_COUNTContent; } }
            private static Java.Lang.String _CLOSE_SESSION_ERROR_COUNTContent = default;
            private static bool _CLOSE_SESSION_ERROR_COUNTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.MetricsConstants.html#CLOSE_SESSION_ERROR_LIST"/>
            /// </summary>
            public static Java.Lang.String CLOSE_SESSION_ERROR_LIST { get { if (!_CLOSE_SESSION_ERROR_LISTReady) { _CLOSE_SESSION_ERROR_LISTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CLOSE_SESSION_ERROR_LIST"); _CLOSE_SESSION_ERROR_LISTReady = true; } return _CLOSE_SESSION_ERROR_LISTContent; } }
            private static Java.Lang.String _CLOSE_SESSION_ERROR_LISTContent = default;
            private static bool _CLOSE_SESSION_ERROR_LISTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.MetricsConstants.html#CLOSE_SESSION_OK_COUNT"/>
            /// </summary>
            public static Java.Lang.String CLOSE_SESSION_OK_COUNT { get { if (!_CLOSE_SESSION_OK_COUNTReady) { _CLOSE_SESSION_OK_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CLOSE_SESSION_OK_COUNT"); _CLOSE_SESSION_OK_COUNTReady = true; } return _CLOSE_SESSION_OK_COUNTContent; } }
            private static Java.Lang.String _CLOSE_SESSION_OK_COUNTContent = default;
            private static bool _CLOSE_SESSION_OK_COUNTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.MetricsConstants.html#EVENT_KEY_EXPIRED_COUNT"/>
            /// </summary>
            public static Java.Lang.String EVENT_KEY_EXPIRED_COUNT { get { if (!_EVENT_KEY_EXPIRED_COUNTReady) { _EVENT_KEY_EXPIRED_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EVENT_KEY_EXPIRED_COUNT"); _EVENT_KEY_EXPIRED_COUNTReady = true; } return _EVENT_KEY_EXPIRED_COUNTContent; } }
            private static Java.Lang.String _EVENT_KEY_EXPIRED_COUNTContent = default;
            private static bool _EVENT_KEY_EXPIRED_COUNTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.MetricsConstants.html#EVENT_KEY_NEEDED_COUNT"/>
            /// </summary>
            public static Java.Lang.String EVENT_KEY_NEEDED_COUNT { get { if (!_EVENT_KEY_NEEDED_COUNTReady) { _EVENT_KEY_NEEDED_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EVENT_KEY_NEEDED_COUNT"); _EVENT_KEY_NEEDED_COUNTReady = true; } return _EVENT_KEY_NEEDED_COUNTContent; } }
            private static Java.Lang.String _EVENT_KEY_NEEDED_COUNTContent = default;
            private static bool _EVENT_KEY_NEEDED_COUNTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.MetricsConstants.html#EVENT_PROVISION_REQUIRED_COUNT"/>
            /// </summary>
            public static Java.Lang.String EVENT_PROVISION_REQUIRED_COUNT { get { if (!_EVENT_PROVISION_REQUIRED_COUNTReady) { _EVENT_PROVISION_REQUIRED_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EVENT_PROVISION_REQUIRED_COUNT"); _EVENT_PROVISION_REQUIRED_COUNTReady = true; } return _EVENT_PROVISION_REQUIRED_COUNTContent; } }
            private static Java.Lang.String _EVENT_PROVISION_REQUIRED_COUNTContent = default;
            private static bool _EVENT_PROVISION_REQUIRED_COUNTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.MetricsConstants.html#EVENT_SESSION_RECLAIMED_COUNT"/>
            /// </summary>
            public static Java.Lang.String EVENT_SESSION_RECLAIMED_COUNT { get { if (!_EVENT_SESSION_RECLAIMED_COUNTReady) { _EVENT_SESSION_RECLAIMED_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EVENT_SESSION_RECLAIMED_COUNT"); _EVENT_SESSION_RECLAIMED_COUNTReady = true; } return _EVENT_SESSION_RECLAIMED_COUNTContent; } }
            private static Java.Lang.String _EVENT_SESSION_RECLAIMED_COUNTContent = default;
            private static bool _EVENT_SESSION_RECLAIMED_COUNTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.MetricsConstants.html#EVENT_VENDOR_DEFINED_COUNT"/>
            /// </summary>
            public static Java.Lang.String EVENT_VENDOR_DEFINED_COUNT { get { if (!_EVENT_VENDOR_DEFINED_COUNTReady) { _EVENT_VENDOR_DEFINED_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EVENT_VENDOR_DEFINED_COUNT"); _EVENT_VENDOR_DEFINED_COUNTReady = true; } return _EVENT_VENDOR_DEFINED_COUNTContent; } }
            private static Java.Lang.String _EVENT_VENDOR_DEFINED_COUNTContent = default;
            private static bool _EVENT_VENDOR_DEFINED_COUNTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.MetricsConstants.html#GET_DEVICE_UNIQUE_ID_ERROR_COUNT"/>
            /// </summary>
            public static Java.Lang.String GET_DEVICE_UNIQUE_ID_ERROR_COUNT { get { if (!_GET_DEVICE_UNIQUE_ID_ERROR_COUNTReady) { _GET_DEVICE_UNIQUE_ID_ERROR_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GET_DEVICE_UNIQUE_ID_ERROR_COUNT"); _GET_DEVICE_UNIQUE_ID_ERROR_COUNTReady = true; } return _GET_DEVICE_UNIQUE_ID_ERROR_COUNTContent; } }
            private static Java.Lang.String _GET_DEVICE_UNIQUE_ID_ERROR_COUNTContent = default;
            private static bool _GET_DEVICE_UNIQUE_ID_ERROR_COUNTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.MetricsConstants.html#GET_DEVICE_UNIQUE_ID_ERROR_LIST"/>
            /// </summary>
            public static Java.Lang.String GET_DEVICE_UNIQUE_ID_ERROR_LIST { get { if (!_GET_DEVICE_UNIQUE_ID_ERROR_LISTReady) { _GET_DEVICE_UNIQUE_ID_ERROR_LISTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GET_DEVICE_UNIQUE_ID_ERROR_LIST"); _GET_DEVICE_UNIQUE_ID_ERROR_LISTReady = true; } return _GET_DEVICE_UNIQUE_ID_ERROR_LISTContent; } }
            private static Java.Lang.String _GET_DEVICE_UNIQUE_ID_ERROR_LISTContent = default;
            private static bool _GET_DEVICE_UNIQUE_ID_ERROR_LISTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.MetricsConstants.html#GET_DEVICE_UNIQUE_ID_OK_COUNT"/>
            /// </summary>
            public static Java.Lang.String GET_DEVICE_UNIQUE_ID_OK_COUNT { get { if (!_GET_DEVICE_UNIQUE_ID_OK_COUNTReady) { _GET_DEVICE_UNIQUE_ID_OK_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GET_DEVICE_UNIQUE_ID_OK_COUNT"); _GET_DEVICE_UNIQUE_ID_OK_COUNTReady = true; } return _GET_DEVICE_UNIQUE_ID_OK_COUNTContent; } }
            private static Java.Lang.String _GET_DEVICE_UNIQUE_ID_OK_COUNTContent = default;
            private static bool _GET_DEVICE_UNIQUE_ID_OK_COUNTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.MetricsConstants.html#GET_KEY_REQUEST_ERROR_COUNT"/>
            /// </summary>
            public static Java.Lang.String GET_KEY_REQUEST_ERROR_COUNT { get { if (!_GET_KEY_REQUEST_ERROR_COUNTReady) { _GET_KEY_REQUEST_ERROR_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GET_KEY_REQUEST_ERROR_COUNT"); _GET_KEY_REQUEST_ERROR_COUNTReady = true; } return _GET_KEY_REQUEST_ERROR_COUNTContent; } }
            private static Java.Lang.String _GET_KEY_REQUEST_ERROR_COUNTContent = default;
            private static bool _GET_KEY_REQUEST_ERROR_COUNTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.MetricsConstants.html#GET_KEY_REQUEST_ERROR_LIST"/>
            /// </summary>
            public static Java.Lang.String GET_KEY_REQUEST_ERROR_LIST { get { if (!_GET_KEY_REQUEST_ERROR_LISTReady) { _GET_KEY_REQUEST_ERROR_LISTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GET_KEY_REQUEST_ERROR_LIST"); _GET_KEY_REQUEST_ERROR_LISTReady = true; } return _GET_KEY_REQUEST_ERROR_LISTContent; } }
            private static Java.Lang.String _GET_KEY_REQUEST_ERROR_LISTContent = default;
            private static bool _GET_KEY_REQUEST_ERROR_LISTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.MetricsConstants.html#GET_KEY_REQUEST_OK_COUNT"/>
            /// </summary>
            public static Java.Lang.String GET_KEY_REQUEST_OK_COUNT { get { if (!_GET_KEY_REQUEST_OK_COUNTReady) { _GET_KEY_REQUEST_OK_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GET_KEY_REQUEST_OK_COUNT"); _GET_KEY_REQUEST_OK_COUNTReady = true; } return _GET_KEY_REQUEST_OK_COUNTContent; } }
            private static Java.Lang.String _GET_KEY_REQUEST_OK_COUNTContent = default;
            private static bool _GET_KEY_REQUEST_OK_COUNTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.MetricsConstants.html#GET_KEY_REQUEST_OK_TIME_MICROS"/>
            /// </summary>
            public static Java.Lang.String GET_KEY_REQUEST_OK_TIME_MICROS { get { if (!_GET_KEY_REQUEST_OK_TIME_MICROSReady) { _GET_KEY_REQUEST_OK_TIME_MICROSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GET_KEY_REQUEST_OK_TIME_MICROS"); _GET_KEY_REQUEST_OK_TIME_MICROSReady = true; } return _GET_KEY_REQUEST_OK_TIME_MICROSContent; } }
            private static Java.Lang.String _GET_KEY_REQUEST_OK_TIME_MICROSContent = default;
            private static bool _GET_KEY_REQUEST_OK_TIME_MICROSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.MetricsConstants.html#GET_PROVISION_REQUEST_ERROR_COUNT"/>
            /// </summary>
            public static Java.Lang.String GET_PROVISION_REQUEST_ERROR_COUNT { get { if (!_GET_PROVISION_REQUEST_ERROR_COUNTReady) { _GET_PROVISION_REQUEST_ERROR_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GET_PROVISION_REQUEST_ERROR_COUNT"); _GET_PROVISION_REQUEST_ERROR_COUNTReady = true; } return _GET_PROVISION_REQUEST_ERROR_COUNTContent; } }
            private static Java.Lang.String _GET_PROVISION_REQUEST_ERROR_COUNTContent = default;
            private static bool _GET_PROVISION_REQUEST_ERROR_COUNTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.MetricsConstants.html#GET_PROVISION_REQUEST_ERROR_LIST"/>
            /// </summary>
            public static Java.Lang.String GET_PROVISION_REQUEST_ERROR_LIST { get { if (!_GET_PROVISION_REQUEST_ERROR_LISTReady) { _GET_PROVISION_REQUEST_ERROR_LISTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GET_PROVISION_REQUEST_ERROR_LIST"); _GET_PROVISION_REQUEST_ERROR_LISTReady = true; } return _GET_PROVISION_REQUEST_ERROR_LISTContent; } }
            private static Java.Lang.String _GET_PROVISION_REQUEST_ERROR_LISTContent = default;
            private static bool _GET_PROVISION_REQUEST_ERROR_LISTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.MetricsConstants.html#GET_PROVISION_REQUEST_OK_COUNT"/>
            /// </summary>
            public static Java.Lang.String GET_PROVISION_REQUEST_OK_COUNT { get { if (!_GET_PROVISION_REQUEST_OK_COUNTReady) { _GET_PROVISION_REQUEST_OK_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GET_PROVISION_REQUEST_OK_COUNT"); _GET_PROVISION_REQUEST_OK_COUNTReady = true; } return _GET_PROVISION_REQUEST_OK_COUNTContent; } }
            private static Java.Lang.String _GET_PROVISION_REQUEST_OK_COUNTContent = default;
            private static bool _GET_PROVISION_REQUEST_OK_COUNTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.MetricsConstants.html#KEY_STATUS_EXPIRED_COUNT"/>
            /// </summary>
            public static Java.Lang.String KEY_STATUS_EXPIRED_COUNT { get { if (!_KEY_STATUS_EXPIRED_COUNTReady) { _KEY_STATUS_EXPIRED_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_STATUS_EXPIRED_COUNT"); _KEY_STATUS_EXPIRED_COUNTReady = true; } return _KEY_STATUS_EXPIRED_COUNTContent; } }
            private static Java.Lang.String _KEY_STATUS_EXPIRED_COUNTContent = default;
            private static bool _KEY_STATUS_EXPIRED_COUNTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.MetricsConstants.html#KEY_STATUS_INTERNAL_ERROR_COUNT"/>
            /// </summary>
            public static Java.Lang.String KEY_STATUS_INTERNAL_ERROR_COUNT { get { if (!_KEY_STATUS_INTERNAL_ERROR_COUNTReady) { _KEY_STATUS_INTERNAL_ERROR_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_STATUS_INTERNAL_ERROR_COUNT"); _KEY_STATUS_INTERNAL_ERROR_COUNTReady = true; } return _KEY_STATUS_INTERNAL_ERROR_COUNTContent; } }
            private static Java.Lang.String _KEY_STATUS_INTERNAL_ERROR_COUNTContent = default;
            private static bool _KEY_STATUS_INTERNAL_ERROR_COUNTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.MetricsConstants.html#KEY_STATUS_OUTPUT_NOT_ALLOWED_COUNT"/>
            /// </summary>
            public static Java.Lang.String KEY_STATUS_OUTPUT_NOT_ALLOWED_COUNT { get { if (!_KEY_STATUS_OUTPUT_NOT_ALLOWED_COUNTReady) { _KEY_STATUS_OUTPUT_NOT_ALLOWED_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_STATUS_OUTPUT_NOT_ALLOWED_COUNT"); _KEY_STATUS_OUTPUT_NOT_ALLOWED_COUNTReady = true; } return _KEY_STATUS_OUTPUT_NOT_ALLOWED_COUNTContent; } }
            private static Java.Lang.String _KEY_STATUS_OUTPUT_NOT_ALLOWED_COUNTContent = default;
            private static bool _KEY_STATUS_OUTPUT_NOT_ALLOWED_COUNTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.MetricsConstants.html#KEY_STATUS_PENDING_COUNT"/>
            /// </summary>
            public static Java.Lang.String KEY_STATUS_PENDING_COUNT { get { if (!_KEY_STATUS_PENDING_COUNTReady) { _KEY_STATUS_PENDING_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_STATUS_PENDING_COUNT"); _KEY_STATUS_PENDING_COUNTReady = true; } return _KEY_STATUS_PENDING_COUNTContent; } }
            private static Java.Lang.String _KEY_STATUS_PENDING_COUNTContent = default;
            private static bool _KEY_STATUS_PENDING_COUNTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.MetricsConstants.html#KEY_STATUS_USABLE_COUNT"/>
            /// </summary>
            public static Java.Lang.String KEY_STATUS_USABLE_COUNT { get { if (!_KEY_STATUS_USABLE_COUNTReady) { _KEY_STATUS_USABLE_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_STATUS_USABLE_COUNT"); _KEY_STATUS_USABLE_COUNTReady = true; } return _KEY_STATUS_USABLE_COUNTContent; } }
            private static Java.Lang.String _KEY_STATUS_USABLE_COUNTContent = default;
            private static bool _KEY_STATUS_USABLE_COUNTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.MetricsConstants.html#OPEN_SESSION_ERROR_COUNT"/>
            /// </summary>
            public static Java.Lang.String OPEN_SESSION_ERROR_COUNT { get { if (!_OPEN_SESSION_ERROR_COUNTReady) { _OPEN_SESSION_ERROR_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OPEN_SESSION_ERROR_COUNT"); _OPEN_SESSION_ERROR_COUNTReady = true; } return _OPEN_SESSION_ERROR_COUNTContent; } }
            private static Java.Lang.String _OPEN_SESSION_ERROR_COUNTContent = default;
            private static bool _OPEN_SESSION_ERROR_COUNTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.MetricsConstants.html#OPEN_SESSION_ERROR_LIST"/>
            /// </summary>
            public static Java.Lang.String OPEN_SESSION_ERROR_LIST { get { if (!_OPEN_SESSION_ERROR_LISTReady) { _OPEN_SESSION_ERROR_LISTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OPEN_SESSION_ERROR_LIST"); _OPEN_SESSION_ERROR_LISTReady = true; } return _OPEN_SESSION_ERROR_LISTContent; } }
            private static Java.Lang.String _OPEN_SESSION_ERROR_LISTContent = default;
            private static bool _OPEN_SESSION_ERROR_LISTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.MetricsConstants.html#OPEN_SESSION_OK_COUNT"/>
            /// </summary>
            public static Java.Lang.String OPEN_SESSION_OK_COUNT { get { if (!_OPEN_SESSION_OK_COUNTReady) { _OPEN_SESSION_OK_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OPEN_SESSION_OK_COUNT"); _OPEN_SESSION_OK_COUNTReady = true; } return _OPEN_SESSION_OK_COUNTContent; } }
            private static Java.Lang.String _OPEN_SESSION_OK_COUNTContent = default;
            private static bool _OPEN_SESSION_OK_COUNTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.MetricsConstants.html#PROVIDE_KEY_RESPONSE_ERROR_COUNT"/>
            /// </summary>
            public static Java.Lang.String PROVIDE_KEY_RESPONSE_ERROR_COUNT { get { if (!_PROVIDE_KEY_RESPONSE_ERROR_COUNTReady) { _PROVIDE_KEY_RESPONSE_ERROR_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROVIDE_KEY_RESPONSE_ERROR_COUNT"); _PROVIDE_KEY_RESPONSE_ERROR_COUNTReady = true; } return _PROVIDE_KEY_RESPONSE_ERROR_COUNTContent; } }
            private static Java.Lang.String _PROVIDE_KEY_RESPONSE_ERROR_COUNTContent = default;
            private static bool _PROVIDE_KEY_RESPONSE_ERROR_COUNTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.MetricsConstants.html#PROVIDE_KEY_RESPONSE_ERROR_LIST"/>
            /// </summary>
            public static Java.Lang.String PROVIDE_KEY_RESPONSE_ERROR_LIST { get { if (!_PROVIDE_KEY_RESPONSE_ERROR_LISTReady) { _PROVIDE_KEY_RESPONSE_ERROR_LISTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROVIDE_KEY_RESPONSE_ERROR_LIST"); _PROVIDE_KEY_RESPONSE_ERROR_LISTReady = true; } return _PROVIDE_KEY_RESPONSE_ERROR_LISTContent; } }
            private static Java.Lang.String _PROVIDE_KEY_RESPONSE_ERROR_LISTContent = default;
            private static bool _PROVIDE_KEY_RESPONSE_ERROR_LISTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.MetricsConstants.html#PROVIDE_KEY_RESPONSE_OK_COUNT"/>
            /// </summary>
            public static Java.Lang.String PROVIDE_KEY_RESPONSE_OK_COUNT { get { if (!_PROVIDE_KEY_RESPONSE_OK_COUNTReady) { _PROVIDE_KEY_RESPONSE_OK_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROVIDE_KEY_RESPONSE_OK_COUNT"); _PROVIDE_KEY_RESPONSE_OK_COUNTReady = true; } return _PROVIDE_KEY_RESPONSE_OK_COUNTContent; } }
            private static Java.Lang.String _PROVIDE_KEY_RESPONSE_OK_COUNTContent = default;
            private static bool _PROVIDE_KEY_RESPONSE_OK_COUNTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.MetricsConstants.html#PROVIDE_KEY_RESPONSE_OK_TIME_MICROS"/>
            /// </summary>
            public static Java.Lang.String PROVIDE_KEY_RESPONSE_OK_TIME_MICROS { get { if (!_PROVIDE_KEY_RESPONSE_OK_TIME_MICROSReady) { _PROVIDE_KEY_RESPONSE_OK_TIME_MICROSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROVIDE_KEY_RESPONSE_OK_TIME_MICROS"); _PROVIDE_KEY_RESPONSE_OK_TIME_MICROSReady = true; } return _PROVIDE_KEY_RESPONSE_OK_TIME_MICROSContent; } }
            private static Java.Lang.String _PROVIDE_KEY_RESPONSE_OK_TIME_MICROSContent = default;
            private static bool _PROVIDE_KEY_RESPONSE_OK_TIME_MICROSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.MetricsConstants.html#PROVIDE_PROVISION_RESPONSE_ERROR_COUNT"/>
            /// </summary>
            public static Java.Lang.String PROVIDE_PROVISION_RESPONSE_ERROR_COUNT { get { if (!_PROVIDE_PROVISION_RESPONSE_ERROR_COUNTReady) { _PROVIDE_PROVISION_RESPONSE_ERROR_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROVIDE_PROVISION_RESPONSE_ERROR_COUNT"); _PROVIDE_PROVISION_RESPONSE_ERROR_COUNTReady = true; } return _PROVIDE_PROVISION_RESPONSE_ERROR_COUNTContent; } }
            private static Java.Lang.String _PROVIDE_PROVISION_RESPONSE_ERROR_COUNTContent = default;
            private static bool _PROVIDE_PROVISION_RESPONSE_ERROR_COUNTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.MetricsConstants.html#PROVIDE_PROVISION_RESPONSE_ERROR_LIST"/>
            /// </summary>
            public static Java.Lang.String PROVIDE_PROVISION_RESPONSE_ERROR_LIST { get { if (!_PROVIDE_PROVISION_RESPONSE_ERROR_LISTReady) { _PROVIDE_PROVISION_RESPONSE_ERROR_LISTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROVIDE_PROVISION_RESPONSE_ERROR_LIST"); _PROVIDE_PROVISION_RESPONSE_ERROR_LISTReady = true; } return _PROVIDE_PROVISION_RESPONSE_ERROR_LISTContent; } }
            private static Java.Lang.String _PROVIDE_PROVISION_RESPONSE_ERROR_LISTContent = default;
            private static bool _PROVIDE_PROVISION_RESPONSE_ERROR_LISTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.MetricsConstants.html#PROVIDE_PROVISION_RESPONSE_OK_COUNT"/>
            /// </summary>
            public static Java.Lang.String PROVIDE_PROVISION_RESPONSE_OK_COUNT { get { if (!_PROVIDE_PROVISION_RESPONSE_OK_COUNTReady) { _PROVIDE_PROVISION_RESPONSE_OK_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROVIDE_PROVISION_RESPONSE_OK_COUNT"); _PROVIDE_PROVISION_RESPONSE_OK_COUNTReady = true; } return _PROVIDE_PROVISION_RESPONSE_OK_COUNTContent; } }
            private static Java.Lang.String _PROVIDE_PROVISION_RESPONSE_OK_COUNTContent = default;
            private static bool _PROVIDE_PROVISION_RESPONSE_OK_COUNTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.MetricsConstants.html#SESSION_END_TIMES_MS"/>
            /// </summary>
            public static Java.Lang.String SESSION_END_TIMES_MS { get { if (!_SESSION_END_TIMES_MSReady) { _SESSION_END_TIMES_MSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SESSION_END_TIMES_MS"); _SESSION_END_TIMES_MSReady = true; } return _SESSION_END_TIMES_MSContent; } }
            private static Java.Lang.String _SESSION_END_TIMES_MSContent = default;
            private static bool _SESSION_END_TIMES_MSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.MetricsConstants.html#SESSION_START_TIMES_MS"/>
            /// </summary>
            public static Java.Lang.String SESSION_START_TIMES_MS { get { if (!_SESSION_START_TIMES_MSReady) { _SESSION_START_TIMES_MSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SESSION_START_TIMES_MS"); _SESSION_START_TIMES_MSReady = true; } return _SESSION_START_TIMES_MSContent; } }
            private static Java.Lang.String _SESSION_START_TIMES_MSContent = default;
            private static bool _SESSION_START_TIMES_MSReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnEventListener
        public partial class OnEventListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnEventListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onEvent", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Media.MediaDrm>>>(OnEventEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/MediaDrm.OnEventListener.html#onEvent(android.media.MediaDrm,byte[],int,int,byte[])"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnEvent"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Media.MediaDrm, byte[], int, int, byte[]> OnOnEvent { get; set; } = null;

            void OnEventEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Media.MediaDrm>> data)
            {
                var methodToExecute = (OnOnEvent != null) ? OnOnEvent : OnEvent;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<byte[]>(0), data.EventData.GetAt<int>(1), data.EventData.GetAt<int>(2), data.EventData.GetAt<byte[]>(3));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.OnEventListener.html#onEvent(android.media.MediaDrm,byte[],int,int,byte[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaDrm"/></param>
            /// <param name="arg1"><see cref="byte"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="int"/></param>
            /// <param name="arg4"><see cref="byte"/></param>
            public virtual void OnEvent(Android.Media.MediaDrm arg0, byte[] arg1, int arg2, int arg3, byte[] arg4)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnEventListenerDirect
        public partial class OnEventListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.OnEventListener.html#onEvent(android.media.MediaDrm,byte[],int,int,byte[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaDrm"/></param>
            /// <param name="arg1"><see cref="byte"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="int"/></param>
            /// <param name="arg4"><see cref="byte"/></param>
            public override void OnEvent(Android.Media.MediaDrm arg0, byte[] arg1, int arg2, int arg3, byte[] arg4)
            {
                IExecute("onEvent", arg0, arg1, arg2, arg3, arg4);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnExpirationUpdateListener
        public partial class OnExpirationUpdateListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnExpirationUpdateListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onExpirationUpdate", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Media.MediaDrm>>>(OnExpirationUpdateEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/MediaDrm.OnExpirationUpdateListener.html#onExpirationUpdate(android.media.MediaDrm,byte[],long)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnExpirationUpdate"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Media.MediaDrm, byte[], long> OnOnExpirationUpdate { get; set; } = null;

            void OnExpirationUpdateEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Media.MediaDrm>> data)
            {
                var methodToExecute = (OnOnExpirationUpdate != null) ? OnOnExpirationUpdate : OnExpirationUpdate;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<byte[]>(0), data.EventData.GetAt<long>(1));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.OnExpirationUpdateListener.html#onExpirationUpdate(android.media.MediaDrm,byte[],long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaDrm"/></param>
            /// <param name="arg1"><see cref="byte"/></param>
            /// <param name="arg2"><see cref="long"/></param>
            public virtual void OnExpirationUpdate(Android.Media.MediaDrm arg0, byte[] arg1, long arg2)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnExpirationUpdateListenerDirect
        public partial class OnExpirationUpdateListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.OnExpirationUpdateListener.html#onExpirationUpdate(android.media.MediaDrm,byte[],long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaDrm"/></param>
            /// <param name="arg1"><see cref="byte"/></param>
            /// <param name="arg2"><see cref="long"/></param>
            public override void OnExpirationUpdate(Android.Media.MediaDrm arg0, byte[] arg1, long arg2)
            {
                IExecute("onExpirationUpdate", arg0, arg1, arg2);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnKeyStatusChangeListener
        public partial class OnKeyStatusChangeListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnKeyStatusChangeListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onKeyStatusChange", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Media.MediaDrm>>>(OnKeyStatusChangeEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/MediaDrm.OnKeyStatusChangeListener.html#onKeyStatusChange(android.media.MediaDrm,byte[],java.util.List,boolean)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnKeyStatusChange"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Media.MediaDrm, byte[], Java.Util.List<Android.Media.MediaDrm.KeyStatus>, bool> OnOnKeyStatusChange { get; set; } = null;

            void OnKeyStatusChangeEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Media.MediaDrm>> data)
            {
                var methodToExecute = (OnOnKeyStatusChange != null) ? OnOnKeyStatusChange : OnKeyStatusChange;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<byte[]>(0), data.EventData.GetAt<Java.Util.List<Android.Media.MediaDrm.KeyStatus>>(1), data.EventData.GetAt<bool>(2));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.OnKeyStatusChangeListener.html#onKeyStatusChange(android.media.MediaDrm,byte[],java.util.List,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaDrm"/></param>
            /// <param name="arg1"><see cref="byte"/></param>
            /// <param name="arg2"><see cref="Java.Util.List"/></param>
            /// <param name="arg3"><see cref="bool"/></param>
            public virtual void OnKeyStatusChange(Android.Media.MediaDrm arg0, byte[] arg1, Java.Util.List<Android.Media.MediaDrm.KeyStatus> arg2, bool arg3)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnKeyStatusChangeListenerDirect
        public partial class OnKeyStatusChangeListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.OnKeyStatusChangeListener.html#onKeyStatusChange(android.media.MediaDrm,byte[],java.util.List,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaDrm"/></param>
            /// <param name="arg1"><see cref="byte"/></param>
            /// <param name="arg2"><see cref="Java.Util.List"/></param>
            /// <param name="arg3"><see cref="bool"/></param>
            public override void OnKeyStatusChange(Android.Media.MediaDrm arg0, byte[] arg1, Java.Util.List<Android.Media.MediaDrm.KeyStatus> arg2, bool arg3)
            {
                IExecute("onKeyStatusChange", arg0, arg1, arg2, arg3);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnSessionLostStateListener
        public partial class OnSessionLostStateListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnSessionLostStateListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onSessionLostState", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Media.MediaDrm>>>(OnSessionLostStateEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/media/MediaDrm.OnSessionLostStateListener.html#onSessionLostState(android.media.MediaDrm,byte[])"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnSessionLostState"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Media.MediaDrm, byte[]> OnOnSessionLostState { get; set; } = null;

            void OnSessionLostStateEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Media.MediaDrm>> data)
            {
                var methodToExecute = (OnOnSessionLostState != null) ? OnOnSessionLostState : OnSessionLostState;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<byte[]>(0));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.OnSessionLostStateListener.html#onSessionLostState(android.media.MediaDrm,byte[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaDrm"/></param>
            /// <param name="arg1"><see cref="byte"/></param>
            public virtual void OnSessionLostState(Android.Media.MediaDrm arg0, byte[] arg1)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnSessionLostStateListenerDirect
        public partial class OnSessionLostStateListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.OnSessionLostStateListener.html#onSessionLostState(android.media.MediaDrm,byte[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.MediaDrm"/></param>
            /// <param name="arg1"><see cref="byte"/></param>
            public override void OnSessionLostState(Android.Media.MediaDrm arg0, byte[] arg1)
            {
                IExecute("onSessionLostState", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region PlaybackComponent
        public partial class PlaybackComponent
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.PlaybackComponent.html#getLogSessionId()"/>
            /// </summary>
            /// <returns><see cref="Android.Media.Metrics.LogSessionId"/></returns>
            public Android.Media.Metrics.LogSessionId GetLogSessionId()
            {
                return IExecuteWithSignature<Android.Media.Metrics.LogSessionId>("getLogSessionId", "()Landroid/media/metrics/LogSessionId;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.PlaybackComponent.html#setLogSessionId(android.media.metrics.LogSessionId)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Media.Metrics.LogSessionId"/></param>
            public void SetLogSessionId(Android.Media.Metrics.LogSessionId arg0)
            {
                IExecuteWithSignature("setLogSessionId", "(Landroid/media/metrics/LogSessionId;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ProvisionRequest
        public partial class ProvisionRequest
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.ProvisionRequest.html#getData()"/>
            /// </summary>
            /// <returns><see cref="byte"/></returns>
            public byte[] GetData()
            {
                return IExecuteWithSignatureArray<byte>("getData", "()[B");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/MediaDrm.ProvisionRequest.html#getDefaultUrl()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetDefaultUrl()
            {
                return IExecuteWithSignature<Java.Lang.String>("getDefaultUrl", "()Ljava/lang/String;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region SessionException
        public partial class SessionException
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.6.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Javax.Microedition.Khronos.Opengles
{
    #region IGL11ExtensionPack
    /// <summary>
    /// .NET interface for TO BE DEFINED FROM USER
    /// </summary>
    public partial interface IGL11ExtensionPack : Javax.Microedition.Khronos.Opengles.IGL
    {
        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region GL11ExtensionPack
    public partial class GL11ExtensionPack : Javax.Microedition.Khronos.Opengles.IGL11ExtensionPack
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_BLEND_DST_ALPHA"/>
        /// </summary>
        public static int GL_BLEND_DST_ALPHA { get { if (!_GL_BLEND_DST_ALPHAReady) { _GL_BLEND_DST_ALPHAContent = SGetField<int>(LocalBridgeClazz, "GL_BLEND_DST_ALPHA"); _GL_BLEND_DST_ALPHAReady = true; } return _GL_BLEND_DST_ALPHAContent; } }
        private static int _GL_BLEND_DST_ALPHAContent = default;
        private static bool _GL_BLEND_DST_ALPHAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_BLEND_DST_RGB"/>
        /// </summary>
        public static int GL_BLEND_DST_RGB { get { if (!_GL_BLEND_DST_RGBReady) { _GL_BLEND_DST_RGBContent = SGetField<int>(LocalBridgeClazz, "GL_BLEND_DST_RGB"); _GL_BLEND_DST_RGBReady = true; } return _GL_BLEND_DST_RGBContent; } }
        private static int _GL_BLEND_DST_RGBContent = default;
        private static bool _GL_BLEND_DST_RGBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_BLEND_EQUATION"/>
        /// </summary>
        public static int GL_BLEND_EQUATION { get { if (!_GL_BLEND_EQUATIONReady) { _GL_BLEND_EQUATIONContent = SGetField<int>(LocalBridgeClazz, "GL_BLEND_EQUATION"); _GL_BLEND_EQUATIONReady = true; } return _GL_BLEND_EQUATIONContent; } }
        private static int _GL_BLEND_EQUATIONContent = default;
        private static bool _GL_BLEND_EQUATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_BLEND_EQUATION_ALPHA"/>
        /// </summary>
        public static int GL_BLEND_EQUATION_ALPHA { get { if (!_GL_BLEND_EQUATION_ALPHAReady) { _GL_BLEND_EQUATION_ALPHAContent = SGetField<int>(LocalBridgeClazz, "GL_BLEND_EQUATION_ALPHA"); _GL_BLEND_EQUATION_ALPHAReady = true; } return _GL_BLEND_EQUATION_ALPHAContent; } }
        private static int _GL_BLEND_EQUATION_ALPHAContent = default;
        private static bool _GL_BLEND_EQUATION_ALPHAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_BLEND_EQUATION_RGB"/>
        /// </summary>
        public static int GL_BLEND_EQUATION_RGB { get { if (!_GL_BLEND_EQUATION_RGBReady) { _GL_BLEND_EQUATION_RGBContent = SGetField<int>(LocalBridgeClazz, "GL_BLEND_EQUATION_RGB"); _GL_BLEND_EQUATION_RGBReady = true; } return _GL_BLEND_EQUATION_RGBContent; } }
        private static int _GL_BLEND_EQUATION_RGBContent = default;
        private static bool _GL_BLEND_EQUATION_RGBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_BLEND_SRC_ALPHA"/>
        /// </summary>
        public static int GL_BLEND_SRC_ALPHA { get { if (!_GL_BLEND_SRC_ALPHAReady) { _GL_BLEND_SRC_ALPHAContent = SGetField<int>(LocalBridgeClazz, "GL_BLEND_SRC_ALPHA"); _GL_BLEND_SRC_ALPHAReady = true; } return _GL_BLEND_SRC_ALPHAContent; } }
        private static int _GL_BLEND_SRC_ALPHAContent = default;
        private static bool _GL_BLEND_SRC_ALPHAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_BLEND_SRC_RGB"/>
        /// </summary>
        public static int GL_BLEND_SRC_RGB { get { if (!_GL_BLEND_SRC_RGBReady) { _GL_BLEND_SRC_RGBContent = SGetField<int>(LocalBridgeClazz, "GL_BLEND_SRC_RGB"); _GL_BLEND_SRC_RGBReady = true; } return _GL_BLEND_SRC_RGBContent; } }
        private static int _GL_BLEND_SRC_RGBContent = default;
        private static bool _GL_BLEND_SRC_RGBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_COLOR_ATTACHMENT0_OES"/>
        /// </summary>
        public static int GL_COLOR_ATTACHMENT0_OES { get { if (!_GL_COLOR_ATTACHMENT0_OESReady) { _GL_COLOR_ATTACHMENT0_OESContent = SGetField<int>(LocalBridgeClazz, "GL_COLOR_ATTACHMENT0_OES"); _GL_COLOR_ATTACHMENT0_OESReady = true; } return _GL_COLOR_ATTACHMENT0_OESContent; } }
        private static int _GL_COLOR_ATTACHMENT0_OESContent = default;
        private static bool _GL_COLOR_ATTACHMENT0_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_COLOR_ATTACHMENT1_OES"/>
        /// </summary>
        public static int GL_COLOR_ATTACHMENT1_OES { get { if (!_GL_COLOR_ATTACHMENT1_OESReady) { _GL_COLOR_ATTACHMENT1_OESContent = SGetField<int>(LocalBridgeClazz, "GL_COLOR_ATTACHMENT1_OES"); _GL_COLOR_ATTACHMENT1_OESReady = true; } return _GL_COLOR_ATTACHMENT1_OESContent; } }
        private static int _GL_COLOR_ATTACHMENT1_OESContent = default;
        private static bool _GL_COLOR_ATTACHMENT1_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_COLOR_ATTACHMENT10_OES"/>
        /// </summary>
        public static int GL_COLOR_ATTACHMENT10_OES { get { if (!_GL_COLOR_ATTACHMENT10_OESReady) { _GL_COLOR_ATTACHMENT10_OESContent = SGetField<int>(LocalBridgeClazz, "GL_COLOR_ATTACHMENT10_OES"); _GL_COLOR_ATTACHMENT10_OESReady = true; } return _GL_COLOR_ATTACHMENT10_OESContent; } }
        private static int _GL_COLOR_ATTACHMENT10_OESContent = default;
        private static bool _GL_COLOR_ATTACHMENT10_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_COLOR_ATTACHMENT11_OES"/>
        /// </summary>
        public static int GL_COLOR_ATTACHMENT11_OES { get { if (!_GL_COLOR_ATTACHMENT11_OESReady) { _GL_COLOR_ATTACHMENT11_OESContent = SGetField<int>(LocalBridgeClazz, "GL_COLOR_ATTACHMENT11_OES"); _GL_COLOR_ATTACHMENT11_OESReady = true; } return _GL_COLOR_ATTACHMENT11_OESContent; } }
        private static int _GL_COLOR_ATTACHMENT11_OESContent = default;
        private static bool _GL_COLOR_ATTACHMENT11_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_COLOR_ATTACHMENT12_OES"/>
        /// </summary>
        public static int GL_COLOR_ATTACHMENT12_OES { get { if (!_GL_COLOR_ATTACHMENT12_OESReady) { _GL_COLOR_ATTACHMENT12_OESContent = SGetField<int>(LocalBridgeClazz, "GL_COLOR_ATTACHMENT12_OES"); _GL_COLOR_ATTACHMENT12_OESReady = true; } return _GL_COLOR_ATTACHMENT12_OESContent; } }
        private static int _GL_COLOR_ATTACHMENT12_OESContent = default;
        private static bool _GL_COLOR_ATTACHMENT12_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_COLOR_ATTACHMENT13_OES"/>
        /// </summary>
        public static int GL_COLOR_ATTACHMENT13_OES { get { if (!_GL_COLOR_ATTACHMENT13_OESReady) { _GL_COLOR_ATTACHMENT13_OESContent = SGetField<int>(LocalBridgeClazz, "GL_COLOR_ATTACHMENT13_OES"); _GL_COLOR_ATTACHMENT13_OESReady = true; } return _GL_COLOR_ATTACHMENT13_OESContent; } }
        private static int _GL_COLOR_ATTACHMENT13_OESContent = default;
        private static bool _GL_COLOR_ATTACHMENT13_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_COLOR_ATTACHMENT14_OES"/>
        /// </summary>
        public static int GL_COLOR_ATTACHMENT14_OES { get { if (!_GL_COLOR_ATTACHMENT14_OESReady) { _GL_COLOR_ATTACHMENT14_OESContent = SGetField<int>(LocalBridgeClazz, "GL_COLOR_ATTACHMENT14_OES"); _GL_COLOR_ATTACHMENT14_OESReady = true; } return _GL_COLOR_ATTACHMENT14_OESContent; } }
        private static int _GL_COLOR_ATTACHMENT14_OESContent = default;
        private static bool _GL_COLOR_ATTACHMENT14_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_COLOR_ATTACHMENT15_OES"/>
        /// </summary>
        public static int GL_COLOR_ATTACHMENT15_OES { get { if (!_GL_COLOR_ATTACHMENT15_OESReady) { _GL_COLOR_ATTACHMENT15_OESContent = SGetField<int>(LocalBridgeClazz, "GL_COLOR_ATTACHMENT15_OES"); _GL_COLOR_ATTACHMENT15_OESReady = true; } return _GL_COLOR_ATTACHMENT15_OESContent; } }
        private static int _GL_COLOR_ATTACHMENT15_OESContent = default;
        private static bool _GL_COLOR_ATTACHMENT15_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_COLOR_ATTACHMENT2_OES"/>
        /// </summary>
        public static int GL_COLOR_ATTACHMENT2_OES { get { if (!_GL_COLOR_ATTACHMENT2_OESReady) { _GL_COLOR_ATTACHMENT2_OESContent = SGetField<int>(LocalBridgeClazz, "GL_COLOR_ATTACHMENT2_OES"); _GL_COLOR_ATTACHMENT2_OESReady = true; } return _GL_COLOR_ATTACHMENT2_OESContent; } }
        private static int _GL_COLOR_ATTACHMENT2_OESContent = default;
        private static bool _GL_COLOR_ATTACHMENT2_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_COLOR_ATTACHMENT3_OES"/>
        /// </summary>
        public static int GL_COLOR_ATTACHMENT3_OES { get { if (!_GL_COLOR_ATTACHMENT3_OESReady) { _GL_COLOR_ATTACHMENT3_OESContent = SGetField<int>(LocalBridgeClazz, "GL_COLOR_ATTACHMENT3_OES"); _GL_COLOR_ATTACHMENT3_OESReady = true; } return _GL_COLOR_ATTACHMENT3_OESContent; } }
        private static int _GL_COLOR_ATTACHMENT3_OESContent = default;
        private static bool _GL_COLOR_ATTACHMENT3_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_COLOR_ATTACHMENT4_OES"/>
        /// </summary>
        public static int GL_COLOR_ATTACHMENT4_OES { get { if (!_GL_COLOR_ATTACHMENT4_OESReady) { _GL_COLOR_ATTACHMENT4_OESContent = SGetField<int>(LocalBridgeClazz, "GL_COLOR_ATTACHMENT4_OES"); _GL_COLOR_ATTACHMENT4_OESReady = true; } return _GL_COLOR_ATTACHMENT4_OESContent; } }
        private static int _GL_COLOR_ATTACHMENT4_OESContent = default;
        private static bool _GL_COLOR_ATTACHMENT4_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_COLOR_ATTACHMENT5_OES"/>
        /// </summary>
        public static int GL_COLOR_ATTACHMENT5_OES { get { if (!_GL_COLOR_ATTACHMENT5_OESReady) { _GL_COLOR_ATTACHMENT5_OESContent = SGetField<int>(LocalBridgeClazz, "GL_COLOR_ATTACHMENT5_OES"); _GL_COLOR_ATTACHMENT5_OESReady = true; } return _GL_COLOR_ATTACHMENT5_OESContent; } }
        private static int _GL_COLOR_ATTACHMENT5_OESContent = default;
        private static bool _GL_COLOR_ATTACHMENT5_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_COLOR_ATTACHMENT6_OES"/>
        /// </summary>
        public static int GL_COLOR_ATTACHMENT6_OES { get { if (!_GL_COLOR_ATTACHMENT6_OESReady) { _GL_COLOR_ATTACHMENT6_OESContent = SGetField<int>(LocalBridgeClazz, "GL_COLOR_ATTACHMENT6_OES"); _GL_COLOR_ATTACHMENT6_OESReady = true; } return _GL_COLOR_ATTACHMENT6_OESContent; } }
        private static int _GL_COLOR_ATTACHMENT6_OESContent = default;
        private static bool _GL_COLOR_ATTACHMENT6_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_COLOR_ATTACHMENT7_OES"/>
        /// </summary>
        public static int GL_COLOR_ATTACHMENT7_OES { get { if (!_GL_COLOR_ATTACHMENT7_OESReady) { _GL_COLOR_ATTACHMENT7_OESContent = SGetField<int>(LocalBridgeClazz, "GL_COLOR_ATTACHMENT7_OES"); _GL_COLOR_ATTACHMENT7_OESReady = true; } return _GL_COLOR_ATTACHMENT7_OESContent; } }
        private static int _GL_COLOR_ATTACHMENT7_OESContent = default;
        private static bool _GL_COLOR_ATTACHMENT7_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_COLOR_ATTACHMENT8_OES"/>
        /// </summary>
        public static int GL_COLOR_ATTACHMENT8_OES { get { if (!_GL_COLOR_ATTACHMENT8_OESReady) { _GL_COLOR_ATTACHMENT8_OESContent = SGetField<int>(LocalBridgeClazz, "GL_COLOR_ATTACHMENT8_OES"); _GL_COLOR_ATTACHMENT8_OESReady = true; } return _GL_COLOR_ATTACHMENT8_OESContent; } }
        private static int _GL_COLOR_ATTACHMENT8_OESContent = default;
        private static bool _GL_COLOR_ATTACHMENT8_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_COLOR_ATTACHMENT9_OES"/>
        /// </summary>
        public static int GL_COLOR_ATTACHMENT9_OES { get { if (!_GL_COLOR_ATTACHMENT9_OESReady) { _GL_COLOR_ATTACHMENT9_OESContent = SGetField<int>(LocalBridgeClazz, "GL_COLOR_ATTACHMENT9_OES"); _GL_COLOR_ATTACHMENT9_OESReady = true; } return _GL_COLOR_ATTACHMENT9_OESContent; } }
        private static int _GL_COLOR_ATTACHMENT9_OESContent = default;
        private static bool _GL_COLOR_ATTACHMENT9_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_DECR_WRAP"/>
        /// </summary>
        public static int GL_DECR_WRAP { get { if (!_GL_DECR_WRAPReady) { _GL_DECR_WRAPContent = SGetField<int>(LocalBridgeClazz, "GL_DECR_WRAP"); _GL_DECR_WRAPReady = true; } return _GL_DECR_WRAPContent; } }
        private static int _GL_DECR_WRAPContent = default;
        private static bool _GL_DECR_WRAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_DEPTH_ATTACHMENT_OES"/>
        /// </summary>
        public static int GL_DEPTH_ATTACHMENT_OES { get { if (!_GL_DEPTH_ATTACHMENT_OESReady) { _GL_DEPTH_ATTACHMENT_OESContent = SGetField<int>(LocalBridgeClazz, "GL_DEPTH_ATTACHMENT_OES"); _GL_DEPTH_ATTACHMENT_OESReady = true; } return _GL_DEPTH_ATTACHMENT_OESContent; } }
        private static int _GL_DEPTH_ATTACHMENT_OESContent = default;
        private static bool _GL_DEPTH_ATTACHMENT_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_DEPTH_COMPONENT"/>
        /// </summary>
        public static int GL_DEPTH_COMPONENT { get { if (!_GL_DEPTH_COMPONENTReady) { _GL_DEPTH_COMPONENTContent = SGetField<int>(LocalBridgeClazz, "GL_DEPTH_COMPONENT"); _GL_DEPTH_COMPONENTReady = true; } return _GL_DEPTH_COMPONENTContent; } }
        private static int _GL_DEPTH_COMPONENTContent = default;
        private static bool _GL_DEPTH_COMPONENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_DEPTH_COMPONENT16"/>
        /// </summary>
        public static int GL_DEPTH_COMPONENT16 { get { if (!_GL_DEPTH_COMPONENT16Ready) { _GL_DEPTH_COMPONENT16Content = SGetField<int>(LocalBridgeClazz, "GL_DEPTH_COMPONENT16"); _GL_DEPTH_COMPONENT16Ready = true; } return _GL_DEPTH_COMPONENT16Content; } }
        private static int _GL_DEPTH_COMPONENT16Content = default;
        private static bool _GL_DEPTH_COMPONENT16Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_DEPTH_COMPONENT24"/>
        /// </summary>
        public static int GL_DEPTH_COMPONENT24 { get { if (!_GL_DEPTH_COMPONENT24Ready) { _GL_DEPTH_COMPONENT24Content = SGetField<int>(LocalBridgeClazz, "GL_DEPTH_COMPONENT24"); _GL_DEPTH_COMPONENT24Ready = true; } return _GL_DEPTH_COMPONENT24Content; } }
        private static int _GL_DEPTH_COMPONENT24Content = default;
        private static bool _GL_DEPTH_COMPONENT24Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_DEPTH_COMPONENT32"/>
        /// </summary>
        public static int GL_DEPTH_COMPONENT32 { get { if (!_GL_DEPTH_COMPONENT32Ready) { _GL_DEPTH_COMPONENT32Content = SGetField<int>(LocalBridgeClazz, "GL_DEPTH_COMPONENT32"); _GL_DEPTH_COMPONENT32Ready = true; } return _GL_DEPTH_COMPONENT32Content; } }
        private static int _GL_DEPTH_COMPONENT32Content = default;
        private static bool _GL_DEPTH_COMPONENT32Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES { get { if (!_GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OESReady) { _GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OESContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES"); _GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OESReady = true; } return _GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OESContent; } }
        private static int _GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OESContent = default;
        private static bool _GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES { get { if (!_GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OESReady) { _GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES"); _GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OESReady = true; } return _GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OESContent; } }
        private static int _GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OESContent = default;
        private static bool _GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES { get { if (!_GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OESReady) { _GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES"); _GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OESReady = true; } return _GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OESContent; } }
        private static int _GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OESContent = default;
        private static bool _GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES { get { if (!_GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OESReady) { _GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OESContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES"); _GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OESReady = true; } return _GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OESContent; } }
        private static int _GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OESContent = default;
        private static bool _GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_FRAMEBUFFER_BINDING_OES"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_BINDING_OES { get { if (!_GL_FRAMEBUFFER_BINDING_OESReady) { _GL_FRAMEBUFFER_BINDING_OESContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_BINDING_OES"); _GL_FRAMEBUFFER_BINDING_OESReady = true; } return _GL_FRAMEBUFFER_BINDING_OESContent; } }
        private static int _GL_FRAMEBUFFER_BINDING_OESContent = default;
        private static bool _GL_FRAMEBUFFER_BINDING_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_FRAMEBUFFER_COMPLETE_OES"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_COMPLETE_OES { get { if (!_GL_FRAMEBUFFER_COMPLETE_OESReady) { _GL_FRAMEBUFFER_COMPLETE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_COMPLETE_OES"); _GL_FRAMEBUFFER_COMPLETE_OESReady = true; } return _GL_FRAMEBUFFER_COMPLETE_OESContent; } }
        private static int _GL_FRAMEBUFFER_COMPLETE_OESContent = default;
        private static bool _GL_FRAMEBUFFER_COMPLETE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES { get { if (!_GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OESReady) { _GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OESContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES"); _GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OESReady = true; } return _GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OESContent; } }
        private static int _GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OESContent = default;
        private static bool _GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES { get { if (!_GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OESReady) { _GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OESContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES"); _GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OESReady = true; } return _GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OESContent; } }
        private static int _GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OESContent = default;
        private static bool _GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OES"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OES { get { if (!_GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OESReady) { _GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OESContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OES"); _GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OESReady = true; } return _GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OESContent; } }
        private static int _GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OESContent = default;
        private static bool _GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES { get { if (!_GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OESReady) { _GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OESContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES"); _GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OESReady = true; } return _GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OESContent; } }
        private static int _GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OESContent = default;
        private static bool _GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES { get { if (!_GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OESReady) { _GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OESContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES"); _GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OESReady = true; } return _GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OESContent; } }
        private static int _GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OESContent = default;
        private static bool _GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OES"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OES { get { if (!_GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OESReady) { _GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OESContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OES"); _GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OESReady = true; } return _GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OESContent; } }
        private static int _GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OESContent = default;
        private static bool _GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_FRAMEBUFFER_OES"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_OES { get { if (!_GL_FRAMEBUFFER_OESReady) { _GL_FRAMEBUFFER_OESContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_OES"); _GL_FRAMEBUFFER_OESReady = true; } return _GL_FRAMEBUFFER_OESContent; } }
        private static int _GL_FRAMEBUFFER_OESContent = default;
        private static bool _GL_FRAMEBUFFER_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_FRAMEBUFFER_UNSUPPORTED_OES"/>
        /// </summary>
        public static int GL_FRAMEBUFFER_UNSUPPORTED_OES { get { if (!_GL_FRAMEBUFFER_UNSUPPORTED_OESReady) { _GL_FRAMEBUFFER_UNSUPPORTED_OESContent = SGetField<int>(LocalBridgeClazz, "GL_FRAMEBUFFER_UNSUPPORTED_OES"); _GL_FRAMEBUFFER_UNSUPPORTED_OESReady = true; } return _GL_FRAMEBUFFER_UNSUPPORTED_OESContent; } }
        private static int _GL_FRAMEBUFFER_UNSUPPORTED_OESContent = default;
        private static bool _GL_FRAMEBUFFER_UNSUPPORTED_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_FUNC_ADD"/>
        /// </summary>
        public static int GL_FUNC_ADD { get { if (!_GL_FUNC_ADDReady) { _GL_FUNC_ADDContent = SGetField<int>(LocalBridgeClazz, "GL_FUNC_ADD"); _GL_FUNC_ADDReady = true; } return _GL_FUNC_ADDContent; } }
        private static int _GL_FUNC_ADDContent = default;
        private static bool _GL_FUNC_ADDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_FUNC_REVERSE_SUBTRACT"/>
        /// </summary>
        public static int GL_FUNC_REVERSE_SUBTRACT { get { if (!_GL_FUNC_REVERSE_SUBTRACTReady) { _GL_FUNC_REVERSE_SUBTRACTContent = SGetField<int>(LocalBridgeClazz, "GL_FUNC_REVERSE_SUBTRACT"); _GL_FUNC_REVERSE_SUBTRACTReady = true; } return _GL_FUNC_REVERSE_SUBTRACTContent; } }
        private static int _GL_FUNC_REVERSE_SUBTRACTContent = default;
        private static bool _GL_FUNC_REVERSE_SUBTRACTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_FUNC_SUBTRACT"/>
        /// </summary>
        public static int GL_FUNC_SUBTRACT { get { if (!_GL_FUNC_SUBTRACTReady) { _GL_FUNC_SUBTRACTContent = SGetField<int>(LocalBridgeClazz, "GL_FUNC_SUBTRACT"); _GL_FUNC_SUBTRACTReady = true; } return _GL_FUNC_SUBTRACTContent; } }
        private static int _GL_FUNC_SUBTRACTContent = default;
        private static bool _GL_FUNC_SUBTRACTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_INCR_WRAP"/>
        /// </summary>
        public static int GL_INCR_WRAP { get { if (!_GL_INCR_WRAPReady) { _GL_INCR_WRAPContent = SGetField<int>(LocalBridgeClazz, "GL_INCR_WRAP"); _GL_INCR_WRAPReady = true; } return _GL_INCR_WRAPContent; } }
        private static int _GL_INCR_WRAPContent = default;
        private static bool _GL_INCR_WRAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_INVALID_FRAMEBUFFER_OPERATION_OES"/>
        /// </summary>
        public static int GL_INVALID_FRAMEBUFFER_OPERATION_OES { get { if (!_GL_INVALID_FRAMEBUFFER_OPERATION_OESReady) { _GL_INVALID_FRAMEBUFFER_OPERATION_OESContent = SGetField<int>(LocalBridgeClazz, "GL_INVALID_FRAMEBUFFER_OPERATION_OES"); _GL_INVALID_FRAMEBUFFER_OPERATION_OESReady = true; } return _GL_INVALID_FRAMEBUFFER_OPERATION_OESContent; } }
        private static int _GL_INVALID_FRAMEBUFFER_OPERATION_OESContent = default;
        private static bool _GL_INVALID_FRAMEBUFFER_OPERATION_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_MAX_COLOR_ATTACHMENTS_OES"/>
        /// </summary>
        public static int GL_MAX_COLOR_ATTACHMENTS_OES { get { if (!_GL_MAX_COLOR_ATTACHMENTS_OESReady) { _GL_MAX_COLOR_ATTACHMENTS_OESContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_COLOR_ATTACHMENTS_OES"); _GL_MAX_COLOR_ATTACHMENTS_OESReady = true; } return _GL_MAX_COLOR_ATTACHMENTS_OESContent; } }
        private static int _GL_MAX_COLOR_ATTACHMENTS_OESContent = default;
        private static bool _GL_MAX_COLOR_ATTACHMENTS_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_MAX_CUBE_MAP_TEXTURE_SIZE"/>
        /// </summary>
        public static int GL_MAX_CUBE_MAP_TEXTURE_SIZE { get { if (!_GL_MAX_CUBE_MAP_TEXTURE_SIZEReady) { _GL_MAX_CUBE_MAP_TEXTURE_SIZEContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_CUBE_MAP_TEXTURE_SIZE"); _GL_MAX_CUBE_MAP_TEXTURE_SIZEReady = true; } return _GL_MAX_CUBE_MAP_TEXTURE_SIZEContent; } }
        private static int _GL_MAX_CUBE_MAP_TEXTURE_SIZEContent = default;
        private static bool _GL_MAX_CUBE_MAP_TEXTURE_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_MAX_RENDERBUFFER_SIZE_OES"/>
        /// </summary>
        public static int GL_MAX_RENDERBUFFER_SIZE_OES { get { if (!_GL_MAX_RENDERBUFFER_SIZE_OESReady) { _GL_MAX_RENDERBUFFER_SIZE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_RENDERBUFFER_SIZE_OES"); _GL_MAX_RENDERBUFFER_SIZE_OESReady = true; } return _GL_MAX_RENDERBUFFER_SIZE_OESContent; } }
        private static int _GL_MAX_RENDERBUFFER_SIZE_OESContent = default;
        private static bool _GL_MAX_RENDERBUFFER_SIZE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_MIRRORED_REPEAT"/>
        /// </summary>
        public static int GL_MIRRORED_REPEAT { get { if (!_GL_MIRRORED_REPEATReady) { _GL_MIRRORED_REPEATContent = SGetField<int>(LocalBridgeClazz, "GL_MIRRORED_REPEAT"); _GL_MIRRORED_REPEATReady = true; } return _GL_MIRRORED_REPEATContent; } }
        private static int _GL_MIRRORED_REPEATContent = default;
        private static bool _GL_MIRRORED_REPEATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_NORMAL_MAP"/>
        /// </summary>
        public static int GL_NORMAL_MAP { get { if (!_GL_NORMAL_MAPReady) { _GL_NORMAL_MAPContent = SGetField<int>(LocalBridgeClazz, "GL_NORMAL_MAP"); _GL_NORMAL_MAPReady = true; } return _GL_NORMAL_MAPContent; } }
        private static int _GL_NORMAL_MAPContent = default;
        private static bool _GL_NORMAL_MAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_REFLECTION_MAP"/>
        /// </summary>
        public static int GL_REFLECTION_MAP { get { if (!_GL_REFLECTION_MAPReady) { _GL_REFLECTION_MAPContent = SGetField<int>(LocalBridgeClazz, "GL_REFLECTION_MAP"); _GL_REFLECTION_MAPReady = true; } return _GL_REFLECTION_MAPContent; } }
        private static int _GL_REFLECTION_MAPContent = default;
        private static bool _GL_REFLECTION_MAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_RENDERBUFFER_ALPHA_SIZE_OES"/>
        /// </summary>
        public static int GL_RENDERBUFFER_ALPHA_SIZE_OES { get { if (!_GL_RENDERBUFFER_ALPHA_SIZE_OESReady) { _GL_RENDERBUFFER_ALPHA_SIZE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_RENDERBUFFER_ALPHA_SIZE_OES"); _GL_RENDERBUFFER_ALPHA_SIZE_OESReady = true; } return _GL_RENDERBUFFER_ALPHA_SIZE_OESContent; } }
        private static int _GL_RENDERBUFFER_ALPHA_SIZE_OESContent = default;
        private static bool _GL_RENDERBUFFER_ALPHA_SIZE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_RENDERBUFFER_BINDING_OES"/>
        /// </summary>
        public static int GL_RENDERBUFFER_BINDING_OES { get { if (!_GL_RENDERBUFFER_BINDING_OESReady) { _GL_RENDERBUFFER_BINDING_OESContent = SGetField<int>(LocalBridgeClazz, "GL_RENDERBUFFER_BINDING_OES"); _GL_RENDERBUFFER_BINDING_OESReady = true; } return _GL_RENDERBUFFER_BINDING_OESContent; } }
        private static int _GL_RENDERBUFFER_BINDING_OESContent = default;
        private static bool _GL_RENDERBUFFER_BINDING_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_RENDERBUFFER_BLUE_SIZE_OES"/>
        /// </summary>
        public static int GL_RENDERBUFFER_BLUE_SIZE_OES { get { if (!_GL_RENDERBUFFER_BLUE_SIZE_OESReady) { _GL_RENDERBUFFER_BLUE_SIZE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_RENDERBUFFER_BLUE_SIZE_OES"); _GL_RENDERBUFFER_BLUE_SIZE_OESReady = true; } return _GL_RENDERBUFFER_BLUE_SIZE_OESContent; } }
        private static int _GL_RENDERBUFFER_BLUE_SIZE_OESContent = default;
        private static bool _GL_RENDERBUFFER_BLUE_SIZE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_RENDERBUFFER_DEPTH_SIZE_OES"/>
        /// </summary>
        public static int GL_RENDERBUFFER_DEPTH_SIZE_OES { get { if (!_GL_RENDERBUFFER_DEPTH_SIZE_OESReady) { _GL_RENDERBUFFER_DEPTH_SIZE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_RENDERBUFFER_DEPTH_SIZE_OES"); _GL_RENDERBUFFER_DEPTH_SIZE_OESReady = true; } return _GL_RENDERBUFFER_DEPTH_SIZE_OESContent; } }
        private static int _GL_RENDERBUFFER_DEPTH_SIZE_OESContent = default;
        private static bool _GL_RENDERBUFFER_DEPTH_SIZE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_RENDERBUFFER_GREEN_SIZE_OES"/>
        /// </summary>
        public static int GL_RENDERBUFFER_GREEN_SIZE_OES { get { if (!_GL_RENDERBUFFER_GREEN_SIZE_OESReady) { _GL_RENDERBUFFER_GREEN_SIZE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_RENDERBUFFER_GREEN_SIZE_OES"); _GL_RENDERBUFFER_GREEN_SIZE_OESReady = true; } return _GL_RENDERBUFFER_GREEN_SIZE_OESContent; } }
        private static int _GL_RENDERBUFFER_GREEN_SIZE_OESContent = default;
        private static bool _GL_RENDERBUFFER_GREEN_SIZE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_RENDERBUFFER_HEIGHT_OES"/>
        /// </summary>
        public static int GL_RENDERBUFFER_HEIGHT_OES { get { if (!_GL_RENDERBUFFER_HEIGHT_OESReady) { _GL_RENDERBUFFER_HEIGHT_OESContent = SGetField<int>(LocalBridgeClazz, "GL_RENDERBUFFER_HEIGHT_OES"); _GL_RENDERBUFFER_HEIGHT_OESReady = true; } return _GL_RENDERBUFFER_HEIGHT_OESContent; } }
        private static int _GL_RENDERBUFFER_HEIGHT_OESContent = default;
        private static bool _GL_RENDERBUFFER_HEIGHT_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_RENDERBUFFER_INTERNAL_FORMAT_OES"/>
        /// </summary>
        public static int GL_RENDERBUFFER_INTERNAL_FORMAT_OES { get { if (!_GL_RENDERBUFFER_INTERNAL_FORMAT_OESReady) { _GL_RENDERBUFFER_INTERNAL_FORMAT_OESContent = SGetField<int>(LocalBridgeClazz, "GL_RENDERBUFFER_INTERNAL_FORMAT_OES"); _GL_RENDERBUFFER_INTERNAL_FORMAT_OESReady = true; } return _GL_RENDERBUFFER_INTERNAL_FORMAT_OESContent; } }
        private static int _GL_RENDERBUFFER_INTERNAL_FORMAT_OESContent = default;
        private static bool _GL_RENDERBUFFER_INTERNAL_FORMAT_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_RENDERBUFFER_OES"/>
        /// </summary>
        public static int GL_RENDERBUFFER_OES { get { if (!_GL_RENDERBUFFER_OESReady) { _GL_RENDERBUFFER_OESContent = SGetField<int>(LocalBridgeClazz, "GL_RENDERBUFFER_OES"); _GL_RENDERBUFFER_OESReady = true; } return _GL_RENDERBUFFER_OESContent; } }
        private static int _GL_RENDERBUFFER_OESContent = default;
        private static bool _GL_RENDERBUFFER_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_RENDERBUFFER_RED_SIZE_OES"/>
        /// </summary>
        public static int GL_RENDERBUFFER_RED_SIZE_OES { get { if (!_GL_RENDERBUFFER_RED_SIZE_OESReady) { _GL_RENDERBUFFER_RED_SIZE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_RENDERBUFFER_RED_SIZE_OES"); _GL_RENDERBUFFER_RED_SIZE_OESReady = true; } return _GL_RENDERBUFFER_RED_SIZE_OESContent; } }
        private static int _GL_RENDERBUFFER_RED_SIZE_OESContent = default;
        private static bool _GL_RENDERBUFFER_RED_SIZE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_RENDERBUFFER_STENCIL_SIZE_OES"/>
        /// </summary>
        public static int GL_RENDERBUFFER_STENCIL_SIZE_OES { get { if (!_GL_RENDERBUFFER_STENCIL_SIZE_OESReady) { _GL_RENDERBUFFER_STENCIL_SIZE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_RENDERBUFFER_STENCIL_SIZE_OES"); _GL_RENDERBUFFER_STENCIL_SIZE_OESReady = true; } return _GL_RENDERBUFFER_STENCIL_SIZE_OESContent; } }
        private static int _GL_RENDERBUFFER_STENCIL_SIZE_OESContent = default;
        private static bool _GL_RENDERBUFFER_STENCIL_SIZE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_RENDERBUFFER_WIDTH_OES"/>
        /// </summary>
        public static int GL_RENDERBUFFER_WIDTH_OES { get { if (!_GL_RENDERBUFFER_WIDTH_OESReady) { _GL_RENDERBUFFER_WIDTH_OESContent = SGetField<int>(LocalBridgeClazz, "GL_RENDERBUFFER_WIDTH_OES"); _GL_RENDERBUFFER_WIDTH_OESReady = true; } return _GL_RENDERBUFFER_WIDTH_OESContent; } }
        private static int _GL_RENDERBUFFER_WIDTH_OESContent = default;
        private static bool _GL_RENDERBUFFER_WIDTH_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_RGB5_A1"/>
        /// </summary>
        public static int GL_RGB5_A1 { get { if (!_GL_RGB5_A1Ready) { _GL_RGB5_A1Content = SGetField<int>(LocalBridgeClazz, "GL_RGB5_A1"); _GL_RGB5_A1Ready = true; } return _GL_RGB5_A1Content; } }
        private static int _GL_RGB5_A1Content = default;
        private static bool _GL_RGB5_A1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_RGB565_OES"/>
        /// </summary>
        public static int GL_RGB565_OES { get { if (!_GL_RGB565_OESReady) { _GL_RGB565_OESContent = SGetField<int>(LocalBridgeClazz, "GL_RGB565_OES"); _GL_RGB565_OESReady = true; } return _GL_RGB565_OESContent; } }
        private static int _GL_RGB565_OESContent = default;
        private static bool _GL_RGB565_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_RGB8"/>
        /// </summary>
        public static int GL_RGB8 { get { if (!_GL_RGB8Ready) { _GL_RGB8Content = SGetField<int>(LocalBridgeClazz, "GL_RGB8"); _GL_RGB8Ready = true; } return _GL_RGB8Content; } }
        private static int _GL_RGB8Content = default;
        private static bool _GL_RGB8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_RGBA4"/>
        /// </summary>
        public static int GL_RGBA4 { get { if (!_GL_RGBA4Ready) { _GL_RGBA4Content = SGetField<int>(LocalBridgeClazz, "GL_RGBA4"); _GL_RGBA4Ready = true; } return _GL_RGBA4Content; } }
        private static int _GL_RGBA4Content = default;
        private static bool _GL_RGBA4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_RGBA8"/>
        /// </summary>
        public static int GL_RGBA8 { get { if (!_GL_RGBA8Ready) { _GL_RGBA8Content = SGetField<int>(LocalBridgeClazz, "GL_RGBA8"); _GL_RGBA8Ready = true; } return _GL_RGBA8Content; } }
        private static int _GL_RGBA8Content = default;
        private static bool _GL_RGBA8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_STENCIL_ATTACHMENT_OES"/>
        /// </summary>
        public static int GL_STENCIL_ATTACHMENT_OES { get { if (!_GL_STENCIL_ATTACHMENT_OESReady) { _GL_STENCIL_ATTACHMENT_OESContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_ATTACHMENT_OES"); _GL_STENCIL_ATTACHMENT_OESReady = true; } return _GL_STENCIL_ATTACHMENT_OESContent; } }
        private static int _GL_STENCIL_ATTACHMENT_OESContent = default;
        private static bool _GL_STENCIL_ATTACHMENT_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_STENCIL_INDEX"/>
        /// </summary>
        public static int GL_STENCIL_INDEX { get { if (!_GL_STENCIL_INDEXReady) { _GL_STENCIL_INDEXContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_INDEX"); _GL_STENCIL_INDEXReady = true; } return _GL_STENCIL_INDEXContent; } }
        private static int _GL_STENCIL_INDEXContent = default;
        private static bool _GL_STENCIL_INDEXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_STENCIL_INDEX1_OES"/>
        /// </summary>
        public static int GL_STENCIL_INDEX1_OES { get { if (!_GL_STENCIL_INDEX1_OESReady) { _GL_STENCIL_INDEX1_OESContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_INDEX1_OES"); _GL_STENCIL_INDEX1_OESReady = true; } return _GL_STENCIL_INDEX1_OESContent; } }
        private static int _GL_STENCIL_INDEX1_OESContent = default;
        private static bool _GL_STENCIL_INDEX1_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_STENCIL_INDEX4_OES"/>
        /// </summary>
        public static int GL_STENCIL_INDEX4_OES { get { if (!_GL_STENCIL_INDEX4_OESReady) { _GL_STENCIL_INDEX4_OESContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_INDEX4_OES"); _GL_STENCIL_INDEX4_OESReady = true; } return _GL_STENCIL_INDEX4_OESContent; } }
        private static int _GL_STENCIL_INDEX4_OESContent = default;
        private static bool _GL_STENCIL_INDEX4_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_STENCIL_INDEX8_OES"/>
        /// </summary>
        public static int GL_STENCIL_INDEX8_OES { get { if (!_GL_STENCIL_INDEX8_OESReady) { _GL_STENCIL_INDEX8_OESContent = SGetField<int>(LocalBridgeClazz, "GL_STENCIL_INDEX8_OES"); _GL_STENCIL_INDEX8_OESReady = true; } return _GL_STENCIL_INDEX8_OESContent; } }
        private static int _GL_STENCIL_INDEX8_OESContent = default;
        private static bool _GL_STENCIL_INDEX8_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_STR"/>
        /// </summary>
        public static int GL_STR { get { if (!_GL_STRReady) { _GL_STRContent = SGetField<int>(LocalBridgeClazz, "GL_STR"); _GL_STRReady = true; } return _GL_STRContent; } }
        private static int _GL_STRContent = default;
        private static bool _GL_STRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_TEXTURE_BINDING_CUBE_MAP"/>
        /// </summary>
        public static int GL_TEXTURE_BINDING_CUBE_MAP { get { if (!_GL_TEXTURE_BINDING_CUBE_MAPReady) { _GL_TEXTURE_BINDING_CUBE_MAPContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_BINDING_CUBE_MAP"); _GL_TEXTURE_BINDING_CUBE_MAPReady = true; } return _GL_TEXTURE_BINDING_CUBE_MAPContent; } }
        private static int _GL_TEXTURE_BINDING_CUBE_MAPContent = default;
        private static bool _GL_TEXTURE_BINDING_CUBE_MAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_TEXTURE_CUBE_MAP"/>
        /// </summary>
        public static int GL_TEXTURE_CUBE_MAP { get { if (!_GL_TEXTURE_CUBE_MAPReady) { _GL_TEXTURE_CUBE_MAPContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_CUBE_MAP"); _GL_TEXTURE_CUBE_MAPReady = true; } return _GL_TEXTURE_CUBE_MAPContent; } }
        private static int _GL_TEXTURE_CUBE_MAPContent = default;
        private static bool _GL_TEXTURE_CUBE_MAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_TEXTURE_CUBE_MAP_NEGATIVE_X"/>
        /// </summary>
        public static int GL_TEXTURE_CUBE_MAP_NEGATIVE_X { get { if (!_GL_TEXTURE_CUBE_MAP_NEGATIVE_XReady) { _GL_TEXTURE_CUBE_MAP_NEGATIVE_XContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_CUBE_MAP_NEGATIVE_X"); _GL_TEXTURE_CUBE_MAP_NEGATIVE_XReady = true; } return _GL_TEXTURE_CUBE_MAP_NEGATIVE_XContent; } }
        private static int _GL_TEXTURE_CUBE_MAP_NEGATIVE_XContent = default;
        private static bool _GL_TEXTURE_CUBE_MAP_NEGATIVE_XReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y"/>
        /// </summary>
        public static int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y { get { if (!_GL_TEXTURE_CUBE_MAP_NEGATIVE_YReady) { _GL_TEXTURE_CUBE_MAP_NEGATIVE_YContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_CUBE_MAP_NEGATIVE_Y"); _GL_TEXTURE_CUBE_MAP_NEGATIVE_YReady = true; } return _GL_TEXTURE_CUBE_MAP_NEGATIVE_YContent; } }
        private static int _GL_TEXTURE_CUBE_MAP_NEGATIVE_YContent = default;
        private static bool _GL_TEXTURE_CUBE_MAP_NEGATIVE_YReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z"/>
        /// </summary>
        public static int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z { get { if (!_GL_TEXTURE_CUBE_MAP_NEGATIVE_ZReady) { _GL_TEXTURE_CUBE_MAP_NEGATIVE_ZContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_CUBE_MAP_NEGATIVE_Z"); _GL_TEXTURE_CUBE_MAP_NEGATIVE_ZReady = true; } return _GL_TEXTURE_CUBE_MAP_NEGATIVE_ZContent; } }
        private static int _GL_TEXTURE_CUBE_MAP_NEGATIVE_ZContent = default;
        private static bool _GL_TEXTURE_CUBE_MAP_NEGATIVE_ZReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_TEXTURE_CUBE_MAP_POSITIVE_X"/>
        /// </summary>
        public static int GL_TEXTURE_CUBE_MAP_POSITIVE_X { get { if (!_GL_TEXTURE_CUBE_MAP_POSITIVE_XReady) { _GL_TEXTURE_CUBE_MAP_POSITIVE_XContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_CUBE_MAP_POSITIVE_X"); _GL_TEXTURE_CUBE_MAP_POSITIVE_XReady = true; } return _GL_TEXTURE_CUBE_MAP_POSITIVE_XContent; } }
        private static int _GL_TEXTURE_CUBE_MAP_POSITIVE_XContent = default;
        private static bool _GL_TEXTURE_CUBE_MAP_POSITIVE_XReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_TEXTURE_CUBE_MAP_POSITIVE_Y"/>
        /// </summary>
        public static int GL_TEXTURE_CUBE_MAP_POSITIVE_Y { get { if (!_GL_TEXTURE_CUBE_MAP_POSITIVE_YReady) { _GL_TEXTURE_CUBE_MAP_POSITIVE_YContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_CUBE_MAP_POSITIVE_Y"); _GL_TEXTURE_CUBE_MAP_POSITIVE_YReady = true; } return _GL_TEXTURE_CUBE_MAP_POSITIVE_YContent; } }
        private static int _GL_TEXTURE_CUBE_MAP_POSITIVE_YContent = default;
        private static bool _GL_TEXTURE_CUBE_MAP_POSITIVE_YReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_TEXTURE_CUBE_MAP_POSITIVE_Z"/>
        /// </summary>
        public static int GL_TEXTURE_CUBE_MAP_POSITIVE_Z { get { if (!_GL_TEXTURE_CUBE_MAP_POSITIVE_ZReady) { _GL_TEXTURE_CUBE_MAP_POSITIVE_ZContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_CUBE_MAP_POSITIVE_Z"); _GL_TEXTURE_CUBE_MAP_POSITIVE_ZReady = true; } return _GL_TEXTURE_CUBE_MAP_POSITIVE_ZContent; } }
        private static int _GL_TEXTURE_CUBE_MAP_POSITIVE_ZContent = default;
        private static bool _GL_TEXTURE_CUBE_MAP_POSITIVE_ZReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_TEXTURE_GEN_MODE"/>
        /// </summary>
        public static int GL_TEXTURE_GEN_MODE { get { if (!_GL_TEXTURE_GEN_MODEReady) { _GL_TEXTURE_GEN_MODEContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_GEN_MODE"); _GL_TEXTURE_GEN_MODEReady = true; } return _GL_TEXTURE_GEN_MODEContent; } }
        private static int _GL_TEXTURE_GEN_MODEContent = default;
        private static bool _GL_TEXTURE_GEN_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#GL_TEXTURE_GEN_STR"/>
        /// </summary>
        public static int GL_TEXTURE_GEN_STR { get { if (!_GL_TEXTURE_GEN_STRReady) { _GL_TEXTURE_GEN_STRContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_GEN_STR"); _GL_TEXTURE_GEN_STRReady = true; } return _GL_TEXTURE_GEN_STRContent; } }
        private static int _GL_TEXTURE_GEN_STRContent = default;
        private static bool _GL_TEXTURE_GEN_STRReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glIsFramebufferOES(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool GlIsFramebufferOES(int arg0)
        {
            return IExecuteWithSignature<bool>("glIsFramebufferOES", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glIsRenderbufferOES(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool GlIsRenderbufferOES(int arg0)
        {
            return IExecuteWithSignature<bool>("glIsRenderbufferOES", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glCheckFramebufferStatusOES(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GlCheckFramebufferStatusOES(int arg0)
        {
            return IExecuteWithSignature<int>("glCheckFramebufferStatusOES", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glBindFramebufferOES(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void GlBindFramebufferOES(int arg0, int arg1)
        {
            IExecute("glBindFramebufferOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glBindRenderbufferOES(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void GlBindRenderbufferOES(int arg0, int arg1)
        {
            IExecute("glBindRenderbufferOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glBindTexture(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void GlBindTexture(int arg0, int arg1)
        {
            IExecute("glBindTexture", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glBlendEquation(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void GlBlendEquation(int arg0)
        {
            IExecuteWithSignature("glBlendEquation", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glBlendEquationSeparate(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void GlBlendEquationSeparate(int arg0, int arg1)
        {
            IExecute("glBlendEquationSeparate", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glBlendFuncSeparate(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void GlBlendFuncSeparate(int arg0, int arg1, int arg2, int arg3)
        {
            IExecute("glBlendFuncSeparate", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="Java.Nio.Buffer"/></param>
        public void GlCompressedTexImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, Java.Nio.Buffer arg7)
        {
            IExecute("glCompressedTexImage2D", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glCopyTexImage2D(int,int,int,int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        public void GlCopyTexImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7)
        {
            IExecute("glCopyTexImage2D", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glDeleteFramebuffersOES(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void GlDeleteFramebuffersOES(int arg0, int[] arg1, int arg2)
        {
            IExecute("glDeleteFramebuffersOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glDeleteFramebuffersOES(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public void GlDeleteFramebuffersOES(int arg0, Java.Nio.IntBuffer arg1)
        {
            IExecute("glDeleteFramebuffersOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glDeleteRenderbuffersOES(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void GlDeleteRenderbuffersOES(int arg0, int[] arg1, int arg2)
        {
            IExecute("glDeleteRenderbuffersOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glDeleteRenderbuffersOES(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public void GlDeleteRenderbuffersOES(int arg0, Java.Nio.IntBuffer arg1)
        {
            IExecute("glDeleteRenderbuffersOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glEnable(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void GlEnable(int arg0)
        {
            IExecuteWithSignature("glEnable", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glFramebufferRenderbufferOES(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void GlFramebufferRenderbufferOES(int arg0, int arg1, int arg2, int arg3)
        {
            IExecute("glFramebufferRenderbufferOES", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glFramebufferTexture2DOES(int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public void GlFramebufferTexture2DOES(int arg0, int arg1, int arg2, int arg3, int arg4)
        {
            IExecute("glFramebufferTexture2DOES", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glGenerateMipmapOES(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void GlGenerateMipmapOES(int arg0)
        {
            IExecuteWithSignature("glGenerateMipmapOES", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glGenFramebuffersOES(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void GlGenFramebuffersOES(int arg0, int[] arg1, int arg2)
        {
            IExecute("glGenFramebuffersOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glGenFramebuffersOES(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public void GlGenFramebuffersOES(int arg0, Java.Nio.IntBuffer arg1)
        {
            IExecute("glGenFramebuffersOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glGenRenderbuffersOES(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void GlGenRenderbuffersOES(int arg0, int[] arg1, int arg2)
        {
            IExecute("glGenRenderbuffersOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glGenRenderbuffersOES(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public void GlGenRenderbuffersOES(int arg0, Java.Nio.IntBuffer arg1)
        {
            IExecute("glGenRenderbuffersOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glGetFramebufferAttachmentParameterivOES(int,int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public void GlGetFramebufferAttachmentParameterivOES(int arg0, int arg1, int arg2, int[] arg3, int arg4)
        {
            IExecute("glGetFramebufferAttachmentParameterivOES", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glGetFramebufferAttachmentParameterivOES(int,int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.IntBuffer"/></param>
        public void GlGetFramebufferAttachmentParameterivOES(int arg0, int arg1, int arg2, Java.Nio.IntBuffer arg3)
        {
            IExecute("glGetFramebufferAttachmentParameterivOES", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glGetIntegerv(int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void GlGetIntegerv(int arg0, int[] arg1, int arg2)
        {
            IExecute("glGetIntegerv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glGetIntegerv(int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Nio.IntBuffer"/></param>
        public void GlGetIntegerv(int arg0, Java.Nio.IntBuffer arg1)
        {
            IExecute("glGetIntegerv", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glGetRenderbufferParameterivOES(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void GlGetRenderbufferParameterivOES(int arg0, int arg1, int[] arg2, int arg3)
        {
            IExecute("glGetRenderbufferParameterivOES", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glGetRenderbufferParameterivOES(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public void GlGetRenderbufferParameterivOES(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            IExecute("glGetRenderbufferParameterivOES", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glGetTexGenfv(int,int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void GlGetTexGenfv(int arg0, int arg1, float[] arg2, int arg3)
        {
            IExecute("glGetTexGenfv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glGetTexGenfv(int,int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.FloatBuffer"/></param>
        public void GlGetTexGenfv(int arg0, int arg1, Java.Nio.FloatBuffer arg2)
        {
            IExecute("glGetTexGenfv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glGetTexGeniv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void GlGetTexGeniv(int arg0, int arg1, int[] arg2, int arg3)
        {
            IExecute("glGetTexGeniv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glGetTexGeniv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public void GlGetTexGeniv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            IExecute("glGetTexGeniv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glGetTexGenxv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void GlGetTexGenxv(int arg0, int arg1, int[] arg2, int arg3)
        {
            IExecute("glGetTexGenxv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glGetTexGenxv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public void GlGetTexGenxv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            IExecute("glGetTexGenxv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glRenderbufferStorageOES(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void GlRenderbufferStorageOES(int arg0, int arg1, int arg2, int arg3)
        {
            IExecute("glRenderbufferStorageOES", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glStencilOp(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void GlStencilOp(int arg0, int arg1, int arg2)
        {
            IExecute("glStencilOp", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glTexEnvf(int,int,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        public void GlTexEnvf(int arg0, int arg1, float arg2)
        {
            IExecute("glTexEnvf", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glTexEnvfv(int,int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void GlTexEnvfv(int arg0, int arg1, float[] arg2, int arg3)
        {
            IExecute("glTexEnvfv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glTexEnvfv(int,int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.FloatBuffer"/></param>
        public void GlTexEnvfv(int arg0, int arg1, Java.Nio.FloatBuffer arg2)
        {
            IExecute("glTexEnvfv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glTexEnvx(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void GlTexEnvx(int arg0, int arg1, int arg2)
        {
            IExecute("glTexEnvx", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glTexEnvxv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void GlTexEnvxv(int arg0, int arg1, int[] arg2, int arg3)
        {
            IExecute("glTexEnvxv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glTexEnvxv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public void GlTexEnvxv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            IExecute("glTexEnvxv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glTexGenf(int,int,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        public void GlTexGenf(int arg0, int arg1, float arg2)
        {
            IExecute("glTexGenf", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glTexGenfv(int,int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void GlTexGenfv(int arg0, int arg1, float[] arg2, int arg3)
        {
            IExecute("glTexGenfv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glTexGenfv(int,int,java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.FloatBuffer"/></param>
        public void GlTexGenfv(int arg0, int arg1, Java.Nio.FloatBuffer arg2)
        {
            IExecute("glTexGenfv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glTexGeni(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void GlTexGeni(int arg0, int arg1, int arg2)
        {
            IExecute("glTexGeni", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glTexGeniv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void GlTexGeniv(int arg0, int arg1, int[] arg2, int arg3)
        {
            IExecute("glTexGeniv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glTexGeniv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public void GlTexGeniv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            IExecute("glTexGeniv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glTexGenx(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void GlTexGenx(int arg0, int arg1, int arg2)
        {
            IExecute("glTexGenx", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glTexGenxv(int,int,int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void GlTexGenxv(int arg0, int arg1, int[] arg2, int arg3)
        {
            IExecute("glTexGenxv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glTexGenxv(int,int,java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Nio.IntBuffer"/></param>
        public void GlTexGenxv(int arg0, int arg1, Java.Nio.IntBuffer arg2)
        {
            IExecute("glTexGenxv", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html#glTexParameterf(int,int,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        public void GlTexParameterf(int arg0, int arg1, float arg2)
        {
            IExecute("glTexParameterf", arg0, arg1, arg2);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
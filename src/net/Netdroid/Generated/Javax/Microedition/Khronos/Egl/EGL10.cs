/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.5.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Javax.Microedition.Khronos.Egl
{
    #region IEGL10
    /// <summary>
    /// .NET interface for TO BE DEFINED FROM USER
    /// </summary>
    public partial interface IEGL10 : Javax.Microedition.Khronos.Egl.IEGL
    {
        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region EGL10
    public partial class EGL10 : Javax.Microedition.Khronos.Egl.IEGL10
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_ALPHA_FORMAT"/>
        /// </summary>
        public static int EGL_ALPHA_FORMAT { get { if (!_EGL_ALPHA_FORMATReady) { _EGL_ALPHA_FORMATContent = SGetField<int>(LocalBridgeClazz, "EGL_ALPHA_FORMAT"); _EGL_ALPHA_FORMATReady = true; } return _EGL_ALPHA_FORMATContent; } }
        private static int _EGL_ALPHA_FORMATContent = default;
        private static bool _EGL_ALPHA_FORMATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_ALPHA_MASK_SIZE"/>
        /// </summary>
        public static int EGL_ALPHA_MASK_SIZE { get { if (!_EGL_ALPHA_MASK_SIZEReady) { _EGL_ALPHA_MASK_SIZEContent = SGetField<int>(LocalBridgeClazz, "EGL_ALPHA_MASK_SIZE"); _EGL_ALPHA_MASK_SIZEReady = true; } return _EGL_ALPHA_MASK_SIZEContent; } }
        private static int _EGL_ALPHA_MASK_SIZEContent = default;
        private static bool _EGL_ALPHA_MASK_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_ALPHA_SIZE"/>
        /// </summary>
        public static int EGL_ALPHA_SIZE { get { if (!_EGL_ALPHA_SIZEReady) { _EGL_ALPHA_SIZEContent = SGetField<int>(LocalBridgeClazz, "EGL_ALPHA_SIZE"); _EGL_ALPHA_SIZEReady = true; } return _EGL_ALPHA_SIZEContent; } }
        private static int _EGL_ALPHA_SIZEContent = default;
        private static bool _EGL_ALPHA_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_BAD_ACCESS"/>
        /// </summary>
        public static int EGL_BAD_ACCESS { get { if (!_EGL_BAD_ACCESSReady) { _EGL_BAD_ACCESSContent = SGetField<int>(LocalBridgeClazz, "EGL_BAD_ACCESS"); _EGL_BAD_ACCESSReady = true; } return _EGL_BAD_ACCESSContent; } }
        private static int _EGL_BAD_ACCESSContent = default;
        private static bool _EGL_BAD_ACCESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_BAD_ALLOC"/>
        /// </summary>
        public static int EGL_BAD_ALLOC { get { if (!_EGL_BAD_ALLOCReady) { _EGL_BAD_ALLOCContent = SGetField<int>(LocalBridgeClazz, "EGL_BAD_ALLOC"); _EGL_BAD_ALLOCReady = true; } return _EGL_BAD_ALLOCContent; } }
        private static int _EGL_BAD_ALLOCContent = default;
        private static bool _EGL_BAD_ALLOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_BAD_ATTRIBUTE"/>
        /// </summary>
        public static int EGL_BAD_ATTRIBUTE { get { if (!_EGL_BAD_ATTRIBUTEReady) { _EGL_BAD_ATTRIBUTEContent = SGetField<int>(LocalBridgeClazz, "EGL_BAD_ATTRIBUTE"); _EGL_BAD_ATTRIBUTEReady = true; } return _EGL_BAD_ATTRIBUTEContent; } }
        private static int _EGL_BAD_ATTRIBUTEContent = default;
        private static bool _EGL_BAD_ATTRIBUTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_BAD_CONFIG"/>
        /// </summary>
        public static int EGL_BAD_CONFIG { get { if (!_EGL_BAD_CONFIGReady) { _EGL_BAD_CONFIGContent = SGetField<int>(LocalBridgeClazz, "EGL_BAD_CONFIG"); _EGL_BAD_CONFIGReady = true; } return _EGL_BAD_CONFIGContent; } }
        private static int _EGL_BAD_CONFIGContent = default;
        private static bool _EGL_BAD_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_BAD_CONTEXT"/>
        /// </summary>
        public static int EGL_BAD_CONTEXT { get { if (!_EGL_BAD_CONTEXTReady) { _EGL_BAD_CONTEXTContent = SGetField<int>(LocalBridgeClazz, "EGL_BAD_CONTEXT"); _EGL_BAD_CONTEXTReady = true; } return _EGL_BAD_CONTEXTContent; } }
        private static int _EGL_BAD_CONTEXTContent = default;
        private static bool _EGL_BAD_CONTEXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_BAD_CURRENT_SURFACE"/>
        /// </summary>
        public static int EGL_BAD_CURRENT_SURFACE { get { if (!_EGL_BAD_CURRENT_SURFACEReady) { _EGL_BAD_CURRENT_SURFACEContent = SGetField<int>(LocalBridgeClazz, "EGL_BAD_CURRENT_SURFACE"); _EGL_BAD_CURRENT_SURFACEReady = true; } return _EGL_BAD_CURRENT_SURFACEContent; } }
        private static int _EGL_BAD_CURRENT_SURFACEContent = default;
        private static bool _EGL_BAD_CURRENT_SURFACEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_BAD_DISPLAY"/>
        /// </summary>
        public static int EGL_BAD_DISPLAY { get { if (!_EGL_BAD_DISPLAYReady) { _EGL_BAD_DISPLAYContent = SGetField<int>(LocalBridgeClazz, "EGL_BAD_DISPLAY"); _EGL_BAD_DISPLAYReady = true; } return _EGL_BAD_DISPLAYContent; } }
        private static int _EGL_BAD_DISPLAYContent = default;
        private static bool _EGL_BAD_DISPLAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_BAD_MATCH"/>
        /// </summary>
        public static int EGL_BAD_MATCH { get { if (!_EGL_BAD_MATCHReady) { _EGL_BAD_MATCHContent = SGetField<int>(LocalBridgeClazz, "EGL_BAD_MATCH"); _EGL_BAD_MATCHReady = true; } return _EGL_BAD_MATCHContent; } }
        private static int _EGL_BAD_MATCHContent = default;
        private static bool _EGL_BAD_MATCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_BAD_NATIVE_PIXMAP"/>
        /// </summary>
        public static int EGL_BAD_NATIVE_PIXMAP { get { if (!_EGL_BAD_NATIVE_PIXMAPReady) { _EGL_BAD_NATIVE_PIXMAPContent = SGetField<int>(LocalBridgeClazz, "EGL_BAD_NATIVE_PIXMAP"); _EGL_BAD_NATIVE_PIXMAPReady = true; } return _EGL_BAD_NATIVE_PIXMAPContent; } }
        private static int _EGL_BAD_NATIVE_PIXMAPContent = default;
        private static bool _EGL_BAD_NATIVE_PIXMAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_BAD_NATIVE_WINDOW"/>
        /// </summary>
        public static int EGL_BAD_NATIVE_WINDOW { get { if (!_EGL_BAD_NATIVE_WINDOWReady) { _EGL_BAD_NATIVE_WINDOWContent = SGetField<int>(LocalBridgeClazz, "EGL_BAD_NATIVE_WINDOW"); _EGL_BAD_NATIVE_WINDOWReady = true; } return _EGL_BAD_NATIVE_WINDOWContent; } }
        private static int _EGL_BAD_NATIVE_WINDOWContent = default;
        private static bool _EGL_BAD_NATIVE_WINDOWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_BAD_PARAMETER"/>
        /// </summary>
        public static int EGL_BAD_PARAMETER { get { if (!_EGL_BAD_PARAMETERReady) { _EGL_BAD_PARAMETERContent = SGetField<int>(LocalBridgeClazz, "EGL_BAD_PARAMETER"); _EGL_BAD_PARAMETERReady = true; } return _EGL_BAD_PARAMETERContent; } }
        private static int _EGL_BAD_PARAMETERContent = default;
        private static bool _EGL_BAD_PARAMETERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_BAD_SURFACE"/>
        /// </summary>
        public static int EGL_BAD_SURFACE { get { if (!_EGL_BAD_SURFACEReady) { _EGL_BAD_SURFACEContent = SGetField<int>(LocalBridgeClazz, "EGL_BAD_SURFACE"); _EGL_BAD_SURFACEReady = true; } return _EGL_BAD_SURFACEContent; } }
        private static int _EGL_BAD_SURFACEContent = default;
        private static bool _EGL_BAD_SURFACEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_BLUE_SIZE"/>
        /// </summary>
        public static int EGL_BLUE_SIZE { get { if (!_EGL_BLUE_SIZEReady) { _EGL_BLUE_SIZEContent = SGetField<int>(LocalBridgeClazz, "EGL_BLUE_SIZE"); _EGL_BLUE_SIZEReady = true; } return _EGL_BLUE_SIZEContent; } }
        private static int _EGL_BLUE_SIZEContent = default;
        private static bool _EGL_BLUE_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_BUFFER_SIZE"/>
        /// </summary>
        public static int EGL_BUFFER_SIZE { get { if (!_EGL_BUFFER_SIZEReady) { _EGL_BUFFER_SIZEContent = SGetField<int>(LocalBridgeClazz, "EGL_BUFFER_SIZE"); _EGL_BUFFER_SIZEReady = true; } return _EGL_BUFFER_SIZEContent; } }
        private static int _EGL_BUFFER_SIZEContent = default;
        private static bool _EGL_BUFFER_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_COLOR_BUFFER_TYPE"/>
        /// </summary>
        public static int EGL_COLOR_BUFFER_TYPE { get { if (!_EGL_COLOR_BUFFER_TYPEReady) { _EGL_COLOR_BUFFER_TYPEContent = SGetField<int>(LocalBridgeClazz, "EGL_COLOR_BUFFER_TYPE"); _EGL_COLOR_BUFFER_TYPEReady = true; } return _EGL_COLOR_BUFFER_TYPEContent; } }
        private static int _EGL_COLOR_BUFFER_TYPEContent = default;
        private static bool _EGL_COLOR_BUFFER_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_COLORSPACE"/>
        /// </summary>
        public static int EGL_COLORSPACE { get { if (!_EGL_COLORSPACEReady) { _EGL_COLORSPACEContent = SGetField<int>(LocalBridgeClazz, "EGL_COLORSPACE"); _EGL_COLORSPACEReady = true; } return _EGL_COLORSPACEContent; } }
        private static int _EGL_COLORSPACEContent = default;
        private static bool _EGL_COLORSPACEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_CONFIG_CAVEAT"/>
        /// </summary>
        public static int EGL_CONFIG_CAVEAT { get { if (!_EGL_CONFIG_CAVEATReady) { _EGL_CONFIG_CAVEATContent = SGetField<int>(LocalBridgeClazz, "EGL_CONFIG_CAVEAT"); _EGL_CONFIG_CAVEATReady = true; } return _EGL_CONFIG_CAVEATContent; } }
        private static int _EGL_CONFIG_CAVEATContent = default;
        private static bool _EGL_CONFIG_CAVEATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_CONFIG_ID"/>
        /// </summary>
        public static int EGL_CONFIG_ID { get { if (!_EGL_CONFIG_IDReady) { _EGL_CONFIG_IDContent = SGetField<int>(LocalBridgeClazz, "EGL_CONFIG_ID"); _EGL_CONFIG_IDReady = true; } return _EGL_CONFIG_IDContent; } }
        private static int _EGL_CONFIG_IDContent = default;
        private static bool _EGL_CONFIG_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_CORE_NATIVE_ENGINE"/>
        /// </summary>
        public static int EGL_CORE_NATIVE_ENGINE { get { if (!_EGL_CORE_NATIVE_ENGINEReady) { _EGL_CORE_NATIVE_ENGINEContent = SGetField<int>(LocalBridgeClazz, "EGL_CORE_NATIVE_ENGINE"); _EGL_CORE_NATIVE_ENGINEReady = true; } return _EGL_CORE_NATIVE_ENGINEContent; } }
        private static int _EGL_CORE_NATIVE_ENGINEContent = default;
        private static bool _EGL_CORE_NATIVE_ENGINEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_DEPTH_SIZE"/>
        /// </summary>
        public static int EGL_DEPTH_SIZE { get { if (!_EGL_DEPTH_SIZEReady) { _EGL_DEPTH_SIZEContent = SGetField<int>(LocalBridgeClazz, "EGL_DEPTH_SIZE"); _EGL_DEPTH_SIZEReady = true; } return _EGL_DEPTH_SIZEContent; } }
        private static int _EGL_DEPTH_SIZEContent = default;
        private static bool _EGL_DEPTH_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_DONT_CARE"/>
        /// </summary>
        public static int EGL_DONT_CARE { get { if (!_EGL_DONT_CAREReady) { _EGL_DONT_CAREContent = SGetField<int>(LocalBridgeClazz, "EGL_DONT_CARE"); _EGL_DONT_CAREReady = true; } return _EGL_DONT_CAREContent; } }
        private static int _EGL_DONT_CAREContent = default;
        private static bool _EGL_DONT_CAREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_DRAW"/>
        /// </summary>
        public static int EGL_DRAW { get { if (!_EGL_DRAWReady) { _EGL_DRAWContent = SGetField<int>(LocalBridgeClazz, "EGL_DRAW"); _EGL_DRAWReady = true; } return _EGL_DRAWContent; } }
        private static int _EGL_DRAWContent = default;
        private static bool _EGL_DRAWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_EXTENSIONS"/>
        /// </summary>
        public static int EGL_EXTENSIONS { get { if (!_EGL_EXTENSIONSReady) { _EGL_EXTENSIONSContent = SGetField<int>(LocalBridgeClazz, "EGL_EXTENSIONS"); _EGL_EXTENSIONSReady = true; } return _EGL_EXTENSIONSContent; } }
        private static int _EGL_EXTENSIONSContent = default;
        private static bool _EGL_EXTENSIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_GREEN_SIZE"/>
        /// </summary>
        public static int EGL_GREEN_SIZE { get { if (!_EGL_GREEN_SIZEReady) { _EGL_GREEN_SIZEContent = SGetField<int>(LocalBridgeClazz, "EGL_GREEN_SIZE"); _EGL_GREEN_SIZEReady = true; } return _EGL_GREEN_SIZEContent; } }
        private static int _EGL_GREEN_SIZEContent = default;
        private static bool _EGL_GREEN_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_HEIGHT"/>
        /// </summary>
        public static int EGL_HEIGHT { get { if (!_EGL_HEIGHTReady) { _EGL_HEIGHTContent = SGetField<int>(LocalBridgeClazz, "EGL_HEIGHT"); _EGL_HEIGHTReady = true; } return _EGL_HEIGHTContent; } }
        private static int _EGL_HEIGHTContent = default;
        private static bool _EGL_HEIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_HORIZONTAL_RESOLUTION"/>
        /// </summary>
        public static int EGL_HORIZONTAL_RESOLUTION { get { if (!_EGL_HORIZONTAL_RESOLUTIONReady) { _EGL_HORIZONTAL_RESOLUTIONContent = SGetField<int>(LocalBridgeClazz, "EGL_HORIZONTAL_RESOLUTION"); _EGL_HORIZONTAL_RESOLUTIONReady = true; } return _EGL_HORIZONTAL_RESOLUTIONContent; } }
        private static int _EGL_HORIZONTAL_RESOLUTIONContent = default;
        private static bool _EGL_HORIZONTAL_RESOLUTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_LARGEST_PBUFFER"/>
        /// </summary>
        public static int EGL_LARGEST_PBUFFER { get { if (!_EGL_LARGEST_PBUFFERReady) { _EGL_LARGEST_PBUFFERContent = SGetField<int>(LocalBridgeClazz, "EGL_LARGEST_PBUFFER"); _EGL_LARGEST_PBUFFERReady = true; } return _EGL_LARGEST_PBUFFERContent; } }
        private static int _EGL_LARGEST_PBUFFERContent = default;
        private static bool _EGL_LARGEST_PBUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_LEVEL"/>
        /// </summary>
        public static int EGL_LEVEL { get { if (!_EGL_LEVELReady) { _EGL_LEVELContent = SGetField<int>(LocalBridgeClazz, "EGL_LEVEL"); _EGL_LEVELReady = true; } return _EGL_LEVELContent; } }
        private static int _EGL_LEVELContent = default;
        private static bool _EGL_LEVELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_LUMINANCE_BUFFER"/>
        /// </summary>
        public static int EGL_LUMINANCE_BUFFER { get { if (!_EGL_LUMINANCE_BUFFERReady) { _EGL_LUMINANCE_BUFFERContent = SGetField<int>(LocalBridgeClazz, "EGL_LUMINANCE_BUFFER"); _EGL_LUMINANCE_BUFFERReady = true; } return _EGL_LUMINANCE_BUFFERContent; } }
        private static int _EGL_LUMINANCE_BUFFERContent = default;
        private static bool _EGL_LUMINANCE_BUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_LUMINANCE_SIZE"/>
        /// </summary>
        public static int EGL_LUMINANCE_SIZE { get { if (!_EGL_LUMINANCE_SIZEReady) { _EGL_LUMINANCE_SIZEContent = SGetField<int>(LocalBridgeClazz, "EGL_LUMINANCE_SIZE"); _EGL_LUMINANCE_SIZEReady = true; } return _EGL_LUMINANCE_SIZEContent; } }
        private static int _EGL_LUMINANCE_SIZEContent = default;
        private static bool _EGL_LUMINANCE_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_MAX_PBUFFER_HEIGHT"/>
        /// </summary>
        public static int EGL_MAX_PBUFFER_HEIGHT { get { if (!_EGL_MAX_PBUFFER_HEIGHTReady) { _EGL_MAX_PBUFFER_HEIGHTContent = SGetField<int>(LocalBridgeClazz, "EGL_MAX_PBUFFER_HEIGHT"); _EGL_MAX_PBUFFER_HEIGHTReady = true; } return _EGL_MAX_PBUFFER_HEIGHTContent; } }
        private static int _EGL_MAX_PBUFFER_HEIGHTContent = default;
        private static bool _EGL_MAX_PBUFFER_HEIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_MAX_PBUFFER_PIXELS"/>
        /// </summary>
        public static int EGL_MAX_PBUFFER_PIXELS { get { if (!_EGL_MAX_PBUFFER_PIXELSReady) { _EGL_MAX_PBUFFER_PIXELSContent = SGetField<int>(LocalBridgeClazz, "EGL_MAX_PBUFFER_PIXELS"); _EGL_MAX_PBUFFER_PIXELSReady = true; } return _EGL_MAX_PBUFFER_PIXELSContent; } }
        private static int _EGL_MAX_PBUFFER_PIXELSContent = default;
        private static bool _EGL_MAX_PBUFFER_PIXELSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_MAX_PBUFFER_WIDTH"/>
        /// </summary>
        public static int EGL_MAX_PBUFFER_WIDTH { get { if (!_EGL_MAX_PBUFFER_WIDTHReady) { _EGL_MAX_PBUFFER_WIDTHContent = SGetField<int>(LocalBridgeClazz, "EGL_MAX_PBUFFER_WIDTH"); _EGL_MAX_PBUFFER_WIDTHReady = true; } return _EGL_MAX_PBUFFER_WIDTHContent; } }
        private static int _EGL_MAX_PBUFFER_WIDTHContent = default;
        private static bool _EGL_MAX_PBUFFER_WIDTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_NATIVE_RENDERABLE"/>
        /// </summary>
        public static int EGL_NATIVE_RENDERABLE { get { if (!_EGL_NATIVE_RENDERABLEReady) { _EGL_NATIVE_RENDERABLEContent = SGetField<int>(LocalBridgeClazz, "EGL_NATIVE_RENDERABLE"); _EGL_NATIVE_RENDERABLEReady = true; } return _EGL_NATIVE_RENDERABLEContent; } }
        private static int _EGL_NATIVE_RENDERABLEContent = default;
        private static bool _EGL_NATIVE_RENDERABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_NATIVE_VISUAL_ID"/>
        /// </summary>
        public static int EGL_NATIVE_VISUAL_ID { get { if (!_EGL_NATIVE_VISUAL_IDReady) { _EGL_NATIVE_VISUAL_IDContent = SGetField<int>(LocalBridgeClazz, "EGL_NATIVE_VISUAL_ID"); _EGL_NATIVE_VISUAL_IDReady = true; } return _EGL_NATIVE_VISUAL_IDContent; } }
        private static int _EGL_NATIVE_VISUAL_IDContent = default;
        private static bool _EGL_NATIVE_VISUAL_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_NATIVE_VISUAL_TYPE"/>
        /// </summary>
        public static int EGL_NATIVE_VISUAL_TYPE { get { if (!_EGL_NATIVE_VISUAL_TYPEReady) { _EGL_NATIVE_VISUAL_TYPEContent = SGetField<int>(LocalBridgeClazz, "EGL_NATIVE_VISUAL_TYPE"); _EGL_NATIVE_VISUAL_TYPEReady = true; } return _EGL_NATIVE_VISUAL_TYPEContent; } }
        private static int _EGL_NATIVE_VISUAL_TYPEContent = default;
        private static bool _EGL_NATIVE_VISUAL_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_NON_CONFORMANT_CONFIG"/>
        /// </summary>
        public static int EGL_NON_CONFORMANT_CONFIG { get { if (!_EGL_NON_CONFORMANT_CONFIGReady) { _EGL_NON_CONFORMANT_CONFIGContent = SGetField<int>(LocalBridgeClazz, "EGL_NON_CONFORMANT_CONFIG"); _EGL_NON_CONFORMANT_CONFIGReady = true; } return _EGL_NON_CONFORMANT_CONFIGContent; } }
        private static int _EGL_NON_CONFORMANT_CONFIGContent = default;
        private static bool _EGL_NON_CONFORMANT_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_NONE"/>
        /// </summary>
        public static int EGL_NONE { get { if (!_EGL_NONEReady) { _EGL_NONEContent = SGetField<int>(LocalBridgeClazz, "EGL_NONE"); _EGL_NONEReady = true; } return _EGL_NONEContent; } }
        private static int _EGL_NONEContent = default;
        private static bool _EGL_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_NOT_INITIALIZED"/>
        /// </summary>
        public static int EGL_NOT_INITIALIZED { get { if (!_EGL_NOT_INITIALIZEDReady) { _EGL_NOT_INITIALIZEDContent = SGetField<int>(LocalBridgeClazz, "EGL_NOT_INITIALIZED"); _EGL_NOT_INITIALIZEDReady = true; } return _EGL_NOT_INITIALIZEDContent; } }
        private static int _EGL_NOT_INITIALIZEDContent = default;
        private static bool _EGL_NOT_INITIALIZEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_PBUFFER_BIT"/>
        /// </summary>
        public static int EGL_PBUFFER_BIT { get { if (!_EGL_PBUFFER_BITReady) { _EGL_PBUFFER_BITContent = SGetField<int>(LocalBridgeClazz, "EGL_PBUFFER_BIT"); _EGL_PBUFFER_BITReady = true; } return _EGL_PBUFFER_BITContent; } }
        private static int _EGL_PBUFFER_BITContent = default;
        private static bool _EGL_PBUFFER_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_PIXEL_ASPECT_RATIO"/>
        /// </summary>
        public static int EGL_PIXEL_ASPECT_RATIO { get { if (!_EGL_PIXEL_ASPECT_RATIOReady) { _EGL_PIXEL_ASPECT_RATIOContent = SGetField<int>(LocalBridgeClazz, "EGL_PIXEL_ASPECT_RATIO"); _EGL_PIXEL_ASPECT_RATIOReady = true; } return _EGL_PIXEL_ASPECT_RATIOContent; } }
        private static int _EGL_PIXEL_ASPECT_RATIOContent = default;
        private static bool _EGL_PIXEL_ASPECT_RATIOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_PIXMAP_BIT"/>
        /// </summary>
        public static int EGL_PIXMAP_BIT { get { if (!_EGL_PIXMAP_BITReady) { _EGL_PIXMAP_BITContent = SGetField<int>(LocalBridgeClazz, "EGL_PIXMAP_BIT"); _EGL_PIXMAP_BITReady = true; } return _EGL_PIXMAP_BITContent; } }
        private static int _EGL_PIXMAP_BITContent = default;
        private static bool _EGL_PIXMAP_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_READ"/>
        /// </summary>
        public static int EGL_READ { get { if (!_EGL_READReady) { _EGL_READContent = SGetField<int>(LocalBridgeClazz, "EGL_READ"); _EGL_READReady = true; } return _EGL_READContent; } }
        private static int _EGL_READContent = default;
        private static bool _EGL_READReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_RED_SIZE"/>
        /// </summary>
        public static int EGL_RED_SIZE { get { if (!_EGL_RED_SIZEReady) { _EGL_RED_SIZEContent = SGetField<int>(LocalBridgeClazz, "EGL_RED_SIZE"); _EGL_RED_SIZEReady = true; } return _EGL_RED_SIZEContent; } }
        private static int _EGL_RED_SIZEContent = default;
        private static bool _EGL_RED_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_RENDER_BUFFER"/>
        /// </summary>
        public static int EGL_RENDER_BUFFER { get { if (!_EGL_RENDER_BUFFERReady) { _EGL_RENDER_BUFFERContent = SGetField<int>(LocalBridgeClazz, "EGL_RENDER_BUFFER"); _EGL_RENDER_BUFFERReady = true; } return _EGL_RENDER_BUFFERContent; } }
        private static int _EGL_RENDER_BUFFERContent = default;
        private static bool _EGL_RENDER_BUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_RENDERABLE_TYPE"/>
        /// </summary>
        public static int EGL_RENDERABLE_TYPE { get { if (!_EGL_RENDERABLE_TYPEReady) { _EGL_RENDERABLE_TYPEContent = SGetField<int>(LocalBridgeClazz, "EGL_RENDERABLE_TYPE"); _EGL_RENDERABLE_TYPEReady = true; } return _EGL_RENDERABLE_TYPEContent; } }
        private static int _EGL_RENDERABLE_TYPEContent = default;
        private static bool _EGL_RENDERABLE_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_RGB_BUFFER"/>
        /// </summary>
        public static int EGL_RGB_BUFFER { get { if (!_EGL_RGB_BUFFERReady) { _EGL_RGB_BUFFERContent = SGetField<int>(LocalBridgeClazz, "EGL_RGB_BUFFER"); _EGL_RGB_BUFFERReady = true; } return _EGL_RGB_BUFFERContent; } }
        private static int _EGL_RGB_BUFFERContent = default;
        private static bool _EGL_RGB_BUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_SAMPLE_BUFFERS"/>
        /// </summary>
        public static int EGL_SAMPLE_BUFFERS { get { if (!_EGL_SAMPLE_BUFFERSReady) { _EGL_SAMPLE_BUFFERSContent = SGetField<int>(LocalBridgeClazz, "EGL_SAMPLE_BUFFERS"); _EGL_SAMPLE_BUFFERSReady = true; } return _EGL_SAMPLE_BUFFERSContent; } }
        private static int _EGL_SAMPLE_BUFFERSContent = default;
        private static bool _EGL_SAMPLE_BUFFERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_SAMPLES"/>
        /// </summary>
        public static int EGL_SAMPLES { get { if (!_EGL_SAMPLESReady) { _EGL_SAMPLESContent = SGetField<int>(LocalBridgeClazz, "EGL_SAMPLES"); _EGL_SAMPLESReady = true; } return _EGL_SAMPLESContent; } }
        private static int _EGL_SAMPLESContent = default;
        private static bool _EGL_SAMPLESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_SINGLE_BUFFER"/>
        /// </summary>
        public static int EGL_SINGLE_BUFFER { get { if (!_EGL_SINGLE_BUFFERReady) { _EGL_SINGLE_BUFFERContent = SGetField<int>(LocalBridgeClazz, "EGL_SINGLE_BUFFER"); _EGL_SINGLE_BUFFERReady = true; } return _EGL_SINGLE_BUFFERContent; } }
        private static int _EGL_SINGLE_BUFFERContent = default;
        private static bool _EGL_SINGLE_BUFFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_SLOW_CONFIG"/>
        /// </summary>
        public static int EGL_SLOW_CONFIG { get { if (!_EGL_SLOW_CONFIGReady) { _EGL_SLOW_CONFIGContent = SGetField<int>(LocalBridgeClazz, "EGL_SLOW_CONFIG"); _EGL_SLOW_CONFIGReady = true; } return _EGL_SLOW_CONFIGContent; } }
        private static int _EGL_SLOW_CONFIGContent = default;
        private static bool _EGL_SLOW_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_STENCIL_SIZE"/>
        /// </summary>
        public static int EGL_STENCIL_SIZE { get { if (!_EGL_STENCIL_SIZEReady) { _EGL_STENCIL_SIZEContent = SGetField<int>(LocalBridgeClazz, "EGL_STENCIL_SIZE"); _EGL_STENCIL_SIZEReady = true; } return _EGL_STENCIL_SIZEContent; } }
        private static int _EGL_STENCIL_SIZEContent = default;
        private static bool _EGL_STENCIL_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_SUCCESS"/>
        /// </summary>
        public static int EGL_SUCCESS { get { if (!_EGL_SUCCESSReady) { _EGL_SUCCESSContent = SGetField<int>(LocalBridgeClazz, "EGL_SUCCESS"); _EGL_SUCCESSReady = true; } return _EGL_SUCCESSContent; } }
        private static int _EGL_SUCCESSContent = default;
        private static bool _EGL_SUCCESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_SURFACE_TYPE"/>
        /// </summary>
        public static int EGL_SURFACE_TYPE { get { if (!_EGL_SURFACE_TYPEReady) { _EGL_SURFACE_TYPEContent = SGetField<int>(LocalBridgeClazz, "EGL_SURFACE_TYPE"); _EGL_SURFACE_TYPEReady = true; } return _EGL_SURFACE_TYPEContent; } }
        private static int _EGL_SURFACE_TYPEContent = default;
        private static bool _EGL_SURFACE_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_TRANSPARENT_BLUE_VALUE"/>
        /// </summary>
        public static int EGL_TRANSPARENT_BLUE_VALUE { get { if (!_EGL_TRANSPARENT_BLUE_VALUEReady) { _EGL_TRANSPARENT_BLUE_VALUEContent = SGetField<int>(LocalBridgeClazz, "EGL_TRANSPARENT_BLUE_VALUE"); _EGL_TRANSPARENT_BLUE_VALUEReady = true; } return _EGL_TRANSPARENT_BLUE_VALUEContent; } }
        private static int _EGL_TRANSPARENT_BLUE_VALUEContent = default;
        private static bool _EGL_TRANSPARENT_BLUE_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_TRANSPARENT_GREEN_VALUE"/>
        /// </summary>
        public static int EGL_TRANSPARENT_GREEN_VALUE { get { if (!_EGL_TRANSPARENT_GREEN_VALUEReady) { _EGL_TRANSPARENT_GREEN_VALUEContent = SGetField<int>(LocalBridgeClazz, "EGL_TRANSPARENT_GREEN_VALUE"); _EGL_TRANSPARENT_GREEN_VALUEReady = true; } return _EGL_TRANSPARENT_GREEN_VALUEContent; } }
        private static int _EGL_TRANSPARENT_GREEN_VALUEContent = default;
        private static bool _EGL_TRANSPARENT_GREEN_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_TRANSPARENT_RED_VALUE"/>
        /// </summary>
        public static int EGL_TRANSPARENT_RED_VALUE { get { if (!_EGL_TRANSPARENT_RED_VALUEReady) { _EGL_TRANSPARENT_RED_VALUEContent = SGetField<int>(LocalBridgeClazz, "EGL_TRANSPARENT_RED_VALUE"); _EGL_TRANSPARENT_RED_VALUEReady = true; } return _EGL_TRANSPARENT_RED_VALUEContent; } }
        private static int _EGL_TRANSPARENT_RED_VALUEContent = default;
        private static bool _EGL_TRANSPARENT_RED_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_TRANSPARENT_RGB"/>
        /// </summary>
        public static int EGL_TRANSPARENT_RGB { get { if (!_EGL_TRANSPARENT_RGBReady) { _EGL_TRANSPARENT_RGBContent = SGetField<int>(LocalBridgeClazz, "EGL_TRANSPARENT_RGB"); _EGL_TRANSPARENT_RGBReady = true; } return _EGL_TRANSPARENT_RGBContent; } }
        private static int _EGL_TRANSPARENT_RGBContent = default;
        private static bool _EGL_TRANSPARENT_RGBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_TRANSPARENT_TYPE"/>
        /// </summary>
        public static int EGL_TRANSPARENT_TYPE { get { if (!_EGL_TRANSPARENT_TYPEReady) { _EGL_TRANSPARENT_TYPEContent = SGetField<int>(LocalBridgeClazz, "EGL_TRANSPARENT_TYPE"); _EGL_TRANSPARENT_TYPEReady = true; } return _EGL_TRANSPARENT_TYPEContent; } }
        private static int _EGL_TRANSPARENT_TYPEContent = default;
        private static bool _EGL_TRANSPARENT_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_VENDOR"/>
        /// </summary>
        public static int EGL_VENDOR { get { if (!_EGL_VENDORReady) { _EGL_VENDORContent = SGetField<int>(LocalBridgeClazz, "EGL_VENDOR"); _EGL_VENDORReady = true; } return _EGL_VENDORContent; } }
        private static int _EGL_VENDORContent = default;
        private static bool _EGL_VENDORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_VERSION"/>
        /// </summary>
        public static int EGL_VERSION { get { if (!_EGL_VERSIONReady) { _EGL_VERSIONContent = SGetField<int>(LocalBridgeClazz, "EGL_VERSION"); _EGL_VERSIONReady = true; } return _EGL_VERSIONContent; } }
        private static int _EGL_VERSIONContent = default;
        private static bool _EGL_VERSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_VERTICAL_RESOLUTION"/>
        /// </summary>
        public static int EGL_VERTICAL_RESOLUTION { get { if (!_EGL_VERTICAL_RESOLUTIONReady) { _EGL_VERTICAL_RESOLUTIONContent = SGetField<int>(LocalBridgeClazz, "EGL_VERTICAL_RESOLUTION"); _EGL_VERTICAL_RESOLUTIONReady = true; } return _EGL_VERTICAL_RESOLUTIONContent; } }
        private static int _EGL_VERTICAL_RESOLUTIONContent = default;
        private static bool _EGL_VERTICAL_RESOLUTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_WIDTH"/>
        /// </summary>
        public static int EGL_WIDTH { get { if (!_EGL_WIDTHReady) { _EGL_WIDTHContent = SGetField<int>(LocalBridgeClazz, "EGL_WIDTH"); _EGL_WIDTHReady = true; } return _EGL_WIDTHContent; } }
        private static int _EGL_WIDTHContent = default;
        private static bool _EGL_WIDTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_WINDOW_BIT"/>
        /// </summary>
        public static int EGL_WINDOW_BIT { get { if (!_EGL_WINDOW_BITReady) { _EGL_WINDOW_BITContent = SGetField<int>(LocalBridgeClazz, "EGL_WINDOW_BIT"); _EGL_WINDOW_BITReady = true; } return _EGL_WINDOW_BITContent; } }
        private static int _EGL_WINDOW_BITContent = default;
        private static bool _EGL_WINDOW_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_DEFAULT_DISPLAY"/>
        /// </summary>
        public static object EGL_DEFAULT_DISPLAY { get { if (!_EGL_DEFAULT_DISPLAYReady) { _EGL_DEFAULT_DISPLAYContent = SGetField(LocalBridgeClazz, "EGL_DEFAULT_DISPLAY"); _EGL_DEFAULT_DISPLAYReady = true; } return _EGL_DEFAULT_DISPLAYContent; } }
        private static object _EGL_DEFAULT_DISPLAYContent = default;
        private static bool _EGL_DEFAULT_DISPLAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_NO_CONTEXT"/>
        /// </summary>
        public static Javax.Microedition.Khronos.Egl.EGLContext EGL_NO_CONTEXT { get { if (!_EGL_NO_CONTEXTReady) { _EGL_NO_CONTEXTContent = SGetField<Javax.Microedition.Khronos.Egl.EGLContext>(LocalBridgeClazz, "EGL_NO_CONTEXT"); _EGL_NO_CONTEXTReady = true; } return _EGL_NO_CONTEXTContent; } }
        private static Javax.Microedition.Khronos.Egl.EGLContext _EGL_NO_CONTEXTContent = default;
        private static bool _EGL_NO_CONTEXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_NO_DISPLAY"/>
        /// </summary>
        public static Javax.Microedition.Khronos.Egl.EGLDisplay EGL_NO_DISPLAY { get { if (!_EGL_NO_DISPLAYReady) { _EGL_NO_DISPLAYContent = SGetField<Javax.Microedition.Khronos.Egl.EGLDisplay>(LocalBridgeClazz, "EGL_NO_DISPLAY"); _EGL_NO_DISPLAYReady = true; } return _EGL_NO_DISPLAYContent; } }
        private static Javax.Microedition.Khronos.Egl.EGLDisplay _EGL_NO_DISPLAYContent = default;
        private static bool _EGL_NO_DISPLAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#EGL_NO_SURFACE"/>
        /// </summary>
        public static Javax.Microedition.Khronos.Egl.EGLSurface EGL_NO_SURFACE { get { if (!_EGL_NO_SURFACEReady) { _EGL_NO_SURFACEContent = SGetField<Javax.Microedition.Khronos.Egl.EGLSurface>(LocalBridgeClazz, "EGL_NO_SURFACE"); _EGL_NO_SURFACEReady = true; } return _EGL_NO_SURFACEContent; } }
        private static Javax.Microedition.Khronos.Egl.EGLSurface _EGL_NO_SURFACEContent = default;
        private static bool _EGL_NO_SURFACEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglChooseConfig(javax.microedition.khronos.egl.EGLDisplay,int[],javax.microedition.khronos.egl.EGLConfig[],int,int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Microedition.Khronos.Egl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Javax.Microedition.Khronos.Egl.EGLConfig"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool EglChooseConfig(Javax.Microedition.Khronos.Egl.EGLDisplay arg0, int[] arg1, Javax.Microedition.Khronos.Egl.EGLConfig[] arg2, int arg3, int[] arg4)
        {
            return IExecute<bool>("eglChooseConfig", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglCopyBuffers(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Microedition.Khronos.Egl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="Javax.Microedition.Khronos.Egl.EGLSurface"/></param>
        /// <param name="arg2"><see cref="object"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool EglCopyBuffers(Javax.Microedition.Khronos.Egl.EGLDisplay arg0, Javax.Microedition.Khronos.Egl.EGLSurface arg1, object arg2)
        {
            return IExecute<bool>("eglCopyBuffers", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglDestroyContext(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Microedition.Khronos.Egl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="Javax.Microedition.Khronos.Egl.EGLContext"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool EglDestroyContext(Javax.Microedition.Khronos.Egl.EGLDisplay arg0, Javax.Microedition.Khronos.Egl.EGLContext arg1)
        {
            return IExecute<bool>("eglDestroyContext", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglDestroySurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Microedition.Khronos.Egl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="Javax.Microedition.Khronos.Egl.EGLSurface"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool EglDestroySurface(Javax.Microedition.Khronos.Egl.EGLDisplay arg0, Javax.Microedition.Khronos.Egl.EGLSurface arg1)
        {
            return IExecute<bool>("eglDestroySurface", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglGetConfigAttrib(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Microedition.Khronos.Egl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="Javax.Microedition.Khronos.Egl.EGLConfig"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool EglGetConfigAttrib(Javax.Microedition.Khronos.Egl.EGLDisplay arg0, Javax.Microedition.Khronos.Egl.EGLConfig arg1, int arg2, int[] arg3)
        {
            return IExecute<bool>("eglGetConfigAttrib", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglGetConfigs(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[],int,int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Microedition.Khronos.Egl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="Javax.Microedition.Khronos.Egl.EGLConfig"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool EglGetConfigs(Javax.Microedition.Khronos.Egl.EGLDisplay arg0, Javax.Microedition.Khronos.Egl.EGLConfig[] arg1, int arg2, int[] arg3)
        {
            return IExecute<bool>("eglGetConfigs", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglInitialize(javax.microedition.khronos.egl.EGLDisplay,int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Microedition.Khronos.Egl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool EglInitialize(Javax.Microedition.Khronos.Egl.EGLDisplay arg0, int[] arg1)
        {
            return IExecute<bool>("eglInitialize", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglMakeCurrent(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLContext)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Microedition.Khronos.Egl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="Javax.Microedition.Khronos.Egl.EGLSurface"/></param>
        /// <param name="arg2"><see cref="Javax.Microedition.Khronos.Egl.EGLSurface"/></param>
        /// <param name="arg3"><see cref="Javax.Microedition.Khronos.Egl.EGLContext"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool EglMakeCurrent(Javax.Microedition.Khronos.Egl.EGLDisplay arg0, Javax.Microedition.Khronos.Egl.EGLSurface arg1, Javax.Microedition.Khronos.Egl.EGLSurface arg2, Javax.Microedition.Khronos.Egl.EGLContext arg3)
        {
            return IExecute<bool>("eglMakeCurrent", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglQueryContext(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext,int,int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Microedition.Khronos.Egl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="Javax.Microedition.Khronos.Egl.EGLContext"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool EglQueryContext(Javax.Microedition.Khronos.Egl.EGLDisplay arg0, Javax.Microedition.Khronos.Egl.EGLContext arg1, int arg2, int[] arg3)
        {
            return IExecute<bool>("eglQueryContext", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglQuerySurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,int,int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Microedition.Khronos.Egl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="Javax.Microedition.Khronos.Egl.EGLSurface"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool EglQuerySurface(Javax.Microedition.Khronos.Egl.EGLDisplay arg0, Javax.Microedition.Khronos.Egl.EGLSurface arg1, int arg2, int[] arg3)
        {
            return IExecute<bool>("eglQuerySurface", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglSwapBuffers(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Microedition.Khronos.Egl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="Javax.Microedition.Khronos.Egl.EGLSurface"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool EglSwapBuffers(Javax.Microedition.Khronos.Egl.EGLDisplay arg0, Javax.Microedition.Khronos.Egl.EGLSurface arg1)
        {
            return IExecute<bool>("eglSwapBuffers", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglTerminate(javax.microedition.khronos.egl.EGLDisplay)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Microedition.Khronos.Egl.EGLDisplay"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool EglTerminate(Javax.Microedition.Khronos.Egl.EGLDisplay arg0)
        {
            return IExecuteWithSignature<bool>("eglTerminate", "(Ljavax/microedition/khronos/egl/EGLDisplay;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglWaitGL()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool EglWaitGL()
        {
            return IExecuteWithSignature<bool>("eglWaitGL", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglWaitNative(int,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="object"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool EglWaitNative(int arg0, object arg1)
        {
            return IExecute<bool>("eglWaitNative", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglGetError()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int EglGetError()
        {
            return IExecuteWithSignature<int>("eglGetError", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglQueryString(javax.microedition.khronos.egl.EGLDisplay,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Microedition.Khronos.Egl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String EglQueryString(Javax.Microedition.Khronos.Egl.EGLDisplay arg0, int arg1)
        {
            return IExecute<Java.Lang.String>("eglQueryString", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglCreateContext(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,javax.microedition.khronos.egl.EGLContext,int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Microedition.Khronos.Egl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="Javax.Microedition.Khronos.Egl.EGLConfig"/></param>
        /// <param name="arg2"><see cref="Javax.Microedition.Khronos.Egl.EGLContext"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="Javax.Microedition.Khronos.Egl.EGLContext"/></returns>
        public Javax.Microedition.Khronos.Egl.EGLContext EglCreateContext(Javax.Microedition.Khronos.Egl.EGLDisplay arg0, Javax.Microedition.Khronos.Egl.EGLConfig arg1, Javax.Microedition.Khronos.Egl.EGLContext arg2, int[] arg3)
        {
            return IExecute<Javax.Microedition.Khronos.Egl.EGLContext>("eglCreateContext", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglGetCurrentContext()"/>
        /// </summary>
        /// <returns><see cref="Javax.Microedition.Khronos.Egl.EGLContext"/></returns>
        public Javax.Microedition.Khronos.Egl.EGLContext EglGetCurrentContext()
        {
            return IExecuteWithSignature<Javax.Microedition.Khronos.Egl.EGLContext>("eglGetCurrentContext", "()Ljavax/microedition/khronos/egl/EGLContext;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglGetCurrentDisplay()"/>
        /// </summary>
        /// <returns><see cref="Javax.Microedition.Khronos.Egl.EGLDisplay"/></returns>
        public Javax.Microedition.Khronos.Egl.EGLDisplay EglGetCurrentDisplay()
        {
            return IExecuteWithSignature<Javax.Microedition.Khronos.Egl.EGLDisplay>("eglGetCurrentDisplay", "()Ljavax/microedition/khronos/egl/EGLDisplay;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglGetDisplay(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="Javax.Microedition.Khronos.Egl.EGLDisplay"/></returns>
        public Javax.Microedition.Khronos.Egl.EGLDisplay EglGetDisplay(object arg0)
        {
            return IExecuteWithSignature<Javax.Microedition.Khronos.Egl.EGLDisplay>("eglGetDisplay", "(Ljava/lang/Object;)Ljavax/microedition/khronos/egl/EGLDisplay;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglCreatePbufferSurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Microedition.Khronos.Egl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="Javax.Microedition.Khronos.Egl.EGLConfig"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="Javax.Microedition.Khronos.Egl.EGLSurface"/></returns>
        public Javax.Microedition.Khronos.Egl.EGLSurface EglCreatePbufferSurface(Javax.Microedition.Khronos.Egl.EGLDisplay arg0, Javax.Microedition.Khronos.Egl.EGLConfig arg1, int[] arg2)
        {
            return IExecute<Javax.Microedition.Khronos.Egl.EGLSurface>("eglCreatePbufferSurface", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglCreatePixmapSurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object,int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Microedition.Khronos.Egl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="Javax.Microedition.Khronos.Egl.EGLConfig"/></param>
        /// <param name="arg2"><see cref="object"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="Javax.Microedition.Khronos.Egl.EGLSurface"/></returns>
        [global::System.Obsolete()]
        public Javax.Microedition.Khronos.Egl.EGLSurface EglCreatePixmapSurface(Javax.Microedition.Khronos.Egl.EGLDisplay arg0, Javax.Microedition.Khronos.Egl.EGLConfig arg1, object arg2, int[] arg3)
        {
            return IExecute<Javax.Microedition.Khronos.Egl.EGLSurface>("eglCreatePixmapSurface", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglCreateWindowSurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object,int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Javax.Microedition.Khronos.Egl.EGLDisplay"/></param>
        /// <param name="arg1"><see cref="Javax.Microedition.Khronos.Egl.EGLConfig"/></param>
        /// <param name="arg2"><see cref="object"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="Javax.Microedition.Khronos.Egl.EGLSurface"/></returns>
        public Javax.Microedition.Khronos.Egl.EGLSurface EglCreateWindowSurface(Javax.Microedition.Khronos.Egl.EGLDisplay arg0, Javax.Microedition.Khronos.Egl.EGLConfig arg1, object arg2, int[] arg3)
        {
            return IExecute<Javax.Microedition.Khronos.Egl.EGLSurface>("eglCreateWindowSurface", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglGetCurrentSurface(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Javax.Microedition.Khronos.Egl.EGLSurface"/></returns>
        public Javax.Microedition.Khronos.Egl.EGLSurface EglGetCurrentSurface(int arg0)
        {
            return IExecuteWithSignature<Javax.Microedition.Khronos.Egl.EGLSurface>("eglGetCurrentSurface", "(I)Ljavax/microedition/khronos/egl/EGLSurface;", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}